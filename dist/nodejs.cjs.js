'use strict';

var require$$0$2 = require('os');
var require$$1$1 = require('path');
var require$$1 = require('util');
var require$$2 = require('readline');
var require$$0$3 = require('child_process');
var promises = require('fs/promises');
var require$$0$4 = require('fs');
var require$$0$5 = require('events');
var require$$8 = require('net');
var require$$5 = require('crypto');
var require$$2$2 = require('tty');
var require$$6 = require('url');
var require$$9 = require('tls');
var require$$10$1 = require('assert');
var require$$12 = require('stream');
var require$$13 = require('zlib');
var require$$14 = require('buffer');
var require$$15$1 = require('dns');
var require$$2$1 = require('https');
var require$$19 = require('http');
var require$$20 = require('constants');
var require$$1$2 = require('http2');
var require$$0$6 = require('async_hooks');
var require$$10$2 = require('inspector');

const prettyLogStyles = {
    reset: [0, 0],
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    overline: [53, 55],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29],
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    blackBright: [90, 39],
    redBright: [91, 39],
    greenBright: [92, 39],
    yellowBright: [93, 39],
    blueBright: [94, 39],
    magentaBright: [95, 39],
    cyanBright: [96, 39],
    whiteBright: [97, 39],
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    bgBlackBright: [100, 49],
    bgRedBright: [101, 49],
    bgGreenBright: [102, 49],
    bgYellowBright: [103, 49],
    bgBlueBright: [104, 49],
    bgMagentaBright: [105, 49],
    bgCyanBright: [106, 49],
    bgWhiteBright: [107, 49],
};

function formatTemplate(settings, template, values, hideUnsetPlaceholder = false) {
    const templateString = String(template);
    const ansiColorWrap = (placeholderValue, code) => `\u001b[${code[0]}m${placeholderValue}\u001b[${code[1]}m`;
    const styleWrap = (value, style) => {
        if (style != null && typeof style === "string") {
            return ansiColorWrap(value, prettyLogStyles[style]);
        }
        else if (style != null && Array.isArray(style)) {
            return style.reduce((prevValue, thisStyle) => styleWrap(prevValue, thisStyle), value);
        }
        else {
            if (style != null && style[value.trim()] != null) {
                return styleWrap(value, style[value.trim()]);
            }
            else if (style != null && style["*"] != null) {
                return styleWrap(value, style["*"]);
            }
            else {
                return value;
            }
        }
    };
    const defaultStyle = null;
    return templateString.replace(/{{(.+?)}}/g, (_, placeholder) => {
        const value = values[placeholder] != null ? String(values[placeholder]) : hideUnsetPlaceholder ? "" : _;
        return settings.stylePrettyLogs
            ? styleWrap(value, settings?.prettyLogStyles?.[placeholder] ?? defaultStyle) + ansiColorWrap("", prettyLogStyles.reset)
            : value;
    });
}

function formatNumberAddZeros(value, digits = 2, addNumber = 0) {
    if (value != null && isNaN(value)) {
        return "";
    }
    value = value != null ? value + addNumber : value;
    return digits === 2
        ? value == null
            ? "--"
            : value < 10
                ? "0" + value
                : value.toString()
        : value == null
            ? "---"
            : value < 10
                ? "00" + value
                : value < 100
                    ? "0" + value
                    : value.toString();
}

function urlToObject(url) {
    return {
        href: url.href,
        protocol: url.protocol,
        username: url.username,
        password: url.password,
        host: url.host,
        hostname: url.hostname,
        port: url.port,
        pathname: url.pathname,
        search: url.search,
        searchParams: [...url.searchParams].map(([key, value]) => ({ key, value })),
        hash: url.hash,
        origin: url.origin,
    };
}

var Runtime = {
    getCallerStackFrame,
    getErrorTrace,
    getMeta,
    transportJSON,
    transportFormatted: transportFormatted$1,
    isBuffer,
    isError,
    prettyFormatLogObj,
    prettyFormatErrorObj,
};
const meta = {
    runtime: "Nodejs",
    runtimeVersion: process?.version,
    hostname: require$$0$2.hostname ? require$$0$2.hostname() : undefined,
};
function getMeta(logLevelId, logLevelName, stackDepthLevel, hideLogPositionForPerformance, name, parentNames) {
    return Object.assign({}, meta, {
        name,
        parentNames,
        date: new Date(),
        logLevelId,
        logLevelName,
        path: !hideLogPositionForPerformance ? getCallerStackFrame(stackDepthLevel) : undefined,
    });
}
function getCallerStackFrame(stackDepthLevel, error = Error()) {
    return stackLineToStackFrame(error?.stack?.split("\n")?.filter((thisLine) => thisLine.includes("    at "))?.[stackDepthLevel]);
}
function getErrorTrace(error) {
    return error?.stack?.split("\n")?.reduce((result, line) => {
        if (line.includes("    at ")) {
            result.push(stackLineToStackFrame(line));
        }
        return result;
    }, []);
}
function stackLineToStackFrame(line) {
    const pathResult = {
        fullFilePath: undefined,
        fileName: undefined,
        fileNameWithLine: undefined,
        fileColumn: undefined,
        fileLine: undefined,
        filePath: undefined,
        filePathWithLine: undefined,
        method: undefined,
    };
    if (line != null && line.includes("    at ")) {
        line = line.replace(/^\s+at\s+/gm, "");
        const errorStackLine = line.split(" (");
        const fullFilePath = line?.slice(-1) === ")" ? line?.match(/\(([^)]+)\)/)?.[1] : line;
        const pathArray = fullFilePath?.includes(":") ? fullFilePath?.replace("file://", "")?.replace(process.cwd(), "")?.split(":") : undefined;
        const fileColumn = pathArray?.pop();
        const fileLine = pathArray?.pop();
        const filePath = pathArray?.pop();
        const filePathWithLine = require$$1$1.normalize(`${filePath}:${fileLine}`);
        const fileName = filePath?.split("/")?.pop();
        const fileNameWithLine = `${fileName}:${fileLine}`;
        if (filePath != null && filePath.length > 0) {
            pathResult.fullFilePath = fullFilePath;
            pathResult.fileName = fileName;
            pathResult.fileNameWithLine = fileNameWithLine;
            pathResult.fileColumn = fileColumn;
            pathResult.fileLine = fileLine;
            pathResult.filePath = filePath;
            pathResult.filePathWithLine = filePathWithLine;
            pathResult.method = errorStackLine?.[1] != null ? errorStackLine?.[0] : undefined;
        }
    }
    return pathResult;
}
function isError(e) {
    return require$$1.types?.isNativeError != null ? require$$1.types.isNativeError(e) : e instanceof Error;
}
function prettyFormatLogObj(maskedArgs, settings) {
    return maskedArgs.reduce((result, arg) => {
        isError(arg) ? result.errors.push(prettyFormatErrorObj(arg, settings)) : result.args.push(arg);
        return result;
    }, { args: [], errors: [] });
}
function prettyFormatErrorObj(error, settings) {
    const errorStackStr = getErrorTrace(error).map((stackFrame) => {
        return formatTemplate(settings, settings.prettyErrorStackTemplate, { ...stackFrame }, true);
    });
    const placeholderValuesError = {
        errorName: ` ${error.name} `,
        errorMessage: Object.getOwnPropertyNames(error)
            .reduce((result, key) => {
            if (key !== "stack") {
                result.push(error[key]);
            }
            return result;
        }, [])
            .join(", "),
        errorStack: errorStackStr.join("\n"),
    };
    return formatTemplate(settings, settings.prettyErrorTemplate, placeholderValuesError);
}
function transportFormatted$1(logMetaMarkup, logArgs, logErrors, settings) {
    const logErrorsStr = (logErrors.length > 0 && logArgs.length > 0 ? "\n" : "") + logErrors.join("\n");
    settings.prettyInspectOptions.colors = settings.stylePrettyLogs;
    console.log(logMetaMarkup + require$$1.formatWithOptions(settings.prettyInspectOptions, ...logArgs) + logErrorsStr);
}
function transportJSON(json) {
    console.log(jsonStringifyRecursive(json));
    function jsonStringifyRecursive(obj) {
        const cache = new Set();
        return JSON.stringify(obj, (key, value) => {
            if (typeof value === "object" && value !== null) {
                if (cache.has(value)) {
                    return "[Circular]";
                }
                cache.add(value);
            }
            if (typeof value === "bigint") {
                return `${value}`;
            }
            if (typeof value === "undefined") {
                return "[undefined]";
            }
            return value;
        });
    }
}
function isBuffer(arg) {
    return Buffer.isBuffer(arg);
}

class BaseLogger {
    constructor(settings, logObj, stackDepthLevel = 4) {
        this.logObj = logObj;
        this.stackDepthLevel = stackDepthLevel;
        this.runtime = Runtime;
        this.settings = {
            type: settings?.type ?? "pretty",
            name: settings?.name,
            parentNames: settings?.parentNames,
            minLevel: settings?.minLevel ?? 0,
            argumentsArrayName: settings?.argumentsArrayName,
            hideLogPositionForProduction: settings?.hideLogPositionForProduction ?? false,
            prettyLogTemplate: settings?.prettyLogTemplate ??
                "{{yyyy}}.{{mm}}.{{dd}} {{hh}}:{{MM}}:{{ss}}:{{ms}}\t{{logLevelName}}\t{{filePathWithLine}}{{nameWithDelimiterPrefix}}\t",
            prettyErrorTemplate: settings?.prettyErrorTemplate ?? "\n{{errorName}} {{errorMessage}}\nerror stack:\n{{errorStack}}",
            prettyErrorStackTemplate: settings?.prettyErrorStackTemplate ?? "  • {{fileName}}\t{{method}}\n\t{{filePathWithLine}}",
            prettyErrorParentNamesSeparator: settings?.prettyErrorParentNamesSeparator ?? ":",
            prettyErrorLoggerNameDelimiter: settings?.prettyErrorLoggerNameDelimiter ?? "\t",
            stylePrettyLogs: settings?.stylePrettyLogs ?? true,
            prettyLogTimeZone: settings?.prettyLogTimeZone ?? "UTC",
            prettyLogStyles: settings?.prettyLogStyles ?? {
                logLevelName: {
                    "*": ["bold", "black", "bgWhiteBright", "dim"],
                    SILLY: ["bold", "white"],
                    TRACE: ["bold", "whiteBright"],
                    DEBUG: ["bold", "green"],
                    INFO: ["bold", "blue"],
                    WARN: ["bold", "yellow"],
                    ERROR: ["bold", "red"],
                    FATAL: ["bold", "redBright"],
                },
                dateIsoStr: "white",
                filePathWithLine: "white",
                name: ["white", "bold"],
                nameWithDelimiterPrefix: ["white", "bold"],
                nameWithDelimiterSuffix: ["white", "bold"],
                errorName: ["bold", "bgRedBright", "whiteBright"],
                fileName: ["yellow"],
                fileNameWithLine: "white",
            },
            prettyInspectOptions: settings?.prettyInspectOptions ?? {
                colors: true,
                compact: false,
                depth: Infinity,
            },
            metaProperty: settings?.metaProperty ?? "_meta",
            maskPlaceholder: settings?.maskPlaceholder ?? "[***]",
            maskValuesOfKeys: settings?.maskValuesOfKeys ?? ["password"],
            maskValuesOfKeysCaseInsensitive: settings?.maskValuesOfKeysCaseInsensitive ?? false,
            maskValuesRegEx: settings?.maskValuesRegEx,
            prefix: [...(settings?.prefix ?? [])],
            attachedTransports: [...(settings?.attachedTransports ?? [])],
            overwrite: {
                mask: settings?.overwrite?.mask,
                toLogObj: settings?.overwrite?.toLogObj,
                addMeta: settings?.overwrite?.addMeta,
                addPlaceholders: settings?.overwrite?.addPlaceholders,
                formatMeta: settings?.overwrite?.formatMeta,
                formatLogObj: settings?.overwrite?.formatLogObj,
                transportFormatted: settings?.overwrite?.transportFormatted,
                transportJSON: settings?.overwrite?.transportJSON,
            },
        };
    }
    log(logLevelId, logLevelName, ...args) {
        if (logLevelId < this.settings.minLevel) {
            return;
        }
        const logArgs = [...this.settings.prefix, ...args];
        const maskedArgs = this.settings.overwrite?.mask != null
            ? this.settings.overwrite?.mask(logArgs)
            : this.settings.maskValuesOfKeys != null && this.settings.maskValuesOfKeys.length > 0
                ? this._mask(logArgs)
                : logArgs;
        const thisLogObj = this.logObj != null ? this._recursiveCloneAndExecuteFunctions(this.logObj) : undefined;
        const logObj = this.settings.overwrite?.toLogObj != null ? this.settings.overwrite?.toLogObj(maskedArgs, thisLogObj) : this._toLogObj(maskedArgs, thisLogObj);
        const logObjWithMeta = this.settings.overwrite?.addMeta != null
            ? this.settings.overwrite?.addMeta(logObj, logLevelId, logLevelName)
            : this._addMetaToLogObj(logObj, logLevelId, logLevelName);
        let logMetaMarkup;
        let logArgsAndErrorsMarkup = undefined;
        if (this.settings.overwrite?.formatMeta != null) {
            logMetaMarkup = this.settings.overwrite?.formatMeta(logObjWithMeta?.[this.settings.metaProperty]);
        }
        if (this.settings.overwrite?.formatLogObj != null) {
            logArgsAndErrorsMarkup = this.settings.overwrite?.formatLogObj(maskedArgs, this.settings);
        }
        if (this.settings.type === "pretty") {
            logMetaMarkup = logMetaMarkup ?? this._prettyFormatLogObjMeta(logObjWithMeta?.[this.settings.metaProperty]);
            logArgsAndErrorsMarkup = logArgsAndErrorsMarkup ?? this.runtime.prettyFormatLogObj(maskedArgs, this.settings);
        }
        if (logMetaMarkup != null && logArgsAndErrorsMarkup != null) {
            this.settings.overwrite?.transportFormatted != null
                ? this.settings.overwrite?.transportFormatted(logMetaMarkup, logArgsAndErrorsMarkup.args, logArgsAndErrorsMarkup.errors, this.settings)
                : this.runtime.transportFormatted(logMetaMarkup, logArgsAndErrorsMarkup.args, logArgsAndErrorsMarkup.errors, this.settings);
        }
        else {
            this.settings.overwrite?.transportJSON != null
                ? this.settings.overwrite?.transportJSON(logObjWithMeta)
                : this.settings.type !== "hidden"
                    ? this.runtime.transportJSON(logObjWithMeta)
                    : undefined;
        }
        if (this.settings.attachedTransports != null && this.settings.attachedTransports.length > 0) {
            this.settings.attachedTransports.forEach((transportLogger) => {
                transportLogger(logObjWithMeta);
            });
        }
        return logObjWithMeta;
    }
    attachTransport(transportLogger) {
        this.settings.attachedTransports.push(transportLogger);
    }
    getSubLogger(settings, logObj) {
        const subLoggerSettings = {
            ...this.settings,
            ...settings,
            parentNames: this.settings?.parentNames != null && this.settings?.name != null
                ? [...this.settings.parentNames, this.settings.name]
                : this.settings?.name != null
                    ? [this.settings.name]
                    : undefined,
            prefix: [...this.settings.prefix, ...(settings?.prefix ?? [])],
        };
        const subLogger = new this.constructor(subLoggerSettings, logObj ?? this.logObj, this.stackDepthLevel);
        return subLogger;
    }
    _mask(args) {
        const maskValuesOfKeys = this.settings.maskValuesOfKeysCaseInsensitive !== true ? this.settings.maskValuesOfKeys : this.settings.maskValuesOfKeys.map((key) => key.toLowerCase());
        return args?.map((arg) => {
            return this._recursiveCloneAndMaskValuesOfKeys(arg, maskValuesOfKeys);
        });
    }
    _recursiveCloneAndMaskValuesOfKeys(source, keys, seen = []) {
        if (seen.includes(source)) {
            return { ...source };
        }
        if (typeof source === "object" && source !== null) {
            seen.push(source);
        }
        if (this.runtime.isError(source) || this.runtime.isBuffer(source)) {
            return source;
        }
        else if (source instanceof Map) {
            return new Map(source);
        }
        else if (source instanceof Set) {
            return new Set(source);
        }
        else if (Array.isArray(source)) {
            return source.map((item) => this._recursiveCloneAndMaskValuesOfKeys(item, keys, seen));
        }
        else if (source instanceof Date) {
            return new Date(source.getTime());
        }
        else if (source instanceof URL) {
            return urlToObject(source);
        }
        else if (source !== null && typeof source === "object") {
            const baseObject = this.runtime.isError(source) ? this._cloneError(source) : Object.create(Object.getPrototypeOf(source));
            return Object.getOwnPropertyNames(source).reduce((o, prop) => {
                o[prop] = keys.includes(this.settings?.maskValuesOfKeysCaseInsensitive !== true ? prop : prop.toLowerCase())
                    ? this.settings.maskPlaceholder
                    : (() => {
                        try {
                            return this._recursiveCloneAndMaskValuesOfKeys(source[prop], keys, seen);
                        }
                        catch (e) {
                            return null;
                        }
                    })();
                return o;
            }, baseObject);
        }
        else {
            if (typeof source === "string") {
                let modifiedSource = source;
                for (const regEx of this.settings?.maskValuesRegEx || []) {
                    modifiedSource = modifiedSource.replace(regEx, this.settings?.maskPlaceholder || "");
                }
                return modifiedSource;
            }
            return source;
        }
    }
    _recursiveCloneAndExecuteFunctions(source, seen = []) {
        if (this.isObjectOrArray(source) && seen.includes(source)) {
            return this.shallowCopy(source);
        }
        if (this.isObjectOrArray(source)) {
            seen.push(source);
        }
        if (Array.isArray(source)) {
            return source.map((item) => this._recursiveCloneAndExecuteFunctions(item, seen));
        }
        else if (source instanceof Date) {
            return new Date(source.getTime());
        }
        else if (this.isObject(source)) {
            return Object.getOwnPropertyNames(source).reduce((o, prop) => {
                const descriptor = Object.getOwnPropertyDescriptor(source, prop);
                if (descriptor) {
                    Object.defineProperty(o, prop, descriptor);
                    const value = source[prop];
                    o[prop] = typeof value === "function" ? value() : this._recursiveCloneAndExecuteFunctions(value, seen);
                }
                return o;
            }, Object.create(Object.getPrototypeOf(source)));
        }
        else {
            return source;
        }
    }
    isObjectOrArray(value) {
        return typeof value === "object" && value !== null;
    }
    isObject(value) {
        return typeof value === "object" && !Array.isArray(value) && value !== null;
    }
    shallowCopy(source) {
        if (Array.isArray(source)) {
            return [...source];
        }
        else {
            return { ...source };
        }
    }
    _toLogObj(args, clonedLogObj = {}) {
        args = args?.map((arg) => (this.runtime.isError(arg) ? this._toErrorObject(arg) : arg));
        if (this.settings.argumentsArrayName == null) {
            if (args.length === 1 && !Array.isArray(args[0]) && this.runtime.isBuffer(args[0]) !== true && !(args[0] instanceof Date)) {
                clonedLogObj = typeof args[0] === "object" && args[0] != null ? { ...args[0], ...clonedLogObj } : { 0: args[0], ...clonedLogObj };
            }
            else {
                clonedLogObj = { ...clonedLogObj, ...args };
            }
        }
        else {
            clonedLogObj = {
                ...clonedLogObj,
                [this.settings.argumentsArrayName]: args,
            };
        }
        return clonedLogObj;
    }
    _cloneError(error) {
        const cloned = new error.constructor();
        Object.getOwnPropertyNames(error).forEach((key) => {
            cloned[key] = error[key];
        });
        return cloned;
    }
    _toErrorObject(error) {
        return {
            nativeError: error,
            name: error.name ?? "Error",
            message: error.message,
            stack: this.runtime.getErrorTrace(error),
        };
    }
    _addMetaToLogObj(logObj, logLevelId, logLevelName) {
        return {
            ...logObj,
            [this.settings.metaProperty]: this.runtime.getMeta(logLevelId, logLevelName, this.stackDepthLevel, this.settings.hideLogPositionForProduction, this.settings.name, this.settings.parentNames),
        };
    }
    _prettyFormatLogObjMeta(logObjMeta) {
        if (logObjMeta == null) {
            return "";
        }
        let template = this.settings.prettyLogTemplate;
        const placeholderValues = {};
        if (template.includes("{{yyyy}}.{{mm}}.{{dd}} {{hh}}:{{MM}}:{{ss}}:{{ms}}")) {
            template = template.replace("{{yyyy}}.{{mm}}.{{dd}} {{hh}}:{{MM}}:{{ss}}:{{ms}}", "{{dateIsoStr}}");
        }
        else {
            if (this.settings.prettyLogTimeZone === "UTC") {
                placeholderValues["yyyy"] = logObjMeta?.date?.getUTCFullYear() ?? "----";
                placeholderValues["mm"] = formatNumberAddZeros(logObjMeta?.date?.getUTCMonth(), 2, 1);
                placeholderValues["dd"] = formatNumberAddZeros(logObjMeta?.date?.getUTCDate(), 2);
                placeholderValues["hh"] = formatNumberAddZeros(logObjMeta?.date?.getUTCHours(), 2);
                placeholderValues["MM"] = formatNumberAddZeros(logObjMeta?.date?.getUTCMinutes(), 2);
                placeholderValues["ss"] = formatNumberAddZeros(logObjMeta?.date?.getUTCSeconds(), 2);
                placeholderValues["ms"] = formatNumberAddZeros(logObjMeta?.date?.getUTCMilliseconds(), 3);
            }
            else {
                placeholderValues["yyyy"] = logObjMeta?.date?.getFullYear() ?? "----";
                placeholderValues["mm"] = formatNumberAddZeros(logObjMeta?.date?.getMonth(), 2, 1);
                placeholderValues["dd"] = formatNumberAddZeros(logObjMeta?.date?.getDate(), 2);
                placeholderValues["hh"] = formatNumberAddZeros(logObjMeta?.date?.getHours(), 2);
                placeholderValues["MM"] = formatNumberAddZeros(logObjMeta?.date?.getMinutes(), 2);
                placeholderValues["ss"] = formatNumberAddZeros(logObjMeta?.date?.getSeconds(), 2);
                placeholderValues["ms"] = formatNumberAddZeros(logObjMeta?.date?.getMilliseconds(), 3);
            }
        }
        const dateInSettingsTimeZone = this.settings.prettyLogTimeZone === "UTC" ? logObjMeta?.date : new Date(logObjMeta?.date?.getTime() - logObjMeta?.date?.getTimezoneOffset() * 60000);
        placeholderValues["rawIsoStr"] = dateInSettingsTimeZone?.toISOString();
        placeholderValues["dateIsoStr"] = dateInSettingsTimeZone?.toISOString().replace("T", " ").replace("Z", "");
        placeholderValues["logLevelName"] = logObjMeta?.logLevelName;
        placeholderValues["fileNameWithLine"] = logObjMeta?.path?.fileNameWithLine ?? "";
        placeholderValues["filePathWithLine"] = logObjMeta?.path?.filePathWithLine ?? "";
        placeholderValues["fullFilePath"] = logObjMeta?.path?.fullFilePath ?? "";
        let parentNamesString = this.settings.parentNames?.join(this.settings.prettyErrorParentNamesSeparator);
        parentNamesString = parentNamesString != null && logObjMeta?.name != null ? parentNamesString + this.settings.prettyErrorParentNamesSeparator : undefined;
        placeholderValues["name"] = logObjMeta?.name != null || parentNamesString != null ? (parentNamesString ?? "") + logObjMeta?.name ?? "" : "";
        placeholderValues["nameWithDelimiterPrefix"] =
            placeholderValues["name"].length > 0 ? this.settings.prettyErrorLoggerNameDelimiter + placeholderValues["name"] : "";
        placeholderValues["nameWithDelimiterSuffix"] =
            placeholderValues["name"].length > 0 ? placeholderValues["name"] + this.settings.prettyErrorLoggerNameDelimiter : "";
        if (this.settings.overwrite?.addPlaceholders != null) {
            this.settings.overwrite?.addPlaceholders(logObjMeta, placeholderValues);
        }
        return formatTemplate(this.settings, template, placeholderValues);
    }
}

class Logger extends BaseLogger {
    constructor(settings, logObj) {
        const isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
        const isBrowserBlinkEngine = isBrowser ? window.chrome !== undefined && window.CSS !== undefined && window.CSS.supports("color", "green") : false;
        const isSafari = isBrowser ? /^((?!chrome|android).)*safari/i.test(navigator.userAgent) : false;
        settings = settings || {};
        settings.stylePrettyLogs = settings.stylePrettyLogs && isBrowser && !isBrowserBlinkEngine ? false : settings.stylePrettyLogs;
        super(settings, logObj, isSafari ? 4 : 5);
    }
    log(logLevelId, logLevelName, ...args) {
        return super.log(logLevelId, logLevelName, ...args);
    }
    silly(...args) {
        return super.log(0, "SILLY", ...args);
    }
    trace(...args) {
        return super.log(1, "TRACE", ...args);
    }
    debug(...args) {
        return super.log(2, "DEBUG", ...args);
    }
    info(...args) {
        return super.log(3, "INFO", ...args);
    }
    warn(...args) {
        return super.log(4, "WARN", ...args);
    }
    error(...args) {
        return super.log(5, "ERROR", ...args);
    }
    fatal(...args) {
        return super.log(6, "FATAL", ...args);
    }
    getSubLogger(settings, logObj) {
        return super.getSubLogger(settings, logObj);
    }
}

function transportFormatted(logMetaMarkup, logArgs, logErrors, settings) {
    settings.prettyInspectOptions.colors = settings.stylePrettyLogs;
    const logLevel = logMetaMarkup.trim().split(" ")[2];
    let logFunc;
    switch (logLevel) {
        case "WARN":
            logFunc = console.warn;
            break;
        case "ERROR":
        case "FATAL":
            logFunc = console.error;
            break;
        case "INFO":
            logFunc = console.info;
            break;
        case "DEBUG":
        case "TRACE":
        case "SILLY":
        default:
            logFunc = console.debug;
            break;
    }
    logFunc(logMetaMarkup, ...logArgs);
    logErrors.forEach(err => {
        console.error(logMetaMarkup + err);
    });
}
function formatMeta(logObjMeta) {
    if (!logObjMeta) {
        return '';
    }
    const { date, logLevelName } = logObjMeta;
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = String(date.getSeconds()).padStart(2, '0');
    const milliseconds = String(date.getMilliseconds()).padStart(3, '0');
    const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${milliseconds}`;
    const loggerName = logObjMeta.name;
    return `${formattedDate} ${logLevelName} ${loggerName}`;
}
const logger = new Logger({
    name: "ekoLogger",
    overwrite: {
        transportFormatted,
        formatMeta,
    }
});

class CancelWorkflow {
    constructor() {
        this.name = 'cancel_workflow';
        this.description = 'Cancel the workflow when encountering critical errors that cannot be resolved through user interaction or retry. This should only be used when the workflow is in an unrecoverable state. ';
        this.input_schema = {
            type: 'object',
            properties: {
                reason: {
                    type: 'string',
                    description: 'Why the workflow should be cancelled.',
                },
            },
            required: ['reason'],
        };
    }
    async execute(context, params) {
        var _a;
        if (typeof params !== 'object' || params === null || !params.reason) {
            throw new Error('Invalid parameters. Expected an object with a "reason" property.');
        }
        const reason = params.reason;
        logger.info("The workflow has been cancelled because: " + reason);
        await ((_a = context.workflow) === null || _a === void 0 ? void 0 : _a.cancel());
        return;
    }
}

class HumanInputText {
    constructor() {
        this.name = 'human_input_text';
        this.description = 'When you are unsure about the details of your next action or need the user to perform a local action, call me and ask the user for details in the "question" field. The user will provide you with a text as an answer.';
        this.input_schema = {
            type: 'object',
            properties: {
                question: {
                    type: 'string',
                    description: 'Ask the user here. Should follow the format: "Please input ...".',
                },
            },
            required: ['question'],
        };
    }
    async execute(context, params) {
        var _a;
        if (typeof params !== 'object' || params === null || !params.question) {
            throw new Error('Invalid parameters. Expected an object with a "question" property.');
        }
        const question = params.question;
        logger.debug("question: " + question);
        let onHumanInputText = (_a = context.callback) === null || _a === void 0 ? void 0 : _a.hooks.onHumanInputText;
        if (onHumanInputText) {
            let answer;
            try {
                answer = await onHumanInputText(question);
            }
            catch (e) {
                logger.warn(e);
                return { status: "Error: Cannot get user's answer.", answer: "" };
            }
            logger.debug("answer: " + answer);
            return { status: "OK", answer: answer };
        }
        else {
            logger.error("`onHumanInputText` not implemented");
            return { status: "Error: Cannot get user's answer.", answer: "" };
        }
    }
}
class HumanInputSingleChoice {
    constructor() {
        this.name = 'human_input_single_choice';
        this.description = 'When you are unsure about the details of your next action, call me and ask the user for details in the "question" field with at least 2 choices. The user will provide you with ONE choice as an answer.';
        this.input_schema = {
            type: 'object',
            properties: {
                question: {
                    type: 'string',
                    description: 'Ask the user here. Should follow the format: "Please select ...".',
                },
                choices: {
                    type: 'array',
                    description: 'All of the choices.',
                    items: {
                        type: 'object',
                        properties: {
                            choice: {
                                type: 'string',
                            }
                        }
                    }
                }
            },
            required: ['question', 'choices'],
        };
    }
    async execute(context, params) {
        var _a;
        if (typeof params !== 'object' || params === null || !params.question || !params.choices) {
            throw new Error('Invalid parameters. Expected an object with a "question" and "choices" property.');
        }
        const question = params.question;
        const choices = params.choices.map((e) => e.choice);
        logger.debug("question: " + question);
        logger.debug("choices: " + choices);
        let onHumanInputSingleChoice = (_a = context.callback) === null || _a === void 0 ? void 0 : _a.hooks.onHumanInputSingleChoice;
        if (onHumanInputSingleChoice) {
            let answer;
            try {
                answer = await onHumanInputSingleChoice(question, choices);
            }
            catch (e) {
                logger.warn(e);
                return { status: "Error: Cannot get user's answer.", answer: "" };
            }
            logger.debug("answer: " + answer);
            return { status: "OK", answer: answer };
        }
        else {
            logger.error("`onHumanInputSingleChoice` not implemented");
            return { status: "Error: Cannot get user's answer.", answer: "" };
        }
    }
}
class HumanInputMultipleChoice {
    constructor() {
        this.name = 'human_input_multiple_choice';
        this.description = 'When you are unsure about the details of your next action, call me and ask the user for details in the "question" field with at least 2 choices. The user will provide you with ONE or MORE choice as an answer.';
        this.input_schema = {
            type: 'object',
            properties: {
                question: {
                    type: 'string',
                    description: 'Ask the user here. Should follow the format: "Please select ...".',
                },
                choices: {
                    type: 'array',
                    description: 'All of the choices.',
                    items: {
                        type: 'object',
                        properties: {
                            choice: {
                                type: 'string',
                            }
                        }
                    }
                }
            },
            required: ['question', 'choices'],
        };
    }
    async execute(context, params) {
        var _a;
        if (typeof params !== 'object' || params === null || !params.question || !params.choices) {
            throw new Error('Invalid parameters. Expected an object with a "question" and "choices" property.');
        }
        const question = params.question;
        const choices = params.choices.map((e) => e.choice);
        logger.debug("question: " + question);
        logger.debug("choices: " + choices);
        let onHumanInputMultipleChoice = (_a = context.callback) === null || _a === void 0 ? void 0 : _a.hooks.onHumanInputMultipleChoice;
        if (onHumanInputMultipleChoice) {
            let answer;
            try {
                answer = await onHumanInputMultipleChoice(question, choices);
            }
            catch (e) {
                logger.warn(e);
                return { status: "Error: Cannot get user's answer.", answer: [] };
            }
            logger.debug("answer: " + answer);
            return { status: "OK", answer: answer };
        }
        else {
            logger.error("`onHumanInputMultipleChoice` not implemented");
            return { status: "Error: Cannot get user's answer.", answer: [] };
        }
    }
}
class HumanOperate {
    constructor() {
        this.name = 'human_operate';
        this.description = `Use this tool when one of following appears:
1. Authentication (such as logging in, entering a verification code, etc.)
2. External system operations (such as uploading files, selecting a file save location, scanning documents, taking photos, paying, authorization, etc.)

NOTE: You should ONLY use this tool in the scenarios above.

When calling this tool to transfer control to the user, please explain in detail:
1. Why user intervention is required
2. What operations the user needs to perform`;
        this.input_schema = {
            type: 'object',
            properties: {
                reason: {
                    type: 'string',
                    description: 'The reason why you need to transfer control. Should follow the format: "Please ..., and click the "Completed" button to continue.".',
                },
            },
            required: ['reason'],
        };
    }
    async execute(context, params) {
        var _a;
        if (typeof params !== 'object' || params === null || !params.reason) {
            throw new Error('Invalid parameters. Expected an object with a "reason" property.');
        }
        const reason = params.reason;
        logger.debug("reason: " + reason);
        let onHumanOperate = (_a = context.callback) === null || _a === void 0 ? void 0 : _a.hooks.onHumanOperate;
        if (onHumanOperate) {
            let userOperation;
            try {
                userOperation = await onHumanOperate(reason);
            }
            catch (e) {
                logger.warn(e);
                return { status: "Error: Cannot get user's operation.", userOperation: "" };
            }
            logger.debug("userOperation: " + userOperation);
            if (userOperation == "") {
                return { status: "OK", userOperation: "Done. Please take a screenshot to ensure the result." };
            }
            else {
                return { status: "OK", userOperation: userOperation + "\n\nPlease take a screenshot to ensure the result." };
            }
        }
        else {
            logger.error("`onHumanOperate` not implemented");
            return { status: "Error: Cannot get user's operation.", userOperation: "" };
        }
    }
}

class DocumentAgentTool {
    constructor() {
        this.name = 'document_agent';
        this.description = 'A document agent that can help you write document or long text, e.g. research report, email draft, summary.';
        this.input_schema = {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of document to be created (e.g., 'report', 'presentation', 'article')."
                },
                "title": {
                    "type": "string",
                    "description": "The title of the document."
                },
                "background": {
                    "type": "string",
                    "description": "The background information or target for the document."
                },
                "keypoints": {
                    "type": "string",
                    "description": "A summary of the key points or main ideas to be included in the document."
                },
                "style": {
                    "type": "string",
                    "description": "The desired style or tone of the document (e.g., 'formal', 'casual', 'academic')."
                },
            },
            "required": ["type", "title", "background", "keypoints"],
        };
    }
    async execute(context, params) {
        params.references = context.variables;
        const messages = [
            {
                role: 'system',
                content: 'You are an excellent writer, skilled at composing various types of copywriting and texts in different styles. You can draft documents based on the title, background, or reference materials provided by clients. Now, the client will provide you with a lot of information, including the type of copywriting, title, background, key points, style, and reference materials. Please write a document in Markdown format.',
            },
            {
                role: 'user',
                content: JSON.stringify(params),
            },
        ];
        const llmParams = { maxTokens: 8192 };
        const response = await context.llmProvider.generateText(messages, llmParams);
        const content = typeof response.content == 'string' ? response.content : response.content[0].text;
        context.variables.set("workflow_transcript", content);
        return { status: "OK", content };
    }
}

const execAsync = require$$1.promisify(require$$0$3.exec);
class CommandExecute {
    constructor() {
        this.name = 'command_execute';
        this.description = 'Execute a shell command with user confirmation';
        this.input_schema = {
            type: 'object',
            properties: {
                command: {
                    type: 'string',
                    description: 'The command to execute. Ensure that the command is non-interactive and does not require user input.'
                },
                cwd: {
                    type: 'string',
                    description: 'Working directory for command execution'
                }
            },
            required: ['command']
        };
    }
    async getUserConfirmation(command) {
        const rl = require$$2.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        return new Promise(resolve => {
            rl.question(`Are you sure you want to execute command: "${command}"? (y/N) `, answer => {
                rl.close();
                resolve(answer.toLowerCase() === 'y');
            });
        });
    }
    async execute(context, params) {
        const confirmed = await this.getUserConfirmation(params.command);
        if (!confirmed) {
            return {
                executed: false,
                reason: 'User cancelled execution'
            };
        }
        try {
            const { stdout, stderr } = await execAsync(params.command, {
                cwd: params.cwd
            });
            return {
                executed: true,
                stdout,
                stderr
            };
        }
        catch (error) {
            const err = error;
            return {
                executed: false,
                error: err.message,
                code: err.code,
                stderr: err.stderr
            };
        }
    }
}

class FileRead {
    constructor() {
        this.name = 'file_read';
        this.description = 'Read content from a file';
        this.input_schema = {
            type: 'object',
            properties: {
                path: {
                    type: 'string',
                    description: 'Path to the file to read'
                },
                encoding: {
                    type: 'string',
                    description: 'File encoding (default: utf8)',
                    enum: ['utf8', 'ascii', 'utf16le', 'base64', 'binary']
                }
            },
            required: ['path']
        };
    }
    async execute(context, params) {
        try {
            const fullPath = require$$1$1.resolve(params.path);
            const content = await promises.readFile(fullPath, {
                encoding: params.encoding || 'utf8'
            });
            return {
                success: true,
                path: fullPath,
                content
            };
        }
        catch (error) {
            const err = error;
            return {
                success: false,
                error: err.message,
                code: err.code
            };
        }
    }
}

class FileWrite {
    constructor() {
        this.name = 'file_write';
        this.description = 'Write content to a file with user confirmation';
        this.input_schema = {
            type: 'object',
            properties: {
                path: {
                    type: 'string',
                    description: 'Path to write the file'
                },
                content: {
                    type: 'string',
                    description: 'Content to write to the file'
                },
                append: {
                    type: 'boolean',
                    description: 'Whether to append to existing file (default: false)'
                },
                encoding: {
                    type: 'string',
                    description: 'File encoding (default: utf8)',
                    enum: ['utf8', 'ascii', 'utf16le', 'base64', 'binary']
                }
            },
            required: ['path', 'content']
        };
    }
    async checkFileExists(path) {
        try {
            await promises.access(path, require$$0$4.constants.F_OK);
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    async getUserConfirmation(path, exists, append) {
        const rl = require$$2.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        const action = exists
            ? (append ? 'append to' : 'overwrite')
            : 'create';
        return new Promise(resolve => {
            rl.question(`Are you sure you want to ${action} file at "${path}"? (y/N) `, answer => {
                rl.close();
                resolve(answer.toLowerCase() === 'y');
            });
        });
    }
    async execute(context, params) {
        try {
            const fullPath = require$$1$1.resolve(params.path);
            const exists = await this.checkFileExists(fullPath);
            const append = params.append || false;
            const confirmed = await this.getUserConfirmation(fullPath, exists, append);
            if (!confirmed) {
                return {
                    success: false,
                    reason: 'User cancelled operation'
                };
            }
            if (append) {
                await promises.appendFile(fullPath, params.content, {
                    encoding: params.encoding || 'utf8'
                });
            }
            else {
                await promises.writeFile(fullPath, params.content, {
                    encoding: params.encoding || 'utf8'
                });
            }
            return {
                success: true,
                path: fullPath,
                action: append ? 'append' : 'write'
            };
        }
        catch (error) {
            const err = error;
            return {
                success: false,
                error: err.message,
                code: err.code
            };
        }
    }
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var assert_1;
var hasRequiredAssert$1;

function requireAssert$1 () {
	if (hasRequiredAssert$1) return assert_1;
	hasRequiredAssert$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var assert_exports = {};
	__export(assert_exports, {
	  assert: () => assert
	});
	assert_1 = __toCommonJS(assert_exports);
	function assert(value, message) {
	  if (!value)
	    throw new Error(message || "Assertion error");
	}
	return assert_1;
}

var crypto;
var hasRequiredCrypto;

function requireCrypto () {
	if (hasRequiredCrypto) return crypto;
	hasRequiredCrypto = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crypto_exports = {};
	__export(crypto_exports, {
	  calculateSha1: () => calculateSha1,
	  createGuid: () => createGuid,
	  generateSelfSignedCertificate: () => generateSelfSignedCertificate
	});
	crypto = __toCommonJS(crypto_exports);
	var import_crypto = __toESM(require$$5);
	var import_assert = requireAssert$1();
	function createGuid() {
	  return import_crypto.default.randomBytes(16).toString("hex");
	}
	function calculateSha1(buffer) {
	  const hash = import_crypto.default.createHash("sha1");
	  hash.update(buffer);
	  return hash.digest("hex");
	}
	function encodeBase128(value) {
	  const bytes = [];
	  do {
	    let byte = value & 127;
	    value >>>= 7;
	    if (bytes.length > 0)
	      byte |= 128;
	    bytes.push(byte);
	  } while (value > 0);
	  return Buffer.from(bytes.reverse());
	}
	class DER {
	  static encodeSequence(data) {
	    return this._encode(48, Buffer.concat(data));
	  }
	  static encodeInteger(data) {
	    (0, import_assert.assert)(data >= -128 && data <= 127);
	    return this._encode(2, Buffer.from([data]));
	  }
	  static encodeObjectIdentifier(oid) {
	    const parts = oid.split(".").map((v) => Number(v));
	    const output = [encodeBase128(40 * parts[0] + parts[1])];
	    for (let i = 2; i < parts.length; i++)
	      output.push(encodeBase128(parts[i]));
	    return this._encode(6, Buffer.concat(output));
	  }
	  static encodeNull() {
	    return Buffer.from([5, 0]);
	  }
	  static encodeSet(data) {
	    (0, import_assert.assert)(data.length === 1, "Only one item in the set is supported. We'd need to sort the data to support more.");
	    return this._encode(49, Buffer.concat(data));
	  }
	  static encodeExplicitContextDependent(tag, data) {
	    return this._encode(160 + tag, data);
	  }
	  static encodePrintableString(data) {
	    return this._encode(19, Buffer.from(data));
	  }
	  static encodeBitString(data) {
	    const unusedBits = 0;
	    const content = Buffer.concat([Buffer.from([unusedBits]), data]);
	    return this._encode(3, content);
	  }
	  static encodeDate(date) {
	    const year = date.getUTCFullYear();
	    const isGeneralizedTime = year >= 2050;
	    const parts = [
	      isGeneralizedTime ? year.toString() : year.toString().slice(-2),
	      (date.getUTCMonth() + 1).toString().padStart(2, "0"),
	      date.getUTCDate().toString().padStart(2, "0"),
	      date.getUTCHours().toString().padStart(2, "0"),
	      date.getUTCMinutes().toString().padStart(2, "0"),
	      date.getUTCSeconds().toString().padStart(2, "0")
	    ];
	    const encodedDate = parts.join("") + "Z";
	    const tag = isGeneralizedTime ? 24 : 23;
	    return this._encode(tag, Buffer.from(encodedDate));
	  }
	  static _encode(tag, data) {
	    const lengthBytes = this._encodeLength(data.length);
	    return Buffer.concat([Buffer.from([tag]), lengthBytes, data]);
	  }
	  static _encodeLength(length) {
	    if (length < 128) {
	      return Buffer.from([length]);
	    } else {
	      const lengthBytes = [];
	      while (length > 0) {
	        lengthBytes.unshift(length & 255);
	        length >>= 8;
	      }
	      return Buffer.from([128 | lengthBytes.length, ...lengthBytes]);
	    }
	  }
	}
	function generateSelfSignedCertificate() {
	  const { privateKey, publicKey } = import_crypto.default.generateKeyPairSync("rsa", { modulusLength: 2048 });
	  const publicKeyDer = publicKey.export({ type: "pkcs1", format: "der" });
	  const oneYearInMilliseconds = 365 * 24 * 60 * 60 * 1e3;
	  const notBefore = new Date((/* @__PURE__ */ new Date()).getTime() - oneYearInMilliseconds);
	  const notAfter = new Date((/* @__PURE__ */ new Date()).getTime() + oneYearInMilliseconds);
	  const tbsCertificate = DER.encodeSequence([
	    DER.encodeExplicitContextDependent(0, DER.encodeInteger(1)),
	    // version
	    DER.encodeInteger(1),
	    // serialNumber
	    DER.encodeSequence([
	      DER.encodeObjectIdentifier("1.2.840.113549.1.1.11"),
	      // sha256WithRSAEncryption PKCS #1
	      DER.encodeNull()
	    ]),
	    // signature
	    DER.encodeSequence([
	      DER.encodeSet([
	        DER.encodeSequence([
	          DER.encodeObjectIdentifier("2.5.4.3"),
	          // commonName X.520 DN component
	          DER.encodePrintableString("localhost")
	        ])
	      ]),
	      DER.encodeSet([
	        DER.encodeSequence([
	          DER.encodeObjectIdentifier("2.5.4.10"),
	          // organizationName X.520 DN component
	          DER.encodePrintableString("Playwright Client Certificate Support")
	        ])
	      ])
	    ]),
	    // issuer
	    DER.encodeSequence([
	      DER.encodeDate(notBefore),
	      // notBefore
	      DER.encodeDate(notAfter)
	      // notAfter
	    ]),
	    // validity
	    DER.encodeSequence([
	      DER.encodeSet([
	        DER.encodeSequence([
	          DER.encodeObjectIdentifier("2.5.4.3"),
	          // commonName X.520 DN component
	          DER.encodePrintableString("localhost")
	        ])
	      ]),
	      DER.encodeSet([
	        DER.encodeSequence([
	          DER.encodeObjectIdentifier("2.5.4.10"),
	          // organizationName X.520 DN component
	          DER.encodePrintableString("Playwright Client Certificate Support")
	        ])
	      ])
	    ]),
	    // subject
	    DER.encodeSequence([
	      DER.encodeSequence([
	        DER.encodeObjectIdentifier("1.2.840.113549.1.1.1"),
	        // rsaEncryption PKCS #1
	        DER.encodeNull()
	      ]),
	      DER.encodeBitString(publicKeyDer)
	    ])
	    // SubjectPublicKeyInfo
	  ]);
	  const signature = import_crypto.default.sign("sha256", tbsCertificate, privateKey);
	  const certificate = DER.encodeSequence([
	    tbsCertificate,
	    DER.encodeSequence([
	      DER.encodeObjectIdentifier("1.2.840.113549.1.1.11"),
	      // sha256WithRSAEncryption PKCS #1
	      DER.encodeNull()
	    ]),
	    DER.encodeBitString(signature)
	  ]);
	  const certPem = [
	    "-----BEGIN CERTIFICATE-----",
	    // Split the base64 string into lines of 64 characters
	    certificate.toString("base64").match(/.{1,64}/g).join("\n"),
	    "-----END CERTIFICATE-----"
	  ].join("\n");
	  return {
	    cert: certPem,
	    key: privateKey.export({ type: "pkcs1", format: "pem" })
	  };
	}
	return crypto;
}

var utilsBundleImpl;
var hasRequiredUtilsBundleImpl;

function requireUtilsBundleImpl () {
	if (hasRequiredUtilsBundleImpl) return utilsBundleImpl;
	hasRequiredUtilsBundleImpl = 1;
var Fb=Object.create;var ds=Object.defineProperty;var qb=Object.getOwnPropertyDescriptor;var Db=Object.getOwnPropertyNames;var jb=Object.getPrototypeOf,Ub=Object.prototype.hasOwnProperty;var _=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Sf=(t,e)=>{for(var i in e)ds(t,i,{get:e[i],enumerable:true});},Ef=(t,e,i,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of Db(e))!Ub.call(t,n)&&n!==i&&ds(t,n,{get:()=>e[n],enumerable:!(r=qb(e,n))||r.enumerable});return t};var Ue=(t,e,i)=>(i=t!=null?Fb(jb(t)):{},Ef(e||!t||!t.__esModule?ds(i,"default",{value:t,enumerable:true}):i,t)),$b=t=>Ef(ds({},"__esModule",{value:true}),t);var Tf=_((gI,Cf)=>{var Of={};Cf.exports=Of;var kf={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],grey:[90,39],brightRed:[91,39],brightGreen:[92,39],brightYellow:[93,39],brightBlue:[94,39],brightMagenta:[95,39],brightCyan:[96,39],brightWhite:[97,39],bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgGray:[100,49],bgGrey:[100,49],bgBrightRed:[101,49],bgBrightGreen:[102,49],bgBrightYellow:[103,49],bgBrightBlue:[104,49],bgBrightMagenta:[105,49],bgBrightCyan:[106,49],bgBrightWhite:[107,49],blackBG:[40,49],redBG:[41,49],greenBG:[42,49],yellowBG:[43,49],blueBG:[44,49],magentaBG:[45,49],cyanBG:[46,49],whiteBG:[47,49]};Object.keys(kf).forEach(function(t){var e=kf[t],i=Of[t]=[];i.open="\x1B["+e[0]+"m",i.close="\x1B["+e[1]+"m";});});var If=_((vI,Af)=>{Af.exports=function(t,e){e=e||process.argv;var i=e.indexOf("--"),r=/^-{1,2}/.test(t)?"":"--",n=e.indexOf(r+t);return n!==-1&&(i===-1?true:n<i)};});var Lf=_((yI,Nf)=>{var Vb=require$$0$2,Mt=If(),ot=process.env,dr=void 0;Mt("no-color")||Mt("no-colors")||Mt("color=false")?dr=false:(Mt("color")||Mt("colors")||Mt("color=true")||Mt("color=always"))&&(dr=true);"FORCE_COLOR"in ot&&(dr=ot.FORCE_COLOR.length===0||parseInt(ot.FORCE_COLOR,10)!==0);function Hb(t){return t===0?false:{level:t,hasBasic:true,has256:t>=2,has16m:t>=3}}function Gb(t){if(dr===false)return 0;if(Mt("color=16m")||Mt("color=full")||Mt("color=truecolor"))return 3;if(Mt("color=256"))return 2;if(t&&!t.isTTY&&dr!==true)return 0;var e=dr?1:0;if(process.platform==="win32"){var i=Vb.release().split(".");return Number(process.versions.node.split(".")[0])>=8&&Number(i[0])>=10&&Number(i[2])>=10586?Number(i[2])>=14931?3:2:1}if("CI"in ot)return ["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI"].some(function(n){return n in ot})||ot.CI_NAME==="codeship"?1:e;if("TEAMCITY_VERSION"in ot)return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(ot.TEAMCITY_VERSION)?1:0;if("TERM_PROGRAM"in ot){var r=parseInt((ot.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(ot.TERM_PROGRAM){case "iTerm.app":return r>=3?3:2;case "Hyper":return 3;case "Apple_Terminal":return 2}}return /-256(color)?$/i.test(ot.TERM)?2:/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(ot.TERM)||"COLORTERM"in ot?1:(ot.TERM==="dumb",e)}function wa(t){var e=Gb(t);return Hb(e)}Nf.exports={supportsColor:wa,stdout:wa(process.stdout),stderr:wa(process.stderr)};});var Rf=_((bI,Bf)=>{Bf.exports=function(e,i){var r="";e=e||"Run the trap, drop the bass",e=e.split("");var n={a:["@","\u0104","\u023A","\u0245","\u0394","\u039B","\u0414"],b:["\xDF","\u0181","\u0243","\u026E","\u03B2","\u0E3F"],c:["\xA9","\u023B","\u03FE"],d:["\xD0","\u018A","\u0500","\u0501","\u0502","\u0503"],e:["\xCB","\u0115","\u018E","\u0258","\u03A3","\u03BE","\u04BC","\u0A6C"],f:["\u04FA"],g:["\u0262"],h:["\u0126","\u0195","\u04A2","\u04BA","\u04C7","\u050A"],i:["\u0F0F"],j:["\u0134"],k:["\u0138","\u04A0","\u04C3","\u051E"],l:["\u0139"],m:["\u028D","\u04CD","\u04CE","\u0520","\u0521","\u0D69"],n:["\xD1","\u014B","\u019D","\u0376","\u03A0","\u048A"],o:["\xD8","\xF5","\xF8","\u01FE","\u0298","\u047A","\u05DD","\u06DD","\u0E4F"],p:["\u01F7","\u048E"],q:["\u09CD"],r:["\xAE","\u01A6","\u0210","\u024C","\u0280","\u042F"],s:["\xA7","\u03DE","\u03DF","\u03E8"],t:["\u0141","\u0166","\u0373"],u:["\u01B1","\u054D"],v:["\u05D8"],w:["\u0428","\u0460","\u047C","\u0D70"],x:["\u04B2","\u04FE","\u04FC","\u04FD"],y:["\xA5","\u04B0","\u04CB"],z:["\u01B5","\u0240"]};return e.forEach(function(s){s=s.toLowerCase();var o=n[s]||[" "],a=Math.floor(Math.random()*o.length);typeof n[s]!="undefined"?r+=n[s][a]:r+=s;}),r};});var Mf=_((_I,Pf)=>{Pf.exports=function(e,i){e=e||"   he is here   ";var r={up:["\u030D","\u030E","\u0304","\u0305","\u033F","\u0311","\u0306","\u0310","\u0352","\u0357","\u0351","\u0307","\u0308","\u030A","\u0342","\u0313","\u0308","\u034A","\u034B","\u034C","\u0303","\u0302","\u030C","\u0350","\u0300","\u0301","\u030B","\u030F","\u0312","\u0313","\u0314","\u033D","\u0309","\u0363","\u0364","\u0365","\u0366","\u0367","\u0368","\u0369","\u036A","\u036B","\u036C","\u036D","\u036E","\u036F","\u033E","\u035B","\u0346","\u031A"],down:["\u0316","\u0317","\u0318","\u0319","\u031C","\u031D","\u031E","\u031F","\u0320","\u0324","\u0325","\u0326","\u0329","\u032A","\u032B","\u032C","\u032D","\u032E","\u032F","\u0330","\u0331","\u0332","\u0333","\u0339","\u033A","\u033B","\u033C","\u0345","\u0347","\u0348","\u0349","\u034D","\u034E","\u0353","\u0354","\u0355","\u0356","\u0359","\u035A","\u0323"],mid:["\u0315","\u031B","\u0300","\u0301","\u0358","\u0321","\u0322","\u0327","\u0328","\u0334","\u0335","\u0336","\u035C","\u035D","\u035E","\u035F","\u0360","\u0362","\u0338","\u0337","\u0361"," \u0489"]},n=[].concat(r.up,r.down,r.mid);function s(l){var c=Math.floor(Math.random()*l);return c}function o(l){var c=false;return n.filter(function(u){c=u===l;}),c}function a(l,c){var u="",f,d;c=c||{},c.up=typeof c.up!="undefined"?c.up:true,c.mid=typeof c.mid!="undefined"?c.mid:true,c.down=typeof c.down!="undefined"?c.down:true,c.size=typeof c.size!="undefined"?c.size:"maxi",l=l.split("");for(d in l)if(!o(d)){switch(u=u+l[d],f={up:0,down:0,mid:0},c.size){case "mini":f.up=s(8),f.mid=s(2),f.down=s(8);break;case "maxi":f.up=s(16)+3,f.mid=s(4)+1,f.down=s(64)+3;break;default:f.up=s(8)+1,f.mid=s(6)/2,f.down=s(8)+1;break}var g=["up","mid","down"];for(var m in g)for(var y=g[m],b=0;b<=f[y];b++)c[y]&&(u=u+r[y][s(r[y].length)]);}return u}return a(e,i)};});var qf=_((wI,Ff)=>{Ff.exports=function(t){return function(e,i,r){if(e===" ")return e;switch(i%3){case 0:return t.red(e);case 1:return t.white(e);case 2:return t.blue(e)}}};});var jf=_((xI,Df)=>{Df.exports=function(t){return function(e,i,r){return i%2===0?e:t.inverse(e)}};});var $f=_((SI,Uf)=>{Uf.exports=function(t){var e=["red","yellow","green","blue","magenta"];return function(i,r,n){return i===" "?i:t[e[r++%e.length]](i)}};});var Hf=_((EI,Vf)=>{Vf.exports=function(t){var e=["underline","inverse","grey","yellow","red","green","blue","white","cyan","magenta","brightYellow","brightRed","brightGreen","brightBlue","brightWhite","brightCyan","brightMagenta"];return function(i,r,n){return i===" "?i:t[e[Math.round(Math.random()*(e.length-2))]](i)}};});var Jf=_((OI,zf)=>{var ye={};zf.exports=ye;ye.themes={};var Yb=require$$1,Di=ye.styles=Tf(),Yf=Object.defineProperties,Wb=new RegExp(/[\r\n]+/g);ye.supportsColor=Lf().supportsColor;typeof ye.enabled=="undefined"&&(ye.enabled=ye.supportsColor()!==false);ye.enable=function(){ye.enabled=true;};ye.disable=function(){ye.enabled=false;};ye.stripColors=ye.strip=function(t){return (""+t).replace(/\x1B\[\d+m/g,"")};ye.stylize=function(e,i){if(!ye.enabled)return e+"";var r=Di[i];return !r&&i in ye?ye[i](e):r.open+e+r.close};var Kb=/[|\\{}()[\]^$+*?.]/g,zb=function(t){if(typeof t!="string")throw new TypeError("Expected a string");return t.replace(Kb,"\\$&")};function Wf(t){var e=function i(){return Zb.apply(i,arguments)};return e._styles=t,e.__proto__=Jb,e}var Kf=function(){var t={};return Di.grey=Di.gray,Object.keys(Di).forEach(function(e){Di[e].closeRe=new RegExp(zb(Di[e].close),"g"),t[e]={get:function(){return Wf(this._styles.concat(e))}};}),t}(),Jb=Yf(function(){},Kf);function Zb(){var t=Array.prototype.slice.call(arguments),e=t.map(function(o){return o!=null&&o.constructor===String?o:Yb.inspect(o)}).join(" ");if(!ye.enabled||!e)return e;for(var i=e.indexOf(`
`)!=-1,r=this._styles,n=r.length;n--;){var s=Di[r[n]];e=s.open+e.replace(s.closeRe,s.open)+s.close,i&&(e=e.replace(Wb,function(o){return s.close+o+s.open}));}return e}ye.setTheme=function(t){if(typeof t=="string"){console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");return}for(var e in t)(function(i){ye[i]=function(r){if(typeof t[i]=="object"){var n=r;for(var s in t[i])n=ye[t[i][s]](n);return n}return ye[t[i]](r)};})(e);};function Qb(){var t={};return Object.keys(Kf).forEach(function(e){t[e]={get:function(){return Wf([e])}};}),t}var Xb=function(e,i){var r=i.split("");return r=r.map(e),r.join("")};ye.trap=Rf();ye.zalgo=Mf();ye.maps={};ye.maps.america=qf()(ye);ye.maps.zebra=jf()(ye);ye.maps.rainbow=$f()(ye);ye.maps.random=Hf()(ye);for(Gf in ye.maps)(function(t){ye[t]=function(e){return Xb(ye.maps[t],e)};})(Gf);var Gf;Yf(ye,Qb());});var Qf=_((CI,Zf)=>{var e_=Jf();Zf.exports=e_;});var eh=_((TI,Xf)=>{var mr=1e3,gr=mr*60,vr=gr*60,ji=vr*24,t_=ji*7,i_=ji*365.25;Xf.exports=function(t,e){e=e||{};var i=typeof t;if(i==="string"&&t.length>0)return r_(t);if(i==="number"&&isFinite(t))return e.long?s_(t):n_(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function r_(t){if(t=String(t),!(t.length>100)){var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(e){var i=parseFloat(e[1]),r=(e[2]||"ms").toLowerCase();switch(r){case "years":case "year":case "yrs":case "yr":case "y":return i*i_;case "weeks":case "week":case "w":return i*t_;case "days":case "day":case "d":return i*ji;case "hours":case "hour":case "hrs":case "hr":case "h":return i*vr;case "minutes":case "minute":case "mins":case "min":case "m":return i*gr;case "seconds":case "second":case "secs":case "sec":case "s":return i*mr;case "milliseconds":case "millisecond":case "msecs":case "msec":case "ms":return i;default:return}}}}function n_(t){var e=Math.abs(t);return e>=ji?Math.round(t/ji)+"d":e>=vr?Math.round(t/vr)+"h":e>=gr?Math.round(t/gr)+"m":e>=mr?Math.round(t/mr)+"s":t+"ms"}function s_(t){var e=Math.abs(t);return e>=ji?ms(t,e,ji,"day"):e>=vr?ms(t,e,vr,"hour"):e>=gr?ms(t,e,gr,"minute"):e>=mr?ms(t,e,mr,"second"):t+" ms"}function ms(t,e,i,r){var n=e>=i*1.5;return Math.round(t/i)+" "+r+(n?"s":"")}});var xa=_((AI,th)=>{function o_(t){i.debug=i,i.default=i,i.coerce=l,i.disable=s,i.enable=n,i.enabled=o,i.humanize=eh(),i.destroy=c,Object.keys(t).forEach(u=>{i[u]=t[u];}),i.names=[],i.skips=[],i.formatters={};function e(u){let f=0;for(let d=0;d<u.length;d++)f=(f<<5)-f+u.charCodeAt(d),f|=0;return i.colors[Math.abs(f)%i.colors.length]}i.selectColor=e;function i(u){let f,d=null,g,m;function y(...b){if(!y.enabled)return;let x=y,E=Number(new Date),O=E-(f||E);x.diff=O,x.prev=f,x.curr=E,f=E,b[0]=i.coerce(b[0]),typeof b[0]!="string"&&b.unshift("%O");let k=0;b[0]=b[0].replace(/%([a-zA-Z%])/g,(R,T)=>{if(R==="%%")return "%";k++;let A=i.formatters[T];if(typeof A=="function"){let C=b[k];R=A.call(x,C),b.splice(k,1),k--;}return R}),i.formatArgs.call(x,b),(x.log||i.log).apply(x,b);}return y.namespace=u,y.useColors=i.useColors(),y.color=i.selectColor(u),y.extend=r,y.destroy=i.destroy,Object.defineProperty(y,"enabled",{enumerable:true,configurable:false,get:()=>d!==null?d:(g!==i.namespaces&&(g=i.namespaces,m=i.enabled(u)),m),set:b=>{d=b;}}),typeof i.init=="function"&&i.init(y),y}function r(u,f){let d=i(this.namespace+(typeof f=="undefined"?":":f)+u);return d.log=this.log,d}function n(u){i.save(u),i.namespaces=u,i.names=[],i.skips=[];let f,d=(typeof u=="string"?u:"").split(/[\s,]+/),g=d.length;for(f=0;f<g;f++)d[f]&&(u=d[f].replace(/\*/g,".*?"),u[0]==="-"?i.skips.push(new RegExp("^"+u.slice(1)+"$")):i.names.push(new RegExp("^"+u+"$")));}function s(){let u=[...i.names.map(a),...i.skips.map(a).map(f=>"-"+f)].join(",");return i.enable(""),u}function o(u){if(u[u.length-1]==="*")return  true;let f,d;for(f=0,d=i.skips.length;f<d;f++)if(i.skips[f].test(u))return  false;for(f=0,d=i.names.length;f<d;f++)if(i.names[f].test(u))return  true;return  false}function a(u){return u.toString().substring(2,u.toString().length-2).replace(/\.\*\?$/,"*")}function l(u){return u instanceof Error?u.stack||u.message:u}function c(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");}return i.enable(i.load()),i}th.exports=o_;});var ih=_((_t,gs)=>{_t.formatArgs=l_;_t.save=c_;_t.load=u_;_t.useColors=a_;_t.storage=f_();_t.destroy=(()=>{let t=false;return ()=>{t||(t=true,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));}})();_t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function a_(){return typeof window!="undefined"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?true:typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?false:typeof document!="undefined"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window!="undefined"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function l_(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+gs.exports.humanize(this.diff),!this.useColors)return;let e="color: "+this.color;t.splice(1,0,e,"color: inherit");let i=0,r=0;t[0].replace(/%[a-zA-Z%]/g,n=>{n!=="%%"&&(i++,n==="%c"&&(r=i));}),t.splice(r,0,e);}_t.log=console.debug||console.log||(()=>{});function c_(t){try{t?_t.storage.setItem("debug",t):_t.storage.removeItem("debug");}catch{}}function u_(){let t;try{t=_t.storage.getItem("debug");}catch{}return !t&&typeof process!="undefined"&&"env"in process&&(t=process.env.DEBUG),t}function f_(){try{return localStorage}catch{}}gs.exports=xa()(_t);var{formatters:h_}=gs.exports;h_.j=function(t){try{return JSON.stringify(t)}catch(e){return "[UnexpectedJSONParseError]: "+e.message}};});var nh=_((II,rh)=>{rh.exports=(t,e=process.argv)=>{let i=t.startsWith("-")?"":t.length===1?"-":"--",r=e.indexOf(i+t),n=e.indexOf("--");return r!==-1&&(n===-1||r<n)};});var ah=_((NI,oh)=>{var p_=require$$0$2,sh=require$$2$2,Ot=nh(),{env:We}=process,vs;Ot("no-color")||Ot("no-colors")||Ot("color=false")||Ot("color=never")?vs=0:(Ot("color")||Ot("colors")||Ot("color=true")||Ot("color=always"))&&(vs=1);function d_(){if("FORCE_COLOR"in We)return We.FORCE_COLOR==="true"?1:We.FORCE_COLOR==="false"?0:We.FORCE_COLOR.length===0?1:Math.min(Number.parseInt(We.FORCE_COLOR,10),3)}function m_(t){return t===0?false:{level:t,hasBasic:true,has256:t>=2,has16m:t>=3}}function g_(t,{streamIsTTY:e,sniffFlags:i=true}={}){let r=d_();r!==void 0&&(vs=r);let n=i?vs:r;if(n===0)return 0;if(i){if(Ot("color=16m")||Ot("color=full")||Ot("color=truecolor"))return 3;if(Ot("color=256"))return 2}if(t&&!e&&n===void 0)return 0;let s=n||0;if(We.TERM==="dumb")return s;if(process.platform==="win32"){let o=p_.release().split(".");return Number(o[0])>=10&&Number(o[2])>=10586?Number(o[2])>=14931?3:2:1}if("CI"in We)return ["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE","DRONE"].some(o=>o in We)||We.CI_NAME==="codeship"?1:s;if("TEAMCITY_VERSION"in We)return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(We.TEAMCITY_VERSION)?1:0;if(We.COLORTERM==="truecolor")return 3;if("TERM_PROGRAM"in We){let o=Number.parseInt((We.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(We.TERM_PROGRAM){case "iTerm.app":return o>=3?3:2;case "Apple_Terminal":return 2}}return /-256(color)?$/i.test(We.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(We.TERM)||"COLORTERM"in We?1:s}function Sa(t,e={}){let i=g_(t,{streamIsTTY:t&&t.isTTY,...e});return m_(i)}oh.exports={supportsColor:Sa,stdout:Sa({isTTY:sh.isatty(1)}),stderr:Sa({isTTY:sh.isatty(2)})};});var ch=_((Qe,bs)=>{var v_=require$$2$2,ys=require$$1;Qe.init=E_;Qe.log=w_;Qe.formatArgs=b_;Qe.save=x_;Qe.load=S_;Qe.useColors=y_;Qe.destroy=ys.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");Qe.colors=[6,2,3,4,5,1];try{let t=ah();t&&(t.stderr||t).level>=2&&(Qe.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221]);}catch{}Qe.inspectOpts=Object.keys(process.env).filter(t=>/^debug_/i.test(t)).reduce((t,e)=>{let i=e.substring(6).toLowerCase().replace(/_([a-z])/g,(n,s)=>s.toUpperCase()),r=process.env[e];return /^(yes|on|true|enabled)$/i.test(r)?r=true:/^(no|off|false|disabled)$/i.test(r)?r=false:r==="null"?r=null:r=Number(r),t[i]=r,t},{});function y_(){return "colors"in Qe.inspectOpts?!!Qe.inspectOpts.colors:v_.isatty(process.stderr.fd)}function b_(t){let{namespace:e,useColors:i}=this;if(i){let r=this.color,n="\x1B[3"+(r<8?r:"8;5;"+r),s=`  ${n};1m${e} \x1B[0m`;t[0]=s+t[0].split(`
`).join(`
`+s),t.push(n+"m+"+bs.exports.humanize(this.diff)+"\x1B[0m");}else t[0]=__()+e+" "+t[0];}function __(){return Qe.inspectOpts.hideDate?"":new Date().toISOString()+" "}function w_(...t){return process.stderr.write(ys.format(...t)+`
`)}function x_(t){t?process.env.DEBUG=t:delete process.env.DEBUG;}function S_(){return process.env.DEBUG}function E_(t){t.inspectOpts={};let e=Object.keys(Qe.inspectOpts);for(let i=0;i<e.length;i++)t.inspectOpts[e[i]]=Qe.inspectOpts[e[i]];}bs.exports=xa()(Qe);var{formatters:lh}=bs.exports;lh.o=function(t){return this.inspectOpts.colors=this.useColors,ys.inspect(t,this.inspectOpts).split(`
`).map(e=>e.trim()).join(" ")};lh.O=function(t){return this.inspectOpts.colors=this.useColors,ys.inspect(t,this.inspectOpts)};});var yr=_((LI,Ea)=>{typeof process=="undefined"||process.type==="renderer"||process.browser===true||process.__nwjs?Ea.exports=ih():Ea.exports=ch();});var Rh=_((BI,ow)=>{ow.exports={name:"dotenv",version:"16.4.5",description:"Loads environment variables from .env file",main:"lib/main.js",types:"lib/main.d.ts",exports:{".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},scripts:{"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard","lint-readme":"standard-markdown",pretest:"npm run lint && npm run dts-check",test:"tap tests/*.js --100 -Rspec","test:coverage":"tap --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},repository:{type:"git",url:"git://github.com/motdotla/dotenv.git"},funding:"https://dotenvx.com",keywords:["dotenv","env",".env","environment","variables","config","settings"],readmeFilename:"README.md",license:"BSD-2-Clause",devDependencies:{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3",decache:"^4.6.1",sinon:"^14.0.1",standard:"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0",tap:"^16.3.0",tar:"^6.1.11",typescript:"^4.8.4"},engines:{node:">=12"},browser:{fs:false}};});var qh=_((RI,ii)=>{var Ra=require$$0$4,Pa=require$$1$1,aw=require$$0$2,lw=require$$5,cw=Rh(),Ma=cw.version,uw=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function fw(t){let e={},i=t.toString();i=i.replace(/\r\n?/mg,`
`);let r;for(;(r=uw.exec(i))!=null;){let n=r[1],s=r[2]||"";s=s.trim();let o=s[0];s=s.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),o==='"'&&(s=s.replace(/\\n/g,`
`),s=s.replace(/\\r/g,"\r")),e[n]=s;}return e}function hw(t){let e=Fh(t),i=$e.configDotenv({path:e});if(!i.parsed){let o=new Error(`MISSING_DATA: Cannot parse ${e} for an unknown reason`);throw o.code="MISSING_DATA",o}let r=Mh(t).split(","),n=r.length,s;for(let o=0;o<n;o++)try{let a=r[o].trim(),l=mw(i,a);s=$e.decrypt(l.ciphertext,l.key);break}catch(a){if(o+1>=n)throw a}return $e.parse(s)}function pw(t){console.log(`[dotenv@${Ma}][INFO] ${t}`);}function dw(t){console.log(`[dotenv@${Ma}][WARN] ${t}`);}function Ts(t){console.log(`[dotenv@${Ma}][DEBUG] ${t}`);}function Mh(t){return t&&t.DOTENV_KEY&&t.DOTENV_KEY.length>0?t.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function mw(t,e){let i;try{i=new URL(e);}catch(a){if(a.code==="ERR_INVALID_URL"){let l=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw l.code="INVALID_DOTENV_KEY",l}throw a}let r=i.password;if(!r){let a=new Error("INVALID_DOTENV_KEY: Missing key part");throw a.code="INVALID_DOTENV_KEY",a}let n=i.searchParams.get("environment");if(!n){let a=new Error("INVALID_DOTENV_KEY: Missing environment part");throw a.code="INVALID_DOTENV_KEY",a}let s=`DOTENV_VAULT_${n.toUpperCase()}`,o=t.parsed[s];if(!o){let a=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw a.code="NOT_FOUND_DOTENV_ENVIRONMENT",a}return {ciphertext:o,key:r}}function Fh(t){let e=null;if(t&&t.path&&t.path.length>0)if(Array.isArray(t.path))for(let i of t.path)Ra.existsSync(i)&&(e=i.endsWith(".vault")?i:`${i}.vault`);else e=t.path.endsWith(".vault")?t.path:`${t.path}.vault`;else e=Pa.resolve(process.cwd(),".env.vault");return Ra.existsSync(e)?e:null}function Ph(t){return t[0]==="~"?Pa.join(aw.homedir(),t.slice(1)):t}function gw(t){pw("Loading env from encrypted .env.vault");let e=$e._parseVault(t),i=process.env;return t&&t.processEnv!=null&&(i=t.processEnv),$e.populate(i,e,t),{parsed:e}}function vw(t){let e=Pa.resolve(process.cwd(),".env"),i="utf8",r=!!(t&&t.debug);t&&t.encoding?i=t.encoding:r&&Ts("No encoding is specified. UTF-8 is used by default");let n=[e];if(t&&t.path)if(!Array.isArray(t.path))n=[Ph(t.path)];else {n=[];for(let l of t.path)n.push(Ph(l));}let s,o={};for(let l of n)try{let c=$e.parse(Ra.readFileSync(l,{encoding:i}));$e.populate(o,c,t);}catch(c){r&&Ts(`Failed to load ${l} ${c.message}`),s=c;}let a=process.env;return t&&t.processEnv!=null&&(a=t.processEnv),$e.populate(a,o,t),s?{parsed:o,error:s}:{parsed:o}}function yw(t){if(Mh(t).length===0)return $e.configDotenv(t);let e=Fh(t);return e?$e._configVault(t):(dw(`You set DOTENV_KEY but you are missing a .env.vault file at ${e}. Did you forget to build it?`),$e.configDotenv(t))}function bw(t,e){let i=Buffer.from(e.slice(-64),"hex"),r=Buffer.from(t,"base64"),n=r.subarray(0,12),s=r.subarray(-16);r=r.subarray(12,-16);try{let o=lw.createDecipheriv("aes-256-gcm",i,n);return o.setAuthTag(s),`${o.update(r)}${o.final()}`}catch(o){let a=o instanceof RangeError,l=o.message==="Invalid key length",c=o.message==="Unsupported state or unable to authenticate data";if(a||l){let u=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw u.code="INVALID_DOTENV_KEY",u}else if(c){let u=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw u.code="DECRYPTION_FAILED",u}else throw o}}function _w(t,e,i={}){let r=!!(i&&i.debug),n=!!(i&&i.override);if(typeof e!="object"){let s=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw s.code="OBJECT_REQUIRED",s}for(let s of Object.keys(e))Object.prototype.hasOwnProperty.call(t,s)?(n===true&&(t[s]=e[s]),r&&Ts(n===true?`"${s}" is already defined and WAS overwritten`:`"${s}" is already defined and was NOT overwritten`)):t[s]=e[s];}var $e={configDotenv:vw,_configVault:gw,_parseVault:hw,config:yw,decrypt:bw,parse:fw,populate:_w};ii.exports.configDotenv=$e.configDotenv;ii.exports._configVault=$e._configVault;ii.exports._parseVault=$e._parseVault;ii.exports.config=$e.config;ii.exports.decrypt=$e.decrypt;ii.exports.parse=$e.parse;ii.exports.populate=$e.populate;ii.exports=$e;});var jh=_(Dh=>{var ww=require$$6.parse,xw={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443},Sw=String.prototype.endsWith||function(t){return t.length<=this.length&&this.indexOf(t,this.length-t.length)!==-1};function Ew(t){var e=typeof t=="string"?ww(t):t||{},i=e.protocol,r=e.host,n=e.port;if(typeof r!="string"||!r||typeof i!="string"||(i=i.split(":",1)[0],r=r.replace(/:\d*$/,""),n=parseInt(n)||xw[i]||0,!kw(r,n)))return "";var s=_r("npm_config_"+i+"_proxy")||_r(i+"_proxy")||_r("npm_config_proxy")||_r("all_proxy");return s&&s.indexOf("://")===-1&&(s=i+"://"+s),s}function kw(t,e){var i=(_r("npm_config_no_proxy")||_r("no_proxy")).toLowerCase();return i?i==="*"?false:i.split(/[,\s]/).every(function(r){if(!r)return  true;var n=r.match(/^(.+):(\d+)$/),s=n?n[1]:r,o=n?parseInt(n[2]):0;return o&&o!==e?true:/^[.*]/.test(s)?(s.charAt(0)==="*"&&(s=s.slice(1)),!Sw.call(t,s)):t!==s}):true}function _r(t){return process.env[t.toLowerCase()]||process.env[t.toUpperCase()]||""}Dh.getProxyForUrl=Ew;});var Uh=_(Fa=>{Object.defineProperty(Fa,"__esModule",{value:true});function Ow(t){return function(e,i){return new Promise((r,n)=>{t.call(this,e,i,(s,o)=>{s?n(s):r(o);});})}}Fa.default=Ow;});var ja=_((Da,Vh)=>{var $h=Da&&Da.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},Cw=require$$0$5,Tw=$h(yr()),Aw=$h(Uh()),rn=Tw.default("agent-base");function Iw(t){return !!t&&typeof t.addRequest=="function"}function qa(){let{stack:t}=new Error;return typeof t!="string"?false:t.split(`
`).some(e=>e.indexOf("(https.js:")!==-1||e.indexOf("node:https:")!==-1)}function As(t,e){return new As.Agent(t,e)}(function(t){class e extends Cw.EventEmitter{constructor(r,n){super();let s=n;typeof r=="function"?this.callback=r:r&&(s=r),this.timeout=null,s&&typeof s.timeout=="number"&&(this.timeout=s.timeout),this.maxFreeSockets=1,this.maxSockets=1,this.maxTotalSockets=1/0,this.sockets={},this.freeSockets={},this.requests={},this.options={};}get defaultPort(){return typeof this.explicitDefaultPort=="number"?this.explicitDefaultPort:qa()?443:80}set defaultPort(r){this.explicitDefaultPort=r;}get protocol(){return typeof this.explicitProtocol=="string"?this.explicitProtocol:qa()?"https:":"http:"}set protocol(r){this.explicitProtocol=r;}callback(r,n,s){throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`')}addRequest(r,n){let s=Object.assign({},n);typeof s.secureEndpoint!="boolean"&&(s.secureEndpoint=qa()),s.host==null&&(s.host="localhost"),s.port==null&&(s.port=s.secureEndpoint?443:80),s.protocol==null&&(s.protocol=s.secureEndpoint?"https:":"http:"),s.host&&s.path&&delete s.path,delete s.agent,delete s.hostname,delete s._defaultAgent,delete s.defaultPort,delete s.createConnection,r._last=true,r.shouldKeepAlive=false;let o=false,a=null,l=s.timeout||this.timeout,c=g=>{r._hadError||(r.emit("error",g),r._hadError=true);},u=()=>{a=null,o=true;let g=new Error(`A "socket" was not created for HTTP request before ${l}ms`);g.code="ETIMEOUT",c(g);},f=g=>{o||(a!==null&&(clearTimeout(a),a=null),c(g));},d=g=>{if(o)return;if(a!=null&&(clearTimeout(a),a=null),Iw(g)){rn("Callback returned another Agent instance %o",g.constructor.name),g.addRequest(r,s);return}if(g){g.once("free",()=>{this.freeSocket(g,s);}),r.onSocket(g);return}let m=new Error(`no Duplex stream was returned to agent-base for \`${r.method} ${r.path}\``);c(m);};if(typeof this.callback!="function"){c(new Error("`callback` is not defined"));return}this.promisifiedCallback||(this.callback.length>=3?(rn("Converting legacy callback function to promise"),this.promisifiedCallback=Aw.default(this.callback)):this.promisifiedCallback=this.callback),typeof l=="number"&&l>0&&(a=setTimeout(u,l)),"port"in s&&typeof s.port!="number"&&(s.port=Number(s.port));try{rn("Resolving socket for %o request: %o",s.protocol,`${r.method} ${r.path}`),Promise.resolve(this.promisifiedCallback(r,s)).then(d,f);}catch(g){Promise.reject(g).catch(f);}}freeSocket(r,n){rn("Freeing socket %o %o",r.constructor.name,n),r.destroy();}destroy(){rn("Destroying agent %o",this.constructor.name);}}t.Agent=e,t.prototype=t.Agent.prototype;})(As||(As={}));Vh.exports=As;});var Hh=_(sn=>{var Nw=sn&&sn.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(sn,"__esModule",{value:true});var Lw=Nw(yr()),nn=Lw.default("https-proxy-agent:parse-proxy-response");function Bw(t){return new Promise((e,i)=>{let r=0,n=[];function s(){let f=t.read();f?u(f):t.once("readable",s);}function o(){t.removeListener("end",l),t.removeListener("error",c),t.removeListener("close",a),t.removeListener("readable",s);}function a(f){nn("onclose had error %o",f);}function l(){nn("onend");}function c(f){o(),nn("onerror %o",f),i(f);}function u(f){n.push(f),r+=f.length;let d=Buffer.concat(n,r);if(d.indexOf(`\r
\r
`)===-1){nn("have not received end of HTTP headers yet..."),s();return}let m=d.toString("ascii",0,d.indexOf(`\r
`)),y=+m.split(" ")[1];nn("got proxy server response: %o",m),e({statusCode:y,buffered:d});}t.on("error",c),t.on("close",a),t.on("end",l),s();})}sn.default=Bw;});var Wh=_($i=>{var Rw=$i&&$i.__awaiter||function(t,e,i,r){function n(s){return s instanceof i?s:new i(function(o){o(s);})}return new(i||(i=Promise))(function(s,o){function a(u){try{c(r.next(u));}catch(f){o(f);}}function l(u){try{c(r.throw(u));}catch(f){o(f);}}function c(u){u.done?s(u.value):n(u.value).then(a,l);}c((r=r.apply(t,e||[])).next());})},wr=$i&&$i.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty($i,"__esModule",{value:true});var Gh=wr(require$$8),Yh=wr(require$$9),Pw=wr(require$$6),Mw=wr(require$$10$1),Fw=wr(yr()),qw=ja(),Dw=wr(Hh()),on=Fw.default("https-proxy-agent:agent"),Ua=class extends qw.Agent{constructor(e){let i;if(typeof e=="string"?i=Pw.default.parse(e):i=e,!i)throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");on("creating new HttpsProxyAgent instance: %o",i),super(i);let r=Object.assign({},i);this.secureProxy=i.secureProxy||$w(r.protocol),r.host=r.hostname||r.host,typeof r.port=="string"&&(r.port=parseInt(r.port,10)),!r.port&&r.host&&(r.port=this.secureProxy?443:80),this.secureProxy&&!("ALPNProtocols"in r)&&(r.ALPNProtocols=["http 1.1"]),r.host&&r.path&&(delete r.path,delete r.pathname),this.proxy=r;}callback(e,i){return Rw(this,void 0,void 0,function*(){let{proxy:r,secureProxy:n}=this,s;n?(on("Creating `tls.Socket`: %o",r),s=Yh.default.connect(r)):(on("Creating `net.Socket`: %o",r),s=Gh.default.connect(r));let o=Object.assign({},r.headers),l=`CONNECT ${`${i.host}:${i.port}`} HTTP/1.1\r
`;r.auth&&(o["Proxy-Authorization"]=`Basic ${Buffer.from(r.auth).toString("base64")}`);let{host:c,port:u,secureEndpoint:f}=i;Uw(u,f)||(c+=`:${u}`),o.Host=c,o.Connection="close";for(let b of Object.keys(o))l+=`${b}: ${o[b]}\r
`;let d=Dw.default(s);s.write(`${l}\r
`);let{statusCode:g,buffered:m}=yield d;if(g===200){if(e.once("socket",jw),i.secureEndpoint){on("Upgrading socket connection to TLS");let b=i.servername||i.host;return Yh.default.connect(Object.assign(Object.assign({},Vw(i,"host","hostname","path","port")),{socket:s,servername:b}))}return s}s.destroy();let y=new Gh.default.Socket({writable:false});return y.readable=true,e.once("socket",b=>{on("replaying proxy buffer for failed request"),Mw.default(b.listenerCount("data")>0),b.push(m),b.push(null);}),y})}};$i.default=Ua;function jw(t){t.resume();}function Uw(t,e){return !!(!e&&t===80||e&&t===443)}function $w(t){return typeof t=="string"?/^https:?$/i.test(t):false}function Vw(t,...e){let i={},r;for(r in t)e.includes(r)||(i[r]=t[r]);return i}});var zh=_((Ha,Kh)=>{var Hw=Ha&&Ha.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},$a=Hw(Wh());function Va(t){return new $a.default(t)}(function(t){t.HttpsProxyAgent=$a.default,t.prototype=$a.default.prototype;})(Va||(Va={}));Kh.exports=Va;});var Qh=_((DI,Is)=>{function Gw(t){var r=Math.floor,n=new Array(64),s=new Array(64),o=new Array(64),a=new Array(64),l,c,u,f,d=new Array(65535),g=new Array(65535),m=new Array(64),y=new Array(64),b=[],x=0,E=7,O=new Array(64),k=new Array(64),S=new Array(64),R=new Array(256),T=new Array(2048),A,C=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],L=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],P=[0,1,2,3,4,5,6,7,8,9,10,11],U=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],q=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],H=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],j=[0,1,2,3,4,5,6,7,8,9,10,11],V=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],W=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function Q(I){for(var Z=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],te=0;te<64;te++){var ee=r((Z[te]*I+50)/100);ee<1?ee=1:ee>255&&(ee=255),n[C[te]]=ee;}for(var le=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],ce=0;ce<64;ce++){var _e=r((le[ce]*I+50)/100);_e<1?_e=1:_e>255&&(_e=255),s[C[ce]]=_e;}for(var we=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],Be=0,Te=0;Te<8;Te++)for(var D=0;D<8;D++)o[Be]=1/(n[C[Be]]*we[Te]*we[D]*8),a[Be]=1/(s[C[Be]]*we[Te]*we[D]*8),Be++;}function Y(I,Z){for(var te=0,ee=0,le=new Array,ce=1;ce<=16;ce++){for(var _e=1;_e<=I[ce];_e++)le[Z[ee]]=[],le[Z[ee]][0]=te,le[Z[ee]][1]=ce,ee++,te++;te*=2;}return le}function de(){l=Y(L,P),c=Y(H,j),u=Y(U,q),f=Y(V,W);}function ae(){for(var I=1,Z=2,te=1;te<=15;te++){for(var ee=I;ee<Z;ee++)g[32767+ee]=te,d[32767+ee]=[],d[32767+ee][1]=te,d[32767+ee][0]=ee;for(var le=-(Z-1);le<=-I;le++)g[32767+le]=te,d[32767+le]=[],d[32767+le][1]=te,d[32767+le][0]=Z-1+le;I<<=1,Z<<=1;}}function ne(){for(var I=0;I<256;I++)T[I]=19595*I,T[I+256>>0]=38470*I,T[I+512>>0]=7471*I+32768,T[I+768>>0]=-11059*I,T[I+1024>>0]=-21709*I,T[I+1280>>0]=32768*I+8421375,T[I+1536>>0]=-27439*I,T[I+1792>>0]=-5329*I;}function ue(I){for(var Z=I[0],te=I[1]-1;te>=0;)Z&1<<te&&(x|=1<<E),te--,E--,E<0&&(x==255?(N(255),N(0)):N(x),E=7,x=0);}function N(I){b.push(I);}function X(I){N(I>>8&255),N(I&255);}function ke(I,Z){var te,ee,le,ce,_e,we,Be,Te,D=0,J,se=8,Ie=64;for(J=0;J<se;++J){te=I[D],ee=I[D+1],le=I[D+2],ce=I[D+3],_e=I[D+4],we=I[D+5],Be=I[D+6],Te=I[D+7];var oe=te+Te,me=te-Te,Ee=ee+Be,ie=ee-Be,xe=le+we,je=le-we,Ae=ce+_e,ht=ce-_e,Et=oe+Ae,Qt=oe-Ae,ui=Ee+xe,fi=Ee-xe;I[D]=Et+ui,I[D+4]=Et-ui;var Ni=(fi+Qt)*.707106781;I[D+2]=Qt+Ni,I[D+6]=Qt-Ni,Et=ht+je,ui=je+ie,fi=ie+me;var Li=(Et-fi)*.382683433,fr=.5411961*Et+Li,Bi=1.306562965*fi+Li,Ri=ui*.707106781,Pi=me+Ri,Mi=me-Ri;I[D+5]=Mi+fr,I[D+3]=Mi-fr,I[D+1]=Pi+Bi,I[D+7]=Pi-Bi,D+=8;}for(D=0,J=0;J<se;++J){te=I[D],ee=I[D+8],le=I[D+16],ce=I[D+24],_e=I[D+32],we=I[D+40],Be=I[D+48],Te=I[D+56];var Xn=te+Te,Qr=te-Te,es=ee+Be,ts=ee-Be,is=le+we,rs=le-we,ns=ce+_e,ga=ce-_e,Fi=Xn+ns,Xt=Xn-ns,qi=es+is,hr=es-is;I[D]=Fi+qi,I[D+32]=Fi-qi;var ss=(hr+Xt)*.707106781;I[D+16]=Xt+ss,I[D+48]=Xt-ss,Fi=ga+rs,qi=rs+ts,hr=ts+Qr;var os=(Fi-hr)*.382683433,as=.5411961*Fi+os,ls=1.306562965*hr+os,$t=qi*.707106781,cs=Qr+$t,us=Qr-$t;I[D+40]=us+as,I[D+24]=us-as,I[D+8]=cs+ls,I[D+56]=cs-ls,D++;}var pr;for(J=0;J<Ie;++J)pr=I[J]*Z[J],m[J]=pr>0?pr+.5|0:pr-.5|0;return m}function be(){X(65504),X(16),N(74),N(70),N(73),N(70),N(0),N(1),N(1),N(0),X(1),X(1),N(0),N(0);}function ge(I){if(I){X(65505),I[0]===69&&I[1]===120&&I[2]===105&&I[3]===102?X(I.length+2):(X(I.length+5+2),N(69),N(120),N(105),N(102),N(0));for(var Z=0;Z<I.length;Z++)N(I[Z]);}}function ve(I,Z){X(65472),X(17),N(8),X(Z),X(I),N(3),N(1),N(17),N(0),N(2),N(17),N(1),N(3),N(17),N(1);}function fe(){X(65499),X(132),N(0);for(var I=0;I<64;I++)N(n[I]);N(1);for(var Z=0;Z<64;Z++)N(s[Z]);}function z(){X(65476),X(418),N(0);for(var I=0;I<16;I++)N(L[I+1]);for(var Z=0;Z<=11;Z++)N(P[Z]);N(16);for(var te=0;te<16;te++)N(U[te+1]);for(var ee=0;ee<=161;ee++)N(q[ee]);N(1);for(var le=0;le<16;le++)N(H[le+1]);for(var ce=0;ce<=11;ce++)N(j[ce]);N(17);for(var _e=0;_e<16;_e++)N(V[_e+1]);for(var we=0;we<=161;we++)N(W[we]);}function $(I){typeof I=="undefined"||I.constructor!==Array||I.forEach(Z=>{if(typeof Z=="string"){X(65534);var te=Z.length;X(te+2);var ee;for(ee=0;ee<te;ee++)N(Z.charCodeAt(ee));}});}function Ce(){X(65498),X(12),N(3),N(1),N(0),N(2),N(17),N(3),N(17),N(0),N(63),N(0);}function re(I,Z,te,ee,le){for(var ce=le[0],_e=le[240],we,Be=16,Te=63,D=64,J=ke(I,Z),se=0;se<D;++se)y[C[se]]=J[se];var Ie=y[0]-te;te=y[0],Ie==0?ue(ee[0]):(we=32767+Ie,ue(ee[g[we]]),ue(d[we]));for(var oe=63;oe>0&&y[oe]==0;oe--);if(oe==0)return ue(ce),te;for(var me=1,Ee;me<=oe;){for(var ie=me;y[me]==0&&me<=oe;++me);var xe=me-ie;if(xe>=Be){Ee=xe>>4;for(var je=1;je<=Ee;++je)ue(_e);xe=xe&15;}we=32767+y[me],ue(le[(xe<<4)+g[we]]),ue(d[we]),me++;}return oe!=Te&&ue(ce),te}function he(){for(var I=String.fromCharCode,Z=0;Z<256;Z++)R[Z]=I(Z);}this.encode=function(I,Z){new Date().getTime();Z&&ft(Z),b=new Array,x=0,E=7,X(65496),be(),$(I.comments),ge(I.exifBuffer),fe(),ve(I.width,I.height),z(),Ce();var ee=0,le=0,ce=0;x=0,E=7,this.encode.displayName="_encode_";for(var _e=I.data,we=I.width,Be=I.height,Te=we*4,D=we*3,J,se=0,Ie,oe,me,Ee,ie,xe,je,Ae;se<Be;){for(J=0;J<Te;){for(Ee=Te*se+J,ie=Ee,xe=-1,je=0,Ae=0;Ae<64;Ae++)je=Ae>>3,xe=(Ae&7)*4,ie=Ee+je*Te+xe,se+je>=Be&&(ie-=Te*(se+1+je-Be)),J+xe>=Te&&(ie-=J+xe-Te+4),Ie=_e[ie++],oe=_e[ie++],me=_e[ie++],O[Ae]=(T[Ie]+T[oe+256>>0]+T[me+512>>0]>>16)-128,k[Ae]=(T[Ie+768>>0]+T[oe+1024>>0]+T[me+1280>>0]>>16)-128,S[Ae]=(T[Ie+1280>>0]+T[oe+1536>>0]+T[me+1792>>0]>>16)-128;ee=re(O,o,ee,l,u),le=re(k,a,le,c,f),ce=re(S,a,ce,c,f),J+=32;}se+=8;}if(E>=0){var ht=[];ht[1]=E+1,ht[0]=(1<<E+1)-1,ue(ht);}if(X(65497),typeof Is=="undefined")return new Uint8Array(b);return Buffer.from(b);};function ft(I){if(I<=0&&(I=1),I>100&&(I=100),A!=I){var Z=0;I<50?Z=Math.floor(5e3/I):Z=Math.floor(200-I*2),Q(Z),A=I;}}function vt(){var I=new Date().getTime();t||(t=50),he(),de(),ae(),ne(),ft(t);new Date().getTime()-I;}vt();}typeof Is!="undefined"?Is.exports=Jh:typeof window!="undefined"&&(window["jpeg-js"]=window["jpeg-js"]||{},window["jpeg-js"].encode=Jh);function Jh(t,e){typeof e=="undefined"&&(e=50);var i=new Gw(e),r=i.encode(t,e);return {data:r,width:t.width,height:t.height}}});var ep=_((jI,Ya)=>{var Ga=function(){var e=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),i=4017,r=799,n=3406,s=2276,o=1567,a=3784,l=5793,c=2896;function u(){}function f(E,O){for(var k=0,S=[],R,T,A=16;A>0&&!E[A-1];)A--;S.push({children:[],index:0});var C=S[0],L;for(R=0;R<A;R++){for(T=0;T<E[R];T++){for(C=S.pop(),C.children[C.index]=O[k];C.index>0;){if(S.length===0)throw new Error("Could not recreate Huffman Table");C=S.pop();}for(C.index++,S.push(C);S.length<=R;)S.push(L={children:[],index:0}),C.children[C.index]=L.children,C=L;k++;}R+1<A&&(S.push(L={children:[],index:0}),C.children[C.index]=L.children,C=L);}return S[0].children}function d(E,O,k,S,R,T,A,C,L,P){k.precision;k.samplesPerLine;k.scanLines;var j=k.mcusPerLine,V=k.progressive;k.maxH;k.maxV;var Y=O,de=0,ae=0;function ne(){if(ae>0)return ae--,de>>ae&1;if(de=E[O++],de==255){var D=E[O++];if(D)throw new Error("unexpected marker: "+(de<<8|D).toString(16))}return ae=7,de>>>7}function ue(D){for(var J=D,se;(se=ne())!==null;){if(J=J[se],typeof J=="number")return J;if(typeof J!="object")throw new Error("invalid huffman sequence")}return null}function N(D){for(var J=0;D>0;){var se=ne();if(se===null)return;J=J<<1|se,D--;}return J}function X(D){var J=N(D);return J>=1<<D-1?J:J+(-1<<D)+1}function ke(D,J){var se=ue(D.huffmanTableDC),Ie=se===0?0:X(se);J[0]=D.pred+=Ie;for(var oe=1;oe<64;){var me=ue(D.huffmanTableAC),Ee=me&15,ie=me>>4;if(Ee===0){if(ie<15)break;oe+=16;continue}oe+=ie;var xe=e[oe];J[xe]=X(Ee),oe++;}}function be(D,J){var se=ue(D.huffmanTableDC),Ie=se===0?0:X(se)<<L;J[0]=D.pred+=Ie;}function ge(D,J){J[0]|=ne()<<L;}var ve=0;function fe(D,J){if(ve>0){ve--;return}for(var se=T,Ie=A;se<=Ie;){var oe=ue(D.huffmanTableAC),me=oe&15,Ee=oe>>4;if(me===0){if(Ee<15){ve=N(Ee)+(1<<Ee)-1;break}se+=16;continue}se+=Ee;var ie=e[se];J[ie]=X(me)*(1<<L),se++;}}var z=0,$;function Ce(D,J){for(var se=T,Ie=A,oe=0;se<=Ie;){var me=e[se],Ee=J[me]<0?-1:1;switch(z){case 0:var ie=ue(D.huffmanTableAC),xe=ie&15,oe=ie>>4;if(xe===0)oe<15?(ve=N(oe)+(1<<oe),z=4):(oe=16,z=1);else {if(xe!==1)throw new Error("invalid ACn encoding");$=X(xe),z=oe?2:3;}continue;case 1:case 2:J[me]?J[me]+=(ne()<<L)*Ee:(oe--,oe===0&&(z=z==2?3:0));break;case 3:J[me]?J[me]+=(ne()<<L)*Ee:(J[me]=$<<L,z=0);break;case 4:J[me]&&(J[me]+=(ne()<<L)*Ee);break}se++;}z===4&&(ve--,ve===0&&(z=0));}function re(D,J,se,Ie,oe){var me=se/j|0,Ee=se%j,ie=me*D.v+Ie,xe=Ee*D.h+oe;D.blocks[ie]===void 0&&P.tolerantDecoding||J(D,D.blocks[ie][xe]);}function he(D,J,se){var Ie=se/D.blocksPerLine|0,oe=se%D.blocksPerLine;D.blocks[Ie]===void 0&&P.tolerantDecoding||J(D,D.blocks[Ie][oe]);}var ft=S.length,vt,I,Z,te,ee,le;V?T===0?le=C===0?be:ge:le=C===0?fe:Ce:le=ke;var ce=0,_e,we;ft==1?we=S[0].blocksPerLine*S[0].blocksPerColumn:we=j*k.mcusPerColumn,R||(R=we);for(var Be,Te;ce<we;){for(I=0;I<ft;I++)S[I].pred=0;if(ve=0,ft==1)for(vt=S[0],ee=0;ee<R;ee++)he(vt,le,ce),ce++;else for(ee=0;ee<R;ee++){for(I=0;I<ft;I++)for(vt=S[I],Be=vt.h,Te=vt.v,Z=0;Z<Te;Z++)for(te=0;te<Be;te++)re(vt,le,ce,Z,te);if(ce++,ce===we)break}if(ce===we)do{if(E[O]===255&&E[O+1]!==0)break;O+=1;}while(O<E.length-2);if(ae=0,_e=E[O]<<8|E[O+1],_e<65280)throw new Error("marker was not found");if(_e>=65488&&_e<=65495)O+=2;else break}return O-Y}function g(E,O){var k=[],S=O.blocksPerLine,R=O.blocksPerColumn,T=S<<3,A=new Int32Array(64),C=new Uint8Array(64);function L(Y,de,ae){var ne=O.quantizationTable,ue,N,X,ke,be,ge,ve,fe,z,$=ae,Ce;for(Ce=0;Ce<64;Ce++)$[Ce]=Y[Ce]*ne[Ce];for(Ce=0;Ce<8;++Ce){var re=8*Ce;if($[1+re]==0&&$[2+re]==0&&$[3+re]==0&&$[4+re]==0&&$[5+re]==0&&$[6+re]==0&&$[7+re]==0){z=l*$[0+re]+512>>10,$[0+re]=z,$[1+re]=z,$[2+re]=z,$[3+re]=z,$[4+re]=z,$[5+re]=z,$[6+re]=z,$[7+re]=z;continue}ue=l*$[0+re]+128>>8,N=l*$[4+re]+128>>8,X=$[2+re],ke=$[6+re],be=c*($[1+re]-$[7+re])+128>>8,fe=c*($[1+re]+$[7+re])+128>>8,ge=$[3+re]<<4,ve=$[5+re]<<4,z=ue-N+1>>1,ue=ue+N+1>>1,N=z,z=X*a+ke*o+128>>8,X=X*o-ke*a+128>>8,ke=z,z=be-ve+1>>1,be=be+ve+1>>1,ve=z,z=fe+ge+1>>1,ge=fe-ge+1>>1,fe=z,z=ue-ke+1>>1,ue=ue+ke+1>>1,ke=z,z=N-X+1>>1,N=N+X+1>>1,X=z,z=be*s+fe*n+2048>>12,be=be*n-fe*s+2048>>12,fe=z,z=ge*r+ve*i+2048>>12,ge=ge*i-ve*r+2048>>12,ve=z,$[0+re]=ue+fe,$[7+re]=ue-fe,$[1+re]=N+ve,$[6+re]=N-ve,$[2+re]=X+ge,$[5+re]=X-ge,$[3+re]=ke+be,$[4+re]=ke-be;}for(Ce=0;Ce<8;++Ce){var he=Ce;if($[8+he]==0&&$[16+he]==0&&$[24+he]==0&&$[32+he]==0&&$[40+he]==0&&$[48+he]==0&&$[56+he]==0){z=l*ae[Ce+0]+8192>>14,$[0+he]=z,$[8+he]=z,$[16+he]=z,$[24+he]=z,$[32+he]=z,$[40+he]=z,$[48+he]=z,$[56+he]=z;continue}ue=l*$[0+he]+2048>>12,N=l*$[32+he]+2048>>12,X=$[16+he],ke=$[48+he],be=c*($[8+he]-$[56+he])+2048>>12,fe=c*($[8+he]+$[56+he])+2048>>12,ge=$[24+he],ve=$[40+he],z=ue-N+1>>1,ue=ue+N+1>>1,N=z,z=X*a+ke*o+2048>>12,X=X*o-ke*a+2048>>12,ke=z,z=be-ve+1>>1,be=be+ve+1>>1,ve=z,z=fe+ge+1>>1,ge=fe-ge+1>>1,fe=z,z=ue-ke+1>>1,ue=ue+ke+1>>1,ke=z,z=N-X+1>>1,N=N+X+1>>1,X=z,z=be*s+fe*n+2048>>12,be=be*n-fe*s+2048>>12,fe=z,z=ge*r+ve*i+2048>>12,ge=ge*i-ve*r+2048>>12,ve=z,$[0+he]=ue+fe,$[56+he]=ue-fe,$[8+he]=N+ve,$[48+he]=N-ve,$[16+he]=X+ge,$[40+he]=X-ge,$[24+he]=ke+be,$[32+he]=ke-be;}for(Ce=0;Ce<64;++Ce){var ft=128+($[Ce]+8>>4);de[Ce]=ft<0?0:ft>255?255:ft;}}x(T*R*8);for(var P,U,q=0;q<R;q++){var H=q<<3;for(P=0;P<8;P++)k.push(new Uint8Array(T));for(var j=0;j<S;j++){L(O.blocks[q][j],C,A);var V=0,W=j<<3;for(U=0;U<8;U++){var Q=k[H+U];for(P=0;P<8;P++)Q[W+P]=C[V++];}}}return k}function m(E){return E<0?0:E>255?255:E}u.prototype={load:function(O){var k=new XMLHttpRequest;k.open("GET",O,true),k.responseType="arraybuffer",k.onload=function(){var S=new Uint8Array(k.response||k.mozResponseArrayBuffer);this.parse(S),this.onload&&this.onload();}.bind(this),k.send(null);},parse:function(O){var k=this.opts.maxResolutionInMP*1e3*1e3,S=0;O.length;function T(){var ie=O[S]<<8|O[S+1];return S+=2,ie}function A(){var ie=T(),xe=O.subarray(S,S+ie-2);return S+=xe.length,xe}function C(ie){var xe=1,je=1,Ae,ht;for(ht in ie.components)ie.components.hasOwnProperty(ht)&&(Ae=ie.components[ht],xe<Ae.h&&(xe=Ae.h),je<Ae.v&&(je=Ae.v));var Et=Math.ceil(ie.samplesPerLine/8/xe),Qt=Math.ceil(ie.scanLines/8/je);for(ht in ie.components)if(ie.components.hasOwnProperty(ht)){Ae=ie.components[ht];var ui=Math.ceil(Math.ceil(ie.samplesPerLine/8)*Ae.h/xe),fi=Math.ceil(Math.ceil(ie.scanLines/8)*Ae.v/je),Ni=Et*Ae.h,Li=Qt*Ae.v,fr=Li*Ni,Bi=[];x(fr*256);for(var Ri=0;Ri<Li;Ri++){for(var Pi=[],Mi=0;Mi<Ni;Mi++)Pi.push(new Int32Array(64));Bi.push(Pi);}Ae.blocksPerLine=ui,Ae.blocksPerColumn=fi,Ae.blocks=Bi;}ie.maxH=xe,ie.maxV=je,ie.mcusPerLine=Et,ie.mcusPerColumn=Qt;}var L=null,P=null,q,H,j=[],V=[],W=[],Q=[],Y=T(),de=-1;if(this.comments=[],Y!=65496)throw new Error("SOI not found");for(Y=T();Y!=65497;){var ae,ne;switch(Y){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var N=A();if(Y===65534){var X=String.fromCharCode.apply(null,N);this.comments.push(X);}Y===65504&&N[0]===74&&N[1]===70&&N[2]===73&&N[3]===70&&N[4]===0&&(L={version:{major:N[5],minor:N[6]},densityUnits:N[7],xDensity:N[8]<<8|N[9],yDensity:N[10]<<8|N[11],thumbWidth:N[12],thumbHeight:N[13],thumbData:N.subarray(14,14+3*N[12]*N[13])}),Y===65505&&N[0]===69&&N[1]===120&&N[2]===105&&N[3]===102&&N[4]===0&&(this.exifBuffer=N.subarray(5,N.length)),Y===65518&&N[0]===65&&N[1]===100&&N[2]===111&&N[3]===98&&N[4]===101&&N[5]===0&&(P={version:N[6],flags0:N[7]<<8|N[8],flags1:N[9]<<8|N[10],transformCode:N[11]});break;case 65499:for(var ke=T(),be=ke+S-2;S<be;){var ge=O[S++];x(256);var ve=new Int32Array(64);if(ge>>4===0)for(ne=0;ne<64;ne++){var fe=e[ne];ve[fe]=O[S++];}else if(ge>>4===1)for(ne=0;ne<64;ne++){var fe=e[ne];ve[fe]=T();}else throw new Error("DQT: invalid table spec");j[ge&15]=ve;}break;case 65472:case 65473:case 65474:T(),q={},q.extended=Y===65473,q.progressive=Y===65474,q.precision=O[S++],q.scanLines=T(),q.samplesPerLine=T(),q.components={},q.componentsOrder=[];var z=q.scanLines*q.samplesPerLine;if(z>k){var $=Math.ceil((z-k)/1e6);throw new Error(`maxResolutionInMP limit exceeded by ${$}MP`)}var Ce=O[S++],re;for(ae=0;ae<Ce;ae++){re=O[S];var vt=O[S+1]>>4,I=O[S+1]&15,Z=O[S+2];if(vt<=0||I<=0)throw new Error("Invalid sampling factor, expected values above 0");q.componentsOrder.push(re),q.components[re]={h:vt,v:I,quantizationIdx:Z},S+=3;}C(q),V.push(q);break;case 65476:var te=T();for(ae=2;ae<te;){var ee=O[S++],le=new Uint8Array(16),ce=0;for(ne=0;ne<16;ne++,S++)ce+=le[ne]=O[S];x(16+ce);var _e=new Uint8Array(ce);for(ne=0;ne<ce;ne++,S++)_e[ne]=O[S];ae+=17+ce,(ee>>4===0?Q:W)[ee&15]=f(le,_e);}break;case 65501:T(),H=T();break;case 65500:T(),T();break;case 65498:T();var Be=O[S++],Te=[],D;for(ae=0;ae<Be;ae++){D=q.components[O[S++]];var J=O[S++];D.huffmanTableDC=Q[J>>4],D.huffmanTableAC=W[J&15],Te.push(D);}var se=O[S++],Ie=O[S++],oe=O[S++],me=d(O,S,q,Te,H,se,Ie,oe>>4,oe&15,this.opts);S+=me;break;case 65535:O[S]!==255&&S--;break;default:if(O[S-3]==255&&O[S-2]>=192&&O[S-2]<=254){S-=3;break}else if(Y===224||Y==225){if(de!==-1)throw new Error(`first unknown JPEG marker at offset ${de.toString(16)}, second unknown JPEG marker ${Y.toString(16)} at offset ${(S-1).toString(16)}`);de=S-1;let ie=T();if(O[S+ie-2]===255){S+=ie-2;break}}throw new Error("unknown JPEG marker "+Y.toString(16))}Y=T();}if(V.length!=1)throw new Error("only single frame JPEGs supported");for(var ae=0;ae<V.length;ae++){var Ee=V[ae].components;for(var ne in Ee)Ee[ne].quantizationTable=j[Ee[ne].quantizationIdx],delete Ee[ne].quantizationIdx;}this.width=q.samplesPerLine,this.height=q.scanLines,this.jfif=L,this.adobe=P,this.components=[];for(var ae=0;ae<q.componentsOrder.length;ae++){var D=q.components[q.componentsOrder[ae]];this.components.push({lines:g(q,D),scaleX:D.h/q.maxH,scaleY:D.v/q.maxV});}},getData:function(O,k){var S=this.width/O,R=this.height/k,T,A,C,L,P,U,q,H,j,V,W=0,Q,Y,de,ae,ne,ue,N,X,ke,be,ge,ve=O*k*this.components.length;x(ve);var fe=new Uint8Array(ve);switch(this.components.length){case 1:for(T=this.components[0],V=0;V<k;V++)for(P=T.lines[0|V*T.scaleY*R],j=0;j<O;j++)Q=P[0|j*T.scaleX*S],fe[W++]=Q;break;case 2:for(T=this.components[0],A=this.components[1],V=0;V<k;V++)for(P=T.lines[0|V*T.scaleY*R],U=A.lines[0|V*A.scaleY*R],j=0;j<O;j++)Q=P[0|j*T.scaleX*S],fe[W++]=Q,Q=U[0|j*A.scaleX*S],fe[W++]=Q;break;case 3:for(ge=true,this.adobe&&this.adobe.transformCode?ge=true:typeof this.opts.colorTransform!="undefined"&&(ge=!!this.opts.colorTransform),T=this.components[0],A=this.components[1],C=this.components[2],V=0;V<k;V++)for(P=T.lines[0|V*T.scaleY*R],U=A.lines[0|V*A.scaleY*R],q=C.lines[0|V*C.scaleY*R],j=0;j<O;j++)ge?(Q=P[0|j*T.scaleX*S],Y=U[0|j*A.scaleX*S],de=q[0|j*C.scaleX*S],X=m(Q+1.402*(de-128)),ke=m(Q-.3441363*(Y-128)-.71413636*(de-128)),be=m(Q+1.772*(Y-128))):(X=P[0|j*T.scaleX*S],ke=U[0|j*A.scaleX*S],be=q[0|j*C.scaleX*S]),fe[W++]=X,fe[W++]=ke,fe[W++]=be;break;case 4:if(!this.adobe)throw new Error("Unsupported color mode (4 components)");for(ge=false,this.adobe&&this.adobe.transformCode?ge=true:typeof this.opts.colorTransform!="undefined"&&(ge=!!this.opts.colorTransform),T=this.components[0],A=this.components[1],C=this.components[2],L=this.components[3],V=0;V<k;V++)for(P=T.lines[0|V*T.scaleY*R],U=A.lines[0|V*A.scaleY*R],q=C.lines[0|V*C.scaleY*R],H=L.lines[0|V*L.scaleY*R],j=0;j<O;j++)ge?(Q=P[0|j*T.scaleX*S],Y=U[0|j*A.scaleX*S],de=q[0|j*C.scaleX*S],ae=H[0|j*L.scaleX*S],ne=255-m(Q+1.402*(de-128)),ue=255-m(Q-.3441363*(Y-128)-.71413636*(de-128)),N=255-m(Q+1.772*(Y-128))):(ne=P[0|j*T.scaleX*S],ue=U[0|j*A.scaleX*S],N=q[0|j*C.scaleX*S],ae=H[0|j*L.scaleX*S]),fe[W++]=255-ne,fe[W++]=255-ue,fe[W++]=255-N,fe[W++]=255-ae;break;default:throw new Error("Unsupported color mode")}return fe},copyToImageData:function(O,k){var S=O.width,R=O.height,T=O.data,A=this.getData(S,R),C=0,L=0,P,U,q,H,j,V,W,Q,Y;switch(this.components.length){case 1:for(U=0;U<R;U++)for(P=0;P<S;P++)q=A[C++],T[L++]=q,T[L++]=q,T[L++]=q,k&&(T[L++]=255);break;case 3:for(U=0;U<R;U++)for(P=0;P<S;P++)W=A[C++],Q=A[C++],Y=A[C++],T[L++]=W,T[L++]=Q,T[L++]=Y,k&&(T[L++]=255);break;case 4:for(U=0;U<R;U++)for(P=0;P<S;P++)j=A[C++],V=A[C++],q=A[C++],H=A[C++],W=255-m(j*(1-H/255)+H),Q=255-m(V*(1-H/255)+H),Y=255-m(q*(1-H/255)+H),T[L++]=W,T[L++]=Q,T[L++]=Y,k&&(T[L++]=255);break;default:throw new Error("Unsupported color mode")}}};var y=0,b=0;function x(E=0){var O=y+E;if(O>b){var k=Math.ceil((O-b)/1024/1024);throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${k}MB`)}y=O;}return u.resetMaxMemoryUsage=function(E){y=0,b=E;},u.getBytesAllocated=function(){return y},u.requestMemoryAllocation=x,u}();typeof Ya!="undefined"?Ya.exports=Xh:typeof window!="undefined"&&(window["jpeg-js"]=window["jpeg-js"]||{},window["jpeg-js"].decode=Xh);function Xh(t,e={}){var i={colorTransform:void 0,useTArray:false,formatAsRGBA:true,tolerantDecoding:true,maxResolutionInMP:100,maxMemoryUsageInMB:512},r={...i,...e},n=new Uint8Array(t),s=new Ga;s.opts=r,Ga.resetMaxMemoryUsage(r.maxMemoryUsageInMB*1024*1024),s.parse(n);var o=r.formatAsRGBA?4:3,a=s.width*s.height*o;try{Ga.requestMemoryAllocation(a);var l={width:s.width,height:s.height,exifBuffer:s.exifBuffer,data:r.useTArray?new Uint8Array(a):Buffer.alloc(a)};s.comments.length>0&&(l.comments=s.comments);}catch(c){throw c instanceof RangeError?new Error("Could not allocate enough memory for the image. Required: "+a):c instanceof ReferenceError&&c.message==="Buffer is not defined"?new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true"):c}return s.copyToImageData(l,r.formatAsRGBA),l}});var ip=_((UI,tp)=>{var Yw=Qh(),Ww=ep();tp.exports={encode:Yw,decode:Ww};});var np=_(($I,rp)=>{function Ns(){this._types=Object.create(null),this._extensions=Object.create(null);for(let t=0;t<arguments.length;t++)this.define(arguments[t]);this.define=this.define.bind(this),this.getType=this.getType.bind(this),this.getExtension=this.getExtension.bind(this);}Ns.prototype.define=function(t,e){for(let i in t){let r=t[i].map(function(n){return n.toLowerCase()});i=i.toLowerCase();for(let n=0;n<r.length;n++){let s=r[n];if(s[0]!=="*"){if(!e&&s in this._types)throw new Error('Attempt to change mapping for "'+s+'" extension from "'+this._types[s]+'" to "'+i+'". Pass `force=true` to allow this, otherwise remove "'+s+'" from the list of extensions for "'+i+'".');this._types[s]=i;}}if(e||!this._extensions[i]){let n=r[0];this._extensions[i]=n[0]!=="*"?n:n.substr(1);}}};Ns.prototype.getType=function(t){t=String(t);let e=t.replace(/^.*[/\\]/,"").toLowerCase(),i=e.replace(/^.*\./,"").toLowerCase(),r=e.length<t.length;return (i.length<e.length-1||!r)&&this._types[i]||null};Ns.prototype.getExtension=function(t){return t=/^\s*([^;\s]*)/.test(t)&&RegExp.$1,t&&this._extensions[t.toLowerCase()]||null};rp.exports=Ns;});var op=_((VI,sp)=>{sp.exports={"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomdeleted+xml":["atomdeleted"],"application/atomsvc+xml":["atomsvc"],"application/atsc-dwd+xml":["dwd"],"application/atsc-held+xml":["held"],"application/atsc-rsat+xml":["rsat"],"application/bdoc":["bdoc"],"application/calendar+xml":["xcs"],"application/ccxml+xml":["ccxml"],"application/cdfx+xml":["cdfx"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["es","ecma"],"application/emma+xml":["emma"],"application/emotionml+xml":["emotionml"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/express":["exp"],"application/fdt+xml":["fdt"],"application/font-tdpfr":["pfr"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hjson":["hjson"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/its+xml":["its"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lgr+xml":["lgr"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mmt-aei+xml":["maei"],"application/mmt-usd+xml":["musd"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/n-quads":["nq"],"application/n-triples":["nt"],"application/node":["cjs"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/p2p-overlay+xml":["relo"],"application/patch-ops-error+xml":["xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/provenance+xml":["provx"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf","owl"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/route-apd+xml":["rapd"],"application/route-s-tsid+xml":["sls"],"application/route-usd+xml":["rusd"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/senml+xml":["senmlx"],"application/sensml+xml":["sensmlx"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/sieve":["siv","sieve"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/swid+xml":["swidtag"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/toml":["toml"],"application/trig":["trig"],"application/ttml+xml":["ttml"],"application/ubjson":["ubj"],"application/urc-ressheet+xml":["rsheet"],"application/urc-targetdesc+xml":["td"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/xaml+xml":["xaml"],"application/xcap-att+xml":["xav"],"application/xcap-caps+xml":["xca"],"application/xcap-diff+xml":["xdf"],"application/xcap-el+xml":["xel"],"application/xcap-ns+xml":["xns"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xliff+xml":["xlf"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["*xsl","xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["*3gpp"],"audio/adpcm":["adp"],"audio/amr":["amr"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mobile-xmf":["mxmf"],"audio/mp3":["*mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx","opus"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/wav":["wav"],"audio/wave":["*wav"],"audio/webm":["weba"],"audio/xm":["xm"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/aces":["exr"],"image/apng":["apng"],"image/avif":["avif"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/dicom-rle":["drle"],"image/emf":["emf"],"image/fits":["fits"],"image/g3fax":["g3"],"image/gif":["gif"],"image/heic":["heic"],"image/heic-sequence":["heics"],"image/heif":["heif"],"image/heif-sequence":["heifs"],"image/hej2k":["hej2"],"image/hsj2":["hsj2"],"image/ief":["ief"],"image/jls":["jls"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jph":["jph"],"image/jphc":["jhc"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/jxr":["jxr"],"image/jxra":["jxra"],"image/jxrs":["jxrs"],"image/jxs":["jxs"],"image/jxsc":["jxsc"],"image/jxsi":["jxsi"],"image/jxss":["jxss"],"image/ktx":["ktx"],"image/ktx2":["ktx2"],"image/png":["png"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/t38":["t38"],"image/tiff":["tif","tiff"],"image/tiff-fx":["tfx"],"image/webp":["webp"],"image/wmf":["wmf"],"message/disposition-notification":["disposition-notification"],"message/global":["u8msg"],"message/global-delivery-status":["u8dsn"],"message/global-disposition-notification":["u8mdn"],"message/global-headers":["u8hdr"],"message/rfc822":["eml","mime"],"model/3mf":["3mf"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/mtl":["mtl"],"model/obj":["obj"],"model/step+xml":["stpx"],"model/step+zip":["stpz"],"model/step-xml+zip":["stpxz"],"model/stl":["stl"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["*x3db","x3dbz"],"model/x3d+fastinfoset":["x3db"],"model/x3d+vrml":["*x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"model/x3d-vrml":["x3dv"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/mdx":["mdx"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/richtext":["rtx"],"text/rtf":["*rtf"],"text/sgml":["sgml","sgm"],"text/shex":["shex"],"text/slim":["slim","slm"],"text/spdx":["spdx"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vtt":["vtt"],"text/xml":["*xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/iso.segment":["m4s"],"video/jpeg":["jpgv"],"video/jpm":["*jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"]};});var lp=_((HI,ap)=>{ap.exports={"application/prs.cww":["cww"],"application/vnd.1000minds.decision-model+xml":["1km"],"application/vnd.3gpp.pic-bw-large":["plb"],"application/vnd.3gpp.pic-bw-small":["psb"],"application/vnd.3gpp.pic-bw-var":["pvb"],"application/vnd.3gpp2.tcap":["tcap"],"application/vnd.3m.post-it-notes":["pwn"],"application/vnd.accpac.simply.aso":["aso"],"application/vnd.accpac.simply.imp":["imp"],"application/vnd.acucobol":["acu"],"application/vnd.acucorp":["atc","acutc"],"application/vnd.adobe.air-application-installer-package+zip":["air"],"application/vnd.adobe.formscentral.fcdt":["fcdt"],"application/vnd.adobe.fxp":["fxp","fxpl"],"application/vnd.adobe.xdp+xml":["xdp"],"application/vnd.adobe.xfdf":["xfdf"],"application/vnd.ahead.space":["ahead"],"application/vnd.airzip.filesecure.azf":["azf"],"application/vnd.airzip.filesecure.azs":["azs"],"application/vnd.amazon.ebook":["azw"],"application/vnd.americandynamics.acc":["acc"],"application/vnd.amiga.ami":["ami"],"application/vnd.android.package-archive":["apk"],"application/vnd.anser-web-certificate-issue-initiation":["cii"],"application/vnd.anser-web-funds-transfer-initiation":["fti"],"application/vnd.antix.game-component":["atx"],"application/vnd.apple.installer+xml":["mpkg"],"application/vnd.apple.keynote":["key"],"application/vnd.apple.mpegurl":["m3u8"],"application/vnd.apple.numbers":["numbers"],"application/vnd.apple.pages":["pages"],"application/vnd.apple.pkpass":["pkpass"],"application/vnd.aristanetworks.swi":["swi"],"application/vnd.astraea-software.iota":["iota"],"application/vnd.audiograph":["aep"],"application/vnd.balsamiq.bmml+xml":["bmml"],"application/vnd.blueice.multipass":["mpm"],"application/vnd.bmi":["bmi"],"application/vnd.businessobjects":["rep"],"application/vnd.chemdraw+xml":["cdxml"],"application/vnd.chipnuts.karaoke-mmd":["mmd"],"application/vnd.cinderella":["cdy"],"application/vnd.citationstyles.style+xml":["csl"],"application/vnd.claymore":["cla"],"application/vnd.cloanto.rp9":["rp9"],"application/vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"application/vnd.cluetrust.cartomobile-config":["c11amc"],"application/vnd.cluetrust.cartomobile-config-pkg":["c11amz"],"application/vnd.commonspace":["csp"],"application/vnd.contact.cmsg":["cdbcmsg"],"application/vnd.cosmocaller":["cmc"],"application/vnd.crick.clicker":["clkx"],"application/vnd.crick.clicker.keyboard":["clkk"],"application/vnd.crick.clicker.palette":["clkp"],"application/vnd.crick.clicker.template":["clkt"],"application/vnd.crick.clicker.wordbank":["clkw"],"application/vnd.criticaltools.wbs+xml":["wbs"],"application/vnd.ctc-posml":["pml"],"application/vnd.cups-ppd":["ppd"],"application/vnd.curl.car":["car"],"application/vnd.curl.pcurl":["pcurl"],"application/vnd.dart":["dart"],"application/vnd.data-vision.rdz":["rdz"],"application/vnd.dbf":["dbf"],"application/vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"application/vnd.dece.ttml+xml":["uvt","uvvt"],"application/vnd.dece.unspecified":["uvx","uvvx"],"application/vnd.dece.zip":["uvz","uvvz"],"application/vnd.denovo.fcselayout-link":["fe_launch"],"application/vnd.dna":["dna"],"application/vnd.dolby.mlp":["mlp"],"application/vnd.dpgraph":["dpg"],"application/vnd.dreamfactory":["dfac"],"application/vnd.ds-keypoint":["kpxx"],"application/vnd.dvb.ait":["ait"],"application/vnd.dvb.service":["svc"],"application/vnd.dynageo":["geo"],"application/vnd.ecowin.chart":["mag"],"application/vnd.enliven":["nml"],"application/vnd.epson.esf":["esf"],"application/vnd.epson.msf":["msf"],"application/vnd.epson.quickanime":["qam"],"application/vnd.epson.salt":["slt"],"application/vnd.epson.ssf":["ssf"],"application/vnd.eszigno3+xml":["es3","et3"],"application/vnd.ezpix-album":["ez2"],"application/vnd.ezpix-package":["ez3"],"application/vnd.fdf":["fdf"],"application/vnd.fdsn.mseed":["mseed"],"application/vnd.fdsn.seed":["seed","dataless"],"application/vnd.flographit":["gph"],"application/vnd.fluxtime.clip":["ftc"],"application/vnd.framemaker":["fm","frame","maker","book"],"application/vnd.frogans.fnc":["fnc"],"application/vnd.frogans.ltf":["ltf"],"application/vnd.fsc.weblaunch":["fsc"],"application/vnd.fujitsu.oasys":["oas"],"application/vnd.fujitsu.oasys2":["oa2"],"application/vnd.fujitsu.oasys3":["oa3"],"application/vnd.fujitsu.oasysgp":["fg5"],"application/vnd.fujitsu.oasysprs":["bh2"],"application/vnd.fujixerox.ddd":["ddd"],"application/vnd.fujixerox.docuworks":["xdw"],"application/vnd.fujixerox.docuworks.binder":["xbd"],"application/vnd.fuzzysheet":["fzs"],"application/vnd.genomatix.tuxedo":["txd"],"application/vnd.geogebra.file":["ggb"],"application/vnd.geogebra.tool":["ggt"],"application/vnd.geometry-explorer":["gex","gre"],"application/vnd.geonext":["gxt"],"application/vnd.geoplan":["g2w"],"application/vnd.geospace":["g3w"],"application/vnd.gmx":["gmx"],"application/vnd.google-apps.document":["gdoc"],"application/vnd.google-apps.presentation":["gslides"],"application/vnd.google-apps.spreadsheet":["gsheet"],"application/vnd.google-earth.kml+xml":["kml"],"application/vnd.google-earth.kmz":["kmz"],"application/vnd.grafeq":["gqf","gqs"],"application/vnd.groove-account":["gac"],"application/vnd.groove-help":["ghf"],"application/vnd.groove-identity-message":["gim"],"application/vnd.groove-injector":["grv"],"application/vnd.groove-tool-message":["gtm"],"application/vnd.groove-tool-template":["tpl"],"application/vnd.groove-vcard":["vcg"],"application/vnd.hal+xml":["hal"],"application/vnd.handheld-entertainment+xml":["zmm"],"application/vnd.hbci":["hbci"],"application/vnd.hhe.lesson-player":["les"],"application/vnd.hp-hpgl":["hpgl"],"application/vnd.hp-hpid":["hpid"],"application/vnd.hp-hps":["hps"],"application/vnd.hp-jlyt":["jlt"],"application/vnd.hp-pcl":["pcl"],"application/vnd.hp-pclxl":["pclxl"],"application/vnd.hydrostatix.sof-data":["sfd-hdstx"],"application/vnd.ibm.minipay":["mpy"],"application/vnd.ibm.modcap":["afp","listafp","list3820"],"application/vnd.ibm.rights-management":["irm"],"application/vnd.ibm.secure-container":["sc"],"application/vnd.iccprofile":["icc","icm"],"application/vnd.igloader":["igl"],"application/vnd.immervision-ivp":["ivp"],"application/vnd.immervision-ivu":["ivu"],"application/vnd.insors.igm":["igm"],"application/vnd.intercon.formnet":["xpw","xpx"],"application/vnd.intergeo":["i2g"],"application/vnd.intu.qbo":["qbo"],"application/vnd.intu.qfx":["qfx"],"application/vnd.ipunplugged.rcprofile":["rcprofile"],"application/vnd.irepository.package+xml":["irp"],"application/vnd.is-xpr":["xpr"],"application/vnd.isac.fcs":["fcs"],"application/vnd.jam":["jam"],"application/vnd.jcp.javame.midlet-rms":["rms"],"application/vnd.jisp":["jisp"],"application/vnd.joost.joda-archive":["joda"],"application/vnd.kahootz":["ktz","ktr"],"application/vnd.kde.karbon":["karbon"],"application/vnd.kde.kchart":["chrt"],"application/vnd.kde.kformula":["kfo"],"application/vnd.kde.kivio":["flw"],"application/vnd.kde.kontour":["kon"],"application/vnd.kde.kpresenter":["kpr","kpt"],"application/vnd.kde.kspread":["ksp"],"application/vnd.kde.kword":["kwd","kwt"],"application/vnd.kenameaapp":["htke"],"application/vnd.kidspiration":["kia"],"application/vnd.kinar":["kne","knp"],"application/vnd.koan":["skp","skd","skt","skm"],"application/vnd.kodak-descriptor":["sse"],"application/vnd.las.las+xml":["lasxml"],"application/vnd.llamagraphics.life-balance.desktop":["lbd"],"application/vnd.llamagraphics.life-balance.exchange+xml":["lbe"],"application/vnd.lotus-1-2-3":["123"],"application/vnd.lotus-approach":["apr"],"application/vnd.lotus-freelance":["pre"],"application/vnd.lotus-notes":["nsf"],"application/vnd.lotus-organizer":["org"],"application/vnd.lotus-screencam":["scm"],"application/vnd.lotus-wordpro":["lwp"],"application/vnd.macports.portpkg":["portpkg"],"application/vnd.mapbox-vector-tile":["mvt"],"application/vnd.mcd":["mcd"],"application/vnd.medcalcdata":["mc1"],"application/vnd.mediastation.cdkey":["cdkey"],"application/vnd.mfer":["mwf"],"application/vnd.mfmp":["mfm"],"application/vnd.micrografx.flo":["flo"],"application/vnd.micrografx.igx":["igx"],"application/vnd.mif":["mif"],"application/vnd.mobius.daf":["daf"],"application/vnd.mobius.dis":["dis"],"application/vnd.mobius.mbk":["mbk"],"application/vnd.mobius.mqy":["mqy"],"application/vnd.mobius.msl":["msl"],"application/vnd.mobius.plc":["plc"],"application/vnd.mobius.txf":["txf"],"application/vnd.mophun.application":["mpn"],"application/vnd.mophun.certificate":["mpc"],"application/vnd.mozilla.xul+xml":["xul"],"application/vnd.ms-artgalry":["cil"],"application/vnd.ms-cab-compressed":["cab"],"application/vnd.ms-excel":["xls","xlm","xla","xlc","xlt","xlw"],"application/vnd.ms-excel.addin.macroenabled.12":["xlam"],"application/vnd.ms-excel.sheet.binary.macroenabled.12":["xlsb"],"application/vnd.ms-excel.sheet.macroenabled.12":["xlsm"],"application/vnd.ms-excel.template.macroenabled.12":["xltm"],"application/vnd.ms-fontobject":["eot"],"application/vnd.ms-htmlhelp":["chm"],"application/vnd.ms-ims":["ims"],"application/vnd.ms-lrm":["lrm"],"application/vnd.ms-officetheme":["thmx"],"application/vnd.ms-outlook":["msg"],"application/vnd.ms-pki.seccat":["cat"],"application/vnd.ms-pki.stl":["*stl"],"application/vnd.ms-powerpoint":["ppt","pps","pot"],"application/vnd.ms-powerpoint.addin.macroenabled.12":["ppam"],"application/vnd.ms-powerpoint.presentation.macroenabled.12":["pptm"],"application/vnd.ms-powerpoint.slide.macroenabled.12":["sldm"],"application/vnd.ms-powerpoint.slideshow.macroenabled.12":["ppsm"],"application/vnd.ms-powerpoint.template.macroenabled.12":["potm"],"application/vnd.ms-project":["mpp","mpt"],"application/vnd.ms-word.document.macroenabled.12":["docm"],"application/vnd.ms-word.template.macroenabled.12":["dotm"],"application/vnd.ms-works":["wps","wks","wcm","wdb"],"application/vnd.ms-wpl":["wpl"],"application/vnd.ms-xpsdocument":["xps"],"application/vnd.mseq":["mseq"],"application/vnd.musician":["mus"],"application/vnd.muvee.style":["msty"],"application/vnd.mynfc":["taglet"],"application/vnd.neurolanguage.nlu":["nlu"],"application/vnd.nitf":["ntf","nitf"],"application/vnd.noblenet-directory":["nnd"],"application/vnd.noblenet-sealer":["nns"],"application/vnd.noblenet-web":["nnw"],"application/vnd.nokia.n-gage.ac+xml":["*ac"],"application/vnd.nokia.n-gage.data":["ngdat"],"application/vnd.nokia.n-gage.symbian.install":["n-gage"],"application/vnd.nokia.radio-preset":["rpst"],"application/vnd.nokia.radio-presets":["rpss"],"application/vnd.novadigm.edm":["edm"],"application/vnd.novadigm.edx":["edx"],"application/vnd.novadigm.ext":["ext"],"application/vnd.oasis.opendocument.chart":["odc"],"application/vnd.oasis.opendocument.chart-template":["otc"],"application/vnd.oasis.opendocument.database":["odb"],"application/vnd.oasis.opendocument.formula":["odf"],"application/vnd.oasis.opendocument.formula-template":["odft"],"application/vnd.oasis.opendocument.graphics":["odg"],"application/vnd.oasis.opendocument.graphics-template":["otg"],"application/vnd.oasis.opendocument.image":["odi"],"application/vnd.oasis.opendocument.image-template":["oti"],"application/vnd.oasis.opendocument.presentation":["odp"],"application/vnd.oasis.opendocument.presentation-template":["otp"],"application/vnd.oasis.opendocument.spreadsheet":["ods"],"application/vnd.oasis.opendocument.spreadsheet-template":["ots"],"application/vnd.oasis.opendocument.text":["odt"],"application/vnd.oasis.opendocument.text-master":["odm"],"application/vnd.oasis.opendocument.text-template":["ott"],"application/vnd.oasis.opendocument.text-web":["oth"],"application/vnd.olpc-sugar":["xo"],"application/vnd.oma.dd2+xml":["dd2"],"application/vnd.openblox.game+xml":["obgx"],"application/vnd.openofficeorg.extension":["oxt"],"application/vnd.openstreetmap.data+xml":["osm"],"application/vnd.openxmlformats-officedocument.presentationml.presentation":["pptx"],"application/vnd.openxmlformats-officedocument.presentationml.slide":["sldx"],"application/vnd.openxmlformats-officedocument.presentationml.slideshow":["ppsx"],"application/vnd.openxmlformats-officedocument.presentationml.template":["potx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":["xlsx"],"application/vnd.openxmlformats-officedocument.spreadsheetml.template":["xltx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.document":["docx"],"application/vnd.openxmlformats-officedocument.wordprocessingml.template":["dotx"],"application/vnd.osgeo.mapguide.package":["mgp"],"application/vnd.osgi.dp":["dp"],"application/vnd.osgi.subsystem":["esa"],"application/vnd.palm":["pdb","pqa","oprc"],"application/vnd.pawaafile":["paw"],"application/vnd.pg.format":["str"],"application/vnd.pg.osasli":["ei6"],"application/vnd.picsel":["efif"],"application/vnd.pmi.widget":["wg"],"application/vnd.pocketlearn":["plf"],"application/vnd.powerbuilder6":["pbd"],"application/vnd.previewsystems.box":["box"],"application/vnd.proteus.magazine":["mgz"],"application/vnd.publishare-delta-tree":["qps"],"application/vnd.pvi.ptid1":["ptid"],"application/vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"application/vnd.rar":["rar"],"application/vnd.realvnc.bed":["bed"],"application/vnd.recordare.musicxml":["mxl"],"application/vnd.recordare.musicxml+xml":["musicxml"],"application/vnd.rig.cryptonote":["cryptonote"],"application/vnd.rim.cod":["cod"],"application/vnd.rn-realmedia":["rm"],"application/vnd.rn-realmedia-vbr":["rmvb"],"application/vnd.route66.link66+xml":["link66"],"application/vnd.sailingtracker.track":["st"],"application/vnd.seemail":["see"],"application/vnd.sema":["sema"],"application/vnd.semd":["semd"],"application/vnd.semf":["semf"],"application/vnd.shana.informed.formdata":["ifm"],"application/vnd.shana.informed.formtemplate":["itp"],"application/vnd.shana.informed.interchange":["iif"],"application/vnd.shana.informed.package":["ipk"],"application/vnd.simtech-mindmapper":["twd","twds"],"application/vnd.smaf":["mmf"],"application/vnd.smart.teacher":["teacher"],"application/vnd.software602.filler.form+xml":["fo"],"application/vnd.solent.sdkm+xml":["sdkm","sdkd"],"application/vnd.spotfire.dxp":["dxp"],"application/vnd.spotfire.sfs":["sfs"],"application/vnd.stardivision.calc":["sdc"],"application/vnd.stardivision.draw":["sda"],"application/vnd.stardivision.impress":["sdd"],"application/vnd.stardivision.math":["smf"],"application/vnd.stardivision.writer":["sdw","vor"],"application/vnd.stardivision.writer-global":["sgl"],"application/vnd.stepmania.package":["smzip"],"application/vnd.stepmania.stepchart":["sm"],"application/vnd.sun.wadl+xml":["wadl"],"application/vnd.sun.xml.calc":["sxc"],"application/vnd.sun.xml.calc.template":["stc"],"application/vnd.sun.xml.draw":["sxd"],"application/vnd.sun.xml.draw.template":["std"],"application/vnd.sun.xml.impress":["sxi"],"application/vnd.sun.xml.impress.template":["sti"],"application/vnd.sun.xml.math":["sxm"],"application/vnd.sun.xml.writer":["sxw"],"application/vnd.sun.xml.writer.global":["sxg"],"application/vnd.sun.xml.writer.template":["stw"],"application/vnd.sus-calendar":["sus","susp"],"application/vnd.svd":["svd"],"application/vnd.symbian.install":["sis","sisx"],"application/vnd.syncml+xml":["xsm"],"application/vnd.syncml.dm+wbxml":["bdm"],"application/vnd.syncml.dm+xml":["xdm"],"application/vnd.syncml.dmddf+xml":["ddf"],"application/vnd.tao.intent-module-archive":["tao"],"application/vnd.tcpdump.pcap":["pcap","cap","dmp"],"application/vnd.tmobile-livetv":["tmo"],"application/vnd.trid.tpt":["tpt"],"application/vnd.triscape.mxs":["mxs"],"application/vnd.trueapp":["tra"],"application/vnd.ufdl":["ufd","ufdl"],"application/vnd.uiq.theme":["utz"],"application/vnd.umajin":["umj"],"application/vnd.unity":["unityweb"],"application/vnd.uoml+xml":["uoml"],"application/vnd.vcx":["vcx"],"application/vnd.visio":["vsd","vst","vss","vsw"],"application/vnd.visionary":["vis"],"application/vnd.vsf":["vsf"],"application/vnd.wap.wbxml":["wbxml"],"application/vnd.wap.wmlc":["wmlc"],"application/vnd.wap.wmlscriptc":["wmlsc"],"application/vnd.webturbo":["wtb"],"application/vnd.wolfram.player":["nbp"],"application/vnd.wordperfect":["wpd"],"application/vnd.wqd":["wqd"],"application/vnd.wt.stf":["stf"],"application/vnd.xara":["xar"],"application/vnd.xfdl":["xfdl"],"application/vnd.yamaha.hv-dic":["hvd"],"application/vnd.yamaha.hv-script":["hvs"],"application/vnd.yamaha.hv-voice":["hvp"],"application/vnd.yamaha.openscoreformat":["osf"],"application/vnd.yamaha.openscoreformat.osfpvg+xml":["osfpvg"],"application/vnd.yamaha.smaf-audio":["saf"],"application/vnd.yamaha.smaf-phrase":["spf"],"application/vnd.yellowriver-custom-menu":["cmp"],"application/vnd.zul":["zir","zirz"],"application/vnd.zzazz.deck+xml":["zaz"],"application/x-7z-compressed":["7z"],"application/x-abiword":["abw"],"application/x-ace-compressed":["ace"],"application/x-apple-diskimage":["*dmg"],"application/x-arj":["arj"],"application/x-authorware-bin":["aab","x32","u32","vox"],"application/x-authorware-map":["aam"],"application/x-authorware-seg":["aas"],"application/x-bcpio":["bcpio"],"application/x-bdoc":["*bdoc"],"application/x-bittorrent":["torrent"],"application/x-blorb":["blb","blorb"],"application/x-bzip":["bz"],"application/x-bzip2":["bz2","boz"],"application/x-cbr":["cbr","cba","cbt","cbz","cb7"],"application/x-cdlink":["vcd"],"application/x-cfs-compressed":["cfs"],"application/x-chat":["chat"],"application/x-chess-pgn":["pgn"],"application/x-chrome-extension":["crx"],"application/x-cocoa":["cco"],"application/x-conference":["nsc"],"application/x-cpio":["cpio"],"application/x-csh":["csh"],"application/x-debian-package":["*deb","udeb"],"application/x-dgc-compressed":["dgc"],"application/x-director":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"],"application/x-doom":["wad"],"application/x-dtbncx+xml":["ncx"],"application/x-dtbook+xml":["dtb"],"application/x-dtbresource+xml":["res"],"application/x-dvi":["dvi"],"application/x-envoy":["evy"],"application/x-eva":["eva"],"application/x-font-bdf":["bdf"],"application/x-font-ghostscript":["gsf"],"application/x-font-linux-psf":["psf"],"application/x-font-pcf":["pcf"],"application/x-font-snf":["snf"],"application/x-font-type1":["pfa","pfb","pfm","afm"],"application/x-freearc":["arc"],"application/x-futuresplash":["spl"],"application/x-gca-compressed":["gca"],"application/x-glulx":["ulx"],"application/x-gnumeric":["gnumeric"],"application/x-gramps-xml":["gramps"],"application/x-gtar":["gtar"],"application/x-hdf":["hdf"],"application/x-httpd-php":["php"],"application/x-install-instructions":["install"],"application/x-iso9660-image":["*iso"],"application/x-iwork-keynote-sffkey":["*key"],"application/x-iwork-numbers-sffnumbers":["*numbers"],"application/x-iwork-pages-sffpages":["*pages"],"application/x-java-archive-diff":["jardiff"],"application/x-java-jnlp-file":["jnlp"],"application/x-keepass2":["kdbx"],"application/x-latex":["latex"],"application/x-lua-bytecode":["luac"],"application/x-lzh-compressed":["lzh","lha"],"application/x-makeself":["run"],"application/x-mie":["mie"],"application/x-mobipocket-ebook":["prc","mobi"],"application/x-ms-application":["application"],"application/x-ms-shortcut":["lnk"],"application/x-ms-wmd":["wmd"],"application/x-ms-wmz":["wmz"],"application/x-ms-xbap":["xbap"],"application/x-msaccess":["mdb"],"application/x-msbinder":["obd"],"application/x-mscardfile":["crd"],"application/x-msclip":["clp"],"application/x-msdos-program":["*exe"],"application/x-msdownload":["*exe","*dll","com","bat","*msi"],"application/x-msmediaview":["mvb","m13","m14"],"application/x-msmetafile":["*wmf","*wmz","*emf","emz"],"application/x-msmoney":["mny"],"application/x-mspublisher":["pub"],"application/x-msschedule":["scd"],"application/x-msterminal":["trm"],"application/x-mswrite":["wri"],"application/x-netcdf":["nc","cdf"],"application/x-ns-proxy-autoconfig":["pac"],"application/x-nzb":["nzb"],"application/x-perl":["pl","pm"],"application/x-pilot":["*prc","*pdb"],"application/x-pkcs12":["p12","pfx"],"application/x-pkcs7-certificates":["p7b","spc"],"application/x-pkcs7-certreqresp":["p7r"],"application/x-rar-compressed":["*rar"],"application/x-redhat-package-manager":["rpm"],"application/x-research-info-systems":["ris"],"application/x-sea":["sea"],"application/x-sh":["sh"],"application/x-shar":["shar"],"application/x-shockwave-flash":["swf"],"application/x-silverlight-app":["xap"],"application/x-sql":["sql"],"application/x-stuffit":["sit"],"application/x-stuffitx":["sitx"],"application/x-subrip":["srt"],"application/x-sv4cpio":["sv4cpio"],"application/x-sv4crc":["sv4crc"],"application/x-t3vm-image":["t3"],"application/x-tads":["gam"],"application/x-tar":["tar"],"application/x-tcl":["tcl","tk"],"application/x-tex":["tex"],"application/x-tex-tfm":["tfm"],"application/x-texinfo":["texinfo","texi"],"application/x-tgif":["*obj"],"application/x-ustar":["ustar"],"application/x-virtualbox-hdd":["hdd"],"application/x-virtualbox-ova":["ova"],"application/x-virtualbox-ovf":["ovf"],"application/x-virtualbox-vbox":["vbox"],"application/x-virtualbox-vbox-extpack":["vbox-extpack"],"application/x-virtualbox-vdi":["vdi"],"application/x-virtualbox-vhd":["vhd"],"application/x-virtualbox-vmdk":["vmdk"],"application/x-wais-source":["src"],"application/x-web-app-manifest+json":["webapp"],"application/x-x509-ca-cert":["der","crt","pem"],"application/x-xfig":["fig"],"application/x-xliff+xml":["*xlf"],"application/x-xpinstall":["xpi"],"application/x-xz":["xz"],"application/x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"audio/vnd.dece.audio":["uva","uvva"],"audio/vnd.digital-winds":["eol"],"audio/vnd.dra":["dra"],"audio/vnd.dts":["dts"],"audio/vnd.dts.hd":["dtshd"],"audio/vnd.lucent.voice":["lvp"],"audio/vnd.ms-playready.media.pya":["pya"],"audio/vnd.nuera.ecelp4800":["ecelp4800"],"audio/vnd.nuera.ecelp7470":["ecelp7470"],"audio/vnd.nuera.ecelp9600":["ecelp9600"],"audio/vnd.rip":["rip"],"audio/x-aac":["aac"],"audio/x-aiff":["aif","aiff","aifc"],"audio/x-caf":["caf"],"audio/x-flac":["flac"],"audio/x-m4a":["*m4a"],"audio/x-matroska":["mka"],"audio/x-mpegurl":["m3u"],"audio/x-ms-wax":["wax"],"audio/x-ms-wma":["wma"],"audio/x-pn-realaudio":["ram","ra"],"audio/x-pn-realaudio-plugin":["rmp"],"audio/x-realaudio":["*ra"],"audio/x-wav":["*wav"],"chemical/x-cdx":["cdx"],"chemical/x-cif":["cif"],"chemical/x-cmdf":["cmdf"],"chemical/x-cml":["cml"],"chemical/x-csml":["csml"],"chemical/x-xyz":["xyz"],"image/prs.btif":["btif"],"image/prs.pti":["pti"],"image/vnd.adobe.photoshop":["psd"],"image/vnd.airzip.accelerator.azv":["azv"],"image/vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"image/vnd.djvu":["djvu","djv"],"image/vnd.dvb.subtitle":["*sub"],"image/vnd.dwg":["dwg"],"image/vnd.dxf":["dxf"],"image/vnd.fastbidsheet":["fbs"],"image/vnd.fpx":["fpx"],"image/vnd.fst":["fst"],"image/vnd.fujixerox.edmics-mmr":["mmr"],"image/vnd.fujixerox.edmics-rlc":["rlc"],"image/vnd.microsoft.icon":["ico"],"image/vnd.ms-dds":["dds"],"image/vnd.ms-modi":["mdi"],"image/vnd.ms-photo":["wdp"],"image/vnd.net-fpx":["npx"],"image/vnd.pco.b16":["b16"],"image/vnd.tencent.tap":["tap"],"image/vnd.valve.source.texture":["vtf"],"image/vnd.wap.wbmp":["wbmp"],"image/vnd.xiff":["xif"],"image/vnd.zbrush.pcx":["pcx"],"image/x-3ds":["3ds"],"image/x-cmu-raster":["ras"],"image/x-cmx":["cmx"],"image/x-freehand":["fh","fhc","fh4","fh5","fh7"],"image/x-icon":["*ico"],"image/x-jng":["jng"],"image/x-mrsid-image":["sid"],"image/x-ms-bmp":["*bmp"],"image/x-pcx":["*pcx"],"image/x-pict":["pic","pct"],"image/x-portable-anymap":["pnm"],"image/x-portable-bitmap":["pbm"],"image/x-portable-graymap":["pgm"],"image/x-portable-pixmap":["ppm"],"image/x-rgb":["rgb"],"image/x-tga":["tga"],"image/x-xbitmap":["xbm"],"image/x-xpixmap":["xpm"],"image/x-xwindowdump":["xwd"],"message/vnd.wfa.wsc":["wsc"],"model/vnd.collada+xml":["dae"],"model/vnd.dwf":["dwf"],"model/vnd.gdl":["gdl"],"model/vnd.gtw":["gtw"],"model/vnd.mts":["mts"],"model/vnd.opengex":["ogex"],"model/vnd.parasolid.transmit.binary":["x_b"],"model/vnd.parasolid.transmit.text":["x_t"],"model/vnd.sap.vds":["vds"],"model/vnd.usdz+zip":["usdz"],"model/vnd.valve.source.compiled-map":["bsp"],"model/vnd.vtu":["vtu"],"text/prs.lines.tag":["dsc"],"text/vnd.curl":["curl"],"text/vnd.curl.dcurl":["dcurl"],"text/vnd.curl.mcurl":["mcurl"],"text/vnd.curl.scurl":["scurl"],"text/vnd.dvb.subtitle":["sub"],"text/vnd.fly":["fly"],"text/vnd.fmi.flexstor":["flx"],"text/vnd.graphviz":["gv"],"text/vnd.in3d.3dml":["3dml"],"text/vnd.in3d.spot":["spot"],"text/vnd.sun.j2me.app-descriptor":["jad"],"text/vnd.wap.wml":["wml"],"text/vnd.wap.wmlscript":["wmls"],"text/x-asm":["s","asm"],"text/x-c":["c","cc","cxx","cpp","h","hh","dic"],"text/x-component":["htc"],"text/x-fortran":["f","for","f77","f90"],"text/x-handlebars-template":["hbs"],"text/x-java-source":["java"],"text/x-lua":["lua"],"text/x-markdown":["mkd"],"text/x-nfo":["nfo"],"text/x-opml":["opml"],"text/x-org":["*org"],"text/x-pascal":["p","pas"],"text/x-processing":["pde"],"text/x-sass":["sass"],"text/x-scss":["scss"],"text/x-setext":["etx"],"text/x-sfv":["sfv"],"text/x-suse-ymp":["ymp"],"text/x-uuencode":["uu"],"text/x-vcalendar":["vcs"],"text/x-vcard":["vcf"],"video/vnd.dece.hd":["uvh","uvvh"],"video/vnd.dece.mobile":["uvm","uvvm"],"video/vnd.dece.pd":["uvp","uvvp"],"video/vnd.dece.sd":["uvs","uvvs"],"video/vnd.dece.video":["uvv","uvvv"],"video/vnd.dvb.file":["dvb"],"video/vnd.fvt":["fvt"],"video/vnd.mpegurl":["mxu","m4u"],"video/vnd.ms-playready.media.pyv":["pyv"],"video/vnd.uvvu.mp4":["uvu","uvvu"],"video/vnd.vivo":["viv"],"video/x-f4v":["f4v"],"video/x-fli":["fli"],"video/x-flv":["flv"],"video/x-m4v":["m4v"],"video/x-matroska":["mkv","mk3d","mks"],"video/x-mng":["mng"],"video/x-ms-asf":["asf","asx"],"video/x-ms-vob":["vob"],"video/x-ms-wm":["wm"],"video/x-ms-wmv":["wmv"],"video/x-ms-wmx":["wmx"],"video/x-ms-wvx":["wvx"],"video/x-msvideo":["avi"],"video/x-sgi-movie":["movie"],"video/x-smv":["smv"],"x-conference/x-cooltalk":["ice"]};});var up=_((GI,cp)=>{var Kw=np();cp.exports=new Kw(op(),lp());});var hp=_((YI,fp)=>{fp.exports=function(t,e){for(var i=[],r=0;r<t.length;r++){var n=e(t[r],r);zw(n)?i.push.apply(i,n):i.push(n);}return i};var zw=Array.isArray||function(t){return Object.prototype.toString.call(t)==="[object Array]"};});var vp=_((WI,gp)=>{gp.exports=dp;function dp(t,e,i){t instanceof RegExp&&(t=pp(t,i)),e instanceof RegExp&&(e=pp(e,i));var r=mp(t,e,i);return r&&{start:r[0],end:r[1],pre:i.slice(0,r[0]),body:i.slice(r[0]+t.length,r[1]),post:i.slice(r[1]+e.length)}}function pp(t,e){var i=e.match(t);return i?i[0]:null}dp.range=mp;function mp(t,e,i){var r,n,s,o,a,l=i.indexOf(t),c=i.indexOf(e,l+1),u=l;if(l>=0&&c>0){if(t===e)return [l,c];for(r=[],s=i.length;u>=0&&!a;)u==l?(r.push(u),l=i.indexOf(t,u+1)):r.length==1?a=[r.pop(),c]:(n=r.pop(),n<s&&(s=n,o=c),c=i.indexOf(e,u+1)),u=l<c&&l>=0?l:c;r.length&&(a=[s,o]);}return a}});var kp=_((KI,Ep)=>{var Jw=hp(),yp=vp();Ep.exports=Xw;var bp="\0SLASH"+Math.random()+"\0",_p="\0OPEN"+Math.random()+"\0",Ka="\0CLOSE"+Math.random()+"\0",wp="\0COMMA"+Math.random()+"\0",xp="\0PERIOD"+Math.random()+"\0";function Wa(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function Zw(t){return t.split("\\\\").join(bp).split("\\{").join(_p).split("\\}").join(Ka).split("\\,").join(wp).split("\\.").join(xp)}function Qw(t){return t.split(bp).join("\\").split(_p).join("{").split(Ka).join("}").split(wp).join(",").split(xp).join(".")}function Sp(t){if(!t)return [""];var e=[],i=yp("{","}",t);if(!i)return t.split(",");var r=i.pre,n=i.body,s=i.post,o=r.split(",");o[o.length-1]+="{"+n+"}";var a=Sp(s);return s.length&&(o[o.length-1]+=a.shift(),o.push.apply(o,a)),e.push.apply(e,o),e}function Xw(t){return t?(t.substr(0,2)==="{}"&&(t="\\{\\}"+t.substr(2)),xr(Zw(t),true).map(Qw)):[]}function e1(t){return "{"+t+"}"}function t1(t){return /^-?0\d/.test(t)}function i1(t,e){return t<=e}function r1(t,e){return t>=e}function xr(t,e){var i=[],r=yp("{","}",t);if(!r||/\$$/.test(r.pre))return [t];var n=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(r.body),s=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(r.body),o=n||s,a=r.body.indexOf(",")>=0;if(!o&&!a)return r.post.match(/,.*\}/)?(t=r.pre+"{"+r.body+Ka+r.post,xr(t)):[t];var l;if(o)l=r.body.split(/\.\./);else if(l=Sp(r.body),l.length===1&&(l=xr(l[0],false).map(e1),l.length===1)){var u=r.post.length?xr(r.post,false):[""];return u.map(function(P){return r.pre+l[0]+P})}var c=r.pre,u=r.post.length?xr(r.post,false):[""],f;if(o){var d=Wa(l[0]),g=Wa(l[1]),m=Math.max(l[0].length,l[1].length),y=l.length==3?Math.abs(Wa(l[2])):1,b=i1,x=g<d;x&&(y*=-1,b=r1);var E=l.some(t1);f=[];for(var O=d;b(O,g);O+=y){var k;if(s)k=String.fromCharCode(O),k==="\\"&&(k="");else if(k=String(O),E){var S=m-k.length;if(S>0){var R=new Array(S+1).join("0");O<0?k="-"+R+k.slice(1):k=R+k;}}f.push(k);}}else f=Jw(l,function(L){return xr(L,false)});for(var T=0;T<f.length;T++)for(var A=0;A<u.length;A++){var C=c+f[T]+u[A];(!e||o||C)&&i.push(C);}return i}});var Np=_((zI,Ip)=>{Ip.exports=wt;wt.Minimatch=Xe;var an=function(){try{return require("path")}catch{}}()||{sep:"/"};wt.sep=an.sep;var Za=wt.GLOBSTAR=Xe.GLOBSTAR={},n1=kp(),Op={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},za="[^/]",Ja=za+"*?",s1="(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?",o1="(?:(?!(?:\\/|^)\\.).)*?",Cp=a1("().*{}+?[]^$\\!");function a1(t){return t.split("").reduce(function(e,i){return e[i]=true,e},{})}var Tp=/\/+/;wt.filter=l1;function l1(t,e){return e=e||{},function(i,r,n){return wt(i,t,e)}}function pi(t,e){e=e||{};var i={};return Object.keys(t).forEach(function(r){i[r]=t[r];}),Object.keys(e).forEach(function(r){i[r]=e[r];}),i}wt.defaults=function(t){if(!t||typeof t!="object"||!Object.keys(t).length)return wt;var e=wt,i=function(n,s,o){return e(n,s,pi(t,o))};return i.Minimatch=function(n,s){return new e.Minimatch(n,pi(t,s))},i.Minimatch.defaults=function(n){return e.defaults(pi(t,n)).Minimatch},i.filter=function(n,s){return e.filter(n,pi(t,s))},i.defaults=function(n){return e.defaults(pi(t,n))},i.makeRe=function(n,s){return e.makeRe(n,pi(t,s))},i.braceExpand=function(n,s){return e.braceExpand(n,pi(t,s))},i.match=function(r,n,s){return e.match(r,n,pi(t,s))},i};Xe.defaults=function(t){return wt.defaults(t).Minimatch};function wt(t,e,i){return Bs(e),i||(i={}),!i.nocomment&&e.charAt(0)==="#"?false:new Xe(e,i).match(t)}function Xe(t,e){if(!(this instanceof Xe))return new Xe(t,e);Bs(t),e||(e={}),t=t.trim(),!e.allowWindowsEscape&&an.sep!=="/"&&(t=t.split(an.sep).join("/")),this.options=e,this.set=[],this.pattern=t,this.regexp=null,this.negate=false,this.comment=false,this.empty=false,this.partial=!!e.partial,this.make();}Xe.prototype.debug=function(){};Xe.prototype.make=c1;function c1(){var t=this.pattern,e=this.options;if(!e.nocomment&&t.charAt(0)==="#"){this.comment=true;return}if(!t){this.empty=true;return}this.parseNegate();var i=this.globSet=this.braceExpand();e.debug&&(this.debug=function(){console.error.apply(console,arguments);}),this.debug(this.pattern,i),i=this.globParts=i.map(function(r){return r.split(Tp)}),this.debug(this.pattern,i),i=i.map(function(r,n,s){return r.map(this.parse,this)},this),this.debug(this.pattern,i),i=i.filter(function(r){return r.indexOf(false)===-1}),this.debug(this.pattern,i),this.set=i;}Xe.prototype.parseNegate=u1;function u1(){var t=this.pattern,e=false,i=this.options,r=0;if(!i.nonegate){for(var n=0,s=t.length;n<s&&t.charAt(n)==="!";n++)e=!e,r++;r&&(this.pattern=t.substr(r)),this.negate=e;}}wt.braceExpand=function(t,e){return Ap(t,e)};Xe.prototype.braceExpand=Ap;function Ap(t,e){return e||(this instanceof Xe?e=this.options:e={}),t=typeof t=="undefined"?this.pattern:t,Bs(t),e.nobrace||!/\{(?:(?!\{).)*\}/.test(t)?[t]:n1(t)}var f1=1024*64,Bs=function(t){if(typeof t!="string")throw new TypeError("invalid pattern");if(t.length>f1)throw new TypeError("pattern is too long")};Xe.prototype.parse=h1;var Ls={};function h1(t,e){Bs(t);var i=this.options;if(t==="**")if(i.noglobstar)t="*";else return Za;if(t==="")return "";var r="",n=!!i.nocase,s=false,o=[],a=[],l,c=false,u=-1,f=-1,d=t.charAt(0)==="."?"":i.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",g=this;function m(){if(l){switch(l){case "*":r+=Ja,n=true;break;case "?":r+=za,n=true;break;default:r+="\\"+l;break}g.debug("clearStateChar %j %j",l,r),l=false;}}for(var y=0,b=t.length,x;y<b&&(x=t.charAt(y));y++){if(this.debug("%s	%s %s %j",t,y,r,x),s&&Cp[x]){r+="\\"+x,s=false;continue}switch(x){case "/":return  false;case "\\":m(),s=true;continue;case "?":case "*":case "+":case "@":case "!":if(this.debug("%s	%s %s %j <-- stateChar",t,y,r,x),c){this.debug("  in class"),x==="!"&&y===f+1&&(x="^"),r+=x;continue}g.debug("call clearStateChar %j",l),m(),l=x,i.noext&&m();continue;case "(":if(c){r+="(";continue}if(!l){r+="\\(";continue}o.push({type:l,start:y-1,reStart:r.length,open:Op[l].open,close:Op[l].close}),r+=l==="!"?"(?:(?!(?:":"(?:",this.debug("plType %j %j",l,r),l=false;continue;case ")":if(c||!o.length){r+="\\)";continue}m(),n=true;var E=o.pop();r+=E.close,E.type==="!"&&a.push(E),E.reEnd=r.length;continue;case "|":if(c||!o.length||s){r+="\\|",s=false;continue}m(),r+="|";continue;case "[":if(m(),c){r+="\\"+x;continue}c=true,f=y,u=r.length,r+=x;continue;case "]":if(y===f+1||!c){r+="\\"+x,s=false;continue}var O=t.substring(f+1,y);try{RegExp("["+O+"]");}catch{var k=this.parse(O,Ls);r=r.substr(0,u)+"\\["+k[0]+"\\]",n=n||k[1],c=false;continue}n=true,c=false,r+=x;continue;default:m(),s?s=false:Cp[x]&&!(x==="^"&&c)&&(r+="\\"),r+=x;}}for(c&&(O=t.substr(f+1),k=this.parse(O,Ls),r=r.substr(0,u)+"\\["+k[0],n=n||k[1]),E=o.pop();E;E=o.pop()){var S=r.slice(E.reStart+E.open.length);this.debug("setting tail",r,E),S=S.replace(/((?:\\{2}){0,64})(\\?)\|/g,function(de,ae,ne){return ne||(ne="\\"),ae+ae+ne+"|"}),this.debug(`tail=%j
   %s`,S,S,E,r);var R=E.type==="*"?Ja:E.type==="?"?za:"\\"+E.type;n=true,r=r.slice(0,E.reStart)+R+"\\("+S;}m(),s&&(r+="\\\\");var T=false;switch(r.charAt(0)){case "[":case ".":case "(":T=true;}for(var A=a.length-1;A>-1;A--){var C=a[A],L=r.slice(0,C.reStart),P=r.slice(C.reStart,C.reEnd-8),U=r.slice(C.reEnd-8,C.reEnd),q=r.slice(C.reEnd);U+=q;var H=L.split("(").length-1,j=q;for(y=0;y<H;y++)j=j.replace(/\)[+*?]?/,"");q=j;var V="";q===""&&e!==Ls&&(V="$");var W=L+P+q+V+U;r=W;}if(r!==""&&n&&(r="(?=.)"+r),T&&(r=d+r),e===Ls)return [r,n];if(!n)return d1(t);var Q=i.nocase?"i":"";try{var Y=new RegExp("^"+r+"$",Q);}catch{return new RegExp("$.")}return Y._glob=t,Y._src=r,Y}wt.makeRe=function(t,e){return new Xe(t,e||{}).makeRe()};Xe.prototype.makeRe=p1;function p1(){if(this.regexp||this.regexp===false)return this.regexp;var t=this.set;if(!t.length)return this.regexp=false,this.regexp;var e=this.options,i=e.noglobstar?Ja:e.dot?s1:o1,r=e.nocase?"i":"",n=t.map(function(s){return s.map(function(o){return o===Za?i:typeof o=="string"?m1(o):o._src}).join("\\/")}).join("|");n="^(?:"+n+")$",this.negate&&(n="^(?!"+n+").*$");try{this.regexp=new RegExp(n,r);}catch{this.regexp=false;}return this.regexp}wt.match=function(t,e,i){i=i||{};var r=new Xe(e,i);return t=t.filter(function(n){return r.match(n)}),r.options.nonull&&!t.length&&t.push(e),t};Xe.prototype.match=function(e,i){if(typeof i=="undefined"&&(i=this.partial),this.debug("match",e,this.pattern),this.comment)return  false;if(this.empty)return e==="";if(e==="/"&&i)return  true;var r=this.options;an.sep!=="/"&&(e=e.split(an.sep).join("/")),e=e.split(Tp),this.debug(this.pattern,"split",e);var n=this.set;this.debug(this.pattern,"set",n);var s,o;for(o=e.length-1;o>=0&&(s=e[o],!s);o--);for(o=0;o<n.length;o++){var a=n[o],l=e;r.matchBase&&a.length===1&&(l=[s]);var c=this.matchOne(l,a,i);if(c)return r.flipNegate?true:!this.negate}return r.flipNegate?false:this.negate};Xe.prototype.matchOne=function(t,e,i){var r=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var n=0,s=0,o=t.length,a=e.length;n<o&&s<a;n++,s++){this.debug("matchOne loop");var l=e[s],c=t[n];if(this.debug(e,l,c),l===false)return  false;if(l===Za){this.debug("GLOBSTAR",[e,l,c]);var u=n,f=s+1;if(f===a){for(this.debug("** at the end");n<o;n++)if(t[n]==="."||t[n]===".."||!r.dot&&t[n].charAt(0)===".")return  false;return  true}for(;u<o;){var d=t[u];if(this.debug(`
globstar while`,t,u,e,f,d),this.matchOne(t.slice(u),e.slice(f),i))return this.debug("globstar found match!",u,o,d),true;if(d==="."||d===".."||!r.dot&&d.charAt(0)==="."){this.debug("dot detected!",t,u,e,f);break}this.debug("globstar swallow a segment, and continue"),u++;}return !!(i&&(this.debug(`
>>> no match, partial?`,t,u,e,f),u===o))}var g;if(typeof l=="string"?(g=c===l,this.debug("string match",l,c,g)):(g=c.match(l),this.debug("pattern match",l,c,g)),!g)return  false}if(n===o&&s===a)return  true;if(n===o)return i;if(s===a)return n===o-1&&t[n]==="";throw new Error("wtf?")};function d1(t){return t.replace(/\\(.)/g,"$1")}function m1(t){return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}});var Xa=_((JI,Bp)=>{var Lp=require$$0$4,Qa;function g1(){try{return Lp.statSync("/.dockerenv"),!0}catch{return  false}}function v1(){try{return Lp.readFileSync("/proc/self/cgroup","utf8").includes("docker")}catch{return  false}}Bp.exports=()=>(Qa===void 0&&(Qa=g1()||v1()),Qa);});var Mp=_((ZI,el)=>{var y1=require$$0$2,b1=require$$0$4,Rp=Xa(),Pp=()=>{if(process.platform!=="linux")return  false;if(y1.release().toLowerCase().includes("microsoft"))return !Rp();try{return b1.readFileSync("/proc/version","utf8").toLowerCase().includes("microsoft")?!Rp():!1}catch{return  false}};process.env.__IS_WSL_TEST__?el.exports=Pp:el.exports=Pp();});var qp=_((QI,Fp)=>{Fp.exports=(t,e,i)=>{let r=n=>Object.defineProperty(t,e,{value:n,enumerable:true,writable:true});return Object.defineProperty(t,e,{configurable:true,enumerable:true,get(){let n=i();return r(n),n},set(n){r(n);}}),t};});var Gp=_((XI,Hp)=>{var _1=require$$1$1,w1=require$$0$3,{promises:tl,constants:Vp}=require$$0$4,Rs=Mp(),x1=Xa(),il=qp(),Dp=_1.join(__dirname,"xdg-open"),{platform:Sr,arch:jp}=process,S1=(()=>{let t="/mnt/",e;return async function(){if(e)return e;let i="/etc/wsl.conf",r=false;try{await tl.access(i,Vp.F_OK),r=!0;}catch{}if(!r)return t;let n=await tl.readFile(i,{encoding:"utf8"}),s=/(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(n);return s?(e=s.groups.mountPoint.trim(),e=e.endsWith("/")?e:`${e}/`,e):t}})(),Up=async(t,e)=>{let i;for(let r of t)try{return await e(r)}catch(n){i=n;}throw i},Ps=async t=>{if(t={wait:false,background:false,newInstance:false,allowNonzeroExitCode:false,...t},Array.isArray(t.app))return Up(t.app,a=>Ps({...t,app:a}));let{name:e,arguments:i=[]}=t.app||{};if(i=[...i],Array.isArray(e))return Up(e,a=>Ps({...t,app:{name:a,arguments:i}}));let r,n=[],s={};if(Sr==="darwin")r="open",t.wait&&n.push("--wait-apps"),t.background&&n.push("--background"),t.newInstance&&n.push("--new"),e&&n.push("-a",e);else if(Sr==="win32"||Rs&&!x1()){let a=await S1();r=Rs?`${a}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`:`${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`,n.push("-NoProfile","-NonInteractive","\u2013ExecutionPolicy","Bypass","-EncodedCommand"),Rs||(s.windowsVerbatimArguments=true);let l=["Start"];t.wait&&l.push("-Wait"),e?(l.push(`"\`"${e}\`""`,"-ArgumentList"),t.target&&i.unshift(t.target)):t.target&&l.push(`"${t.target}"`),i.length>0&&(i=i.map(c=>`"\`"${c}\`""`),l.push(i.join(","))),t.target=Buffer.from(l.join(" "),"utf16le").toString("base64");}else {if(e)r=e;else {let a=!__dirname||__dirname==="/",l=false;try{await tl.access(Dp,Vp.X_OK),l=!0;}catch{}r=process.versions.electron||Sr==="android"||a||!l?"xdg-open":Dp;}i.length>0&&n.push(...i),t.wait||(s.stdio="ignore",s.detached=true);}t.target&&n.push(t.target),Sr==="darwin"&&i.length>0&&n.push("--args",...i);let o=w1.spawn(r,n,s);return t.wait?new Promise((a,l)=>{o.once("error",l),o.once("close",c=>{if(t.allowNonzeroExitCode&&c>0){l(new Error(`Exited with code ${c}`));return}a(o);});}):(o.unref(),o)},rl=(t,e)=>{if(typeof t!="string")throw new TypeError("Expected a `target`");return Ps({...e,target:t})},E1=(t,e)=>{if(typeof t!="string")throw new TypeError("Expected a `name`");let{arguments:i=[]}=e||{};if(i!=null&&!Array.isArray(i))throw new TypeError("Expected `appArguments` as Array type");return Ps({...e,app:{name:t,arguments:i}})};function $p(t){if(typeof t=="string"||Array.isArray(t))return t;let{[jp]:e}=t;if(!e)throw new Error(`${jp} is not supported`);return e}function nl({[Sr]:t},{wsl:e}){if(e&&Rs)return $p(e);if(!t)throw new Error(`${Sr} is not supported`);return $p(t)}var Ms={};il(Ms,"chrome",()=>nl({darwin:"google chrome",win32:"chrome",linux:["google-chrome","google-chrome-stable","chromium"]},{wsl:{ia32:"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe",x64:["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe","/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"]}}));il(Ms,"firefox",()=>nl({darwin:"firefox",win32:"C:\\Program Files\\Mozilla Firefox\\firefox.exe",linux:"firefox"},{wsl:"/mnt/c/Program Files/Mozilla Firefox/firefox.exe"}));il(Ms,"edge",()=>nl({darwin:"microsoft edge",win32:"msedge",linux:["microsoft-edge","microsoft-edge-dev"]},{wsl:"/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"}));rl.apps=Ms;rl.openApp=E1;Hp.exports=rl;});var sl=_((e2,Wp)=>{var k1=require$$1,Yp=require$$12,Ft=Wp.exports=function(){Yp.call(this),this._buffers=[],this._buffered=0,this._reads=[],this._paused=false,this._encoding="utf8",this.writable=true;};k1.inherits(Ft,Yp);Ft.prototype.read=function(t,e){this._reads.push({length:Math.abs(t),allowLess:t<0,func:e}),process.nextTick(function(){this._process(),this._paused&&this._reads&&this._reads.length>0&&(this._paused=false,this.emit("drain"));}.bind(this));};Ft.prototype.write=function(t,e){if(!this.writable)return this.emit("error",new Error("Stream not writable")),false;let i;return Buffer.isBuffer(t)?i=t:i=Buffer.from(t,e||this._encoding),this._buffers.push(i),this._buffered+=i.length,this._process(),this._reads&&this._reads.length===0&&(this._paused=true),this.writable&&!this._paused};Ft.prototype.end=function(t,e){t&&this.write(t,e),this.writable=false,this._buffers&&(this._buffers.length===0?this._end():(this._buffers.push(null),this._process()));};Ft.prototype.destroySoon=Ft.prototype.end;Ft.prototype._end=function(){this._reads.length>0&&this.emit("error",new Error("Unexpected end of input")),this.destroy();};Ft.prototype.destroy=function(){this._buffers&&(this.writable=false,this._reads=null,this._buffers=null,this.emit("close"));};Ft.prototype._processReadAllowingLess=function(t){this._reads.shift();let e=this._buffers[0];e.length>t.length?(this._buffered-=t.length,this._buffers[0]=e.slice(t.length),t.func.call(this,e.slice(0,t.length))):(this._buffered-=e.length,this._buffers.shift(),t.func.call(this,e));};Ft.prototype._processRead=function(t){this._reads.shift();let e=0,i=0,r=Buffer.alloc(t.length);for(;e<t.length;){let n=this._buffers[i++],s=Math.min(n.length,t.length-e);n.copy(r,e,0,s),e+=s,s!==n.length&&(this._buffers[--i]=n.slice(s));}i>0&&this._buffers.splice(0,i),this._buffered-=t.length,t.func.call(this,r);};Ft.prototype._process=function(){try{for(;this._buffered>0&&this._reads&&this._reads.length>0;){let t=this._reads[0];if(t.allowLess)this._processReadAllowingLess(t);else if(this._buffered>=t.length)this._processRead(t);else break}this._buffers&&!this.writable&&this._end();}catch(t){this.emit("error",t);}};});var al=_(ol=>{var di=[{x:[0],y:[0]},{x:[4],y:[0]},{x:[0,4],y:[4]},{x:[2,6],y:[0,4]},{x:[0,2,4,6],y:[2,6]},{x:[1,3,5,7],y:[0,2,4,6]},{x:[0,1,2,3,4,5,6,7],y:[1,3,5,7]}];ol.getImagePasses=function(t,e){let i=[],r=t%8,n=e%8,s=(t-r)/8,o=(e-n)/8;for(let a=0;a<di.length;a++){let l=di[a],c=s*l.x.length,u=o*l.y.length;for(let f=0;f<l.x.length&&l.x[f]<r;f++)c++;for(let f=0;f<l.y.length&&l.y[f]<n;f++)u++;c>0&&u>0&&i.push({width:c,height:u,index:a});}return i};ol.getInterlaceIterator=function(t){return function(e,i,r){let n=e%di[r].x.length,s=(e-n)/di[r].x.length*8+di[r].x[n],o=i%di[r].y.length,a=(i-o)/di[r].y.length*8+di[r].y[o];return s*4+a*t*4}};});var ll=_((i2,Kp)=>{Kp.exports=function(e,i,r){let n=e+i-r,s=Math.abs(n-e),o=Math.abs(n-i),a=Math.abs(n-r);return s<=o&&s<=a?e:o<=a?i:r};});var cl=_((r2,Jp)=>{var O1=al(),C1=ll();function zp(t,e,i){let r=t*e;return i!==8&&(r=Math.ceil(r/(8/i))),r}var Er=Jp.exports=function(t,e){let i=t.width,r=t.height,n=t.interlace,s=t.bpp,o=t.depth;if(this.read=e.read,this.write=e.write,this.complete=e.complete,this._imageIndex=0,this._images=[],n){let a=O1.getImagePasses(i,r);for(let l=0;l<a.length;l++)this._images.push({byteWidth:zp(a[l].width,s,o),height:a[l].height,lineIndex:0});}else this._images.push({byteWidth:zp(i,s,o),height:r,lineIndex:0});o===8?this._xComparison=s:o===16?this._xComparison=s*2:this._xComparison=1;};Er.prototype.start=function(){this.read(this._images[this._imageIndex].byteWidth+1,this._reverseFilterLine.bind(this));};Er.prototype._unFilterType1=function(t,e,i){let r=this._xComparison,n=r-1;for(let s=0;s<i;s++){let o=t[1+s],a=s>n?e[s-r]:0;e[s]=o+a;}};Er.prototype._unFilterType2=function(t,e,i){let r=this._lastLine;for(let n=0;n<i;n++){let s=t[1+n],o=r?r[n]:0;e[n]=s+o;}};Er.prototype._unFilterType3=function(t,e,i){let r=this._xComparison,n=r-1,s=this._lastLine;for(let o=0;o<i;o++){let a=t[1+o],l=s?s[o]:0,c=o>n?e[o-r]:0,u=Math.floor((c+l)/2);e[o]=a+u;}};Er.prototype._unFilterType4=function(t,e,i){let r=this._xComparison,n=r-1,s=this._lastLine;for(let o=0;o<i;o++){let a=t[1+o],l=s?s[o]:0,c=o>n?e[o-r]:0,u=o>n&&s?s[o-r]:0,f=C1(c,l,u);e[o]=a+f;}};Er.prototype._reverseFilterLine=function(t){let e=t[0],i,r=this._images[this._imageIndex],n=r.byteWidth;if(e===0)i=t.slice(1,n+1);else switch(i=Buffer.alloc(n),e){case 1:this._unFilterType1(t,i,n);break;case 2:this._unFilterType2(t,i,n);break;case 3:this._unFilterType3(t,i,n);break;case 4:this._unFilterType4(t,i,n);break;default:throw new Error("Unrecognised filter type - "+e)}this.write(i),r.lineIndex++,r.lineIndex>=r.height?(this._lastLine=null,this._imageIndex++,r=this._images[this._imageIndex]):this._lastLine=i,r?this.read(r.byteWidth+1,this._reverseFilterLine.bind(this)):(this._lastLine=null,this.complete());};});var Xp=_((n2,Qp)=>{var T1=require$$1,Zp=sl(),A1=cl(),I1=Qp.exports=function(t){Zp.call(this);let e=[],i=this;this._filter=new A1(t,{read:this.read.bind(this),write:function(r){e.push(r);},complete:function(){i.emit("complete",Buffer.concat(e));}}),this._filter.start();};T1.inherits(I1,Zp);});var kr=_((s2,ed)=>{ed.exports={PNG_SIGNATURE:[137,80,78,71,13,10,26,10],TYPE_IHDR:1229472850,TYPE_IEND:1229278788,TYPE_IDAT:1229209940,TYPE_PLTE:1347179589,TYPE_tRNS:1951551059,TYPE_gAMA:1732332865,COLORTYPE_GRAYSCALE:0,COLORTYPE_PALETTE:1,COLORTYPE_COLOR:2,COLORTYPE_ALPHA:4,COLORTYPE_PALETTE_COLOR:3,COLORTYPE_COLOR_ALPHA:6,COLORTYPE_TO_BPP_MAP:{0:1,2:3,3:1,4:2,6:4},GAMMA_DIVISION:1e5};});var hl=_((o2,td)=>{var ul=[];(function(){for(let t=0;t<256;t++){let e=t;for(let i=0;i<8;i++)e&1?e=3988292384^e>>>1:e=e>>>1;ul[t]=e;}})();var fl=td.exports=function(){this._crc=-1;};fl.prototype.write=function(t){for(let e=0;e<t.length;e++)this._crc=ul[(this._crc^t[e])&255]^this._crc>>>8;return  true};fl.prototype.crc32=function(){return this._crc^-1};fl.crc32=function(t){let e=-1;for(let i=0;i<t.length;i++)e=ul[(e^t[i])&255]^e>>>8;return e^-1};});var pl=_((a2,id)=>{var Ve=kr(),N1=hl(),Ke=id.exports=function(t,e){this._options=t,t.checkCRC=t.checkCRC!==false,this._hasIHDR=false,this._hasIEND=false,this._emittedHeadersFinished=false,this._palette=[],this._colorType=0,this._chunks={},this._chunks[Ve.TYPE_IHDR]=this._handleIHDR.bind(this),this._chunks[Ve.TYPE_IEND]=this._handleIEND.bind(this),this._chunks[Ve.TYPE_IDAT]=this._handleIDAT.bind(this),this._chunks[Ve.TYPE_PLTE]=this._handlePLTE.bind(this),this._chunks[Ve.TYPE_tRNS]=this._handleTRNS.bind(this),this._chunks[Ve.TYPE_gAMA]=this._handleGAMA.bind(this),this.read=e.read,this.error=e.error,this.metadata=e.metadata,this.gamma=e.gamma,this.transColor=e.transColor,this.palette=e.palette,this.parsed=e.parsed,this.inflateData=e.inflateData,this.finished=e.finished,this.simpleTransparency=e.simpleTransparency,this.headersFinished=e.headersFinished||function(){};};Ke.prototype.start=function(){this.read(Ve.PNG_SIGNATURE.length,this._parseSignature.bind(this));};Ke.prototype._parseSignature=function(t){let e=Ve.PNG_SIGNATURE;for(let i=0;i<e.length;i++)if(t[i]!==e[i]){this.error(new Error("Invalid file signature"));return}this.read(8,this._parseChunkBegin.bind(this));};Ke.prototype._parseChunkBegin=function(t){let e=t.readUInt32BE(0),i=t.readUInt32BE(4),r="";for(let s=4;s<8;s++)r+=String.fromCharCode(t[s]);let n=!!(t[4]&32);if(!this._hasIHDR&&i!==Ve.TYPE_IHDR){this.error(new Error("Expected IHDR on beggining"));return}if(this._crc=new N1,this._crc.write(Buffer.from(r)),this._chunks[i])return this._chunks[i](e);if(!n){this.error(new Error("Unsupported critical chunk type "+r));return}this.read(e+4,this._skipChunk.bind(this));};Ke.prototype._skipChunk=function(){this.read(8,this._parseChunkBegin.bind(this));};Ke.prototype._handleChunkEnd=function(){this.read(4,this._parseChunkEnd.bind(this));};Ke.prototype._parseChunkEnd=function(t){let e=t.readInt32BE(0),i=this._crc.crc32();if(this._options.checkCRC&&i!==e){this.error(new Error("Crc error - "+e+" - "+i));return}this._hasIEND||this.read(8,this._parseChunkBegin.bind(this));};Ke.prototype._handleIHDR=function(t){this.read(t,this._parseIHDR.bind(this));};Ke.prototype._parseIHDR=function(t){this._crc.write(t);let e=t.readUInt32BE(0),i=t.readUInt32BE(4),r=t[8],n=t[9],s=t[10],o=t[11],a=t[12];if(r!==8&&r!==4&&r!==2&&r!==1&&r!==16){this.error(new Error("Unsupported bit depth "+r));return}if(!(n in Ve.COLORTYPE_TO_BPP_MAP)){this.error(new Error("Unsupported color type"));return}if(s!==0){this.error(new Error("Unsupported compression method"));return}if(o!==0){this.error(new Error("Unsupported filter method"));return}if(a!==0&&a!==1){this.error(new Error("Unsupported interlace method"));return}this._colorType=n;let l=Ve.COLORTYPE_TO_BPP_MAP[this._colorType];this._hasIHDR=true,this.metadata({width:e,height:i,depth:r,interlace:!!a,palette:!!(n&Ve.COLORTYPE_PALETTE),color:!!(n&Ve.COLORTYPE_COLOR),alpha:!!(n&Ve.COLORTYPE_ALPHA),bpp:l,colorType:n}),this._handleChunkEnd();};Ke.prototype._handlePLTE=function(t){this.read(t,this._parsePLTE.bind(this));};Ke.prototype._parsePLTE=function(t){this._crc.write(t);let e=Math.floor(t.length/3);for(let i=0;i<e;i++)this._palette.push([t[i*3],t[i*3+1],t[i*3+2],255]);this.palette(this._palette),this._handleChunkEnd();};Ke.prototype._handleTRNS=function(t){this.simpleTransparency(),this.read(t,this._parseTRNS.bind(this));};Ke.prototype._parseTRNS=function(t){if(this._crc.write(t),this._colorType===Ve.COLORTYPE_PALETTE_COLOR){if(this._palette.length===0){this.error(new Error("Transparency chunk must be after palette"));return}if(t.length>this._palette.length){this.error(new Error("More transparent colors than palette size"));return}for(let e=0;e<t.length;e++)this._palette[e][3]=t[e];this.palette(this._palette);}this._colorType===Ve.COLORTYPE_GRAYSCALE&&this.transColor([t.readUInt16BE(0)]),this._colorType===Ve.COLORTYPE_COLOR&&this.transColor([t.readUInt16BE(0),t.readUInt16BE(2),t.readUInt16BE(4)]),this._handleChunkEnd();};Ke.prototype._handleGAMA=function(t){this.read(t,this._parseGAMA.bind(this));};Ke.prototype._parseGAMA=function(t){this._crc.write(t),this.gamma(t.readUInt32BE(0)/Ve.GAMMA_DIVISION),this._handleChunkEnd();};Ke.prototype._handleIDAT=function(t){this._emittedHeadersFinished||(this._emittedHeadersFinished=true,this.headersFinished()),this.read(-t,this._parseIDAT.bind(this,t));};Ke.prototype._parseIDAT=function(t,e){if(this._crc.write(e),this._colorType===Ve.COLORTYPE_PALETTE_COLOR&&this._palette.length===0)throw new Error("Expected palette not found");this.inflateData(e);let i=t-e.length;i>0?this._handleIDAT(i):this._handleChunkEnd();};Ke.prototype._handleIEND=function(t){this.read(t,this._parseIEND.bind(this));};Ke.prototype._parseIEND=function(t){this._crc.write(t),this._hasIEND=true,this._handleChunkEnd(),this.finished&&this.finished();};});var dl=_(nd=>{var rd=al(),L1=[function(){},function(t,e,i,r){if(r===e.length)throw new Error("Ran out of data");let n=e[r];t[i]=n,t[i+1]=n,t[i+2]=n,t[i+3]=255;},function(t,e,i,r){if(r+1>=e.length)throw new Error("Ran out of data");let n=e[r];t[i]=n,t[i+1]=n,t[i+2]=n,t[i+3]=e[r+1];},function(t,e,i,r){if(r+2>=e.length)throw new Error("Ran out of data");t[i]=e[r],t[i+1]=e[r+1],t[i+2]=e[r+2],t[i+3]=255;},function(t,e,i,r){if(r+3>=e.length)throw new Error("Ran out of data");t[i]=e[r],t[i+1]=e[r+1],t[i+2]=e[r+2],t[i+3]=e[r+3];}],B1=[function(){},function(t,e,i,r){let n=e[0];t[i]=n,t[i+1]=n,t[i+2]=n,t[i+3]=r;},function(t,e,i){let r=e[0];t[i]=r,t[i+1]=r,t[i+2]=r,t[i+3]=e[1];},function(t,e,i,r){t[i]=e[0],t[i+1]=e[1],t[i+2]=e[2],t[i+3]=r;},function(t,e,i){t[i]=e[0],t[i+1]=e[1],t[i+2]=e[2],t[i+3]=e[3];}];function R1(t,e){let i=[],r=0;function n(){if(r===t.length)throw new Error("Ran out of data");let s=t[r];r++;let o,a,l,c,u,f,d,g;switch(e){default:throw new Error("unrecognised depth");case 16:d=t[r],r++,i.push((s<<8)+d);break;case 4:d=s&15,g=s>>4,i.push(g,d);break;case 2:u=s&3,f=s>>2&3,d=s>>4&3,g=s>>6&3,i.push(g,d,f,u);break;case 1:o=s&1,a=s>>1&1,l=s>>2&1,c=s>>3&1,u=s>>4&1,f=s>>5&1,d=s>>6&1,g=s>>7&1,i.push(g,d,f,u,c,l,a,o);break}}return {get:function(s){for(;i.length<s;)n();let o=i.slice(0,s);return i=i.slice(s),o},resetAfterLine:function(){i.length=0;},end:function(){if(r!==t.length)throw new Error("extra data found")}}}function P1(t,e,i,r,n,s){let o=t.width,a=t.height,l=t.index;for(let c=0;c<a;c++)for(let u=0;u<o;u++){let f=i(u,c,l);L1[r](e,n,f,s),s+=r;}return s}function M1(t,e,i,r,n,s){let o=t.width,a=t.height,l=t.index;for(let c=0;c<a;c++){for(let u=0;u<o;u++){let f=n.get(r),d=i(u,c,l);B1[r](e,f,d,s);}n.resetAfterLine();}}nd.dataToBitMap=function(t,e){let i=e.width,r=e.height,n=e.depth,s=e.bpp,o=e.interlace,a;n!==8&&(a=R1(t,n));let l;n<=8?l=Buffer.alloc(i*r*4):l=new Uint16Array(i*r*4);let c=Math.pow(2,n)-1,u=0,f,d;if(o)f=rd.getImagePasses(i,r),d=rd.getInterlaceIterator(i,r);else {let g=0;d=function(){let m=g;return g+=4,m},f=[{width:i,height:r}];}for(let g=0;g<f.length;g++)n===8?u=P1(f[g],l,d,s,t,u):M1(f[g],l,d,s,a,c);if(n===8){if(u!==t.length)throw new Error("extra data found")}else a.end();return l};});var ml=_((c2,sd)=>{function F1(t,e,i,r,n){let s=0;for(let o=0;o<r;o++)for(let a=0;a<i;a++){let l=n[t[s]];if(!l)throw new Error("index "+t[s]+" not in palette");for(let c=0;c<4;c++)e[s+c]=l[c];s+=4;}}function q1(t,e,i,r,n){let s=0;for(let o=0;o<r;o++)for(let a=0;a<i;a++){let l=false;if(n.length===1?n[0]===t[s]&&(l=true):n[0]===t[s]&&n[1]===t[s+1]&&n[2]===t[s+2]&&(l=true),l)for(let c=0;c<4;c++)e[s+c]=0;s+=4;}}function D1(t,e,i,r,n){let s=255,o=Math.pow(2,n)-1,a=0;for(let l=0;l<r;l++)for(let c=0;c<i;c++){for(let u=0;u<4;u++)e[a+u]=Math.floor(t[a+u]*s/o+.5);a+=4;}}sd.exports=function(t,e,i=false){let r=e.depth,n=e.width,s=e.height,o=e.colorType,a=e.transColor,l=e.palette,c=t;return o===3?F1(t,c,n,s,l):(a&&q1(t,c,n,s,a),r!==8&&!i&&(r===16&&(c=Buffer.alloc(n*s*4)),D1(t,c,n,s,r))),c};});var ld=_((u2,ad)=>{var j1=require$$1,gl=require$$13,od=sl(),U1=Xp(),$1=pl(),V1=dl(),H1=ml(),Vt=ad.exports=function(t){od.call(this),this._parser=new $1(t,{read:this.read.bind(this),error:this._handleError.bind(this),metadata:this._handleMetaData.bind(this),gamma:this.emit.bind(this,"gamma"),palette:this._handlePalette.bind(this),transColor:this._handleTransColor.bind(this),finished:this._finished.bind(this),inflateData:this._inflateData.bind(this),simpleTransparency:this._simpleTransparency.bind(this),headersFinished:this._headersFinished.bind(this)}),this._options=t,this.writable=true,this._parser.start();};j1.inherits(Vt,od);Vt.prototype._handleError=function(t){this.emit("error",t),this.writable=false,this.destroy(),this._inflate&&this._inflate.destroy&&this._inflate.destroy(),this._filter&&(this._filter.destroy(),this._filter.on("error",function(){})),this.errord=true;};Vt.prototype._inflateData=function(t){if(!this._inflate)if(this._bitmapInfo.interlace)this._inflate=gl.createInflate(),this._inflate.on("error",this.emit.bind(this,"error")),this._filter.on("complete",this._complete.bind(this)),this._inflate.pipe(this._filter);else {let i=((this._bitmapInfo.width*this._bitmapInfo.bpp*this._bitmapInfo.depth+7>>3)+1)*this._bitmapInfo.height,r=Math.max(i,gl.Z_MIN_CHUNK);this._inflate=gl.createInflate({chunkSize:r});let n=i,s=this.emit.bind(this,"error");this._inflate.on("error",function(a){n&&s(a);}),this._filter.on("complete",this._complete.bind(this));let o=this._filter.write.bind(this._filter);this._inflate.on("data",function(a){n&&(a.length>n&&(a=a.slice(0,n)),n-=a.length,o(a));}),this._inflate.on("end",this._filter.end.bind(this._filter));}this._inflate.write(t);};Vt.prototype._handleMetaData=function(t){this._metaData=t,this._bitmapInfo=Object.create(t),this._filter=new U1(this._bitmapInfo);};Vt.prototype._handleTransColor=function(t){this._bitmapInfo.transColor=t;};Vt.prototype._handlePalette=function(t){this._bitmapInfo.palette=t;};Vt.prototype._simpleTransparency=function(){this._metaData.alpha=true;};Vt.prototype._headersFinished=function(){this.emit("metadata",this._metaData);};Vt.prototype._finished=function(){this.errord||(this._inflate?this._inflate.end():this.emit("error","No Inflate block"));};Vt.prototype._complete=function(t){if(this.errord)return;let e;try{let i=V1.dataToBitMap(t,this._bitmapInfo);e=H1(i,this._bitmapInfo,this._options.skipRescale),i=null;}catch(i){this._handleError(i);return}this.emit("parsed",e);};});var ud=_((f2,cd)=>{var Tt=kr();cd.exports=function(t,e,i,r){let n=[Tt.COLORTYPE_COLOR_ALPHA,Tt.COLORTYPE_ALPHA].indexOf(r.colorType)!==-1;if(r.colorType===r.inputColorType){let m=function(){let y=new ArrayBuffer(2);return new DataView(y).setInt16(0,256,true),new Int16Array(y)[0]!==256}();if(r.bitDepth===8||r.bitDepth===16&&m)return t}let s=r.bitDepth!==16?t:new Uint16Array(t.buffer),o=255,a=Tt.COLORTYPE_TO_BPP_MAP[r.inputColorType];a===4&&!r.inputHasAlpha&&(a=3);let l=Tt.COLORTYPE_TO_BPP_MAP[r.colorType];r.bitDepth===16&&(o=65535,l*=2);let c=Buffer.alloc(e*i*l),u=0,f=0,d=r.bgColor||{};d.red===void 0&&(d.red=o),d.green===void 0&&(d.green=o),d.blue===void 0&&(d.blue=o);function g(){let m,y,b,x=o;switch(r.inputColorType){case Tt.COLORTYPE_COLOR_ALPHA:x=s[u+3],m=s[u],y=s[u+1],b=s[u+2];break;case Tt.COLORTYPE_COLOR:m=s[u],y=s[u+1],b=s[u+2];break;case Tt.COLORTYPE_ALPHA:x=s[u+1],m=s[u],y=m,b=m;break;case Tt.COLORTYPE_GRAYSCALE:m=s[u],y=m,b=m;break;default:throw new Error("input color type:"+r.inputColorType+" is not supported at present")}return r.inputHasAlpha&&(n||(x/=o,m=Math.min(Math.max(Math.round((1-x)*d.red+x*m),0),o),y=Math.min(Math.max(Math.round((1-x)*d.green+x*y),0),o),b=Math.min(Math.max(Math.round((1-x)*d.blue+x*b),0),o))),{red:m,green:y,blue:b,alpha:x}}for(let m=0;m<i;m++)for(let y=0;y<e;y++){let b=g();switch(r.colorType){case Tt.COLORTYPE_COLOR_ALPHA:case Tt.COLORTYPE_COLOR:r.bitDepth===8?(c[f]=b.red,c[f+1]=b.green,c[f+2]=b.blue,n&&(c[f+3]=b.alpha)):(c.writeUInt16BE(b.red,f),c.writeUInt16BE(b.green,f+2),c.writeUInt16BE(b.blue,f+4),n&&c.writeUInt16BE(b.alpha,f+6));break;case Tt.COLORTYPE_ALPHA:case Tt.COLORTYPE_GRAYSCALE:{let x=(b.red+b.green+b.blue)/3;r.bitDepth===8?(c[f]=x,n&&(c[f+1]=b.alpha)):(c.writeUInt16BE(x,f),n&&c.writeUInt16BE(b.alpha,f+2));break}default:throw new Error("unrecognised color Type "+r.colorType)}u+=a,f+=l;}return c};});var pd=_((h2,hd)=>{var fd=ll();function G1(t,e,i,r,n){for(let s=0;s<i;s++)r[n+s]=t[e+s];}function Y1(t,e,i){let r=0,n=e+i;for(let s=e;s<n;s++)r+=Math.abs(t[s]);return r}function W1(t,e,i,r,n,s){for(let o=0;o<i;o++){let a=o>=s?t[e+o-s]:0,l=t[e+o]-a;r[n+o]=l;}}function K1(t,e,i,r){let n=0;for(let s=0;s<i;s++){let o=s>=r?t[e+s-r]:0,a=t[e+s]-o;n+=Math.abs(a);}return n}function z1(t,e,i,r,n){for(let s=0;s<i;s++){let o=e>0?t[e+s-i]:0,a=t[e+s]-o;r[n+s]=a;}}function J1(t,e,i){let r=0,n=e+i;for(let s=e;s<n;s++){let o=e>0?t[s-i]:0,a=t[s]-o;r+=Math.abs(a);}return r}function Z1(t,e,i,r,n,s){for(let o=0;o<i;o++){let a=o>=s?t[e+o-s]:0,l=e>0?t[e+o-i]:0,c=t[e+o]-(a+l>>1);r[n+o]=c;}}function Q1(t,e,i,r){let n=0;for(let s=0;s<i;s++){let o=s>=r?t[e+s-r]:0,a=e>0?t[e+s-i]:0,l=t[e+s]-(o+a>>1);n+=Math.abs(l);}return n}function X1(t,e,i,r,n,s){for(let o=0;o<i;o++){let a=o>=s?t[e+o-s]:0,l=e>0?t[e+o-i]:0,c=e>0&&o>=s?t[e+o-(i+s)]:0,u=t[e+o]-fd(a,l,c);r[n+o]=u;}}function ex(t,e,i,r){let n=0;for(let s=0;s<i;s++){let o=s>=r?t[e+s-r]:0,a=e>0?t[e+s-i]:0,l=e>0&&s>=r?t[e+s-(i+r)]:0,c=t[e+s]-fd(o,a,l);n+=Math.abs(c);}return n}var tx={0:G1,1:W1,2:z1,3:Z1,4:X1},ix={0:Y1,1:K1,2:J1,3:Q1,4:ex};hd.exports=function(t,e,i,r,n){let s;if(!("filterType"in r)||r.filterType===-1)s=[0,1,2,3,4];else if(typeof r.filterType=="number")s=[r.filterType];else throw new Error("unrecognised filter types");r.bitDepth===16&&(n*=2);let o=e*n,a=0,l=0,c=Buffer.alloc((o+1)*i),u=s[0];for(let f=0;f<i;f++){if(s.length>1){let d=1/0;for(let g=0;g<s.length;g++){let m=ix[s[g]](t,l,o,n);m<d&&(u=s[g],d=m);}}c[a]=u,a++,tx[u](t,l,o,c,a,n),a+=o,l+=o;}return c};});var vl=_((p2,dd)=>{var it=kr(),rx=hl(),nx=ud(),sx=pd(),ox=require$$13,mi=dd.exports=function(t){if(this._options=t,t.deflateChunkSize=t.deflateChunkSize||32*1024,t.deflateLevel=t.deflateLevel!=null?t.deflateLevel:9,t.deflateStrategy=t.deflateStrategy!=null?t.deflateStrategy:3,t.inputHasAlpha=t.inputHasAlpha!=null?t.inputHasAlpha:true,t.deflateFactory=t.deflateFactory||ox.createDeflate,t.bitDepth=t.bitDepth||8,t.colorType=typeof t.colorType=="number"?t.colorType:it.COLORTYPE_COLOR_ALPHA,t.inputColorType=typeof t.inputColorType=="number"?t.inputColorType:it.COLORTYPE_COLOR_ALPHA,[it.COLORTYPE_GRAYSCALE,it.COLORTYPE_COLOR,it.COLORTYPE_COLOR_ALPHA,it.COLORTYPE_ALPHA].indexOf(t.colorType)===-1)throw new Error("option color type:"+t.colorType+" is not supported at present");if([it.COLORTYPE_GRAYSCALE,it.COLORTYPE_COLOR,it.COLORTYPE_COLOR_ALPHA,it.COLORTYPE_ALPHA].indexOf(t.inputColorType)===-1)throw new Error("option input color type:"+t.inputColorType+" is not supported at present");if(t.bitDepth!==8&&t.bitDepth!==16)throw new Error("option bit depth:"+t.bitDepth+" is not supported at present")};mi.prototype.getDeflateOptions=function(){return {chunkSize:this._options.deflateChunkSize,level:this._options.deflateLevel,strategy:this._options.deflateStrategy}};mi.prototype.createDeflate=function(){return this._options.deflateFactory(this.getDeflateOptions())};mi.prototype.filterData=function(t,e,i){let r=nx(t,e,i,this._options),n=it.COLORTYPE_TO_BPP_MAP[this._options.colorType];return sx(r,e,i,this._options,n)};mi.prototype._packChunk=function(t,e){let i=e?e.length:0,r=Buffer.alloc(i+12);return r.writeUInt32BE(i,0),r.writeUInt32BE(t,4),e&&e.copy(r,8),r.writeInt32BE(rx.crc32(r.slice(4,r.length-4)),r.length-4),r};mi.prototype.packGAMA=function(t){let e=Buffer.alloc(4);return e.writeUInt32BE(Math.floor(t*it.GAMMA_DIVISION),0),this._packChunk(it.TYPE_gAMA,e)};mi.prototype.packIHDR=function(t,e){let i=Buffer.alloc(13);return i.writeUInt32BE(t,0),i.writeUInt32BE(e,4),i[8]=this._options.bitDepth,i[9]=this._options.colorType,i[10]=0,i[11]=0,i[12]=0,this._packChunk(it.TYPE_IHDR,i)};mi.prototype.packIDAT=function(t){return this._packChunk(it.TYPE_IDAT,t)};mi.prototype.packIEND=function(){return this._packChunk(it.TYPE_IEND,null)};});var yd=_((d2,vd)=>{var ax=require$$1,md=require$$12,lx=kr(),cx=vl(),gd=vd.exports=function(t){md.call(this);let e=t||{};this._packer=new cx(e),this._deflate=this._packer.createDeflate(),this.readable=true;};ax.inherits(gd,md);gd.prototype.pack=function(t,e,i,r){this.emit("data",Buffer.from(lx.PNG_SIGNATURE)),this.emit("data",this._packer.packIHDR(e,i)),r&&this.emit("data",this._packer.packGAMA(r));let n=this._packer.filterData(t,e,i);this._deflate.on("error",this.emit.bind(this,"error")),this._deflate.on("data",function(s){this.emit("data",this._packer.packIDAT(s));}.bind(this)),this._deflate.on("end",function(){this.emit("data",this._packer.packIEND()),this.emit("end");}.bind(this)),this._deflate.end(n);};});var Ed=_((ln,Sd)=>{var bd=require$$10$1.ok,Or=require$$13,ux=require$$1,_d=require$$14.kMaxLength;function Vi(t){if(!(this instanceof Vi))return new Vi(t);t&&t.chunkSize<Or.Z_MIN_CHUNK&&(t.chunkSize=Or.Z_MIN_CHUNK),Or.Inflate.call(this,t),this._offset=this._offset===void 0?this._outOffset:this._offset,this._buffer=this._buffer||this._outBuffer,t&&t.maxLength!=null&&(this._maxLength=t.maxLength);}function fx(t){return new Vi(t)}function wd(t,e){t._handle&&(t._handle.close(),t._handle=null);}Vi.prototype._processChunk=function(t,e,i){if(typeof i=="function")return Or.Inflate._processChunk.call(this,t,e,i);let r=this,n=t&&t.length,s=this._chunkSize-this._offset,o=this._maxLength,a=0,l=[],c=0,u;this.on("error",function(m){u=m;});function f(m,y){if(r._hadError)return;let b=s-y;if(bd(b>=0,"have should not go down"),b>0){let x=r._buffer.slice(r._offset,r._offset+b);if(r._offset+=b,x.length>o&&(x=x.slice(0,o)),l.push(x),c+=x.length,o-=x.length,o===0)return  false}return (y===0||r._offset>=r._chunkSize)&&(s=r._chunkSize,r._offset=0,r._buffer=Buffer.allocUnsafe(r._chunkSize)),y===0?(a+=n-m,n=m,true):false}bd(this._handle,"zlib binding closed");let d;do d=this._handle.writeSync(e,t,a,n,this._buffer,this._offset,s),d=d||this._writeState;while(!this._hadError&&f(d[0],d[1]));if(this._hadError)throw u;if(c>=_d)throw wd(this),new RangeError("Cannot create final Buffer. It would be larger than 0x"+_d.toString(16)+" bytes");let g=Buffer.concat(l,c);return wd(this),g};ux.inherits(Vi,Or.Inflate);function hx(t,e){if(typeof e=="string"&&(e=Buffer.from(e)),!(e instanceof Buffer))throw new TypeError("Not a string or buffer");let i=t._finishFlushFlag;return i==null&&(i=Or.Z_FINISH),t._processChunk(e,i)}function xd(t,e){return hx(new Vi(e),t)}Sd.exports=ln=xd;ln.Inflate=Vi;ln.createInflate=fx;ln.inflateSync=xd;});var yl=_((m2,Od)=>{var kd=Od.exports=function(t){this._buffer=t,this._reads=[];};kd.prototype.read=function(t,e){this._reads.push({length:Math.abs(t),allowLess:t<0,func:e});};kd.prototype.process=function(){for(;this._reads.length>0&&this._buffer.length;){let t=this._reads[0];if(this._buffer.length&&(this._buffer.length>=t.length||t.allowLess)){this._reads.shift();let e=this._buffer;this._buffer=e.slice(t.length),t.func.call(this,e.slice(0,t.length));}else break}if(this._reads.length>0)throw new Error("There are some read requests waitng on finished stream");if(this._buffer.length>0)throw new Error("unrecognised content at end of stream")};});var Td=_(Cd=>{var px=yl(),dx=cl();Cd.process=function(t,e){let i=[],r=new px(t);return new dx(e,{read:r.read.bind(r),write:function(s){i.push(s);},complete:function(){}}).start(),r.process(),Buffer.concat(i)};});var Ld=_((v2,Nd)=>{var Ad=true,Id=require$$13,mx=Ed();Id.deflateSync||(Ad=false);var gx=yl(),vx=Td(),yx=pl(),bx=dl(),_x=ml();Nd.exports=function(t,e){if(!Ad)throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");let i;function r(k){i=k;}let n;function s(k){n=k;}function o(k){n.transColor=k;}function a(k){n.palette=k;}function l(){n.alpha=true;}let c;function u(k){c=k;}let f=[];function d(k){f.push(k);}let g=new gx(t);if(new yx(e,{read:g.read.bind(g),error:r,metadata:s,gamma:u,palette:a,transColor:o,inflateData:d,simpleTransparency:l}).start(),g.process(),i)throw i;let y=Buffer.concat(f);f.length=0;let b;if(n.interlace)b=Id.inflateSync(y);else {let S=((n.width*n.bpp*n.depth+7>>3)+1)*n.height;b=mx(y,{chunkSize:S,maxLength:S});}if(y=null,!b||!b.length)throw new Error("bad png - invalid inflate data response");let x=vx.process(b,n);y=null;let E=bx.dataToBitMap(x,n);x=null;let O=_x(E,n,e.skipRescale);return n.data=O,n.gamma=c||0,n};});var Md=_((y2,Pd)=>{var Bd=true,Rd=require$$13;Rd.deflateSync||(Bd=false);var wx=kr(),xx=vl();Pd.exports=function(t,e){if(!Bd)throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");let i=e||{},r=new xx(i),n=[];n.push(Buffer.from(wx.PNG_SIGNATURE)),n.push(r.packIHDR(t.width,t.height)),t.gamma&&n.push(r.packGAMA(t.gamma));let s=r.filterData(t.data,t.width,t.height),o=Rd.deflateSync(s,r.getDeflateOptions());if(s=null,!o||!o.length)throw new Error("bad png - invalid compressed data response");return n.push(r.packIDAT(o)),n.push(r.packIEND()),Buffer.concat(n)};});var Fd=_(bl=>{var Sx=Ld(),Ex=Md();bl.read=function(t,e){return Sx(t,e||{})};bl.write=function(t,e){return Ex(t,e)};});var jd=_(Dd=>{var kx=require$$1,qd=require$$12,Ox=ld(),Cx=yd(),Tx=Fd(),at=Dd.PNG=function(t){qd.call(this),t=t||{},this.width=t.width|0,this.height=t.height|0,this.data=this.width>0&&this.height>0?Buffer.alloc(4*this.width*this.height):null,t.fill&&this.data&&this.data.fill(0),this.gamma=0,this.readable=this.writable=true,this._parser=new Ox(t),this._parser.on("error",this.emit.bind(this,"error")),this._parser.on("close",this._handleClose.bind(this)),this._parser.on("metadata",this._metadata.bind(this)),this._parser.on("gamma",this._gamma.bind(this)),this._parser.on("parsed",function(e){this.data=e,this.emit("parsed",e);}.bind(this)),this._packer=new Cx(t),this._packer.on("data",this.emit.bind(this,"data")),this._packer.on("end",this.emit.bind(this,"end")),this._parser.on("close",this._handleClose.bind(this)),this._packer.on("error",this.emit.bind(this,"error"));};kx.inherits(at,qd);at.sync=Tx;at.prototype.pack=function(){return !this.data||!this.data.length?(this.emit("error","No data provided"),this):(process.nextTick(function(){this._packer.pack(this.data,this.width,this.height,this.gamma);}.bind(this)),this)};at.prototype.parse=function(t,e){if(e){let i,r;i=function(n){this.removeListener("error",r),this.data=n,e(null,this);}.bind(this),r=function(n){this.removeListener("parsed",i),e(n,null);}.bind(this),this.once("parsed",i),this.once("error",r);}return this.end(t),this};at.prototype.write=function(t){return this._parser.write(t),true};at.prototype.end=function(t){this._parser.end(t);};at.prototype._metadata=function(t){this.width=t.width,this.height=t.height,this.emit("metadata",t);};at.prototype._gamma=function(t){this.gamma=t;};at.prototype._handleClose=function(){!this._parser.writable&&!this._packer.readable&&this.emit("close");};at.bitblt=function(t,e,i,r,n,s,o,a){if(i|=0,r|=0,n|=0,s|=0,o|=0,a|=0,i>t.width||r>t.height||i+n>t.width||r+s>t.height)throw new Error("bitblt reading outside image");if(o>e.width||a>e.height||o+n>e.width||a+s>e.height)throw new Error("bitblt writing outside image");for(let l=0;l<s;l++)t.data.copy(e.data,(a+l)*e.width+o<<2,(r+l)*t.width+i<<2,(r+l)*t.width+i+n<<2);};at.prototype.bitblt=function(t,e,i,r,n,s,o){return at.bitblt(this,t,e,i,r,n,s,o),this};at.adjustGamma=function(t){if(t.gamma){for(let e=0;e<t.height;e++)for(let i=0;i<t.width;i++){let r=t.width*e+i<<2;for(let n=0;n<3;n++){let s=t.data[r+n]/255;s=Math.pow(s,1/2.2/t.gamma),t.data[r+n]=Math.round(s*255);}}t.gamma=0;}};at.prototype.adjustGamma=function(){at.adjustGamma(this);};});var cn=_(wl=>{var Fs=class extends Error{constructor(e,i,r){super(r),Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name,this.code=i,this.exitCode=e,this.nestedError=void 0;}},_l=class extends Fs{constructor(e){super(1,"commander.invalidArgument",e),Error.captureStackTrace(this,this.constructor),this.name=this.constructor.name;}};wl.CommanderError=Fs;wl.InvalidArgumentError=_l;});var qs=_(Sl=>{var{InvalidArgumentError:Ax}=cn(),xl=class{constructor(e,i){switch(this.description=i||"",this.variadic=false,this.parseArg=void 0,this.defaultValue=void 0,this.defaultValueDescription=void 0,this.argChoices=void 0,e[0]){case "<":this.required=true,this._name=e.slice(1,-1);break;case "[":this.required=false,this._name=e.slice(1,-1);break;default:this.required=true,this._name=e;break}this._name.length>3&&this._name.slice(-3)==="..."&&(this.variadic=true,this._name=this._name.slice(0,-3));}name(){return this._name}_concatValue(e,i){return i===this.defaultValue||!Array.isArray(i)?[e]:i.concat(e)}default(e,i){return this.defaultValue=e,this.defaultValueDescription=i,this}argParser(e){return this.parseArg=e,this}choices(e){return this.argChoices=e,this.parseArg=(i,r)=>{if(!e.includes(i))throw new Ax(`Allowed choices are ${e.join(", ")}.`);return this.variadic?this._concatValue(i,r):i},this}argRequired(){return this.required=true,this}argOptional(){return this.required=false,this}};function Ix(t){let e=t.name()+(t.variadic===true?"...":"");return t.required?"<"+e+">":"["+e+"]"}Sl.Argument=xl;Sl.humanReadableArgName=Ix;});var kl=_(Ud=>{var{humanReadableArgName:Nx}=qs(),El=class{constructor(){this.helpWidth=void 0,this.sortSubcommands=false,this.sortOptions=false;}visibleCommands(e){let i=e.commands.filter(r=>!r._hidden);if(e._hasImplicitHelpCommand()){let[,r,n]=e._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/),s=e.createCommand(r).helpOption(false);s.description(e._helpCommandDescription),n&&s.arguments(n),i.push(s);}return this.sortSubcommands&&i.sort((r,n)=>r.name().localeCompare(n.name())),i}visibleOptions(e){let i=e.options.filter(s=>!s.hidden),r=e._hasHelpOption&&e._helpShortFlag&&!e._findOption(e._helpShortFlag),n=e._hasHelpOption&&!e._findOption(e._helpLongFlag);if(r||n){let s;r?n?s=e.createOption(e._helpFlags,e._helpDescription):s=e.createOption(e._helpShortFlag,e._helpDescription):s=e.createOption(e._helpLongFlag,e._helpDescription),i.push(s);}if(this.sortOptions){let s=o=>o.short?o.short.replace(/^-/,""):o.long.replace(/^--/,"");i.sort((o,a)=>s(o).localeCompare(s(a)));}return i}visibleArguments(e){return e._argsDescription&&e._args.forEach(i=>{i.description=i.description||e._argsDescription[i.name()]||"";}),e._args.find(i=>i.description)?e._args:[]}subcommandTerm(e){let i=e._args.map(r=>Nx(r)).join(" ");return e._name+(e._aliases[0]?"|"+e._aliases[0]:"")+(e.options.length?" [options]":"")+(i?" "+i:"")}optionTerm(e){return e.flags}argumentTerm(e){return e.name()}longestSubcommandTermLength(e,i){return i.visibleCommands(e).reduce((r,n)=>Math.max(r,i.subcommandTerm(n).length),0)}longestOptionTermLength(e,i){return i.visibleOptions(e).reduce((r,n)=>Math.max(r,i.optionTerm(n).length),0)}longestArgumentTermLength(e,i){return i.visibleArguments(e).reduce((r,n)=>Math.max(r,i.argumentTerm(n).length),0)}commandUsage(e){let i=e._name;e._aliases[0]&&(i=i+"|"+e._aliases[0]);let r="";for(let n=e.parent;n;n=n.parent)r=n.name()+" "+r;return r+i+" "+e.usage()}commandDescription(e){return e.description()}subcommandDescription(e){return e.description()}optionDescription(e){let i=[];return e.argChoices&&!e.negate&&i.push(`choices: ${e.argChoices.map(r=>JSON.stringify(r)).join(", ")}`),e.defaultValue!==void 0&&!e.negate&&i.push(`default: ${e.defaultValueDescription||JSON.stringify(e.defaultValue)}`),e.envVar!==void 0&&i.push(`env: ${e.envVar}`),i.length>0?`${e.description} (${i.join(", ")})`:e.description}argumentDescription(e){let i=[];if(e.argChoices&&i.push(`choices: ${e.argChoices.map(r=>JSON.stringify(r)).join(", ")}`),e.defaultValue!==void 0&&i.push(`default: ${e.defaultValueDescription||JSON.stringify(e.defaultValue)}`),i.length>0){let r=`(${i.join(", ")})`;return e.description?`${e.description} ${r}`:r}return e.description}formatHelp(e,i){let r=i.padWidth(e,i),n=i.helpWidth||80,s=2,o=2;function a(m,y){if(y){let b=`${m.padEnd(r+o)}${y}`;return i.wrap(b,n-s,r+o)}return m}function l(m){return m.join(`
`).replace(/^/gm," ".repeat(s))}let c=[`Usage: ${i.commandUsage(e)}`,""],u=i.commandDescription(e);u.length>0&&(c=c.concat([u,""]));let f=i.visibleArguments(e).map(m=>a(i.argumentTerm(m),i.argumentDescription(m)));f.length>0&&(c=c.concat(["Arguments:",l(f),""]));let d=i.visibleOptions(e).map(m=>a(i.optionTerm(m),i.optionDescription(m)));d.length>0&&(c=c.concat(["Options:",l(d),""]));let g=i.visibleCommands(e).map(m=>a(i.subcommandTerm(m),i.subcommandDescription(m)));return g.length>0&&(c=c.concat(["Commands:",l(g),""])),c.join(`
`)}padWidth(e,i){return Math.max(i.longestOptionTermLength(e,i),i.longestSubcommandTermLength(e,i),i.longestArgumentTermLength(e,i))}wrap(e,i,r,n=40){if(e.match(/[\n]\s+/))return e;let s=i-r;if(s<n)return e;let o=e.substr(0,r),a=e.substr(r),l=" ".repeat(r),c=new RegExp(".{1,"+(s-1)+"}([\\s\u200B]|$)|[^\\s\u200B]+?([\\s\u200B]|$)","g"),u=a.match(c)||[];return o+u.map((f,d)=>(f.slice(-1)===`
`&&(f=f.slice(0,f.length-1)),(d>0?l:"")+f.trimRight())).join(`
`)}};Ud.Help=El;});var Tl=_(Cl=>{var{InvalidArgumentError:Lx}=cn(),Ol=class{constructor(e,i){this.flags=e,this.description=i||"",this.required=e.includes("<"),this.optional=e.includes("["),this.variadic=/\w\.\.\.[>\]]$/.test(e),this.mandatory=false;let r=$d(e);this.short=r.shortFlag,this.long=r.longFlag,this.negate=false,this.long&&(this.negate=this.long.startsWith("--no-")),this.defaultValue=void 0,this.defaultValueDescription=void 0,this.envVar=void 0,this.parseArg=void 0,this.hidden=false,this.argChoices=void 0;}default(e,i){return this.defaultValue=e,this.defaultValueDescription=i,this}env(e){return this.envVar=e,this}argParser(e){return this.parseArg=e,this}makeOptionMandatory(e=true){return this.mandatory=!!e,this}hideHelp(e=true){return this.hidden=!!e,this}_concatValue(e,i){return i===this.defaultValue||!Array.isArray(i)?[e]:i.concat(e)}choices(e){return this.argChoices=e,this.parseArg=(i,r)=>{if(!e.includes(i))throw new Lx(`Allowed choices are ${e.join(", ")}.`);return this.variadic?this._concatValue(i,r):i},this}name(){return this.long?this.long.replace(/^--/,""):this.short.replace(/^-/,"")}attributeName(){return Bx(this.name().replace(/^no-/,""))}is(e){return this.short===e||this.long===e}};function Bx(t){return t.split("-").reduce((e,i)=>e+i[0].toUpperCase()+i.slice(1))}function $d(t){let e,i,r=t.split(/[ |,]+/);return r.length>1&&!/^[[<]/.test(r[1])&&(e=r.shift()),i=r.shift(),!e&&/^-[^-]$/.test(i)&&(e=i,i=void 0),{shortFlag:e,longFlag:i}}Cl.Option=Ol;Cl.splitOptionFlags=$d;});var Hd=_(Vd=>{function Rx(t,e){if(Math.abs(t.length-e.length)>3)return Math.max(t.length,e.length);let i=[];for(let r=0;r<=t.length;r++)i[r]=[r];for(let r=0;r<=e.length;r++)i[0][r]=r;for(let r=1;r<=e.length;r++)for(let n=1;n<=t.length;n++){let s=1;t[n-1]===e[r-1]?s=0:s=1,i[n][r]=Math.min(i[n-1][r]+1,i[n][r-1]+1,i[n-1][r-1]+s),n>1&&r>1&&t[n-1]===e[r-2]&&t[n-2]===e[r-1]&&(i[n][r]=Math.min(i[n][r],i[n-2][r-2]+1));}return i[t.length][e.length]}function Px(t,e){if(!e||e.length===0)return "";e=Array.from(new Set(e));let i=t.startsWith("--");i&&(t=t.slice(2),e=e.map(o=>o.slice(2)));let r=[],n=3,s=.4;return e.forEach(o=>{if(o.length<=1)return;let a=Rx(t,o),l=Math.max(t.length,o.length);(l-a)/l>s&&(a<n?(n=a,r=[o]):a===n&&r.push(o));}),r.sort((o,a)=>o.localeCompare(a)),i&&(r=r.map(o=>`--${o}`)),r.length>1?`
(Did you mean one of ${r.join(", ")}?)`:r.length===1?`
(Did you mean ${r[0]}?)`:""}Vd.suggestSimilar=Px;});var zd=_(Kd=>{var Mx=require$$0$5.EventEmitter,Al=require$$0$3,Hi=require$$1$1,Il=require$$0$4,{Argument:Fx,humanReadableArgName:qx}=qs(),{CommanderError:Nl}=cn(),{Help:Dx}=kl(),{Option:jx,splitOptionFlags:Ux}=Tl(),{suggestSimilar:Gd}=Hd(),Bl=class t extends Mx{constructor(e){super(),this.commands=[],this.options=[],this.parent=null,this._allowUnknownOption=false,this._allowExcessArguments=true,this._args=[],this.args=[],this.rawArgs=[],this.processedArgs=[],this._scriptPath=null,this._name=e||"",this._optionValues={},this._optionValueSources={},this._storeOptionsAsProperties=false,this._actionHandler=null,this._executableHandler=false,this._executableFile=null,this._defaultCommandName=null,this._exitCallback=null,this._aliases=[],this._combineFlagAndOptionalValue=true,this._description="",this._argsDescription=void 0,this._enablePositionalOptions=false,this._passThroughOptions=false,this._lifeCycleHooks={},this._showHelpAfterError=false,this._showSuggestionAfterError=false,this._outputConfiguration={writeOut:i=>process.stdout.write(i),writeErr:i=>process.stderr.write(i),getOutHelpWidth:()=>process.stdout.isTTY?process.stdout.columns:void 0,getErrHelpWidth:()=>process.stderr.isTTY?process.stderr.columns:void 0,outputError:(i,r)=>r(i)},this._hidden=false,this._hasHelpOption=true,this._helpFlags="-h, --help",this._helpDescription="display help for command",this._helpShortFlag="-h",this._helpLongFlag="--help",this._addImplicitHelpCommand=void 0,this._helpCommandName="help",this._helpCommandnameAndArgs="help [command]",this._helpCommandDescription="display help for command",this._helpConfiguration={};}copyInheritedSettings(e){return this._outputConfiguration=e._outputConfiguration,this._hasHelpOption=e._hasHelpOption,this._helpFlags=e._helpFlags,this._helpDescription=e._helpDescription,this._helpShortFlag=e._helpShortFlag,this._helpLongFlag=e._helpLongFlag,this._helpCommandName=e._helpCommandName,this._helpCommandnameAndArgs=e._helpCommandnameAndArgs,this._helpCommandDescription=e._helpCommandDescription,this._helpConfiguration=e._helpConfiguration,this._exitCallback=e._exitCallback,this._storeOptionsAsProperties=e._storeOptionsAsProperties,this._combineFlagAndOptionalValue=e._combineFlagAndOptionalValue,this._allowExcessArguments=e._allowExcessArguments,this._enablePositionalOptions=e._enablePositionalOptions,this._showHelpAfterError=e._showHelpAfterError,this._showSuggestionAfterError=e._showSuggestionAfterError,this}command(e,i,r){let n=i,s=r;typeof n=="object"&&n!==null&&(s=n,n=null),s=s||{};let[,o,a]=e.match(/([^ ]+) *(.*)/),l=this.createCommand(o);return n&&(l.description(n),l._executableHandler=true),s.isDefault&&(this._defaultCommandName=l._name),l._hidden=!!(s.noHelp||s.hidden),l._executableFile=s.executableFile||null,a&&l.arguments(a),this.commands.push(l),l.parent=this,l.copyInheritedSettings(this),n?this:l}createCommand(e){return new t(e)}createHelp(){return Object.assign(new Dx,this.configureHelp())}configureHelp(e){return e===void 0?this._helpConfiguration:(this._helpConfiguration=e,this)}configureOutput(e){return e===void 0?this._outputConfiguration:(Object.assign(this._outputConfiguration,e),this)}showHelpAfterError(e=true){return typeof e!="string"&&(e=!!e),this._showHelpAfterError=e,this}showSuggestionAfterError(e=true){return this._showSuggestionAfterError=!!e,this}addCommand(e,i){if(!e._name)throw new Error("Command passed to .addCommand() must have a name");function r(n){n.forEach(s=>{if(s._executableHandler&&!s._executableFile)throw new Error(`Must specify executableFile for deeply nested executable: ${s.name()}`);r(s.commands);});}return r(e.commands),i=i||{},i.isDefault&&(this._defaultCommandName=e._name),(i.noHelp||i.hidden)&&(e._hidden=true),this.commands.push(e),e.parent=this,this}createArgument(e,i){return new Fx(e,i)}argument(e,i,r,n){let s=this.createArgument(e,i);return typeof r=="function"?s.default(n).argParser(r):s.default(r),this.addArgument(s),this}arguments(e){return e.split(/ +/).forEach(i=>{this.argument(i);}),this}addArgument(e){let i=this._args.slice(-1)[0];if(i&&i.variadic)throw new Error(`only the last argument can be variadic '${i.name()}'`);if(e.required&&e.defaultValue!==void 0&&e.parseArg===void 0)throw new Error(`a default value for a required argument is never used: '${e.name()}'`);return this._args.push(e),this}addHelpCommand(e,i){return e===false?this._addImplicitHelpCommand=false:(this._addImplicitHelpCommand=true,typeof e=="string"&&(this._helpCommandName=e.split(" ")[0],this._helpCommandnameAndArgs=e),this._helpCommandDescription=i||this._helpCommandDescription),this}_hasImplicitHelpCommand(){return this._addImplicitHelpCommand===void 0?this.commands.length&&!this._actionHandler&&!this._findCommand("help"):this._addImplicitHelpCommand}hook(e,i){let r=["preAction","postAction"];if(!r.includes(e))throw new Error(`Unexpected value for event passed to hook : '${e}'.
Expecting one of '${r.join("', '")}'`);return this._lifeCycleHooks[e]?this._lifeCycleHooks[e].push(i):this._lifeCycleHooks[e]=[i],this}exitOverride(e){return e?this._exitCallback=e:this._exitCallback=i=>{if(i.code!=="commander.executeSubCommandAsync")throw i},this}_exit(e,i,r){this._exitCallback&&this._exitCallback(new Nl(e,i,r)),process.exit(e);}action(e){let i=r=>{let n=this._args.length,s=r.slice(0,n);return this._storeOptionsAsProperties?s[n]=this:s[n]=this.opts(),s.push(this),e.apply(this,s)};return this._actionHandler=i,this}createOption(e,i){return new jx(e,i)}addOption(e){let i=e.name(),r=e.attributeName(),n=e.defaultValue;if(e.negate||e.optional||e.required||typeof n=="boolean"){if(e.negate){let o=e.long.replace(/^--no-/,"--");n=this._findOption(o)?this.getOptionValue(r):true;}n!==void 0&&this.setOptionValueWithSource(r,n,"default");}this.options.push(e);let s=(o,a,l)=>{let c=this.getOptionValue(r);if(o!==null&&e.parseArg)try{o=e.parseArg(o,c===void 0?n:c);}catch(u){if(u.code==="commander.invalidArgument"){let f=`${a} ${u.message}`;this._displayError(u.exitCode,u.code,f);}throw u}else o!==null&&e.variadic&&(o=e._concatValue(o,c));typeof c=="boolean"||typeof c=="undefined"?o==null?this.setOptionValueWithSource(r,e.negate?false:n||true,l):this.setOptionValueWithSource(r,o,l):o!==null&&this.setOptionValueWithSource(r,e.negate?false:o,l);};return this.on("option:"+i,o=>{let a=`error: option '${e.flags}' argument '${o}' is invalid.`;s(o,a,"cli");}),e.envVar&&this.on("optionEnv:"+i,o=>{let a=`error: option '${e.flags}' value '${o}' from env '${e.envVar}' is invalid.`;s(o,a,"env");}),this}_optionEx(e,i,r,n,s){let o=this.createOption(i,r);if(o.makeOptionMandatory(!!e.mandatory),typeof n=="function")o.default(s).argParser(n);else if(n instanceof RegExp){let a=n;n=(l,c)=>{let u=a.exec(l);return u?u[0]:c},o.default(s).argParser(n);}else o.default(n);return this.addOption(o)}option(e,i,r,n){return this._optionEx({},e,i,r,n)}requiredOption(e,i,r,n){return this._optionEx({mandatory:true},e,i,r,n)}combineFlagAndOptionalValue(e=true){return this._combineFlagAndOptionalValue=!!e,this}allowUnknownOption(e=true){return this._allowUnknownOption=!!e,this}allowExcessArguments(e=true){return this._allowExcessArguments=!!e,this}enablePositionalOptions(e=true){return this._enablePositionalOptions=!!e,this}passThroughOptions(e=true){if(this._passThroughOptions=!!e,this.parent&&e&&!this.parent._enablePositionalOptions)throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");return this}storeOptionsAsProperties(e=true){if(this._storeOptionsAsProperties=!!e,this.options.length)throw new Error("call .storeOptionsAsProperties() before adding options");return this}getOptionValue(e){return this._storeOptionsAsProperties?this[e]:this._optionValues[e]}setOptionValue(e,i){return this._storeOptionsAsProperties?this[e]=i:this._optionValues[e]=i,this}setOptionValueWithSource(e,i,r){return this.setOptionValue(e,i),this._optionValueSources[e]=r,this}getOptionValueSource(e){return this._optionValueSources[e]}_prepareUserArgs(e,i){if(e!==void 0&&!Array.isArray(e))throw new Error("first parameter to parse must be array or undefined");i=i||{},e===void 0&&(e=process.argv,process.versions&&process.versions.electron&&(i.from="electron")),this.rawArgs=e.slice();let r;switch(i.from){case void 0:case "node":this._scriptPath=e[1],r=e.slice(2);break;case "electron":process.defaultApp?(this._scriptPath=e[1],r=e.slice(2)):r=e.slice(1);break;case "user":r=e.slice(0);break;default:throw new Error(`unexpected parse option { from: '${i.from}' }`)}return !this._scriptPath&&require.main&&(this._scriptPath=require.main.filename),this._name=this._name||this._scriptPath&&Hi.basename(this._scriptPath,Hi.extname(this._scriptPath)),r}parse(e,i){let r=this._prepareUserArgs(e,i);return this._parseCommand([],r),this}async parseAsync(e,i){let r=this._prepareUserArgs(e,i);return await this._parseCommand([],r),this}_executeSubCommand(e,i){i=i.slice();let r=false,n=[".js",".ts",".tsx",".mjs",".cjs"];this._checkForMissingMandatoryOptions();let s=this._scriptPath;!s&&require.main&&(s=require.main.filename);let o;try{let d=Il.realpathSync(s);o=Hi.dirname(d);}catch{o=".";}let a=Hi.basename(s,Hi.extname(s))+"-"+e._name;e._executableFile&&(a=e._executableFile);let l=Hi.join(o,a);Il.existsSync(l)?a=l:n.forEach(d=>{Il.existsSync(`${l}${d}`)&&(a=`${l}${d}`);}),r=n.includes(Hi.extname(a));let c;process.platform!=="win32"?r?(i.unshift(a),i=Wd(process.execArgv).concat(i),c=Al.spawn(process.argv[0],i,{stdio:"inherit"})):c=Al.spawn(a,i,{stdio:"inherit"}):(i.unshift(a),i=Wd(process.execArgv).concat(i),c=Al.spawn(process.execPath,i,{stdio:"inherit"})),["SIGUSR1","SIGUSR2","SIGTERM","SIGINT","SIGHUP"].forEach(d=>{process.on(d,()=>{c.killed===false&&c.exitCode===null&&c.kill(d);});});let f=this._exitCallback;f?c.on("close",()=>{f(new Nl(process.exitCode||0,"commander.executeSubCommandAsync","(close)"));}):c.on("close",process.exit.bind(process)),c.on("error",d=>{if(d.code==="ENOENT"){let g=`'${a}' does not exist
 - if '${e._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name`;throw new Error(g)}else if(d.code==="EACCES")throw new Error(`'${a}' not executable`);if(!f)process.exit(1);else {let g=new Nl(1,"commander.executeSubCommandAsync","(error)");g.nestedError=d,f(g);}}),this.runningCommand=c;}_dispatchSubcommand(e,i,r){let n=this._findCommand(e);if(n||this.help({error:true}),n._executableHandler)this._executeSubCommand(n,i.concat(r));else return n._parseCommand(i,r)}_checkNumberOfArguments(){this._args.forEach((e,i)=>{e.required&&this.args[i]==null&&this.missingArgument(e.name());}),!(this._args.length>0&&this._args[this._args.length-1].variadic)&&this.args.length>this._args.length&&this._excessArguments(this.args);}_processArguments(){let e=(r,n,s)=>{let o=n;if(n!==null&&r.parseArg)try{o=r.parseArg(n,s);}catch(a){if(a.code==="commander.invalidArgument"){let l=`error: command-argument value '${n}' is invalid for argument '${r.name()}'. ${a.message}`;this._displayError(a.exitCode,a.code,l);}throw a}return o};this._checkNumberOfArguments();let i=[];this._args.forEach((r,n)=>{let s=r.defaultValue;r.variadic?n<this.args.length?(s=this.args.slice(n),r.parseArg&&(s=s.reduce((o,a)=>e(r,a,o),r.defaultValue))):s===void 0&&(s=[]):n<this.args.length&&(s=this.args[n],r.parseArg&&(s=e(r,s,r.defaultValue))),i[n]=s;}),this.processedArgs=i;}_chainOrCall(e,i){return e&&e.then&&typeof e.then=="function"?e.then(()=>i()):i()}_chainOrCallHooks(e,i){let r=e,n=[];return Ll(this).reverse().filter(s=>s._lifeCycleHooks[i]!==void 0).forEach(s=>{s._lifeCycleHooks[i].forEach(o=>{n.push({hookedCommand:s,callback:o});});}),i==="postAction"&&n.reverse(),n.forEach(s=>{r=this._chainOrCall(r,()=>s.callback(s.hookedCommand,this));}),r}_parseCommand(e,i){let r=this.parseOptions(i);if(this._parseOptionsEnv(),e=e.concat(r.operands),i=r.unknown,this.args=e.concat(i),e&&this._findCommand(e[0]))return this._dispatchSubcommand(e[0],e.slice(1),i);if(this._hasImplicitHelpCommand()&&e[0]===this._helpCommandName)return e.length===1&&this.help(),this._dispatchSubcommand(e[1],[],[this._helpLongFlag]);if(this._defaultCommandName)return Yd(this,i),this._dispatchSubcommand(this._defaultCommandName,e,i);this.commands.length&&this.args.length===0&&!this._actionHandler&&!this._defaultCommandName&&this.help({error:true}),Yd(this,r.unknown),this._checkForMissingMandatoryOptions();let n=()=>{r.unknown.length>0&&this.unknownOption(r.unknown[0]);},s=`command:${this.name()}`;if(this._actionHandler){n(),this._processArguments();let o;return o=this._chainOrCallHooks(o,"preAction"),o=this._chainOrCall(o,()=>this._actionHandler(this.processedArgs)),this.parent&&this.parent.emit(s,e,i),o=this._chainOrCallHooks(o,"postAction"),o}if(this.parent&&this.parent.listenerCount(s))n(),this._processArguments(),this.parent.emit(s,e,i);else if(e.length){if(this._findCommand("*"))return this._dispatchSubcommand("*",e,i);this.listenerCount("command:*")?this.emit("command:*",e,i):this.commands.length?this.unknownCommand():(n(),this._processArguments());}else this.commands.length?(n(),this.help({error:true})):(n(),this._processArguments());}_findCommand(e){if(e)return this.commands.find(i=>i._name===e||i._aliases.includes(e))}_findOption(e){return this.options.find(i=>i.is(e))}_checkForMissingMandatoryOptions(){for(let e=this;e;e=e.parent)e.options.forEach(i=>{i.mandatory&&e.getOptionValue(i.attributeName())===void 0&&e.missingMandatoryOptionValue(i);});}parseOptions(e){let i=[],r=[],n=i,s=e.slice();function o(l){return l.length>1&&l[0]==="-"}let a=null;for(;s.length;){let l=s.shift();if(l==="--"){n===r&&n.push(l),n.push(...s);break}if(a&&!o(l)){this.emit(`option:${a.name()}`,l);continue}if(a=null,o(l)){let c=this._findOption(l);if(c){if(c.required){let u=s.shift();u===void 0&&this.optionMissingArgument(c),this.emit(`option:${c.name()}`,u);}else if(c.optional){let u=null;s.length>0&&!o(s[0])&&(u=s.shift()),this.emit(`option:${c.name()}`,u);}else this.emit(`option:${c.name()}`);a=c.variadic?c:null;continue}}if(l.length>2&&l[0]==="-"&&l[1]!=="-"){let c=this._findOption(`-${l[1]}`);if(c){c.required||c.optional&&this._combineFlagAndOptionalValue?this.emit(`option:${c.name()}`,l.slice(2)):(this.emit(`option:${c.name()}`),s.unshift(`-${l.slice(2)}`));continue}}if(/^--[^=]+=/.test(l)){let c=l.indexOf("="),u=this._findOption(l.slice(0,c));if(u&&(u.required||u.optional)){this.emit(`option:${u.name()}`,l.slice(c+1));continue}}if(o(l)&&(n=r),(this._enablePositionalOptions||this._passThroughOptions)&&i.length===0&&r.length===0){if(this._findCommand(l)){i.push(l),s.length>0&&r.push(...s);break}else if(l===this._helpCommandName&&this._hasImplicitHelpCommand()){i.push(l),s.length>0&&i.push(...s);break}else if(this._defaultCommandName){r.push(l),s.length>0&&r.push(...s);break}}if(this._passThroughOptions){n.push(l),s.length>0&&n.push(...s);break}n.push(l);}return {operands:i,unknown:r}}opts(){if(this._storeOptionsAsProperties){let e={},i=this.options.length;for(let r=0;r<i;r++){let n=this.options[r].attributeName();e[n]=n===this._versionOptionName?this._version:this[n];}return e}return this._optionValues}_displayError(e,i,r){this._outputConfiguration.outputError(`${r}
`,this._outputConfiguration.writeErr),typeof this._showHelpAfterError=="string"?this._outputConfiguration.writeErr(`${this._showHelpAfterError}
`):this._showHelpAfterError&&(this._outputConfiguration.writeErr(`
`),this.outputHelp({error:true})),this._exit(e,i,r);}_parseOptionsEnv(){this.options.forEach(e=>{if(e.envVar&&e.envVar in process.env){let i=e.attributeName();(this.getOptionValue(i)===void 0||["default","config","env"].includes(this.getOptionValueSource(i)))&&(e.required||e.optional?this.emit(`optionEnv:${e.name()}`,process.env[e.envVar]):this.emit(`optionEnv:${e.name()}`));}});}missingArgument(e){let i=`error: missing required argument '${e}'`;this._displayError(1,"commander.missingArgument",i);}optionMissingArgument(e){let i=`error: option '${e.flags}' argument missing`;this._displayError(1,"commander.optionMissingArgument",i);}missingMandatoryOptionValue(e){let i=`error: required option '${e.flags}' not specified`;this._displayError(1,"commander.missingMandatoryOptionValue",i);}unknownOption(e){if(this._allowUnknownOption)return;let i="";if(e.startsWith("--")&&this._showSuggestionAfterError){let n=[],s=this;do{let o=s.createHelp().visibleOptions(s).filter(a=>a.long).map(a=>a.long);n=n.concat(o),s=s.parent;}while(s&&!s._enablePositionalOptions);i=Gd(e,n);}let r=`error: unknown option '${e}'${i}`;this._displayError(1,"commander.unknownOption",r);}_excessArguments(e){if(this._allowExcessArguments)return;let i=this._args.length,r=i===1?"":"s",s=`error: too many arguments${this.parent?` for '${this.name()}'`:""}. Expected ${i} argument${r} but got ${e.length}.`;this._displayError(1,"commander.excessArguments",s);}unknownCommand(){let e=this.args[0],i="";if(this._showSuggestionAfterError){let n=[];this.createHelp().visibleCommands(this).forEach(s=>{n.push(s.name()),s.alias()&&n.push(s.alias());}),i=Gd(e,n);}let r=`error: unknown command '${e}'${i}`;this._displayError(1,"commander.unknownCommand",r);}version(e,i,r){if(e===void 0)return this._version;this._version=e,i=i||"-V, --version",r=r||"output the version number";let n=this.createOption(i,r);return this._versionOptionName=n.attributeName(),this.options.push(n),this.on("option:"+n.name(),()=>{this._outputConfiguration.writeOut(`${e}
`),this._exit(0,"commander.version",e);}),this}description(e,i){return e===void 0&&i===void 0?this._description:(this._description=e,i&&(this._argsDescription=i),this)}alias(e){if(e===void 0)return this._aliases[0];let i=this;if(this.commands.length!==0&&this.commands[this.commands.length-1]._executableHandler&&(i=this.commands[this.commands.length-1]),e===i._name)throw new Error("Command alias can't be the same as its name");return i._aliases.push(e),this}aliases(e){return e===void 0?this._aliases:(e.forEach(i=>this.alias(i)),this)}usage(e){if(e===void 0){if(this._usage)return this._usage;let i=this._args.map(r=>qx(r));return [].concat(this.options.length||this._hasHelpOption?"[options]":[],this.commands.length?"[command]":[],this._args.length?i:[]).join(" ")}return this._usage=e,this}name(e){return e===void 0?this._name:(this._name=e,this)}helpInformation(e){let i=this.createHelp();return i.helpWidth===void 0&&(i.helpWidth=e&&e.error?this._outputConfiguration.getErrHelpWidth():this._outputConfiguration.getOutHelpWidth()),i.formatHelp(this,i)}_getHelpContext(e){e=e||{};let i={error:!!e.error},r;return i.error?r=n=>this._outputConfiguration.writeErr(n):r=n=>this._outputConfiguration.writeOut(n),i.write=e.write||r,i.command=this,i}outputHelp(e){let i;typeof e=="function"&&(i=e,e=void 0);let r=this._getHelpContext(e);Ll(this).reverse().forEach(s=>s.emit("beforeAllHelp",r)),this.emit("beforeHelp",r);let n=this.helpInformation(r);if(i&&(n=i(n),typeof n!="string"&&!Buffer.isBuffer(n)))throw new Error("outputHelp callback must return a string or a Buffer");r.write(n),this.emit(this._helpLongFlag),this.emit("afterHelp",r),Ll(this).forEach(s=>s.emit("afterAllHelp",r));}helpOption(e,i){if(typeof e=="boolean")return this._hasHelpOption=e,this;this._helpFlags=e||this._helpFlags,this._helpDescription=i||this._helpDescription;let r=Ux(this._helpFlags);return this._helpShortFlag=r.shortFlag,this._helpLongFlag=r.longFlag,this}help(e){this.outputHelp(e);let i=process.exitCode||0;i===0&&e&&typeof e!="function"&&e.error&&(i=1),this._exit(i,"commander.help","(outputHelp)");}addHelpText(e,i){let r=["beforeAll","before","after","afterAll"];if(!r.includes(e))throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${r.join("', '")}'`);let n=`${e}Help`;return this.on(n,s=>{let o;typeof i=="function"?o=i({error:s.error,command:s.command}):o=i,o&&s.write(`${o}
`);}),this}};function Yd(t,e){t._hasHelpOption&&e.find(r=>r===t._helpLongFlag||r===t._helpShortFlag)&&(t.outputHelp(),t._exit(0,"commander.helpDisplayed","(outputHelp)"));}function Wd(t){return t.map(e=>{if(!e.startsWith("--inspect"))return e;let i,r="127.0.0.1",n="9229",s;return (s=e.match(/^(--inspect(-brk)?)$/))!==null?i=s[1]:(s=e.match(/^(--inspect(-brk|-port)?)=([^:]+)$/))!==null?(i=s[1],/^\d+$/.test(s[3])?n=s[3]:r=s[3]):(s=e.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/))!==null&&(i=s[1],r=s[3],n=s[4]),i&&n!=="0"?`${i}=${r}:${parseInt(n)+1}`:e})}function Ll(t){let e=[];for(let i=t;i;i=i.parent)e.push(i);return e}Kd.Command=Bl;});var Xd=_((qt,Qd)=>{var{Argument:$x}=qs(),{Command:Jd}=zd(),{CommanderError:Vx,InvalidArgumentError:Zd}=cn(),{Help:Hx}=kl(),{Option:Gx}=Tl();qt=Qd.exports=new Jd;qt.program=qt;qt.Argument=$x;qt.Command=Jd;qt.CommanderError=Vx;qt.Help=Hx;qt.InvalidArgumentError=Zd;qt.InvalidOptionArgumentError=Zd;qt.Option=Gx;});var im=_((em,tm)=>{tm.exports=Cr;function Cr(t,e){if(this.stream=e.stream||process.stderr,typeof e=="number"){var i=e;e={},e.total=i;}else {if(e=e||{},typeof t!="string")throw new Error("format required");if(typeof e.total!="number")throw new Error("total required")}this.fmt=t,this.curr=e.curr||0,this.total=e.total,this.width=e.width||this.total,this.clear=e.clear,this.chars={complete:e.complete||"=",incomplete:e.incomplete||"-",head:e.head||e.complete||"="},this.renderThrottle=e.renderThrottle!==0?e.renderThrottle||16:0,this.lastRender=-1/0,this.callback=e.callback||function(){},this.tokens={},this.lastDraw="";}Cr.prototype.tick=function(t,e){if(t!==0&&(t=t||1),typeof t=="object"&&(e=t,t=1),e&&(this.tokens=e),this.curr==0&&(this.start=new Date),this.curr+=t,this.render(),this.curr>=this.total){this.render(void 0,true),this.complete=true,this.terminate(),this.callback(this);return}};Cr.prototype.render=function(t,e){if(e=e!==void 0?e:false,t&&(this.tokens=t),!!this.stream.isTTY){var i=Date.now(),r=i-this.lastRender;if(!(!e&&r<this.renderThrottle)){this.lastRender=i;var n=this.curr/this.total;n=Math.min(Math.max(n,0),1);var s=Math.floor(n*100),o,a,l,c=new Date-this.start,u=s==100?0:c*(this.total/this.curr-1),f=this.curr/(c/1e3),d=this.fmt.replace(":current",this.curr).replace(":total",this.total).replace(":elapsed",isNaN(c)?"0.0":(c/1e3).toFixed(1)).replace(":eta",isNaN(u)||!isFinite(u)?"0.0":(u/1e3).toFixed(1)).replace(":percent",s.toFixed(0)+"%").replace(":rate",Math.round(f)),g=Math.max(0,this.stream.columns-d.replace(":bar","").length);g&&process.platform==="win32"&&(g=g-1);var m=Math.min(this.width,g);if(l=Math.round(m*n),a=Array(Math.max(0,l+1)).join(this.chars.complete),o=Array(Math.max(0,m-l+1)).join(this.chars.incomplete),l>0&&(a=a.slice(0,-1)+this.chars.head),d=d.replace(":bar",a+o),this.tokens)for(var y in this.tokens)d=d.replace(":"+y,this.tokens[y]);this.lastDraw!==d&&(this.stream.cursorTo(0),this.stream.write(d),this.stream.clearLine(1),this.lastDraw=d);}}};Cr.prototype.update=function(t,e){var i=Math.floor(t*this.total),r=i-this.curr;this.tick(r,e);};Cr.prototype.interrupt=function(t){this.stream.clearLine(),this.stream.cursorTo(0),this.stream.write(t),this.stream.write(`
`),this.stream.write(this.lastDraw);};Cr.prototype.terminate=function(){this.clear?this.stream.clearLine&&(this.stream.clearLine(),this.stream.cursorTo(0)):this.stream.write(`
`);};});var nm=_((C2,rm)=>{rm.exports=im();});var lm=_(ri=>{Object.defineProperty(ri,"__esModule",{value:true});var sm=require$$14,Gi={INVALID_ENCODING:"Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.",INVALID_SMARTBUFFER_SIZE:"Invalid size provided. Size must be a valid integer greater than zero.",INVALID_SMARTBUFFER_BUFFER:"Invalid Buffer provided in SmartBufferOptions.",INVALID_SMARTBUFFER_OBJECT:"Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.",INVALID_OFFSET:"An invalid offset value was provided.",INVALID_OFFSET_NON_NUMBER:"An invalid offset value was provided. A numeric value is required.",INVALID_LENGTH:"An invalid length value was provided.",INVALID_LENGTH_NON_NUMBER:"An invalid length value was provived. A numeric value is required.",INVALID_TARGET_OFFSET:"Target offset is beyond the bounds of the internal SmartBuffer data.",INVALID_TARGET_LENGTH:"Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.",INVALID_READ_BEYOND_BOUNDS:"Attempted to read beyond the bounds of the managed data.",INVALID_WRITE_BEYOND_BOUNDS:"Attempted to write beyond the bounds of the managed data."};ri.ERRORS=Gi;function Yx(t){if(!sm.Buffer.isEncoding(t))throw new Error(Gi.INVALID_ENCODING)}ri.checkEncoding=Yx;function om(t){return typeof t=="number"&&isFinite(t)&&Jx(t)}ri.isFiniteInteger=om;function am(t,e){if(typeof t=="number"){if(!om(t)||t<0)throw new Error(e?Gi.INVALID_OFFSET:Gi.INVALID_LENGTH)}else throw new Error(e?Gi.INVALID_OFFSET_NON_NUMBER:Gi.INVALID_LENGTH_NON_NUMBER)}function Wx(t){am(t,false);}ri.checkLengthValue=Wx;function Kx(t){am(t,true);}ri.checkOffsetValue=Kx;function zx(t,e){if(t<0||t>e.length)throw new Error(Gi.INVALID_TARGET_OFFSET)}ri.checkTargetOffset=zx;function Jx(t){return typeof t=="number"&&isFinite(t)&&Math.floor(t)===t}function Zx(t){if(typeof BigInt=="undefined")throw new Error("Platform does not support JS BigInt type.");if(typeof sm.Buffer.prototype[t]=="undefined")throw new Error(`Platform does not support Buffer.prototype.${t}.`)}ri.bigIntAndBufferInt64Check=Zx;});var um=_(Pl=>{Object.defineProperty(Pl,"__esModule",{value:true});var pe=lm(),cm=4096,Qx="utf8",Rl=class t{constructor(e){if(this.length=0,this._encoding=Qx,this._writeOffset=0,this._readOffset=0,t.isSmartBufferOptions(e))if(e.encoding&&(pe.checkEncoding(e.encoding),this._encoding=e.encoding),e.size)if(pe.isFiniteInteger(e.size)&&e.size>0)this._buff=Buffer.allocUnsafe(e.size);else throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_SIZE);else if(e.buff)if(Buffer.isBuffer(e.buff))this._buff=e.buff,this.length=e.buff.length;else throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_BUFFER);else this._buff=Buffer.allocUnsafe(cm);else {if(typeof e!="undefined")throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_OBJECT);this._buff=Buffer.allocUnsafe(cm);}}static fromSize(e,i){return new this({size:e,encoding:i})}static fromBuffer(e,i){return new this({buff:e,encoding:i})}static fromOptions(e){return new this(e)}static isSmartBufferOptions(e){let i=e;return i&&(i.encoding!==void 0||i.size!==void 0||i.buff!==void 0)}readInt8(e){return this._readNumberValue(Buffer.prototype.readInt8,1,e)}readInt16BE(e){return this._readNumberValue(Buffer.prototype.readInt16BE,2,e)}readInt16LE(e){return this._readNumberValue(Buffer.prototype.readInt16LE,2,e)}readInt32BE(e){return this._readNumberValue(Buffer.prototype.readInt32BE,4,e)}readInt32LE(e){return this._readNumberValue(Buffer.prototype.readInt32LE,4,e)}readBigInt64BE(e){return pe.bigIntAndBufferInt64Check("readBigInt64BE"),this._readNumberValue(Buffer.prototype.readBigInt64BE,8,e)}readBigInt64LE(e){return pe.bigIntAndBufferInt64Check("readBigInt64LE"),this._readNumberValue(Buffer.prototype.readBigInt64LE,8,e)}writeInt8(e,i){return this._writeNumberValue(Buffer.prototype.writeInt8,1,e,i),this}insertInt8(e,i){return this._insertNumberValue(Buffer.prototype.writeInt8,1,e,i)}writeInt16BE(e,i){return this._writeNumberValue(Buffer.prototype.writeInt16BE,2,e,i)}insertInt16BE(e,i){return this._insertNumberValue(Buffer.prototype.writeInt16BE,2,e,i)}writeInt16LE(e,i){return this._writeNumberValue(Buffer.prototype.writeInt16LE,2,e,i)}insertInt16LE(e,i){return this._insertNumberValue(Buffer.prototype.writeInt16LE,2,e,i)}writeInt32BE(e,i){return this._writeNumberValue(Buffer.prototype.writeInt32BE,4,e,i)}insertInt32BE(e,i){return this._insertNumberValue(Buffer.prototype.writeInt32BE,4,e,i)}writeInt32LE(e,i){return this._writeNumberValue(Buffer.prototype.writeInt32LE,4,e,i)}insertInt32LE(e,i){return this._insertNumberValue(Buffer.prototype.writeInt32LE,4,e,i)}writeBigInt64BE(e,i){return pe.bigIntAndBufferInt64Check("writeBigInt64BE"),this._writeNumberValue(Buffer.prototype.writeBigInt64BE,8,e,i)}insertBigInt64BE(e,i){return pe.bigIntAndBufferInt64Check("writeBigInt64BE"),this._insertNumberValue(Buffer.prototype.writeBigInt64BE,8,e,i)}writeBigInt64LE(e,i){return pe.bigIntAndBufferInt64Check("writeBigInt64LE"),this._writeNumberValue(Buffer.prototype.writeBigInt64LE,8,e,i)}insertBigInt64LE(e,i){return pe.bigIntAndBufferInt64Check("writeBigInt64LE"),this._insertNumberValue(Buffer.prototype.writeBigInt64LE,8,e,i)}readUInt8(e){return this._readNumberValue(Buffer.prototype.readUInt8,1,e)}readUInt16BE(e){return this._readNumberValue(Buffer.prototype.readUInt16BE,2,e)}readUInt16LE(e){return this._readNumberValue(Buffer.prototype.readUInt16LE,2,e)}readUInt32BE(e){return this._readNumberValue(Buffer.prototype.readUInt32BE,4,e)}readUInt32LE(e){return this._readNumberValue(Buffer.prototype.readUInt32LE,4,e)}readBigUInt64BE(e){return pe.bigIntAndBufferInt64Check("readBigUInt64BE"),this._readNumberValue(Buffer.prototype.readBigUInt64BE,8,e)}readBigUInt64LE(e){return pe.bigIntAndBufferInt64Check("readBigUInt64LE"),this._readNumberValue(Buffer.prototype.readBigUInt64LE,8,e)}writeUInt8(e,i){return this._writeNumberValue(Buffer.prototype.writeUInt8,1,e,i)}insertUInt8(e,i){return this._insertNumberValue(Buffer.prototype.writeUInt8,1,e,i)}writeUInt16BE(e,i){return this._writeNumberValue(Buffer.prototype.writeUInt16BE,2,e,i)}insertUInt16BE(e,i){return this._insertNumberValue(Buffer.prototype.writeUInt16BE,2,e,i)}writeUInt16LE(e,i){return this._writeNumberValue(Buffer.prototype.writeUInt16LE,2,e,i)}insertUInt16LE(e,i){return this._insertNumberValue(Buffer.prototype.writeUInt16LE,2,e,i)}writeUInt32BE(e,i){return this._writeNumberValue(Buffer.prototype.writeUInt32BE,4,e,i)}insertUInt32BE(e,i){return this._insertNumberValue(Buffer.prototype.writeUInt32BE,4,e,i)}writeUInt32LE(e,i){return this._writeNumberValue(Buffer.prototype.writeUInt32LE,4,e,i)}insertUInt32LE(e,i){return this._insertNumberValue(Buffer.prototype.writeUInt32LE,4,e,i)}writeBigUInt64BE(e,i){return pe.bigIntAndBufferInt64Check("writeBigUInt64BE"),this._writeNumberValue(Buffer.prototype.writeBigUInt64BE,8,e,i)}insertBigUInt64BE(e,i){return pe.bigIntAndBufferInt64Check("writeBigUInt64BE"),this._insertNumberValue(Buffer.prototype.writeBigUInt64BE,8,e,i)}writeBigUInt64LE(e,i){return pe.bigIntAndBufferInt64Check("writeBigUInt64LE"),this._writeNumberValue(Buffer.prototype.writeBigUInt64LE,8,e,i)}insertBigUInt64LE(e,i){return pe.bigIntAndBufferInt64Check("writeBigUInt64LE"),this._insertNumberValue(Buffer.prototype.writeBigUInt64LE,8,e,i)}readFloatBE(e){return this._readNumberValue(Buffer.prototype.readFloatBE,4,e)}readFloatLE(e){return this._readNumberValue(Buffer.prototype.readFloatLE,4,e)}writeFloatBE(e,i){return this._writeNumberValue(Buffer.prototype.writeFloatBE,4,e,i)}insertFloatBE(e,i){return this._insertNumberValue(Buffer.prototype.writeFloatBE,4,e,i)}writeFloatLE(e,i){return this._writeNumberValue(Buffer.prototype.writeFloatLE,4,e,i)}insertFloatLE(e,i){return this._insertNumberValue(Buffer.prototype.writeFloatLE,4,e,i)}readDoubleBE(e){return this._readNumberValue(Buffer.prototype.readDoubleBE,8,e)}readDoubleLE(e){return this._readNumberValue(Buffer.prototype.readDoubleLE,8,e)}writeDoubleBE(e,i){return this._writeNumberValue(Buffer.prototype.writeDoubleBE,8,e,i)}insertDoubleBE(e,i){return this._insertNumberValue(Buffer.prototype.writeDoubleBE,8,e,i)}writeDoubleLE(e,i){return this._writeNumberValue(Buffer.prototype.writeDoubleLE,8,e,i)}insertDoubleLE(e,i){return this._insertNumberValue(Buffer.prototype.writeDoubleLE,8,e,i)}readString(e,i){let r;typeof e=="number"?(pe.checkLengthValue(e),r=Math.min(e,this.length-this._readOffset)):(i=e,r=this.length-this._readOffset),typeof i!="undefined"&&pe.checkEncoding(i);let n=this._buff.slice(this._readOffset,this._readOffset+r).toString(i||this._encoding);return this._readOffset+=r,n}insertString(e,i,r){return pe.checkOffsetValue(i),this._handleString(e,true,i,r)}writeString(e,i,r){return this._handleString(e,false,i,r)}readStringNT(e){typeof e!="undefined"&&pe.checkEncoding(e);let i=this.length;for(let n=this._readOffset;n<this.length;n++)if(this._buff[n]===0){i=n;break}let r=this._buff.slice(this._readOffset,i);return this._readOffset=i+1,r.toString(e||this._encoding)}insertStringNT(e,i,r){return pe.checkOffsetValue(i),this.insertString(e,i,r),this.insertUInt8(0,i+e.length),this}writeStringNT(e,i,r){return this.writeString(e,i,r),this.writeUInt8(0,typeof i=="number"?i+e.length:this.writeOffset),this}readBuffer(e){typeof e!="undefined"&&pe.checkLengthValue(e);let i=typeof e=="number"?e:this.length,r=Math.min(this.length,this._readOffset+i),n=this._buff.slice(this._readOffset,r);return this._readOffset=r,n}insertBuffer(e,i){return pe.checkOffsetValue(i),this._handleBuffer(e,true,i)}writeBuffer(e,i){return this._handleBuffer(e,false,i)}readBufferNT(){let e=this.length;for(let r=this._readOffset;r<this.length;r++)if(this._buff[r]===0){e=r;break}let i=this._buff.slice(this._readOffset,e);return this._readOffset=e+1,i}insertBufferNT(e,i){return pe.checkOffsetValue(i),this.insertBuffer(e,i),this.insertUInt8(0,i+e.length),this}writeBufferNT(e,i){return typeof i!="undefined"&&pe.checkOffsetValue(i),this.writeBuffer(e,i),this.writeUInt8(0,typeof i=="number"?i+e.length:this._writeOffset),this}clear(){return this._writeOffset=0,this._readOffset=0,this.length=0,this}remaining(){return this.length-this._readOffset}get readOffset(){return this._readOffset}set readOffset(e){pe.checkOffsetValue(e),pe.checkTargetOffset(e,this),this._readOffset=e;}get writeOffset(){return this._writeOffset}set writeOffset(e){pe.checkOffsetValue(e),pe.checkTargetOffset(e,this),this._writeOffset=e;}get encoding(){return this._encoding}set encoding(e){pe.checkEncoding(e),this._encoding=e;}get internalBuffer(){return this._buff}toBuffer(){return this._buff.slice(0,this.length)}toString(e){let i=typeof e=="string"?e:this._encoding;return pe.checkEncoding(i),this._buff.toString(i,0,this.length)}destroy(){return this.clear(),this}_handleString(e,i,r,n){let s=this._writeOffset,o=this._encoding;typeof r=="number"?s=r:typeof r=="string"&&(pe.checkEncoding(r),o=r),typeof n=="string"&&(pe.checkEncoding(n),o=n);let a=Buffer.byteLength(e,o);return i?this.ensureInsertable(a,s):this._ensureWriteable(a,s),this._buff.write(e,s,a,o),i?this._writeOffset+=a:typeof r=="number"?this._writeOffset=Math.max(this._writeOffset,s+a):this._writeOffset+=a,this}_handleBuffer(e,i,r){let n=typeof r=="number"?r:this._writeOffset;return i?this.ensureInsertable(e.length,n):this._ensureWriteable(e.length,n),e.copy(this._buff,n),i?this._writeOffset+=e.length:typeof r=="number"?this._writeOffset=Math.max(this._writeOffset,n+e.length):this._writeOffset+=e.length,this}ensureReadable(e,i){let r=this._readOffset;if(typeof i!="undefined"&&(pe.checkOffsetValue(i),r=i),r<0||r+e>this.length)throw new Error(pe.ERRORS.INVALID_READ_BEYOND_BOUNDS)}ensureInsertable(e,i){pe.checkOffsetValue(i),this._ensureCapacity(this.length+e),i<this.length&&this._buff.copy(this._buff,i+e,i,this._buff.length),i+e>this.length?this.length=i+e:this.length+=e;}_ensureWriteable(e,i){let r=typeof i=="number"?i:this._writeOffset;this._ensureCapacity(r+e),r+e>this.length&&(this.length=r+e);}_ensureCapacity(e){let i=this._buff.length;if(e>i){let r=this._buff,n=i*3/2+1;n<e&&(n=e),this._buff=Buffer.allocUnsafe(n),r.copy(this._buff,0,0,i);}}_readNumberValue(e,i,r){this.ensureReadable(i,r);let n=e.call(this._buff,typeof r=="number"?r:this._readOffset);return typeof r=="undefined"&&(this._readOffset+=i),n}_insertNumberValue(e,i,r,n){return pe.checkOffsetValue(n),this.ensureInsertable(i,n),e.call(this._buff,r,n),this._writeOffset+=i,this}_writeNumberValue(e,i,r,n){if(typeof n=="number"){if(n<0)throw new Error(pe.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);pe.checkOffsetValue(n);}let s=typeof n=="number"?n:this._writeOffset;return this._ensureWriteable(i,s),e.call(this._buff,r,s),typeof n=="number"?this._writeOffset=Math.max(this._writeOffset,s+i):this._writeOffset+=i,this}};Pl.SmartBuffer=Rl;});var Ml=_(Ne=>{Object.defineProperty(Ne,"__esModule",{value:true});Ne.SOCKS5_NO_ACCEPTABLE_AUTH=Ne.SOCKS5_CUSTOM_AUTH_END=Ne.SOCKS5_CUSTOM_AUTH_START=Ne.SOCKS_INCOMING_PACKET_SIZES=Ne.SocksClientState=Ne.Socks5Response=Ne.Socks5HostType=Ne.Socks5Auth=Ne.Socks4Response=Ne.SocksCommand=Ne.ERRORS=Ne.DEFAULT_TIMEOUT=void 0;var Xx=3e4;Ne.DEFAULT_TIMEOUT=Xx;var eS={InvalidSocksCommand:"An invalid SOCKS command was provided. Valid options are connect, bind, and associate.",InvalidSocksCommandForOperation:"An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.",InvalidSocksCommandChain:"An invalid SOCKS command was provided. Chaining currently only supports the connect command.",InvalidSocksClientOptionsDestination:"An invalid destination host was provided.",InvalidSocksClientOptionsExistingSocket:"An invalid existing socket was provided. This should be an instance of stream.Duplex.",InvalidSocksClientOptionsProxy:"Invalid SOCKS proxy details were provided.",InvalidSocksClientOptionsTimeout:"An invalid timeout value was provided. Please enter a value above 0 (in ms).",InvalidSocksClientOptionsProxiesLength:"At least two socks proxies must be provided for chaining.",InvalidSocksClientOptionsCustomAuthRange:"Custom auth must be a value between 0x80 and 0xFE.",InvalidSocksClientOptionsCustomAuthOptions:"When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.",NegotiationError:"Negotiation error",SocketClosed:"Socket closed",ProxyConnectionTimedOut:"Proxy connection timed out",InternalError:"SocksClient internal error (this should not happen)",InvalidSocks4HandshakeResponse:"Received invalid Socks4 handshake response",Socks4ProxyRejectedConnection:"Socks4 Proxy rejected connection",InvalidSocks4IncomingConnectionResponse:"Socks4 invalid incoming connection response",Socks4ProxyRejectedIncomingBoundConnection:"Socks4 Proxy rejected incoming bound connection",InvalidSocks5InitialHandshakeResponse:"Received invalid Socks5 initial handshake response",InvalidSocks5IntiailHandshakeSocksVersion:"Received invalid Socks5 initial handshake (invalid socks version)",InvalidSocks5InitialHandshakeNoAcceptedAuthType:"Received invalid Socks5 initial handshake (no accepted authentication type)",InvalidSocks5InitialHandshakeUnknownAuthType:"Received invalid Socks5 initial handshake (unknown authentication type)",Socks5AuthenticationFailed:"Socks5 Authentication failed",InvalidSocks5FinalHandshake:"Received invalid Socks5 final handshake response",InvalidSocks5FinalHandshakeRejected:"Socks5 proxy rejected connection",InvalidSocks5IncomingConnectionResponse:"Received invalid Socks5 incoming connection response",Socks5ProxyRejectedIncomingBoundConnection:"Socks5 Proxy rejected incoming bound connection"};Ne.ERRORS=eS;var tS={Socks5InitialHandshakeResponse:2,Socks5UserPassAuthenticationResponse:2,Socks5ResponseHeader:5,Socks5ResponseIPv4:10,Socks5ResponseIPv6:22,Socks5ResponseHostname:t=>t+7,Socks4Response:8};Ne.SOCKS_INCOMING_PACKET_SIZES=tS;var fm;(function(t){t[t.connect=1]="connect",t[t.bind=2]="bind",t[t.associate=3]="associate";})(fm||(Ne.SocksCommand=fm={}));var hm;(function(t){t[t.Granted=90]="Granted",t[t.Failed=91]="Failed",t[t.Rejected=92]="Rejected",t[t.RejectedIdent=93]="RejectedIdent";})(hm||(Ne.Socks4Response=hm={}));var pm;(function(t){t[t.NoAuth=0]="NoAuth",t[t.GSSApi=1]="GSSApi",t[t.UserPass=2]="UserPass";})(pm||(Ne.Socks5Auth=pm={}));var iS=128;Ne.SOCKS5_CUSTOM_AUTH_START=iS;var rS=254;Ne.SOCKS5_CUSTOM_AUTH_END=rS;var nS=255;Ne.SOCKS5_NO_ACCEPTABLE_AUTH=nS;var dm;(function(t){t[t.Granted=0]="Granted",t[t.Failure=1]="Failure",t[t.NotAllowed=2]="NotAllowed",t[t.NetworkUnreachable=3]="NetworkUnreachable",t[t.HostUnreachable=4]="HostUnreachable",t[t.ConnectionRefused=5]="ConnectionRefused",t[t.TTLExpired=6]="TTLExpired",t[t.CommandNotSupported=7]="CommandNotSupported",t[t.AddressNotSupported=8]="AddressNotSupported";})(dm||(Ne.Socks5Response=dm={}));var mm;(function(t){t[t.IPv4=1]="IPv4",t[t.Hostname=3]="Hostname",t[t.IPv6=4]="IPv6";})(mm||(Ne.Socks5HostType=mm={}));var gm;(function(t){t[t.Created=0]="Created",t[t.Connecting=1]="Connecting",t[t.Connected=2]="Connected",t[t.SentInitialHandshake=3]="SentInitialHandshake",t[t.ReceivedInitialHandshakeResponse=4]="ReceivedInitialHandshakeResponse",t[t.SentAuthentication=5]="SentAuthentication",t[t.ReceivedAuthenticationResponse=6]="ReceivedAuthenticationResponse",t[t.SentFinalHandshake=7]="SentFinalHandshake",t[t.ReceivedFinalResponse=8]="ReceivedFinalResponse",t[t.BoundWaitingForConnection=9]="BoundWaitingForConnection",t[t.Established=10]="Established",t[t.Disconnected=11]="Disconnected",t[t.Error=99]="Error";})(gm||(Ne.SocksClientState=gm={}));});var ql=_(Tr=>{Object.defineProperty(Tr,"__esModule",{value:true});Tr.shuffleArray=Tr.SocksClientError=void 0;var Fl=class extends Error{constructor(e,i){super(e),this.options=i;}};Tr.SocksClientError=Fl;function sS(t){for(let e=t.length-1;e>0;e--){let i=Math.floor(Math.random()*(e+1));[t[e],t[i]]=[t[i],t[e]];}}Tr.shuffleArray=sS;});var Dl=_(Ar=>{Object.defineProperty(Ar,"__esModule",{value:true});Ar.isCorrect=Ar.isInSubnet=void 0;function oS(t){return this.subnetMask<t.subnetMask?false:this.mask(t.subnetMask)===t.mask()}Ar.isInSubnet=oS;function aS(t){return function(){return this.addressMinusSuffix!==this.correctForm()?false:this.subnetMask===t&&!this.parsedSubnet?true:this.parsedSubnet===String(this.subnetMask)}}Ar.isCorrect=aS;});var jl=_(Ht=>{Object.defineProperty(Ht,"__esModule",{value:true});Ht.RE_SUBNET_STRING=Ht.RE_ADDRESS=Ht.GROUPS=Ht.BITS=void 0;Ht.BITS=32;Ht.GROUPS=4;Ht.RE_ADDRESS=/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;Ht.RE_SUBNET_STRING=/\/\d{1,2}$/;});var js=_(Ds=>{Object.defineProperty(Ds,"__esModule",{value:true});Ds.AddressError=void 0;var Ul=class extends Error{constructor(e,i){super(e),this.name="AddressError",i!==null&&(this.parseMessage=i);}};Ds.AddressError=Ul;});var $l=_((Us,vm)=>{(function(){var t,e=0xdeadbeefcafe,i=(e&16777215)==15715070;function r(h,p,v){h!=null&&(typeof h=="number"?this.fromNumber(h,p,v):p==null&&typeof h!="string"?this.fromString(h,256):this.fromString(h,p));}function n(){return new r(null)}function s(h,p,v,w,B,M){for(;--M>=0;){var G=p*this[h++]+v[w]+B;B=Math.floor(G/67108864),v[w++]=G&67108863;}return B}function o(h,p,v,w,B,M){for(var G=p&32767,K=p>>15;--M>=0;){var Re=this[h]&32767,Ye=this[h++]>>15,kt=K*Re+Ye*G;Re=G*Re+((kt&32767)<<15)+v[w]+(B&1073741823),B=(Re>>>30)+(kt>>>15)+K*Ye+(B>>>30),v[w++]=Re&1073741823;}return B}function a(h,p,v,w,B,M){for(var G=p&16383,K=p>>14;--M>=0;){var Re=this[h]&16383,Ye=this[h++]>>14,kt=K*Re+Ye*G;Re=G*Re+((kt&16383)<<14)+v[w]+B,B=(Re>>28)+(kt>>14)+K*Ye,v[w++]=Re&268435455;}return B}var l=typeof navigator!="undefined";l&&i&&navigator.appName=="Microsoft Internet Explorer"?(r.prototype.am=o,t=30):l&&i&&navigator.appName!="Netscape"?(r.prototype.am=s,t=26):(r.prototype.am=a,t=28),r.prototype.DB=t,r.prototype.DM=(1<<t)-1,r.prototype.DV=1<<t;var c=52;r.prototype.FV=Math.pow(2,c),r.prototype.F1=c-t,r.prototype.F2=2*t-c;var u="0123456789abcdefghijklmnopqrstuvwxyz",f=new Array,d,g;for(d=48,g=0;g<=9;++g)f[d++]=g;for(d=97,g=10;g<36;++g)f[d++]=g;for(d=65,g=10;g<36;++g)f[d++]=g;function m(h){return u.charAt(h)}function y(h,p){var v=f[h.charCodeAt(p)];return v==null?-1:v}function b(h){for(var p=this.t-1;p>=0;--p)h[p]=this[p];h.t=this.t,h.s=this.s;}function x(h){this.t=1,this.s=h<0?-1:0,h>0?this[0]=h:h<-1?this[0]=h+this.DV:this.t=0;}function E(h){var p=n();return p.fromInt(h),p}function O(h,p){var v;if(p==16)v=4;else if(p==8)v=3;else if(p==256)v=8;else if(p==2)v=1;else if(p==32)v=5;else if(p==4)v=2;else {this.fromRadix(h,p);return}this.t=0,this.s=0;for(var w=h.length,B=false,M=0;--w>=0;){var G=v==8?h[w]&255:y(h,w);if(G<0){h.charAt(w)=="-"&&(B=true);continue}B=false,M==0?this[this.t++]=G:M+v>this.DB?(this[this.t-1]|=(G&(1<<this.DB-M)-1)<<M,this[this.t++]=G>>this.DB-M):this[this.t-1]|=G<<M,M+=v,M>=this.DB&&(M-=this.DB);}v==8&&(h[0]&128)!=0&&(this.s=-1,M>0&&(this[this.t-1]|=(1<<this.DB-M)-1<<M)),this.clamp(),B&&r.ZERO.subTo(this,this);}function k(){for(var h=this.s&this.DM;this.t>0&&this[this.t-1]==h;)--this.t;}function S(h){if(this.s<0)return "-"+this.negate().toString(h);var p;if(h==16)p=4;else if(h==8)p=3;else if(h==2)p=1;else if(h==32)p=5;else if(h==4)p=2;else return this.toRadix(h);var v=(1<<p)-1,w,B=false,M="",G=this.t,K=this.DB-G*this.DB%p;if(G-- >0)for(K<this.DB&&(w=this[G]>>K)>0&&(B=true,M=m(w));G>=0;)K<p?(w=(this[G]&(1<<K)-1)<<p-K,w|=this[--G]>>(K+=this.DB-p)):(w=this[G]>>(K-=p)&v,K<=0&&(K+=this.DB,--G)),w>0&&(B=true),B&&(M+=m(w));return B?M:"0"}function R(){var h=n();return r.ZERO.subTo(this,h),h}function T(){return this.s<0?this.negate():this}function A(h){var p=this.s-h.s;if(p!=0)return p;var v=this.t;if(p=v-h.t,p!=0)return this.s<0?-p:p;for(;--v>=0;)if((p=this[v]-h[v])!=0)return p;return 0}function C(h){var p=1,v;return (v=h>>>16)!=0&&(h=v,p+=16),(v=h>>8)!=0&&(h=v,p+=8),(v=h>>4)!=0&&(h=v,p+=4),(v=h>>2)!=0&&(h=v,p+=2),(v=h>>1)!=0&&(h=v,p+=1),p}function L(){return this.t<=0?0:this.DB*(this.t-1)+C(this[this.t-1]^this.s&this.DM)}function P(h,p){var v;for(v=this.t-1;v>=0;--v)p[v+h]=this[v];for(v=h-1;v>=0;--v)p[v]=0;p.t=this.t+h,p.s=this.s;}function U(h,p){for(var v=h;v<this.t;++v)p[v-h]=this[v];p.t=Math.max(this.t-h,0),p.s=this.s;}function q(h,p){var v=h%this.DB,w=this.DB-v,B=(1<<w)-1,M=Math.floor(h/this.DB),G=this.s<<v&this.DM,K;for(K=this.t-1;K>=0;--K)p[K+M+1]=this[K]>>w|G,G=(this[K]&B)<<v;for(K=M-1;K>=0;--K)p[K]=0;p[M]=G,p.t=this.t+M+1,p.s=this.s,p.clamp();}function H(h,p){p.s=this.s;var v=Math.floor(h/this.DB);if(v>=this.t){p.t=0;return}var w=h%this.DB,B=this.DB-w,M=(1<<w)-1;p[0]=this[v]>>w;for(var G=v+1;G<this.t;++G)p[G-v-1]|=(this[G]&M)<<B,p[G-v]=this[G]>>w;w>0&&(p[this.t-v-1]|=(this.s&M)<<B),p.t=this.t-v,p.clamp();}function j(h,p){for(var v=0,w=0,B=Math.min(h.t,this.t);v<B;)w+=this[v]-h[v],p[v++]=w&this.DM,w>>=this.DB;if(h.t<this.t){for(w-=h.s;v<this.t;)w+=this[v],p[v++]=w&this.DM,w>>=this.DB;w+=this.s;}else {for(w+=this.s;v<h.t;)w-=h[v],p[v++]=w&this.DM,w>>=this.DB;w-=h.s;}p.s=w<0?-1:0,w<-1?p[v++]=this.DV+w:w>0&&(p[v++]=w),p.t=v,p.clamp();}function V(h,p){var v=this.abs(),w=h.abs(),B=v.t;for(p.t=B+w.t;--B>=0;)p[B]=0;for(B=0;B<w.t;++B)p[B+v.t]=v.am(0,w[B],p,B,0,v.t);p.s=0,p.clamp(),this.s!=h.s&&r.ZERO.subTo(p,p);}function W(h){for(var p=this.abs(),v=h.t=2*p.t;--v>=0;)h[v]=0;for(v=0;v<p.t-1;++v){var w=p.am(v,p[v],h,2*v,0,1);(h[v+p.t]+=p.am(v+1,2*p[v],h,2*v+1,w,p.t-v-1))>=p.DV&&(h[v+p.t]-=p.DV,h[v+p.t+1]=1);}h.t>0&&(h[h.t-1]+=p.am(v,p[v],h,2*v,0,1)),h.s=0,h.clamp();}function Q(h,p,v){var w=h.abs();if(!(w.t<=0)){var B=this.abs();if(B.t<w.t){p!=null&&p.fromInt(0),v!=null&&this.copyTo(v);return}v==null&&(v=n());var M=n(),G=this.s,K=h.s,Re=this.DB-C(w[w.t-1]);Re>0?(w.lShiftTo(Re,M),B.lShiftTo(Re,v)):(w.copyTo(M),B.copyTo(v));var Ye=M.t,kt=M[Ye-1];if(kt!=0){var bt=kt*(1<<this.F1)+(Ye>1?M[Ye-2]>>this.F2:0),ei=this.FV/bt,hs=(1<<this.F1)/bt,Rt=1<<this.F2,Pt=v.t,ps=Pt-Ye,hi=p==null?n():p;for(M.dlShiftTo(ps,hi),v.compareTo(hi)>=0&&(v[v.t++]=1,v.subTo(hi,v)),r.ONE.dlShiftTo(Ye,hi),hi.subTo(M,M);M.t<Ye;)M[M.t++]=0;for(;--ps>=0;){var _a=v[--Pt]==kt?this.DM:Math.floor(v[Pt]*ei+(v[Pt-1]+Rt)*hs);if((v[Pt]+=M.am(0,_a,v,ps,0,Ye))<_a)for(M.dlShiftTo(ps,hi),v.subTo(hi,v);v[Pt]<--_a;)v.subTo(hi,v);}p!=null&&(v.drShiftTo(Ye,p),G!=K&&r.ZERO.subTo(p,p)),v.t=Ye,v.clamp(),Re>0&&v.rShiftTo(Re,v),G<0&&r.ZERO.subTo(v,v);}}}function Y(h){var p=n();return this.abs().divRemTo(h,null,p),this.s<0&&p.compareTo(r.ZERO)>0&&h.subTo(p,p),p}function de(h){this.m=h;}function ae(h){return h.s<0||h.compareTo(this.m)>=0?h.mod(this.m):h}function ne(h){return h}function ue(h){h.divRemTo(this.m,null,h);}function N(h,p,v){h.multiplyTo(p,v),this.reduce(v);}function X(h,p){h.squareTo(p),this.reduce(p);}de.prototype.convert=ae,de.prototype.revert=ne,de.prototype.reduce=ue,de.prototype.mulTo=N,de.prototype.sqrTo=X;function ke(){if(this.t<1)return 0;var h=this[0];if((h&1)==0)return 0;var p=h&3;return p=p*(2-(h&15)*p)&15,p=p*(2-(h&255)*p)&255,p=p*(2-((h&65535)*p&65535))&65535,p=p*(2-h*p%this.DV)%this.DV,p>0?this.DV-p:-p}function be(h){this.m=h,this.mp=h.invDigit(),this.mpl=this.mp&32767,this.mph=this.mp>>15,this.um=(1<<h.DB-15)-1,this.mt2=2*h.t;}function ge(h){var p=n();return h.abs().dlShiftTo(this.m.t,p),p.divRemTo(this.m,null,p),h.s<0&&p.compareTo(r.ZERO)>0&&this.m.subTo(p,p),p}function ve(h){var p=n();return h.copyTo(p),this.reduce(p),p}function fe(h){for(;h.t<=this.mt2;)h[h.t++]=0;for(var p=0;p<this.m.t;++p){var v=h[p]&32767,w=v*this.mpl+((v*this.mph+(h[p]>>15)*this.mpl&this.um)<<15)&h.DM;for(v=p+this.m.t,h[v]+=this.m.am(0,w,h,p,0,this.m.t);h[v]>=h.DV;)h[v]-=h.DV,h[++v]++;}h.clamp(),h.drShiftTo(this.m.t,h),h.compareTo(this.m)>=0&&h.subTo(this.m,h);}function z(h,p){h.squareTo(p),this.reduce(p);}function $(h,p,v){h.multiplyTo(p,v),this.reduce(v);}be.prototype.convert=ge,be.prototype.revert=ve,be.prototype.reduce=fe,be.prototype.mulTo=$,be.prototype.sqrTo=z;function Ce(){return (this.t>0?this[0]&1:this.s)==0}function re(h,p){if(h>4294967295||h<1)return r.ONE;var v=n(),w=n(),B=p.convert(this),M=C(h)-1;for(B.copyTo(v);--M>=0;)if(p.sqrTo(v,w),(h&1<<M)>0)p.mulTo(w,B,v);else {var G=v;v=w,w=G;}return p.revert(v)}function he(h,p){var v;return h<256||p.isEven()?v=new de(p):v=new be(p),this.exp(h,v)}r.prototype.copyTo=b,r.prototype.fromInt=x,r.prototype.fromString=O,r.prototype.clamp=k,r.prototype.dlShiftTo=P,r.prototype.drShiftTo=U,r.prototype.lShiftTo=q,r.prototype.rShiftTo=H,r.prototype.subTo=j,r.prototype.multiplyTo=V,r.prototype.squareTo=W,r.prototype.divRemTo=Q,r.prototype.invDigit=ke,r.prototype.isEven=Ce,r.prototype.exp=re,r.prototype.toString=S,r.prototype.negate=R,r.prototype.abs=T,r.prototype.compareTo=A,r.prototype.bitLength=L,r.prototype.mod=Y,r.prototype.modPowInt=he,r.ZERO=E(0),r.ONE=E(1);function ft(){var h=n();return this.copyTo(h),h}function vt(){if(this.s<0){if(this.t==1)return this[0]-this.DV;if(this.t==0)return  -1}else {if(this.t==1)return this[0];if(this.t==0)return 0}return (this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]}function I(){return this.t==0?this.s:this[0]<<24>>24}function Z(){return this.t==0?this.s:this[0]<<16>>16}function te(h){return Math.floor(Math.LN2*this.DB/Math.log(h))}function ee(){return this.s<0?-1:this.t<=0||this.t==1&&this[0]<=0?0:1}function le(h){if(h==null&&(h=10),this.signum()==0||h<2||h>36)return "0";var p=this.chunkSize(h),v=Math.pow(h,p),w=E(v),B=n(),M=n(),G="";for(this.divRemTo(w,B,M);B.signum()>0;)G=(v+M.intValue()).toString(h).substr(1)+G,B.divRemTo(w,B,M);return M.intValue().toString(h)+G}function ce(h,p){this.fromInt(0),p==null&&(p=10);for(var v=this.chunkSize(p),w=Math.pow(p,v),B=false,M=0,G=0,K=0;K<h.length;++K){var Re=y(h,K);if(Re<0){h.charAt(K)=="-"&&this.signum()==0&&(B=true);continue}G=p*G+Re,++M>=v&&(this.dMultiply(w),this.dAddOffset(G,0),M=0,G=0);}M>0&&(this.dMultiply(Math.pow(p,M)),this.dAddOffset(G,0)),B&&r.ZERO.subTo(this,this);}function _e(h,p,v){if(typeof p=="number")if(h<2)this.fromInt(1);else for(this.fromNumber(h,v),this.testBit(h-1)||this.bitwiseTo(r.ONE.shiftLeft(h-1),oe,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(p);)this.dAddOffset(2,0),this.bitLength()>h&&this.subTo(r.ONE.shiftLeft(h-1),this);else {var w=new Array,B=h&7;w.length=(h>>3)+1,p.nextBytes(w),B>0?w[0]&=(1<<B)-1:w[0]=0,this.fromString(w,256);}}function we(){var h=this.t,p=new Array;p[0]=this.s;var v=this.DB-h*this.DB%8,w,B=0;if(h-- >0)for(v<this.DB&&(w=this[h]>>v)!=(this.s&this.DM)>>v&&(p[B++]=w|this.s<<this.DB-v);h>=0;)v<8?(w=(this[h]&(1<<v)-1)<<8-v,w|=this[--h]>>(v+=this.DB-8)):(w=this[h]>>(v-=8)&255,v<=0&&(v+=this.DB,--h)),(w&128)!=0&&(w|=-256),B==0&&(this.s&128)!=(w&128)&&++B,(B>0||w!=this.s)&&(p[B++]=w);return p}function Be(h){return this.compareTo(h)==0}function Te(h){return this.compareTo(h)<0?this:h}function D(h){return this.compareTo(h)>0?this:h}function J(h,p,v){var w,B,M=Math.min(h.t,this.t);for(w=0;w<M;++w)v[w]=p(this[w],h[w]);if(h.t<this.t){for(B=h.s&this.DM,w=M;w<this.t;++w)v[w]=p(this[w],B);v.t=this.t;}else {for(B=this.s&this.DM,w=M;w<h.t;++w)v[w]=p(B,h[w]);v.t=h.t;}v.s=p(this.s,h.s),v.clamp();}function se(h,p){return h&p}function Ie(h){var p=n();return this.bitwiseTo(h,se,p),p}function oe(h,p){return h|p}function me(h){var p=n();return this.bitwiseTo(h,oe,p),p}function Ee(h,p){return h^p}function ie(h){var p=n();return this.bitwiseTo(h,Ee,p),p}function xe(h,p){return h&~p}function je(h){var p=n();return this.bitwiseTo(h,xe,p),p}function Ae(){for(var h=n(),p=0;p<this.t;++p)h[p]=this.DM&~this[p];return h.t=this.t,h.s=~this.s,h}function ht(h){var p=n();return h<0?this.rShiftTo(-h,p):this.lShiftTo(h,p),p}function Et(h){var p=n();return h<0?this.lShiftTo(-h,p):this.rShiftTo(h,p),p}function Qt(h){if(h==0)return  -1;var p=0;return (h&65535)==0&&(h>>=16,p+=16),(h&255)==0&&(h>>=8,p+=8),(h&15)==0&&(h>>=4,p+=4),(h&3)==0&&(h>>=2,p+=2),(h&1)==0&&++p,p}function ui(){for(var h=0;h<this.t;++h)if(this[h]!=0)return h*this.DB+Qt(this[h]);return this.s<0?this.t*this.DB:-1}function fi(h){for(var p=0;h!=0;)h&=h-1,++p;return p}function Ni(){for(var h=0,p=this.s&this.DM,v=0;v<this.t;++v)h+=fi(this[v]^p);return h}function Li(h){var p=Math.floor(h/this.DB);return p>=this.t?this.s!=0:(this[p]&1<<h%this.DB)!=0}function fr(h,p){var v=r.ONE.shiftLeft(h);return this.bitwiseTo(v,p,v),v}function Bi(h){return this.changeBit(h,oe)}function Ri(h){return this.changeBit(h,xe)}function Pi(h){return this.changeBit(h,Ee)}function Mi(h,p){for(var v=0,w=0,B=Math.min(h.t,this.t);v<B;)w+=this[v]+h[v],p[v++]=w&this.DM,w>>=this.DB;if(h.t<this.t){for(w+=h.s;v<this.t;)w+=this[v],p[v++]=w&this.DM,w>>=this.DB;w+=this.s;}else {for(w+=this.s;v<h.t;)w+=h[v],p[v++]=w&this.DM,w>>=this.DB;w+=h.s;}p.s=w<0?-1:0,w>0?p[v++]=w:w<-1&&(p[v++]=this.DV+w),p.t=v,p.clamp();}function Xn(h){var p=n();return this.addTo(h,p),p}function Qr(h){var p=n();return this.subTo(h,p),p}function es(h){var p=n();return this.multiplyTo(h,p),p}function ts(){var h=n();return this.squareTo(h),h}function is(h){var p=n();return this.divRemTo(h,p,null),p}function rs(h){var p=n();return this.divRemTo(h,null,p),p}function ns(h){var p=n(),v=n();return this.divRemTo(h,p,v),new Array(p,v)}function ga(h){this[this.t]=this.am(0,h-1,this,0,0,this.t),++this.t,this.clamp();}function Fi(h,p){if(h!=0){for(;this.t<=p;)this[this.t++]=0;for(this[p]+=h;this[p]>=this.DV;)this[p]-=this.DV,++p>=this.t&&(this[this.t++]=0),++this[p];}}function Xt(){}function qi(h){return h}function hr(h,p,v){h.multiplyTo(p,v);}function ss(h,p){h.squareTo(p);}Xt.prototype.convert=qi,Xt.prototype.revert=qi,Xt.prototype.mulTo=hr,Xt.prototype.sqrTo=ss;function os(h){return this.exp(h,new Xt)}function as(h,p,v){var w=Math.min(this.t+h.t,p);for(v.s=0,v.t=w;w>0;)v[--w]=0;var B;for(B=v.t-this.t;w<B;++w)v[w+this.t]=this.am(0,h[w],v,w,0,this.t);for(B=Math.min(h.t,p);w<B;++w)this.am(0,h[w],v,w,0,p-w);v.clamp();}function ls(h,p,v){--p;var w=v.t=this.t+h.t-p;for(v.s=0;--w>=0;)v[w]=0;for(w=Math.max(p-this.t,0);w<h.t;++w)v[this.t+w-p]=this.am(p-w,h[w],v,0,0,this.t+w-p);v.clamp(),v.drShiftTo(1,v);}function $t(h){this.r2=n(),this.q3=n(),r.ONE.dlShiftTo(2*h.t,this.r2),this.mu=this.r2.divide(h),this.m=h;}function cs(h){if(h.s<0||h.t>2*this.m.t)return h.mod(this.m);if(h.compareTo(this.m)<0)return h;var p=n();return h.copyTo(p),this.reduce(p),p}function us(h){return h}function pr(h){for(h.drShiftTo(this.m.t-1,this.r2),h.t>this.m.t+1&&(h.t=this.m.t+1,h.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);h.compareTo(this.r2)<0;)h.dAddOffset(1,this.m.t+1);for(h.subTo(this.r2,h);h.compareTo(this.m)>=0;)h.subTo(this.m,h);}function xb(h,p){h.squareTo(p),this.reduce(p);}function Sb(h,p,v){h.multiplyTo(p,v),this.reduce(v);}$t.prototype.convert=cs,$t.prototype.revert=us,$t.prototype.reduce=pr,$t.prototype.mulTo=Sb,$t.prototype.sqrTo=xb;function Eb(h,p){var v=h.bitLength(),w,B=E(1),M;if(v<=0)return B;v<18?w=1:v<48?w=3:v<144?w=4:v<768?w=5:w=6,v<8?M=new de(p):p.isEven()?M=new $t(p):M=new be(p);var G=new Array,K=3,Re=w-1,Ye=(1<<w)-1;if(G[1]=M.convert(this),w>1){var kt=n();for(M.sqrTo(G[1],kt);K<=Ye;)G[K]=n(),M.mulTo(kt,G[K-2],G[K]),K+=2;}var bt=h.t-1,ei,hs=true,Rt=n(),Pt;for(v=C(h[bt])-1;bt>=0;){for(v>=Re?ei=h[bt]>>v-Re&Ye:(ei=(h[bt]&(1<<v+1)-1)<<Re-v,bt>0&&(ei|=h[bt-1]>>this.DB+v-Re)),K=w;(ei&1)==0;)ei>>=1,--K;if((v-=K)<0&&(v+=this.DB,--bt),hs)G[ei].copyTo(B),hs=false;else {for(;K>1;)M.sqrTo(B,Rt),M.sqrTo(Rt,B),K-=2;K>0?M.sqrTo(B,Rt):(Pt=B,B=Rt,Rt=Pt),M.mulTo(Rt,G[ei],B);}for(;bt>=0&&(h[bt]&1<<v)==0;)M.sqrTo(B,Rt),Pt=B,B=Rt,Rt=Pt,--v<0&&(v=this.DB-1,--bt);}return M.revert(B)}function kb(h){var p=this.s<0?this.negate():this.clone(),v=h.s<0?h.negate():h.clone();if(p.compareTo(v)<0){var w=p;p=v,v=w;}var B=p.getLowestSetBit(),M=v.getLowestSetBit();if(M<0)return p;for(B<M&&(M=B),M>0&&(p.rShiftTo(M,p),v.rShiftTo(M,v));p.signum()>0;)(B=p.getLowestSetBit())>0&&p.rShiftTo(B,p),(B=v.getLowestSetBit())>0&&v.rShiftTo(B,v),p.compareTo(v)>=0?(p.subTo(v,p),p.rShiftTo(1,p)):(v.subTo(p,v),v.rShiftTo(1,v));return M>0&&v.lShiftTo(M,v),v}function Ob(h){if(h<=0)return 0;var p=this.DV%h,v=this.s<0?h-1:0;if(this.t>0)if(p==0)v=this[0]%h;else for(var w=this.t-1;w>=0;--w)v=(p*v+this[w])%h;return v}function Cb(h){var p=h.isEven();if(this.isEven()&&p||h.signum()==0)return r.ZERO;for(var v=h.clone(),w=this.clone(),B=E(1),M=E(0),G=E(0),K=E(1);v.signum()!=0;){for(;v.isEven();)v.rShiftTo(1,v),p?((!B.isEven()||!M.isEven())&&(B.addTo(this,B),M.subTo(h,M)),B.rShiftTo(1,B)):M.isEven()||M.subTo(h,M),M.rShiftTo(1,M);for(;w.isEven();)w.rShiftTo(1,w),p?((!G.isEven()||!K.isEven())&&(G.addTo(this,G),K.subTo(h,K)),G.rShiftTo(1,G)):K.isEven()||K.subTo(h,K),K.rShiftTo(1,K);v.compareTo(w)>=0?(v.subTo(w,v),p&&B.subTo(G,B),M.subTo(K,M)):(w.subTo(v,w),p&&G.subTo(B,G),K.subTo(M,K));}if(w.compareTo(r.ONE)!=0)return r.ZERO;if(K.compareTo(h)>=0)return K.subtract(h);if(K.signum()<0)K.addTo(h,K);else return K;return K.signum()<0?K.add(h):K}var st=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],Tb=(1<<26)/st[st.length-1];function Ab(h){var p,v=this.abs();if(v.t==1&&v[0]<=st[st.length-1]){for(p=0;p<st.length;++p)if(v[0]==st[p])return  true;return  false}if(v.isEven())return  false;for(p=1;p<st.length;){for(var w=st[p],B=p+1;B<st.length&&w<Tb;)w*=st[B++];for(w=v.modInt(w);p<B;)if(w%st[p++]==0)return  false}return v.millerRabin(h)}function Ib(h){var p=this.subtract(r.ONE),v=p.getLowestSetBit();if(v<=0)return  false;var w=p.shiftRight(v);h=h+1>>1,h>st.length&&(h=st.length);for(var B=n(),M=0;M<h;++M){B.fromInt(st[Math.floor(Math.random()*st.length)]);var G=B.modPow(w,this);if(G.compareTo(r.ONE)!=0&&G.compareTo(p)!=0){for(var K=1;K++<v&&G.compareTo(p)!=0;)if(G=G.modPowInt(2,this),G.compareTo(r.ONE)==0)return  false;if(G.compareTo(p)!=0)return  false}}return  true}r.prototype.chunkSize=te,r.prototype.toRadix=le,r.prototype.fromRadix=ce,r.prototype.fromNumber=_e,r.prototype.bitwiseTo=J,r.prototype.changeBit=fr,r.prototype.addTo=Mi,r.prototype.dMultiply=ga,r.prototype.dAddOffset=Fi,r.prototype.multiplyLowerTo=as,r.prototype.multiplyUpperTo=ls,r.prototype.modInt=Ob,r.prototype.millerRabin=Ib,r.prototype.clone=ft,r.prototype.intValue=vt,r.prototype.byteValue=I,r.prototype.shortValue=Z,r.prototype.signum=ee,r.prototype.toByteArray=we,r.prototype.equals=Be,r.prototype.min=Te,r.prototype.max=D,r.prototype.and=Ie,r.prototype.or=me,r.prototype.xor=ie,r.prototype.andNot=je,r.prototype.not=Ae,r.prototype.shiftLeft=ht,r.prototype.shiftRight=Et,r.prototype.getLowestSetBit=ui,r.prototype.bitCount=Ni,r.prototype.testBit=Li,r.prototype.setBit=Bi,r.prototype.clearBit=Ri,r.prototype.flipBit=Pi,r.prototype.add=Xn,r.prototype.subtract=Qr,r.prototype.multiply=es,r.prototype.divide=is,r.prototype.remainder=rs,r.prototype.divideAndRemainder=ns,r.prototype.modPow=Eb,r.prototype.modInverse=Cb,r.prototype.pow=os,r.prototype.gcd=kb,r.prototype.isProbablePrime=Ab,r.prototype.square=ts,r.prototype.Barrett=$t;var fs,yt,Ge;function Nb(h){yt[Ge++]^=h&255,yt[Ge++]^=h>>8&255,yt[Ge++]^=h>>16&255,yt[Ge++]^=h>>24&255,Ge>=ba&&(Ge-=ba);}function _f(){Nb(new Date().getTime());}if(yt==null){yt=new Array,Ge=0;var Bt;if(typeof window!="undefined"&&window.crypto){if(window.crypto.getRandomValues){var wf=new Uint8Array(32);for(window.crypto.getRandomValues(wf),Bt=0;Bt<32;++Bt)yt[Ge++]=wf[Bt];}else if(navigator.appName=="Netscape"&&navigator.appVersion<"5"){var xf=window.crypto.random(32);for(Bt=0;Bt<xf.length;++Bt)yt[Ge++]=xf.charCodeAt(Bt)&255;}}for(;Ge<ba;)Bt=Math.floor(65536*Math.random()),yt[Ge++]=Bt>>>8,yt[Ge++]=Bt&255;Ge=0,_f();}function Lb(){if(fs==null){for(_f(),fs=Mb(),fs.init(yt),Ge=0;Ge<yt.length;++Ge)yt[Ge]=0;Ge=0;}return fs.next()}function Bb(h){var p;for(p=0;p<h.length;++p)h[p]=Lb();}function va(){}va.prototype.nextBytes=Bb;function ya(){this.i=0,this.j=0,this.S=new Array;}function Rb(h){var p,v,w;for(p=0;p<256;++p)this.S[p]=p;for(v=0,p=0;p<256;++p)v=v+this.S[p]+h[p%h.length]&255,w=this.S[p],this.S[p]=this.S[v],this.S[v]=w;this.i=0,this.j=0;}function Pb(){var h;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,h=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=h,this.S[h+this.S[this.i]&255]}ya.prototype.init=Rb,ya.prototype.next=Pb;function Mb(){return new ya}var ba=256;typeof Us!="undefined"?Us=vm.exports={default:r,BigInteger:r,SecureRandom:va}:this.jsbn={BigInteger:r,SecureRandom:va};}).call(Us);});var un=_($s=>{(function(){var t={not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function e(o){return r(s(o),arguments)}function i(o,a){return e.apply(null,[o].concat(a||[]))}function r(o,a){var l=1,c=o.length,u,f="",d,g,m,y,b,x,E,O;for(d=0;d<c;d++)if(typeof o[d]=="string")f+=o[d];else if(typeof o[d]=="object"){if(m=o[d],m.keys)for(u=a[l],g=0;g<m.keys.length;g++){if(u==null)throw new Error(e('[sprintf] Cannot access property "%s" of undefined value "%s"',m.keys[g],m.keys[g-1]));u=u[m.keys[g]];}else m.param_no?u=a[m.param_no]:u=a[l++];if(t.not_type.test(m.type)&&t.not_primitive.test(m.type)&&u instanceof Function&&(u=u()),t.numeric_arg.test(m.type)&&typeof u!="number"&&isNaN(u))throw new TypeError(e("[sprintf] expecting number but found %T",u));switch(t.number.test(m.type)&&(E=u>=0),m.type){case "b":u=parseInt(u,10).toString(2);break;case "c":u=String.fromCharCode(parseInt(u,10));break;case "d":case "i":u=parseInt(u,10);break;case "j":u=JSON.stringify(u,null,m.width?parseInt(m.width):0);break;case "e":u=m.precision?parseFloat(u).toExponential(m.precision):parseFloat(u).toExponential();break;case "f":u=m.precision?parseFloat(u).toFixed(m.precision):parseFloat(u);break;case "g":u=m.precision?String(Number(u.toPrecision(m.precision))):parseFloat(u);break;case "o":u=(parseInt(u,10)>>>0).toString(8);break;case "s":u=String(u),u=m.precision?u.substring(0,m.precision):u;break;case "t":u=String(!!u),u=m.precision?u.substring(0,m.precision):u;break;case "T":u=Object.prototype.toString.call(u).slice(8,-1).toLowerCase(),u=m.precision?u.substring(0,m.precision):u;break;case "u":u=parseInt(u,10)>>>0;break;case "v":u=u.valueOf(),u=m.precision?u.substring(0,m.precision):u;break;case "x":u=(parseInt(u,10)>>>0).toString(16);break;case "X":u=(parseInt(u,10)>>>0).toString(16).toUpperCase();break}t.json.test(m.type)?f+=u:(t.number.test(m.type)&&(!E||m.sign)?(O=E?"+":"-",u=u.toString().replace(t.sign,"")):O="",b=m.pad_char?m.pad_char==="0"?"0":m.pad_char.charAt(1):" ",x=m.width-(O+u).length,y=m.width&&x>0?b.repeat(x):"",f+=m.align?O+u+y:b==="0"?O+y+u:y+O+u);}return f}var n=Object.create(null);function s(o){if(n[o])return n[o];for(var a=o,l,c=[],u=0;a;){if((l=t.text.exec(a))!==null)c.push(l[0]);else if((l=t.modulo.exec(a))!==null)c.push("%");else if((l=t.placeholder.exec(a))!==null){if(l[2]){u|=1;var f=[],d=l[2],g=[];if((g=t.key.exec(d))!==null)for(f.push(g[1]);(d=d.substring(g[0].length))!=="";)if((g=t.key_access.exec(d))!==null)f.push(g[1]);else if((g=t.index_access.exec(d))!==null)f.push(g[1]);else throw new SyntaxError("[sprintf] failed to parse named argument key");else throw new SyntaxError("[sprintf] failed to parse named argument key");l[2]=f;}else u|=2;if(u===3)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");c.push({placeholder:l[0],param_no:l[1],keys:l[2],sign:l[3],pad_char:l[4],align:l[5],width:l[6],precision:l[7],type:l[8]});}else throw new SyntaxError("[sprintf] unexpected placeholder");a=a.substring(l[0].length);}return n[o]=c}typeof $s!="undefined"&&($s.sprintf=e,$s.vsprintf=i),typeof window!="undefined"&&(window.sprintf=e,window.vsprintf=i,"undefined"=="function");})();});var Hl=_(Gt=>{var lS=Gt&&Gt.__createBinding||(Object.create?function(t,e,i,r){r===void 0&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:true,get:function(){return e[i]}}),Object.defineProperty(t,r,n);}:function(t,e,i,r){r===void 0&&(r=i),t[r]=e[i];}),cS=Gt&&Gt.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:true,value:e});}:function(t,e){t.default=e;}),_m=Gt&&Gt.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var i in t)i!=="default"&&Object.prototype.hasOwnProperty.call(t,i)&&lS(e,t,i);return cS(e,t),e};Object.defineProperty(Gt,"__esModule",{value:true});Gt.Address4=void 0;var ym=_m(Dl()),Dt=_m(jl()),bm=js(),fn=$l(),Ir=un(),Vl=class t{constructor(e){this.groups=Dt.GROUPS,this.parsedAddress=[],this.parsedSubnet="",this.subnet="/32",this.subnetMask=32,this.v4=true,this.isCorrect=ym.isCorrect(Dt.BITS),this.isInSubnet=ym.isInSubnet,this.address=e;let i=Dt.RE_SUBNET_STRING.exec(e);if(i){if(this.parsedSubnet=i[0].replace("/",""),this.subnetMask=parseInt(this.parsedSubnet,10),this.subnet=`/${this.subnetMask}`,this.subnetMask<0||this.subnetMask>Dt.BITS)throw new bm.AddressError("Invalid subnet mask.");e=e.replace(Dt.RE_SUBNET_STRING,"");}this.addressMinusSuffix=e,this.parsedAddress=this.parse(e);}static isValid(e){try{return new t(e),!0}catch{return  false}}parse(e){let i=e.split(".");if(!e.match(Dt.RE_ADDRESS))throw new bm.AddressError("Invalid IPv4 address.");return i}correctForm(){return this.parsedAddress.map(e=>parseInt(e,10)).join(".")}static fromHex(e){let i=e.replace(/:/g,"").padStart(8,"0"),r=[],n;for(n=0;n<8;n+=2){let s=i.slice(n,n+2);r.push(parseInt(s,16));}return new t(r.join("."))}static fromInteger(e){return t.fromHex(e.toString(16))}static fromArpa(e){let r=e.replace(/(\.in-addr\.arpa)?\.$/,"").split(".").reverse().join(".");return new t(r)}toHex(){return this.parsedAddress.map(e=>(0, Ir.sprintf)("%02x",parseInt(e,10))).join(":")}toArray(){return this.parsedAddress.map(e=>parseInt(e,10))}toGroup6(){let e=[],i;for(i=0;i<Dt.GROUPS;i+=2){let r=(0, Ir.sprintf)("%02x%02x",parseInt(this.parsedAddress[i],10),parseInt(this.parsedAddress[i+1],10));e.push((0, Ir.sprintf)("%x",parseInt(r,16)));}return e.join(":")}bigInteger(){return new fn.BigInteger(this.parsedAddress.map(e=>(0, Ir.sprintf)("%02x",parseInt(e,10))).join(""),16)}_startAddress(){return new fn.BigInteger(this.mask()+"0".repeat(Dt.BITS-this.subnetMask),2)}startAddress(){return t.fromBigInteger(this._startAddress())}startAddressExclusive(){let e=new fn.BigInteger("1");return t.fromBigInteger(this._startAddress().add(e))}_endAddress(){return new fn.BigInteger(this.mask()+"1".repeat(Dt.BITS-this.subnetMask),2)}endAddress(){return t.fromBigInteger(this._endAddress())}endAddressExclusive(){let e=new fn.BigInteger("1");return t.fromBigInteger(this._endAddress().subtract(e))}static fromBigInteger(e){return t.fromInteger(parseInt(e.toString(),10))}mask(e){return e===void 0&&(e=this.subnetMask),this.getBitsBase2(0,e)}getBitsBase2(e,i){return this.binaryZeroPad().slice(e,i)}reverseForm(e){e||(e={});let i=this.correctForm().split(".").reverse().join(".");return e.omitSuffix?i:(0, Ir.sprintf)("%s.in-addr.arpa.",i)}isMulticast(){return this.isInSubnet(new t("224.0.0.0/4"))}binaryZeroPad(){return this.bigInteger().toString(2).padStart(Dt.BITS,"0")}groupForV6(){let e=this.parsedAddress;return this.address.replace(Dt.RE_ADDRESS,(0, Ir.sprintf)('<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>',e.slice(0,2).join("."),e.slice(2,4).join(".")))}};Gt.Address4=Vl;});var Gl=_(Fe=>{Object.defineProperty(Fe,"__esModule",{value:true});Fe.RE_URL_WITH_PORT=Fe.RE_URL=Fe.RE_ZONE_STRING=Fe.RE_SUBNET_STRING=Fe.RE_BAD_ADDRESS=Fe.RE_BAD_CHARACTERS=Fe.TYPES=Fe.SCOPES=Fe.GROUPS=Fe.BITS=void 0;Fe.BITS=128;Fe.GROUPS=8;Fe.SCOPES={0:"Reserved",1:"Interface local",2:"Link local",4:"Admin local",5:"Site local",8:"Organization local",14:"Global",15:"Reserved"};Fe.TYPES={"ff01::1/128":"Multicast (All nodes on this interface)","ff01::2/128":"Multicast (All routers on this interface)","ff02::1/128":"Multicast (All nodes on this link)","ff02::2/128":"Multicast (All routers on this link)","ff05::2/128":"Multicast (All routers in this site)","ff02::5/128":"Multicast (OSPFv3 AllSPF routers)","ff02::6/128":"Multicast (OSPFv3 AllDR routers)","ff02::9/128":"Multicast (RIP routers)","ff02::a/128":"Multicast (EIGRP routers)","ff02::d/128":"Multicast (PIM routers)","ff02::16/128":"Multicast (MLDv2 reports)","ff01::fb/128":"Multicast (mDNSv6)","ff02::fb/128":"Multicast (mDNSv6)","ff05::fb/128":"Multicast (mDNSv6)","ff02::1:2/128":"Multicast (All DHCP servers and relay agents on this link)","ff05::1:2/128":"Multicast (All DHCP servers and relay agents in this site)","ff02::1:3/128":"Multicast (All DHCP servers on this link)","ff05::1:3/128":"Multicast (All DHCP servers in this site)","::/128":"Unspecified","::1/128":"Loopback","ff00::/8":"Multicast","fe80::/10":"Link-local unicast"};Fe.RE_BAD_CHARACTERS=/([^0-9a-f:/%])/gi;Fe.RE_BAD_ADDRESS=/([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi;Fe.RE_SUBNET_STRING=/\/\d{1,3}(?=%|$)/;Fe.RE_ZONE_STRING=/%.*$/;Fe.RE_URL=new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/);Fe.RE_URL_WITH_PORT=new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);});var Yl=_(Yt=>{Object.defineProperty(Yt,"__esModule",{value:true});Yt.simpleGroup=Yt.spanLeadingZeroes=Yt.spanAll=Yt.spanAllZeroes=void 0;var wm=un();function xm(t){return t.replace(/(0+)/g,'<span class="zero">$1</span>')}Yt.spanAllZeroes=xm;function uS(t,e=0){return t.split("").map((r,n)=>(0, wm.sprintf)('<span class="digit value-%s position-%d">%s</span>',r,n+e,xm(r))).join("")}Yt.spanAll=uS;function Sm(t){return t.replace(/^(0+)/,'<span class="zero">$1</span>')}function fS(t){return t.split(":").map(i=>Sm(i)).join(":")}Yt.spanLeadingZeroes=fS;function hS(t,e=0){return t.split(":").map((r,n)=>/group-v4/.test(r)?r:(0, wm.sprintf)('<span class="hover-group group-%d">%s</span>',n+e,Sm(r)))}Yt.simpleGroup=hS;});var Em=_(ze=>{var pS=ze&&ze.__createBinding||(Object.create?function(t,e,i,r){r===void 0&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:true,get:function(){return e[i]}}),Object.defineProperty(t,r,n);}:function(t,e,i,r){r===void 0&&(r=i),t[r]=e[i];}),dS=ze&&ze.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:true,value:e});}:function(t,e){t.default=e;}),mS=ze&&ze.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var i in t)i!=="default"&&Object.prototype.hasOwnProperty.call(t,i)&&pS(e,t,i);return dS(e,t),e};Object.defineProperty(ze,"__esModule",{value:true});ze.possibleElisions=ze.simpleRegularExpression=ze.ADDRESS_BOUNDARY=ze.padGroup=ze.groupPossibilities=void 0;var gS=mS(Gl()),Nr=un();function Hs(t){return (0, Nr.sprintf)("(%s)",t.join("|"))}ze.groupPossibilities=Hs;function Vs(t){return t.length<4?(0, Nr.sprintf)("0{0,%d}%s",4-t.length,t):t}ze.padGroup=Vs;ze.ADDRESS_BOUNDARY="[^A-Fa-f0-9:]";function vS(t){let e=[];t.forEach((r,n)=>{parseInt(r,16)===0&&e.push(n);});let i=e.map(r=>t.map((n,s)=>{if(s===r){let o=s===0||s===gS.GROUPS-1?":":"";return Hs([Vs(n),o])}return Vs(n)}).join(":"));return i.push(t.map(Vs).join(":")),Hs(i)}ze.simpleRegularExpression=vS;function yS(t,e,i){let r=e?"":":",n=i?"":":",s=[];!e&&!i&&s.push("::"),e&&i&&s.push(""),(i&&!e||!i&&e)&&s.push(":"),s.push((0, Nr.sprintf)("%s(:0{1,4}){1,%d}",r,t-1)),s.push((0, Nr.sprintf)("(0{1,4}:){1,%d}%s",t-1,n)),s.push((0, Nr.sprintf)("(0{1,4}:){%d}0{1,4}",t-1));for(let o=1;o<t-1;o++)for(let a=1;a<t-o;a++)s.push((0, Nr.sprintf)("(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}",a,t-a-o-1));return Hs(s)}ze.possibleElisions=yS;});var Tm=_(Wt=>{var bS=Wt&&Wt.__createBinding||(Object.create?function(t,e,i,r){r===void 0&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:true,get:function(){return e[i]}}),Object.defineProperty(t,r,n);}:function(t,e,i,r){r===void 0&&(r=i),t[r]=e[i];}),_S=Wt&&Wt.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:true,value:e});}:function(t,e){t.default=e;}),Ys=Wt&&Wt.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var i in t)i!=="default"&&Object.prototype.hasOwnProperty.call(t,i)&&bS(e,t,i);return _S(e,t),e};Object.defineProperty(Wt,"__esModule",{value:true});Wt.Address6=void 0;var km=Ys(Dl()),Wl=Ys(jl()),Le=Ys(Gl()),Kl=Ys(Yl()),Yi=Hl(),Wi=Em(),ni=js(),lt=$l(),ct=un();function Gs(t){if(!t)throw new Error("Assertion failed.")}function wS(t){let e=/(\d+)(\d{3})/;for(;e.test(t);)t=t.replace(e,"$1,$2");return t}function xS(t){return t=t.replace(/^(0{1,})([1-9]+)$/,'<span class="parse-error">$1</span>$2'),t=t.replace(/^(0{1,})(0)$/,'<span class="parse-error">$1</span>$2'),t}function SS(t,e){let i=[],r=[],n;for(n=0;n<t.length;n++)n<e[0]?i.push(t[n]):n>e[1]&&r.push(t[n]);return i.concat(["compact"]).concat(r)}function Om(t){return (0, ct.sprintf)("%04x",parseInt(t,16))}function Cm(t){return t&255}var zl=class t{constructor(e,i){this.addressMinusSuffix="",this.parsedSubnet="",this.subnet="/128",this.subnetMask=128,this.v4=false,this.zone="",this.isInSubnet=km.isInSubnet,this.isCorrect=km.isCorrect(Le.BITS),i===void 0?this.groups=Le.GROUPS:this.groups=i,this.address=e;let r=Le.RE_SUBNET_STRING.exec(e);if(r){if(this.parsedSubnet=r[0].replace("/",""),this.subnetMask=parseInt(this.parsedSubnet,10),this.subnet=`/${this.subnetMask}`,Number.isNaN(this.subnetMask)||this.subnetMask<0||this.subnetMask>Le.BITS)throw new ni.AddressError("Invalid subnet mask.");e=e.replace(Le.RE_SUBNET_STRING,"");}else if(/\//.test(e))throw new ni.AddressError("Invalid subnet mask.");let n=Le.RE_ZONE_STRING.exec(e);n&&(this.zone=n[0],e=e.replace(Le.RE_ZONE_STRING,"")),this.addressMinusSuffix=e,this.parsedAddress=this.parse(this.addressMinusSuffix);}static isValid(e){try{return new t(e),!0}catch{return  false}}static fromBigInteger(e){let i=e.toString(16).padStart(32,"0"),r=[],n;for(n=0;n<Le.GROUPS;n++)r.push(i.slice(n*4,(n+1)*4));return new t(r.join(":"))}static fromURL(e){let i,r=null,n;if(e.indexOf("[")!==-1&&e.indexOf("]:")!==-1){if(n=Le.RE_URL_WITH_PORT.exec(e),n===null)return {error:"failed to parse address with port",address:null,port:null};i=n[1],r=n[2];}else if(e.indexOf("/")!==-1){if(e=e.replace(/^[a-z0-9]+:\/\//,""),n=Le.RE_URL.exec(e),n===null)return {error:"failed to parse address from URL",address:null,port:null};i=n[1];}else i=e;return r?(r=parseInt(r,10),(r<0||r>65536)&&(r=null)):r=null,{address:new t(i),port:r}}static fromAddress4(e){let i=new Yi.Address4(e),r=Le.BITS-(Wl.BITS-i.subnetMask);return new t(`::ffff:${i.correctForm()}/${r}`)}static fromArpa(e){let i=e.replace(/(\.ip6\.arpa)?\.$/,""),r=7;if(i.length!==63)throw new ni.AddressError("Invalid 'ip6.arpa' form.");let n=i.split(".").reverse();for(let s=r;s>0;s--){let o=s*4;n.splice(o,0,":");}return i=n.join(""),new t(i)}microsoftTranscription(){return (0, ct.sprintf)("%s.ipv6-literal.net",this.correctForm().replace(/:/g,"-"))}mask(e=this.subnetMask){return this.getBitsBase2(0,e)}possibleSubnets(e=128){let i=Le.BITS-this.subnetMask,r=Math.abs(e-Le.BITS),n=i-r;return n<0?"0":wS(new lt.BigInteger("2",10).pow(n).toString(10))}_startAddress(){return new lt.BigInteger(this.mask()+"0".repeat(Le.BITS-this.subnetMask),2)}startAddress(){return t.fromBigInteger(this._startAddress())}startAddressExclusive(){let e=new lt.BigInteger("1");return t.fromBigInteger(this._startAddress().add(e))}_endAddress(){return new lt.BigInteger(this.mask()+"1".repeat(Le.BITS-this.subnetMask),2)}endAddress(){return t.fromBigInteger(this._endAddress())}endAddressExclusive(){let e=new lt.BigInteger("1");return t.fromBigInteger(this._endAddress().subtract(e))}getScope(){let e=Le.SCOPES[this.getBits(12,16).intValue()];return this.getType()==="Global unicast"&&e!=="Link local"&&(e="Global"),e||"Unknown"}getType(){for(let e of Object.keys(Le.TYPES))if(this.isInSubnet(new t(e)))return Le.TYPES[e];return "Global unicast"}getBits(e,i){return new lt.BigInteger(this.getBitsBase2(e,i),2)}getBitsBase2(e,i){return this.binaryZeroPad().slice(e,i)}getBitsBase16(e,i){let r=i-e;if(r%4!==0)throw new Error("Length of bits to retrieve must be divisible by four");return this.getBits(e,i).toString(16).padStart(r/4,"0")}getBitsPastSubnet(){return this.getBitsBase2(this.subnetMask,Le.BITS)}reverseForm(e){e||(e={});let i=Math.floor(this.subnetMask/4),r=this.canonicalForm().replace(/:/g,"").split("").slice(0,i).reverse().join(".");return i>0?e.omitSuffix?r:(0, ct.sprintf)("%s.ip6.arpa.",r):e.omitSuffix?"":"ip6.arpa."}correctForm(){let e,i=[],r=0,n=[];for(e=0;e<this.parsedAddress.length;e++){let a=parseInt(this.parsedAddress[e],16);a===0&&r++,a!==0&&r>0&&(r>1&&n.push([e-r,e-1]),r=0);}r>1&&n.push([this.parsedAddress.length-r,this.parsedAddress.length-1]);let s=n.map(a=>a[1]-a[0]+1);if(n.length>0){let a=s.indexOf(Math.max(...s));i=SS(this.parsedAddress,n[a]);}else i=this.parsedAddress;for(e=0;e<i.length;e++)i[e]!=="compact"&&(i[e]=parseInt(i[e],16).toString(16));let o=i.join(":");return o=o.replace(/^compact$/,"::"),o=o.replace(/^compact|compact$/,":"),o=o.replace(/compact/,""),o}binaryZeroPad(){return this.bigInteger().toString(2).padStart(Le.BITS,"0")}parse4in6(e){let i=e.split(":"),n=i.slice(-1)[0].match(Wl.RE_ADDRESS);if(n){this.parsedAddress4=n[0],this.address4=new Yi.Address4(this.parsedAddress4);for(let s=0;s<this.address4.groups;s++)if(/^0[0-9]+/.test(this.address4.parsedAddress[s]))throw new ni.AddressError("IPv4 addresses can't have leading zeroes.",e.replace(Wl.RE_ADDRESS,this.address4.parsedAddress.map(xS).join(".")));this.v4=true,i[i.length-1]=this.address4.toGroup6(),e=i.join(":");}return e}parse(e){e=this.parse4in6(e);let i=e.match(Le.RE_BAD_CHARACTERS);if(i)throw new ni.AddressError((0, ct.sprintf)("Bad character%s detected in address: %s",i.length>1?"s":"",i.join("")),e.replace(Le.RE_BAD_CHARACTERS,'<span class="parse-error">$1</span>'));let r=e.match(Le.RE_BAD_ADDRESS);if(r)throw new ni.AddressError((0, ct.sprintf)("Address failed regex: %s",r.join("")),e.replace(Le.RE_BAD_ADDRESS,'<span class="parse-error">$1</span>'));let n=[],s=e.split("::");if(s.length===2){let o=s[0].split(":"),a=s[1].split(":");o.length===1&&o[0]===""&&(o=[]),a.length===1&&a[0]===""&&(a=[]);let l=this.groups-(o.length+a.length);if(!l)throw new ni.AddressError("Error parsing groups");this.elidedGroups=l,this.elisionBegin=o.length,this.elisionEnd=o.length+this.elidedGroups,n=n.concat(o);for(let c=0;c<l;c++)n.push("0");n=n.concat(a);}else if(s.length===1)n=e.split(":"),this.elidedGroups=0;else throw new ni.AddressError("Too many :: groups found");if(n=n.map(o=>(0, ct.sprintf)("%x",parseInt(o,16))),n.length!==this.groups)throw new ni.AddressError("Incorrect number of groups found");return n}canonicalForm(){return this.parsedAddress.map(Om).join(":")}decimal(){return this.parsedAddress.map(e=>(0, ct.sprintf)("%05d",parseInt(e,16))).join(":")}bigInteger(){return new lt.BigInteger(this.parsedAddress.map(Om).join(""),16)}to4(){let e=this.binaryZeroPad().split("");return Yi.Address4.fromHex(new lt.BigInteger(e.slice(96,128).join(""),2).toString(16))}to4in6(){let e=this.to4(),r=new t(this.parsedAddress.slice(0,6).join(":"),6).correctForm(),n="";return /:$/.test(r)||(n=":"),r+n+e.address}inspectTeredo(){let e=this.getBitsBase16(0,32),i=this.getBits(80,96).xor(new lt.BigInteger("ffff",16)).toString(),r=Yi.Address4.fromHex(this.getBitsBase16(32,64)),n=Yi.Address4.fromHex(this.getBits(96,128).xor(new lt.BigInteger("ffffffff",16)).toString(16)),s=this.getBits(64,80),o=this.getBitsBase2(64,80),a=s.testBit(15),l=s.testBit(14),c=s.testBit(8),u=s.testBit(9),f=new lt.BigInteger(o.slice(2,6)+o.slice(8,16),2).toString(10);return {prefix:(0, ct.sprintf)("%s:%s",e.slice(0,4),e.slice(4,8)),server4:r.address,client4:n.address,flags:o,coneNat:a,microsoft:{reserved:l,universalLocal:u,groupIndividual:c,nonce:f},udpPort:i}}inspect6to4(){let e=this.getBitsBase16(0,16),i=Yi.Address4.fromHex(this.getBitsBase16(16,48));return {prefix:(0, ct.sprintf)("%s",e.slice(0,4)),gateway:i.address}}to6to4(){if(!this.is4())return null;let e=["2002",this.getBitsBase16(96,112),this.getBitsBase16(112,128),"","/16"].join(":");return new t(e)}toByteArray(){let e=this.bigInteger().toByteArray();return e.length===17&&e[0]===0?e.slice(1):e}toUnsignedByteArray(){return this.toByteArray().map(Cm)}static fromByteArray(e){return this.fromUnsignedByteArray(e.map(Cm))}static fromUnsignedByteArray(e){let i=new lt.BigInteger("256",10),r=new lt.BigInteger("0",10),n=new lt.BigInteger("1",10);for(let s=e.length-1;s>=0;s--)r=r.add(n.multiply(new lt.BigInteger(e[s].toString(10),10))),n=n.multiply(i);return t.fromBigInteger(r)}isCanonical(){return this.addressMinusSuffix===this.canonicalForm()}isLinkLocal(){return this.getBitsBase2(0,64)==="1111111010000000000000000000000000000000000000000000000000000000"}isMulticast(){return this.getType()==="Multicast"}is4(){return this.v4}isTeredo(){return this.isInSubnet(new t("2001::/32"))}is6to4(){return this.isInSubnet(new t("2002::/16"))}isLoopback(){return this.getType()==="Loopback"}href(e){return e===void 0?e="":e=(0, ct.sprintf)(":%s",e),(0, ct.sprintf)("http://[%s]%s/",this.correctForm(),e)}link(e){e||(e={}),e.className===void 0&&(e.className=""),e.prefix===void 0&&(e.prefix="/#address="),e.v4===void 0&&(e.v4=false);let i=this.correctForm;return e.v4&&(i=this.to4in6),e.className?(0, ct.sprintf)('<a href="%1$s%2$s" class="%3$s">%2$s</a>',e.prefix,i.call(this),e.className):(0, ct.sprintf)('<a href="%1$s%2$s">%2$s</a>',e.prefix,i.call(this))}group(){if(this.elidedGroups===0)return Kl.simpleGroup(this.address).join(":");Gs(typeof this.elidedGroups=="number"),Gs(typeof this.elisionBegin=="number");let e=[],[i,r]=this.address.split("::");i.length?e.push(...Kl.simpleGroup(i)):e.push("");let n=["hover-group"];for(let s=this.elisionBegin;s<this.elisionBegin+this.elidedGroups;s++)n.push((0, ct.sprintf)("group-%d",s));return e.push((0, ct.sprintf)('<span class="%s"></span>',n.join(" "))),r.length?e.push(...Kl.simpleGroup(r,this.elisionEnd)):e.push(""),this.is4()&&(Gs(this.address4 instanceof Yi.Address4),e.pop(),e.push(this.address4.groupForV6())),e.join(":")}regularExpressionString(e=false){let i=[],r=new t(this.correctForm());if(r.elidedGroups===0)i.push((0, Wi.simpleRegularExpression)(r.parsedAddress));else if(r.elidedGroups===Le.GROUPS)i.push((0, Wi.possibleElisions)(Le.GROUPS));else {let n=r.address.split("::");n[0].length&&i.push((0, Wi.simpleRegularExpression)(n[0].split(":"))),Gs(typeof r.elidedGroups=="number"),i.push((0, Wi.possibleElisions)(r.elidedGroups,n[0].length!==0,n[1].length!==0)),n[1].length&&i.push((0, Wi.simpleRegularExpression)(n[1].split(":"))),i=[i.join(":")];}return e||(i=["(?=^|",Wi.ADDRESS_BOUNDARY,"|[^\\w\\:])(",...i,")(?=[^\\w\\:]|",Wi.ADDRESS_BOUNDARY,"|$)"]),i.join("")}regularExpression(e=false){return new RegExp(this.regularExpressionString(e),"i")}};Wt.Address6=zl;});var Jl=_(rt=>{var ES=rt&&rt.__createBinding||(Object.create?function(t,e,i,r){r===void 0&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:true,get:function(){return e[i]}}),Object.defineProperty(t,r,n);}:function(t,e,i,r){r===void 0&&(r=i),t[r]=e[i];}),kS=rt&&rt.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:true,value:e});}:function(t,e){t.default=e;}),OS=rt&&rt.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var i in t)i!=="default"&&Object.prototype.hasOwnProperty.call(t,i)&&ES(e,t,i);return kS(e,t),e};Object.defineProperty(rt,"__esModule",{value:true});rt.v6=rt.AddressError=rt.Address6=rt.Address4=void 0;var CS=Hl();Object.defineProperty(rt,"Address4",{enumerable:true,get:function(){return CS.Address4}});var TS=Tm();Object.defineProperty(rt,"Address6",{enumerable:true,get:function(){return TS.Address6}});var AS=js();Object.defineProperty(rt,"AddressError",{enumerable:true,get:function(){return AS.AddressError}});var IS=OS(Yl());rt.v6={helpers:IS};});var Rm=_(At=>{Object.defineProperty(At,"__esModule",{value:true});At.ipToBuffer=At.int32ToIpv4=At.ipv4ToInt32=At.validateSocksClientChainOptions=At.validateSocksClientOptions=void 0;var ut=ql(),Je=Ml(),NS=require$$12,Zl=Jl(),Am=require$$8;function LS(t,e=["connect","bind","associate"]){if(!Je.SocksCommand[t.command])throw new ut.SocksClientError(Je.ERRORS.InvalidSocksCommand,t);if(e.indexOf(t.command)===-1)throw new ut.SocksClientError(Je.ERRORS.InvalidSocksCommandForOperation,t);if(!Nm(t.destination))throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsDestination,t);if(!Lm(t.proxy))throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsProxy,t);if(Im(t.proxy,t),t.timeout&&!Bm(t.timeout))throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsTimeout,t);if(t.existing_socket&&!(t.existing_socket instanceof NS.Duplex))throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsExistingSocket,t)}At.validateSocksClientOptions=LS;function BS(t){if(t.command!=="connect")throw new ut.SocksClientError(Je.ERRORS.InvalidSocksCommandChain,t);if(!Nm(t.destination))throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsDestination,t);if(!(t.proxies&&Array.isArray(t.proxies)&&t.proxies.length>=2))throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsProxiesLength,t);if(t.proxies.forEach(e=>{if(!Lm(e))throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsProxy,t);Im(e,t);}),t.timeout&&!Bm(t.timeout))throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsTimeout,t)}At.validateSocksClientChainOptions=BS;function Im(t,e){if(t.custom_auth_method!==void 0){if(t.custom_auth_method<Je.SOCKS5_CUSTOM_AUTH_START||t.custom_auth_method>Je.SOCKS5_CUSTOM_AUTH_END)throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsCustomAuthRange,e);if(t.custom_auth_request_handler===void 0||typeof t.custom_auth_request_handler!="function")throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,e);if(t.custom_auth_response_size===void 0)throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,e);if(t.custom_auth_response_handler===void 0||typeof t.custom_auth_response_handler!="function")throw new ut.SocksClientError(Je.ERRORS.InvalidSocksClientOptionsCustomAuthOptions,e)}}function Nm(t){return t&&typeof t.host=="string"&&typeof t.port=="number"&&t.port>=0&&t.port<=65535}function Lm(t){return t&&(typeof t.host=="string"||typeof t.ipaddress=="string")&&typeof t.port=="number"&&t.port>=0&&t.port<=65535&&(t.type===4||t.type===5)}function Bm(t){return typeof t=="number"&&t>0}function RS(t){return new Zl.Address4(t).toArray().reduce((i,r)=>(i<<8)+r,0)}At.ipv4ToInt32=RS;function PS(t){let e=t>>>24&255,i=t>>>16&255,r=t>>>8&255,n=t&255;return [e,i,r,n].join(".")}At.int32ToIpv4=PS;function MS(t){if(Am.isIPv4(t)){let e=new Zl.Address4(t);return Buffer.from(e.toArray())}else if(Am.isIPv6(t)){let e=new Zl.Address6(t);return Buffer.from(e.canonicalForm().split(":").map(i=>i.padStart(4,"0")).join(""),"hex")}else throw new Error("Invalid IP address format")}At.ipToBuffer=MS;});var Pm=_(Ws=>{Object.defineProperty(Ws,"__esModule",{value:true});Ws.ReceiveBuffer=void 0;var Ql=class{constructor(e=4096){this.buffer=Buffer.allocUnsafe(e),this.offset=0,this.originalSize=e;}get length(){return this.offset}append(e){if(!Buffer.isBuffer(e))throw new Error("Attempted to append a non-buffer instance to ReceiveBuffer.");if(this.offset+e.length>=this.buffer.length){let i=this.buffer;this.buffer=Buffer.allocUnsafe(Math.max(this.buffer.length+this.originalSize,this.buffer.length+e.length)),i.copy(this.buffer);}return e.copy(this.buffer,this.offset),this.offset+=e.length}peek(e){if(e>this.offset)throw new Error("Attempted to read beyond the bounds of the managed internal data.");return this.buffer.slice(0,e)}get(e){if(e>this.offset)throw new Error("Attempted to read beyond the bounds of the managed internal data.");let i=Buffer.allocUnsafe(e);return this.buffer.slice(0,e).copy(i),this.buffer.copyWithin(0,e,e+this.offset-e),this.offset-=e,i}};Ws.ReceiveBuffer=Ql;});var Mm=_(gi=>{var Lr=gi&&gi.__awaiter||function(t,e,i,r){function n(s){return s instanceof i?s:new i(function(o){o(s);})}return new(i||(i=Promise))(function(s,o){function a(u){try{c(r.next(u));}catch(f){o(f);}}function l(u){try{c(r.throw(u));}catch(f){o(f);}}function c(u){u.done?s(u.value):n(u.value).then(a,l);}c((r=r.apply(t,e||[])).next());})};Object.defineProperty(gi,"__esModule",{value:true});gi.SocksClientError=gi.SocksClient=void 0;var FS=require$$0$5,Br=require$$8,dt=um(),F=Ml(),xt=Rm(),qS=Pm(),ec=ql();Object.defineProperty(gi,"SocksClientError",{enumerable:true,get:function(){return ec.SocksClientError}});var Xl=Jl(),tc=class t extends FS.EventEmitter{constructor(e){super(),this.options=Object.assign({},e),(0, xt.validateSocksClientOptions)(e),this.setState(F.SocksClientState.Created);}static createConnection(e,i){return new Promise((r,n)=>{try{(0,xt.validateSocksClientOptions)(e,["connect"]);}catch(o){return typeof i=="function"?(i(o),r(o)):n(o)}let s=new t(e);s.connect(e.existing_socket),s.once("established",o=>{s.removeAllListeners(),typeof i=="function"&&i(null,o),r(o);}),s.once("error",o=>{s.removeAllListeners(),typeof i=="function"?(i(o),r(o)):n(o);});})}static createConnectionChain(e,i){return new Promise((r,n)=>Lr(this,void 0,void 0,function*(){try{(0,xt.validateSocksClientChainOptions)(e);}catch(s){return typeof i=="function"?(i(s),r(s)):n(s)}e.randomizeChain&&(0, ec.shuffleArray)(e.proxies);try{let s;for(let o=0;o<e.proxies.length;o++){let a=e.proxies[o],l=o===e.proxies.length-1?e.destination:{host:e.proxies[o+1].host||e.proxies[o+1].ipaddress,port:e.proxies[o+1].port},c=yield t.createConnection({command:"connect",proxy:a,destination:l,existing_socket:s});s=s||c.socket;}typeof i=="function"?(i(null,{socket:s}),r({socket:s})):r({socket:s});}catch(s){typeof i=="function"?(i(s),r(s)):n(s);}}))}static createUDPFrame(e){let i=new dt.SmartBuffer;return i.writeUInt16BE(0),i.writeUInt8(e.frameNumber||0),Br.isIPv4(e.remoteHost.host)?(i.writeUInt8(F.Socks5HostType.IPv4),i.writeUInt32BE((0, xt.ipv4ToInt32)(e.remoteHost.host))):Br.isIPv6(e.remoteHost.host)?(i.writeUInt8(F.Socks5HostType.IPv6),i.writeBuffer((0, xt.ipToBuffer)(e.remoteHost.host))):(i.writeUInt8(F.Socks5HostType.Hostname),i.writeUInt8(Buffer.byteLength(e.remoteHost.host)),i.writeString(e.remoteHost.host)),i.writeUInt16BE(e.remoteHost.port),i.writeBuffer(e.data),i.toBuffer()}static parseUDPFrame(e){let i=dt.SmartBuffer.fromBuffer(e);i.readOffset=2;let r=i.readUInt8(),n=i.readUInt8(),s;n===F.Socks5HostType.IPv4?s=(0, xt.int32ToIpv4)(i.readUInt32BE()):n===F.Socks5HostType.IPv6?s=Xl.Address6.fromByteArray(Array.from(i.readBuffer(16))).canonicalForm():s=i.readString(i.readUInt8());let o=i.readUInt16BE();return {frameNumber:r,remoteHost:{host:s,port:o},data:i.readBuffer()}}setState(e){this.state!==F.SocksClientState.Error&&(this.state=e);}connect(e){this.onDataReceived=r=>this.onDataReceivedHandler(r),this.onClose=()=>this.onCloseHandler(),this.onError=r=>this.onErrorHandler(r),this.onConnect=()=>this.onConnectHandler();let i=setTimeout(()=>this.onEstablishedTimeout(),this.options.timeout||F.DEFAULT_TIMEOUT);i.unref&&typeof i.unref=="function"&&i.unref(),e?this.socket=e:this.socket=new Br.Socket,this.socket.once("close",this.onClose),this.socket.once("error",this.onError),this.socket.once("connect",this.onConnect),this.socket.on("data",this.onDataReceived),this.setState(F.SocksClientState.Connecting),this.receiveBuffer=new qS.ReceiveBuffer,e?this.socket.emit("connect"):(this.socket.connect(this.getSocketOptions()),this.options.set_tcp_nodelay!==void 0&&this.options.set_tcp_nodelay!==null&&this.socket.setNoDelay(!!this.options.set_tcp_nodelay)),this.prependOnceListener("established",r=>{setImmediate(()=>{if(this.receiveBuffer.length>0){let n=this.receiveBuffer.get(this.receiveBuffer.length);r.socket.emit("data",n);}r.socket.resume();});});}getSocketOptions(){return Object.assign(Object.assign({},this.options.socket_options),{host:this.options.proxy.host||this.options.proxy.ipaddress,port:this.options.proxy.port})}onEstablishedTimeout(){this.state!==F.SocksClientState.Established&&this.state!==F.SocksClientState.BoundWaitingForConnection&&this.closeSocket(F.ERRORS.ProxyConnectionTimedOut);}onConnectHandler(){this.setState(F.SocksClientState.Connected),this.options.proxy.type===4?this.sendSocks4InitialHandshake():this.sendSocks5InitialHandshake(),this.setState(F.SocksClientState.SentInitialHandshake);}onDataReceivedHandler(e){this.receiveBuffer.append(e),this.processData();}processData(){for(;this.state!==F.SocksClientState.Established&&this.state!==F.SocksClientState.Error&&this.receiveBuffer.length>=this.nextRequiredPacketBufferSize;)if(this.state===F.SocksClientState.SentInitialHandshake)this.options.proxy.type===4?this.handleSocks4FinalHandshakeResponse():this.handleInitialSocks5HandshakeResponse();else if(this.state===F.SocksClientState.SentAuthentication)this.handleInitialSocks5AuthenticationHandshakeResponse();else if(this.state===F.SocksClientState.SentFinalHandshake)this.handleSocks5FinalHandshakeResponse();else if(this.state===F.SocksClientState.BoundWaitingForConnection)this.options.proxy.type===4?this.handleSocks4IncomingConnectionResponse():this.handleSocks5IncomingConnectionResponse();else {this.closeSocket(F.ERRORS.InternalError);break}}onCloseHandler(){this.closeSocket(F.ERRORS.SocketClosed);}onErrorHandler(e){this.closeSocket(e.message);}removeInternalSocketHandlers(){this.socket.pause(),this.socket.removeListener("data",this.onDataReceived),this.socket.removeListener("close",this.onClose),this.socket.removeListener("error",this.onError),this.socket.removeListener("connect",this.onConnect);}closeSocket(e){this.state!==F.SocksClientState.Error&&(this.setState(F.SocksClientState.Error),this.socket.destroy(),this.removeInternalSocketHandlers(),this.emit("error",new ec.SocksClientError(e,this.options)));}sendSocks4InitialHandshake(){let e=this.options.proxy.userId||"",i=new dt.SmartBuffer;i.writeUInt8(4),i.writeUInt8(F.SocksCommand[this.options.command]),i.writeUInt16BE(this.options.destination.port),Br.isIPv4(this.options.destination.host)?(i.writeBuffer((0, xt.ipToBuffer)(this.options.destination.host)),i.writeStringNT(e)):(i.writeUInt8(0),i.writeUInt8(0),i.writeUInt8(0),i.writeUInt8(1),i.writeStringNT(e),i.writeStringNT(this.options.destination.host)),this.nextRequiredPacketBufferSize=F.SOCKS_INCOMING_PACKET_SIZES.Socks4Response,this.socket.write(i.toBuffer());}handleSocks4FinalHandshakeResponse(){let e=this.receiveBuffer.get(8);if(e[1]!==F.Socks4Response.Granted)this.closeSocket(`${F.ERRORS.Socks4ProxyRejectedConnection} - (${F.Socks4Response[e[1]]})`);else if(F.SocksCommand[this.options.command]===F.SocksCommand.bind){let i=dt.SmartBuffer.fromBuffer(e);i.readOffset=2;let r={port:i.readUInt16BE(),host:(0, xt.int32ToIpv4)(i.readUInt32BE())};r.host==="0.0.0.0"&&(r.host=this.options.proxy.ipaddress),this.setState(F.SocksClientState.BoundWaitingForConnection),this.emit("bound",{remoteHost:r,socket:this.socket});}else this.setState(F.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{socket:this.socket});}handleSocks4IncomingConnectionResponse(){let e=this.receiveBuffer.get(8);if(e[1]!==F.Socks4Response.Granted)this.closeSocket(`${F.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${F.Socks4Response[e[1]]})`);else {let i=dt.SmartBuffer.fromBuffer(e);i.readOffset=2;let r={port:i.readUInt16BE(),host:(0, xt.int32ToIpv4)(i.readUInt32BE())};this.setState(F.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{remoteHost:r,socket:this.socket});}}sendSocks5InitialHandshake(){let e=new dt.SmartBuffer,i=[F.Socks5Auth.NoAuth];(this.options.proxy.userId||this.options.proxy.password)&&i.push(F.Socks5Auth.UserPass),this.options.proxy.custom_auth_method!==void 0&&i.push(this.options.proxy.custom_auth_method),e.writeUInt8(5),e.writeUInt8(i.length);for(let r of i)e.writeUInt8(r);this.nextRequiredPacketBufferSize=F.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse,this.socket.write(e.toBuffer()),this.setState(F.SocksClientState.SentInitialHandshake);}handleInitialSocks5HandshakeResponse(){let e=this.receiveBuffer.get(2);e[0]!==5?this.closeSocket(F.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion):e[1]===F.SOCKS5_NO_ACCEPTABLE_AUTH?this.closeSocket(F.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType):e[1]===F.Socks5Auth.NoAuth?(this.socks5ChosenAuthType=F.Socks5Auth.NoAuth,this.sendSocks5CommandRequest()):e[1]===F.Socks5Auth.UserPass?(this.socks5ChosenAuthType=F.Socks5Auth.UserPass,this.sendSocks5UserPassAuthentication()):e[1]===this.options.proxy.custom_auth_method?(this.socks5ChosenAuthType=this.options.proxy.custom_auth_method,this.sendSocks5CustomAuthentication()):this.closeSocket(F.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType);}sendSocks5UserPassAuthentication(){let e=this.options.proxy.userId||"",i=this.options.proxy.password||"",r=new dt.SmartBuffer;r.writeUInt8(1),r.writeUInt8(Buffer.byteLength(e)),r.writeString(e),r.writeUInt8(Buffer.byteLength(i)),r.writeString(i),this.nextRequiredPacketBufferSize=F.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse,this.socket.write(r.toBuffer()),this.setState(F.SocksClientState.SentAuthentication);}sendSocks5CustomAuthentication(){return Lr(this,void 0,void 0,function*(){this.nextRequiredPacketBufferSize=this.options.proxy.custom_auth_response_size,this.socket.write(yield this.options.proxy.custom_auth_request_handler()),this.setState(F.SocksClientState.SentAuthentication);})}handleSocks5CustomAuthHandshakeResponse(e){return Lr(this,void 0,void 0,function*(){return yield this.options.proxy.custom_auth_response_handler(e)})}handleSocks5AuthenticationNoAuthHandshakeResponse(e){return Lr(this,void 0,void 0,function*(){return e[1]===0})}handleSocks5AuthenticationUserPassHandshakeResponse(e){return Lr(this,void 0,void 0,function*(){return e[1]===0})}handleInitialSocks5AuthenticationHandshakeResponse(){return Lr(this,void 0,void 0,function*(){this.setState(F.SocksClientState.ReceivedAuthenticationResponse);let e=false;this.socks5ChosenAuthType===F.Socks5Auth.NoAuth?e=yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(this.receiveBuffer.get(2)):this.socks5ChosenAuthType===F.Socks5Auth.UserPass?e=yield this.handleSocks5AuthenticationUserPassHandshakeResponse(this.receiveBuffer.get(2)):this.socks5ChosenAuthType===this.options.proxy.custom_auth_method&&(e=yield this.handleSocks5CustomAuthHandshakeResponse(this.receiveBuffer.get(this.options.proxy.custom_auth_response_size))),e?this.sendSocks5CommandRequest():this.closeSocket(F.ERRORS.Socks5AuthenticationFailed);})}sendSocks5CommandRequest(){let e=new dt.SmartBuffer;e.writeUInt8(5),e.writeUInt8(F.SocksCommand[this.options.command]),e.writeUInt8(0),Br.isIPv4(this.options.destination.host)?(e.writeUInt8(F.Socks5HostType.IPv4),e.writeBuffer((0, xt.ipToBuffer)(this.options.destination.host))):Br.isIPv6(this.options.destination.host)?(e.writeUInt8(F.Socks5HostType.IPv6),e.writeBuffer((0, xt.ipToBuffer)(this.options.destination.host))):(e.writeUInt8(F.Socks5HostType.Hostname),e.writeUInt8(this.options.destination.host.length),e.writeString(this.options.destination.host)),e.writeUInt16BE(this.options.destination.port),this.nextRequiredPacketBufferSize=F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader,this.socket.write(e.toBuffer()),this.setState(F.SocksClientState.SentFinalHandshake);}handleSocks5FinalHandshakeResponse(){let e=this.receiveBuffer.peek(5);if(e[0]!==5||e[1]!==F.Socks5Response.Granted)this.closeSocket(`${F.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${F.Socks5Response[e[1]]}`);else {let i=e[3],r,n;if(i===F.Socks5HostType.IPv4){let s=F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;if(this.receiveBuffer.length<s){this.nextRequiredPacketBufferSize=s;return}n=dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)),r={host:(0, xt.int32ToIpv4)(n.readUInt32BE()),port:n.readUInt16BE()},r.host==="0.0.0.0"&&(r.host=this.options.proxy.ipaddress);}else if(i===F.Socks5HostType.Hostname){let s=e[4],o=F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);if(this.receiveBuffer.length<o){this.nextRequiredPacketBufferSize=o;return}n=dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)),r={host:n.readString(s),port:n.readUInt16BE()};}else if(i===F.Socks5HostType.IPv6){let s=F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;if(this.receiveBuffer.length<s){this.nextRequiredPacketBufferSize=s;return}n=dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)),r={host:Xl.Address6.fromByteArray(Array.from(n.readBuffer(16))).canonicalForm(),port:n.readUInt16BE()};}this.setState(F.SocksClientState.ReceivedFinalResponse),F.SocksCommand[this.options.command]===F.SocksCommand.connect?(this.setState(F.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{remoteHost:r,socket:this.socket})):F.SocksCommand[this.options.command]===F.SocksCommand.bind?(this.setState(F.SocksClientState.BoundWaitingForConnection),this.nextRequiredPacketBufferSize=F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader,this.emit("bound",{remoteHost:r,socket:this.socket})):F.SocksCommand[this.options.command]===F.SocksCommand.associate&&(this.setState(F.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{remoteHost:r,socket:this.socket}));}}handleSocks5IncomingConnectionResponse(){let e=this.receiveBuffer.peek(5);if(e[0]!==5||e[1]!==F.Socks5Response.Granted)this.closeSocket(`${F.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${F.Socks5Response[e[1]]}`);else {let i=e[3],r,n;if(i===F.Socks5HostType.IPv4){let s=F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;if(this.receiveBuffer.length<s){this.nextRequiredPacketBufferSize=s;return}n=dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)),r={host:(0, xt.int32ToIpv4)(n.readUInt32BE()),port:n.readUInt16BE()},r.host==="0.0.0.0"&&(r.host=this.options.proxy.ipaddress);}else if(i===F.Socks5HostType.Hostname){let s=e[4],o=F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);if(this.receiveBuffer.length<o){this.nextRequiredPacketBufferSize=o;return}n=dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)),r={host:n.readString(s),port:n.readUInt16BE()};}else if(i===F.Socks5HostType.IPv6){let s=F.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;if(this.receiveBuffer.length<s){this.nextRequiredPacketBufferSize=s;return}n=dt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)),r={host:Xl.Address6.fromByteArray(Array.from(n.readBuffer(16))).canonicalForm(),port:n.readUInt16BE()};}this.setState(F.SocksClientState.Established),this.removeInternalSocketHandlers(),this.emit("established",{remoteHost:r,socket:this.socket});}}get socksClientOptions(){return Object.assign({},this.options)}};gi.SocksClient=tc;});var Fm=_(Ki=>{var DS=Ki&&Ki.__createBinding||(Object.create?function(t,e,i,r){r===void 0&&(r=i);var n=Object.getOwnPropertyDescriptor(e,i);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:true,get:function(){return e[i]}}),Object.defineProperty(t,r,n);}:function(t,e,i,r){r===void 0&&(r=i),t[r]=e[i];}),jS=Ki&&Ki.__exportStar||function(t,e){for(var i in t)i!=="default"&&!Object.prototype.hasOwnProperty.call(e,i)&&DS(e,t,i);};Object.defineProperty(Ki,"__esModule",{value:true});jS(Mm(),Ki);});var qm=_(zi=>{var US=zi&&zi.__awaiter||function(t,e,i,r){function n(s){return s instanceof i?s:new i(function(o){o(s);})}return new(i||(i=Promise))(function(s,o){function a(u){try{c(r.next(u));}catch(f){o(f);}}function l(u){try{c(r.throw(u));}catch(f){o(f);}}function c(u){u.done?s(u.value):n(u.value).then(a,l);}c((r=r.apply(t,e||[])).next());})},Ks=zi&&zi.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(zi,"__esModule",{value:true});var $S=Ks(require$$15$1),VS=Ks(require$$9),HS=Ks(require$$6),GS=Ks(yr()),YS=ja(),WS=Fm(),ic=GS.default("socks-proxy-agent");function KS(t){return new Promise((e,i)=>{$S.default.lookup(t,(r,n)=>{r?i(r):e(n);});})}function zS(t){let e=0,i=false,r=5,n=t.hostname||t.host;if(!n)throw new TypeError('No "host"');if(typeof t.port=="number"?e=t.port:typeof t.port=="string"&&(e=parseInt(t.port,10)),e||(e=1080),t.protocol)switch(t.protocol.replace(":","")){case "socks4":i=true;case "socks4a":r=4;break;case "socks5":i=true;case "socks":case "socks5h":r=5;break;default:throw new TypeError(`A "socks" protocol must be specified! Got: ${t.protocol}`)}if(typeof t.type!="undefined")if(t.type===4||t.type===5)r=t.type;else throw new TypeError(`"type" must be 4 or 5, got: ${t.type}`);let s={host:n,port:e,type:r},o=t.userId||t.username,a=t.password;if(t.auth){let l=t.auth.split(":");o=l[0],a=l[1];}return o&&Object.defineProperty(s,"userId",{value:o,enumerable:false}),a&&Object.defineProperty(s,"password",{value:a,enumerable:false}),{lookup:i,proxy:s}}var rc=class extends YS.Agent{constructor(e){let i;if(typeof e=="string"?i=HS.default.parse(e):i=e,!i)throw new TypeError("a SOCKS proxy server `host` and `port` must be specified!");super(i);let r=zS(i);this.lookup=r.lookup,this.proxy=r.proxy,this.tlsConnectionOptions=i.tls||{};}callback(e,i){return US(this,void 0,void 0,function*(){let{lookup:r,proxy:n}=this,{host:s,port:o,timeout:a}=i;if(!s)throw new Error("No `host` defined!");r&&(s=yield KS(s));let l={proxy:n,destination:{host:s,port:o},command:"connect",timeout:a};ic("Creating socks proxy connection: %o",l);let{socket:c}=yield WS.SocksClient.createConnection(l);if(ic("Successfully created socks proxy connection"),i.secureEndpoint){ic("Upgrading socket connection to TLS");let u=i.servername||i.host;return VS.default.connect(Object.assign(Object.assign(Object.assign({},JS(i,"host","hostname","path","port")),{socket:c,servername:u}),this.tlsConnectionOptions))}return c})}};zi.default=rc;function JS(t,...e){let i={},r;for(r in t)e.includes(r)||(i[r]=t[r]);return i}});var jm=_((oc,Dm)=>{var ZS=oc&&oc.__importDefault||function(t){return t&&t.__esModule?t:{default:t}},nc=ZS(qm());function sc(t){return new nc.default(t)}(function(t){t.SocksProxyAgent=nc.default,t.prototype=nc.default.prototype;})(sc||(sc={}));Dm.exports=sc;});var Se=_(et=>{var ac=Symbol.for("yaml.alias"),Um=Symbol.for("yaml.document"),zs=Symbol.for("yaml.map"),$m=Symbol.for("yaml.pair"),lc=Symbol.for("yaml.scalar"),Js=Symbol.for("yaml.seq"),si=Symbol.for("yaml.node.type"),QS=t=>!!t&&typeof t=="object"&&t[si]===ac,XS=t=>!!t&&typeof t=="object"&&t[si]===Um,eE=t=>!!t&&typeof t=="object"&&t[si]===zs,tE=t=>!!t&&typeof t=="object"&&t[si]===$m,Vm=t=>!!t&&typeof t=="object"&&t[si]===lc,iE=t=>!!t&&typeof t=="object"&&t[si]===Js;function Hm(t){if(t&&typeof t=="object")switch(t[si]){case zs:case Js:return  true}return  false}function rE(t){if(t&&typeof t=="object")switch(t[si]){case ac:case zs:case lc:case Js:return  true}return  false}var nE=t=>(Vm(t)||Hm(t))&&!!t.anchor;et.ALIAS=ac;et.DOC=Um;et.MAP=zs;et.NODE_TYPE=si;et.PAIR=$m;et.SCALAR=lc;et.SEQ=Js;et.hasAnchor=nE;et.isAlias=QS;et.isCollection=Hm;et.isDocument=XS;et.isMap=eE;et.isNode=rE;et.isPair=tE;et.isScalar=Vm;et.isSeq=iE;});var hn=_(cc=>{var He=Se(),mt=Symbol("break visit"),Gm=Symbol("skip children"),Kt=Symbol("remove node");function Zs(t,e){let i=Ym(e);He.isDocument(t)?Rr(null,t.contents,i,Object.freeze([t]))===Kt&&(t.contents=null):Rr(null,t,i,Object.freeze([]));}Zs.BREAK=mt;Zs.SKIP=Gm;Zs.REMOVE=Kt;function Rr(t,e,i,r){let n=Wm(t,e,i,r);if(He.isNode(n)||He.isPair(n))return Km(t,r,n),Rr(t,n,i,r);if(typeof n!="symbol"){if(He.isCollection(e)){r=Object.freeze(r.concat(e));for(let s=0;s<e.items.length;++s){let o=Rr(s,e.items[s],i,r);if(typeof o=="number")s=o-1;else {if(o===mt)return mt;o===Kt&&(e.items.splice(s,1),s-=1);}}}else if(He.isPair(e)){r=Object.freeze(r.concat(e));let s=Rr("key",e.key,i,r);if(s===mt)return mt;s===Kt&&(e.key=null);let o=Rr("value",e.value,i,r);if(o===mt)return mt;o===Kt&&(e.value=null);}}return n}async function Qs(t,e){let i=Ym(e);He.isDocument(t)?await Pr(null,t.contents,i,Object.freeze([t]))===Kt&&(t.contents=null):await Pr(null,t,i,Object.freeze([]));}Qs.BREAK=mt;Qs.SKIP=Gm;Qs.REMOVE=Kt;async function Pr(t,e,i,r){let n=await Wm(t,e,i,r);if(He.isNode(n)||He.isPair(n))return Km(t,r,n),Pr(t,n,i,r);if(typeof n!="symbol"){if(He.isCollection(e)){r=Object.freeze(r.concat(e));for(let s=0;s<e.items.length;++s){let o=await Pr(s,e.items[s],i,r);if(typeof o=="number")s=o-1;else {if(o===mt)return mt;o===Kt&&(e.items.splice(s,1),s-=1);}}}else if(He.isPair(e)){r=Object.freeze(r.concat(e));let s=await Pr("key",e.key,i,r);if(s===mt)return mt;s===Kt&&(e.key=null);let o=await Pr("value",e.value,i,r);if(o===mt)return mt;o===Kt&&(e.value=null);}}return n}function Ym(t){return typeof t=="object"&&(t.Collection||t.Node||t.Value)?Object.assign({Alias:t.Node,Map:t.Node,Scalar:t.Node,Seq:t.Node},t.Value&&{Map:t.Value,Scalar:t.Value,Seq:t.Value},t.Collection&&{Map:t.Collection,Seq:t.Collection},t):t}function Wm(t,e,i,r){var n,s,o,a,l;if(typeof i=="function")return i(t,e,r);if(He.isMap(e))return (n=i.Map)==null?void 0:n.call(i,t,e,r);if(He.isSeq(e))return (s=i.Seq)==null?void 0:s.call(i,t,e,r);if(He.isPair(e))return (o=i.Pair)==null?void 0:o.call(i,t,e,r);if(He.isScalar(e))return (a=i.Scalar)==null?void 0:a.call(i,t,e,r);if(He.isAlias(e))return (l=i.Alias)==null?void 0:l.call(i,t,e,r)}function Km(t,e,i){let r=e[e.length-1];if(He.isCollection(r))r.items[t]=i;else if(He.isPair(r))t==="key"?r.key=i:r.value=i;else if(He.isDocument(r))r.contents=i;else {let n=He.isAlias(r)?"alias":"scalar";throw new Error(`Cannot replace node with ${n} parent`)}}cc.visit=Zs;cc.visitAsync=Qs;});var uc=_(Jm=>{var zm=Se(),sE=hn(),oE={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"},aE=t=>t.replace(/[!,[\]{}]/g,e=>oE[e]),pn=class t{constructor(e,i){this.docStart=null,this.docEnd=false,this.yaml=Object.assign({},t.defaultYaml,e),this.tags=Object.assign({},t.defaultTags,i);}clone(){let e=new t(this.yaml,this.tags);return e.docStart=this.docStart,e}atDocument(){let e=new t(this.yaml,this.tags);switch(this.yaml.version){case "1.1":this.atNextDocument=true;break;case "1.2":this.atNextDocument=false,this.yaml={explicit:t.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},t.defaultTags);break}return e}add(e,i){this.atNextDocument&&(this.yaml={explicit:t.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},t.defaultTags),this.atNextDocument=false);let r=e.trim().split(/[ \t]+/),n=r.shift();switch(n){case "%TAG":{if(r.length!==2&&(i(0,"%TAG directive should contain exactly two parts"),r.length<2))return  false;let[s,o]=r;return this.tags[s]=o,true}case "%YAML":{if(this.yaml.explicit=true,r.length!==1)return i(0,"%YAML directive should contain exactly one part"),false;let[s]=r;if(s==="1.1"||s==="1.2")return this.yaml.version=s,true;{let o=/^\d+\.\d+$/.test(s);return i(6,`Unsupported YAML version ${s}`,o),false}}default:return i(0,`Unknown directive ${n}`,true),false}}tagName(e,i){if(e==="!")return "!";if(e[0]!=="!")return i(`Not a valid tag: ${e}`),null;if(e[1]==="<"){let o=e.slice(2,-1);return o==="!"||o==="!!"?(i(`Verbatim tags aren't resolved, so ${e} is invalid.`),null):(e[e.length-1]!==">"&&i("Verbatim tags must end with a >"),o)}let[,r,n]=e.match(/^(.*!)([^!]*)$/s);n||i(`The ${e} tag has no suffix`);let s=this.tags[r];if(s)try{return s+decodeURIComponent(n)}catch(o){return i(String(o)),null}return r==="!"?e:(i(`Could not resolve tag: ${e}`),null)}tagString(e){for(let[i,r]of Object.entries(this.tags))if(e.startsWith(r))return i+aE(e.substring(r.length));return e[0]==="!"?e:`!<${e}>`}toString(e){let i=this.yaml.explicit?[`%YAML ${this.yaml.version||"1.2"}`]:[],r=Object.entries(this.tags),n;if(e&&r.length>0&&zm.isNode(e.contents)){let s={};sE.visit(e.contents,(o,a)=>{zm.isNode(a)&&a.tag&&(s[a.tag]=true);}),n=Object.keys(s);}else n=[];for(let[s,o]of r)s==="!!"&&o==="tag:yaml.org,2002:"||(!e||n.some(a=>a.startsWith(o)))&&i.push(`%TAG ${s} ${o}`);return i.join(`
`)}};pn.defaultYaml={explicit:false,version:"1.2"};pn.defaultTags={"!!":"tag:yaml.org,2002:"};Jm.Directives=pn;});var Xs=_(dn=>{var Zm=Se(),lE=hn();function cE(t){if(/[\x00-\x19\s,[\]{}]/.test(t)){let i=`Anchor must not contain whitespace or control characters: ${JSON.stringify(t)}`;throw new Error(i)}return  true}function Qm(t){let e=new Set;return lE.visit(t,{Value(i,r){r.anchor&&e.add(r.anchor);}}),e}function Xm(t,e){for(let i=1;;++i){let r=`${t}${i}`;if(!e.has(r))return r}}function uE(t,e){let i=[],r=new Map,n=null;return {onAnchor:s=>{i.push(s),n||(n=Qm(t));let o=Xm(e,n);return n.add(o),o},setAnchors:()=>{for(let s of i){let o=r.get(s);if(typeof o=="object"&&o.anchor&&(Zm.isScalar(o.node)||Zm.isCollection(o.node)))o.node.anchor=o.anchor;else {let a=new Error("Failed to resolve repeated object (this should not happen)");throw a.source=s,a}}},sourceObjects:r}}dn.anchorIsValid=cE;dn.anchorNames=Qm;dn.createNodeAnchors=uE;dn.findNewAnchor=Xm;});var fc=_(eg=>{function mn(t,e,i,r){if(r&&typeof r=="object")if(Array.isArray(r))for(let n=0,s=r.length;n<s;++n){let o=r[n],a=mn(t,r,String(n),o);a===void 0?delete r[n]:a!==o&&(r[n]=a);}else if(r instanceof Map)for(let n of Array.from(r.keys())){let s=r.get(n),o=mn(t,r,n,s);o===void 0?r.delete(n):o!==s&&r.set(n,o);}else if(r instanceof Set)for(let n of Array.from(r)){let s=mn(t,r,n,n);s===void 0?r.delete(n):s!==n&&(r.delete(n),r.add(s));}else for(let[n,s]of Object.entries(r)){let o=mn(t,r,n,s);o===void 0?delete r[n]:o!==s&&(r[n]=o);}return t.call(e,i,r)}eg.applyReviver=mn;});var vi=_(ig=>{var fE=Se();function tg(t,e,i){if(Array.isArray(t))return t.map((r,n)=>tg(r,String(n),i));if(t&&typeof t.toJSON=="function"){if(!i||!fE.hasAnchor(t))return t.toJSON(e,i);let r={aliasCount:0,count:1,res:void 0};i.anchors.set(t,r),i.onCreate=s=>{r.res=s,delete i.onCreate;};let n=t.toJSON(e,i);return i.onCreate&&i.onCreate(n),n}return typeof t=="bigint"&&!(i!=null&&i.keep)?Number(t):t}ig.toJS=tg;});var eo=_(ng=>{var hE=fc(),rg=Se(),pE=vi(),hc=class{constructor(e){Object.defineProperty(this,rg.NODE_TYPE,{value:e});}clone(){let e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return this.range&&(e.range=this.range.slice()),e}toJS(e,{mapAsMap:i,maxAliasCount:r,onAnchor:n,reviver:s}={}){if(!rg.isDocument(e))throw new TypeError("A document argument is required");let o={anchors:new Map,doc:e,keep:true,mapAsMap:i===true,mapKeyWarned:false,maxAliasCount:typeof r=="number"?r:100},a=pE.toJS(this,"",o);if(typeof n=="function")for(let{count:l,res:c}of o.anchors.values())n(c,l);return typeof s=="function"?hE.applyReviver(s,{"":a},"",a):a}};ng.NodeBase=hc;});var gn=_(og=>{var dE=Xs(),sg=hn(),to=Se(),mE=eo(),gE=vi(),pc=class extends mE.NodeBase{constructor(e){super(to.ALIAS),this.source=e,Object.defineProperty(this,"tag",{set(){throw new Error("Alias nodes cannot have tags")}});}resolve(e){let i;return sg.visit(e,{Node:(r,n)=>{if(n===this)return sg.visit.BREAK;n.anchor===this.source&&(i=n);}}),i}toJSON(e,i){if(!i)return {source:this.source};let{anchors:r,doc:n,maxAliasCount:s}=i,o=this.resolve(n);if(!o){let l=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new ReferenceError(l)}let a=r.get(o);if(a||(gE.toJS(o,null,i),a=r.get(o)),!a||a.res===void 0){let l="This should not happen: Alias anchor was not resolved?";throw new ReferenceError(l)}if(s>=0&&(a.count+=1,a.aliasCount===0&&(a.aliasCount=io(n,o,r)),a.count*a.aliasCount>s)){let l="Excessive alias count indicates a resource exhaustion attack";throw new ReferenceError(l)}return a.res}toString(e,i,r){let n=`*${this.source}`;if(e){if(dE.anchorIsValid(this.source),e.options.verifyAliasOrder&&!e.anchors.has(this.source)){let s=`Unresolved alias (the anchor must be set before the alias): ${this.source}`;throw new Error(s)}if(e.implicitKey)return `${n} `}return n}};function io(t,e,i){if(to.isAlias(e)){let r=e.resolve(t),n=i&&r&&i.get(r);return n?n.count*n.aliasCount:0}else if(to.isCollection(e)){let r=0;for(let n of e.items){let s=io(t,n,i);s>r&&(r=s);}return r}else if(to.isPair(e)){let r=io(t,e.key,i),n=io(t,e.value,i);return Math.max(r,n)}return 1}og.Alias=pc;});var De=_(dc=>{var vE=Se(),yE=eo(),bE=vi(),_E=t=>!t||typeof t!="function"&&typeof t!="object",yi=class extends yE.NodeBase{constructor(e){super(vE.SCALAR),this.value=e;}toJSON(e,i){return i!=null&&i.keep?this.value:bE.toJS(this.value,e,i)}toString(){return String(this.value)}};yi.BLOCK_FOLDED="BLOCK_FOLDED";yi.BLOCK_LITERAL="BLOCK_LITERAL";yi.PLAIN="PLAIN";yi.QUOTE_DOUBLE="QUOTE_DOUBLE";yi.QUOTE_SINGLE="QUOTE_SINGLE";dc.Scalar=yi;dc.isScalarValue=_E;});var vn=_(lg=>{var wE=gn(),Ji=Se(),ag=De(),xE="tag:yaml.org,2002:";function SE(t,e,i){var r;if(e){let n=i.filter(o=>o.tag===e),s=(r=n.find(o=>!o.format))!=null?r:n[0];if(!s)throw new Error(`Tag ${e} not found`);return s}return i.find(n=>{var s;return ((s=n.identify)==null?void 0:s.call(n,t))&&!n.format})}function EE(t,e,i){var f,d,g;if(Ji.isDocument(t)&&(t=t.contents),Ji.isNode(t))return t;if(Ji.isPair(t)){let m=(d=(f=i.schema[Ji.MAP]).createNode)==null?void 0:d.call(f,i.schema,null,i);return m.items.push(t),m}(t instanceof String||t instanceof Number||t instanceof Boolean||typeof BigInt!="undefined"&&t instanceof BigInt)&&(t=t.valueOf());let{aliasDuplicateObjects:r,onAnchor:n,onTagObj:s,schema:o,sourceObjects:a}=i,l;if(r&&t&&typeof t=="object"){if(l=a.get(t),l)return l.anchor||(l.anchor=n(t)),new wE.Alias(l.anchor);l={anchor:null,node:null},a.set(t,l);}e!=null&&e.startsWith("!!")&&(e=xE+e.slice(2));let c=SE(t,e,o.tags);if(!c){if(t&&typeof t.toJSON=="function"&&(t=t.toJSON()),!t||typeof t!="object"){let m=new ag.Scalar(t);return l&&(l.node=m),m}c=t instanceof Map?o[Ji.MAP]:Symbol.iterator in Object(t)?o[Ji.SEQ]:o[Ji.MAP];}s&&(s(c),delete i.onTagObj);let u=c!=null&&c.createNode?c.createNode(i.schema,t,i):typeof((g=c==null?void 0:c.nodeClass)==null?void 0:g.from)=="function"?c.nodeClass.from(i.schema,t,i):new ag.Scalar(t);return e?u.tag=e:c.default||(u.tag=c.tag),l&&(l.node=u),u}lg.createNode=EE;});var no=_(ro=>{var kE=vn(),zt=Se(),OE=eo();function mc(t,e,i){let r=i;for(let n=e.length-1;n>=0;--n){let s=e[n];if(typeof s=="number"&&Number.isInteger(s)&&s>=0){let o=[];o[s]=r,r=o;}else r=new Map([[s,r]]);}return kE.createNode(r,void 0,{aliasDuplicateObjects:false,keepUndefined:false,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:t,sourceObjects:new Map})}var cg=t=>t==null||typeof t=="object"&&!!t[Symbol.iterator]().next().done,gc=class extends OE.NodeBase{constructor(e,i){super(e),Object.defineProperty(this,"schema",{value:i,configurable:true,enumerable:false,writable:true});}clone(e){let i=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return e&&(i.schema=e),i.items=i.items.map(r=>zt.isNode(r)||zt.isPair(r)?r.clone(e):r),this.range&&(i.range=this.range.slice()),i}addIn(e,i){if(cg(e))this.add(i);else {let[r,...n]=e,s=this.get(r,true);if(zt.isCollection(s))s.addIn(n,i);else if(s===void 0&&this.schema)this.set(r,mc(this.schema,n,i));else throw new Error(`Expected YAML collection at ${r}. Remaining path: ${n}`)}}deleteIn(e){let[i,...r]=e;if(r.length===0)return this.delete(i);let n=this.get(i,true);if(zt.isCollection(n))return n.deleteIn(r);throw new Error(`Expected YAML collection at ${i}. Remaining path: ${r}`)}getIn(e,i){let[r,...n]=e,s=this.get(r,true);return n.length===0?!i&&zt.isScalar(s)?s.value:s:zt.isCollection(s)?s.getIn(n,i):void 0}hasAllNullValues(e){return this.items.every(i=>{if(!zt.isPair(i))return  false;let r=i.value;return r==null||e&&zt.isScalar(r)&&r.value==null&&!r.commentBefore&&!r.comment&&!r.tag})}hasIn(e){let[i,...r]=e;if(r.length===0)return this.has(i);let n=this.get(i,true);return zt.isCollection(n)?n.hasIn(r):false}setIn(e,i){let[r,...n]=e;if(n.length===0)this.set(r,i);else {let s=this.get(r,true);if(zt.isCollection(s))s.setIn(n,i);else if(s===void 0&&this.schema)this.set(r,mc(this.schema,n,i));else throw new Error(`Expected YAML collection at ${r}. Remaining path: ${n}`)}}};ro.Collection=gc;ro.collectionFromPath=mc;ro.isEmptyPath=cg;});var yn=_(so=>{var CE=t=>t.replace(/^(?!$)(?: $)?/gm,"#");function vc(t,e){return /^\n+$/.test(t)?t.substring(1):e?t.replace(/^(?! *$)/gm,e):t}var TE=(t,e,i)=>t.endsWith(`
`)?vc(i,e):i.includes(`
`)?`
`+vc(i,e):(t.endsWith(" ")?"":" ")+i;so.indentComment=vc;so.lineComment=TE;so.stringifyComment=CE;});var fg=_(bn=>{var AE="flow",yc="block",oo="quoted";function IE(t,e,i="flow",{indentAtStart:r,lineWidth:n=80,minContentWidth:s=20,onFold:o,onOverflow:a}={}){if(!n||n<0)return t;n<s&&(s=0);let l=Math.max(1+s,1+n-e.length);if(t.length<=l)return t;let c=[],u={},f=n-e.length;typeof r=="number"&&(r>n-Math.max(2,s)?c.push(0):f=n-r);let d,g,m=false,y=-1,b=-1,x=-1;i===yc&&(y=ug(t,y,e.length),y!==-1&&(f=y+l));for(let O;O=t[y+=1];){if(i===oo&&O==="\\"){switch(b=y,t[y+1]){case "x":y+=3;break;case "u":y+=5;break;case "U":y+=9;break;default:y+=1;}x=y;}if(O===`
`)i===yc&&(y=ug(t,y,e.length)),f=y+e.length+l,d=void 0;else {if(O===" "&&g&&g!==" "&&g!==`
`&&g!=="	"){let k=t[y+1];k&&k!==" "&&k!==`
`&&k!=="	"&&(d=y);}if(y>=f)if(d)c.push(d),f=d+l,d=void 0;else if(i===oo){for(;g===" "||g==="	";)g=O,O=t[y+=1],m=true;let k=y>x+1?y-2:b-1;if(u[k])return t;c.push(k),u[k]=true,f=k+l,d=void 0;}else m=true;}g=O;}if(m&&a&&a(),c.length===0)return t;o&&o();let E=t.slice(0,c[0]);for(let O=0;O<c.length;++O){let k=c[O],S=c[O+1]||t.length;k===0?E=`
${e}${t.slice(0,S)}`:(i===oo&&u[k]&&(E+=`${t[k]}\\`),E+=`
${e}${t.slice(k+1,S)}`);}return E}function ug(t,e,i){let r=e,n=e+1,s=t[n];for(;s===" "||s==="	";)if(e<n+i)s=t[++e];else {do s=t[++e];while(s&&s!==`
`);r=e,n=e+1,s=t[n];}return r}bn.FOLD_BLOCK=yc;bn.FOLD_FLOW=AE;bn.FOLD_QUOTED=oo;bn.foldFlowLines=IE;});var wn=_(hg=>{var Jt=De(),bi=fg(),lo=(t,e)=>({indentAtStart:e?t.indent.length:t.indentAtStart,lineWidth:t.options.lineWidth,minContentWidth:t.options.minContentWidth}),co=t=>/^(%|---|\.\.\.)/m.test(t);function NE(t,e,i){if(!e||e<0)return  false;let r=e-i,n=t.length;if(n<=r)return  false;for(let s=0,o=0;s<n;++s)if(t[s]===`
`){if(s-o>r)return  true;if(o=s+1,n-o<=r)return  false}return  true}function _n(t,e){let i=JSON.stringify(t);if(e.options.doubleQuotedAsJSON)return i;let{implicitKey:r}=e,n=e.options.doubleQuotedMinMultiLineLength,s=e.indent||(co(t)?"  ":""),o="",a=0;for(let l=0,c=i[l];c;c=i[++l])if(c===" "&&i[l+1]==="\\"&&i[l+2]==="n"&&(o+=i.slice(a,l)+"\\ ",l+=1,a=l,c="\\"),c==="\\")switch(i[l+1]){case "u":{o+=i.slice(a,l);let u=i.substr(l+2,4);switch(u){case "0000":o+="\\0";break;case "0007":o+="\\a";break;case "000b":o+="\\v";break;case "001b":o+="\\e";break;case "0085":o+="\\N";break;case "00a0":o+="\\_";break;case "2028":o+="\\L";break;case "2029":o+="\\P";break;default:u.substr(0,2)==="00"?o+="\\x"+u.substr(2):o+=i.substr(l,6);}l+=5,a=l+1;}break;case "n":if(r||i[l+2]==='"'||i.length<n)l+=1;else {for(o+=i.slice(a,l)+`

`;i[l+2]==="\\"&&i[l+3]==="n"&&i[l+4]!=='"';)o+=`
`,l+=2;o+=s,i[l+2]===" "&&(o+="\\"),l+=1,a=l+1;}break;default:l+=1;}return o=a?o+i.slice(a):i,r?o:bi.foldFlowLines(o,s,bi.FOLD_QUOTED,lo(e,false))}function bc(t,e){if(e.options.singleQuote===false||e.implicitKey&&t.includes(`
`)||/[ \t]\n|\n[ \t]/.test(t))return _n(t,e);let i=e.indent||(co(t)?"  ":""),r="'"+t.replace(/'/g,"''").replace(/\n+/g,`$&
${i}`)+"'";return e.implicitKey?r:bi.foldFlowLines(r,i,bi.FOLD_FLOW,lo(e,false))}function Mr(t,e){let{singleQuote:i}=e.options,r;if(i===false)r=_n;else {let n=t.includes('"'),s=t.includes("'");n&&!s?r=bc:s&&!n?r=_n:r=i?bc:_n;}return r(t,e)}var _c;try{_c=new RegExp(`(^|(?<!
))
+(?!
|$)`,"g");}catch{_c=/\n+(?!\n|$)/g;}function ao({comment:t,type:e,value:i},r,n,s){let{blockQuote:o,commentString:a,lineWidth:l}=r.options;if(!o||/\n[\t ]+$/.test(i)||/^\s*$/.test(i))return Mr(i,r);let c=r.indent||(r.forceBlockIndent||co(i)?"  ":""),u=o==="literal"?true:o==="folded"||e===Jt.Scalar.BLOCK_FOLDED?false:e===Jt.Scalar.BLOCK_LITERAL?true:!NE(i,l,c.length);if(!i)return u?`|
`:`>
`;let f,d;for(d=i.length;d>0;--d){let R=i[d-1];if(R!==`
`&&R!=="	"&&R!==" ")break}let g=i.substring(d),m=g.indexOf(`
`);m===-1?f="-":i===g||m!==g.length-1?(f="+",s&&s()):f="",g&&(i=i.slice(0,-g.length),g[g.length-1]===`
`&&(g=g.slice(0,-1)),g=g.replace(_c,`$&${c}`));let y=false,b,x=-1;for(b=0;b<i.length;++b){let R=i[b];if(R===" ")y=true;else if(R===`
`)x=b;else break}let E=i.substring(0,x<b?x+1:b);E&&(i=i.substring(E.length),E=E.replace(/\n+/g,`$&${c}`));let k=(u?"|":">")+(y?c?"2":"1":"")+f;if(t&&(k+=" "+a(t.replace(/ ?[\r\n]+/g," ")),n&&n()),u)return i=i.replace(/\n+/g,`$&${c}`),`${k}
${c}${E}${i}${g}`;i=i.replace(/\n+/g,`
$&`).replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,`$&${c}`);let S=bi.foldFlowLines(`${E}${i}${g}`,c,bi.FOLD_BLOCK,lo(r,true));return `${k}
${c}${S}`}function LE(t,e,i,r){let{type:n,value:s}=t,{actualString:o,implicitKey:a,indent:l,indentStep:c,inFlow:u}=e;if(a&&s.includes(`
`)||u&&/[[\]{},]/.test(s))return Mr(s,e);if(!s||/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(s))return a||u||!s.includes(`
`)?Mr(s,e):ao(t,e,i,r);if(!a&&!u&&n!==Jt.Scalar.PLAIN&&s.includes(`
`))return ao(t,e,i,r);if(co(s)){if(l==="")return e.forceBlockIndent=true,ao(t,e,i,r);if(a&&l===c)return Mr(s,e)}let f=s.replace(/\n+/g,`$&
${l}`);if(o){let d=y=>{var b;return y.default&&y.tag!=="tag:yaml.org,2002:str"&&((b=y.test)==null?void 0:b.test(f))},{compat:g,tags:m}=e.doc.schema;if(m.some(d)||g!=null&&g.some(d))return Mr(s,e)}return a?f:bi.foldFlowLines(f,l,bi.FOLD_FLOW,lo(e,false))}function BE(t,e,i,r){let{implicitKey:n,inFlow:s}=e,o=typeof t.value=="string"?t:Object.assign({},t,{value:String(t.value)}),{type:a}=t;a!==Jt.Scalar.QUOTE_DOUBLE&&/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(o.value)&&(a=Jt.Scalar.QUOTE_DOUBLE);let l=u=>{switch(u){case Jt.Scalar.BLOCK_FOLDED:case Jt.Scalar.BLOCK_LITERAL:return n||s?Mr(o.value,e):ao(o,e,i,r);case Jt.Scalar.QUOTE_DOUBLE:return _n(o.value,e);case Jt.Scalar.QUOTE_SINGLE:return bc(o.value,e);case Jt.Scalar.PLAIN:return LE(o,e,i,r);default:return null}},c=l(a);if(c===null){let{defaultKeyType:u,defaultStringType:f}=e.options,d=n&&u||f;if(c=l(d),c===null)throw new Error(`Unsupported default string type ${d}`)}return c}hg.stringifyString=BE;});var xn=_(wc=>{var RE=Xs(),_i=Se(),PE=yn(),ME=wn();function FE(t,e){let i=Object.assign({blockQuote:true,commentString:PE.stringifyComment,defaultKeyType:null,defaultStringType:"PLAIN",directives:null,doubleQuotedAsJSON:false,doubleQuotedMinMultiLineLength:40,falseStr:"false",flowCollectionPadding:true,indentSeq:true,lineWidth:80,minContentWidth:20,nullStr:"null",simpleKeys:false,singleQuote:null,trueStr:"true",verifyAliasOrder:true},t.schema.toStringOptions,e),r;switch(i.collectionStyle){case "block":r=false;break;case "flow":r=true;break;default:r=null;}return {anchors:new Set,doc:t,flowCollectionPadding:i.flowCollectionPadding?" ":"",indent:"",indentStep:typeof i.indent=="number"?" ".repeat(i.indent):"  ",inFlow:r,options:i}}function qE(t,e){var n,s,o,a;if(e.tag){let l=t.filter(c=>c.tag===e.tag);if(l.length>0)return (n=l.find(c=>c.format===e.format))!=null?n:l[0]}let i,r;if(_i.isScalar(e)){r=e.value;let l=t.filter(c=>{var u;return (u=c.identify)==null?void 0:u.call(c,r)});if(l.length>1){let c=l.filter(u=>u.test);c.length>0&&(l=c);}i=(s=l.find(c=>c.format===e.format))!=null?s:l.find(c=>!c.format);}else r=e,i=t.find(l=>l.nodeClass&&r instanceof l.nodeClass);if(!i){let l=(a=(o=r==null?void 0:r.constructor)==null?void 0:o.name)!=null?a:typeof r;throw new Error(`Tag not resolved for ${l} value`)}return i}function DE(t,e,{anchors:i,doc:r}){if(!r.directives)return "";let n=[],s=(_i.isScalar(t)||_i.isCollection(t))&&t.anchor;s&&RE.anchorIsValid(s)&&(i.add(s),n.push(`&${s}`));let o=t.tag?t.tag:e.default?null:e.tag;return o&&n.push(r.directives.tagString(o)),n.join(" ")}function jE(t,e,i,r){var l,c;if(_i.isPair(t))return t.toString(e,i,r);if(_i.isAlias(t)){if(e.doc.directives)return t.toString(e);if((l=e.resolvedAliases)!=null&&l.has(t))throw new TypeError("Cannot stringify circular structure without alias nodes");e.resolvedAliases?e.resolvedAliases.add(t):e.resolvedAliases=new Set([t]),t=t.resolve(e.doc);}let n,s=_i.isNode(t)?t:e.doc.createNode(t,{onTagObj:u=>n=u});n||(n=qE(e.doc.schema.tags,s));let o=DE(s,n,e);o.length>0&&(e.indentAtStart=((c=e.indentAtStart)!=null?c:0)+o.length+1);let a=typeof n.stringify=="function"?n.stringify(s,e,i,r):_i.isScalar(s)?ME.stringifyString(s,e,i,r):s.toString(e,i,r);return o?_i.isScalar(s)||a[0]==="{"||a[0]==="["?`${o} ${a}`:`${o}
${e.indent}${a}`:a}wc.createStringifyContext=FE;wc.stringify=jE;});var gg=_(mg=>{var oi=Se(),pg=De(),dg=xn(),Sn=yn();function UE({key:t,value:e},i,r,n){var T,A;let{allNullValues:s,doc:o,indent:a,indentStep:l,options:{commentString:c,indentSeq:u,simpleKeys:f}}=i,d=oi.isNode(t)&&t.comment||null;if(f){if(d)throw new Error("With simple keys, key nodes cannot have comments");if(oi.isCollection(t)||!oi.isNode(t)&&typeof t=="object"){let C="With simple keys, collection cannot be used as a key value";throw new Error(C)}}let g=!f&&(!t||d&&e==null&&!i.inFlow||oi.isCollection(t)||(oi.isScalar(t)?t.type===pg.Scalar.BLOCK_FOLDED||t.type===pg.Scalar.BLOCK_LITERAL:typeof t=="object"));i=Object.assign({},i,{allNullValues:false,implicitKey:!g&&(f||!s),indent:a+l});let m=false,y=false,b=dg.stringify(t,i,()=>m=true,()=>y=true);if(!g&&!i.inFlow&&b.length>1024){if(f)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");g=true;}if(i.inFlow){if(s||e==null)return m&&r&&r(),b===""?"?":g?`? ${b}`:b}else if(s&&!f||e==null&&g)return b=`? ${b}`,d&&!m?b+=Sn.lineComment(b,i.indent,c(d)):y&&n&&n(),b;m&&(d=null),g?(d&&(b+=Sn.lineComment(b,i.indent,c(d))),b=`? ${b}
${a}:`):(b=`${b}:`,d&&(b+=Sn.lineComment(b,i.indent,c(d))));let x,E,O;oi.isNode(e)?(x=!!e.spaceBefore,E=e.commentBefore,O=e.comment):(x=false,E=null,O=null,e&&typeof e=="object"&&(e=o.createNode(e))),i.implicitKey=false,!g&&!d&&oi.isScalar(e)&&(i.indentAtStart=b.length+1),y=false,!u&&l.length>=2&&!i.inFlow&&!g&&oi.isSeq(e)&&!e.flow&&!e.tag&&!e.anchor&&(i.indent=i.indent.substring(2));let k=false,S=dg.stringify(e,i,()=>k=true,()=>y=true),R=" ";if(d||x||E){if(R=x?`
`:"",E){let C=c(E);R+=`
${Sn.indentComment(C,i.indent)}`;}S===""&&!i.inFlow?R===`
`&&(R=`

`):R+=`
${i.indent}`;}else if(!g&&oi.isCollection(e)){let C=S[0],L=S.indexOf(`
`),P=L!==-1,U=(A=(T=i.inFlow)!=null?T:e.flow)!=null?A:e.items.length===0;if(P||!U){let q=false;if(P&&(C==="&"||C==="!")){let H=S.indexOf(" ");C==="&"&&H!==-1&&H<L&&S[H+1]==="!"&&(H=S.indexOf(" ",H+1)),(H===-1||L<H)&&(q=true);}q||(R=`
${i.indent}`);}}else (S===""||S[0]===`
`)&&(R="");return b+=R+S,i.inFlow?k&&r&&r():O&&!k?b+=Sn.lineComment(b,i.indent,c(O)):y&&n&&n(),b}mg.stringifyPair=UE;});var Sc=_(xc=>{function $E(t,...e){t==="debug"&&console.log(...e);}function VE(t,e){(t==="debug"||t==="warn")&&(typeof process!="undefined"&&process.emitWarning?process.emitWarning(e):console.warn(e));}xc.debug=$E;xc.warn=VE;});var po=_(ho=>{var En=Se(),vg=De(),uo="<<",fo={identify:t=>t===uo||typeof t=="symbol"&&t.description===uo,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new vg.Scalar(Symbol(uo)),{addToJSMap:yg}),stringify:()=>uo},HE=(t,e)=>(fo.identify(e)||En.isScalar(e)&&(!e.type||e.type===vg.Scalar.PLAIN)&&fo.identify(e.value))&&(t==null?void 0:t.doc.schema.tags.some(i=>i.tag===fo.tag&&i.default));function yg(t,e,i){if(i=t&&En.isAlias(i)?i.resolve(t.doc):i,En.isSeq(i))for(let r of i.items)Ec(t,e,r);else if(Array.isArray(i))for(let r of i)Ec(t,e,r);else Ec(t,e,i);}function Ec(t,e,i){let r=t&&En.isAlias(i)?i.resolve(t.doc):i;if(!En.isMap(r))throw new Error("Merge sources must be maps or map aliases");let n=r.toJSON(null,t,Map);for(let[s,o]of n)e instanceof Map?e.has(s)||e.set(s,o):e instanceof Set?e.add(s):Object.prototype.hasOwnProperty.call(e,s)||Object.defineProperty(e,s,{value:o,writable:true,enumerable:true,configurable:true});return e}ho.addMergeToJSMap=yg;ho.isMergeKey=HE;ho.merge=fo;});var Oc=_(wg=>{var GE=Sc(),bg=po(),YE=xn(),_g=Se(),kc=vi();function WE(t,e,{key:i,value:r}){if(_g.isNode(i)&&i.addToJSMap)i.addToJSMap(t,e,r);else if(bg.isMergeKey(t,i))bg.addMergeToJSMap(t,e,r);else {let n=kc.toJS(i,"",t);if(e instanceof Map)e.set(n,kc.toJS(r,n,t));else if(e instanceof Set)e.add(n);else {let s=KE(i,n,t),o=kc.toJS(r,s,t);s in e?Object.defineProperty(e,s,{value:o,writable:true,enumerable:true,configurable:true}):e[s]=o;}}return e}function KE(t,e,i){if(e===null)return "";if(typeof e!="object")return String(e);if(_g.isNode(t)&&(i!=null&&i.doc)){let r=YE.createStringifyContext(i.doc,{});r.anchors=new Set;for(let s of i.anchors.keys())r.anchors.add(s.anchor);r.inFlow=true,r.inStringifyKey=true;let n=t.toString(r);if(!i.mapKeyWarned){let s=JSON.stringify(n);s.length>40&&(s=s.substring(0,36)+'..."'),GE.warn(i.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${s}. Set mapAsMap: true to use object keys.`),i.mapKeyWarned=true;}return n}return JSON.stringify(e)}wg.addPairToJSMap=WE;});var wi=_(Cc=>{var xg=vn(),zE=gg(),JE=Oc(),mo=Se();function ZE(t,e,i){let r=xg.createNode(t,void 0,i),n=xg.createNode(e,void 0,i);return new go(r,n)}var go=class t{constructor(e,i=null){Object.defineProperty(this,mo.NODE_TYPE,{value:mo.PAIR}),this.key=e,this.value=i;}clone(e){let{key:i,value:r}=this;return mo.isNode(i)&&(i=i.clone(e)),mo.isNode(r)&&(r=r.clone(e)),new t(i,r)}toJSON(e,i){let r=i!=null&&i.mapAsMap?new Map:{};return JE.addPairToJSMap(i,r,this)}toString(e,i,r){return e!=null&&e.doc?zE.stringifyPair(this,e,i,r):JSON.stringify(this)}};Cc.Pair=go;Cc.createPair=ZE;});var Tc=_(Eg=>{var Zi=Se(),Sg=xn(),vo=yn();function QE(t,e,i){var s;return (((s=e.inFlow)!=null?s:t.flow)?ek:XE)(t,e,i)}function XE({comment:t,items:e},i,{blockItemPrefix:r,flowChars:n,itemIndent:s,onChompKeep:o,onComment:a}){let{indent:l,options:{commentString:c}}=i,u=Object.assign({},i,{indent:s,type:null}),f=false,d=[];for(let m=0;m<e.length;++m){let y=e[m],b=null;if(Zi.isNode(y))!f&&y.spaceBefore&&d.push(""),yo(i,d,y.commentBefore,f),y.comment&&(b=y.comment);else if(Zi.isPair(y)){let E=Zi.isNode(y.key)?y.key:null;E&&(!f&&E.spaceBefore&&d.push(""),yo(i,d,E.commentBefore,f));}f=false;let x=Sg.stringify(y,u,()=>b=null,()=>f=true);b&&(x+=vo.lineComment(x,s,c(b))),f&&b&&(f=false),d.push(r+x);}let g;if(d.length===0)g=n.start+n.end;else {g=d[0];for(let m=1;m<d.length;++m){let y=d[m];g+=y?`
${l}${y}`:`
`;}}return t?(g+=`
`+vo.indentComment(c(t),l),a&&a()):f&&o&&o(),g}function ek({items:t},e,{flowChars:i,itemIndent:r}){let{indent:n,indentStep:s,flowCollectionPadding:o,options:{commentString:a}}=e;r+=s;let l=Object.assign({},e,{indent:r,inFlow:true,type:null}),c=false,u=0,f=[];for(let m=0;m<t.length;++m){let y=t[m],b=null;if(Zi.isNode(y))y.spaceBefore&&f.push(""),yo(e,f,y.commentBefore,false),y.comment&&(b=y.comment);else if(Zi.isPair(y)){let E=Zi.isNode(y.key)?y.key:null;E&&(E.spaceBefore&&f.push(""),yo(e,f,E.commentBefore,false),E.comment&&(c=true));let O=Zi.isNode(y.value)?y.value:null;O?(O.comment&&(b=O.comment),O.commentBefore&&(c=true)):y.value==null&&(E!=null&&E.comment)&&(b=E.comment);}b&&(c=true);let x=Sg.stringify(y,l,()=>b=null);m<t.length-1&&(x+=","),b&&(x+=vo.lineComment(x,r,a(b))),!c&&(f.length>u||x.includes(`
`))&&(c=true),f.push(x),u=f.length;}let{start:d,end:g}=i;if(f.length===0)return d+g;if(!c){let m=f.reduce((y,b)=>y+b.length+2,2);c=e.options.lineWidth>0&&m>e.options.lineWidth;}if(c){let m=d;for(let y of f)m+=y?`
${s}${n}${y}`:`
`;return `${m}
${n}${g}`}else return `${d}${o}${f.join(" ")}${o}${g}`}function yo({indent:t,options:{commentString:e}},i,r,n){if(r&&n&&(r=r.replace(/^\n+/,"")),r){let s=vo.indentComment(e(r),t);i.push(s.trimStart());}}Eg.stringifyCollection=QE;});var Si=_(Ic=>{var tk=Tc(),ik=Oc(),rk=no(),xi=Se(),bo=wi(),nk=De();function kn(t,e){let i=xi.isScalar(e)?e.value:e;for(let r of t)if(xi.isPair(r)&&(r.key===e||r.key===i||xi.isScalar(r.key)&&r.key.value===i))return r}var Ac=class extends rk.Collection{static get tagName(){return "tag:yaml.org,2002:map"}constructor(e){super(xi.MAP,e),this.items=[];}static from(e,i,r){let{keepUndefined:n,replacer:s}=r,o=new this(e),a=(l,c)=>{if(typeof s=="function")c=s.call(i,l,c);else if(Array.isArray(s)&&!s.includes(l))return;(c!==void 0||n)&&o.items.push(bo.createPair(l,c,r));};if(i instanceof Map)for(let[l,c]of i)a(l,c);else if(i&&typeof i=="object")for(let l of Object.keys(i))a(l,i[l]);return typeof e.sortMapEntries=="function"&&o.items.sort(e.sortMapEntries),o}add(e,i){var o;let r;xi.isPair(e)?r=e:!e||typeof e!="object"||!("key"in e)?r=new bo.Pair(e,e==null?void 0:e.value):r=new bo.Pair(e.key,e.value);let n=kn(this.items,r.key),s=(o=this.schema)==null?void 0:o.sortMapEntries;if(n){if(!i)throw new Error(`Key ${r.key} already set`);xi.isScalar(n.value)&&nk.isScalarValue(r.value)?n.value.value=r.value:n.value=r.value;}else if(s){let a=this.items.findIndex(l=>s(r,l)<0);a===-1?this.items.push(r):this.items.splice(a,0,r);}else this.items.push(r);}delete(e){let i=kn(this.items,e);return i?this.items.splice(this.items.indexOf(i),1).length>0:false}get(e,i){var s;let r=kn(this.items,e),n=r==null?void 0:r.value;return (s=!i&&xi.isScalar(n)?n.value:n)!=null?s:void 0}has(e){return !!kn(this.items,e)}set(e,i){this.add(new bo.Pair(e,i),true);}toJSON(e,i,r){let n=r?new r:i!=null&&i.mapAsMap?new Map:{};i!=null&&i.onCreate&&i.onCreate(n);for(let s of this.items)ik.addPairToJSMap(i,n,s);return n}toString(e,i,r){if(!e)return JSON.stringify(this);for(let n of this.items)if(!xi.isPair(n))throw new Error(`Map items must all be pairs; found ${JSON.stringify(n)} instead`);return !e.allNullValues&&this.hasAllNullValues(false)&&(e=Object.assign({},e,{allNullValues:true})),tk.stringifyCollection(this,e,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:e.indent||"",onChompKeep:r,onComment:i})}};Ic.YAMLMap=Ac;Ic.findPair=kn;});var Fr=_(Og=>{var sk=Se(),kg=Si(),ok={collection:"map",default:true,nodeClass:kg.YAMLMap,tag:"tag:yaml.org,2002:map",resolve(t,e){return sk.isMap(t)||e("Expected a mapping for this tag"),t},createNode:(t,e,i)=>kg.YAMLMap.from(t,e,i)};Og.map=ok;});var Ei=_(Cg=>{var ak=vn(),lk=Tc(),ck=no(),wo=Se(),uk=De(),fk=vi(),Nc=class extends ck.Collection{static get tagName(){return "tag:yaml.org,2002:seq"}constructor(e){super(wo.SEQ,e),this.items=[];}add(e){this.items.push(e);}delete(e){let i=_o(e);return typeof i!="number"?false:this.items.splice(i,1).length>0}get(e,i){let r=_o(e);if(typeof r!="number")return;let n=this.items[r];return !i&&wo.isScalar(n)?n.value:n}has(e){let i=_o(e);return typeof i=="number"&&i<this.items.length}set(e,i){let r=_o(e);if(typeof r!="number")throw new Error(`Expected a valid index, not ${e}.`);let n=this.items[r];wo.isScalar(n)&&uk.isScalarValue(i)?n.value=i:this.items[r]=i;}toJSON(e,i){let r=[];i!=null&&i.onCreate&&i.onCreate(r);let n=0;for(let s of this.items)r.push(fk.toJS(s,String(n++),i));return r}toString(e,i,r){return e?lk.stringifyCollection(this,e,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(e.indent||"")+"  ",onChompKeep:r,onComment:i}):JSON.stringify(this)}static from(e,i,r){let{replacer:n}=r,s=new this(e);if(i&&Symbol.iterator in Object(i)){let o=0;for(let a of i){if(typeof n=="function"){let l=i instanceof Set?a:String(o++);a=n.call(i,l,a);}s.items.push(ak.createNode(a,void 0,r));}}return s}};function _o(t){let e=wo.isScalar(t)?t.value:t;return e&&typeof e=="string"&&(e=Number(e)),typeof e=="number"&&Number.isInteger(e)&&e>=0?e:null}Cg.YAMLSeq=Nc;});var qr=_(Ag=>{var hk=Se(),Tg=Ei(),pk={collection:"seq",default:true,nodeClass:Tg.YAMLSeq,tag:"tag:yaml.org,2002:seq",resolve(t,e){return hk.isSeq(t)||e("Expected a sequence for this tag"),t},createNode:(t,e,i)=>Tg.YAMLSeq.from(t,e,i)};Ag.seq=pk;});var On=_(Ig=>{var dk=wn(),mk={identify:t=>typeof t=="string",default:true,tag:"tag:yaml.org,2002:str",resolve:t=>t,stringify(t,e,i,r){return e=Object.assign({actualString:true},e),dk.stringifyString(t,e,i,r)}};Ig.string=mk;});var xo=_(Bg=>{var Ng=De(),Lg={identify:t=>t==null,createNode:()=>new Ng.Scalar(null),default:true,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>new Ng.Scalar(null),stringify:({source:t},e)=>typeof t=="string"&&Lg.test.test(t)?t:e.options.nullStr};Bg.nullTag=Lg;});var Lc=_(Pg=>{var gk=De(),Rg={identify:t=>typeof t=="boolean",default:true,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:t=>new gk.Scalar(t[0]==="t"||t[0]==="T"),stringify({source:t,value:e},i){if(t&&Rg.test.test(t)){let r=t[0]==="t"||t[0]==="T";if(e===r)return t}return e?i.options.trueStr:i.options.falseStr}};Pg.boolTag=Rg;});var Dr=_(Mg=>{function vk({format:t,minFractionDigits:e,tag:i,value:r}){if(typeof r=="bigint")return String(r);let n=typeof r=="number"?r:Number(r);if(!isFinite(n))return isNaN(n)?".nan":n<0?"-.inf":".inf";let s=JSON.stringify(r);if(!t&&e&&(!i||i==="tag:yaml.org,2002:float")&&/^\d/.test(s)){let o=s.indexOf(".");o<0&&(o=s.length,s+=".");let a=e-(s.length-o-1);for(;a-- >0;)s+="0";}return s}Mg.stringifyNumber=vk;});var Rc=_(So=>{var yk=De(),Bc=Dr(),bk={identify:t=>typeof t=="number",default:true,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:t=>t.slice(-3).toLowerCase()==="nan"?NaN:t[0]==="-"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:Bc.stringifyNumber},_k={identify:t=>typeof t=="number",default:true,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:t=>parseFloat(t),stringify(t){let e=Number(t.value);return isFinite(e)?e.toExponential():Bc.stringifyNumber(t)}},wk={identify:t=>typeof t=="number",default:true,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,resolve(t){let e=new yk.Scalar(parseFloat(t)),i=t.indexOf(".");return i!==-1&&t[t.length-1]==="0"&&(e.minFractionDigits=t.length-i-1),e},stringify:Bc.stringifyNumber};So.float=wk;So.floatExp=_k;So.floatNaN=bk;});var Mc=_(ko=>{var Fg=Dr(),Eo=t=>typeof t=="bigint"||Number.isInteger(t),Pc=(t,e,i,{intAsBigInt:r})=>r?BigInt(t):parseInt(t.substring(e),i);function qg(t,e,i){let{value:r}=t;return Eo(r)&&r>=0?i+r.toString(e):Fg.stringifyNumber(t)}var xk={identify:t=>Eo(t)&&t>=0,default:true,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o[0-7]+$/,resolve:(t,e,i)=>Pc(t,2,8,i),stringify:t=>qg(t,8,"0o")},Sk={identify:Eo,default:true,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:(t,e,i)=>Pc(t,0,10,i),stringify:Fg.stringifyNumber},Ek={identify:t=>Eo(t)&&t>=0,default:true,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x[0-9a-fA-F]+$/,resolve:(t,e,i)=>Pc(t,2,16,i),stringify:t=>qg(t,16,"0x")};ko.int=Sk;ko.intHex=Ek;ko.intOct=xk;});var jg=_(Dg=>{var kk=Fr(),Ok=xo(),Ck=qr(),Tk=On(),Ak=Lc(),Fc=Rc(),qc=Mc(),Ik=[kk.map,Ck.seq,Tk.string,Ok.nullTag,Ak.boolTag,qc.intOct,qc.int,qc.intHex,Fc.floatNaN,Fc.floatExp,Fc.float];Dg.schema=Ik;});var Vg=_($g=>{var Nk=De(),Lk=Fr(),Bk=qr();function Ug(t){return typeof t=="bigint"||Number.isInteger(t)}var Oo=({value:t})=>JSON.stringify(t),Rk=[{identify:t=>typeof t=="string",default:true,tag:"tag:yaml.org,2002:str",resolve:t=>t,stringify:Oo},{identify:t=>t==null,createNode:()=>new Nk.Scalar(null),default:true,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:Oo},{identify:t=>typeof t=="boolean",default:true,tag:"tag:yaml.org,2002:bool",test:/^true|false$/,resolve:t=>t==="true",stringify:Oo},{identify:Ug,default:true,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:(t,e,{intAsBigInt:i})=>i?BigInt(t):parseInt(t,10),stringify:({value:t})=>Ug(t)?t.toString():JSON.stringify(t)},{identify:t=>typeof t=="number",default:true,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:t=>parseFloat(t),stringify:Oo}],Pk={default:true,tag:"",test:/^/,resolve(t,e){return e(`Unresolved plain scalar ${JSON.stringify(t)}`),t}},Mk=[Lk.map,Bk.seq].concat(Rk,Pk);$g.schema=Mk;});var jc=_(Hg=>{var Dc=De(),Fk=wn(),qk={identify:t=>t instanceof Uint8Array,default:false,tag:"tag:yaml.org,2002:binary",resolve(t,e){if(typeof Buffer=="function")return Buffer.from(t,"base64");if(typeof atob=="function"){let i=atob(t.replace(/[\n\r]/g,"")),r=new Uint8Array(i.length);for(let n=0;n<i.length;++n)r[n]=i.charCodeAt(n);return r}else return e("This environment does not support reading binary tags; either Buffer or atob is required"),t},stringify({comment:t,type:e,value:i},r,n,s){let o=i,a;if(typeof Buffer=="function")a=o instanceof Buffer?o.toString("base64"):Buffer.from(o.buffer).toString("base64");else if(typeof btoa=="function"){let l="";for(let c=0;c<o.length;++c)l+=String.fromCharCode(o[c]);a=btoa(l);}else throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");if(e||(e=Dc.Scalar.BLOCK_LITERAL),e!==Dc.Scalar.QUOTE_DOUBLE){let l=Math.max(r.options.lineWidth-r.indent.length,r.options.minContentWidth),c=Math.ceil(a.length/l),u=new Array(c);for(let f=0,d=0;f<c;++f,d+=l)u[f]=a.substr(d,l);a=u.join(e===Dc.Scalar.BLOCK_LITERAL?`
`:" ");}return Fk.stringifyString({comment:t,type:e,value:a},r,n,s)}};Hg.binary=qk;});var Ao=_(To=>{var Co=Se(),Uc=wi(),Dk=De(),jk=Ei();function Gg(t,e){var i;if(Co.isSeq(t))for(let r=0;r<t.items.length;++r){let n=t.items[r];if(!Co.isPair(n)){if(Co.isMap(n)){n.items.length>1&&e("Each pair must have its own sequence indicator");let s=n.items[0]||new Uc.Pair(new Dk.Scalar(null));if(n.commentBefore&&(s.key.commentBefore=s.key.commentBefore?`${n.commentBefore}
${s.key.commentBefore}`:n.commentBefore),n.comment){let o=(i=s.value)!=null?i:s.key;o.comment=o.comment?`${n.comment}
${o.comment}`:n.comment;}n=s;}t.items[r]=Co.isPair(n)?n:new Uc.Pair(n);}}else e("Expected a sequence for this tag");return t}function Yg(t,e,i){let{replacer:r}=i,n=new jk.YAMLSeq(t);n.tag="tag:yaml.org,2002:pairs";let s=0;if(e&&Symbol.iterator in Object(e))for(let o of e){typeof r=="function"&&(o=r.call(e,String(s++),o));let a,l;if(Array.isArray(o))if(o.length===2)a=o[0],l=o[1];else throw new TypeError(`Expected [key, value] tuple: ${o}`);else if(o&&o instanceof Object){let c=Object.keys(o);if(c.length===1)a=c[0],l=o[a];else throw new TypeError(`Expected tuple with one key, not ${c.length} keys`)}else a=o;n.items.push(Uc.createPair(a,l,i));}return n}var Uk={collection:"seq",default:false,tag:"tag:yaml.org,2002:pairs",resolve:Gg,createNode:Yg};To.createPairs=Yg;To.pairs=Uk;To.resolvePairs=Gg;});var Hc=_(Vc=>{var Wg=Se(),$c=vi(),Cn=Si(),$k=Ei(),Kg=Ao(),Qi=class t extends $k.YAMLSeq{constructor(){super(),this.add=Cn.YAMLMap.prototype.add.bind(this),this.delete=Cn.YAMLMap.prototype.delete.bind(this),this.get=Cn.YAMLMap.prototype.get.bind(this),this.has=Cn.YAMLMap.prototype.has.bind(this),this.set=Cn.YAMLMap.prototype.set.bind(this),this.tag=t.tag;}toJSON(e,i){if(!i)return super.toJSON(e);let r=new Map;i!=null&&i.onCreate&&i.onCreate(r);for(let n of this.items){let s,o;if(Wg.isPair(n)?(s=$c.toJS(n.key,"",i),o=$c.toJS(n.value,s,i)):s=$c.toJS(n,"",i),r.has(s))throw new Error("Ordered maps must not include duplicate keys");r.set(s,o);}return r}static from(e,i,r){let n=Kg.createPairs(e,i,r),s=new this;return s.items=n.items,s}};Qi.tag="tag:yaml.org,2002:omap";var Vk={collection:"seq",identify:t=>t instanceof Map,nodeClass:Qi,default:false,tag:"tag:yaml.org,2002:omap",resolve(t,e){let i=Kg.resolvePairs(t,e),r=[];for(let{key:n}of i.items)Wg.isScalar(n)&&(r.includes(n.value)?e(`Ordered maps must not include duplicate keys: ${n.value}`):r.push(n.value));return Object.assign(new Qi,i)},createNode:(t,e,i)=>Qi.from(t,e,i)};Vc.YAMLOMap=Qi;Vc.omap=Vk;});var Xg=_(Gc=>{var zg=De();function Jg({value:t,source:e},i){return e&&(t?Zg:Qg).test.test(e)?e:t?i.options.trueStr:i.options.falseStr}var Zg={identify:t=>t===true,default:true,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>new zg.Scalar(true),stringify:Jg},Qg={identify:t=>t===false,default:true,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,resolve:()=>new zg.Scalar(false),stringify:Jg};Gc.falseTag=Qg;Gc.trueTag=Zg;});var e0=_(Io=>{var Hk=De(),Yc=Dr(),Gk={identify:t=>typeof t=="number",default:true,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:t=>t.slice(-3).toLowerCase()==="nan"?NaN:t[0]==="-"?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:Yc.stringifyNumber},Yk={identify:t=>typeof t=="number",default:true,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:t=>parseFloat(t.replace(/_/g,"")),stringify(t){let e=Number(t.value);return isFinite(e)?e.toExponential():Yc.stringifyNumber(t)}},Wk={identify:t=>typeof t=="number",default:true,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(t){let e=new Hk.Scalar(parseFloat(t.replace(/_/g,""))),i=t.indexOf(".");if(i!==-1){let r=t.substring(i+1).replace(/_/g,"");r[r.length-1]==="0"&&(e.minFractionDigits=r.length);}return e},stringify:Yc.stringifyNumber};Io.float=Wk;Io.floatExp=Yk;Io.floatNaN=Gk;});var i0=_(An=>{var t0=Dr(),Tn=t=>typeof t=="bigint"||Number.isInteger(t);function No(t,e,i,{intAsBigInt:r}){let n=t[0];if((n==="-"||n==="+")&&(e+=1),t=t.substring(e).replace(/_/g,""),r){switch(i){case 2:t=`0b${t}`;break;case 8:t=`0o${t}`;break;case 16:t=`0x${t}`;break}let o=BigInt(t);return n==="-"?BigInt(-1)*o:o}let s=parseInt(t,i);return n==="-"?-1*s:s}function Wc(t,e,i){let{value:r}=t;if(Tn(r)){let n=r.toString(e);return r<0?"-"+i+n.substr(1):i+n}return t0.stringifyNumber(t)}var Kk={identify:Tn,default:true,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^[-+]?0b[0-1_]+$/,resolve:(t,e,i)=>No(t,2,2,i),stringify:t=>Wc(t,2,"0b")},zk={identify:Tn,default:true,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^[-+]?0[0-7_]+$/,resolve:(t,e,i)=>No(t,1,8,i),stringify:t=>Wc(t,8,"0")},Jk={identify:Tn,default:true,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9][0-9_]*$/,resolve:(t,e,i)=>No(t,0,10,i),stringify:t0.stringifyNumber},Zk={identify:Tn,default:true,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^[-+]?0x[0-9a-fA-F_]+$/,resolve:(t,e,i)=>No(t,2,16,i),stringify:t=>Wc(t,16,"0x")};An.int=Jk;An.intBin=Kk;An.intHex=Zk;An.intOct=zk;});var zc=_(Kc=>{var Ro=Se(),Lo=wi(),Bo=Si(),Xi=class t extends Bo.YAMLMap{constructor(e){super(e),this.tag=t.tag;}add(e){let i;Ro.isPair(e)?i=e:e&&typeof e=="object"&&"key"in e&&"value"in e&&e.value===null?i=new Lo.Pair(e.key,null):i=new Lo.Pair(e,null),Bo.findPair(this.items,i.key)||this.items.push(i);}get(e,i){let r=Bo.findPair(this.items,e);return !i&&Ro.isPair(r)?Ro.isScalar(r.key)?r.key.value:r.key:r}set(e,i){if(typeof i!="boolean")throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof i}`);let r=Bo.findPair(this.items,e);r&&!i?this.items.splice(this.items.indexOf(r),1):!r&&i&&this.items.push(new Lo.Pair(e));}toJSON(e,i){return super.toJSON(e,i,Set)}toString(e,i,r){if(!e)return JSON.stringify(this);if(this.hasAllNullValues(true))return super.toString(Object.assign({},e,{allNullValues:true}),i,r);throw new Error("Set items must all have null values")}static from(e,i,r){let{replacer:n}=r,s=new this(e);if(i&&Symbol.iterator in Object(i))for(let o of i)typeof n=="function"&&(o=n.call(i,o,o)),s.items.push(Lo.createPair(o,null,r));return s}};Xi.tag="tag:yaml.org,2002:set";var Qk={collection:"map",identify:t=>t instanceof Set,nodeClass:Xi,default:false,tag:"tag:yaml.org,2002:set",createNode:(t,e,i)=>Xi.from(t,e,i),resolve(t,e){if(Ro.isMap(t)){if(t.hasAllNullValues(true))return Object.assign(new Xi,t);e("Set items must all have null values");}else e("Expected a mapping for this tag");return t}};Kc.YAMLSet=Xi;Kc.set=Qk;});var Zc=_(Po=>{var Xk=Dr();function Jc(t,e){let i=t[0],r=i==="-"||i==="+"?t.substring(1):t,n=o=>e?BigInt(o):Number(o),s=r.replace(/_/g,"").split(":").reduce((o,a)=>o*n(60)+n(a),n(0));return i==="-"?n(-1)*s:s}function r0(t){let{value:e}=t,i=o=>o;if(typeof e=="bigint")i=o=>BigInt(o);else if(isNaN(e)||!isFinite(e))return Xk.stringifyNumber(t);let r="";e<0&&(r="-",e*=i(-1));let n=i(60),s=[e%n];return e<60?s.unshift(0):(e=(e-s[0])/n,s.unshift(e%n),e>=60&&(e=(e-s[0])/n,s.unshift(e))),r+s.map(o=>String(o).padStart(2,"0")).join(":").replace(/000000\d*$/,"")}var eO={identify:t=>typeof t=="bigint"||Number.isInteger(t),default:true,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,resolve:(t,e,{intAsBigInt:i})=>Jc(t,i),stringify:r0},tO={identify:t=>typeof t=="number",default:true,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,resolve:t=>Jc(t,false),stringify:r0},n0={identify:t=>t instanceof Date,default:true,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),resolve(t){let e=t.match(n0.test);if(!e)throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");let[,i,r,n,s,o,a]=e.map(Number),l=e[7]?Number((e[7]+"00").substr(1,3)):0,c=Date.UTC(i,r-1,n,s||0,o||0,a||0,l),u=e[8];if(u&&u!=="Z"){let f=Jc(u,false);Math.abs(f)<30&&(f*=60),c-=6e4*f;}return new Date(c)},stringify:({value:t})=>t.toISOString().replace(/((T00:00)?:00)?\.000Z$/,"")};Po.floatTime=tO;Po.intTime=eO;Po.timestamp=n0;});var a0=_(o0=>{var iO=Fr(),rO=xo(),nO=qr(),sO=On(),oO=jc(),s0=Xg(),Qc=e0(),Mo=i0(),aO=po(),lO=Hc(),cO=Ao(),uO=zc(),Xc=Zc(),fO=[iO.map,nO.seq,sO.string,rO.nullTag,s0.trueTag,s0.falseTag,Mo.intBin,Mo.intOct,Mo.int,Mo.intHex,Qc.floatNaN,Qc.floatExp,Qc.float,oO.binary,aO.merge,lO.omap,cO.pairs,uO.set,Xc.intTime,Xc.floatTime,Xc.timestamp];o0.schema=fO;});var v0=_(iu=>{var f0=Fr(),hO=xo(),h0=qr(),pO=On(),dO=Lc(),eu=Rc(),tu=Mc(),mO=jg(),gO=Vg(),p0=jc(),In=po(),d0=Hc(),m0=Ao(),l0=a0(),g0=zc(),Fo=Zc(),c0=new Map([["core",mO.schema],["failsafe",[f0.map,h0.seq,pO.string]],["json",gO.schema],["yaml11",l0.schema],["yaml-1.1",l0.schema]]),u0={binary:p0.binary,bool:dO.boolTag,float:eu.float,floatExp:eu.floatExp,floatNaN:eu.floatNaN,floatTime:Fo.floatTime,int:tu.int,intHex:tu.intHex,intOct:tu.intOct,intTime:Fo.intTime,map:f0.map,merge:In.merge,null:hO.nullTag,omap:d0.omap,pairs:m0.pairs,seq:h0.seq,set:g0.set,timestamp:Fo.timestamp},vO={"tag:yaml.org,2002:binary":p0.binary,"tag:yaml.org,2002:merge":In.merge,"tag:yaml.org,2002:omap":d0.omap,"tag:yaml.org,2002:pairs":m0.pairs,"tag:yaml.org,2002:set":g0.set,"tag:yaml.org,2002:timestamp":Fo.timestamp};function yO(t,e,i){let r=c0.get(e);if(r&&!t)return i&&!r.includes(In.merge)?r.concat(In.merge):r.slice();let n=r;if(!n)if(Array.isArray(t))n=[];else {let s=Array.from(c0.keys()).filter(o=>o!=="yaml11").map(o=>JSON.stringify(o)).join(", ");throw new Error(`Unknown schema "${e}"; use one of ${s} or define customTags array`)}if(Array.isArray(t))for(let s of t)n=n.concat(s);else typeof t=="function"&&(n=t(n.slice()));return i&&(n=n.concat(In.merge)),n.reduce((s,o)=>{let a=typeof o=="string"?u0[o]:o;if(!a){let l=JSON.stringify(o),c=Object.keys(u0).map(u=>JSON.stringify(u)).join(", ");throw new Error(`Unknown custom tag ${l}; use one of ${c}`)}return s.includes(a)||s.push(a),s},[])}iu.coreKnownTags=vO;iu.getTags=yO;});var su=_(y0=>{var ru=Se(),bO=Fr(),_O=qr(),wO=On(),qo=v0(),xO=(t,e)=>t.key<e.key?-1:t.key>e.key?1:0,nu=class t{constructor({compat:e,customTags:i,merge:r,resolveKnownTags:n,schema:s,sortMapEntries:o,toStringDefaults:a}){this.compat=Array.isArray(e)?qo.getTags(e,"compat"):e?qo.getTags(null,e):null,this.name=typeof s=="string"&&s||"core",this.knownTags=n?qo.coreKnownTags:{},this.tags=qo.getTags(i,this.name,r),this.toStringOptions=a!=null?a:null,Object.defineProperty(this,ru.MAP,{value:bO.map}),Object.defineProperty(this,ru.SCALAR,{value:wO.string}),Object.defineProperty(this,ru.SEQ,{value:_O.seq}),this.sortMapEntries=typeof o=="function"?o:o===true?xO:null;}clone(){let e=Object.create(t.prototype,Object.getOwnPropertyDescriptors(this));return e.tags=this.tags.slice(),e}};y0.Schema=nu;});var _0=_(b0=>{var SO=Se(),ou=xn(),Nn=yn();function EO(t,e){var l;let i=[],r=e.directives===true;if(e.directives!==false&&t.directives){let c=t.directives.toString(t);c?(i.push(c),r=true):t.directives.docStart&&(r=true);}r&&i.push("---");let n=ou.createStringifyContext(t,e),{commentString:s}=n.options;if(t.commentBefore){i.length!==1&&i.unshift("");let c=s(t.commentBefore);i.unshift(Nn.indentComment(c,""));}let o=false,a=null;if(t.contents){if(SO.isNode(t.contents)){if(t.contents.spaceBefore&&r&&i.push(""),t.contents.commentBefore){let f=s(t.contents.commentBefore);i.push(Nn.indentComment(f,""));}n.forceBlockIndent=!!t.comment,a=t.contents.comment;}let c=a?void 0:()=>o=true,u=ou.stringify(t.contents,n,()=>a=null,c);a&&(u+=Nn.lineComment(u,"",s(a))),(u[0]==="|"||u[0]===">")&&i[i.length-1]==="---"?i[i.length-1]=`--- ${u}`:i.push(u);}else i.push(ou.stringify(t.contents,n));if((l=t.directives)!=null&&l.docEnd)if(t.comment){let c=s(t.comment);c.includes(`
`)?(i.push("..."),i.push(Nn.indentComment(c,""))):i.push(`... ${c}`);}else i.push("...");else {let c=t.comment;c&&o&&(c=c.replace(/^\n+/,"")),c&&((!o||a)&&i[i.length-1]!==""&&i.push(""),i.push(Nn.indentComment(s(c),"")));}return i.join(`
`)+`
`}b0.stringifyDocument=EO;});var Ln=_(w0=>{var kO=gn(),jr=no(),It=Se(),OO=wi(),CO=vi(),TO=su(),AO=_0(),au=Xs(),IO=fc(),NO=vn(),lu=uc(),cu=class t{constructor(e,i,r){this.commentBefore=null,this.comment=null,this.errors=[],this.warnings=[],Object.defineProperty(this,It.NODE_TYPE,{value:It.DOC});let n=null;typeof i=="function"||Array.isArray(i)?n=i:r===void 0&&i&&(r=i,i=void 0);let s=Object.assign({intAsBigInt:false,keepSourceTokens:false,logLevel:"warn",prettyErrors:true,strict:true,stringKeys:false,uniqueKeys:true,version:"1.2"},r);this.options=s;let{version:o}=s;r!=null&&r._directives?(this.directives=r._directives.atDocument(),this.directives.yaml.explicit&&(o=this.directives.yaml.version)):this.directives=new lu.Directives({version:o}),this.setSchema(o,r),this.contents=e===void 0?null:this.createNode(e,n,r);}clone(){let e=Object.create(t.prototype,{[It.NODE_TYPE]:{value:It.DOC}});return e.commentBefore=this.commentBefore,e.comment=this.comment,e.errors=this.errors.slice(),e.warnings=this.warnings.slice(),e.options=Object.assign({},this.options),this.directives&&(e.directives=this.directives.clone()),e.schema=this.schema.clone(),e.contents=It.isNode(this.contents)?this.contents.clone(e.schema):this.contents,this.range&&(e.range=this.range.slice()),e}add(e){Ur(this.contents)&&this.contents.add(e);}addIn(e,i){Ur(this.contents)&&this.contents.addIn(e,i);}createAlias(e,i){if(!e.anchor){let r=au.anchorNames(this);e.anchor=!i||r.has(i)?au.findNewAnchor(i||"a",r):i;}return new kO.Alias(e.anchor)}createNode(e,i,r){let n;if(typeof i=="function")e=i.call({"":e},"",e),n=i;else if(Array.isArray(i)){let b=E=>typeof E=="number"||E instanceof String||E instanceof Number,x=i.filter(b).map(String);x.length>0&&(i=i.concat(x)),n=i;}else r===void 0&&i&&(r=i,i=void 0);let{aliasDuplicateObjects:s,anchorPrefix:o,flow:a,keepUndefined:l,onTagObj:c,tag:u}=r!=null?r:{},{onAnchor:f,setAnchors:d,sourceObjects:g}=au.createNodeAnchors(this,o||"a"),m={aliasDuplicateObjects:s!=null?s:true,keepUndefined:l!=null?l:false,onAnchor:f,onTagObj:c,replacer:n,schema:this.schema,sourceObjects:g},y=NO.createNode(e,u,m);return a&&It.isCollection(y)&&(y.flow=true),d(),y}createPair(e,i,r={}){let n=this.createNode(e,null,r),s=this.createNode(i,null,r);return new OO.Pair(n,s)}delete(e){return Ur(this.contents)?this.contents.delete(e):false}deleteIn(e){return jr.isEmptyPath(e)?this.contents==null?false:(this.contents=null,true):Ur(this.contents)?this.contents.deleteIn(e):false}get(e,i){return It.isCollection(this.contents)?this.contents.get(e,i):void 0}getIn(e,i){return jr.isEmptyPath(e)?!i&&It.isScalar(this.contents)?this.contents.value:this.contents:It.isCollection(this.contents)?this.contents.getIn(e,i):void 0}has(e){return It.isCollection(this.contents)?this.contents.has(e):false}hasIn(e){return jr.isEmptyPath(e)?this.contents!==void 0:It.isCollection(this.contents)?this.contents.hasIn(e):false}set(e,i){this.contents==null?this.contents=jr.collectionFromPath(this.schema,[e],i):Ur(this.contents)&&this.contents.set(e,i);}setIn(e,i){jr.isEmptyPath(e)?this.contents=i:this.contents==null?this.contents=jr.collectionFromPath(this.schema,Array.from(e),i):Ur(this.contents)&&this.contents.setIn(e,i);}setSchema(e,i={}){typeof e=="number"&&(e=String(e));let r;switch(e){case "1.1":this.directives?this.directives.yaml.version="1.1":this.directives=new lu.Directives({version:"1.1"}),r={resolveKnownTags:false,schema:"yaml-1.1"};break;case "1.2":case "next":this.directives?this.directives.yaml.version=e:this.directives=new lu.Directives({version:e}),r={resolveKnownTags:true,schema:"core"};break;case null:this.directives&&delete this.directives,r=null;break;default:{let n=JSON.stringify(e);throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${n}`)}}if(i.schema instanceof Object)this.schema=i.schema;else if(r)this.schema=new TO.Schema(Object.assign(r,i));else throw new Error("With a null YAML version, the { schema: Schema } option is required")}toJS({json:e,jsonArg:i,mapAsMap:r,maxAliasCount:n,onAnchor:s,reviver:o}={}){let a={anchors:new Map,doc:this,keep:!e,mapAsMap:r===true,mapKeyWarned:false,maxAliasCount:typeof n=="number"?n:100},l=CO.toJS(this.contents,i!=null?i:"",a);if(typeof s=="function")for(let{count:c,res:u}of a.anchors.values())s(u,c);return typeof o=="function"?IO.applyReviver(o,{"":l},"",l):l}toJSON(e,i){return this.toJS({json:true,jsonArg:e,mapAsMap:false,onAnchor:i})}toString(e={}){if(this.errors.length>0)throw new Error("Document with errors cannot be stringified");if("indent"in e&&(!Number.isInteger(e.indent)||Number(e.indent)<=0)){let i=JSON.stringify(e.indent);throw new Error(`"indent" option must be a positive integer, not ${i}`)}return AO.stringifyDocument(this,e)}};function Ur(t){if(It.isCollection(t))return  true;throw new Error("Expected a YAML collection as document contents")}w0.Document=cu;});var Pn=_(Rn=>{var Bn=class extends Error{constructor(e,i,r,n){super(),this.name=e,this.code=r,this.message=n,this.pos=i;}},uu=class extends Bn{constructor(e,i,r){super("YAMLParseError",e,i,r);}},fu=class extends Bn{constructor(e,i,r){super("YAMLWarning",e,i,r);}},LO=(t,e)=>i=>{if(i.pos[0]===-1)return;i.linePos=i.pos.map(a=>e.linePos(a));let{line:r,col:n}=i.linePos[0];i.message+=` at line ${r}, column ${n}`;let s=n-1,o=t.substring(e.lineStarts[r-1],e.lineStarts[r]).replace(/[\n\r]+$/,"");if(s>=60&&o.length>80){let a=Math.min(s-39,o.length-79);o="\u2026"+o.substring(a),s-=a-1;}if(o.length>80&&(o=o.substring(0,79)+"\u2026"),r>1&&/^ *$/.test(o.substring(0,s))){let a=t.substring(e.lineStarts[r-2],e.lineStarts[r-1]);a.length>80&&(a=a.substring(0,79)+`\u2026
`),o=a+o;}if(/[^ ]/.test(o)){let a=1,l=i.linePos[1];l&&l.line===r&&l.col>n&&(a=Math.max(1,Math.min(l.col-n,80-s)));let c=" ".repeat(s)+"^".repeat(a);i.message+=`:

${o}
${c}
`;}};Rn.YAMLError=Bn;Rn.YAMLParseError=uu;Rn.YAMLWarning=fu;Rn.prettifyError=LO;});var Mn=_(x0=>{function BO(t,{flow:e,indicator:i,next:r,offset:n,onError:s,parentIndent:o,startOnNewline:a}){let l=false,c=a,u=a,f="",d="",g=false,m=false,y=null,b=null,x=null,E=null,O=null,k=null,S=null;for(let A of t)switch(m&&(A.type!=="space"&&A.type!=="newline"&&A.type!=="comma"&&s(A.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),m=false),y&&(c&&A.type!=="comment"&&A.type!=="newline"&&s(y,"TAB_AS_INDENT","Tabs are not allowed as indentation"),y=null),A.type){case "space":!e&&(i!=="doc-start"||(r==null?void 0:r.type)!=="flow-collection")&&A.source.includes("	")&&(y=A),u=true;break;case "comment":{u||s(A,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");let C=A.source.substring(1)||" ";f?f+=d+C:f=C,d="",c=false;break}case "newline":c?f?f+=A.source:l=true:d+=A.source,c=true,g=true,(b||x)&&(E=A),u=true;break;case "anchor":b&&s(A,"MULTIPLE_ANCHORS","A node can have at most one anchor"),A.source.endsWith(":")&&s(A.offset+A.source.length-1,"BAD_ALIAS","Anchor ending in : is ambiguous",true),b=A,S===null&&(S=A.offset),c=false,u=false,m=true;break;case "tag":{x&&s(A,"MULTIPLE_TAGS","A node can have at most one tag"),x=A,S===null&&(S=A.offset),c=false,u=false,m=true;break}case i:(b||x)&&s(A,"BAD_PROP_ORDER",`Anchors and tags must be after the ${A.source} indicator`),k&&s(A,"UNEXPECTED_TOKEN",`Unexpected ${A.source} in ${e!=null?e:"collection"}`),k=A,c=i==="seq-item-ind"||i==="explicit-key-ind",u=false;break;case "comma":if(e){O&&s(A,"UNEXPECTED_TOKEN",`Unexpected , in ${e}`),O=A,c=false,u=false;break}default:s(A,"UNEXPECTED_TOKEN",`Unexpected ${A.type} token`),c=false,u=false;}let R=t[t.length-1],T=R?R.offset+R.source.length:n;return m&&r&&r.type!=="space"&&r.type!=="newline"&&r.type!=="comma"&&(r.type!=="scalar"||r.source!=="")&&s(r.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),y&&(c&&y.indent<=o||(r==null?void 0:r.type)==="block-map"||(r==null?void 0:r.type)==="block-seq")&&s(y,"TAB_AS_INDENT","Tabs are not allowed as indentation"),{comma:O,found:k,spaceBefore:l,comment:f,hasNewline:g,anchor:b,tag:x,newlineAfterProp:E,end:T,start:S!=null?S:T}}x0.resolveProps=BO;});var Do=_(S0=>{function hu(t){if(!t)return null;switch(t.type){case "alias":case "scalar":case "double-quoted-scalar":case "single-quoted-scalar":if(t.source.includes(`
`))return  true;if(t.end){for(let e of t.end)if(e.type==="newline")return  true}return  false;case "flow-collection":for(let e of t.items){for(let i of e.start)if(i.type==="newline")return  true;if(e.sep){for(let i of e.sep)if(i.type==="newline")return  true}if(hu(e.key)||hu(e.value))return  true}return  false;default:return  true}}S0.containsNewline=hu;});var pu=_(E0=>{var RO=Do();function PO(t,e,i){if((e==null?void 0:e.type)==="flow-collection"){let r=e.end[0];r.indent===t&&(r.source==="]"||r.source==="}")&&RO.containsNewline(e)&&i(r,"BAD_INDENT","Flow end indicator should be more indented than parent",true);}}E0.flowIndentCheck=PO;});var du=_(O0=>{var k0=Se();function MO(t,e,i){let{uniqueKeys:r}=t.options;if(r===false)return  false;let n=typeof r=="function"?r:(s,o)=>s===o||k0.isScalar(s)&&k0.isScalar(o)&&s.value===o.value;return e.some(s=>n(s.key,i))}O0.mapIncludes=MO;});var L0=_(N0=>{var C0=wi(),FO=Si(),T0=Mn(),qO=Do(),A0=pu(),DO=du(),I0="All mapping items must start at the same column";function jO({composeNode:t,composeEmptyNode:e},i,r,n,s){var u,f;let o=(u=s==null?void 0:s.nodeClass)!=null?u:FO.YAMLMap,a=new o(i.schema);i.atRoot&&(i.atRoot=false);let l=r.offset,c=null;for(let d of r.items){let{start:g,key:m,sep:y,value:b}=d,x=T0.resolveProps(g,{indicator:"explicit-key-ind",next:m!=null?m:y==null?void 0:y[0],offset:l,onError:n,parentIndent:r.indent,startOnNewline:true}),E=!x.found;if(E){if(m&&(m.type==="block-seq"?n(l,"BLOCK_AS_IMPLICIT_KEY","A block sequence may not be used as an implicit map key"):"indent"in m&&m.indent!==r.indent&&n(l,"BAD_INDENT",I0)),!x.anchor&&!x.tag&&!y){c=x.end,x.comment&&(a.comment?a.comment+=`
`+x.comment:a.comment=x.comment);continue}(x.newlineAfterProp||qO.containsNewline(m))&&n(m!=null?m:g[g.length-1],"MULTILINE_IMPLICIT_KEY","Implicit keys need to be on a single line");}else ((f=x.found)==null?void 0:f.indent)!==r.indent&&n(l,"BAD_INDENT",I0);i.atKey=true;let O=x.end,k=m?t(i,m,x,n):e(i,O,g,null,x,n);i.schema.compat&&A0.flowIndentCheck(r.indent,m,n),i.atKey=false,DO.mapIncludes(i,a.items,k)&&n(O,"DUPLICATE_KEY","Map keys must be unique");let S=T0.resolveProps(y!=null?y:[],{indicator:"map-value-ind",next:b,offset:k.range[2],onError:n,parentIndent:r.indent,startOnNewline:!m||m.type==="block-scalar"});if(l=S.end,S.found){E&&((b==null?void 0:b.type)==="block-map"&&!S.hasNewline&&n(l,"BLOCK_AS_IMPLICIT_KEY","Nested mappings are not allowed in compact mappings"),i.options.strict&&x.start<S.found.offset-1024&&n(k.range,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));let R=b?t(i,b,S,n):e(i,l,y,null,S,n);i.schema.compat&&A0.flowIndentCheck(r.indent,b,n),l=R.range[2];let T=new C0.Pair(k,R);i.options.keepSourceTokens&&(T.srcToken=d),a.items.push(T);}else {E&&n(k.range,"MISSING_CHAR","Implicit map keys need to be followed by map values"),S.comment&&(k.comment?k.comment+=`
`+S.comment:k.comment=S.comment);let R=new C0.Pair(k);i.options.keepSourceTokens&&(R.srcToken=d),a.items.push(R);}}return c&&c<l&&n(c,"IMPOSSIBLE","Map comment with trailing content"),a.range=[r.offset,l,c!=null?c:l],a}N0.resolveBlockMap=jO;});var R0=_(B0=>{var UO=Ei(),$O=Mn(),VO=pu();function HO({composeNode:t,composeEmptyNode:e},i,r,n,s){var u;let o=(u=s==null?void 0:s.nodeClass)!=null?u:UO.YAMLSeq,a=new o(i.schema);i.atRoot&&(i.atRoot=false),i.atKey&&(i.atKey=false);let l=r.offset,c=null;for(let{start:f,value:d}of r.items){let g=$O.resolveProps(f,{indicator:"seq-item-ind",next:d,offset:l,onError:n,parentIndent:r.indent,startOnNewline:true});if(!g.found)if(g.anchor||g.tag||d)d&&d.type==="block-seq"?n(g.end,"BAD_INDENT","All sequence items must start at the same column"):n(l,"MISSING_CHAR","Sequence item without - indicator");else {c=g.end,g.comment&&(a.comment=g.comment);continue}let m=d?t(i,d,g,n):e(i,g.end,f,null,g,n);i.schema.compat&&VO.flowIndentCheck(r.indent,d,n),l=m.range[2],a.items.push(m);}return a.range=[r.offset,l,c!=null?c:l],a}B0.resolveBlockSeq=HO;});var $r=_(P0=>{function GO(t,e,i,r){let n="";if(t){let s=false,o="";for(let a of t){let{source:l,type:c}=a;switch(c){case "space":s=true;break;case "comment":{i&&!s&&r(a,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");let u=l.substring(1)||" ";n?n+=o+u:n=u,o="";break}case "newline":n&&(o+=l),s=true;break;default:r(a,"UNEXPECTED_TOKEN",`Unexpected ${c} at node end`);}e+=l.length;}}return {comment:n,offset:e}}P0.resolveEnd=GO;});var D0=_(q0=>{var YO=Se(),WO=wi(),M0=Si(),KO=Ei(),zO=$r(),F0=Mn(),JO=Do(),ZO=du(),mu="Block collections are not allowed within flow collections",gu=t=>t&&(t.type==="block-map"||t.type==="block-seq");function QO({composeNode:t,composeEmptyNode:e},i,r,n,s){var b,x;let o=r.start.source==="{",a=o?"flow map":"flow sequence",l=(b=s==null?void 0:s.nodeClass)!=null?b:o?M0.YAMLMap:KO.YAMLSeq,c=new l(i.schema);c.flow=true;let u=i.atRoot;u&&(i.atRoot=false),i.atKey&&(i.atKey=false);let f=r.offset+r.start.source.length;for(let E=0;E<r.items.length;++E){let O=r.items[E],{start:k,key:S,sep:R,value:T}=O,A=F0.resolveProps(k,{flow:a,indicator:"explicit-key-ind",next:S!=null?S:R==null?void 0:R[0],offset:f,onError:n,parentIndent:r.indent,startOnNewline:false});if(!A.found){if(!A.anchor&&!A.tag&&!R&&!T){E===0&&A.comma?n(A.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`):E<r.items.length-1&&n(A.start,"UNEXPECTED_TOKEN",`Unexpected empty item in ${a}`),A.comment&&(c.comment?c.comment+=`
`+A.comment:c.comment=A.comment),f=A.end;continue}!o&&i.options.strict&&JO.containsNewline(S)&&n(S,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");}if(E===0)A.comma&&n(A.comma,"UNEXPECTED_TOKEN",`Unexpected , in ${a}`);else if(A.comma||n(A.start,"MISSING_CHAR",`Missing , between ${a} items`),A.comment){let C="";e:for(let L of k)switch(L.type){case "comma":case "space":break;case "comment":C=L.source.substring(1);break e;default:break e}if(C){let L=c.items[c.items.length-1];YO.isPair(L)&&(L=(x=L.value)!=null?x:L.key),L.comment?L.comment+=`
`+C:L.comment=C,A.comment=A.comment.substring(C.length+1);}}if(!o&&!R&&!A.found){let C=T?t(i,T,A,n):e(i,A.end,R,null,A,n);c.items.push(C),f=C.range[2],gu(T)&&n(C.range,"BLOCK_IN_FLOW",mu);}else {i.atKey=true;let C=A.end,L=S?t(i,S,A,n):e(i,C,k,null,A,n);gu(S)&&n(L.range,"BLOCK_IN_FLOW",mu),i.atKey=false;let P=F0.resolveProps(R!=null?R:[],{flow:a,indicator:"map-value-ind",next:T,offset:L.range[2],onError:n,parentIndent:r.indent,startOnNewline:false});if(P.found){if(!o&&!A.found&&i.options.strict){if(R)for(let H of R){if(H===P.found)break;if(H.type==="newline"){n(H,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");break}}A.start<P.found.offset-1024&&n(P.found,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");}}else T&&("source"in T&&T.source&&T.source[0]===":"?n(T,"MISSING_CHAR",`Missing space after : in ${a}`):n(P.start,"MISSING_CHAR",`Missing , or : between ${a} items`));let U=T?t(i,T,P,n):P.found?e(i,P.end,R,null,P,n):null;U?gu(T)&&n(U.range,"BLOCK_IN_FLOW",mu):P.comment&&(L.comment?L.comment+=`
`+P.comment:L.comment=P.comment);let q=new WO.Pair(L,U);if(i.options.keepSourceTokens&&(q.srcToken=O),o){let H=c;ZO.mapIncludes(i,H.items,L)&&n(C,"DUPLICATE_KEY","Map keys must be unique"),H.items.push(q);}else {let H=new M0.YAMLMap(i.schema);H.flow=true,H.items.push(q);let j=(U!=null?U:L).range;H.range=[L.range[0],j[1],j[2]],c.items.push(H);}f=U?U.range[2]:P.end;}}let d=o?"}":"]",[g,...m]=r.end,y=f;if(g&&g.source===d)y=g.offset+g.source.length;else {let E=a[0].toUpperCase()+a.substring(1),O=u?`${E} must end with a ${d}`:`${E} in block collection must be sufficiently indented and end with a ${d}`;n(f,u?"MISSING_CHAR":"BAD_INDENT",O),g&&g.source.length!==1&&m.unshift(g);}if(m.length>0){let E=zO.resolveEnd(m,y,i.options.strict,n);E.comment&&(c.comment?c.comment+=`
`+E.comment:c.comment=E.comment),c.range=[r.offset,y,E.offset];}else c.range=[r.offset,y,y];return c}q0.resolveFlowCollection=QO;});var U0=_(j0=>{var XO=Se(),eC=De(),tC=Si(),iC=Ei(),rC=L0(),nC=R0(),sC=D0();function vu(t,e,i,r,n,s){let o=i.type==="block-map"?rC.resolveBlockMap(t,e,i,r,s):i.type==="block-seq"?nC.resolveBlockSeq(t,e,i,r,s):sC.resolveFlowCollection(t,e,i,r,s),a=o.constructor;return n==="!"||n===a.tagName?(o.tag=a.tagName,o):(n&&(o.tag=n),o)}function oC(t,e,i,r,n){var d,g;let s=r.tag,o=s?e.directives.tagName(s.source,m=>n(s,"TAG_RESOLVE_FAILED",m)):null;if(i.type==="block-seq"){let{anchor:m,newlineAfterProp:y}=r,b=m&&s?m.offset>s.offset?m:s:m!=null?m:s;b&&(!y||y.offset<b.offset)&&n(b,"MISSING_CHAR","Missing newline after block sequence props");}let a=i.type==="block-map"?"map":i.type==="block-seq"?"seq":i.start.source==="{"?"map":"seq";if(!s||!o||o==="!"||o===tC.YAMLMap.tagName&&a==="map"||o===iC.YAMLSeq.tagName&&a==="seq")return vu(t,e,i,n,o);let l=e.schema.tags.find(m=>m.tag===o&&m.collection===a);if(!l){let m=e.schema.knownTags[o];if(m&&m.collection===a)e.schema.tags.push(Object.assign({},m,{default:false})),l=m;else return m!=null&&m.collection?n(s,"BAD_COLLECTION_TYPE",`${m.tag} used for ${a} collection, but expects ${m.collection}`,true):n(s,"TAG_RESOLVE_FAILED",`Unresolved tag: ${o}`,true),vu(t,e,i,n,o)}let c=vu(t,e,i,n,o,l),u=(g=(d=l.resolve)==null?void 0:d.call(l,c,m=>n(s,"TAG_RESOLVE_FAILED",m),e.options))!=null?g:c,f=XO.isNode(u)?u:new eC.Scalar(u);return f.range=c.range,f.tag=o,l!=null&&l.format&&(f.format=l.format),f}j0.composeCollection=oC;});var bu=_($0=>{var yu=De();function aC(t,e,i){let r=e.offset,n=lC(e,t.options.strict,i);if(!n)return {value:"",type:null,comment:"",range:[r,r,r]};let s=n.mode===">"?yu.Scalar.BLOCK_FOLDED:yu.Scalar.BLOCK_LITERAL,o=e.source?cC(e.source):[],a=o.length;for(let y=o.length-1;y>=0;--y){let b=o[y][1];if(b===""||b==="\r")a=y;else break}if(a===0){let y=n.chomp==="+"&&o.length>0?`
`.repeat(Math.max(1,o.length-1)):"",b=r+n.length;return e.source&&(b+=e.source.length),{value:y,type:s,comment:n.comment,range:[r,b,b]}}let l=e.indent+n.indent,c=e.offset+n.length,u=0;for(let y=0;y<a;++y){let[b,x]=o[y];if(x===""||x==="\r")n.indent===0&&b.length>l&&(l=b.length);else {b.length<l&&i(c+b.length,"MISSING_CHAR","Block scalars with more-indented leading empty lines must use an explicit indentation indicator"),n.indent===0&&(l=b.length),u=y,l===0&&!t.atRoot&&i(c,"BAD_INDENT","Block scalar values in collections must be indented");break}c+=b.length+x.length+1;}for(let y=o.length-1;y>=a;--y)o[y][0].length>l&&(a=y+1);let f="",d="",g=false;for(let y=0;y<u;++y)f+=o[y][0].slice(l)+`
`;for(let y=u;y<a;++y){let[b,x]=o[y];c+=b.length+x.length+1;let E=x[x.length-1]==="\r";if(E&&(x=x.slice(0,-1)),x&&b.length<l){let k=`Block scalar lines must not be less indented than their ${n.indent?"explicit indentation indicator":"first line"}`;i(c-x.length-(E?2:1),"BAD_INDENT",k),b="";}s===yu.Scalar.BLOCK_LITERAL?(f+=d+b.slice(l)+x,d=`
`):b.length>l||x[0]==="	"?(d===" "?d=`
`:!g&&d===`
`&&(d=`

`),f+=d+b.slice(l)+x,d=`
`,g=true):x===""?d===`
`?f+=`
`:d=`
`:(f+=d+x,d=" ",g=false);}switch(n.chomp){case "-":break;case "+":for(let y=a;y<o.length;++y)f+=`
`+o[y][0].slice(l);f[f.length-1]!==`
`&&(f+=`
`);break;default:f+=`
`;}let m=r+n.length+e.source.length;return {value:f,type:s,comment:n.comment,range:[r,m,m]}}function lC({offset:t,props:e},i,r){if(e[0].type!=="block-scalar-header")return r(e[0],"IMPOSSIBLE","Block scalar header not found"),null;let{source:n}=e[0],s=n[0],o=0,a="",l=-1;for(let d=1;d<n.length;++d){let g=n[d];if(!a&&(g==="-"||g==="+"))a=g;else {let m=Number(g);!o&&m?o=m:l===-1&&(l=t+d);}}l!==-1&&r(l,"UNEXPECTED_TOKEN",`Block scalar header includes extra characters: ${n}`);let c=false,u="",f=n.length;for(let d=1;d<e.length;++d){let g=e[d];switch(g.type){case "space":c=true;case "newline":f+=g.source.length;break;case "comment":i&&!c&&r(g,"MISSING_CHAR","Comments must be separated from other tokens by white space characters"),f+=g.source.length,u=g.source.substring(1);break;case "error":r(g,"UNEXPECTED_TOKEN",g.message),f+=g.source.length;break;default:{let m=`Unexpected token in block scalar header: ${g.type}`;r(g,"UNEXPECTED_TOKEN",m);let y=g.source;y&&typeof y=="string"&&(f+=y.length);}}}return {mode:s,indent:o,chomp:a,comment:u,length:f}}function cC(t){let e=t.split(/\n( *)/),i=e[0],r=i.match(/^( *)/),s=[r!=null&&r[1]?[r[1],i.slice(r[1].length)]:["",i]];for(let o=1;o<e.length;o+=2)s.push([e[o],e[o+1]]);return s}$0.resolveBlockScalar=aC;});var wu=_(H0=>{var _u=De(),uC=$r();function fC(t,e,i){let{offset:r,type:n,source:s,end:o}=t,a,l,c=(d,g,m)=>i(r+d,g,m);switch(n){case "scalar":a=_u.Scalar.PLAIN,l=hC(s,c);break;case "single-quoted-scalar":a=_u.Scalar.QUOTE_SINGLE,l=pC(s,c);break;case "double-quoted-scalar":a=_u.Scalar.QUOTE_DOUBLE,l=dC(s,c);break;default:return i(t,"UNEXPECTED_TOKEN",`Expected a flow scalar value, but found: ${n}`),{value:"",type:null,comment:"",range:[r,r+s.length,r+s.length]}}let u=r+s.length,f=uC.resolveEnd(o,u,e,i);return {value:l,type:a,comment:f.comment,range:[r,u,f.offset]}}function hC(t,e){let i="";switch(t[0]){case "	":i="a tab character";break;case ",":i="flow indicator character ,";break;case "%":i="directive indicator character %";break;case "|":case ">":{i=`block scalar indicator ${t[0]}`;break}case "@":case "`":{i=`reserved character ${t[0]}`;break}}return i&&e(0,"BAD_SCALAR_START",`Plain value cannot start with ${i}`),V0(t)}function pC(t,e){return (t[t.length-1]!=="'"||t.length===1)&&e(t.length,"MISSING_CHAR","Missing closing 'quote"),V0(t.slice(1,-1)).replace(/''/g,"'")}function V0(t){var l;let e,i;try{e=new RegExp(`(.*?)(?<![ 	])[ 	]*\r?
`,"sy"),i=new RegExp(`[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?
`,"sy");}catch{e=/(.*?)[ \t]*\r?\n/sy,i=/[ \t]*(.*?)[ \t]*\r?\n/sy;}let r=e.exec(t);if(!r)return t;let n=r[1],s=" ",o=e.lastIndex;for(i.lastIndex=o;r=i.exec(t);)r[1]===""?s===`
`?n+=s:s=`
`:(n+=s+r[1],s=" "),o=i.lastIndex;let a=/[ \t]*(.*)/sy;return a.lastIndex=o,r=a.exec(t),n+s+((l=r==null?void 0:r[1])!=null?l:"")}function dC(t,e){let i="";for(let r=1;r<t.length-1;++r){let n=t[r];if(!(n==="\r"&&t[r+1]===`
`))if(n===`
`){let{fold:s,offset:o}=mC(t,r);i+=s,r=o;}else if(n==="\\"){let s=t[++r],o=gC[s];if(o)i+=o;else if(s===`
`)for(s=t[r+1];s===" "||s==="	";)s=t[++r+1];else if(s==="\r"&&t[r+1]===`
`)for(s=t[++r+1];s===" "||s==="	";)s=t[++r+1];else if(s==="x"||s==="u"||s==="U"){let a={x:2,u:4,U:8}[s];i+=vC(t,r+1,a,e),r+=a;}else {let a=t.substr(r-1,2);e(r-1,"BAD_DQ_ESCAPE",`Invalid escape sequence ${a}`),i+=a;}}else if(n===" "||n==="	"){let s=r,o=t[r+1];for(;o===" "||o==="	";)o=t[++r+1];o!==`
`&&!(o==="\r"&&t[r+2]===`
`)&&(i+=r>s?t.slice(s,r+1):n);}else i+=n;}return (t[t.length-1]!=='"'||t.length===1)&&e(t.length,"MISSING_CHAR",'Missing closing "quote'),i}function mC(t,e){let i="",r=t[e+1];for(;(r===" "||r==="	"||r===`
`||r==="\r")&&!(r==="\r"&&t[e+2]!==`
`);)r===`
`&&(i+=`
`),e+=1,r=t[e+1];return i||(i=" "),{fold:i,offset:e}}var gC={0:"\0",a:"\x07",b:"\b",e:"\x1B",f:"\f",n:`
`,r:"\r",t:"	",v:"\v",N:"\x85",_:"\xA0",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","	":"	"};function vC(t,e,i,r){let n=t.substr(e,i),o=n.length===i&&/^[0-9a-fA-F]+$/.test(n)?parseInt(n,16):NaN;if(isNaN(o)){let a=t.substr(e-2,i+2);return r(e-2,"BAD_DQ_ESCAPE",`Invalid escape sequence ${a}`),a}return String.fromCodePoint(o)}H0.resolveFlowScalar=fC;});var W0=_(Y0=>{var er=Se(),G0=De(),yC=bu(),bC=wu();function _C(t,e,i,r){let{value:n,type:s,comment:o,range:a}=e.type==="block-scalar"?yC.resolveBlockScalar(t,e,r):bC.resolveFlowScalar(e,t.options.strict,r),l=i?t.directives.tagName(i.source,f=>r(i,"TAG_RESOLVE_FAILED",f)):null,c;t.options.stringKeys&&t.atKey?c=t.schema[er.SCALAR]:l?c=wC(t.schema,n,l,i,r):e.type==="scalar"?c=xC(t,n,e,r):c=t.schema[er.SCALAR];let u;try{let f=c.resolve(n,d=>r(i!=null?i:e,"TAG_RESOLVE_FAILED",d),t.options);u=er.isScalar(f)?f:new G0.Scalar(f);}catch(f){let d=f instanceof Error?f.message:String(f);r(i!=null?i:e,"TAG_RESOLVE_FAILED",d),u=new G0.Scalar(n);}return u.range=a,u.source=n,s&&(u.type=s),l&&(u.tag=l),c.format&&(u.format=c.format),o&&(u.comment=o),u}function wC(t,e,i,r,n){var a;if(i==="!")return t[er.SCALAR];let s=[];for(let l of t.tags)if(!l.collection&&l.tag===i)if(l.default&&l.test)s.push(l);else return l;for(let l of s)if((a=l.test)!=null&&a.test(e))return l;let o=t.knownTags[i];return o&&!o.collection?(t.tags.push(Object.assign({},o,{default:false,test:void 0})),o):(n(r,"TAG_RESOLVE_FAILED",`Unresolved tag: ${i}`,i!=="tag:yaml.org,2002:str"),t[er.SCALAR])}function xC({atKey:t,directives:e,schema:i},r,n,s){var a;let o=i.tags.find(l=>{var c;return (l.default===true||t&&l.default==="key")&&((c=l.test)==null?void 0:c.test(r))})||i[er.SCALAR];if(i.compat){let l=(a=i.compat.find(c=>{var u;return c.default&&((u=c.test)==null?void 0:u.test(r))}))!=null?a:i[er.SCALAR];if(o.tag!==l.tag){let c=e.tagString(o.tag),u=e.tagString(l.tag),f=`Value may be parsed as either ${c} or ${u}`;s(n,"TAG_RESOLVE_FAILED",f,true);}}return o}Y0.composeScalar=_C;});var z0=_(K0=>{function SC(t,e,i){if(e){i===null&&(i=e.length);for(let r=i-1;r>=0;--r){let n=e[r];switch(n.type){case "space":case "comment":case "newline":t-=n.source.length;continue}for(n=e[++r];(n==null?void 0:n.type)==="space";)t+=n.source.length,n=e[++r];break}}return t}K0.emptyScalarPosition=SC;});var Q0=_(Su=>{var EC=gn(),kC=Se(),OC=U0(),J0=W0(),CC=$r(),TC=z0(),AC={composeNode:Z0,composeEmptyNode:xu};function Z0(t,e,i,r){let n=t.atKey,{spaceBefore:s,comment:o,anchor:a,tag:l}=i,c,u=true;switch(e.type){case "alias":c=IC(t,e,r),(a||l)&&r(e,"ALIAS_PROPS","An alias node must not specify any properties");break;case "scalar":case "single-quoted-scalar":case "double-quoted-scalar":case "block-scalar":c=J0.composeScalar(t,e,l,r),a&&(c.anchor=a.source.substring(1));break;case "block-map":case "block-seq":case "flow-collection":c=OC.composeCollection(AC,t,e,i,r),a&&(c.anchor=a.source.substring(1));break;default:{let f=e.type==="error"?e.message:`Unsupported token (type: ${e.type})`;r(e,"UNEXPECTED_TOKEN",f),c=xu(t,e.offset,void 0,null,i,r),u=false;}}return a&&c.anchor===""&&r(a,"BAD_ALIAS","Anchor cannot be an empty string"),n&&t.options.stringKeys&&(!kC.isScalar(c)||typeof c.value!="string"||c.tag&&c.tag!=="tag:yaml.org,2002:str")&&r(l!=null?l:e,"NON_STRING_KEY","With stringKeys, all keys must be strings"),s&&(c.spaceBefore=true),o&&(e.type==="scalar"&&e.source===""?c.comment=o:c.commentBefore=o),t.options.keepSourceTokens&&u&&(c.srcToken=e),c}function xu(t,e,i,r,{spaceBefore:n,comment:s,anchor:o,tag:a,end:l},c){let u={type:"scalar",offset:TC.emptyScalarPosition(e,i,r),indent:-1,source:""},f=J0.composeScalar(t,u,a,c);return o&&(f.anchor=o.source.substring(1),f.anchor===""&&c(o,"BAD_ALIAS","Anchor cannot be an empty string")),n&&(f.spaceBefore=true),s&&(f.comment=s,f.range[2]=l),f}function IC({options:t},{offset:e,source:i,end:r},n){let s=new EC.Alias(i.substring(1));s.source===""&&n(e,"BAD_ALIAS","Alias cannot be an empty string"),s.source.endsWith(":")&&n(e+i.length-1,"BAD_ALIAS","Alias ending in : is ambiguous",true);let o=e+i.length,a=CC.resolveEnd(r,o,t.strict,n);return s.range=[e,o,a.offset],a.comment&&(s.comment=a.comment),s}Su.composeEmptyNode=xu;Su.composeNode=Z0;});var tv=_(ev=>{var NC=Ln(),X0=Q0(),LC=$r(),BC=Mn();function RC(t,e,{offset:i,start:r,value:n,end:s},o){let a=Object.assign({_directives:e},t),l=new NC.Document(void 0,a),c={atKey:false,atRoot:true,directives:l.directives,options:l.options,schema:l.schema},u=BC.resolveProps(r,{indicator:"doc-start",next:n!=null?n:s==null?void 0:s[0],offset:i,onError:o,parentIndent:0,startOnNewline:true});u.found&&(l.directives.docStart=true,n&&(n.type==="block-map"||n.type==="block-seq")&&!u.hasNewline&&o(u.end,"MISSING_CHAR","Block collection cannot start on same line with directives-end marker")),l.contents=n?X0.composeNode(c,n,u,o):X0.composeEmptyNode(c,u.end,r,null,u,o);let f=l.contents.range[2],d=LC.resolveEnd(s,f,false,o);return d.comment&&(l.comment=d.comment),l.range=[i,f,d.offset],l}ev.composeDoc=RC;});var ku=_(nv=>{var PC=uc(),MC=Ln(),Fn=Pn(),iv=Se(),FC=tv(),qC=$r();function qn(t){if(typeof t=="number")return [t,t+1];if(Array.isArray(t))return t.length===2?t:[t[0],t[1]];let{offset:e,source:i}=t;return [e,e+(typeof i=="string"?i.length:1)]}function rv(t){var n;let e="",i=false,r=false;for(let s=0;s<t.length;++s){let o=t[s];switch(o[0]){case "#":e+=(e===""?"":r?`

`:`
`)+(o.substring(1)||" "),i=true,r=false;break;case "%":((n=t[s+1])==null?void 0:n[0])!=="#"&&(s+=1),i=false;break;default:i||(r=true),i=false;}}return {comment:e,afterEmptyLine:r}}var Eu=class{constructor(e={}){this.doc=null,this.atDirectives=false,this.prelude=[],this.errors=[],this.warnings=[],this.onError=(i,r,n,s)=>{let o=qn(i);s?this.warnings.push(new Fn.YAMLWarning(o,r,n)):this.errors.push(new Fn.YAMLParseError(o,r,n));},this.directives=new PC.Directives({version:e.version||"1.2"}),this.options=e;}decorate(e,i){let{comment:r,afterEmptyLine:n}=rv(this.prelude);if(r){let s=e.contents;if(i)e.comment=e.comment?`${e.comment}
${r}`:r;else if(n||e.directives.docStart||!s)e.commentBefore=r;else if(iv.isCollection(s)&&!s.flow&&s.items.length>0){let o=s.items[0];iv.isPair(o)&&(o=o.key);let a=o.commentBefore;o.commentBefore=a?`${r}
${a}`:r;}else {let o=s.commentBefore;s.commentBefore=o?`${r}
${o}`:r;}}i?(Array.prototype.push.apply(e.errors,this.errors),Array.prototype.push.apply(e.warnings,this.warnings)):(e.errors=this.errors,e.warnings=this.warnings),this.prelude=[],this.errors=[],this.warnings=[];}streamInfo(){return {comment:rv(this.prelude).comment,directives:this.directives,errors:this.errors,warnings:this.warnings}}*compose(e,i=false,r=-1){for(let n of e)yield*this.next(n);yield*this.end(i,r);}*next(e){switch(process.env.LOG_STREAM&&console.dir(e,{depth:null}),e.type){case "directive":this.directives.add(e.source,(i,r,n)=>{let s=qn(e);s[0]+=i,this.onError(s,"BAD_DIRECTIVE",r,n);}),this.prelude.push(e.source),this.atDirectives=true;break;case "document":{let i=FC.composeDoc(this.options,this.directives,e,this.onError);this.atDirectives&&!i.directives.docStart&&this.onError(e,"MISSING_CHAR","Missing directives-end/doc-start indicator line"),this.decorate(i,false),this.doc&&(yield this.doc),this.doc=i,this.atDirectives=false;break}case "byte-order-mark":case "space":break;case "comment":case "newline":this.prelude.push(e.source);break;case "error":{let i=e.source?`${e.message}: ${JSON.stringify(e.source)}`:e.message,r=new Fn.YAMLParseError(qn(e),"UNEXPECTED_TOKEN",i);this.atDirectives||!this.doc?this.errors.push(r):this.doc.errors.push(r);break}case "doc-end":{if(!this.doc){let r="Unexpected doc-end without preceding document";this.errors.push(new Fn.YAMLParseError(qn(e),"UNEXPECTED_TOKEN",r));break}this.doc.directives.docEnd=true;let i=qC.resolveEnd(e.end,e.offset+e.source.length,this.doc.options.strict,this.onError);if(this.decorate(this.doc,true),i.comment){let r=this.doc.comment;this.doc.comment=r?`${r}
${i.comment}`:i.comment;}this.doc.range[2]=i.offset;break}default:this.errors.push(new Fn.YAMLParseError(qn(e),"UNEXPECTED_TOKEN",`Unsupported token ${e.type}`));}}*end(e=false,i=-1){if(this.doc)this.decorate(this.doc,true),yield this.doc,this.doc=null;else if(e){let r=Object.assign({_directives:this.directives},this.options),n=new MC.Document(void 0,r);this.atDirectives&&this.onError(i,"MISSING_CHAR","Missing directives-end indicator line"),n.range=[0,i,i],this.decorate(n,false),yield n;}}};nv.Composer=Eu;});var av=_(jo=>{var DC=bu(),jC=wu(),UC=Pn(),sv=wn();function $C(t,e=true,i){if(t){let r=(n,s,o)=>{let a=typeof n=="number"?n:Array.isArray(n)?n[0]:n.offset;if(i)i(a,s,o);else throw new UC.YAMLParseError([a,a+1],s,o)};switch(t.type){case "scalar":case "single-quoted-scalar":case "double-quoted-scalar":return jC.resolveFlowScalar(t,e,r);case "block-scalar":return DC.resolveBlockScalar({options:{strict:e}},t,r)}}return null}function VC(t,e){var c;let{implicitKey:i=false,indent:r,inFlow:n=false,offset:s=-1,type:o="PLAIN"}=e,a=sv.stringifyString({type:o,value:t},{implicitKey:i,indent:r>0?" ".repeat(r):"",inFlow:n,options:{blockQuote:true,lineWidth:-1}}),l=(c=e.end)!=null?c:[{type:"newline",offset:-1,indent:r,source:`
`}];switch(a[0]){case "|":case ">":{let u=a.indexOf(`
`),f=a.substring(0,u),d=a.substring(u+1)+`
`,g=[{type:"block-scalar-header",offset:s,indent:r,source:f}];return ov(g,l)||g.push({type:"newline",offset:-1,indent:r,source:`
`}),{type:"block-scalar",offset:s,indent:r,props:g,source:d}}case '"':return {type:"double-quoted-scalar",offset:s,indent:r,source:a,end:l};case "'":return {type:"single-quoted-scalar",offset:s,indent:r,source:a,end:l};default:return {type:"scalar",offset:s,indent:r,source:a,end:l}}}function HC(t,e,i={}){let{afterKey:r=false,implicitKey:n=false,inFlow:s=false,type:o}=i,a="indent"in t?t.indent:null;if(r&&typeof a=="number"&&(a+=2),!o)switch(t.type){case "single-quoted-scalar":o="QUOTE_SINGLE";break;case "double-quoted-scalar":o="QUOTE_DOUBLE";break;case "block-scalar":{let c=t.props[0];if(c.type!=="block-scalar-header")throw new Error("Invalid block scalar header");o=c.source[0]===">"?"BLOCK_FOLDED":"BLOCK_LITERAL";break}default:o="PLAIN";}let l=sv.stringifyString({type:o,value:e},{implicitKey:n||a===null,indent:a!==null&&a>0?" ".repeat(a):"",inFlow:s,options:{blockQuote:true,lineWidth:-1}});switch(l[0]){case "|":case ">":GC(t,l);break;case '"':Ou(t,l,"double-quoted-scalar");break;case "'":Ou(t,l,"single-quoted-scalar");break;default:Ou(t,l,"scalar");}}function GC(t,e){let i=e.indexOf(`
`),r=e.substring(0,i),n=e.substring(i+1)+`
`;if(t.type==="block-scalar"){let s=t.props[0];if(s.type!=="block-scalar-header")throw new Error("Invalid block scalar header");s.source=r,t.source=n;}else {let{offset:s}=t,o="indent"in t?t.indent:-1,a=[{type:"block-scalar-header",offset:s,indent:o,source:r}];ov(a,"end"in t?t.end:void 0)||a.push({type:"newline",offset:-1,indent:o,source:`
`});for(let l of Object.keys(t))l!=="type"&&l!=="offset"&&delete t[l];Object.assign(t,{type:"block-scalar",indent:o,props:a,source:n});}}function ov(t,e){if(e)for(let i of e)switch(i.type){case "space":case "comment":t.push(i);break;case "newline":return t.push(i),true}return  false}function Ou(t,e,i){switch(t.type){case "scalar":case "double-quoted-scalar":case "single-quoted-scalar":t.type=i,t.source=e;break;case "block-scalar":{let r=t.props.slice(1),n=e.length;t.props[0].type==="block-scalar-header"&&(n-=t.props[0].source.length);for(let s of r)s.offset+=n;delete t.props,Object.assign(t,{type:i,source:e,end:r});break}case "block-map":case "block-seq":{let n={type:"newline",offset:t.offset+e.length,indent:t.indent,source:`
`};delete t.items,Object.assign(t,{type:i,source:e,end:[n]});break}default:{let r="indent"in t?t.indent:-1,n="end"in t&&Array.isArray(t.end)?t.end.filter(s=>s.type==="space"||s.type==="comment"||s.type==="newline"):[];for(let s of Object.keys(t))s!=="type"&&s!=="offset"&&delete t[s];Object.assign(t,{type:i,indent:r,source:e,end:n});}}}jo.createScalarToken=VC;jo.resolveAsScalar=$C;jo.setScalarValue=HC;});var cv=_(lv=>{var YC=t=>"type"in t?$o(t):Uo(t);function $o(t){switch(t.type){case "block-scalar":{let e="";for(let i of t.props)e+=$o(i);return e+t.source}case "block-map":case "block-seq":{let e="";for(let i of t.items)e+=Uo(i);return e}case "flow-collection":{let e=t.start.source;for(let i of t.items)e+=Uo(i);for(let i of t.end)e+=i.source;return e}case "document":{let e=Uo(t);if(t.end)for(let i of t.end)e+=i.source;return e}default:{let e=t.source;if("end"in t&&t.end)for(let i of t.end)e+=i.source;return e}}}function Uo({start:t,key:e,sep:i,value:r}){let n="";for(let s of t)n+=s.source;if(e&&(n+=$o(e)),i)for(let s of i)n+=s.source;return r&&(n+=$o(r)),n}lv.stringify=YC;});var pv=_(hv=>{var Cu=Symbol("break visit"),WC=Symbol("skip children"),uv=Symbol("remove item");function tr(t,e){"type"in t&&t.type==="document"&&(t={start:t.start,value:t.value}),fv(Object.freeze([]),t,e);}tr.BREAK=Cu;tr.SKIP=WC;tr.REMOVE=uv;tr.itemAtPath=(t,e)=>{let i=t;for(let[r,n]of e){let s=i==null?void 0:i[r];if(s&&"items"in s)i=s.items[n];else return}return i};tr.parentCollection=(t,e)=>{let i=tr.itemAtPath(t,e.slice(0,-1)),r=e[e.length-1][0],n=i==null?void 0:i[r];if(n&&"items"in n)return n;throw new Error("Parent collection not found")};function fv(t,e,i){let r=i(e,t);if(typeof r=="symbol")return r;for(let n of ["key","value"]){let s=e[n];if(s&&"items"in s){for(let o=0;o<s.items.length;++o){let a=fv(Object.freeze(t.concat([[n,o]])),s.items[o],i);if(typeof a=="number")o=a-1;else {if(a===Cu)return Cu;a===uv&&(s.items.splice(o,1),o-=1);}}typeof r=="function"&&n==="key"&&(r=r(e,t));}}return typeof r=="function"?r(e,t):r}hv.visit=tr;});var Vo=_(gt=>{var Tu=av(),KC=cv(),zC=pv(),Au="\uFEFF",Iu="",Nu="",Lu="",JC=t=>!!t&&"items"in t,ZC=t=>!!t&&(t.type==="scalar"||t.type==="single-quoted-scalar"||t.type==="double-quoted-scalar"||t.type==="block-scalar");function QC(t){switch(t){case Au:return "<BOM>";case Iu:return "<DOC>";case Nu:return "<FLOW_END>";case Lu:return "<SCALAR>";default:return JSON.stringify(t)}}function XC(t){switch(t){case Au:return "byte-order-mark";case Iu:return "doc-mode";case Nu:return "flow-error-end";case Lu:return "scalar";case "---":return "doc-start";case "...":return "doc-end";case "":case `
`:case `\r
`:return "newline";case "-":return "seq-item-ind";case "?":return "explicit-key-ind";case ":":return "map-value-ind";case "{":return "flow-map-start";case "}":return "flow-map-end";case "[":return "flow-seq-start";case "]":return "flow-seq-end";case ",":return "comma"}switch(t[0]){case " ":case "	":return "space";case "#":return "comment";case "%":return "directive-line";case "*":return "alias";case "&":return "anchor";case "!":return "tag";case "'":return "single-quoted-scalar";case '"':return "double-quoted-scalar";case "|":case ">":return "block-scalar-header"}return null}gt.createScalarToken=Tu.createScalarToken;gt.resolveAsScalar=Tu.resolveAsScalar;gt.setScalarValue=Tu.setScalarValue;gt.stringify=KC.stringify;gt.visit=zC.visit;gt.BOM=Au;gt.DOCUMENT=Iu;gt.FLOW_END=Nu;gt.SCALAR=Lu;gt.isCollection=JC;gt.isScalar=ZC;gt.prettyToken=QC;gt.tokenType=XC;});var Pu=_(mv=>{var Dn=Vo();function jt(t){switch(t){case void 0:case " ":case `
`:case "\r":case "	":return  true;default:return  false}}var dv=new Set("0123456789ABCDEFabcdef"),eT=new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"),Ho=new Set(",[]{}"),tT=new Set(` ,[]{}
\r	`),Bu=t=>!t||tT.has(t),Ru=class{constructor(){this.atEnd=false,this.blockScalarIndent=-1,this.blockScalarKeep=false,this.buffer="",this.flowKey=false,this.flowLevel=0,this.indentNext=0,this.indentValue=0,this.lineEndPos=null,this.next=null,this.pos=0;}*lex(e,i=false){var n;if(e){if(typeof e!="string")throw TypeError("source is not a string");this.buffer=this.buffer?this.buffer+e:e,this.lineEndPos=null;}this.atEnd=!i;let r=(n=this.next)!=null?n:"stream";for(;r&&(i||this.hasChars(1));)r=yield*this.parseNext(r);}atLineEnd(){let e=this.pos,i=this.buffer[e];for(;i===" "||i==="	";)i=this.buffer[++e];return !i||i==="#"||i===`
`?true:i==="\r"?this.buffer[e+1]===`
`:false}charAt(e){return this.buffer[this.pos+e]}continueScalar(e){let i=this.buffer[e];if(this.indentNext>0){let r=0;for(;i===" ";)i=this.buffer[++r+e];if(i==="\r"){let n=this.buffer[r+e+1];if(n===`
`||!n&&!this.atEnd)return e+r+1}return i===`
`||r>=this.indentNext||!i&&!this.atEnd?e+r:-1}if(i==="-"||i==="."){let r=this.buffer.substr(e,3);if((r==="---"||r==="...")&&jt(this.buffer[e+3]))return  -1}return e}getLine(){let e=this.lineEndPos;return (typeof e!="number"||e!==-1&&e<this.pos)&&(e=this.buffer.indexOf(`
`,this.pos),this.lineEndPos=e),e===-1?this.atEnd?this.buffer.substring(this.pos):null:(this.buffer[e-1]==="\r"&&(e-=1),this.buffer.substring(this.pos,e))}hasChars(e){return this.pos+e<=this.buffer.length}setNext(e){return this.buffer=this.buffer.substring(this.pos),this.pos=0,this.lineEndPos=null,this.next=e,null}peek(e){return this.buffer.substr(this.pos,e)}*parseNext(e){switch(e){case "stream":return yield*this.parseStream();case "line-start":return yield*this.parseLineStart();case "block-start":return yield*this.parseBlockStart();case "doc":return yield*this.parseDocument();case "flow":return yield*this.parseFlowCollection();case "quoted-scalar":return yield*this.parseQuotedScalar();case "block-scalar":return yield*this.parseBlockScalar();case "plain-scalar":return yield*this.parsePlainScalar()}}*parseStream(){let e=this.getLine();if(e===null)return this.setNext("stream");if(e[0]===Dn.BOM&&(yield*this.pushCount(1),e=e.substring(1)),e[0]==="%"){let i=e.length,r=e.indexOf("#");for(;r!==-1;){let s=e[r-1];if(s===" "||s==="	"){i=r-1;break}else r=e.indexOf("#",r+1);}for(;;){let s=e[i-1];if(s===" "||s==="	")i-=1;else break}let n=(yield*this.pushCount(i))+(yield*this.pushSpaces(true));return yield*this.pushCount(e.length-n),this.pushNewline(),"stream"}if(this.atLineEnd()){let i=yield*this.pushSpaces(true);return yield*this.pushCount(e.length-i),yield*this.pushNewline(),"stream"}return yield Dn.DOCUMENT,yield*this.parseLineStart()}*parseLineStart(){let e=this.charAt(0);if(!e&&!this.atEnd)return this.setNext("line-start");if(e==="-"||e==="."){if(!this.atEnd&&!this.hasChars(4))return this.setNext("line-start");let i=this.peek(3);if((i==="---"||i==="...")&&jt(this.charAt(3)))return yield*this.pushCount(3),this.indentValue=0,this.indentNext=0,i==="---"?"doc":"stream"}return this.indentValue=yield*this.pushSpaces(false),this.indentNext>this.indentValue&&!jt(this.charAt(1))&&(this.indentNext=this.indentValue),yield*this.parseBlockStart()}*parseBlockStart(){let[e,i]=this.peek(2);if(!i&&!this.atEnd)return this.setNext("block-start");if((e==="-"||e==="?"||e===":")&&jt(i)){let r=(yield*this.pushCount(1))+(yield*this.pushSpaces(true));return this.indentNext=this.indentValue+1,this.indentValue+=r,yield*this.parseBlockStart()}return "doc"}*parseDocument(){yield*this.pushSpaces(true);let e=this.getLine();if(e===null)return this.setNext("doc");let i=yield*this.pushIndicators();switch(e[i]){case "#":yield*this.pushCount(e.length-i);case void 0:return yield*this.pushNewline(),yield*this.parseLineStart();case "{":case "[":return yield*this.pushCount(1),this.flowKey=false,this.flowLevel=1,"flow";case "}":case "]":return yield*this.pushCount(1),"doc";case "*":return yield*this.pushUntil(Bu),"doc";case '"':case "'":return yield*this.parseQuotedScalar();case "|":case ">":return i+=yield*this.parseBlockScalarHeader(),i+=yield*this.pushSpaces(true),yield*this.pushCount(e.length-i),yield*this.pushNewline(),yield*this.parseBlockScalar();default:return yield*this.parsePlainScalar()}}*parseFlowCollection(){let e,i,r=-1;do e=yield*this.pushNewline(),e>0?(i=yield*this.pushSpaces(false),this.indentValue=r=i):i=0,i+=yield*this.pushSpaces(true);while(e+i>0);let n=this.getLine();if(n===null)return this.setNext("flow");if((r!==-1&&r<this.indentNext&&n[0]!=="#"||r===0&&(n.startsWith("---")||n.startsWith("..."))&&jt(n[3]))&&!(r===this.indentNext-1&&this.flowLevel===1&&(n[0]==="]"||n[0]==="}")))return this.flowLevel=0,yield Dn.FLOW_END,yield*this.parseLineStart();let s=0;for(;n[s]===",";)s+=yield*this.pushCount(1),s+=yield*this.pushSpaces(true),this.flowKey=false;switch(s+=yield*this.pushIndicators(),n[s]){case void 0:return "flow";case "#":return yield*this.pushCount(n.length-s),"flow";case "{":case "[":return yield*this.pushCount(1),this.flowKey=false,this.flowLevel+=1,"flow";case "}":case "]":return yield*this.pushCount(1),this.flowKey=true,this.flowLevel-=1,this.flowLevel?"flow":"doc";case "*":return yield*this.pushUntil(Bu),"flow";case '"':case "'":return this.flowKey=true,yield*this.parseQuotedScalar();case ":":{let o=this.charAt(1);if(this.flowKey||jt(o)||o===",")return this.flowKey=false,yield*this.pushCount(1),yield*this.pushSpaces(true),"flow"}default:return this.flowKey=false,yield*this.parsePlainScalar()}}*parseQuotedScalar(){let e=this.charAt(0),i=this.buffer.indexOf(e,this.pos+1);if(e==="'")for(;i!==-1&&this.buffer[i+1]==="'";)i=this.buffer.indexOf("'",i+2);else for(;i!==-1;){let s=0;for(;this.buffer[i-1-s]==="\\";)s+=1;if(s%2===0)break;i=this.buffer.indexOf('"',i+1);}let r=this.buffer.substring(0,i),n=r.indexOf(`
`,this.pos);if(n!==-1){for(;n!==-1;){let s=this.continueScalar(n+1);if(s===-1)break;n=r.indexOf(`
`,s);}n!==-1&&(i=n-(r[n-1]==="\r"?2:1));}if(i===-1){if(!this.atEnd)return this.setNext("quoted-scalar");i=this.buffer.length;}return yield*this.pushToIndex(i+1,false),this.flowLevel?"flow":"doc"}*parseBlockScalarHeader(){this.blockScalarIndent=-1,this.blockScalarKeep=false;let e=this.pos;for(;;){let i=this.buffer[++e];if(i==="+")this.blockScalarKeep=true;else if(i>"0"&&i<="9")this.blockScalarIndent=Number(i)-1;else if(i!=="-")break}return yield*this.pushUntil(i=>jt(i)||i==="#")}*parseBlockScalar(){let e=this.pos-1,i=0,r;e:for(let s=this.pos;r=this.buffer[s];++s)switch(r){case " ":i+=1;break;case `
`:e=s,i=0;break;case "\r":{let o=this.buffer[s+1];if(!o&&!this.atEnd)return this.setNext("block-scalar");if(o===`
`)break}default:break e}if(!r&&!this.atEnd)return this.setNext("block-scalar");if(i>=this.indentNext){this.blockScalarIndent===-1?this.indentNext=i:this.indentNext=this.blockScalarIndent+(this.indentNext===0?1:this.indentNext);do{let s=this.continueScalar(e+1);if(s===-1)break;e=this.buffer.indexOf(`
`,s);}while(e!==-1);if(e===-1){if(!this.atEnd)return this.setNext("block-scalar");e=this.buffer.length;}}let n=e+1;for(r=this.buffer[n];r===" ";)r=this.buffer[++n];if(r==="	"){for(;r==="	"||r===" "||r==="\r"||r===`
`;)r=this.buffer[++n];e=n-1;}else if(!this.blockScalarKeep)do{let s=e-1,o=this.buffer[s];o==="\r"&&(o=this.buffer[--s]);let a=s;for(;o===" ";)o=this.buffer[--s];if(o===`
`&&s>=this.pos&&s+1+i>a)e=s;else break}while(true);return yield Dn.SCALAR,yield*this.pushToIndex(e+1,true),yield*this.parseLineStart()}*parsePlainScalar(){let e=this.flowLevel>0,i=this.pos-1,r=this.pos-1,n;for(;n=this.buffer[++r];)if(n===":"){let s=this.buffer[r+1];if(jt(s)||e&&Ho.has(s))break;i=r;}else if(jt(n)){let s=this.buffer[r+1];if(n==="\r"&&(s===`
`?(r+=1,n=`
`,s=this.buffer[r+1]):i=r),s==="#"||e&&Ho.has(s))break;if(n===`
`){let o=this.continueScalar(r+1);if(o===-1)break;r=Math.max(r,o-2);}}else {if(e&&Ho.has(n))break;i=r;}return !n&&!this.atEnd?this.setNext("plain-scalar"):(yield Dn.SCALAR,yield*this.pushToIndex(i+1,true),e?"flow":"doc")}*pushCount(e){return e>0?(yield this.buffer.substr(this.pos,e),this.pos+=e,e):0}*pushToIndex(e,i){let r=this.buffer.slice(this.pos,e);return r?(yield r,this.pos+=r.length,r.length):(i&&(yield ""),0)}*pushIndicators(){switch(this.charAt(0)){case "!":return (yield*this.pushTag())+(yield*this.pushSpaces(true))+(yield*this.pushIndicators());case "&":return (yield*this.pushUntil(Bu))+(yield*this.pushSpaces(true))+(yield*this.pushIndicators());case "-":case "?":case ":":{let e=this.flowLevel>0,i=this.charAt(1);if(jt(i)||e&&Ho.has(i))return e?this.flowKey&&(this.flowKey=false):this.indentNext=this.indentValue+1,(yield*this.pushCount(1))+(yield*this.pushSpaces(true))+(yield*this.pushIndicators())}}return 0}*pushTag(){if(this.charAt(1)==="<"){let e=this.pos+2,i=this.buffer[e];for(;!jt(i)&&i!==">";)i=this.buffer[++e];return yield*this.pushToIndex(i===">"?e+1:e,false)}else {let e=this.pos+1,i=this.buffer[e];for(;i;)if(eT.has(i))i=this.buffer[++e];else if(i==="%"&&dv.has(this.buffer[e+1])&&dv.has(this.buffer[e+2]))i=this.buffer[e+=3];else break;return yield*this.pushToIndex(e,false)}}*pushNewline(){let e=this.buffer[this.pos];return e===`
`?yield*this.pushCount(1):e==="\r"&&this.charAt(1)===`
`?yield*this.pushCount(2):0}*pushSpaces(e){let i=this.pos-1,r;do r=this.buffer[++i];while(r===" "||e&&r==="	");let n=i-this.pos;return n>0&&(yield this.buffer.substr(this.pos,n),this.pos=i),n}*pushUntil(e){let i=this.pos,r=this.buffer[i];for(;!e(r);)r=this.buffer[++i];return yield*this.pushToIndex(i,false)}};mv.Lexer=Ru;});var Fu=_(gv=>{var Mu=class{constructor(){this.lineStarts=[],this.addNewLine=e=>this.lineStarts.push(e),this.linePos=e=>{let i=0,r=this.lineStarts.length;for(;i<r;){let s=i+r>>1;this.lineStarts[s]<e?i=s+1:r=s;}if(this.lineStarts[i]===e)return {line:i+1,col:1};if(i===0)return {line:0,col:e};let n=this.lineStarts[i-1];return {line:i,col:e-n+1}};}};gv.LineCounter=Mu;});var Du=_(wv=>{var vv=Vo(),iT=Pu();function ir(t,e){for(let i=0;i<t.length;++i)if(t[i].type===e)return  true;return  false}function yv(t){for(let e=0;e<t.length;++e)switch(t[e].type){case "space":case "comment":case "newline":break;default:return e}return  -1}function _v(t){switch(t==null?void 0:t.type){case "alias":case "scalar":case "single-quoted-scalar":case "double-quoted-scalar":case "flow-collection":return  true;default:return  false}}function Go(t){var e;switch(t.type){case "document":return t.start;case "block-map":{let i=t.items[t.items.length-1];return (e=i.sep)!=null?e:i.start}case "block-seq":return t.items[t.items.length-1].start;default:return []}}function Vr(t){var i;if(t.length===0)return [];let e=t.length;e:for(;--e>=0;)switch(t[e].type){case "doc-start":case "explicit-key-ind":case "map-value-ind":case "seq-item-ind":case "newline":break e}for(;((i=t[++e])==null?void 0:i.type)==="space";);return t.splice(e,t.length)}function bv(t){if(t.start.type==="flow-seq-start")for(let e of t.items)e.sep&&!e.value&&!ir(e.start,"explicit-key-ind")&&!ir(e.sep,"map-value-ind")&&(e.key&&(e.value=e.key),delete e.key,_v(e.value)?e.value.end?Array.prototype.push.apply(e.value.end,e.sep):e.value.end=e.sep:Array.prototype.push.apply(e.start,e.sep),delete e.sep);}var qu=class{constructor(e){this.atNewLine=true,this.atScalar=false,this.indent=0,this.offset=0,this.onKeyLine=false,this.stack=[],this.source="",this.type="",this.lexer=new iT.Lexer,this.onNewLine=e;}*parse(e,i=false){this.onNewLine&&this.offset===0&&this.onNewLine(0);for(let r of this.lexer.lex(e,i))yield*this.next(r);i||(yield*this.end());}*next(e){if(this.source=e,process.env.LOG_TOKENS&&console.log("|",vv.prettyToken(e)),this.atScalar){this.atScalar=false,yield*this.step(),this.offset+=e.length;return}let i=vv.tokenType(e);if(i)if(i==="scalar")this.atNewLine=false,this.atScalar=true,this.type="scalar";else {switch(this.type=i,yield*this.step(),i){case "newline":this.atNewLine=true,this.indent=0,this.onNewLine&&this.onNewLine(this.offset+e.length);break;case "space":this.atNewLine&&e[0]===" "&&(this.indent+=e.length);break;case "explicit-key-ind":case "map-value-ind":case "seq-item-ind":this.atNewLine&&(this.indent+=e.length);break;case "doc-mode":case "flow-error-end":return;default:this.atNewLine=false;}this.offset+=e.length;}else {let r=`Not a YAML token: ${e}`;yield*this.pop({type:"error",offset:this.offset,message:r,source:e}),this.offset+=e.length;}}*end(){for(;this.stack.length>0;)yield*this.pop();}get sourceToken(){return {type:this.type,offset:this.offset,indent:this.indent,source:this.source}}*step(){let e=this.peek(1);if(this.type==="doc-end"&&(!e||e.type!=="doc-end")){for(;this.stack.length>0;)yield*this.pop();this.stack.push({type:"doc-end",offset:this.offset,source:this.source});return}if(!e)return yield*this.stream();switch(e.type){case "document":return yield*this.document(e);case "alias":case "scalar":case "single-quoted-scalar":case "double-quoted-scalar":return yield*this.scalar(e);case "block-scalar":return yield*this.blockScalar(e);case "block-map":return yield*this.blockMap(e);case "block-seq":return yield*this.blockSequence(e);case "flow-collection":return yield*this.flowCollection(e);case "doc-end":return yield*this.documentEnd(e)}yield*this.pop();}peek(e){return this.stack[this.stack.length-e]}*pop(e){let i=e!=null?e:this.stack.pop();if(!i)yield {type:"error",offset:this.offset,source:"",message:"Tried to pop an empty stack"};else if(this.stack.length===0)yield i;else {let r=this.peek(1);switch(i.type==="block-scalar"?i.indent="indent"in r?r.indent:0:i.type==="flow-collection"&&r.type==="document"&&(i.indent=0),i.type==="flow-collection"&&bv(i),r.type){case "document":r.value=i;break;case "block-scalar":r.props.push(i);break;case "block-map":{let n=r.items[r.items.length-1];if(n.value){r.items.push({start:[],key:i,sep:[]}),this.onKeyLine=true;return}else if(n.sep)n.value=i;else {Object.assign(n,{key:i,sep:[]}),this.onKeyLine=!n.explicitKey;return}break}case "block-seq":{let n=r.items[r.items.length-1];n.value?r.items.push({start:[],value:i}):n.value=i;break}case "flow-collection":{let n=r.items[r.items.length-1];!n||n.value?r.items.push({start:[],key:i,sep:[]}):n.sep?n.value=i:Object.assign(n,{key:i,sep:[]});return}default:yield*this.pop(),yield*this.pop(i);}if((r.type==="document"||r.type==="block-map"||r.type==="block-seq")&&(i.type==="block-map"||i.type==="block-seq")){let n=i.items[i.items.length-1];n&&!n.sep&&!n.value&&n.start.length>0&&yv(n.start)===-1&&(i.indent===0||n.start.every(s=>s.type!=="comment"||s.indent<i.indent))&&(r.type==="document"?r.end=n.start:r.items.push({start:n.start}),i.items.splice(-1,1));}}}*stream(){switch(this.type){case "directive-line":yield {type:"directive",offset:this.offset,source:this.source};return;case "byte-order-mark":case "space":case "comment":case "newline":yield this.sourceToken;return;case "doc-mode":case "doc-start":{let e={type:"document",offset:this.offset,start:[]};this.type==="doc-start"&&e.start.push(this.sourceToken),this.stack.push(e);return}}yield {type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML stream`,source:this.source};}*document(e){if(e.value)return yield*this.lineEnd(e);switch(this.type){case "doc-start":{yv(e.start)!==-1?(yield*this.pop(),yield*this.step()):e.start.push(this.sourceToken);return}case "anchor":case "tag":case "space":case "comment":case "newline":e.start.push(this.sourceToken);return}let i=this.startBlockValue(e);i?this.stack.push(i):yield {type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML document`,source:this.source};}*scalar(e){if(this.type==="map-value-ind"){let i=Go(this.peek(2)),r=Vr(i),n;e.end?(n=e.end,n.push(this.sourceToken),delete e.end):n=[this.sourceToken];let s={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:r,key:e,sep:n}]};this.onKeyLine=true,this.stack[this.stack.length-1]=s;}else yield*this.lineEnd(e);}*blockScalar(e){switch(this.type){case "space":case "comment":case "newline":e.props.push(this.sourceToken);return;case "scalar":if(e.source=this.source,this.atNewLine=true,this.indent=0,this.onNewLine){let i=this.source.indexOf(`
`)+1;for(;i!==0;)this.onNewLine(this.offset+i),i=this.source.indexOf(`
`,i)+1;}yield*this.pop();break;default:yield*this.pop(),yield*this.step();}}*blockMap(e){var r;let i=e.items[e.items.length-1];switch(this.type){case "newline":if(this.onKeyLine=false,i.value){let n="end"in i.value?i.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;(s==null?void 0:s.type)==="comment"?n==null||n.push(this.sourceToken):e.items.push({start:[this.sourceToken]});}else i.sep?i.sep.push(this.sourceToken):i.start.push(this.sourceToken);return;case "space":case "comment":if(i.value)e.items.push({start:[this.sourceToken]});else if(i.sep)i.sep.push(this.sourceToken);else {if(this.atIndentedComment(i.start,e.indent)){let n=e.items[e.items.length-2],s=(r=n==null?void 0:n.value)==null?void 0:r.end;if(Array.isArray(s)){Array.prototype.push.apply(s,i.start),s.push(this.sourceToken),e.items.pop();return}}i.start.push(this.sourceToken);}return}if(this.indent>=e.indent){let n=!this.onKeyLine&&this.indent===e.indent,s=n&&(i.sep||i.explicitKey)&&this.type!=="seq-item-ind",o=[];if(s&&i.sep&&!i.value){let a=[];for(let l=0;l<i.sep.length;++l){let c=i.sep[l];switch(c.type){case "newline":a.push(l);break;case "space":break;case "comment":c.indent>e.indent&&(a.length=0);break;default:a.length=0;}}a.length>=2&&(o=i.sep.splice(a[1]));}switch(this.type){case "anchor":case "tag":s||i.value?(o.push(this.sourceToken),e.items.push({start:o}),this.onKeyLine=true):i.sep?i.sep.push(this.sourceToken):i.start.push(this.sourceToken);return;case "explicit-key-ind":!i.sep&&!i.explicitKey?(i.start.push(this.sourceToken),i.explicitKey=true):s||i.value?(o.push(this.sourceToken),e.items.push({start:o,explicitKey:true})):this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken],explicitKey:true}]}),this.onKeyLine=true;return;case "map-value-ind":if(i.explicitKey)if(i.sep)if(i.value)e.items.push({start:[],key:null,sep:[this.sourceToken]});else if(ir(i.sep,"map-value-ind"))this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:o,key:null,sep:[this.sourceToken]}]});else if(_v(i.key)&&!ir(i.sep,"newline")){let a=Vr(i.start),l=i.key,c=i.sep;c.push(this.sourceToken),delete i.key,delete i.sep,this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:a,key:l,sep:c}]});}else o.length>0?i.sep=i.sep.concat(o,this.sourceToken):i.sep.push(this.sourceToken);else if(ir(i.start,"newline"))Object.assign(i,{key:null,sep:[this.sourceToken]});else {let a=Vr(i.start);this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:a,key:null,sep:[this.sourceToken]}]});}else i.sep?i.value||s?e.items.push({start:o,key:null,sep:[this.sourceToken]}):ir(i.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[],key:null,sep:[this.sourceToken]}]}):i.sep.push(this.sourceToken):Object.assign(i,{key:null,sep:[this.sourceToken]});this.onKeyLine=true;return;case "alias":case "scalar":case "single-quoted-scalar":case "double-quoted-scalar":{let a=this.flowScalar(this.type);s||i.value?(e.items.push({start:o,key:a,sep:[]}),this.onKeyLine=true):i.sep?this.stack.push(a):(Object.assign(i,{key:a,sep:[]}),this.onKeyLine=true);return}default:{let a=this.startBlockValue(e);if(a){n&&a.type!=="block-seq"&&e.items.push({start:o}),this.stack.push(a);return}}}}yield*this.pop(),yield*this.step();}*blockSequence(e){var r;let i=e.items[e.items.length-1];switch(this.type){case "newline":if(i.value){let n="end"in i.value?i.value.end:void 0,s=Array.isArray(n)?n[n.length-1]:void 0;(s==null?void 0:s.type)==="comment"?n==null||n.push(this.sourceToken):e.items.push({start:[this.sourceToken]});}else i.start.push(this.sourceToken);return;case "space":case "comment":if(i.value)e.items.push({start:[this.sourceToken]});else {if(this.atIndentedComment(i.start,e.indent)){let n=e.items[e.items.length-2],s=(r=n==null?void 0:n.value)==null?void 0:r.end;if(Array.isArray(s)){Array.prototype.push.apply(s,i.start),s.push(this.sourceToken),e.items.pop();return}}i.start.push(this.sourceToken);}return;case "anchor":case "tag":if(i.value||this.indent<=e.indent)break;i.start.push(this.sourceToken);return;case "seq-item-ind":if(this.indent!==e.indent)break;i.value||ir(i.start,"seq-item-ind")?e.items.push({start:[this.sourceToken]}):i.start.push(this.sourceToken);return}if(this.indent>e.indent){let n=this.startBlockValue(e);if(n){this.stack.push(n);return}}yield*this.pop(),yield*this.step();}*flowCollection(e){let i=e.items[e.items.length-1];if(this.type==="flow-error-end"){let r;do yield*this.pop(),r=this.peek(1);while(r&&r.type==="flow-collection")}else if(e.end.length===0){switch(this.type){case "comma":case "explicit-key-ind":!i||i.sep?e.items.push({start:[this.sourceToken]}):i.start.push(this.sourceToken);return;case "map-value-ind":!i||i.value?e.items.push({start:[],key:null,sep:[this.sourceToken]}):i.sep?i.sep.push(this.sourceToken):Object.assign(i,{key:null,sep:[this.sourceToken]});return;case "space":case "comment":case "newline":case "anchor":case "tag":!i||i.value?e.items.push({start:[this.sourceToken]}):i.sep?i.sep.push(this.sourceToken):i.start.push(this.sourceToken);return;case "alias":case "scalar":case "single-quoted-scalar":case "double-quoted-scalar":{let n=this.flowScalar(this.type);!i||i.value?e.items.push({start:[],key:n,sep:[]}):i.sep?this.stack.push(n):Object.assign(i,{key:n,sep:[]});return}case "flow-map-end":case "flow-seq-end":e.end.push(this.sourceToken);return}let r=this.startBlockValue(e);r?this.stack.push(r):(yield*this.pop(),yield*this.step());}else {let r=this.peek(2);if(r.type==="block-map"&&(this.type==="map-value-ind"&&r.indent===e.indent||this.type==="newline"&&!r.items[r.items.length-1].sep))yield*this.pop(),yield*this.step();else if(this.type==="map-value-ind"&&r.type!=="flow-collection"){let n=Go(r),s=Vr(n);bv(e);let o=e.end.splice(1,e.end.length);o.push(this.sourceToken);let a={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:s,key:e,sep:o}]};this.onKeyLine=true,this.stack[this.stack.length-1]=a;}else yield*this.lineEnd(e);}}flowScalar(e){if(this.onNewLine){let i=this.source.indexOf(`
`)+1;for(;i!==0;)this.onNewLine(this.offset+i),i=this.source.indexOf(`
`,i)+1;}return {type:e,offset:this.offset,indent:this.indent,source:this.source}}startBlockValue(e){switch(this.type){case "alias":case "scalar":case "single-quoted-scalar":case "double-quoted-scalar":return this.flowScalar(this.type);case "block-scalar-header":return {type:"block-scalar",offset:this.offset,indent:this.indent,props:[this.sourceToken],source:""};case "flow-map-start":case "flow-seq-start":return {type:"flow-collection",offset:this.offset,indent:this.indent,start:this.sourceToken,items:[],end:[]};case "seq-item-ind":return {type:"block-seq",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken]}]};case "explicit-key-ind":{this.onKeyLine=true;let i=Go(e),r=Vr(i);return r.push(this.sourceToken),{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:r,explicitKey:true}]}}case "map-value-ind":{this.onKeyLine=true;let i=Go(e),r=Vr(i);return {type:"block-map",offset:this.offset,indent:this.indent,items:[{start:r,key:null,sep:[this.sourceToken]}]}}}return null}atIndentedComment(e,i){return this.type!=="comment"||this.indent<=i?false:e.every(r=>r.type==="newline"||r.type==="space")}*documentEnd(e){this.type!=="doc-mode"&&(e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],this.type==="newline"&&(yield*this.pop()));}*lineEnd(e){switch(this.type){case "comma":case "doc-start":case "doc-end":case "flow-seq-end":case "flow-map-end":case "map-value-ind":yield*this.pop(),yield*this.step();break;case "newline":this.onKeyLine=false;case "space":case "comment":default:e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],this.type==="newline"&&(yield*this.pop());}}};wv.Parser=qu;});var Ov=_(Un=>{var xv=ku(),rT=Ln(),jn=Pn(),nT=Sc(),sT=Se(),oT=Fu(),Sv=Du();function Ev(t){let e=t.prettyErrors!==false;return {lineCounter:t.lineCounter||e&&new oT.LineCounter||null,prettyErrors:e}}function aT(t,e={}){let{lineCounter:i,prettyErrors:r}=Ev(e),n=new Sv.Parser(i==null?void 0:i.addNewLine),s=new xv.Composer(e),o=Array.from(s.compose(n.parse(t)));if(r&&i)for(let a of o)a.errors.forEach(jn.prettifyError(t,i)),a.warnings.forEach(jn.prettifyError(t,i));return o.length>0?o:Object.assign([],{empty:true},s.streamInfo())}function kv(t,e={}){let{lineCounter:i,prettyErrors:r}=Ev(e),n=new Sv.Parser(i==null?void 0:i.addNewLine),s=new xv.Composer(e),o=null;for(let a of s.compose(n.parse(t),true,t.length))if(!o)o=a;else if(o.options.logLevel!=="silent"){o.errors.push(new jn.YAMLParseError(a.range.slice(0,2),"MULTIPLE_DOCS","Source contains multiple documents; please use YAML.parseAllDocuments()"));break}return r&&i&&(o.errors.forEach(jn.prettifyError(t,i)),o.warnings.forEach(jn.prettifyError(t,i))),o}function lT(t,e,i){let r;typeof e=="function"?r=e:i===void 0&&e&&typeof e=="object"&&(i=e);let n=kv(t,i);if(!n)return null;if(n.warnings.forEach(s=>nT.warn(n.options.logLevel,s)),n.errors.length>0){if(n.options.logLevel!=="silent")throw n.errors[0];n.errors=[];}return n.toJS(Object.assign({reviver:r},i))}function cT(t,e,i){var n;let r=null;if(typeof e=="function"||Array.isArray(e)?r=e:i===void 0&&e&&(i=e),typeof i=="string"&&(i=i.length),typeof i=="number"){let s=Math.round(i);i=s<1?void 0:s>8?{indent:8}:{indent:s};}if(t===void 0){let{keepUndefined:s}=(n=i!=null?i:e)!=null?n:{};if(!s)return}return sT.isDocument(t)&&!r?t.toString(i):new rT.Document(t,r,i).toString(i)}Un.parse=lT;Un.parseAllDocuments=aT;Un.parseDocument=kv;Un.stringify=cT;});var Tv=_(Oe=>{var uT=ku(),fT=Ln(),hT=su(),ju=Pn(),pT=gn(),ki=Se(),dT=wi(),mT=De(),gT=Si(),vT=Ei(),yT=Vo(),bT=Pu(),_T=Fu(),wT=Du(),Yo=Ov(),Cv=hn();Oe.Composer=uT.Composer;Oe.Document=fT.Document;Oe.Schema=hT.Schema;Oe.YAMLError=ju.YAMLError;Oe.YAMLParseError=ju.YAMLParseError;Oe.YAMLWarning=ju.YAMLWarning;Oe.Alias=pT.Alias;Oe.isAlias=ki.isAlias;Oe.isCollection=ki.isCollection;Oe.isDocument=ki.isDocument;Oe.isMap=ki.isMap;Oe.isNode=ki.isNode;Oe.isPair=ki.isPair;Oe.isScalar=ki.isScalar;Oe.isSeq=ki.isSeq;Oe.Pair=dT.Pair;Oe.Scalar=mT.Scalar;Oe.YAMLMap=gT.YAMLMap;Oe.YAMLSeq=vT.YAMLSeq;Oe.CST=yT;Oe.Lexer=bT.Lexer;Oe.LineCounter=_T.LineCounter;Oe.Parser=wT.Parser;Oe.parse=Yo.parse;Oe.parseAllDocuments=Yo.parseAllDocuments;Oe.parseDocument=Yo.parseDocument;Oe.stringify=Yo.stringify;Oe.visit=Cv.visit;Oe.visitAsync=Cv.visitAsync;});var Lv=_((fL,Nv)=>{var{Duplex:xT}=require$$12;function Av(t){t.emit("close");}function ST(){!this.destroyed&&this._writableState.finished&&this.destroy();}function Iv(t){this.removeListener("error",Iv),this.destroy(),this.listenerCount("error")===0&&this.emit("error",t);}function ET(t,e){let i=true,r=new xT({...e,autoDestroy:false,emitClose:false,objectMode:false,writableObjectMode:false});return t.on("message",function(s,o){let a=!o&&r._readableState.objectMode?s.toString():s;r.push(a)||t.pause();}),t.once("error",function(s){r.destroyed||(i=false,r.destroy(s));}),t.once("close",function(){r.destroyed||r.push(null);}),r._destroy=function(n,s){if(t.readyState===t.CLOSED){s(n),process.nextTick(Av,r);return}let o=false;t.once("error",function(l){o=true,s(l);}),t.once("close",function(){o||s(n),process.nextTick(Av,r);}),i&&t.terminate();},r._final=function(n){if(t.readyState===t.CONNECTING){t.once("open",function(){r._final(n);});return}t._socket!==null&&(t._socket._writableState.finished?(n(),r._readableState.endEmitted&&r.destroy()):(t._socket.once("finish",function(){n();}),t.close()));},r._read=function(){t.isPaused&&t.resume();},r._write=function(n,s,o){if(t.readyState===t.CONNECTING){t.once("open",function(){r._write(n,s,o);});return}t.send(n,o);},r.on("end",ST),r.on("error",Iv),r}Nv.exports=ET;});var Oi=_((hL,Bv)=>{Bv.exports={BINARY_TYPES:["nodebuffer","arraybuffer","fragments"],EMPTY_BUFFER:Buffer.alloc(0),GUID:"258EAFA5-E914-47DA-95CA-C5AB0DC85B11",kForOnEventAttribute:Symbol("kIsForOnEventAttribute"),kListener:Symbol("kListener"),kStatusCode:Symbol("status-code"),kWebSocket:Symbol("websocket"),NOOP:()=>{}};});var $n=_((pL,Wo)=>{var{EMPTY_BUFFER:kT}=Oi(),Uu=Buffer[Symbol.species];function OT(t,e){if(t.length===0)return kT;if(t.length===1)return t[0];let i=Buffer.allocUnsafe(e),r=0;for(let n=0;n<t.length;n++){let s=t[n];i.set(s,r),r+=s.length;}return r<e?new Uu(i.buffer,i.byteOffset,r):i}function Rv(t,e,i,r,n){for(let s=0;s<n;s++)i[r+s]=t[s]^e[s&3];}function Pv(t,e){for(let i=0;i<t.length;i++)t[i]^=e[i&3];}function CT(t){return t.length===t.buffer.byteLength?t.buffer:t.buffer.slice(t.byteOffset,t.byteOffset+t.length)}function $u(t){if($u.readOnly=true,Buffer.isBuffer(t))return t;let e;return t instanceof ArrayBuffer?e=new Uu(t):ArrayBuffer.isView(t)?e=new Uu(t.buffer,t.byteOffset,t.byteLength):(e=Buffer.from(t),$u.readOnly=false),e}Wo.exports={concat:OT,mask:Rv,toArrayBuffer:CT,toBuffer:$u,unmask:Pv};if(!process.env.WS_NO_BUFFER_UTIL)try{let t=require("bufferutil");Wo.exports.mask=function(e,i,r,n,s){s<48?Rv(e,i,r,n,s):t.mask(e,i,r,n,s);},Wo.exports.unmask=function(e,i){e.length<32?Pv(e,i):t.unmask(e,i);};}catch{}});var qv=_((dL,Fv)=>{var Mv=Symbol("kDone"),Vu=Symbol("kRun"),Hu=class{constructor(e){this[Mv]=()=>{this.pending--,this[Vu]();},this.concurrency=e||1/0,this.jobs=[],this.pending=0;}add(e){this.jobs.push(e),this[Vu]();}[Vu](){if(this.pending!==this.concurrency&&this.jobs.length){let e=this.jobs.shift();this.pending++,e(this[Mv]);}}};Fv.exports=Hu;});var Gn=_((mL,$v)=>{var Vn=require$$13,Dv=$n(),TT=qv(),{kStatusCode:jv}=Oi(),AT=Buffer[Symbol.species],IT=Buffer.from([0,0,255,255]),Jo=Symbol("permessage-deflate"),ai=Symbol("total-length"),Hn=Symbol("callback"),Ci=Symbol("buffers"),zo=Symbol("error"),Ko,Gu=class{constructor(e,i,r){if(this._maxPayload=r|0,this._options=e||{},this._threshold=this._options.threshold!==void 0?this._options.threshold:1024,this._isServer=!!i,this._deflate=null,this._inflate=null,this.params=null,!Ko){let n=this._options.concurrencyLimit!==void 0?this._options.concurrencyLimit:10;Ko=new TT(n);}}static get extensionName(){return "permessage-deflate"}offer(){let e={};return this._options.serverNoContextTakeover&&(e.server_no_context_takeover=true),this._options.clientNoContextTakeover&&(e.client_no_context_takeover=true),this._options.serverMaxWindowBits&&(e.server_max_window_bits=this._options.serverMaxWindowBits),this._options.clientMaxWindowBits?e.client_max_window_bits=this._options.clientMaxWindowBits:this._options.clientMaxWindowBits==null&&(e.client_max_window_bits=true),e}accept(e){return e=this.normalizeParams(e),this.params=this._isServer?this.acceptAsServer(e):this.acceptAsClient(e),this.params}cleanup(){if(this._inflate&&(this._inflate.close(),this._inflate=null),this._deflate){let e=this._deflate[Hn];this._deflate.close(),this._deflate=null,e&&e(new Error("The deflate stream was closed while data was being processed"));}}acceptAsServer(e){let i=this._options,r=e.find(n=>!(i.serverNoContextTakeover===false&&n.server_no_context_takeover||n.server_max_window_bits&&(i.serverMaxWindowBits===false||typeof i.serverMaxWindowBits=="number"&&i.serverMaxWindowBits>n.server_max_window_bits)||typeof i.clientMaxWindowBits=="number"&&!n.client_max_window_bits));if(!r)throw new Error("None of the extension offers can be accepted");return i.serverNoContextTakeover&&(r.server_no_context_takeover=true),i.clientNoContextTakeover&&(r.client_no_context_takeover=true),typeof i.serverMaxWindowBits=="number"&&(r.server_max_window_bits=i.serverMaxWindowBits),typeof i.clientMaxWindowBits=="number"?r.client_max_window_bits=i.clientMaxWindowBits:(r.client_max_window_bits===true||i.clientMaxWindowBits===false)&&delete r.client_max_window_bits,r}acceptAsClient(e){let i=e[0];if(this._options.clientNoContextTakeover===false&&i.client_no_context_takeover)throw new Error('Unexpected parameter "client_no_context_takeover"');if(!i.client_max_window_bits)typeof this._options.clientMaxWindowBits=="number"&&(i.client_max_window_bits=this._options.clientMaxWindowBits);else if(this._options.clientMaxWindowBits===false||typeof this._options.clientMaxWindowBits=="number"&&i.client_max_window_bits>this._options.clientMaxWindowBits)throw new Error('Unexpected or invalid parameter "client_max_window_bits"');return i}normalizeParams(e){return e.forEach(i=>{Object.keys(i).forEach(r=>{let n=i[r];if(n.length>1)throw new Error(`Parameter "${r}" must have only a single value`);if(n=n[0],r==="client_max_window_bits"){if(n!==true){let s=+n;if(!Number.isInteger(s)||s<8||s>15)throw new TypeError(`Invalid value for parameter "${r}": ${n}`);n=s;}else if(!this._isServer)throw new TypeError(`Invalid value for parameter "${r}": ${n}`)}else if(r==="server_max_window_bits"){let s=+n;if(!Number.isInteger(s)||s<8||s>15)throw new TypeError(`Invalid value for parameter "${r}": ${n}`);n=s;}else if(r==="client_no_context_takeover"||r==="server_no_context_takeover"){if(n!==true)throw new TypeError(`Invalid value for parameter "${r}": ${n}`)}else throw new Error(`Unknown parameter "${r}"`);i[r]=n;});}),e}decompress(e,i,r){Ko.add(n=>{this._decompress(e,i,(s,o)=>{n(),r(s,o);});});}compress(e,i,r){Ko.add(n=>{this._compress(e,i,(s,o)=>{n(),r(s,o);});});}_decompress(e,i,r){let n=this._isServer?"client":"server";if(!this._inflate){let s=`${n}_max_window_bits`,o=typeof this.params[s]!="number"?Vn.Z_DEFAULT_WINDOWBITS:this.params[s];this._inflate=Vn.createInflateRaw({...this._options.zlibInflateOptions,windowBits:o}),this._inflate[Jo]=this,this._inflate[ai]=0,this._inflate[Ci]=[],this._inflate.on("error",LT),this._inflate.on("data",Uv);}this._inflate[Hn]=r,this._inflate.write(e),i&&this._inflate.write(IT),this._inflate.flush(()=>{let s=this._inflate[zo];if(s){this._inflate.close(),this._inflate=null,r(s);return}let o=Dv.concat(this._inflate[Ci],this._inflate[ai]);this._inflate._readableState.endEmitted?(this._inflate.close(),this._inflate=null):(this._inflate[ai]=0,this._inflate[Ci]=[],i&&this.params[`${n}_no_context_takeover`]&&this._inflate.reset()),r(null,o);});}_compress(e,i,r){let n=this._isServer?"server":"client";if(!this._deflate){let s=`${n}_max_window_bits`,o=typeof this.params[s]!="number"?Vn.Z_DEFAULT_WINDOWBITS:this.params[s];this._deflate=Vn.createDeflateRaw({...this._options.zlibDeflateOptions,windowBits:o}),this._deflate[ai]=0,this._deflate[Ci]=[],this._deflate.on("data",NT);}this._deflate[Hn]=r,this._deflate.write(e),this._deflate.flush(Vn.Z_SYNC_FLUSH,()=>{if(!this._deflate)return;let s=Dv.concat(this._deflate[Ci],this._deflate[ai]);i&&(s=new AT(s.buffer,s.byteOffset,s.length-4)),this._deflate[Hn]=null,this._deflate[ai]=0,this._deflate[Ci]=[],i&&this.params[`${n}_no_context_takeover`]&&this._deflate.reset(),r(null,s);});}};$v.exports=Gu;function NT(t){this[Ci].push(t),this[ai]+=t.length;}function Uv(t){if(this[ai]+=t.length,this[Jo]._maxPayload<1||this[ai]<=this[Jo]._maxPayload){this[Ci].push(t);return}this[zo]=new RangeError("Max payload size exceeded"),this[zo].code="WS_ERR_UNSUPPORTED_MESSAGE_LENGTH",this[zo][jv]=1009,this.removeListener("data",Uv),this.reset();}function LT(t){this[Jo]._inflate=null,t[jv]=1007,this[Hn](t);}});var Yn=_((gL,Zo)=>{var{isUtf8:Vv}=require$$14,BT=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0];function RT(t){return t>=1e3&&t<=1014&&t!==1004&&t!==1005&&t!==1006||t>=3e3&&t<=4999}function Yu(t){let e=t.length,i=0;for(;i<e;)if((t[i]&128)===0)i++;else if((t[i]&224)===192){if(i+1===e||(t[i+1]&192)!==128||(t[i]&254)===192)return  false;i+=2;}else if((t[i]&240)===224){if(i+2>=e||(t[i+1]&192)!==128||(t[i+2]&192)!==128||t[i]===224&&(t[i+1]&224)===128||t[i]===237&&(t[i+1]&224)===160)return  false;i+=3;}else if((t[i]&248)===240){if(i+3>=e||(t[i+1]&192)!==128||(t[i+2]&192)!==128||(t[i+3]&192)!==128||t[i]===240&&(t[i+1]&240)===128||t[i]===244&&t[i+1]>143||t[i]>244)return  false;i+=4;}else return  false;return  true}Zo.exports={isValidStatusCode:RT,isValidUTF8:Yu,tokenChars:BT};if(Vv)Zo.exports.isValidUTF8=function(t){return t.length<24?Yu(t):Vv(t)};else if(!process.env.WS_NO_UTF_8_VALIDATE)try{let t=require("utf-8-validate");Zo.exports.isValidUTF8=function(e){return e.length<32?Yu(e):t(e)};}catch{}});var Zu=_((vL,Jv)=>{var{Writable:PT}=require$$12,Hv=Gn(),{BINARY_TYPES:MT,EMPTY_BUFFER:Gv,kStatusCode:FT,kWebSocket:qT}=Oi(),{concat:Wu,toArrayBuffer:DT,unmask:jT}=$n(),{isValidStatusCode:UT,isValidUTF8:Yv}=Yn(),Qo=Buffer[Symbol.species],Nt=0,Wv=1,Kv=2,zv=3,Ku=4,zu=5,Xo=6,Ju=class extends PT{constructor(e={}){super(),this._allowSynchronousEvents=e.allowSynchronousEvents!==void 0?e.allowSynchronousEvents:true,this._binaryType=e.binaryType||MT[0],this._extensions=e.extensions||{},this._isServer=!!e.isServer,this._maxPayload=e.maxPayload|0,this._skipUTF8Validation=!!e.skipUTF8Validation,this[qT]=void 0,this._bufferedBytes=0,this._buffers=[],this._compressed=false,this._payloadLength=0,this._mask=void 0,this._fragmented=0,this._masked=false,this._fin=false,this._opcode=0,this._totalPayloadLength=0,this._messageLength=0,this._fragments=[],this._errored=false,this._loop=false,this._state=Nt;}_write(e,i,r){if(this._opcode===8&&this._state==Nt)return r();this._bufferedBytes+=e.length,this._buffers.push(e),this.startLoop(r);}consume(e){if(this._bufferedBytes-=e,e===this._buffers[0].length)return this._buffers.shift();if(e<this._buffers[0].length){let r=this._buffers[0];return this._buffers[0]=new Qo(r.buffer,r.byteOffset+e,r.length-e),new Qo(r.buffer,r.byteOffset,e)}let i=Buffer.allocUnsafe(e);do{let r=this._buffers[0],n=i.length-e;e>=r.length?i.set(this._buffers.shift(),n):(i.set(new Uint8Array(r.buffer,r.byteOffset,e),n),this._buffers[0]=new Qo(r.buffer,r.byteOffset+e,r.length-e)),e-=r.length;}while(e>0);return i}startLoop(e){this._loop=true;do switch(this._state){case Nt:this.getInfo(e);break;case Wv:this.getPayloadLength16(e);break;case Kv:this.getPayloadLength64(e);break;case zv:this.getMask();break;case Ku:this.getData(e);break;case zu:case Xo:this._loop=false;return}while(this._loop);this._errored||e();}getInfo(e){if(this._bufferedBytes<2){this._loop=false;return}let i=this.consume(2);if((i[0]&48)!==0){let n=this.createError(RangeError,"RSV2 and RSV3 must be clear",true,1002,"WS_ERR_UNEXPECTED_RSV_2_3");e(n);return}let r=(i[0]&64)===64;if(r&&!this._extensions[Hv.extensionName]){let n=this.createError(RangeError,"RSV1 must be clear",true,1002,"WS_ERR_UNEXPECTED_RSV_1");e(n);return}if(this._fin=(i[0]&128)===128,this._opcode=i[0]&15,this._payloadLength=i[1]&127,this._opcode===0){if(r){let n=this.createError(RangeError,"RSV1 must be clear",true,1002,"WS_ERR_UNEXPECTED_RSV_1");e(n);return}if(!this._fragmented){let n=this.createError(RangeError,"invalid opcode 0",true,1002,"WS_ERR_INVALID_OPCODE");e(n);return}this._opcode=this._fragmented;}else if(this._opcode===1||this._opcode===2){if(this._fragmented){let n=this.createError(RangeError,`invalid opcode ${this._opcode}`,true,1002,"WS_ERR_INVALID_OPCODE");e(n);return}this._compressed=r;}else if(this._opcode>7&&this._opcode<11){if(!this._fin){let n=this.createError(RangeError,"FIN must be set",true,1002,"WS_ERR_EXPECTED_FIN");e(n);return}if(r){let n=this.createError(RangeError,"RSV1 must be clear",true,1002,"WS_ERR_UNEXPECTED_RSV_1");e(n);return}if(this._payloadLength>125||this._opcode===8&&this._payloadLength===1){let n=this.createError(RangeError,`invalid payload length ${this._payloadLength}`,true,1002,"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");e(n);return}}else {let n=this.createError(RangeError,`invalid opcode ${this._opcode}`,true,1002,"WS_ERR_INVALID_OPCODE");e(n);return}if(!this._fin&&!this._fragmented&&(this._fragmented=this._opcode),this._masked=(i[1]&128)===128,this._isServer){if(!this._masked){let n=this.createError(RangeError,"MASK must be set",true,1002,"WS_ERR_EXPECTED_MASK");e(n);return}}else if(this._masked){let n=this.createError(RangeError,"MASK must be clear",true,1002,"WS_ERR_UNEXPECTED_MASK");e(n);return}this._payloadLength===126?this._state=Wv:this._payloadLength===127?this._state=Kv:this.haveLength(e);}getPayloadLength16(e){if(this._bufferedBytes<2){this._loop=false;return}this._payloadLength=this.consume(2).readUInt16BE(0),this.haveLength(e);}getPayloadLength64(e){if(this._bufferedBytes<8){this._loop=false;return}let i=this.consume(8),r=i.readUInt32BE(0);if(r>Math.pow(2,21)-1){let n=this.createError(RangeError,"Unsupported WebSocket frame: payload length > 2^53 - 1",false,1009,"WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH");e(n);return}this._payloadLength=r*Math.pow(2,32)+i.readUInt32BE(4),this.haveLength(e);}haveLength(e){if(this._payloadLength&&this._opcode<8&&(this._totalPayloadLength+=this._payloadLength,this._totalPayloadLength>this._maxPayload&&this._maxPayload>0)){let i=this.createError(RangeError,"Max payload size exceeded",false,1009,"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");e(i);return}this._masked?this._state=zv:this._state=Ku;}getMask(){if(this._bufferedBytes<4){this._loop=false;return}this._mask=this.consume(4),this._state=Ku;}getData(e){let i=Gv;if(this._payloadLength){if(this._bufferedBytes<this._payloadLength){this._loop=false;return}i=this.consume(this._payloadLength),this._masked&&(this._mask[0]|this._mask[1]|this._mask[2]|this._mask[3])!==0&&jT(i,this._mask);}if(this._opcode>7){this.controlMessage(i,e);return}if(this._compressed){this._state=zu,this.decompress(i,e);return}i.length&&(this._messageLength=this._totalPayloadLength,this._fragments.push(i)),this.dataMessage(e);}decompress(e,i){this._extensions[Hv.extensionName].decompress(e,this._fin,(n,s)=>{if(n)return i(n);if(s.length){if(this._messageLength+=s.length,this._messageLength>this._maxPayload&&this._maxPayload>0){let o=this.createError(RangeError,"Max payload size exceeded",false,1009,"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");i(o);return}this._fragments.push(s);}this.dataMessage(i),this._state===Nt&&this.startLoop(i);});}dataMessage(e){if(!this._fin){this._state=Nt;return}let i=this._messageLength,r=this._fragments;if(this._totalPayloadLength=0,this._messageLength=0,this._fragmented=0,this._fragments=[],this._opcode===2){let n;this._binaryType==="nodebuffer"?n=Wu(r,i):this._binaryType==="arraybuffer"?n=DT(Wu(r,i)):n=r,this._allowSynchronousEvents?(this.emit("message",n,true),this._state=Nt):(this._state=Xo,setImmediate(()=>{this.emit("message",n,true),this._state=Nt,this.startLoop(e);}));}else {let n=Wu(r,i);if(!this._skipUTF8Validation&&!Yv(n)){let s=this.createError(Error,"invalid UTF-8 sequence",true,1007,"WS_ERR_INVALID_UTF8");e(s);return}this._state===zu||this._allowSynchronousEvents?(this.emit("message",n,false),this._state=Nt):(this._state=Xo,setImmediate(()=>{this.emit("message",n,false),this._state=Nt,this.startLoop(e);}));}}controlMessage(e,i){if(this._opcode===8){if(e.length===0)this._loop=false,this.emit("conclude",1005,Gv),this.end();else {let r=e.readUInt16BE(0);if(!UT(r)){let s=this.createError(RangeError,`invalid status code ${r}`,true,1002,"WS_ERR_INVALID_CLOSE_CODE");i(s);return}let n=new Qo(e.buffer,e.byteOffset+2,e.length-2);if(!this._skipUTF8Validation&&!Yv(n)){let s=this.createError(Error,"invalid UTF-8 sequence",true,1007,"WS_ERR_INVALID_UTF8");i(s);return}this._loop=false,this.emit("conclude",r,n),this.end();}this._state=Nt;return}this._allowSynchronousEvents?(this.emit(this._opcode===9?"ping":"pong",e),this._state=Nt):(this._state=Xo,setImmediate(()=>{this.emit(this._opcode===9?"ping":"pong",e),this._state=Nt,this.startLoop(i);}));}createError(e,i,r,n,s){this._loop=false,this._errored=true;let o=new e(r?`Invalid WebSocket frame: ${i}`:i);return Error.captureStackTrace(o,this.createError),o.code=s,o[FT]=n,o}};Jv.exports=Ju;});var Xu=_((bL,Xv)=>{var{Duplex:yL}=require$$12,{randomFillSync:$T}=require$$5,Zv=Gn(),{EMPTY_BUFFER:VT}=Oi(),{isValidStatusCode:HT}=Yn(),{mask:Qv,toBuffer:Hr}=$n(),Ut=Symbol("kByteLength"),GT=Buffer.alloc(4),ea=8*1024,rr,Gr=ea,Qu=class t{constructor(e,i,r){this._extensions=i||{},r&&(this._generateMask=r,this._maskBuffer=Buffer.alloc(4)),this._socket=e,this._firstFragment=true,this._compress=false,this._bufferedBytes=0,this._deflating=false,this._queue=[];}static frame(e,i){let r,n=false,s=2,o=false;i.mask&&(r=i.maskBuffer||GT,i.generateMask?i.generateMask(r):(Gr===ea&&(rr===void 0&&(rr=Buffer.alloc(ea)),$T(rr,0,ea),Gr=0),r[0]=rr[Gr++],r[1]=rr[Gr++],r[2]=rr[Gr++],r[3]=rr[Gr++]),o=(r[0]|r[1]|r[2]|r[3])===0,s=6);let a;typeof e=="string"?(!i.mask||o)&&i[Ut]!==void 0?a=i[Ut]:(e=Buffer.from(e),a=e.length):(a=e.length,n=i.mask&&i.readOnly&&!o);let l=a;a>=65536?(s+=8,l=127):a>125&&(s+=2,l=126);let c=Buffer.allocUnsafe(n?a+s:s);return c[0]=i.fin?i.opcode|128:i.opcode,i.rsv1&&(c[0]|=64),c[1]=l,l===126?c.writeUInt16BE(a,2):l===127&&(c[2]=c[3]=0,c.writeUIntBE(a,4,6)),i.mask?(c[1]|=128,c[s-4]=r[0],c[s-3]=r[1],c[s-2]=r[2],c[s-1]=r[3],o?[c,e]:n?(Qv(e,r,c,s,a),[c]):(Qv(e,r,e,0,a),[c,e])):[c,e]}close(e,i,r,n){let s;if(e===void 0)s=VT;else {if(typeof e!="number"||!HT(e))throw new TypeError("First argument must be a valid error code number");if(i===void 0||!i.length)s=Buffer.allocUnsafe(2),s.writeUInt16BE(e,0);else {let a=Buffer.byteLength(i);if(a>123)throw new RangeError("The message must not be greater than 123 bytes");s=Buffer.allocUnsafe(2+a),s.writeUInt16BE(e,0),typeof i=="string"?s.write(i,2):s.set(i,2);}}let o={[Ut]:s.length,fin:true,generateMask:this._generateMask,mask:r,maskBuffer:this._maskBuffer,opcode:8,readOnly:false,rsv1:false};this._deflating?this.enqueue([this.dispatch,s,false,o,n]):this.sendFrame(t.frame(s,o),n);}ping(e,i,r){let n,s;if(typeof e=="string"?(n=Buffer.byteLength(e),s=false):(e=Hr(e),n=e.length,s=Hr.readOnly),n>125)throw new RangeError("The data size must not be greater than 125 bytes");let o={[Ut]:n,fin:true,generateMask:this._generateMask,mask:i,maskBuffer:this._maskBuffer,opcode:9,readOnly:s,rsv1:false};this._deflating?this.enqueue([this.dispatch,e,false,o,r]):this.sendFrame(t.frame(e,o),r);}pong(e,i,r){let n,s;if(typeof e=="string"?(n=Buffer.byteLength(e),s=false):(e=Hr(e),n=e.length,s=Hr.readOnly),n>125)throw new RangeError("The data size must not be greater than 125 bytes");let o={[Ut]:n,fin:true,generateMask:this._generateMask,mask:i,maskBuffer:this._maskBuffer,opcode:10,readOnly:s,rsv1:false};this._deflating?this.enqueue([this.dispatch,e,false,o,r]):this.sendFrame(t.frame(e,o),r);}send(e,i,r){let n=this._extensions[Zv.extensionName],s=i.binary?2:1,o=i.compress,a,l;if(typeof e=="string"?(a=Buffer.byteLength(e),l=false):(e=Hr(e),a=e.length,l=Hr.readOnly),this._firstFragment?(this._firstFragment=false,o&&n&&n.params[n._isServer?"server_no_context_takeover":"client_no_context_takeover"]&&(o=a>=n._threshold),this._compress=o):(o=false,s=0),i.fin&&(this._firstFragment=true),n){let c={[Ut]:a,fin:i.fin,generateMask:this._generateMask,mask:i.mask,maskBuffer:this._maskBuffer,opcode:s,readOnly:l,rsv1:o};this._deflating?this.enqueue([this.dispatch,e,this._compress,c,r]):this.dispatch(e,this._compress,c,r);}else this.sendFrame(t.frame(e,{[Ut]:a,fin:i.fin,generateMask:this._generateMask,mask:i.mask,maskBuffer:this._maskBuffer,opcode:s,readOnly:l,rsv1:false}),r);}dispatch(e,i,r,n){if(!i){this.sendFrame(t.frame(e,r),n);return}let s=this._extensions[Zv.extensionName];this._bufferedBytes+=r[Ut],this._deflating=true,s.compress(e,r.fin,(o,a)=>{if(this._socket.destroyed){let l=new Error("The socket was closed while data was being compressed");typeof n=="function"&&n(l);for(let c=0;c<this._queue.length;c++){let u=this._queue[c],f=u[u.length-1];typeof f=="function"&&f(l);}return}this._bufferedBytes-=r[Ut],this._deflating=false,r.readOnly=false,this.sendFrame(t.frame(a,r),n),this.dequeue();});}dequeue(){for(;!this._deflating&&this._queue.length;){let e=this._queue.shift();this._bufferedBytes-=e[3][Ut],Reflect.apply(e[0],this,e.slice(1));}}enqueue(e){this._bufferedBytes+=e[3][Ut],this._queue.push(e);}sendFrame(e,i){e.length===2?(this._socket.cork(),this._socket.write(e[0]),this._socket.write(e[1],i),this._socket.uncork()):this._socket.write(e[0],i);}};Xv.exports=Qu;});var ly=_((_L,ay)=>{var{kForOnEventAttribute:Wn,kListener:ef}=Oi(),ey=Symbol("kCode"),ty=Symbol("kData"),iy=Symbol("kError"),ry=Symbol("kMessage"),ny=Symbol("kReason"),Yr=Symbol("kTarget"),sy=Symbol("kType"),oy=Symbol("kWasClean"),li=class{constructor(e){this[Yr]=null,this[sy]=e;}get target(){return this[Yr]}get type(){return this[sy]}};Object.defineProperty(li.prototype,"target",{enumerable:true});Object.defineProperty(li.prototype,"type",{enumerable:true});var nr=class extends li{constructor(e,i={}){super(e),this[ey]=i.code===void 0?0:i.code,this[ny]=i.reason===void 0?"":i.reason,this[oy]=i.wasClean===void 0?false:i.wasClean;}get code(){return this[ey]}get reason(){return this[ny]}get wasClean(){return this[oy]}};Object.defineProperty(nr.prototype,"code",{enumerable:true});Object.defineProperty(nr.prototype,"reason",{enumerable:true});Object.defineProperty(nr.prototype,"wasClean",{enumerable:true});var Wr=class extends li{constructor(e,i={}){super(e),this[iy]=i.error===void 0?null:i.error,this[ry]=i.message===void 0?"":i.message;}get error(){return this[iy]}get message(){return this[ry]}};Object.defineProperty(Wr.prototype,"error",{enumerable:true});Object.defineProperty(Wr.prototype,"message",{enumerable:true});var Kn=class extends li{constructor(e,i={}){super(e),this[ty]=i.data===void 0?null:i.data;}get data(){return this[ty]}};Object.defineProperty(Kn.prototype,"data",{enumerable:true});var YT={addEventListener(t,e,i={}){for(let n of this.listeners(t))if(!i[Wn]&&n[ef]===e&&!n[Wn])return;let r;if(t==="message")r=function(s,o){let a=new Kn("message",{data:o?s:s.toString()});a[Yr]=this,ta(e,this,a);};else if(t==="close")r=function(s,o){let a=new nr("close",{code:s,reason:o.toString(),wasClean:this._closeFrameReceived&&this._closeFrameSent});a[Yr]=this,ta(e,this,a);};else if(t==="error")r=function(s){let o=new Wr("error",{error:s,message:s.message});o[Yr]=this,ta(e,this,o);};else if(t==="open")r=function(){let s=new li("open");s[Yr]=this,ta(e,this,s);};else return;r[Wn]=!!i[Wn],r[ef]=e,i.once?this.once(t,r):this.on(t,r);},removeEventListener(t,e){for(let i of this.listeners(t))if(i[ef]===e&&!i[Wn]){this.removeListener(t,i);break}}};ay.exports={CloseEvent:nr,ErrorEvent:Wr,Event:li,EventTarget:YT,MessageEvent:Kn};function ta(t,e,i){typeof t=="object"&&t.handleEvent?t.handleEvent.call(t,i):t.call(e,i);}});var tf=_((wL,cy)=>{var{tokenChars:zn}=Yn();function Zt(t,e,i){t[e]===void 0?t[e]=[i]:t[e].push(i);}function WT(t){let e=Object.create(null),i=Object.create(null),r=false,n=false,s=false,o,a,l=-1,c=-1,u=-1,f=0;for(;f<t.length;f++)if(c=t.charCodeAt(f),o===void 0)if(u===-1&&zn[c]===1)l===-1&&(l=f);else if(f!==0&&(c===32||c===9))u===-1&&l!==-1&&(u=f);else if(c===59||c===44){if(l===-1)throw new SyntaxError(`Unexpected character at index ${f}`);u===-1&&(u=f);let g=t.slice(l,u);c===44?(Zt(e,g,i),i=Object.create(null)):o=g,l=u=-1;}else throw new SyntaxError(`Unexpected character at index ${f}`);else if(a===void 0)if(u===-1&&zn[c]===1)l===-1&&(l=f);else if(c===32||c===9)u===-1&&l!==-1&&(u=f);else if(c===59||c===44){if(l===-1)throw new SyntaxError(`Unexpected character at index ${f}`);u===-1&&(u=f),Zt(i,t.slice(l,u),true),c===44&&(Zt(e,o,i),i=Object.create(null),o=void 0),l=u=-1;}else if(c===61&&l!==-1&&u===-1)a=t.slice(l,f),l=u=-1;else throw new SyntaxError(`Unexpected character at index ${f}`);else if(n){if(zn[c]!==1)throw new SyntaxError(`Unexpected character at index ${f}`);l===-1?l=f:r||(r=true),n=false;}else if(s)if(zn[c]===1)l===-1&&(l=f);else if(c===34&&l!==-1)s=false,u=f;else if(c===92)n=true;else throw new SyntaxError(`Unexpected character at index ${f}`);else if(c===34&&t.charCodeAt(f-1)===61)s=true;else if(u===-1&&zn[c]===1)l===-1&&(l=f);else if(l!==-1&&(c===32||c===9))u===-1&&(u=f);else if(c===59||c===44){if(l===-1)throw new SyntaxError(`Unexpected character at index ${f}`);u===-1&&(u=f);let g=t.slice(l,u);r&&(g=g.replace(/\\/g,""),r=false),Zt(i,a,g),c===44&&(Zt(e,o,i),i=Object.create(null),o=void 0),a=void 0,l=u=-1;}else throw new SyntaxError(`Unexpected character at index ${f}`);if(l===-1||s||c===32||c===9)throw new SyntaxError("Unexpected end of input");u===-1&&(u=f);let d=t.slice(l,u);return o===void 0?Zt(e,d,i):(a===void 0?Zt(i,d,true):r?Zt(i,a,d.replace(/\\/g,"")):Zt(i,a,d),Zt(e,o,i)),e}function KT(t){return Object.keys(t).map(e=>{let i=t[e];return Array.isArray(i)||(i=[i]),i.map(r=>[e].concat(Object.keys(r).map(n=>{let s=r[n];return Array.isArray(s)||(s=[s]),s.map(o=>o===true?n:`${n}=${o}`).join("; ")})).join("; ")).join(", ")}).join(", ")}cy.exports={format:KT,parse:WT};});var af=_((EL,_y)=>{var zT=require$$0$5,JT=require$$2$1,ZT=require$$19,hy=require$$8,QT=require$$9,{randomBytes:XT,createHash:eA}=require$$5,{Duplex:xL,Readable:SL}=require$$12,{URL:rf}=require$$6,Ti=Gn(),tA=Zu(),iA=Xu(),{BINARY_TYPES:uy,EMPTY_BUFFER:ia,GUID:rA,kForOnEventAttribute:nf,kListener:nA,kStatusCode:sA,kWebSocket:nt,NOOP:py}=Oi(),{EventTarget:{addEventListener:oA,removeEventListener:aA}}=ly(),{format:lA,parse:cA}=tf(),{toBuffer:uA}=$n(),fA=30*1e3,dy=Symbol("kAborted"),sf=[8,13],ci=["CONNECTING","OPEN","CLOSING","CLOSED"],hA=/^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/,qe=class t extends zT{constructor(e,i,r){super(),this._binaryType=uy[0],this._closeCode=1006,this._closeFrameReceived=false,this._closeFrameSent=false,this._closeMessage=ia,this._closeTimer=null,this._extensions={},this._paused=false,this._protocol="",this._readyState=t.CONNECTING,this._receiver=null,this._sender=null,this._socket=null,e!==null?(this._bufferedAmount=0,this._isServer=false,this._redirects=0,i===void 0?i=[]:Array.isArray(i)||(typeof i=="object"&&i!==null?(r=i,i=[]):i=[i]),my(this,e,i,r)):(this._autoPong=r.autoPong,this._isServer=true);}get binaryType(){return this._binaryType}set binaryType(e){uy.includes(e)&&(this._binaryType=e,this._receiver&&(this._receiver._binaryType=e));}get bufferedAmount(){return this._socket?this._socket._writableState.length+this._sender._bufferedBytes:this._bufferedAmount}get extensions(){return Object.keys(this._extensions).join()}get isPaused(){return this._paused}get onclose(){return null}get onerror(){return null}get onopen(){return null}get onmessage(){return null}get protocol(){return this._protocol}get readyState(){return this._readyState}get url(){return this._url}setSocket(e,i,r){let n=new tA({allowSynchronousEvents:r.allowSynchronousEvents,binaryType:this.binaryType,extensions:this._extensions,isServer:this._isServer,maxPayload:r.maxPayload,skipUTF8Validation:r.skipUTF8Validation});this._sender=new iA(e,this._extensions,r.generateMask),this._receiver=n,this._socket=e,n[nt]=this,e[nt]=this,n.on("conclude",mA),n.on("drain",gA),n.on("error",vA),n.on("message",yA),n.on("ping",bA),n.on("pong",_A),e.setTimeout&&e.setTimeout(0),e.setNoDelay&&e.setNoDelay(),i.length>0&&e.unshift(i),e.on("close",vy),e.on("data",na),e.on("end",yy),e.on("error",by),this._readyState=t.OPEN,this.emit("open");}emitClose(){if(!this._socket){this._readyState=t.CLOSED,this.emit("close",this._closeCode,this._closeMessage);return}this._extensions[Ti.extensionName]&&this._extensions[Ti.extensionName].cleanup(),this._receiver.removeAllListeners(),this._readyState=t.CLOSED,this.emit("close",this._closeCode,this._closeMessage);}close(e,i){if(this.readyState!==t.CLOSED){if(this.readyState===t.CONNECTING){St(this,this._req,"WebSocket was closed before the connection was established");return}if(this.readyState===t.CLOSING){this._closeFrameSent&&(this._closeFrameReceived||this._receiver._writableState.errorEmitted)&&this._socket.end();return}this._readyState=t.CLOSING,this._sender.close(e,i,!this._isServer,r=>{r||(this._closeFrameSent=true,(this._closeFrameReceived||this._receiver._writableState.errorEmitted)&&this._socket.end());}),this._closeTimer=setTimeout(this._socket.destroy.bind(this._socket),fA);}}pause(){this.readyState===t.CONNECTING||this.readyState===t.CLOSED||(this._paused=true,this._socket.pause());}ping(e,i,r){if(this.readyState===t.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");if(typeof e=="function"?(r=e,e=i=void 0):typeof i=="function"&&(r=i,i=void 0),typeof e=="number"&&(e=e.toString()),this.readyState!==t.OPEN){of(this,e,r);return}i===void 0&&(i=!this._isServer),this._sender.ping(e||ia,i,r);}pong(e,i,r){if(this.readyState===t.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");if(typeof e=="function"?(r=e,e=i=void 0):typeof i=="function"&&(r=i,i=void 0),typeof e=="number"&&(e=e.toString()),this.readyState!==t.OPEN){of(this,e,r);return}i===void 0&&(i=!this._isServer),this._sender.pong(e||ia,i,r);}resume(){this.readyState===t.CONNECTING||this.readyState===t.CLOSED||(this._paused=false,this._receiver._writableState.needDrain||this._socket.resume());}send(e,i,r){if(this.readyState===t.CONNECTING)throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");if(typeof i=="function"&&(r=i,i={}),typeof e=="number"&&(e=e.toString()),this.readyState!==t.OPEN){of(this,e,r);return}let n={binary:typeof e!="string",mask:!this._isServer,compress:true,fin:true,...i};this._extensions[Ti.extensionName]||(n.compress=false),this._sender.send(e||ia,n,r);}terminate(){if(this.readyState!==t.CLOSED){if(this.readyState===t.CONNECTING){St(this,this._req,"WebSocket was closed before the connection was established");return}this._socket&&(this._readyState=t.CLOSING,this._socket.destroy());}}};Object.defineProperty(qe,"CONNECTING",{enumerable:true,value:ci.indexOf("CONNECTING")});Object.defineProperty(qe.prototype,"CONNECTING",{enumerable:true,value:ci.indexOf("CONNECTING")});Object.defineProperty(qe,"OPEN",{enumerable:true,value:ci.indexOf("OPEN")});Object.defineProperty(qe.prototype,"OPEN",{enumerable:true,value:ci.indexOf("OPEN")});Object.defineProperty(qe,"CLOSING",{enumerable:true,value:ci.indexOf("CLOSING")});Object.defineProperty(qe.prototype,"CLOSING",{enumerable:true,value:ci.indexOf("CLOSING")});Object.defineProperty(qe,"CLOSED",{enumerable:true,value:ci.indexOf("CLOSED")});Object.defineProperty(qe.prototype,"CLOSED",{enumerable:true,value:ci.indexOf("CLOSED")});["binaryType","bufferedAmount","extensions","isPaused","protocol","readyState","url"].forEach(t=>{Object.defineProperty(qe.prototype,t,{enumerable:true});});["open","error","close","message"].forEach(t=>{Object.defineProperty(qe.prototype,`on${t}`,{enumerable:true,get(){for(let e of this.listeners(t))if(e[nf])return e[nA];return null},set(e){for(let i of this.listeners(t))if(i[nf]){this.removeListener(t,i);break}typeof e=="function"&&this.addEventListener(t,e,{[nf]:true});}});});qe.prototype.addEventListener=oA;qe.prototype.removeEventListener=aA;_y.exports=qe;function my(t,e,i,r){let n={allowSynchronousEvents:true,autoPong:true,protocolVersion:sf[1],maxPayload:104857600,skipUTF8Validation:false,perMessageDeflate:true,followRedirects:false,maxRedirects:10,...r,socketPath:void 0,hostname:void 0,protocol:void 0,timeout:void 0,method:"GET",host:void 0,path:void 0,port:void 0};if(t._autoPong=n.autoPong,!sf.includes(n.protocolVersion))throw new RangeError(`Unsupported protocol version: ${n.protocolVersion} (supported versions: ${sf.join(", ")})`);let s;if(e instanceof rf)s=e;else try{s=new rf(e);}catch{throw new SyntaxError(`Invalid URL: ${e}`)}s.protocol==="http:"?s.protocol="ws:":s.protocol==="https:"&&(s.protocol="wss:"),t._url=s.href;let o=s.protocol==="wss:",a=s.protocol==="ws+unix:",l;if(s.protocol!=="ws:"&&!o&&!a?l=`The URL's protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"`:a&&!s.pathname?l="The URL's pathname is empty":s.hash&&(l="The URL contains a fragment identifier"),l){let y=new SyntaxError(l);if(t._redirects===0)throw y;ra(t,y);return}let c=o?443:80,u=XT(16).toString("base64"),f=o?JT.request:ZT.request,d=new Set,g;if(n.createConnection=n.createConnection||(o?dA:pA),n.defaultPort=n.defaultPort||c,n.port=s.port||c,n.host=s.hostname.startsWith("[")?s.hostname.slice(1,-1):s.hostname,n.headers={...n.headers,"Sec-WebSocket-Version":n.protocolVersion,"Sec-WebSocket-Key":u,Connection:"Upgrade",Upgrade:"websocket"},n.path=s.pathname+s.search,n.timeout=n.handshakeTimeout,n.perMessageDeflate&&(g=new Ti(n.perMessageDeflate!==true?n.perMessageDeflate:{},false,n.maxPayload),n.headers["Sec-WebSocket-Extensions"]=lA({[Ti.extensionName]:g.offer()})),i.length){for(let y of i){if(typeof y!="string"||!hA.test(y)||d.has(y))throw new SyntaxError("An invalid or duplicated subprotocol was specified");d.add(y);}n.headers["Sec-WebSocket-Protocol"]=i.join(",");}if(n.origin&&(n.protocolVersion<13?n.headers["Sec-WebSocket-Origin"]=n.origin:n.headers.Origin=n.origin),(s.username||s.password)&&(n.auth=`${s.username}:${s.password}`),a){let y=n.path.split(":");n.socketPath=y[0],n.path=y[1];}let m;if(n.followRedirects){if(t._redirects===0){t._originalIpc=a,t._originalSecure=o,t._originalHostOrSocketPath=a?n.socketPath:s.host;let y=r&&r.headers;if(r={...r,headers:{}},y)for(let[b,x]of Object.entries(y))r.headers[b.toLowerCase()]=x;}else if(t.listenerCount("redirect")===0){let y=a?t._originalIpc?n.socketPath===t._originalHostOrSocketPath:false:t._originalIpc?false:s.host===t._originalHostOrSocketPath;(!y||t._originalSecure&&!o)&&(delete n.headers.authorization,delete n.headers.cookie,y||delete n.headers.host,n.auth=void 0);}n.auth&&!r.headers.authorization&&(r.headers.authorization="Basic "+Buffer.from(n.auth).toString("base64")),m=t._req=f(n),t._redirects&&t.emit("redirect",t.url,m);}else m=t._req=f(n);n.timeout&&m.on("timeout",()=>{St(t,m,"Opening handshake has timed out");}),m.on("error",y=>{m===null||m[dy]||(m=t._req=null,ra(t,y));}),m.on("response",y=>{let b=y.headers.location,x=y.statusCode;if(b&&n.followRedirects&&x>=300&&x<400){if(++t._redirects>n.maxRedirects){St(t,m,"Maximum redirects exceeded");return}m.abort();let E;try{E=new rf(b,e);}catch{let k=new SyntaxError(`Invalid URL: ${b}`);ra(t,k);return}my(t,E,i,r);}else t.emit("unexpected-response",m,y)||St(t,m,`Unexpected server response: ${y.statusCode}`);}),m.on("upgrade",(y,b,x)=>{if(t.emit("upgrade",y),t.readyState!==qe.CONNECTING)return;m=t._req=null;let E=y.headers.upgrade;if(E===void 0||E.toLowerCase()!=="websocket"){St(t,b,"Invalid Upgrade header");return}let O=eA("sha1").update(u+rA).digest("base64");if(y.headers["sec-websocket-accept"]!==O){St(t,b,"Invalid Sec-WebSocket-Accept header");return}let k=y.headers["sec-websocket-protocol"],S;if(k!==void 0?d.size?d.has(k)||(S="Server sent an invalid subprotocol"):S="Server sent a subprotocol but none was requested":d.size&&(S="Server sent no subprotocol"),S){St(t,b,S);return}k&&(t._protocol=k);let R=y.headers["sec-websocket-extensions"];if(R!==void 0){if(!g){St(t,b,"Server sent a Sec-WebSocket-Extensions header but no extension was requested");return}let T;try{T=cA(R);}catch{St(t,b,"Invalid Sec-WebSocket-Extensions header");return}let A=Object.keys(T);if(A.length!==1||A[0]!==Ti.extensionName){St(t,b,"Server indicated an extension that was not requested");return}try{g.accept(T[Ti.extensionName]);}catch{St(t,b,"Invalid Sec-WebSocket-Extensions header");return}t._extensions[Ti.extensionName]=g;}t.setSocket(b,x,{allowSynchronousEvents:n.allowSynchronousEvents,generateMask:n.generateMask,maxPayload:n.maxPayload,skipUTF8Validation:n.skipUTF8Validation});}),n.finishRequest?n.finishRequest(m,t):m.end();}function ra(t,e){t._readyState=qe.CLOSING,t.emit("error",e),t.emitClose();}function pA(t){return t.path=t.socketPath,hy.connect(t)}function dA(t){return t.path=void 0,!t.servername&&t.servername!==""&&(t.servername=hy.isIP(t.host)?"":t.host),QT.connect(t)}function St(t,e,i){t._readyState=qe.CLOSING;let r=new Error(i);Error.captureStackTrace(r,St),e.setHeader?(e[dy]=true,e.abort(),e.socket&&!e.socket.destroyed&&e.socket.destroy(),process.nextTick(ra,t,r)):(e.destroy(r),e.once("error",t.emit.bind(t,"error")),e.once("close",t.emitClose.bind(t)));}function of(t,e,i){if(e){let r=uA(e).length;t._socket?t._sender._bufferedBytes+=r:t._bufferedAmount+=r;}if(i){let r=new Error(`WebSocket is not open: readyState ${t.readyState} (${ci[t.readyState]})`);process.nextTick(i,r);}}function mA(t,e){let i=this[nt];i._closeFrameReceived=true,i._closeMessage=e,i._closeCode=t,i._socket[nt]!==void 0&&(i._socket.removeListener("data",na),process.nextTick(gy,i._socket),t===1005?i.close():i.close(t,e));}function gA(){let t=this[nt];t.isPaused||t._socket.resume();}function vA(t){let e=this[nt];e._socket[nt]!==void 0&&(e._socket.removeListener("data",na),process.nextTick(gy,e._socket),e.close(t[sA])),e.emit("error",t);}function fy(){this[nt].emitClose();}function yA(t,e){this[nt].emit("message",t,e);}function bA(t){let e=this[nt];e._autoPong&&e.pong(t,!this._isServer,py),e.emit("ping",t);}function _A(t){this[nt].emit("pong",t);}function gy(t){t.resume();}function vy(){let t=this[nt];this.removeListener("close",vy),this.removeListener("data",na),this.removeListener("end",yy),t._readyState=qe.CLOSING;let e;!this._readableState.endEmitted&&!t._closeFrameReceived&&!t._receiver._writableState.errorEmitted&&(e=t._socket.read())!==null&&t._receiver.write(e),t._receiver.end(),this[nt]=void 0,clearTimeout(t._closeTimer),t._receiver._writableState.finished||t._receiver._writableState.errorEmitted?t.emitClose():(t._receiver.on("error",fy),t._receiver.on("finish",fy));}function na(t){this[nt]._receiver.write(t)||this.pause();}function yy(){let t=this[nt];t._readyState=qe.CLOSING,t._receiver.end(),this.end();}function by(){let t=this[nt];this.removeListener("error",by),this.on("error",py),t&&(t._readyState=qe.CLOSING,this.destroy());}});var xy=_((kL,wy)=>{var{tokenChars:wA}=Yn();function xA(t){let e=new Set,i=-1,r=-1,n=0;for(n;n<t.length;n++){let o=t.charCodeAt(n);if(r===-1&&wA[o]===1)i===-1&&(i=n);else if(n!==0&&(o===32||o===9))r===-1&&i!==-1&&(r=n);else if(o===44){if(i===-1)throw new SyntaxError(`Unexpected character at index ${n}`);r===-1&&(r=n);let a=t.slice(i,r);if(e.has(a))throw new SyntaxError(`The "${a}" subprotocol is duplicated`);e.add(a),i=r=-1;}else throw new SyntaxError(`Unexpected character at index ${n}`)}if(i===-1||r!==-1)throw new SyntaxError("Unexpected end of input");let s=t.slice(i,n);if(e.has(s))throw new SyntaxError(`The "${s}" subprotocol is duplicated`);return e.add(s),e}wy.exports={parse:xA};});var Ay=_((CL,Ty)=>{var SA=require$$0$5,sa=require$$19,{Duplex:OL}=require$$12,{createHash:EA}=require$$5,Sy=tf(),sr=Gn(),kA=xy(),OA=af(),{GUID:CA,kWebSocket:TA}=Oi(),AA=/^[+/0-9A-Za-z]{22}==$/,Ey=0,ky=1,Cy=2,lf=class extends SA{constructor(e,i){if(super(),e={allowSynchronousEvents:true,autoPong:true,maxPayload:100*1024*1024,skipUTF8Validation:false,perMessageDeflate:false,handleProtocols:null,clientTracking:true,verifyClient:null,noServer:false,backlog:null,server:null,host:null,path:null,port:null,WebSocket:OA,...e},e.port==null&&!e.server&&!e.noServer||e.port!=null&&(e.server||e.noServer)||e.server&&e.noServer)throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');if(e.port!=null?(this._server=sa.createServer((r,n)=>{let s=sa.STATUS_CODES[426];n.writeHead(426,{"Content-Length":s.length,"Content-Type":"text/plain"}),n.end(s);}),this._server.listen(e.port,e.host,e.backlog,i)):e.server&&(this._server=e.server),this._server){let r=this.emit.bind(this,"connection");this._removeListeners=IA(this._server,{listening:this.emit.bind(this,"listening"),error:this.emit.bind(this,"error"),upgrade:(n,s,o)=>{this.handleUpgrade(n,s,o,r);}});}e.perMessageDeflate===true&&(e.perMessageDeflate={}),e.clientTracking&&(this.clients=new Set,this._shouldEmitClose=false),this.options=e,this._state=Ey;}address(){if(this.options.noServer)throw new Error('The server is operating in "noServer" mode');return this._server?this._server.address():null}close(e){if(this._state===Cy){e&&this.once("close",()=>{e(new Error("The server is not running"));}),process.nextTick(Jn,this);return}if(e&&this.once("close",e),this._state!==ky)if(this._state=ky,this.options.noServer||this.options.server)this._server&&(this._removeListeners(),this._removeListeners=this._server=null),this.clients?this.clients.size?this._shouldEmitClose=true:process.nextTick(Jn,this):process.nextTick(Jn,this);else {let i=this._server;this._removeListeners(),this._removeListeners=this._server=null,i.close(()=>{Jn(this);});}}shouldHandle(e){if(this.options.path){let i=e.url.indexOf("?");if((i!==-1?e.url.slice(0,i):e.url)!==this.options.path)return  false}return  true}handleUpgrade(e,i,r,n){i.on("error",Oy);let s=e.headers["sec-websocket-key"],o=e.headers.upgrade,a=+e.headers["sec-websocket-version"];if(e.method!=="GET"){or(this,e,i,405,"Invalid HTTP method");return}if(o===void 0||o.toLowerCase()!=="websocket"){or(this,e,i,400,"Invalid Upgrade header");return}if(s===void 0||!AA.test(s)){or(this,e,i,400,"Missing or invalid Sec-WebSocket-Key header");return}if(a!==8&&a!==13){or(this,e,i,400,"Missing or invalid Sec-WebSocket-Version header");return}if(!this.shouldHandle(e)){Zn(i,400);return}let l=e.headers["sec-websocket-protocol"],c=new Set;if(l!==void 0)try{c=kA.parse(l);}catch{or(this,e,i,400,"Invalid Sec-WebSocket-Protocol header");return}let u=e.headers["sec-websocket-extensions"],f={};if(this.options.perMessageDeflate&&u!==void 0){let d=new sr(this.options.perMessageDeflate,true,this.options.maxPayload);try{let g=Sy.parse(u);g[sr.extensionName]&&(d.accept(g[sr.extensionName]),f[sr.extensionName]=d);}catch{or(this,e,i,400,"Invalid or unacceptable Sec-WebSocket-Extensions header");return}}if(this.options.verifyClient){let d={origin:e.headers[`${a===8?"sec-websocket-origin":"origin"}`],secure:!!(e.socket.authorized||e.socket.encrypted),req:e};if(this.options.verifyClient.length===2){this.options.verifyClient(d,(g,m,y,b)=>{if(!g)return Zn(i,m||401,y,b);this.completeUpgrade(f,s,c,e,i,r,n);});return}if(!this.options.verifyClient(d))return Zn(i,401)}this.completeUpgrade(f,s,c,e,i,r,n);}completeUpgrade(e,i,r,n,s,o,a){if(!s.readable||!s.writable)return s.destroy();if(s[TA])throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");if(this._state>Ey)return Zn(s,503);let c=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade",`Sec-WebSocket-Accept: ${EA("sha1").update(i+CA).digest("base64")}`],u=new this.options.WebSocket(null,void 0,this.options);if(r.size){let f=this.options.handleProtocols?this.options.handleProtocols(r,n):r.values().next().value;f&&(c.push(`Sec-WebSocket-Protocol: ${f}`),u._protocol=f);}if(e[sr.extensionName]){let f=e[sr.extensionName].params,d=Sy.format({[sr.extensionName]:[f]});c.push(`Sec-WebSocket-Extensions: ${d}`),u._extensions=e;}this.emit("headers",c,n),s.write(c.concat(`\r
`).join(`\r
`)),s.removeListener("error",Oy),u.setSocket(s,o,{allowSynchronousEvents:this.options.allowSynchronousEvents,maxPayload:this.options.maxPayload,skipUTF8Validation:this.options.skipUTF8Validation}),this.clients&&(this.clients.add(u),u.on("close",()=>{this.clients.delete(u),this._shouldEmitClose&&!this.clients.size&&process.nextTick(Jn,this);})),a(u,n);}};Ty.exports=lf;function IA(t,e){for(let i of Object.keys(e))t.on(i,e[i]);return function(){for(let r of Object.keys(e))t.removeListener(r,e[r]);}}function Jn(t){t._state=Cy,t.emit("close");}function Oy(){this.destroy();}function Zn(t,e,i,r){i=i||sa.STATUS_CODES[e],r={Connection:"close","Content-Type":"text/html","Content-Length":Buffer.byteLength(i),...r},t.once("finish",t.destroy),t.end(`HTTP/1.1 ${e} ${sa.STATUS_CODES[e]}\r
`+Object.keys(r).map(n=>`${n}: ${r[n]}`).join(`\r
`)+`\r
\r
`+i);}function or(t,e,i,r,n){if(t.listenerCount("wsClientError")){let s=new Error(n);Error.captureStackTrace(s,or),t.emit("wsClientError",s,i,e);}else Zn(i,r,n);}});var By=_((AL,Ly)=>{var Ai=require$$20,LA=process.cwd,oa=null,BA=process.env.GRACEFUL_FS_PLATFORM||process.platform;process.cwd=function(){return oa||(oa=LA.call(process)),oa};try{process.cwd();}catch{}typeof process.chdir=="function"&&(hf=process.chdir,process.chdir=function(t){oa=null,hf.call(process,t);},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,hf));var hf;Ly.exports=RA;function RA(t){Ai.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&e(t),t.lutimes||i(t),t.chown=s(t.chown),t.fchown=s(t.fchown),t.lchown=s(t.lchown),t.chmod=r(t.chmod),t.fchmod=r(t.fchmod),t.lchmod=r(t.lchmod),t.chownSync=o(t.chownSync),t.fchownSync=o(t.fchownSync),t.lchownSync=o(t.lchownSync),t.chmodSync=n(t.chmodSync),t.fchmodSync=n(t.fchmodSync),t.lchmodSync=n(t.lchmodSync),t.stat=a(t.stat),t.fstat=a(t.fstat),t.lstat=a(t.lstat),t.statSync=l(t.statSync),t.fstatSync=l(t.fstatSync),t.lstatSync=l(t.lstatSync),t.chmod&&!t.lchmod&&(t.lchmod=function(u,f,d){d&&process.nextTick(d);},t.lchmodSync=function(){}),t.chown&&!t.lchown&&(t.lchown=function(u,f,d,g){g&&process.nextTick(g);},t.lchownSync=function(){}),BA==="win32"&&(t.rename=typeof t.rename!="function"?t.rename:function(u){function f(d,g,m){var y=Date.now(),b=0;u(d,g,function x(E){if(E&&(E.code==="EACCES"||E.code==="EPERM")&&Date.now()-y<6e4){setTimeout(function(){t.stat(g,function(O,k){O&&O.code==="ENOENT"?u(d,g,x):m(E);});},b),b<100&&(b+=10);return}m&&m(E);});}return Object.setPrototypeOf&&Object.setPrototypeOf(f,u),f}(t.rename)),t.read=typeof t.read!="function"?t.read:function(u){function f(d,g,m,y,b,x){var E;if(x&&typeof x=="function"){var O=0;E=function(k,S,R){if(k&&k.code==="EAGAIN"&&O<10)return O++,u.call(t,d,g,m,y,b,E);x.apply(this,arguments);};}return u.call(t,d,g,m,y,b,E)}return Object.setPrototypeOf&&Object.setPrototypeOf(f,u),f}(t.read),t.readSync=typeof t.readSync!="function"?t.readSync:function(u){return function(f,d,g,m,y){for(var b=0;;)try{return u.call(t,f,d,g,m,y)}catch(x){if(x.code==="EAGAIN"&&b<10){b++;continue}throw x}}}(t.readSync);function e(u){u.lchmod=function(f,d,g){u.open(f,Ai.O_WRONLY|Ai.O_SYMLINK,d,function(m,y){if(m){g&&g(m);return}u.fchmod(y,d,function(b){u.close(y,function(x){g&&g(b||x);});});});},u.lchmodSync=function(f,d){var g=u.openSync(f,Ai.O_WRONLY|Ai.O_SYMLINK,d),m=true,y;try{y=u.fchmodSync(g,d),m=!1;}finally{if(m)try{u.closeSync(g);}catch{}else u.closeSync(g);}return y};}function i(u){Ai.hasOwnProperty("O_SYMLINK")&&u.futimes?(u.lutimes=function(f,d,g,m){u.open(f,Ai.O_SYMLINK,function(y,b){if(y){m&&m(y);return}u.futimes(b,d,g,function(x){u.close(b,function(E){m&&m(x||E);});});});},u.lutimesSync=function(f,d,g){var m=u.openSync(f,Ai.O_SYMLINK),y,b=true;try{y=u.futimesSync(m,d,g),b=!1;}finally{if(b)try{u.closeSync(m);}catch{}else u.closeSync(m);}return y}):u.futimes&&(u.lutimes=function(f,d,g,m){m&&process.nextTick(m);},u.lutimesSync=function(){});}function r(u){return u&&function(f,d,g){return u.call(t,f,d,function(m){c(m)&&(m=null),g&&g.apply(this,arguments);})}}function n(u){return u&&function(f,d){try{return u.call(t,f,d)}catch(g){if(!c(g))throw g}}}function s(u){return u&&function(f,d,g,m){return u.call(t,f,d,g,function(y){c(y)&&(y=null),m&&m.apply(this,arguments);})}}function o(u){return u&&function(f,d,g){try{return u.call(t,f,d,g)}catch(m){if(!c(m))throw m}}}function a(u){return u&&function(f,d,g){typeof d=="function"&&(g=d,d=null);function m(y,b){b&&(b.uid<0&&(b.uid+=4294967296),b.gid<0&&(b.gid+=4294967296)),g&&g.apply(this,arguments);}return d?u.call(t,f,d,m):u.call(t,f,m)}}function l(u){return u&&function(f,d){var g=d?u.call(t,f,d):u.call(t,f);return g&&(g.uid<0&&(g.uid+=4294967296),g.gid<0&&(g.gid+=4294967296)),g}}function c(u){if(!u||u.code==="ENOSYS")return  true;var f=!process.getuid||process.getuid()!==0;return !!(f&&(u.code==="EINVAL"||u.code==="EPERM"))}}});var My=_((IL,Py)=>{var Ry=require$$12.Stream;Py.exports=PA;function PA(t){return {ReadStream:e,WriteStream:i};function e(r,n){if(!(this instanceof e))return new e(r,n);Ry.call(this);var s=this;this.path=r,this.fd=null,this.readable=true,this.paused=false,this.flags="r",this.mode=438,this.bufferSize=64*1024,n=n||{};for(var o=Object.keys(n),a=0,l=o.length;a<l;a++){var c=o[a];this[c]=n[c];}if(this.encoding&&this.setEncoding(this.encoding),this.start!==void 0){if(typeof this.start!="number")throw TypeError("start must be a Number");if(this.end===void 0)this.end=1/0;else if(typeof this.end!="number")throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start;}if(this.fd!==null){process.nextTick(function(){s._read();});return}t.open(this.path,this.flags,this.mode,function(u,f){if(u){s.emit("error",u),s.readable=false;return}s.fd=f,s.emit("open",f),s._read();});}function i(r,n){if(!(this instanceof i))return new i(r,n);Ry.call(this),this.path=r,this.fd=null,this.writable=true,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,n=n||{};for(var s=Object.keys(n),o=0,a=s.length;o<a;o++){var l=s[o];this[l]=n[l];}if(this.start!==void 0){if(typeof this.start!="number")throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start;}this.busy=false,this._queue=[],this.fd===null&&(this._open=t.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush());}}});var qy=_((NL,Fy)=>{Fy.exports=FA;var MA=Object.getPrototypeOf||function(t){return t.__proto__};function FA(t){if(t===null||typeof t!="object")return t;if(t instanceof Object)var e={__proto__:MA(t)};else var e=Object.create(null);return Object.getOwnPropertyNames(t).forEach(function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i));}),e}});var $y=_((LL,mf)=>{var Me=require$$0$4,qA=By(),DA=My(),jA=qy(),aa=require$$1,tt,ca;typeof Symbol=="function"&&typeof Symbol.for=="function"?(tt=Symbol.for("graceful-fs.queue"),ca=Symbol.for("graceful-fs.previous")):(tt="___graceful-fs.queue",ca="___graceful-fs.previous");function UA(){}function Uy(t,e){Object.defineProperty(t,tt,{get:function(){return e}});}var ar=UA;aa.debuglog?ar=aa.debuglog("gfs4"):/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&(ar=function(){var t=aa.format.apply(aa,arguments);t="GFS4: "+t.split(/\n/).join(`
GFS4: `),console.error(t);});Me[tt]||(Dy=commonjsGlobal[tt]||[],Uy(Me,Dy),Me.close=function(t){function e(i,r){return t.call(Me,i,function(n){n||jy(),typeof r=="function"&&r.apply(this,arguments);})}return Object.defineProperty(e,ca,{value:t}),e}(Me.close),Me.closeSync=function(t){function e(i){t.apply(Me,arguments),jy();}return Object.defineProperty(e,ca,{value:t}),e}(Me.closeSync),/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&process.on("exit",function(){ar(Me[tt]),require$$10$1.equal(Me[tt].length,0);}));var Dy;commonjsGlobal[tt]||Uy(commonjsGlobal,Me[tt]);mf.exports=pf(jA(Me));process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&!Me.__patched&&(mf.exports=pf(Me),Me.__patched=true);function pf(t){qA(t),t.gracefulify=pf,t.createReadStream=S,t.createWriteStream=R;var e=t.readFile;t.readFile=i;function i(C,L,P){return typeof L=="function"&&(P=L,L=null),U(C,L,P);function U(q,H,j,V){return e(q,H,function(W){W&&(W.code==="EMFILE"||W.code==="ENFILE")?Kr([U,[q,H,j],W,V||Date.now(),Date.now()]):typeof j=="function"&&j.apply(this,arguments);})}}var r=t.writeFile;t.writeFile=n;function n(C,L,P,U){return typeof P=="function"&&(U=P,P=null),q(C,L,P,U);function q(H,j,V,W,Q){return r(H,j,V,function(Y){Y&&(Y.code==="EMFILE"||Y.code==="ENFILE")?Kr([q,[H,j,V,W],Y,Q||Date.now(),Date.now()]):typeof W=="function"&&W.apply(this,arguments);})}}var s=t.appendFile;s&&(t.appendFile=o);function o(C,L,P,U){return typeof P=="function"&&(U=P,P=null),q(C,L,P,U);function q(H,j,V,W,Q){return s(H,j,V,function(Y){Y&&(Y.code==="EMFILE"||Y.code==="ENFILE")?Kr([q,[H,j,V,W],Y,Q||Date.now(),Date.now()]):typeof W=="function"&&W.apply(this,arguments);})}}var a=t.copyFile;a&&(t.copyFile=l);function l(C,L,P,U){return typeof P=="function"&&(U=P,P=0),q(C,L,P,U);function q(H,j,V,W,Q){return a(H,j,V,function(Y){Y&&(Y.code==="EMFILE"||Y.code==="ENFILE")?Kr([q,[H,j,V,W],Y,Q||Date.now(),Date.now()]):typeof W=="function"&&W.apply(this,arguments);})}}var c=t.readdir;t.readdir=f;var u=/^v[0-5]\./;function f(C,L,P){typeof L=="function"&&(P=L,L=null);var U=u.test(process.version)?function(j,V,W,Q){return c(j,q(j,V,W,Q))}:function(j,V,W,Q){return c(j,V,q(j,V,W,Q))};return U(C,L,P);function q(H,j,V,W){return function(Q,Y){Q&&(Q.code==="EMFILE"||Q.code==="ENFILE")?Kr([U,[H,j,V],Q,W||Date.now(),Date.now()]):(Y&&Y.sort&&Y.sort(),typeof V=="function"&&V.call(this,Q,Y));}}}if(process.version.substr(0,4)==="v0.8"){var d=DA(t);x=d.ReadStream,O=d.WriteStream;}var g=t.ReadStream;g&&(x.prototype=Object.create(g.prototype),x.prototype.open=E);var m=t.WriteStream;m&&(O.prototype=Object.create(m.prototype),O.prototype.open=k),Object.defineProperty(t,"ReadStream",{get:function(){return x},set:function(C){x=C;},enumerable:true,configurable:true}),Object.defineProperty(t,"WriteStream",{get:function(){return O},set:function(C){O=C;},enumerable:true,configurable:true});var y=x;Object.defineProperty(t,"FileReadStream",{get:function(){return y},set:function(C){y=C;},enumerable:true,configurable:true});var b=O;Object.defineProperty(t,"FileWriteStream",{get:function(){return b},set:function(C){b=C;},enumerable:true,configurable:true});function x(C,L){return this instanceof x?(g.apply(this,arguments),this):x.apply(Object.create(x.prototype),arguments)}function E(){var C=this;A(C.path,C.flags,C.mode,function(L,P){L?(C.autoClose&&C.destroy(),C.emit("error",L)):(C.fd=P,C.emit("open",P),C.read());});}function O(C,L){return this instanceof O?(m.apply(this,arguments),this):O.apply(Object.create(O.prototype),arguments)}function k(){var C=this;A(C.path,C.flags,C.mode,function(L,P){L?(C.destroy(),C.emit("error",L)):(C.fd=P,C.emit("open",P));});}function S(C,L){return new t.ReadStream(C,L)}function R(C,L){return new t.WriteStream(C,L)}var T=t.open;t.open=A;function A(C,L,P,U){return typeof P=="function"&&(U=P,P=null),q(C,L,P,U);function q(H,j,V,W,Q){return T(H,j,V,function(Y,de){Y&&(Y.code==="EMFILE"||Y.code==="ENFILE")?Kr([q,[H,j,V,W],Y,Q||Date.now(),Date.now()]):typeof W=="function"&&W.apply(this,arguments);})}}return t}function Kr(t){ar("ENQUEUE",t[0].name,t[1]),Me[tt].push(t),df();}var la;function jy(){for(var t=Date.now(),e=0;e<Me[tt].length;++e)Me[tt][e].length>2&&(Me[tt][e][3]=t,Me[tt][e][4]=t);df();}function df(){if(clearTimeout(la),la=void 0,Me[tt].length!==0){var t=Me[tt].shift(),e=t[0],i=t[1],r=t[2],n=t[3],s=t[4];if(n===void 0)ar("RETRY",e.name,i),e.apply(null,i);else if(Date.now()-n>=6e4){ar("TIMEOUT",e.name,i);var o=i.pop();typeof o=="function"&&o.call(null,r);}else {var a=Date.now()-s,l=Math.max(s-n,1),c=Math.min(l*1.2,100);a>=c?(ar("RETRY",e.name,i),e.apply(null,i.concat([n]))):Me[tt].push(t);}la===void 0&&(la=setTimeout(df,0));}}});var Hy=_((BL,Vy)=>{function Lt(t,e){typeof e=="boolean"&&(e={forever:e}),this._originalTimeouts=JSON.parse(JSON.stringify(t)),this._timeouts=t,this._options=e||{},this._maxRetryTime=e&&e.maxRetryTime||1/0,this._fn=null,this._errors=[],this._attempts=1,this._operationTimeout=null,this._operationTimeoutCb=null,this._timeout=null,this._operationStart=null,this._options.forever&&(this._cachedTimeouts=this._timeouts.slice(0));}Vy.exports=Lt;Lt.prototype.reset=function(){this._attempts=1,this._timeouts=this._originalTimeouts;};Lt.prototype.stop=function(){this._timeout&&clearTimeout(this._timeout),this._timeouts=[],this._cachedTimeouts=null;};Lt.prototype.retry=function(t){if(this._timeout&&clearTimeout(this._timeout),!t)return  false;var e=new Date().getTime();if(t&&e-this._operationStart>=this._maxRetryTime)return this._errors.unshift(new Error("RetryOperation timeout occurred")),false;this._errors.push(t);var i=this._timeouts.shift();if(i===void 0)if(this._cachedTimeouts)this._errors.splice(this._errors.length-1,this._errors.length),this._timeouts=this._cachedTimeouts.slice(0),i=this._timeouts.shift();else return  false;var r=this,n=setTimeout(function(){r._attempts++,r._operationTimeoutCb&&(r._timeout=setTimeout(function(){r._operationTimeoutCb(r._attempts);},r._operationTimeout),r._options.unref&&r._timeout.unref()),r._fn(r._attempts);},i);return this._options.unref&&n.unref(),true};Lt.prototype.attempt=function(t,e){this._fn=t,e&&(e.timeout&&(this._operationTimeout=e.timeout),e.cb&&(this._operationTimeoutCb=e.cb));var i=this;this._operationTimeoutCb&&(this._timeout=setTimeout(function(){i._operationTimeoutCb();},i._operationTimeout)),this._operationStart=new Date().getTime(),this._fn(this._attempts);};Lt.prototype.try=function(t){console.log("Using RetryOperation.try() is deprecated"),this.attempt(t);};Lt.prototype.start=function(t){console.log("Using RetryOperation.start() is deprecated"),this.attempt(t);};Lt.prototype.start=Lt.prototype.try;Lt.prototype.errors=function(){return this._errors};Lt.prototype.attempts=function(){return this._attempts};Lt.prototype.mainError=function(){if(this._errors.length===0)return null;for(var t={},e=null,i=0,r=0;r<this._errors.length;r++){var n=this._errors[r],s=n.message,o=(t[s]||0)+1;t[s]=o,o>=i&&(e=n,i=o);}return e};});var Gy=_(lr=>{var $A=Hy();lr.operation=function(t){var e=lr.timeouts(t);return new $A(e,{forever:t&&t.forever,unref:t&&t.unref,maxRetryTime:t&&t.maxRetryTime})};lr.timeouts=function(t){if(t instanceof Array)return [].concat(t);var e={retries:10,factor:2,minTimeout:1*1e3,maxTimeout:1/0,randomize:false};for(var i in t)e[i]=t[i];if(e.minTimeout>e.maxTimeout)throw new Error("minTimeout is greater than maxTimeout");for(var r=[],n=0;n<e.retries;n++)r.push(this.createTimeout(n,e));return t&&t.forever&&!r.length&&r.push(this.createTimeout(n,e)),r.sort(function(s,o){return s-o}),r};lr.createTimeout=function(t,e){var i=e.randomize?Math.random()+1:1,r=Math.round(i*e.minTimeout*Math.pow(e.factor,t));return r=Math.min(r,e.maxTimeout),r};lr.wrap=function(t,e,i){if(e instanceof Array&&(i=e,e=null),!i){i=[];for(var r in t)typeof t[r]=="function"&&i.push(r);}for(var n=0;n<i.length;n++){var s=i[n],o=t[s];t[s]=function(l){var c=lr.operation(e),u=Array.prototype.slice.call(arguments,1),f=u.pop();u.push(function(d){c.retry(d)||(d&&(arguments[0]=c.mainError()),f.apply(this,arguments));}),c.attempt(function(){l.apply(t,u);});}.bind(t,o),t[s].options=e;}};});var Wy=_((PL,Yy)=>{Yy.exports=Gy();});var Ky=_((ML,ua)=>{ua.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"];process.platform!=="win32"&&ua.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT");process.platform==="linux"&&ua.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED");});var Xy=_((FL,Zr)=>{var Pe=commonjsGlobal.process,cr=function(t){return t&&typeof t=="object"&&typeof t.removeListener=="function"&&typeof t.emit=="function"&&typeof t.reallyExit=="function"&&typeof t.listeners=="function"&&typeof t.kill=="function"&&typeof t.pid=="number"&&typeof t.on=="function"};cr(Pe)?(zy=require$$10$1,zr=Ky(),Jy=/^win/i.test(Pe.platform),Qn=require$$0$5,typeof Qn!="function"&&(Qn=Qn.EventEmitter),Pe.__signal_exit_emitter__?Ze=Pe.__signal_exit_emitter__:(Ze=Pe.__signal_exit_emitter__=new Qn,Ze.count=0,Ze.emitted={}),Ze.infinite||(Ze.setMaxListeners(1/0),Ze.infinite=true),Zr.exports=function(t,e){if(!cr(commonjsGlobal.process))return function(){};zy.equal(typeof t,"function","a callback must be provided for exit handler"),Jr===false&&gf();var i="exit";e&&e.alwaysLast&&(i="afterexit");var r=function(){Ze.removeListener(i,t),Ze.listeners("exit").length===0&&Ze.listeners("afterexit").length===0&&fa();};return Ze.on(i,t),r},fa=function(){!Jr||!cr(commonjsGlobal.process)||(Jr=false,zr.forEach(function(e){try{Pe.removeListener(e,ha[e]);}catch{}}),Pe.emit=pa,Pe.reallyExit=vf,Ze.count-=1);},Zr.exports.unload=fa,ur=function(e,i,r){Ze.emitted[e]||(Ze.emitted[e]=true,Ze.emit(e,i,r));},ha={},zr.forEach(function(t){ha[t]=function(){if(cr(commonjsGlobal.process)){var i=Pe.listeners(t);i.length===Ze.count&&(fa(),ur("exit",null,t),ur("afterexit",null,t),Jy&&t==="SIGHUP"&&(t="SIGINT"),Pe.kill(Pe.pid,t));}};}),Zr.exports.signals=function(){return zr},Jr=false,gf=function(){Jr||!cr(commonjsGlobal.process)||(Jr=true,Ze.count+=1,zr=zr.filter(function(e){try{return Pe.on(e,ha[e]),!0}catch{return  false}}),Pe.emit=Qy,Pe.reallyExit=Zy);},Zr.exports.load=gf,vf=Pe.reallyExit,Zy=function(e){cr(commonjsGlobal.process)&&(Pe.exitCode=e||0,ur("exit",Pe.exitCode,null),ur("afterexit",Pe.exitCode,null),vf.call(Pe,Pe.exitCode));},pa=Pe.emit,Qy=function(e,i){if(e==="exit"&&cr(commonjsGlobal.process)){i!==void 0&&(Pe.exitCode=i);var r=pa.apply(this,arguments);return ur("exit",Pe.exitCode,null),ur("afterexit",Pe.exitCode,null),r}else return pa.apply(this,arguments)}):Zr.exports=function(){return function(){}};var zy,zr,Jy,Qn,Ze,fa,ur,ha,Jr,gf,vf,Zy,pa,Qy;});var ab=_((qL,ob)=>{var VA=require$$1$1,rb=$y(),HA=Wy(),GA=Xy(),Ii={},eb=Symbol();function YA(t,e,i){let r=e[eb];if(r)return e.stat(t,(s,o)=>{if(s)return i(s);i(null,o.mtime,r);});let n=new Date(Math.ceil(Date.now()/1e3)*1e3+5);e.utimes(t,n,n,s=>{if(s)return i(s);e.stat(t,(o,a)=>{if(o)return i(o);let l=a.mtime.getTime()%1e3===0?"s":"ms";Object.defineProperty(e,eb,{value:l}),i(null,a.mtime,l);});});}function WA(t){let e=Date.now();return t==="s"&&(e=Math.ceil(e/1e3)*1e3),new Date(e)}function ma(t,e){return e.lockfilePath||`${t}.lock`}function nb(t,e,i){if(!e.realpath)return i(null,VA.resolve(t));e.fs.realpath(t,i);}function bf(t,e,i){let r=ma(t,e);e.fs.mkdir(r,n=>{if(!n)return YA(r,e.fs,(s,o,a)=>{if(s)return e.fs.rmdir(r,()=>{}),i(s);i(null,o,a);});if(n.code!=="EEXIST")return i(n);if(e.stale<=0)return i(Object.assign(new Error("Lock file is already being held"),{code:"ELOCKED",file:t}));e.fs.stat(r,(s,o)=>{if(s)return s.code==="ENOENT"?bf(t,{...e,stale:0},i):i(s);if(!KA(o,e))return i(Object.assign(new Error("Lock file is already being held"),{code:"ELOCKED",file:t}));sb(t,e,a=>{if(a)return i(a);bf(t,{...e,stale:0},i);});});});}function KA(t,e){return t.mtime.getTime()<Date.now()-e.stale}function sb(t,e,i){e.fs.rmdir(ma(t,e),r=>{if(r&&r.code!=="ENOENT")return i(r);i();});}function da(t,e){let i=Ii[t];i.updateTimeout||(i.updateDelay=i.updateDelay||e.update,i.updateTimeout=setTimeout(()=>{i.updateTimeout=null,e.fs.stat(i.lockfilePath,(r,n)=>{let s=i.lastUpdate+e.stale<Date.now();if(r)return r.code==="ENOENT"||s?yf(t,i,Object.assign(r,{code:"ECOMPROMISED"})):(i.updateDelay=1e3,da(t,e));if(!(i.mtime.getTime()===n.mtime.getTime()))return yf(t,i,Object.assign(new Error("Unable to update lock within the stale threshold"),{code:"ECOMPROMISED"}));let a=WA(i.mtimePrecision);e.fs.utimes(i.lockfilePath,a,a,l=>{let c=i.lastUpdate+e.stale<Date.now();if(!i.released){if(l)return l.code==="ENOENT"||c?yf(t,i,Object.assign(l,{code:"ECOMPROMISED"})):(i.updateDelay=1e3,da(t,e));i.mtime=a,i.lastUpdate=Date.now(),i.updateDelay=null,da(t,e);}});});},i.updateDelay),i.updateTimeout.unref&&i.updateTimeout.unref());}function yf(t,e,i){e.released=true,e.updateTimeout&&clearTimeout(e.updateTimeout),Ii[t]===e&&delete Ii[t],e.options.onCompromised(i);}function zA(t,e,i){e={stale:1e4,update:null,realpath:true,retries:0,fs:rb,onCompromised:r=>{throw r},...e},e.retries=e.retries||0,e.retries=typeof e.retries=="number"?{retries:e.retries}:e.retries,e.stale=Math.max(e.stale||0,2e3),e.update=e.update==null?e.stale/2:e.update||0,e.update=Math.max(Math.min(e.update,e.stale/2),1e3),nb(t,e,(r,n)=>{if(r)return i(r);let s=HA.operation(e.retries);s.attempt(()=>{bf(n,e,(o,a,l)=>{if(s.retry(o))return;if(o)return i(s.mainError());let c=Ii[n]={lockfilePath:ma(n,e),mtime:a,mtimePrecision:l,options:e,lastUpdate:Date.now()};da(n,e),i(null,u=>{if(c.released)return u&&u(Object.assign(new Error("Lock is already released"),{code:"ERELEASED"}));JA(n,{...e,realpath:false},u);});});});});}function JA(t,e,i){e={fs:rb,realpath:true,...e},nb(t,e,(r,n)=>{if(r)return i(r);let s=Ii[n];if(!s)return i(Object.assign(new Error("Lock is not acquired/owned by you"),{code:"ENOTACQUIRED"}));s.updateTimeout&&clearTimeout(s.updateTimeout),s.released=true,delete Ii[n],sb(n,e,i);});}function tb(t){return (...e)=>new Promise((i,r)=>{e.push((n,s)=>{n?r(n):i(s);}),t(...e);})}var ib=false;function ZA(){ib||(ib=true,GA(()=>{for(let t in Ii){let e=Ii[t].options;try{e.fs.rmdirSync(ma(t,e));}catch{}}}));}ob.exports.lock=async(t,e)=>{ZA();let i=await tb(zA)(t,e);return tb(i)};});var dI={};Sf(dI,{HttpsProxyAgent:()=>yb.HttpsProxyAgent,PNG:()=>bb.PNG,SocksProxyAgent:()=>wb.SocksProxyAgent,colors:()=>QA,debug:()=>XA,diff:()=>eI,dotenv:()=>tI,getProxyForUrl:()=>vb.getProxyForUrl,jpegjs:()=>iI,lockfile:()=>nI,mime:()=>sI,minimatch:()=>oI,open:()=>aI,program:()=>_b.program,progress:()=>lI,ws:()=>uI,wsReceiver:()=>hI,wsSender:()=>pI,wsServer:()=>fI,yaml:()=>cI});utilsBundleImpl=$b(dI);var lb=Ue(Qf()),cb=Ue(yr());var Ba={};Sf(Ba,{Diff:()=>Ct,applyPatch:()=>Nh,applyPatches:()=>K_,canonicalize:()=>Ss,convertChangesToDMP:()=>rw,convertChangesToXML:()=>nw,createPatch:()=>z_,createTwoFilesPatch:()=>Lh,diffArrays:()=>H_,diffChars:()=>O_,diffCss:()=>P_,diffJson:()=>V_,diffLines:()=>Ca,diffSentences:()=>R_,diffTrimmedLines:()=>B_,diffWords:()=>N_,diffWordsWithSpace:()=>Oh,formatPatch:()=>Os,merge:()=>X_,parsePatch:()=>Cs,reversePatch:()=>Bh,structuredPatch:()=>ks});function Ct(){}Ct.prototype={diff:function(e,i){var r,n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},s=n.callback;typeof n=="function"&&(s=n,n={});var o=this;function a(k){return k=o.postProcess(k,n),s?(setTimeout(function(){s(k);},0),true):k}e=this.castInput(e,n),i=this.castInput(i,n),e=this.removeEmpty(this.tokenize(e,n)),i=this.removeEmpty(this.tokenize(i,n));var l=i.length,c=e.length,u=1,f=l+c;n.maxEditLength!=null&&(f=Math.min(f,n.maxEditLength));var d=(r=n.timeout)!==null&&r!==void 0?r:1/0,g=Date.now()+d,m=[{oldPos:-1,lastComponent:void 0}],y=this.extractCommon(m[0],i,e,0,n);if(m[0].oldPos+1>=c&&y+1>=l)return a(uh(o,m[0].lastComponent,i,e,o.useLongestToken));var b=-1/0,x=1/0;function E(){for(var k=Math.max(b,-u);k<=Math.min(x,u);k+=2){var S=void 0,R=m[k-1],T=m[k+1];R&&(m[k-1]=void 0);var A=false;if(T){var C=T.oldPos-k;A=T&&0<=C&&C<l;}var L=R&&R.oldPos+1<c;if(!A&&!L){m[k]=void 0;continue}if(!L||A&&R.oldPos<T.oldPos?S=o.addToPath(T,true,false,0,n):S=o.addToPath(R,false,true,1,n),y=o.extractCommon(S,i,e,k,n),S.oldPos+1>=c&&y+1>=l)return a(uh(o,S.lastComponent,i,e,o.useLongestToken));m[k]=S,S.oldPos+1>=c&&(x=Math.min(x,k-1)),y+1>=l&&(b=Math.max(b,k+1));}u++;}if(s)(function k(){setTimeout(function(){if(u>f||Date.now()>g)return s();E()||k();},0);})();else for(;u<=f&&Date.now()<=g;){var O=E();if(O)return O}},addToPath:function(e,i,r,n,s){var o=e.lastComponent;return o&&!s.oneChangePerToken&&o.added===i&&o.removed===r?{oldPos:e.oldPos+n,lastComponent:{count:o.count+1,added:i,removed:r,previousComponent:o.previousComponent}}:{oldPos:e.oldPos+n,lastComponent:{count:1,added:i,removed:r,previousComponent:o}}},extractCommon:function(e,i,r,n,s){for(var o=i.length,a=r.length,l=e.oldPos,c=l-n,u=0;c+1<o&&l+1<a&&this.equals(r[l+1],i[c+1],s);)c++,l++,u++,s.oneChangePerToken&&(e.lastComponent={count:1,previousComponent:e.lastComponent,added:false,removed:false});return u&&!s.oneChangePerToken&&(e.lastComponent={count:u,previousComponent:e.lastComponent,added:false,removed:false}),e.oldPos=l,c},equals:function(e,i,r){return r.comparator?r.comparator(e,i):e===i||r.ignoreCase&&e.toLowerCase()===i.toLowerCase()},removeEmpty:function(e){for(var i=[],r=0;r<e.length;r++)e[r]&&i.push(e[r]);return i},castInput:function(e){return e},tokenize:function(e){return Array.from(e)},join:function(e){return e.join("")},postProcess:function(e){return e}};function uh(t,e,i,r,n){for(var s=[],o;e;)s.push(e),o=e.previousComponent,delete e.previousComponent,e=o;s.reverse();for(var a=0,l=s.length,c=0,u=0;a<l;a++){var f=s[a];if(f.removed)f.value=t.join(r.slice(u,u+f.count)),u+=f.count;else {if(!f.added&&n){var d=i.slice(c,c+f.count);d=d.map(function(g,m){var y=r[u+m];return y.length>g.length?y:g}),f.value=t.join(d);}else f.value=t.join(i.slice(c,c+f.count));c+=f.count,f.added||(u+=f.count);}}return s}var k_=new Ct;function O_(t,e,i){return k_.diff(t,e,i)}function fh(t,e){var i;for(i=0;i<t.length&&i<e.length;i++)if(t[i]!=e[i])return t.slice(0,i);return t.slice(0,i)}function hh(t,e){var i;if(!t||!e||t[t.length-1]!=e[e.length-1])return "";for(i=0;i<t.length&&i<e.length;i++)if(t[t.length-(i+1)]!=e[e.length-(i+1)])return t.slice(-i);return t.slice(-i)}function ka(t,e,i){if(t.slice(0,e.length)!=e)throw Error("string ".concat(JSON.stringify(t)," doesn't start with prefix ").concat(JSON.stringify(e),"; this is a bug"));return i+t.slice(e.length)}function Oa(t,e,i){if(!e)return t+i;if(t.slice(-e.length)!=e)throw Error("string ".concat(JSON.stringify(t)," doesn't end with suffix ").concat(JSON.stringify(e),"; this is a bug"));return t.slice(0,-e.length)+i}function Xr(t,e){return ka(t,e,"")}function _s(t,e){return Oa(t,e,"")}function ph(t,e){return e.slice(0,C_(t,e))}function C_(t,e){var i=0;t.length>e.length&&(i=t.length-e.length);var r=e.length;t.length<e.length&&(r=t.length);var n=Array(r),s=0;n[0]=0;for(var o=1;o<r;o++){for(e[o]==e[s]?n[o]=n[s]:n[o]=s;s>0&&e[o]!=e[s];)s=n[s];e[o]==e[s]&&s++;}s=0;for(var a=i;a<t.length;a++){for(;s>0&&t[a]!=e[s];)s=n[s];t[a]==e[s]&&s++;}return s}function T_(t){return t.includes(`\r
`)&&!t.startsWith(`
`)&&!t.match(/[^\r]\n/)}function A_(t){return !t.includes(`\r
`)&&t.includes(`
`)}var xs="a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}",I_=new RegExp("[".concat(xs,"]+|\\s+|[^").concat(xs,"]"),"ug"),en=new Ct;en.equals=function(t,e,i){return i.ignoreCase&&(t=t.toLowerCase(),e=e.toLowerCase()),t.trim()===e.trim()};en.tokenize=function(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},i;if(e.intlSegmenter){if(e.intlSegmenter.resolvedOptions().granularity!="word")throw new Error('The segmenter passed must have a granularity of "word"');i=Array.from(e.intlSegmenter.segment(t),function(s){return s.segment});}else i=t.match(I_)||[];var r=[],n=null;return i.forEach(function(s){/\s/.test(s)?n==null?r.push(s):r.push(r.pop()+s):/\s/.test(n)?r[r.length-1]==n?r.push(r.pop()+s):r.push(n+s):r.push(s),n=s;}),r};en.join=function(t){return t.map(function(e,i){return i==0?e:e.replace(/^\s+/,"")}).join("")};en.postProcess=function(t,e){if(!t||e.oneChangePerToken)return t;var i=null,r=null,n=null;return t.forEach(function(s){s.added?r=s:s.removed?n=s:((r||n)&&dh(i,n,r,s),i=s,r=null,n=null);}),(r||n)&&dh(i,n,r,null),t};function N_(t,e,i){return (i==null?void 0:i.ignoreWhitespace)!=null&&!i.ignoreWhitespace?Oh(t,e,i):en.diff(t,e,i)}function dh(t,e,i,r){if(e&&i){var n=e.value.match(/^\s*/)[0],s=e.value.match(/\s*$/)[0],o=i.value.match(/^\s*/)[0],a=i.value.match(/\s*$/)[0];if(t){var l=fh(n,o);t.value=Oa(t.value,o,l),e.value=Xr(e.value,l),i.value=Xr(i.value,l);}if(r){var c=hh(s,a);r.value=ka(r.value,a,c),e.value=_s(e.value,c),i.value=_s(i.value,c);}}else if(i)t&&(i.value=i.value.replace(/^\s*/,"")),r&&(r.value=r.value.replace(/^\s*/,""));else if(t&&r){var u=r.value.match(/^\s*/)[0],f=e.value.match(/^\s*/)[0],d=e.value.match(/\s*$/)[0],g=fh(u,f);e.value=Xr(e.value,g);var m=hh(Xr(u,g),d);e.value=_s(e.value,m),r.value=ka(r.value,u,m),t.value=Oa(t.value,u,u.slice(0,u.length-m.length));}else if(r){var y=r.value.match(/^\s*/)[0],b=e.value.match(/\s*$/)[0],x=ph(b,y);e.value=_s(e.value,x);}else if(t){var E=t.value.match(/\s*$/)[0],O=e.value.match(/^\s*/)[0],k=ph(E,O);e.value=Xr(e.value,k);}}var kh=new Ct;kh.tokenize=function(t){var e=new RegExp("(\\r?\\n)|[".concat(xs,"]+|[^\\S\\n\\r]+|[^").concat(xs,"]"),"ug");return t.match(e)||[]};function Oh(t,e,i){return kh.diff(t,e,i)}function L_(t,e){if(typeof t=="function")e.callback=t;else if(t)for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i]);return e}var tn=new Ct;tn.tokenize=function(t,e){e.stripTrailingCr&&(t=t.replace(/\r\n/g,`
`));var i=[],r=t.split(/(\n|\r\n)/);r[r.length-1]||r.pop();for(var n=0;n<r.length;n++){var s=r[n];n%2&&!e.newlineIsToken?i[i.length-1]+=s:i.push(s);}return i};tn.equals=function(t,e,i){return i.ignoreWhitespace?((!i.newlineIsToken||!t.includes(`
`))&&(t=t.trim()),(!i.newlineIsToken||!e.includes(`
`))&&(e=e.trim())):i.ignoreNewlineAtEof&&!i.newlineIsToken&&(t.endsWith(`
`)&&(t=t.slice(0,-1)),e.endsWith(`
`)&&(e=e.slice(0,-1))),Ct.prototype.equals.call(this,t,e,i)};function Ca(t,e,i){return tn.diff(t,e,i)}function B_(t,e,i){var r=L_(i,{ignoreWhitespace:true});return tn.diff(t,e,r)}var Ch=new Ct;Ch.tokenize=function(t){return t.split(/(\S.+?[.!?])(?=\s+|$)/)};function R_(t,e,i){return Ch.diff(t,e,i)}var Th=new Ct;Th.tokenize=function(t){return t.split(/([{}:;,]|\s+)/)};function P_(t,e,i){return Th.diff(t,e,i)}function mh(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),i.push.apply(i,r);}return i}function pt(t){for(var e=1;e<arguments.length;e++){var i=arguments[e]!=null?arguments[e]:{};e%2?mh(Object(i),true).forEach(function(r){q_(t,r,i[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):mh(Object(i)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r));});}return t}function M_(t,e){if(typeof t!="object"||!t)return t;var i=t[Symbol.toPrimitive];if(i!==void 0){var r=i.call(t,e);if(typeof r!="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return (e==="string"?String:Number)(t)}function F_(t){var e=M_(t,"string");return typeof e=="symbol"?e:e+""}function Ta(t){"@babel/helpers - typeof";return Ta=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ta(t)}function q_(t,e,i){return e=F_(e),e in t?Object.defineProperty(t,e,{value:i,enumerable:true,configurable:true,writable:true}):t[e]=i,t}function ti(t){return D_(t)||j_(t)||U_(t)||$_()}function D_(t){if(Array.isArray(t))return Aa(t)}function j_(t){if(typeof Symbol!="undefined"&&t[Symbol.iterator]!=null||t["@@iterator"]!=null)return Array.from(t)}function U_(t,e){if(t){if(typeof t=="string")return Aa(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);if(i==="Object"&&t.constructor&&(i=t.constructor.name),i==="Map"||i==="Set")return Array.from(t);if(i==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return Aa(t,e)}}function Aa(t,e){(e==null||e>t.length)&&(e=t.length);for(var i=0,r=new Array(e);i<e;i++)r[i]=t[i];return r}function $_(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}var br=new Ct;br.useLongestToken=true;br.tokenize=tn.tokenize;br.castInput=function(t,e){var i=e.undefinedReplacement,r=e.stringifyReplacer,n=r===void 0?function(s,o){return typeof o=="undefined"?i:o}:r;return typeof t=="string"?t:JSON.stringify(Ss(t,null,null,n),n,"  ")};br.equals=function(t,e,i){return Ct.prototype.equals.call(br,t.replace(/,([\r\n])/g,"$1"),e.replace(/,([\r\n])/g,"$1"),i)};function V_(t,e,i){return br.diff(t,e,i)}function Ss(t,e,i,r,n){e=e||[],i=i||[],r&&(t=r(n,t));var s;for(s=0;s<e.length;s+=1)if(e[s]===t)return i[s];var o;if(Object.prototype.toString.call(t)==="[object Array]"){for(e.push(t),o=new Array(t.length),i.push(o),s=0;s<t.length;s+=1)o[s]=Ss(t[s],e,i,r,n);return e.pop(),i.pop(),o}if(t&&t.toJSON&&(t=t.toJSON()),Ta(t)==="object"&&t!==null){e.push(t),o={},i.push(o);var a=[],l;for(l in t)Object.prototype.hasOwnProperty.call(t,l)&&a.push(l);for(a.sort(),s=0;s<a.length;s+=1)l=a[s],o[l]=Ss(t[l],e,i,r,l);e.pop(),i.pop();}else o=t;return o}var Es=new Ct;Es.tokenize=function(t){return t.slice()};Es.join=Es.removeEmpty=function(t){return t};function H_(t,e,i){return Es.diff(t,e,i)}function Ah(t){return Array.isArray(t)?t.map(Ah):pt(pt({},t),{},{hunks:t.hunks.map(function(e){return pt(pt({},e),{},{lines:e.lines.map(function(i,r){var n;return i.startsWith("\\")||i.endsWith("\r")||(n=e.lines[r+1])!==null&&n!==void 0&&n.startsWith("\\")?i:i+"\r"})})})})}function Ih(t){return Array.isArray(t)?t.map(Ih):pt(pt({},t),{},{hunks:t.hunks.map(function(e){return pt(pt({},e),{},{lines:e.lines.map(function(i){return i.endsWith("\r")?i.substring(0,i.length-1):i})})})})}function G_(t){return Array.isArray(t)||(t=[t]),!t.some(function(e){return e.hunks.some(function(i){return i.lines.some(function(r){return !r.startsWith("\\")&&r.endsWith("\r")})})})}function Y_(t){return Array.isArray(t)||(t=[t]),t.some(function(e){return e.hunks.some(function(i){return i.lines.some(function(r){return r.endsWith("\r")})})})&&t.every(function(e){return e.hunks.every(function(i){return i.lines.every(function(r,n){var s;return r.startsWith("\\")||r.endsWith("\r")||((s=i.lines[n+1])===null||s===void 0?void 0:s.startsWith("\\"))})})})}function Cs(t){var e=t.split(/\n/),i=[],r=0;function n(){var a={};for(i.push(a);r<e.length;){var l=e[r];if(/^(\-\-\-|\+\+\+|@@)\s/.test(l))break;var c=/^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(l);c&&(a.index=c[1]),r++;}for(s(a),s(a),a.hunks=[];r<e.length;){var u=e[r];if(/^(Index:\s|diff\s|\-\-\-\s|\+\+\+\s|===================================================================)/.test(u))break;if(/^@@/.test(u))a.hunks.push(o());else {if(u)throw new Error("Unknown line "+(r+1)+" "+JSON.stringify(u));r++;}}}function s(a){var l=/^(---|\+\+\+)\s+(.*)\r?$/.exec(e[r]);if(l){var c=l[1]==="---"?"old":"new",u=l[2].split("	",2),f=u[0].replace(/\\\\/g,"\\");/^".*"$/.test(f)&&(f=f.substr(1,f.length-2)),a[c+"FileName"]=f,a[c+"Header"]=(u[1]||"").trim(),r++;}}function o(){var a=r,l=e[r++],c=l.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/),u={oldStart:+c[1],oldLines:typeof c[2]=="undefined"?1:+c[2],newStart:+c[3],newLines:typeof c[4]=="undefined"?1:+c[4],lines:[]};u.oldLines===0&&(u.oldStart+=1),u.newLines===0&&(u.newStart+=1);for(var f=0,d=0;r<e.length&&(d<u.oldLines||f<u.newLines||(g=e[r])!==null&&g!==void 0&&g.startsWith("\\"));r++){var g,m=e[r].length==0&&r!=e.length-1?" ":e[r][0];if(m==="+"||m==="-"||m===" "||m==="\\")u.lines.push(e[r]),m==="+"?f++:m==="-"?d++:m===" "&&(f++,d++);else throw new Error("Hunk at line ".concat(a+1," contained invalid line ").concat(e[r]))}if(!f&&u.newLines===1&&(u.newLines=0),!d&&u.oldLines===1&&(u.oldLines=0),f!==u.newLines)throw new Error("Added line count did not match for hunk at line "+(a+1));if(d!==u.oldLines)throw new Error("Removed line count did not match for hunk at line "+(a+1));return u}for(;r<e.length;)n();return i}function W_(t,e,i){var r=true,n=false,s=false,o=1;return function a(){if(r&&!s){if(n?o++:r=false,t+o<=i)return t+o;s=true;}if(!n)return s||(r=true),e<=t-o?t-o++:(n=true,a())}}function Nh(t,e){var i=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{};if(typeof e=="string"&&(e=Cs(e)),Array.isArray(e)){if(e.length>1)throw new Error("applyPatch only works with a single input.");e=e[0];}(i.autoConvertLineEndings||i.autoConvertLineEndings==null)&&(T_(t)&&G_(e)?e=Ah(e):A_(t)&&Y_(e)&&(e=Ih(e)));var r=t.split(`
`),n=e.hunks,s=i.compareLine||function(P,U,q,H){return U===H},o=i.fuzzFactor||0,a=0;if(o<0||!Number.isInteger(o))throw new Error("fuzzFactor must be a non-negative integer");if(!n.length)return t;for(var l="",c=false,u=false,f=0;f<n[n.length-1].lines.length;f++){var d=n[n.length-1].lines[f];d[0]=="\\"&&(l[0]=="+"?c=true:l[0]=="-"&&(u=true)),l=d;}if(c){if(u){if(!o&&r[r.length-1]=="")return  false}else if(r[r.length-1]=="")r.pop();else if(!o)return  false}else if(u){if(r[r.length-1]!="")r.push("");else if(!o)return  false}function g(P,U,q){for(var H=arguments.length>3&&arguments[3]!==void 0?arguments[3]:0,j=arguments.length>4&&arguments[4]!==void 0?arguments[4]:true,V=arguments.length>5&&arguments[5]!==void 0?arguments[5]:[],W=arguments.length>6&&arguments[6]!==void 0?arguments[6]:0,Q=0,Y=false;H<P.length;H++){var de=P[H],ae=de.length>0?de[0]:" ",ne=de.length>0?de.substr(1):de;if(ae==="-")if(s(U+1,r[U],ae,ne))U++,Q=0;else return !q||r[U]==null?null:(V[W]=r[U],g(P,U+1,q-1,H,false,V,W+1));if(ae==="+"){if(!j)return null;V[W]=ne,W++,Q=0,Y=true;}if(ae===" ")if(Q++,V[W]=r[U],s(U+1,r[U],ae,ne))W++,j=true,Y=false,U++;else return Y||!q?null:r[U]&&(g(P,U+1,q-1,H+1,false,V,W+1)||g(P,U+1,q-1,H,false,V,W+1))||g(P,U,q-1,H+1,false,V,W)}return W-=Q,U-=Q,V.length=W,{patchedLines:V,oldLineLastI:U-1}}for(var m=[],y=0,b=0;b<n.length;b++){for(var x=n[b],E=void 0,O=r.length-x.oldLines+o,k=void 0,S=0;S<=o;S++){k=x.oldStart+y-1;for(var R=W_(k,a,O);k!==void 0&&(E=g(x.lines,k,S),!E);k=R());if(E)break}if(!E)return  false;for(var T=a;T<k;T++)m.push(r[T]);for(var A=0;A<E.patchedLines.length;A++){var C=E.patchedLines[A];m.push(C);}a=E.oldLineLastI+1,y=k+1-x.oldStart;}for(var L=a;L<r.length;L++)m.push(r[L]);return m.join(`
`)}function K_(t,e){typeof t=="string"&&(t=Cs(t));var i=0;function r(){var n=t[i++];if(!n)return e.complete();e.loadFile(n,function(s,o){if(s)return e.complete(s);var a=Nh(o,n,e);e.patched(n,a,function(l){if(l)return e.complete(l);r();});});}r();}function ks(t,e,i,r,n,s,o){if(o||(o={}),typeof o=="function"&&(o={callback:o}),typeof o.context=="undefined"&&(o.context=4),o.newlineIsToken)throw new Error("newlineIsToken may not be used with patch-generation functions, only with diffing functions");if(o.callback){var a=o,l=a.callback;Ca(i,r,pt(pt({},o),{},{callback:function(f){var d=c(f);l(d);}}));}else return c(Ca(i,r,o));function c(u){if(!u)return;u.push({value:"",lines:[]});function f(A){return A.map(function(C){return " "+C})}for(var d=[],g=0,m=0,y=[],b=1,x=1,E=function(){var C=u[O],L=C.lines||J_(C.value);if(C.lines=L,C.added||C.removed){var P;if(!g){var U=u[O-1];g=b,m=x,U&&(y=o.context>0?f(U.lines.slice(-o.context)):[],g-=y.length,m-=y.length);}(P=y).push.apply(P,ti(L.map(function(W){return (C.added?"+":"-")+W}))),C.added?x+=L.length:b+=L.length;}else {if(g)if(L.length<=o.context*2&&O<u.length-2){var q;(q=y).push.apply(q,ti(f(L)));}else {var H,j=Math.min(L.length,o.context);(H=y).push.apply(H,ti(f(L.slice(0,j))));var V={oldStart:g,oldLines:b-g+j,newStart:m,newLines:x-m+j,lines:y};d.push(V),g=0,m=0,y=[];}b+=L.length,x+=L.length;}},O=0;O<u.length;O++)E();for(var k=0,S=d;k<S.length;k++)for(var R=S[k],T=0;T<R.lines.length;T++)R.lines[T].endsWith(`
`)?R.lines[T]=R.lines[T].slice(0,-1):(R.lines.splice(T+1,0,"\\ No newline at end of file"),T++);return {oldFileName:t,newFileName:e,oldHeader:n,newHeader:s,hunks:d}}}function Os(t){if(Array.isArray(t))return t.map(Os).join(`
`);var e=[];t.oldFileName==t.newFileName&&e.push("Index: "+t.oldFileName),e.push("==================================================================="),e.push("--- "+t.oldFileName+(typeof t.oldHeader=="undefined"?"":"	"+t.oldHeader)),e.push("+++ "+t.newFileName+(typeof t.newHeader=="undefined"?"":"	"+t.newHeader));for(var i=0;i<t.hunks.length;i++){var r=t.hunks[i];r.oldLines===0&&(r.oldStart-=1),r.newLines===0&&(r.newStart-=1),e.push("@@ -"+r.oldStart+","+r.oldLines+" +"+r.newStart+","+r.newLines+" @@"),e.push.apply(e,r.lines);}return e.join(`
`)+`
`}function Lh(t,e,i,r,n,s,o){var a;if(typeof o=="function"&&(o={callback:o}),(a=o)!==null&&a!==void 0&&a.callback){var c=o,u=c.callback;ks(t,e,i,r,n,s,pt(pt({},o),{},{callback:function(d){d?u(Os(d)):u();}}));}else {var l=ks(t,e,i,r,n,s,o);return l?Os(l):void 0}}function z_(t,e,i,r,n,s){return Lh(t,t,e,i,r,n,s)}function J_(t){var e=t.endsWith(`
`),i=t.split(`
`).map(function(r){return r+`
`});return e?i.pop():i.push(i.pop().slice(0,-1)),i}function Z_(t,e){return t.length!==e.length?false:Ia(t,e)}function Ia(t,e){if(e.length>t.length)return  false;for(var i=0;i<e.length;i++)if(e[i]!==t[i])return  false;return  true}function Q_(t){var e=Na(t.lines),i=e.oldLines,r=e.newLines;i!==void 0?t.oldLines=i:delete t.oldLines,r!==void 0?t.newLines=r:delete t.newLines;}function X_(t,e,i){t=gh(t,i),e=gh(e,i);var r={};(t.index||e.index)&&(r.index=t.index||e.index),(t.newFileName||e.newFileName)&&(vh(t)?vh(e)?(r.oldFileName=ws(r,t.oldFileName,e.oldFileName),r.newFileName=ws(r,t.newFileName,e.newFileName),r.oldHeader=ws(r,t.oldHeader,e.oldHeader),r.newHeader=ws(r,t.newHeader,e.newHeader)):(r.oldFileName=t.oldFileName,r.newFileName=t.newFileName,r.oldHeader=t.oldHeader,r.newHeader=t.newHeader):(r.oldFileName=e.oldFileName||t.oldFileName,r.newFileName=e.newFileName||t.newFileName,r.oldHeader=e.oldHeader||t.oldHeader,r.newHeader=e.newHeader||t.newHeader)),r.hunks=[];for(var n=0,s=0,o=0,a=0;n<t.hunks.length||s<e.hunks.length;){var l=t.hunks[n]||{oldStart:1/0},c=e.hunks[s]||{oldStart:1/0};if(yh(l,c))r.hunks.push(bh(l,o)),n++,a+=l.newLines-l.oldLines;else if(yh(c,l))r.hunks.push(bh(c,a)),s++,o+=c.newLines-c.oldLines;else {var u={oldStart:Math.min(l.oldStart,c.oldStart),oldLines:0,newStart:Math.min(l.newStart+o,c.oldStart+a),newLines:0,lines:[]};ew(u,l.oldStart,l.lines,c.oldStart,c.lines),s++,n++,r.hunks.push(u);}}return r}function gh(t,e){if(typeof t=="string"){if(/^@@/m.test(t)||/^Index:/m.test(t))return Cs(t)[0];if(!e)throw new Error("Must provide a base reference or pass in a patch");return ks(void 0,void 0,e,t)}return t}function vh(t){return t.newFileName&&t.newFileName!==t.oldFileName}function ws(t,e,i){return e===i?e:(t.conflict=true,{mine:e,theirs:i})}function yh(t,e){return t.oldStart<e.oldStart&&t.oldStart+t.oldLines<e.oldStart}function bh(t,e){return {oldStart:t.oldStart,oldLines:t.oldLines,newStart:t.newStart+e,newLines:t.newLines,lines:t.lines}}function ew(t,e,i,r,n){var s={offset:e,lines:i,index:0},o={offset:r,lines:n,index:0};for(wh(t,s,o),wh(t,o,s);s.index<s.lines.length&&o.index<o.lines.length;){var a=s.lines[s.index],l=o.lines[o.index];if((a[0]==="-"||a[0]==="+")&&(l[0]==="-"||l[0]==="+"))tw(t,s,o);else if(a[0]==="+"&&l[0]===" "){var c;(c=t.lines).push.apply(c,ti(Ui(s)));}else if(l[0]==="+"&&a[0]===" "){var u;(u=t.lines).push.apply(u,ti(Ui(o)));}else a[0]==="-"&&l[0]===" "?_h(t,s,o):l[0]==="-"&&a[0]===" "?_h(t,o,s,true):a===l?(t.lines.push(a),s.index++,o.index++):La(t,Ui(s),Ui(o));}xh(t,s),xh(t,o),Q_(t);}function tw(t,e,i){var r=Ui(e),n=Ui(i);if(Sh(r)&&Sh(n)){if(Ia(r,n)&&Eh(i,r,r.length-n.length)){var s;(s=t.lines).push.apply(s,ti(r));return}else if(Ia(n,r)&&Eh(e,n,n.length-r.length)){var o;(o=t.lines).push.apply(o,ti(n));return}}else if(Z_(r,n)){var a;(a=t.lines).push.apply(a,ti(r));return}La(t,r,n);}function _h(t,e,i,r){var n=Ui(e),s=iw(i,n);if(s.merged){var o;(o=t.lines).push.apply(o,ti(s.merged));}else La(t,r?s:n,r?n:s);}function La(t,e,i){t.conflict=true,t.lines.push({conflict:true,mine:e,theirs:i});}function wh(t,e,i){for(;e.offset<i.offset&&e.index<e.lines.length;){var r=e.lines[e.index++];t.lines.push(r),e.offset++;}}function xh(t,e){for(;e.index<e.lines.length;){var i=e.lines[e.index++];t.lines.push(i);}}function Ui(t){for(var e=[],i=t.lines[t.index][0];t.index<t.lines.length;){var r=t.lines[t.index];if(i==="-"&&r[0]==="+"&&(i="+"),i===r[0])e.push(r),t.index++;else break}return e}function iw(t,e){for(var i=[],r=[],n=0,s=false,o=false;n<e.length&&t.index<t.lines.length;){var a=t.lines[t.index],l=e[n];if(l[0]==="+")break;if(s=s||a[0]!==" ",r.push(l),n++,a[0]==="+")for(o=true;a[0]==="+";)i.push(a),a=t.lines[++t.index];l.substr(1)===a.substr(1)?(i.push(a),t.index++):o=true;}if((e[n]||"")[0]==="+"&&s&&(o=true),o)return i;for(;n<e.length;)r.push(e[n++]);return {merged:r,changes:i}}function Sh(t){return t.reduce(function(e,i){return e&&i[0]==="-"},true)}function Eh(t,e,i){for(var r=0;r<i;r++){var n=e[e.length-i+r].substr(1);if(t.lines[t.index+r]!==" "+n)return  false}return t.index+=i,true}function Na(t){var e=0,i=0;return t.forEach(function(r){if(typeof r!="string"){var n=Na(r.mine),s=Na(r.theirs);e!==void 0&&(n.oldLines===s.oldLines?e+=n.oldLines:e=void 0),i!==void 0&&(n.newLines===s.newLines?i+=n.newLines:i=void 0);}else i!==void 0&&(r[0]==="+"||r[0]===" ")&&i++,e!==void 0&&(r[0]==="-"||r[0]===" ")&&e++;}),{oldLines:e,newLines:i}}function Bh(t){return Array.isArray(t)?t.map(Bh).reverse():pt(pt({},t),{},{oldFileName:t.newFileName,oldHeader:t.newHeader,newFileName:t.oldFileName,newHeader:t.oldHeader,hunks:t.hunks.map(function(e){return {oldLines:e.newLines,oldStart:e.newStart,newLines:e.oldLines,newStart:e.oldStart,lines:e.lines.map(function(i){return i.startsWith("-")?"+".concat(i.slice(1)):i.startsWith("+")?"-".concat(i.slice(1)):i})}})})}function rw(t){for(var e=[],i,r,n=0;n<t.length;n++)i=t[n],i.added?r=1:i.removed?r=-1:r=0,e.push([r,i.value]);return e}function nw(t){for(var e=[],i=0;i<t.length;i++){var r=t[i];r.added?e.push("<ins>"):r.removed&&e.push("<del>"),e.push(sw(r.value)),r.added?e.push("</ins>"):r.removed&&e.push("</del>");}return e.join("")}function sw(t){var e=t;return e=e.replace(/&/g,"&amp;"),e=e.replace(/</g,"&lt;"),e=e.replace(/>/g,"&gt;"),e=e.replace(/"/g,"&quot;"),e}var ub=Ue(qh()),vb=Ue(jh()),yb=Ue(zh()),fb=Ue(ip()),hb=Ue(up()),pb=Ue(Np()),db=Ue(Gp()),bb=Ue(jd()),_b=Ue(Xd()),mb=Ue(nm()),wb=Ue(jm()),gb=Ue(Tv());Ue(Lv(),1);var cf=Ue(Zu(),1),uf=Ue(Xu(),1),Iy=Ue(af(),1),ff=Ue(Ay(),1);var Ny=Iy.default;var QA=lb.default,XA=cb.default,eI=Ba,tI=ub.default,iI=fb.default,rI=ab(),nI=rI,sI=hb.default,oI=pb.default,aI=db.default,lI=mb.default,cI=gb.default,uI=Ny,fI=ff.default,hI=cf.default,pI=uf.default;	/*! Bundled license information:

	progress/lib/node-progress.js:
	  (*!
	   * node-progress
	   * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
	   * MIT Licensed
	   *)
	*/
	return utilsBundleImpl;
}

var utilsBundle;
var hasRequiredUtilsBundle;

function requireUtilsBundle () {
	if (hasRequiredUtilsBundle) return utilsBundle;
	hasRequiredUtilsBundle = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var utilsBundle_exports = {};
	__export(utilsBundle_exports, {
	  HttpsProxyAgent: () => HttpsProxyAgent,
	  PNG: () => PNG,
	  SocksProxyAgent: () => SocksProxyAgent,
	  colors: () => colors,
	  debug: () => debug,
	  diff: () => diff,
	  dotenv: () => dotenv,
	  getProxyForUrl: () => getProxyForUrl,
	  jpegjs: () => jpegjs,
	  lockfile: () => lockfile,
	  mime: () => mime,
	  minimatch: () => minimatch,
	  ms: () => ms,
	  open: () => open,
	  program: () => program,
	  progress: () => progress,
	  ws: () => ws,
	  wsReceiver: () => wsReceiver,
	  wsSender: () => wsSender,
	  wsServer: () => wsServer,
	  yaml: () => yaml
	});
	utilsBundle = __toCommonJS(utilsBundle_exports);
	const colors = requireUtilsBundleImpl().colors;
	const debug = requireUtilsBundleImpl().debug;
	const diff = requireUtilsBundleImpl().diff;
	const dotenv = requireUtilsBundleImpl().dotenv;
	const getProxyForUrl = requireUtilsBundleImpl().getProxyForUrl;
	const HttpsProxyAgent = requireUtilsBundleImpl().HttpsProxyAgent;
	const jpegjs = requireUtilsBundleImpl().jpegjs;
	const lockfile = requireUtilsBundleImpl().lockfile;
	const mime = requireUtilsBundleImpl().mime;
	const minimatch = requireUtilsBundleImpl().minimatch;
	const open = requireUtilsBundleImpl().open;
	const PNG = requireUtilsBundleImpl().PNG;
	const program = requireUtilsBundleImpl().program;
	const progress = requireUtilsBundleImpl().progress;
	const SocksProxyAgent = requireUtilsBundleImpl().SocksProxyAgent;
	const yaml = requireUtilsBundleImpl().yaml;
	const ws = requireUtilsBundleImpl().ws;
	const wsServer = requireUtilsBundleImpl().wsServer;
	const wsReceiver = requireUtilsBundleImpl().wsReceiver;
	const wsSender = requireUtilsBundleImpl().wsSender;
	function ms(ms2) {
	  if (!isFinite(ms2))
	    return "-";
	  if (ms2 === 0)
	    return "0ms";
	  if (ms2 < 1e3)
	    return ms2.toFixed(0) + "ms";
	  const seconds = ms2 / 1e3;
	  if (seconds < 60)
	    return seconds.toFixed(1) + "s";
	  const minutes = seconds / 60;
	  if (minutes < 60)
	    return minutes.toFixed(1) + "m";
	  const hours = minutes / 60;
	  if (hours < 24)
	    return hours.toFixed(1) + "h";
	  const days = hours / 24;
	  return days.toFixed(1) + "d";
	}
	return utilsBundle;
}

var debugLogger_1;
var hasRequiredDebugLogger;

function requireDebugLogger () {
	if (hasRequiredDebugLogger) return debugLogger_1;
	hasRequiredDebugLogger = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var debugLogger_exports = {};
	__export(debugLogger_exports, {
	  RecentLogsCollector: () => RecentLogsCollector,
	  debugLogger: () => debugLogger
	});
	debugLogger_1 = __toCommonJS(debugLogger_exports);
	var import_fs = __toESM(require$$0$4);
	var import_utilsBundle = requireUtilsBundle();
	const debugLoggerColorMap = {
	  "api": 45,
	  // cyan
	  "protocol": 34,
	  // green
	  "install": 34,
	  // green
	  "download": 34,
	  // green
	  "browser": 0,
	  // reset
	  "socks": 92,
	  // purple
	  "client-certificates": 92,
	  // purple
	  "error": 160,
	  // red,
	  "channel": 33,
	  // blue
	  "server": 45,
	  // cyan
	  "server:channel": 34,
	  // green
	  "server:metadata": 33,
	  // blue,
	  "recorder": 45
	  // cyan
	};
	class DebugLogger {
	  constructor() {
	    this._debuggers = /* @__PURE__ */ new Map();
	    if (process.env.DEBUG_FILE) {
	      const ansiRegex = new RegExp([
	        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
	        "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
	      ].join("|"), "g");
	      const stream = import_fs.default.createWriteStream(process.env.DEBUG_FILE);
	      import_utilsBundle.debug.log = (data) => {
	        stream.write(data.replace(ansiRegex, ""));
	        stream.write("\n");
	      };
	    }
	  }
	  log(name, message) {
	    let cachedDebugger = this._debuggers.get(name);
	    if (!cachedDebugger) {
	      cachedDebugger = (0, import_utilsBundle.debug)(`pw:${name}`);
	      this._debuggers.set(name, cachedDebugger);
	      cachedDebugger.color = debugLoggerColorMap[name] || 0;
	    }
	    cachedDebugger(message);
	  }
	  isEnabled(name) {
	    return import_utilsBundle.debug.enabled(`pw:${name}`);
	  }
	}
	const debugLogger = new DebugLogger();
	const kLogCount = 150;
	class RecentLogsCollector {
	  constructor() {
	    this._logs = [];
	  }
	  log(message) {
	    this._logs.push(message);
	    if (this._logs.length === kLogCount * 2)
	      this._logs.splice(0, kLogCount);
	  }
	  recentLogs() {
	    if (this._logs.length > kLogCount)
	      return this._logs.slice(-150);
	    return this._logs;
	  }
	}
	return debugLogger_1;
}

var builtins_1;
var hasRequiredBuiltins;

function requireBuiltins () {
	if (hasRequiredBuiltins) return builtins_1;
	hasRequiredBuiltins = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var builtins_exports = {};
	__export(builtins_exports, {
	  Date: () => Date,
	  Intl: () => Intl,
	  Map: () => Map,
	  Set: () => Set,
	  builtins: () => builtins,
	  cancelAnimationFrame: () => cancelAnimationFrame,
	  cancelIdleCallback: () => cancelIdleCallback,
	  clearInterval: () => clearInterval,
	  clearTimeout: () => clearTimeout,
	  performance: () => performance,
	  requestAnimationFrame: () => requestAnimationFrame,
	  requestIdleCallback: () => requestIdleCallback,
	  setInterval: () => setInterval,
	  setTimeout: () => setTimeout
	});
	builtins_1 = __toCommonJS(builtins_exports);
	function builtins(global) {
	  global = global ?? globalThis;
	  if (!global["__playwright_builtins__"]) {
	    const builtins2 = {
	      setTimeout: global.setTimeout?.bind(global),
	      clearTimeout: global.clearTimeout?.bind(global),
	      setInterval: global.setInterval?.bind(global),
	      clearInterval: global.clearInterval?.bind(global),
	      requestAnimationFrame: global.requestAnimationFrame?.bind(global),
	      cancelAnimationFrame: global.cancelAnimationFrame?.bind(global),
	      requestIdleCallback: global.requestIdleCallback?.bind(global),
	      cancelIdleCallback: global.cancelIdleCallback?.bind(global),
	      performance: global.performance,
	      eval: global.eval?.bind(global),
	      Intl: global.Intl,
	      Date: global.Date,
	      Map: global.Map,
	      Set: global.Set
	    };
	    Object.defineProperty(global, "__playwright_builtins__", { value: builtins2, configurable: false, enumerable: false, writable: false });
	  }
	  return global["__playwright_builtins__"];
	}
	const instance = builtins();
	const setTimeout = instance.setTimeout;
	const clearTimeout = instance.clearTimeout;
	const setInterval = instance.setInterval;
	const clearInterval = instance.clearInterval;
	const requestAnimationFrame = instance.requestAnimationFrame;
	const cancelAnimationFrame = instance.cancelAnimationFrame;
	const requestIdleCallback = instance.requestIdleCallback;
	const cancelIdleCallback = instance.cancelIdleCallback;
	const performance = instance.performance;
	const Intl = instance.Intl;
	const Date = instance.Date;
	const Map = instance.Map;
	const Set = instance.Set;
	return builtins_1;
}

var stackTrace;
var hasRequiredStackTrace;

function requireStackTrace () {
	if (hasRequiredStackTrace) return stackTrace;
	hasRequiredStackTrace = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var stackTrace_exports = {};
	__export(stackTrace_exports, {
	  captureRawStack: () => captureRawStack,
	  parseErrorStack: () => parseErrorStack,
	  parseStackFrame: () => parseStackFrame,
	  rewriteErrorMessage: () => rewriteErrorMessage,
	  splitErrorMessage: () => splitErrorMessage,
	  stringifyStackFrames: () => stringifyStackFrames
	});
	stackTrace = __toCommonJS(stackTrace_exports);
	function captureRawStack() {
	  const stackTraceLimit = Error.stackTraceLimit;
	  Error.stackTraceLimit = 50;
	  const error = new Error();
	  const stack = error.stack || "";
	  Error.stackTraceLimit = stackTraceLimit;
	  return stack.split("\n");
	}
	function parseStackFrame(text, pathSeparator, showInternalStackFrames) {
	  const match = text && text.match(re);
	  if (!match)
	    return null;
	  let fname = match[2];
	  let file = match[7];
	  if (!file)
	    return null;
	  if (!showInternalStackFrames && (file.startsWith("internal") || file.startsWith("node:")))
	    return null;
	  const line = match[8];
	  const column = match[9];
	  const closeParen = match[11] === ")";
	  const frame = {
	    file: "",
	    line: 0,
	    column: 0
	  };
	  if (line)
	    frame.line = Number(line);
	  if (column)
	    frame.column = Number(column);
	  if (closeParen && file) {
	    let closes = 0;
	    for (let i = file.length - 1; i > 0; i--) {
	      if (file.charAt(i) === ")") {
	        closes++;
	      } else if (file.charAt(i) === "(" && file.charAt(i - 1) === " ") {
	        closes--;
	        if (closes === -1 && file.charAt(i - 1) === " ") {
	          const before = file.slice(0, i - 1);
	          const after = file.slice(i + 1);
	          file = after;
	          fname += ` (${before}`;
	          break;
	        }
	      }
	    }
	  }
	  if (fname) {
	    const methodMatch = fname.match(methodRe);
	    if (methodMatch)
	      fname = methodMatch[1];
	  }
	  if (file) {
	    if (file.startsWith("file://"))
	      file = fileURLToPath(file, pathSeparator);
	    frame.file = file;
	  }
	  if (fname)
	    frame.function = fname;
	  return frame;
	}
	function rewriteErrorMessage(e, newMessage) {
	  const lines = (e.stack?.split("\n") || []).filter((l) => l.startsWith("    at "));
	  e.message = newMessage;
	  const errorTitle = `${e.name}: ${e.message}`;
	  if (lines.length)
	    e.stack = `${errorTitle}
${lines.join("\n")}`;
	  return e;
	}
	function stringifyStackFrames(frames) {
	  const stackLines = [];
	  for (const frame of frames) {
	    if (frame.function)
	      stackLines.push(`    at ${frame.function} (${frame.file}:${frame.line}:${frame.column})`);
	    else
	      stackLines.push(`    at ${frame.file}:${frame.line}:${frame.column}`);
	  }
	  return stackLines;
	}
	function splitErrorMessage(message) {
	  const separationIdx = message.indexOf(":");
	  return {
	    name: separationIdx !== -1 ? message.slice(0, separationIdx) : "",
	    message: separationIdx !== -1 && separationIdx + 2 <= message.length ? message.substring(separationIdx + 2) : message
	  };
	}
	function parseErrorStack(stack, pathSeparator, showInternalStackFrames = false) {
	  const lines = stack.split("\n");
	  let firstStackLine = lines.findIndex((line) => line.startsWith("    at "));
	  if (firstStackLine === -1)
	    firstStackLine = lines.length;
	  const message = lines.slice(0, firstStackLine).join("\n");
	  const stackLines = lines.slice(firstStackLine);
	  let location;
	  for (const line of stackLines) {
	    const frame = parseStackFrame(line, pathSeparator, showInternalStackFrames);
	    if (!frame || !frame.file)
	      continue;
	    if (belongsToNodeModules(frame.file, pathSeparator))
	      continue;
	    location = { file: frame.file, column: frame.column || 0, line: frame.line || 0 };
	    break;
	  }
	  return { message, stackLines, location };
	}
	function belongsToNodeModules(file, pathSeparator) {
	  return file.includes(`${pathSeparator}node_modules${pathSeparator}`);
	}
	const re = new RegExp(
	  "^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"
	);
	const methodRe = /^(.*?) \[as (.*?)\]$/;
	function fileURLToPath(fileUrl, pathSeparator) {
	  if (!fileUrl.startsWith("file://"))
	    return fileUrl;
	  let path = decodeURIComponent(fileUrl.slice(7));
	  if (path.startsWith("/") && /^[a-zA-Z]:/.test(path.slice(1)))
	    path = path.slice(1);
	  return path.replace(/\//g, pathSeparator);
	}
	return stackTrace;
}

var manualPromise;
var hasRequiredManualPromise;

function requireManualPromise () {
	if (hasRequiredManualPromise) return manualPromise;
	hasRequiredManualPromise = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var manualPromise_exports = {};
	__export(manualPromise_exports, {
	  LongStandingScope: () => LongStandingScope,
	  ManualPromise: () => ManualPromise
	});
	manualPromise = __toCommonJS(manualPromise_exports);
	var import_builtins = requireBuiltins();
	var import_stackTrace = requireStackTrace();
	class ManualPromise extends Promise {
	  constructor() {
	    let resolve;
	    let reject;
	    super((f, r) => {
	      resolve = f;
	      reject = r;
	    });
	    this._isDone = false;
	    this._resolve = resolve;
	    this._reject = reject;
	  }
	  isDone() {
	    return this._isDone;
	  }
	  resolve(t) {
	    this._isDone = true;
	    this._resolve(t);
	  }
	  reject(e) {
	    this._isDone = true;
	    this._reject(e);
	  }
	  static get [Symbol.species]() {
	    return Promise;
	  }
	  get [Symbol.toStringTag]() {
	    return "ManualPromise";
	  }
	}
	class LongStandingScope {
	  constructor() {
	    this._terminatePromises = new import_builtins.Map();
	    this._isClosed = false;
	  }
	  reject(error) {
	    this._isClosed = true;
	    this._terminateError = error;
	    for (const p of this._terminatePromises.keys())
	      p.resolve(error);
	  }
	  close(error) {
	    this._isClosed = true;
	    this._closeError = error;
	    for (const [p, frames] of this._terminatePromises)
	      p.resolve(cloneError(error, frames));
	  }
	  isClosed() {
	    return this._isClosed;
	  }
	  static async raceMultiple(scopes, promise) {
	    return Promise.race(scopes.map((s) => s.race(promise)));
	  }
	  async race(promise) {
	    return this._race(Array.isArray(promise) ? promise : [promise], false);
	  }
	  async safeRace(promise, defaultValue) {
	    return this._race([promise], true, defaultValue);
	  }
	  async _race(promises, safe, defaultValue) {
	    const terminatePromise = new ManualPromise();
	    const frames = (0, import_stackTrace.captureRawStack)();
	    if (this._terminateError)
	      terminatePromise.resolve(this._terminateError);
	    if (this._closeError)
	      terminatePromise.resolve(cloneError(this._closeError, frames));
	    this._terminatePromises.set(terminatePromise, frames);
	    try {
	      return await Promise.race([
	        terminatePromise.then((e) => safe ? defaultValue : Promise.reject(e)),
	        ...promises
	      ]);
	    } finally {
	      this._terminatePromises.delete(terminatePromise);
	    }
	  }
	}
	function cloneError(error, frames) {
	  const clone = new Error();
	  clone.name = error.name;
	  clone.message = error.message;
	  clone.stack = [error.name + ":" + error.message, ...frames].join("\n");
	  return clone;
	}
	return manualPromise;
}

var time$1;
var hasRequiredTime$1;

function requireTime$1 () {
	if (hasRequiredTime$1) return time$1;
	hasRequiredTime$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var time_exports = {};
	__export(time_exports, {
	  monotonicTime: () => monotonicTime,
	  setTimeOrigin: () => setTimeOrigin,
	  timeOrigin: () => timeOrigin
	});
	time$1 = __toCommonJS(time_exports);
	var import_builtins = requireBuiltins();
	let _timeOrigin = import_builtins.performance.timeOrigin;
	let _timeShift = 0;
	function setTimeOrigin(origin) {
	  _timeOrigin = origin;
	  _timeShift = import_builtins.performance.timeOrigin - origin;
	}
	function timeOrigin() {
	  return _timeOrigin;
	}
	function monotonicTime() {
	  return Math.floor((import_builtins.performance.now() + _timeShift) * 1e3) / 1e3;
	}
	return time$1;
}

var happyEyeballs;
var hasRequiredHappyEyeballs;

function requireHappyEyeballs () {
	if (hasRequiredHappyEyeballs) return happyEyeballs;
	hasRequiredHappyEyeballs = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var happyEyeballs_exports = {};
	__export(happyEyeballs_exports, {
	  createConnectionAsync: () => createConnectionAsync,
	  createSocket: () => createSocket,
	  createTLSSocket: () => createTLSSocket,
	  httpHappyEyeballsAgent: () => httpHappyEyeballsAgent,
	  httpsHappyEyeballsAgent: () => httpsHappyEyeballsAgent,
	  timingForSocket: () => timingForSocket
	});
	happyEyeballs = __toCommonJS(happyEyeballs_exports);
	var import_dns = __toESM(require$$15$1);
	var import_http = __toESM(require$$19);
	var import_https = __toESM(require$$2$1);
	var import_net = __toESM(require$$8);
	var import_tls = __toESM(require$$9);
	var import_assert = requireAssert$1();
	var import_manualPromise = requireManualPromise();
	var import_time = requireTime$1();
	const connectionAttemptDelayMs = 300;
	const kDNSLookupAt = Symbol("kDNSLookupAt");
	const kTCPConnectionAt = Symbol("kTCPConnectionAt");
	class HttpHappyEyeballsAgent extends import_http.default.Agent {
	  createConnection(options, oncreate) {
	    if (import_net.default.isIP(clientRequestArgsToHostName(options)))
	      return import_net.default.createConnection(options);
	    createConnectionAsync(
	      options,
	      oncreate,
	      /* useTLS */
	      false
	    ).catch((err) => oncreate?.(err));
	  }
	}
	class HttpsHappyEyeballsAgent extends import_https.default.Agent {
	  createConnection(options, oncreate) {
	    if (import_net.default.isIP(clientRequestArgsToHostName(options)))
	      return import_tls.default.connect(options);
	    createConnectionAsync(
	      options,
	      oncreate,
	      /* useTLS */
	      true
	    ).catch((err) => oncreate?.(err));
	  }
	}
	const httpsHappyEyeballsAgent = new HttpsHappyEyeballsAgent({ keepAlive: true });
	const httpHappyEyeballsAgent = new HttpHappyEyeballsAgent({ keepAlive: true });
	async function createSocket(host, port) {
	  return new Promise((resolve, reject) => {
	    if (import_net.default.isIP(host)) {
	      const socket = import_net.default.createConnection({ host, port });
	      socket.on("connect", () => resolve(socket));
	      socket.on("error", (error) => reject(error));
	    } else {
	      createConnectionAsync(
	        { host, port },
	        (err, socket) => {
	          if (err)
	            reject(err);
	          if (socket)
	            resolve(socket);
	        },
	        /* useTLS */
	        false
	      ).catch((err) => reject(err));
	    }
	  });
	}
	async function createTLSSocket(options) {
	  return new Promise((resolve, reject) => {
	    (0, import_assert.assert)(options.host, "host is required");
	    if (import_net.default.isIP(options.host)) {
	      const socket = import_tls.default.connect(options);
	      socket.on("secureConnect", () => resolve(socket));
	      socket.on("error", (error) => reject(error));
	    } else {
	      createConnectionAsync(options, (err, socket) => {
	        if (err)
	          reject(err);
	        if (socket) {
	          socket.on("secureConnect", () => resolve(socket));
	          socket.on("error", (error) => reject(error));
	        }
	      }, true).catch((err) => reject(err));
	    }
	  });
	}
	async function createConnectionAsync(options, oncreate, useTLS) {
	  const lookup = options.__testHookLookup || lookupAddresses;
	  const hostname = clientRequestArgsToHostName(options);
	  const addresses = await lookup(hostname);
	  const dnsLookupAt = (0, import_time.monotonicTime)();
	  const sockets = /* @__PURE__ */ new Set();
	  let firstError;
	  let errorCount = 0;
	  const handleError = (socket, err) => {
	    if (!sockets.delete(socket))
	      return;
	    ++errorCount;
	    firstError ??= err;
	    if (errorCount === addresses.length)
	      oncreate?.(firstError);
	  };
	  const connected = new import_manualPromise.ManualPromise();
	  for (const { address } of addresses) {
	    const socket = useTLS ? import_tls.default.connect({
	      ...options,
	      port: options.port,
	      host: address,
	      servername: hostname
	    }) : import_net.default.createConnection({
	      ...options,
	      port: options.port,
	      host: address
	    });
	    socket[kDNSLookupAt] = dnsLookupAt;
	    socket.on("connect", () => {
	      socket[kTCPConnectionAt] = (0, import_time.monotonicTime)();
	      connected.resolve();
	      oncreate?.(null, socket);
	      sockets.delete(socket);
	      for (const s of sockets)
	        s.destroy();
	      sockets.clear();
	    });
	    socket.on("timeout", () => {
	      socket.destroy();
	      handleError(socket, new Error("Connection timeout"));
	    });
	    socket.on("error", (e) => handleError(socket, e));
	    sockets.add(socket);
	    await Promise.race([
	      connected,
	      new Promise((f) => setTimeout(f, connectionAttemptDelayMs))
	    ]);
	    if (connected.isDone())
	      break;
	  }
	}
	async function lookupAddresses(hostname) {
	  const addresses = await import_dns.default.promises.lookup(hostname, { all: true, family: 0, verbatim: true });
	  let firstFamily = addresses.filter(({ family }) => family === 6);
	  let secondFamily = addresses.filter(({ family }) => family === 4);
	  if (firstFamily.length && firstFamily[0] !== addresses[0]) {
	    const tmp = firstFamily;
	    firstFamily = secondFamily;
	    secondFamily = tmp;
	  }
	  const result = [];
	  for (let i = 0; i < Math.max(firstFamily.length, secondFamily.length); i++) {
	    if (firstFamily[i])
	      result.push(firstFamily[i]);
	    if (secondFamily[i])
	      result.push(secondFamily[i]);
	  }
	  return result;
	}
	function clientRequestArgsToHostName(options) {
	  if (options.hostname)
	    return options.hostname;
	  if (options.host)
	    return options.host;
	  throw new Error("Either options.hostname or options.host must be provided");
	}
	function timingForSocket(socket) {
	  return {
	    dnsLookupAt: socket[kDNSLookupAt],
	    tcpConnectionAt: socket[kTCPConnectionAt]
	  };
	}
	return happyEyeballs;
}

var socksProxy;
var hasRequiredSocksProxy;

function requireSocksProxy () {
	if (hasRequiredSocksProxy) return socksProxy;
	hasRequiredSocksProxy = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var socksProxy_exports = {};
	__export(socksProxy_exports, {
	  SocksProxy: () => SocksProxy,
	  SocksProxyHandler: () => SocksProxyHandler,
	  parsePattern: () => parsePattern
	});
	socksProxy = __toCommonJS(socksProxy_exports);
	var import_events = __toESM(require$$0$5);
	var import_net = __toESM(require$$8);
	var import_assert = requireAssert$1();
	var import_crypto = requireCrypto();
	var import_debugLogger = requireDebugLogger();
	var import_happyEyeballs = requireHappyEyeballs();
	class SocksConnection {
	  constructor(uid, socket, client) {
	    this._buffer = Buffer.from([]);
	    this._offset = 0;
	    this._fence = 0;
	    this._uid = uid;
	    this._socket = socket;
	    this._client = client;
	    this._boundOnData = this._onData.bind(this);
	    socket.on("data", this._boundOnData);
	    socket.on("close", () => this._onClose());
	    socket.on("end", () => this._onClose());
	    socket.on("error", () => this._onClose());
	    this._run().catch(() => this._socket.end());
	  }
	  async _run() {
	    (0, import_assert.assert)(await this._authenticate());
	    const { command, host, port } = await this._parseRequest();
	    if (command !== 1 /* CONNECT */) {
	      this._writeBytes(Buffer.from([
	        5,
	        7 /* CommandNotSupported */,
	        0,
	        // RSV
	        1,
	        // IPv4
	        0,
	        0,
	        0,
	        0,
	        // Address
	        0,
	        0
	        // Port
	      ]));
	      return;
	    }
	    this._socket.off("data", this._boundOnData);
	    this._client.onSocketRequested({ uid: this._uid, host, port });
	  }
	  async _authenticate() {
	    const version = await this._readByte();
	    (0, import_assert.assert)(version === 5, "The VER field must be set to x05 for this version of the protocol, was " + version);
	    const nMethods = await this._readByte();
	    (0, import_assert.assert)(nMethods, "No authentication methods specified");
	    const methods = await this._readBytes(nMethods);
	    for (const method of methods) {
	      if (method === 0) {
	        this._writeBytes(Buffer.from([version, method]));
	        return true;
	      }
	    }
	    this._writeBytes(Buffer.from([version, 255 /* NO_ACCEPTABLE_METHODS */]));
	    return false;
	  }
	  async _parseRequest() {
	    const version = await this._readByte();
	    (0, import_assert.assert)(version === 5, "The VER field must be set to x05 for this version of the protocol, was " + version);
	    const command = await this._readByte();
	    await this._readByte();
	    const addressType = await this._readByte();
	    let host = "";
	    switch (addressType) {
	      case 1 /* IPv4 */:
	        host = (await this._readBytes(4)).join(".");
	        break;
	      case 3 /* FqName */:
	        const length = await this._readByte();
	        host = (await this._readBytes(length)).toString();
	        break;
	      case 4 /* IPv6 */:
	        const bytes = await this._readBytes(16);
	        const tokens = [];
	        for (let i = 0; i < 8; ++i)
	          tokens.push(bytes.readUInt16BE(i * 2).toString(16));
	        host = tokens.join(":");
	        break;
	    }
	    const port = (await this._readBytes(2)).readUInt16BE(0);
	    this._buffer = Buffer.from([]);
	    this._offset = 0;
	    this._fence = 0;
	    return {
	      command,
	      host,
	      port
	    };
	  }
	  async _readByte() {
	    const buffer = await this._readBytes(1);
	    return buffer[0];
	  }
	  async _readBytes(length) {
	    this._fence = this._offset + length;
	    if (!this._buffer || this._buffer.length < this._fence)
	      await new Promise((f) => this._fenceCallback = f);
	    this._offset += length;
	    return this._buffer.slice(this._offset - length, this._offset);
	  }
	  _writeBytes(buffer) {
	    if (this._socket.writable)
	      this._socket.write(buffer);
	  }
	  _onClose() {
	    this._client.onSocketClosed({ uid: this._uid });
	  }
	  _onData(buffer) {
	    this._buffer = Buffer.concat([this._buffer, buffer]);
	    if (this._fenceCallback && this._buffer.length >= this._fence) {
	      const callback = this._fenceCallback;
	      this._fenceCallback = void 0;
	      callback();
	    }
	  }
	  socketConnected(host, port) {
	    this._writeBytes(Buffer.from([
	      5,
	      0 /* Succeeded */,
	      0,
	      // RSV
	      ...ipToSocksAddress(host),
	      // ATYP, Address
	      port >> 8,
	      port & 255
	      // Port
	    ]));
	    this._socket.on("data", (data) => this._client.onSocketData({ uid: this._uid, data }));
	  }
	  socketFailed(errorCode) {
	    const buffer = Buffer.from([
	      5,
	      0,
	      0,
	      // RSV
	      ...ipToSocksAddress("0.0.0.0"),
	      // ATYP, Address
	      0,
	      0
	      // Port
	    ]);
	    switch (errorCode) {
	      case "ENOENT":
	      case "ENOTFOUND":
	      case "ETIMEDOUT":
	      case "EHOSTUNREACH":
	        buffer[1] = 4 /* HostUnreachable */;
	        break;
	      case "ENETUNREACH":
	        buffer[1] = 3 /* NetworkUnreachable */;
	        break;
	      case "ECONNREFUSED":
	        buffer[1] = 5 /* ConnectionRefused */;
	        break;
	      case "ERULESET":
	        buffer[1] = 2 /* NotAllowedByRuleSet */;
	        break;
	    }
	    this._writeBytes(buffer);
	    this._socket.end();
	  }
	  sendData(data) {
	    this._socket.write(data);
	  }
	  end() {
	    this._socket.end();
	  }
	  error(error) {
	    this._socket.destroy(new Error(error));
	  }
	}
	function hexToNumber(hex) {
	  return [...hex].reduce((value, digit) => {
	    const code = digit.charCodeAt(0);
	    if (code >= 48 && code <= 57)
	      return value + code;
	    if (code >= 97 && code <= 102)
	      return value + (code - 97) + 10;
	    if (code >= 65 && code <= 70)
	      return value + (code - 65) + 10;
	    throw new Error("Invalid IPv6 token " + hex);
	  }, 0);
	}
	function ipToSocksAddress(address) {
	  if (import_net.default.isIPv4(address)) {
	    return [
	      1,
	      // IPv4
	      ...address.split(".", 4).map((t) => +t & 255)
	      // Address
	    ];
	  }
	  if (import_net.default.isIPv6(address)) {
	    const result = [4];
	    const tokens = address.split(":", 8);
	    while (tokens.length < 8)
	      tokens.unshift("");
	    for (const token of tokens) {
	      const value = hexToNumber(token);
	      result.push(value >> 8 & 255, value & 255);
	    }
	    return result;
	  }
	  throw new Error("Only IPv4 and IPv6 addresses are supported");
	}
	function starMatchToRegex(pattern) {
	  const source = pattern.split("*").map((s) => {
	    return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
	  }).join(".*");
	  return new RegExp("^" + source + "$");
	}
	function parsePattern(pattern) {
	  if (!pattern)
	    return () => false;
	  const matchers = pattern.split(",").map((token) => {
	    const match = token.match(/^(.*?)(?::(\d+))?$/);
	    if (!match)
	      throw new Error(`Unsupported token "${token}" in pattern "${pattern}"`);
	    const tokenPort = match[2] ? +match[2] : void 0;
	    const portMatches = (port) => tokenPort === void 0 || tokenPort === port;
	    let tokenHost = match[1];
	    if (tokenHost === "<loopback>") {
	      return (host, port) => {
	        if (!portMatches(port))
	          return false;
	        return host === "localhost" || host.endsWith(".localhost") || host === "127.0.0.1" || host === "[::1]";
	      };
	    }
	    if (tokenHost === "*")
	      return (host, port) => portMatches(port);
	    if (import_net.default.isIPv4(tokenHost) || import_net.default.isIPv6(tokenHost))
	      return (host, port) => host === tokenHost && portMatches(port);
	    if (tokenHost[0] === ".")
	      tokenHost = "*" + tokenHost;
	    const tokenRegex = starMatchToRegex(tokenHost);
	    return (host, port) => {
	      if (!portMatches(port))
	        return false;
	      if (import_net.default.isIPv4(host) || import_net.default.isIPv6(host))
	        return false;
	      return !!host.match(tokenRegex);
	    };
	  });
	  return (host, port) => matchers.some((matcher) => matcher(host, port));
	}
	class SocksProxy extends import_events.default {
	  constructor() {
	    super();
	    this._connections = /* @__PURE__ */ new Map();
	    this._sockets = /* @__PURE__ */ new Set();
	    this._closed = false;
	    this._patternMatcher = () => false;
	    this._directSockets = /* @__PURE__ */ new Map();
	    this._server = new import_net.default.Server((socket) => {
	      const uid = (0, import_crypto.createGuid)();
	      const connection = new SocksConnection(uid, socket, this);
	      this._connections.set(uid, connection);
	    });
	    this._server.on("connection", (socket) => {
	      if (this._closed) {
	        socket.destroy();
	        return;
	      }
	      this._sockets.add(socket);
	      socket.once("close", () => this._sockets.delete(socket));
	    });
	  }
	  static {
	    this.Events = {
	      SocksRequested: "socksRequested",
	      SocksData: "socksData",
	      SocksClosed: "socksClosed"
	    };
	  }
	  setPattern(pattern) {
	    try {
	      this._patternMatcher = parsePattern(pattern);
	    } catch (e) {
	      this._patternMatcher = () => false;
	    }
	  }
	  async _handleDirect(request) {
	    try {
	      const socket = await (0, import_happyEyeballs.createSocket)(request.host, request.port);
	      socket.on("data", (data) => this._connections.get(request.uid)?.sendData(data));
	      socket.on("error", (error) => {
	        this._connections.get(request.uid)?.error(error.message);
	        this._directSockets.delete(request.uid);
	      });
	      socket.on("end", () => {
	        this._connections.get(request.uid)?.end();
	        this._directSockets.delete(request.uid);
	      });
	      const localAddress = socket.localAddress;
	      const localPort = socket.localPort;
	      this._directSockets.set(request.uid, socket);
	      this._connections.get(request.uid)?.socketConnected(localAddress, localPort);
	    } catch (error) {
	      this._connections.get(request.uid)?.socketFailed(error.code);
	    }
	  }
	  port() {
	    return this._port;
	  }
	  async listen(port, hostname) {
	    return new Promise((f) => {
	      this._server.listen(port, hostname, () => {
	        const port2 = this._server.address().port;
	        this._port = port2;
	        f(port2);
	      });
	    });
	  }
	  async close() {
	    if (this._closed)
	      return;
	    this._closed = true;
	    for (const socket of this._sockets)
	      socket.destroy();
	    this._sockets.clear();
	    await new Promise((f) => this._server.close(f));
	  }
	  onSocketRequested(payload) {
	    if (!this._patternMatcher(payload.host, payload.port)) {
	      this._handleDirect(payload);
	      return;
	    }
	    this.emit(SocksProxy.Events.SocksRequested, payload);
	  }
	  onSocketData(payload) {
	    const direct = this._directSockets.get(payload.uid);
	    if (direct) {
	      direct.write(payload.data);
	      return;
	    }
	    this.emit(SocksProxy.Events.SocksData, payload);
	  }
	  onSocketClosed(payload) {
	    const direct = this._directSockets.get(payload.uid);
	    if (direct) {
	      direct.destroy();
	      this._directSockets.delete(payload.uid);
	      return;
	    }
	    this.emit(SocksProxy.Events.SocksClosed, payload);
	  }
	  socketConnected({ uid, host, port }) {
	    this._connections.get(uid)?.socketConnected(host, port);
	  }
	  socketFailed({ uid, errorCode }) {
	    this._connections.get(uid)?.socketFailed(errorCode);
	  }
	  sendSocketData({ uid, data }) {
	    this._connections.get(uid)?.sendData(data);
	  }
	  sendSocketEnd({ uid }) {
	    this._connections.get(uid)?.end();
	  }
	  sendSocketError({ uid, error }) {
	    this._connections.get(uid)?.error(error);
	  }
	}
	class SocksProxyHandler extends import_events.default {
	  constructor(pattern, redirectPortForTest) {
	    super();
	    this._sockets = /* @__PURE__ */ new Map();
	    this._patternMatcher = () => false;
	    this._patternMatcher = parsePattern(pattern);
	    this._redirectPortForTest = redirectPortForTest;
	  }
	  static {
	    this.Events = {
	      SocksConnected: "socksConnected",
	      SocksData: "socksData",
	      SocksError: "socksError",
	      SocksFailed: "socksFailed",
	      SocksEnd: "socksEnd"
	    };
	  }
	  cleanup() {
	    for (const uid of this._sockets.keys())
	      this.socketClosed({ uid });
	  }
	  async socketRequested({ uid, host, port }) {
	    import_debugLogger.debugLogger.log("socks", `[${uid}] => request ${host}:${port}`);
	    if (!this._patternMatcher(host, port)) {
	      const payload = { uid, errorCode: "ERULESET" };
	      import_debugLogger.debugLogger.log("socks", `[${uid}] <= pattern error ${payload.errorCode}`);
	      this.emit(SocksProxyHandler.Events.SocksFailed, payload);
	      return;
	    }
	    if (host === "local.playwright")
	      host = "localhost";
	    try {
	      if (this._redirectPortForTest)
	        port = this._redirectPortForTest;
	      const socket = await (0, import_happyEyeballs.createSocket)(host, port);
	      socket.on("data", (data) => {
	        const payload2 = { uid, data };
	        this.emit(SocksProxyHandler.Events.SocksData, payload2);
	      });
	      socket.on("error", (error) => {
	        const payload2 = { uid, error: error.message };
	        import_debugLogger.debugLogger.log("socks", `[${uid}] <= network socket error ${payload2.error}`);
	        this.emit(SocksProxyHandler.Events.SocksError, payload2);
	        this._sockets.delete(uid);
	      });
	      socket.on("end", () => {
	        const payload2 = { uid };
	        import_debugLogger.debugLogger.log("socks", `[${uid}] <= network socket closed`);
	        this.emit(SocksProxyHandler.Events.SocksEnd, payload2);
	        this._sockets.delete(uid);
	      });
	      const localAddress = socket.localAddress;
	      const localPort = socket.localPort;
	      this._sockets.set(uid, socket);
	      const payload = { uid, host: localAddress, port: localPort };
	      import_debugLogger.debugLogger.log("socks", `[${uid}] <= connected to network ${payload.host}:${payload.port}`);
	      this.emit(SocksProxyHandler.Events.SocksConnected, payload);
	    } catch (error) {
	      const payload = { uid, errorCode: error.code };
	      import_debugLogger.debugLogger.log("socks", `[${uid}] <= connect error ${payload.errorCode}`);
	      this.emit(SocksProxyHandler.Events.SocksFailed, payload);
	    }
	  }
	  sendSocketData({ uid, data }) {
	    this._sockets.get(uid)?.write(data);
	  }
	  socketClosed({ uid }) {
	    import_debugLogger.debugLogger.log("socks", `[${uid}] <= browser socket closed`);
	    this._sockets.get(uid)?.destroy();
	    this._sockets.delete(uid);
	  }
	}
	return socksProxy;
}

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var linuxUtils;
var hasRequiredLinuxUtils;

function requireLinuxUtils () {
	if (hasRequiredLinuxUtils) return linuxUtils;
	hasRequiredLinuxUtils = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var linuxUtils_exports = {};
	__export(linuxUtils_exports, {
	  getLinuxDistributionInfoSync: () => getLinuxDistributionInfoSync
	});
	linuxUtils = __toCommonJS(linuxUtils_exports);
	var import_fs = __toESM(require$$0$4);
	let didFailToReadOSRelease = false;
	let osRelease;
	function getLinuxDistributionInfoSync() {
	  if (process.platform !== "linux")
	    return void 0;
	  if (!osRelease && !didFailToReadOSRelease) {
	    try {
	      const osReleaseText = import_fs.default.readFileSync("/etc/os-release", "utf8");
	      const fields = parseOSReleaseText(osReleaseText);
	      osRelease = {
	        id: fields.get("id") ?? "",
	        version: fields.get("version_id") ?? ""
	      };
	    } catch (e) {
	      didFailToReadOSRelease = true;
	    }
	  }
	  return osRelease;
	}
	function parseOSReleaseText(osReleaseText) {
	  const fields = /* @__PURE__ */ new Map();
	  for (const line of osReleaseText.split("\n")) {
	    const tokens = line.split("=");
	    const name = tokens.shift();
	    let value = tokens.join("=").trim();
	    if (value.startsWith('"') && value.endsWith('"'))
	      value = value.substring(1, value.length - 1);
	    if (!name)
	      continue;
	    fields.set(name.toLowerCase(), value);
	  }
	  return fields;
	}
	return linuxUtils;
}

var version = "1.52.0";
var require$$10 = {
	version: version};

var userAgent;
var hasRequiredUserAgent;

function requireUserAgent () {
	if (hasRequiredUserAgent) return userAgent;
	hasRequiredUserAgent = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var userAgent_exports = {};
	__export(userAgent_exports, {
	  getEmbedderName: () => getEmbedderName,
	  getPlaywrightVersion: () => getPlaywrightVersion,
	  getUserAgent: () => getUserAgent
	});
	userAgent = __toCommonJS(userAgent_exports);
	var import_child_process = require$$0$3;
	var import_os = __toESM(require$$0$2);
	var import_linuxUtils = requireLinuxUtils();
	let cachedUserAgent;
	function getUserAgent() {
	  if (cachedUserAgent)
	    return cachedUserAgent;
	  try {
	    cachedUserAgent = determineUserAgent();
	  } catch (e) {
	    cachedUserAgent = "Playwright/unknown";
	  }
	  return cachedUserAgent;
	}
	function determineUserAgent() {
	  let osIdentifier = "unknown";
	  let osVersion = "unknown";
	  if (process.platform === "win32") {
	    const version = import_os.default.release().split(".");
	    osIdentifier = "windows";
	    osVersion = `${version[0]}.${version[1]}`;
	  } else if (process.platform === "darwin") {
	    const version = (0, import_child_process.execSync)("sw_vers -productVersion", { stdio: ["ignore", "pipe", "ignore"] }).toString().trim().split(".");
	    osIdentifier = "macOS";
	    osVersion = `${version[0]}.${version[1]}`;
	  } else if (process.platform === "linux") {
	    const distroInfo = (0, import_linuxUtils.getLinuxDistributionInfoSync)();
	    if (distroInfo) {
	      osIdentifier = distroInfo.id || "linux";
	      osVersion = distroInfo.version || "unknown";
	    } else {
	      osIdentifier = "linux";
	    }
	  }
	  const additionalTokens = [];
	  if (process.env.CI)
	    additionalTokens.push("CI/1");
	  const serializedTokens = additionalTokens.length ? " " + additionalTokens.join(" ") : "";
	  const { embedderName, embedderVersion } = getEmbedderName();
	  return `Playwright/${getPlaywrightVersion()} (${import_os.default.arch()}; ${osIdentifier} ${osVersion}) ${embedderName}/${embedderVersion}${serializedTokens}`;
	}
	function getEmbedderName() {
	  let embedderName = "unknown";
	  let embedderVersion = "unknown";
	  if (!process.env.PW_LANG_NAME) {
	    embedderName = "node";
	    embedderVersion = process.version.substring(1).split(".").slice(0, 2).join(".");
	  } else if (["node", "python", "java", "csharp"].includes(process.env.PW_LANG_NAME)) {
	    embedderName = process.env.PW_LANG_NAME;
	    embedderVersion = process.env.PW_LANG_NAME_VERSION ?? "unknown";
	  }
	  return { embedderName, embedderVersion };
	}
	function getPlaywrightVersion(majorMinorOnly = false) {
	  const version = process.env.PW_VERSION_OVERRIDE || require$$10.version;
	  return majorMinorOnly ? version.split(".").slice(0, 2).join(".") : version;
	}
	return userAgent;
}

var zipBundleImpl;
var hasRequiredZipBundleImpl;

function requireZipBundleImpl () {
	if (hasRequiredZipBundleImpl) return zipBundleImpl;
	hasRequiredZipBundleImpl = 1;
var pt=Object.create;var se=Object.defineProperty;var mt=Object.getOwnPropertyDescriptor;var xt=Object.getOwnPropertyNames;var vt=Object.getPrototypeOf,Et=Object.prototype.hasOwnProperty;var E=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports),wt=(e,r)=>{for(var t in r)se(e,t,{get:r[t],enumerable:true});},or=(e,r,t,n)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of xt(r))!Et.call(e,i)&&i!==t&&se(e,i,{get:()=>r[i],enumerable:!(n=mt(r,i))||n.enumerable});return e};var Te=(e,r,t)=>(t=e!=null?pt(vt(e)):{},or(!e||!e.__esModule?se(t,"default",{value:e,enumerable:true}):t,e)),gt=e=>or(se({},"__esModule",{value:true}),e);var Be=E((Dn,sr)=>{var U=require$$14.Buffer,Ue=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];typeof Int32Array!="undefined"&&(Ue=new Int32Array(Ue));function fr(e){if(U.isBuffer(e))return e;var r=typeof U.alloc=="function"&&typeof U.from=="function";if(typeof e=="number")return r?U.alloc(e):new U(e);if(typeof e=="string")return r?U.from(e):new U(e);throw new Error("input must be buffer, number, or string, received "+typeof e)}function yt(e){var r=fr(4);return r.writeInt32BE(e,0),r}function Ne(e,r){e=fr(e),U.isBuffer(r)&&(r=r.readUInt32BE(0));for(var t=~~r^-1,n=0;n<e.length;n++)t=Ue[(t^e[n])&255]^t>>>8;return t^-1}function Me(){return yt(Ne.apply(null,arguments))}Me.signed=function(){return Ne.apply(null,arguments)};Me.unsigned=function(){return Ne.apply(null,arguments)>>>0};sr.exports=Me;});var br=E(Ge=>{var ar=require$$0$4,de=require$$12.Transform,ur=require$$12.PassThrough,cr=require$$13,We=require$$1,Ct=require$$0$5.EventEmitter,lr=Be();Ge.ZipFile=W;Ge.dateToDosDateTime=Cr;We.inherits(W,Ct);function W(){this.outputStream=new ur,this.entries=[],this.outputStreamCursor=0,this.ended=false,this.allDone=false,this.forceZip64Eocd=false;}W.prototype.addFile=function(e,r,t){var n=this;r=he(r,false),t==null&&(t={});var i=new m(r,false,t);n.entries.push(i),ar.stat(e,function(o,f){if(o)return n.emit("error",o);if(!f.isFile())return n.emit("error",new Error("not a file: "+e));i.uncompressedSize=f.size,t.mtime==null&&i.setLastModDate(f.mtime),t.mode==null&&i.setFileAttributesMode(f.mode),i.setFileDataPumpFunction(function(){var s=ar.createReadStream(e);i.state=m.FILE_DATA_IN_PROGRESS,s.on("error",function(u){n.emit("error",u);}),dr(n,i,s);}),M(n);});};W.prototype.addReadStream=function(e,r,t){var n=this;r=he(r,false),t==null&&(t={});var i=new m(r,false,t);n.entries.push(i),i.setFileDataPumpFunction(function(){i.state=m.FILE_DATA_IN_PROGRESS,dr(n,i,e);}),M(n);};W.prototype.addBuffer=function(e,r,t){var n=this;if(r=he(r,false),e.length>1073741823)throw new Error("buffer too large: "+e.length+" > 1073741823");if(t==null&&(t={}),t.size!=null)throw new Error("options.size not allowed");var i=new m(r,false,t);i.uncompressedSize=e.length,i.crc32=lr.unsigned(e),i.crcAndFileSizeKnown=true,n.entries.push(i),i.compress?cr.deflateRaw(e,function(f,s){o(s);}):o(e);function o(f){i.compressedSize=f.length,i.setFileDataPumpFunction(function(){Z(n,f),Z(n,i.getDataDescriptor()),i.state=m.FILE_DATA_DONE,setImmediate(function(){M(n);});}),M(n);}};W.prototype.addEmptyDirectory=function(e,r){var t=this;if(e=he(e,true),r==null&&(r={}),r.size!=null)throw new Error("options.size not allowed");if(r.compress!=null)throw new Error("options.compress not allowed");var n=new m(e,true,r);t.entries.push(n),n.setFileDataPumpFunction(function(){Z(t,n.getDataDescriptor()),n.state=m.FILE_DATA_DONE,M(t);}),M(t);};var bt=N([80,75,5,6]);W.prototype.end=function(e,r){if(typeof e=="function"&&(r=e,e=null),e==null&&(e={}),!this.ended){if(this.ended=true,this.finalSizeCallback=r,this.forceZip64Eocd=!!e.forceZip64Format,e.comment){if(typeof e.comment=="string"?this.comment=It(e.comment):this.comment=e.comment,this.comment.length>65535)throw new Error("comment is too large");if(re(this.comment,bt))throw new Error("comment contains end of central directory record signature")}else this.comment=pe;M(this);}};function Z(e,r){e.outputStream.write(r),e.outputStreamCursor+=r.length;}function dr(e,r,t){var n=new He,i=new le,o=r.compress?new cr.DeflateRaw:new ur,f=new le;t.pipe(n).pipe(i).pipe(o).pipe(f).pipe(e.outputStream,{end:false}),f.on("end",function(){if(r.crc32=n.crc32,r.uncompressedSize==null)r.uncompressedSize=i.byteCount;else if(r.uncompressedSize!==i.byteCount)return e.emit("error",new Error("file data stream has unexpected number of bytes"));r.compressedSize=f.byteCount,e.outputStreamCursor+=r.compressedSize,Z(e,r.getDataDescriptor()),r.state=m.FILE_DATA_DONE,M(e);});}function M(e){if(e.allDone)return;if(e.ended&&e.finalSizeCallback!=null){var r=Ft(e);r!=null&&(e.finalSizeCallback(r),e.finalSizeCallback=null);}var t=n();function n(){for(var o=0;o<e.entries.length;o++){var f=e.entries[o];if(f.state<m.FILE_DATA_DONE)return f}return null}if(t!=null){if(t.state<m.READY_TO_PUMP_FILE_DATA||t.state===m.FILE_DATA_IN_PROGRESS)return;t.relativeOffsetOfLocalHeader=e.outputStreamCursor;var i=t.getLocalFileHeader();Z(e,i),t.doFileDataPump();}else e.ended&&(e.offsetOfStartOfCentralDirectory=e.outputStreamCursor,e.entries.forEach(function(o){var f=o.getCentralDirectoryRecord();Z(e,f);}),Z(e,St(e)),e.outputStream.end(),e.allDone=true);}function Ft(e){for(var r=0,t=0,n=0;n<e.entries.length;n++){var i=e.entries[n];if(i.compress)return  -1;if(i.state>=m.READY_TO_PUMP_FILE_DATA){if(i.uncompressedSize==null)return  -1}else if(i.uncompressedSize==null)return null;i.relativeOffsetOfLocalHeader=r;var o=i.useZip64Format();r+=hr+i.utf8FileName.length,r+=i.uncompressedSize,i.crcAndFileSizeKnown||(o?r+=gr:r+=wr),t+=yr+i.utf8FileName.length+i.fileComment.length,o&&(t+=Pe);}var f=0;return (e.forceZip64Eocd||e.entries.length>=65535||t>=65535||r>=4294967295)&&(f+=ue+qe),f+=ce+e.comment.length,r+t+f}var ue=56,qe=20,ce=22;function St(e,r){var t=false,n=e.entries.length;(e.forceZip64Eocd||e.entries.length>=65535)&&(n=65535,t=true);var i=e.outputStreamCursor-e.offsetOfStartOfCentralDirectory,o=i;(e.forceZip64Eocd||i>=4294967295)&&(o=4294967295,t=true);var f=e.offsetOfStartOfCentralDirectory;if((e.forceZip64Eocd||e.offsetOfStartOfCentralDirectory>=4294967295)&&(f=4294967295,t=true),r);var s=F(ce+e.comment.length);if(s.writeUInt32LE(101010256,0),s.writeUInt16LE(0,4),s.writeUInt16LE(0,6),s.writeUInt16LE(n,8),s.writeUInt16LE(n,10),s.writeUInt32LE(o,12),s.writeUInt32LE(f,16),s.writeUInt16LE(e.comment.length,20),e.comment.copy(s,22),!t)return s;var u=F(ue);u.writeUInt32LE(101075792,0),L(u,ue-12,4),u.writeUInt16LE(xr,12),u.writeUInt16LE(mr,14),u.writeUInt32LE(0,16),u.writeUInt32LE(0,20),L(u,e.entries.length,24),L(u,e.entries.length,32),L(u,i,40),L(u,e.offsetOfStartOfCentralDirectory,48);var l=F(qe);return l.writeUInt32LE(117853008,0),l.writeUInt32LE(0,4),L(l,e.outputStreamCursor,8),l.writeUInt32LE(1,16),Buffer.concat([u,l,s])}function he(e,r){if(e==="")throw new Error("empty metadataPath");if(e=e.replace(/\\/g,"/"),/^[a-zA-Z]:/.test(e)||/^\//.test(e))throw new Error("absolute path: "+e);if(e.split("/").indexOf("..")!==-1)throw new Error("invalid relative path: "+e);var t=/\/$/.test(e);if(r)t||(e+="/");else if(t)throw new Error("file path cannot end with '/': "+e);return e}var pe=F(0);function m(e,r,t){if(this.utf8FileName=N(e),this.utf8FileName.length>65535)throw new Error("utf8 file name too long. "+utf8FileName.length+" > 65535");if(this.isDirectory=r,this.state=m.WAITING_FOR_METADATA,this.setLastModDate(t.mtime!=null?t.mtime:new Date),t.mode!=null?this.setFileAttributesMode(t.mode):this.setFileAttributesMode(r?16893:33204),r?(this.crcAndFileSizeKnown=true,this.crc32=0,this.uncompressedSize=0,this.compressedSize=0):(this.crcAndFileSizeKnown=false,this.crc32=null,this.uncompressedSize=null,this.compressedSize=null,t.size!=null&&(this.uncompressedSize=t.size)),r?this.compress=false:(this.compress=true,t.compress!=null&&(this.compress=!!t.compress)),this.forceZip64Format=!!t.forceZip64Format,t.fileComment){if(typeof t.fileComment=="string"?this.fileComment=N(t.fileComment,"utf-8"):this.fileComment=t.fileComment,this.fileComment.length>65535)throw new Error("fileComment is too large")}else this.fileComment=pe;}m.WAITING_FOR_METADATA=0;m.READY_TO_PUMP_FILE_DATA=1;m.FILE_DATA_IN_PROGRESS=2;m.FILE_DATA_DONE=3;m.prototype.setLastModDate=function(e){var r=Cr(e);this.lastModFileTime=r.time,this.lastModFileDate=r.date;};m.prototype.setFileAttributesMode=function(e){if((e&65535)!==e)throw new Error("invalid mode. expected: 0 <= "+e+" <= 65535");this.externalFileAttributes=e<<16>>>0;};m.prototype.setFileDataPumpFunction=function(e){this.doFileDataPump=e,this.state=m.READY_TO_PUMP_FILE_DATA;};m.prototype.useZip64Format=function(){return this.forceZip64Format||this.uncompressedSize!=null&&this.uncompressedSize>4294967294||this.compressedSize!=null&&this.compressedSize>4294967294||this.relativeOffsetOfLocalHeader!=null&&this.relativeOffsetOfLocalHeader>4294967294};var hr=30,pr=20,mr=45,xr=831,vr=2048,Er=8;m.prototype.getLocalFileHeader=function(){var e=0,r=0,t=0;this.crcAndFileSizeKnown&&(e=this.crc32,r=this.compressedSize,t=this.uncompressedSize);var n=F(hr),i=vr;return this.crcAndFileSizeKnown||(i|=Er),n.writeUInt32LE(67324752,0),n.writeUInt16LE(pr,4),n.writeUInt16LE(i,6),n.writeUInt16LE(this.getCompressionMethod(),8),n.writeUInt16LE(this.lastModFileTime,10),n.writeUInt16LE(this.lastModFileDate,12),n.writeUInt32LE(e,14),n.writeUInt32LE(r,18),n.writeUInt32LE(t,22),n.writeUInt16LE(this.utf8FileName.length,26),n.writeUInt16LE(0,28),Buffer.concat([n,this.utf8FileName])};var wr=16,gr=24;m.prototype.getDataDescriptor=function(){if(this.crcAndFileSizeKnown)return pe;if(this.useZip64Format()){var e=F(gr);return e.writeUInt32LE(134695760,0),e.writeUInt32LE(this.crc32,4),L(e,this.compressedSize,8),L(e,this.uncompressedSize,16),e}else {var e=F(wr);return e.writeUInt32LE(134695760,0),e.writeUInt32LE(this.crc32,4),e.writeUInt32LE(this.compressedSize,8),e.writeUInt32LE(this.uncompressedSize,12),e}};var yr=46,Pe=28;m.prototype.getCentralDirectoryRecord=function(){var e=F(yr),r=vr;this.crcAndFileSizeKnown||(r|=Er);var t=this.compressedSize,n=this.uncompressedSize,i=this.relativeOffsetOfLocalHeader,o,f;return this.useZip64Format()?(t=4294967295,n=4294967295,i=4294967295,o=mr,f=F(Pe),f.writeUInt16LE(1,0),f.writeUInt16LE(Pe-4,2),L(f,this.uncompressedSize,4),L(f,this.compressedSize,12),L(f,this.relativeOffsetOfLocalHeader,20)):(o=pr,f=pe),e.writeUInt32LE(33639248,0),e.writeUInt16LE(xr,4),e.writeUInt16LE(o,6),e.writeUInt16LE(r,8),e.writeUInt16LE(this.getCompressionMethod(),10),e.writeUInt16LE(this.lastModFileTime,12),e.writeUInt16LE(this.lastModFileDate,14),e.writeUInt32LE(this.crc32,16),e.writeUInt32LE(t,20),e.writeUInt32LE(n,24),e.writeUInt16LE(this.utf8FileName.length,28),e.writeUInt16LE(f.length,30),e.writeUInt16LE(this.fileComment.length,32),e.writeUInt16LE(0,34),e.writeUInt16LE(0,36),e.writeUInt32LE(this.externalFileAttributes,38),e.writeUInt32LE(i,42),Buffer.concat([e,this.utf8FileName,f,this.fileComment])};m.prototype.getCompressionMethod=function(){var e=0,r=8;return this.compress?r:e};function Cr(e){var r=0;r|=e.getDate()&31,r|=(e.getMonth()+1&15)<<5,r|=(e.getFullYear()-1980&127)<<9;var t=0;return t|=Math.floor(e.getSeconds()/2),t|=(e.getMinutes()&63)<<5,t|=(e.getHours()&31)<<11,{date:r,time:t}}function L(e,r,t){var n=Math.floor(r/4294967296),i=r%4294967296;e.writeUInt32LE(i,t),e.writeUInt32LE(n,t+4);}We.inherits(le,de);function le(e){de.call(this,e),this.byteCount=0;}le.prototype._transform=function(e,r,t){this.byteCount+=e.length,t(null,e);};We.inherits(He,de);function He(e){de.call(this,e),this.crc32=0;}He.prototype._transform=function(e,r,t){this.crc32=lr.unsigned(e,this.crc32),t(null,e);};var Ze="\0\u263A\u263B\u2665\u2666\u2663\u2660\u2022\u25D8\u25CB\u25D9\u2642\u2640\u266A\u266B\u263C\u25BA\u25C4\u2195\u203C\xB6\xA7\u25AC\u21A8\u2191\u2193\u2192\u2190\u221F\u2194\u25B2\u25BC !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u2302\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0";if(Ze.length!==256)throw new Error("assertion failure");var ae=null;function It(e){if(/^[\x20-\x7e]*$/.test(e))return N(e,"utf-8");if(ae==null){ae={};for(var r=0;r<Ze.length;r++)ae[Ze[r]]=r;}for(var t=F(e.length),r=0;r<e.length;r++){var n=ae[e[r]];if(n==null)throw new Error("character not encodable in CP437: "+JSON.stringify(e[r]));t[r]=n;}return t}function F(e){F=r;try{return F(e)}catch{return F=t,F(e)}function r(n){return Buffer.allocUnsafe(n)}function t(n){return new Buffer(n)}}function N(e,r){N=t;try{return N(e,r)}catch{return N=n,N(e,r)}function t(i,o){return Buffer.from(i,o)}function n(i,o){return new Buffer(i,o)}}function re(e,r){re=t;try{return re(e,r)}catch{return re=n,re(e,r)}function t(i,o){return i.includes(o)}function n(i,o){for(var f=0;f<=i.length-o.length;f++)for(var s=0;;s++){if(s===o.length)return  true;if(i[f+s]!==o[s])break}return  false}}});var Lr=E((Un,Ir)=>{Ir.exports=me;function me(){this.pending=0,this.max=1/0,this.listeners=[],this.waiting=[],this.error=null;}me.prototype.go=function(e){this.pending<this.max?Sr(this,e):this.waiting.push(e);};me.prototype.wait=function(e){this.pending===0?e(this.error):this.listeners.push(e);};me.prototype.hold=function(){return Fr(this)};function Fr(e){e.pending+=1;var r=false;return t;function t(i){if(r)throw new Error("callback called twice");if(r=true,e.error=e.error||i,e.pending-=1,e.waiting.length>0&&e.pending<e.max)Sr(e,e.waiting.shift());else if(e.pending===0){var o=e.listeners;e.listeners=[],o.forEach(n);}}function n(i){i(e.error);}}function Sr(e,r){r(Fr(e));}});var zr=E(ne=>{var te=require$$0$4,xe=require$$1,Ye=require$$12,Or=Ye.Readable,$e=Ye.Writable,Lt=Ye.PassThrough,Ot=Lr(),ve=require$$0$5.EventEmitter;ne.createFromBuffer=zt;ne.createFromFd=_t;ne.BufferSlicer=D;ne.FdSlicer=R;xe.inherits(R,ve);function R(e,r){r=r||{},ve.call(this),this.fd=e,this.pend=new Ot,this.pend.max=1,this.refCount=0,this.autoClose=!!r.autoClose;}R.prototype.read=function(e,r,t,n,i){var o=this;o.pend.go(function(f){te.read(o.fd,e,r,t,n,function(s,u,l){f(),i(s,u,l);});});};R.prototype.write=function(e,r,t,n,i){var o=this;o.pend.go(function(f){te.write(o.fd,e,r,t,n,function(s,u,l){f(),i(s,u,l);});});};R.prototype.createReadStream=function(e){return new Ee(this,e)};R.prototype.createWriteStream=function(e){return new we(this,e)};R.prototype.ref=function(){this.refCount+=1;};R.prototype.unref=function(){var e=this;if(e.refCount-=1,e.refCount>0)return;if(e.refCount<0)throw new Error("invalid unref");e.autoClose&&te.close(e.fd,r);function r(t){t?e.emit("error",t):e.emit("close");}};xe.inherits(Ee,Or);function Ee(e,r){r=r||{},Or.call(this,r),this.context=e,this.context.ref(),this.start=r.start||0,this.endOffset=r.end,this.pos=this.start,this.destroyed=false;}Ee.prototype._read=function(e){var r=this;if(!r.destroyed){var t=Math.min(r._readableState.highWaterMark,e);if(r.endOffset!=null&&(t=Math.min(t,r.endOffset-r.pos)),t<=0){r.destroyed=true,r.push(null),r.context.unref();return}r.context.pend.go(function(n){if(r.destroyed)return n();var i=Buffer.alloc(t);te.read(r.context.fd,i,0,t,r.pos,function(o,f){o?r.destroy(o):f===0?(r.destroyed=true,r.push(null),r.context.unref()):(r.pos+=f,r.push(i.slice(0,f))),n();});});}};Ee.prototype.destroy=function(e){this.destroyed||(e=e||new Error("stream destroyed"),this.destroyed=true,this.emit("error",e),this.context.unref());};xe.inherits(we,$e);function we(e,r){r=r||{},$e.call(this,r),this.context=e,this.context.ref(),this.start=r.start||0,this.endOffset=r.end==null?1/0:+r.end,this.bytesWritten=0,this.pos=this.start,this.destroyed=false,this.on("finish",this.destroy.bind(this));}we.prototype._write=function(e,r,t){var n=this;if(!n.destroyed){if(n.pos+e.length>n.endOffset){var i=new Error("maximum file length exceeded");i.code="ETOOBIG",n.destroy(),t(i);return}n.context.pend.go(function(o){if(n.destroyed)return o();te.write(n.context.fd,e,0,e.length,n.pos,function(f,s){f?(n.destroy(),o(),t(f)):(n.bytesWritten+=s,n.pos+=s,n.emit("progress"),o(),t());});});}};we.prototype.destroy=function(){this.destroyed||(this.destroyed=true,this.context.unref());};xe.inherits(D,ve);function D(e,r){ve.call(this),r=r||{},this.refCount=0,this.buffer=e,this.maxChunkSize=r.maxChunkSize||Number.MAX_SAFE_INTEGER;}D.prototype.read=function(e,r,t,n,i){var o=n+t,f=o-this.buffer.length,s=f>0?f:t;this.buffer.copy(e,r,n,o),setImmediate(function(){i(null,s);});};D.prototype.write=function(e,r,t,n,i){e.copy(this.buffer,n,r,r+t),setImmediate(function(){i(null,t,e);});};D.prototype.createReadStream=function(e){e=e||{};var r=new Lt(e);r.destroyed=false,r.start=e.start||0,r.endOffset=e.end,r.pos=r.endOffset||this.buffer.length;for(var t=this.buffer.slice(r.start,r.pos),n=0;;){var i=n+this.maxChunkSize;if(i>=t.length){n<t.length&&r.write(t.slice(n,t.length));break}r.write(t.slice(n,i)),n=i;}return r.end(),r.destroy=function(){r.destroyed=true;},r};D.prototype.createWriteStream=function(e){var r=this;e=e||{};var t=new $e(e);return t.start=e.start||0,t.endOffset=e.end==null?this.buffer.length:+e.end,t.bytesWritten=0,t.pos=t.start,t.destroyed=false,t._write=function(n,i,o){if(!t.destroyed){var f=t.pos+n.length;if(f>t.endOffset){var s=new Error("maximum file length exceeded");s.code="ETOOBIG",t.destroyed=true,o(s);return}n.copy(r.buffer,t.pos,0,n.length),t.bytesWritten+=n.length,t.pos=f,t.emit("progress"),o();}},t.destroy=function(){t.destroyed=true;},t};D.prototype.ref=function(){this.refCount+=1;};D.prototype.unref=function(){if(this.refCount-=1,this.refCount<0)throw new Error("invalid unref")};function zt(e,r){return new D(e,r)}function _t(e,r){return new R(e,r)}});var Xe=E(A=>{var je=require$$0$4,At=require$$13,_r=zr(),Rt=Be(),Ce=require$$1,be=require$$0$5.EventEmitter,Ar=require$$12.Transform,Ke=require$$12.PassThrough,Dt=require$$12.Writable;A.open=Tt;A.fromFd=Rr;A.fromBuffer=Ut;A.fromRandomAccessReader=Ve;A.dosDateTimeToDate=Tr;A.validateFileName=Ur;A.ZipFile=B;A.Entry=ie;A.RandomAccessReader=q;function Tt(e,r,t){typeof r=="function"&&(t=r,r=null),r==null&&(r={}),r.autoClose==null&&(r.autoClose=true),r.lazyEntries==null&&(r.lazyEntries=false),r.decodeStrings==null&&(r.decodeStrings=true),r.validateEntrySizes==null&&(r.validateEntrySizes=true),r.strictFileNames==null&&(r.strictFileNames=false),t==null&&(t=ye),je.open(e,"r",function(n,i){if(n)return t(n);Rr(i,r,function(o,f){o&&je.close(i,ye),t(o,f);});});}function Rr(e,r,t){typeof r=="function"&&(t=r,r=null),r==null&&(r={}),r.autoClose==null&&(r.autoClose=false),r.lazyEntries==null&&(r.lazyEntries=false),r.decodeStrings==null&&(r.decodeStrings=true),r.validateEntrySizes==null&&(r.validateEntrySizes=true),r.strictFileNames==null&&(r.strictFileNames=false),t==null&&(t=ye),je.fstat(e,function(n,i){if(n)return t(n);var o=_r.createFromFd(e,{autoClose:true});Ve(o,i.size,r,t);});}function Ut(e,r,t){typeof r=="function"&&(t=r,r=null),r==null&&(r={}),r.autoClose=false,r.lazyEntries==null&&(r.lazyEntries=false),r.decodeStrings==null&&(r.decodeStrings=true),r.validateEntrySizes==null&&(r.validateEntrySizes=true),r.strictFileNames==null&&(r.strictFileNames=false);var n=_r.createFromBuffer(e,{maxChunkSize:65536});Ve(n,e.length,r,t);}function Ve(e,r,t,n){typeof t=="function"&&(n=t,t=null),t==null&&(t={}),t.autoClose==null&&(t.autoClose=true),t.lazyEntries==null&&(t.lazyEntries=false),t.decodeStrings==null&&(t.decodeStrings=true);var i=!!t.decodeStrings;if(t.validateEntrySizes==null&&(t.validateEntrySizes=true),t.strictFileNames==null&&(t.strictFileNames=false),n==null&&(n=ye),typeof r!="number")throw new Error("expected totalSize parameter to be a number");if(r>Number.MAX_SAFE_INTEGER)throw new Error("zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.");e.ref();var o=22,f=65535,s=Math.min(o+f,r),u=_(s),l=r-u.length;$(e,u,0,s,l,function(a){if(a)return n(a);for(var c=s-o;c>=0;c-=1)if(u.readUInt32LE(c)===101010256){var d=u.slice(c),x=d.readUInt16LE(4);if(x!==0)return n(new Error("multi-disk zip files are not supported: found disk number: "+x));var y=d.readUInt16LE(10),p=d.readUInt32LE(16),h=d.readUInt16LE(20),v=d.length-o;if(h!==v)return n(new Error("invalid comment length. expected: "+v+". found: "+h));var w=i?ge(d,22,d.length,false):d.slice(22);if(!(y===65535||p===4294967295))return n(null,new B(e,p,r,y,w,t.autoClose,t.lazyEntries,i,t.validateEntrySizes,t.strictFileNames));var b=_(20),T=l+c-b.length;$(e,b,0,b.length,T,function(Y){if(Y)return n(Y);if(b.readUInt32LE(0)!==117853008)return n(new Error("invalid zip64 end of central directory locator signature"));var k=j(b,8),P=_(56);$(e,P,0,P.length,k,function(ee){return ee?n(ee):P.readUInt32LE(0)!==101075792?n(new Error("invalid zip64 end of central directory record signature")):(y=j(P,32),p=j(P,48),n(null,new B(e,p,r,y,w,t.autoClose,t.lazyEntries,i,t.validateEntrySizes,t.strictFileNames)))});});return}n(new Error("end of central directory record signature not found"));});}Ce.inherits(B,be);function B(e,r,t,n,i,o,f,s,u,l){var a=this;be.call(a),a.reader=e,a.reader.on("error",function(c){Dr(a,c);}),a.reader.once("close",function(){a.emit("close");}),a.readEntryCursor=r,a.fileSize=t,a.entryCount=n,a.comment=i,a.entriesRead=0,a.autoClose=!!o,a.lazyEntries=!!f,a.decodeStrings=!!s,a.validateEntrySizes=!!u,a.strictFileNames=!!l,a.isOpen=true,a.emittedError=false,a.lazyEntries||a._readEntry();}B.prototype.close=function(){this.isOpen&&(this.isOpen=false,this.reader.unref());};function O(e,r){e.autoClose&&e.close(),Dr(e,r);}function Dr(e,r){e.emittedError||(e.emittedError=true,e.emit("error",r));}B.prototype.readEntry=function(){if(!this.lazyEntries)throw new Error("readEntry() called without lazyEntries:true");this._readEntry();};B.prototype._readEntry=function(){var e=this;if(e.entryCount===e.entriesRead){setImmediate(function(){e.autoClose&&e.close(),!e.emittedError&&e.emit("end");});return}if(!e.emittedError){var r=_(46);$(e.reader,r,0,r.length,e.readEntryCursor,function(t){if(t)return O(e,t);if(!e.emittedError){var n=new ie,i=r.readUInt32LE(0);if(i!==33639248)return O(e,new Error("invalid central directory file header signature: 0x"+i.toString(16)));if(n.versionMadeBy=r.readUInt16LE(4),n.versionNeededToExtract=r.readUInt16LE(6),n.generalPurposeBitFlag=r.readUInt16LE(8),n.compressionMethod=r.readUInt16LE(10),n.lastModFileTime=r.readUInt16LE(12),n.lastModFileDate=r.readUInt16LE(14),n.crc32=r.readUInt32LE(16),n.compressedSize=r.readUInt32LE(20),n.uncompressedSize=r.readUInt32LE(24),n.fileNameLength=r.readUInt16LE(28),n.extraFieldLength=r.readUInt16LE(30),n.fileCommentLength=r.readUInt16LE(32),n.internalFileAttributes=r.readUInt16LE(36),n.externalFileAttributes=r.readUInt32LE(38),n.relativeOffsetOfLocalHeader=r.readUInt32LE(42),n.generalPurposeBitFlag&64)return O(e,new Error("strong encryption is not supported"));e.readEntryCursor+=46,r=_(n.fileNameLength+n.extraFieldLength+n.fileCommentLength),$(e.reader,r,0,r.length,e.readEntryCursor,function(o){if(o)return O(e,o);if(!e.emittedError){var f=(n.generalPurposeBitFlag&2048)!==0;n.fileName=e.decodeStrings?ge(r,0,n.fileNameLength,f):r.slice(0,n.fileNameLength);var s=n.fileNameLength+n.extraFieldLength,u=r.slice(n.fileNameLength,s);n.extraFields=[];for(var l=0;l<u.length-3;){var a=u.readUInt16LE(l+0),c=u.readUInt16LE(l+2),d=l+4,x=d+c;if(x>u.length)return O(e,new Error("extra field length exceeds extra field buffer size"));var y=_(c);u.copy(y,0,d,x),n.extraFields.push({id:a,data:y}),l=x;}if(n.fileComment=e.decodeStrings?ge(r,s,s+n.fileCommentLength,f):r.slice(s,s+n.fileCommentLength),n.comment=n.fileComment,e.readEntryCursor+=r.length,e.entriesRead+=1,n.uncompressedSize===4294967295||n.compressedSize===4294967295||n.relativeOffsetOfLocalHeader===4294967295){for(var p=null,l=0;l<n.extraFields.length;l++){var h=n.extraFields[l];if(h.id===1){p=h.data;break}}if(p==null)return O(e,new Error("expected zip64 extended information extra field"));var v=0;if(n.uncompressedSize===4294967295){if(v+8>p.length)return O(e,new Error("zip64 extended information extra field does not include uncompressed size"));n.uncompressedSize=j(p,v),v+=8;}if(n.compressedSize===4294967295){if(v+8>p.length)return O(e,new Error("zip64 extended information extra field does not include compressed size"));n.compressedSize=j(p,v),v+=8;}if(n.relativeOffsetOfLocalHeader===4294967295){if(v+8>p.length)return O(e,new Error("zip64 extended information extra field does not include relative header offset"));n.relativeOffsetOfLocalHeader=j(p,v),v+=8;}}if(e.decodeStrings)for(var l=0;l<n.extraFields.length;l++){var h=n.extraFields[l];if(h.id===28789){if(h.data.length<6||h.data.readUInt8(0)!==1)continue;var w=h.data.readUInt32LE(1);if(Rt.unsigned(r.slice(0,n.fileNameLength))!==w)continue;n.fileName=ge(h.data,5,h.data.length,true);break}}if(e.validateEntrySizes&&n.compressionMethod===0){var b=n.uncompressedSize;if(n.isEncrypted()&&(b+=12),n.compressedSize!==b){var T="compressed/uncompressed size mismatch for stored file: "+n.compressedSize+" != "+n.uncompressedSize;return O(e,new Error(T))}}if(e.decodeStrings){e.strictFileNames||(n.fileName=n.fileName.replace(/\\/g,"/"));var Y=Ur(n.fileName,e.validateFileNameOptions);if(Y!=null)return O(e,new Error(Y))}e.emit("entry",n),e.lazyEntries||e._readEntry();}});}});}};B.prototype.openReadStream=function(e,r,t){var n=this,i=0,o=e.compressedSize;if(t==null)t=r,r={};else {if(r.decrypt!=null){if(!e.isEncrypted())throw new Error("options.decrypt can only be specified for encrypted entries");if(r.decrypt!==false)throw new Error("invalid options.decrypt value: "+r.decrypt);if(e.isCompressed()&&r.decompress!==false)throw new Error("entry is encrypted and compressed, and options.decompress !== false")}if(r.decompress!=null){if(!e.isCompressed())throw new Error("options.decompress can only be specified for compressed entries");if(!(r.decompress===false||r.decompress===true))throw new Error("invalid options.decompress value: "+r.decompress)}if(r.start!=null||r.end!=null){if(e.isCompressed()&&r.decompress!==false)throw new Error("start/end range not allowed for compressed entry without options.decompress === false");if(e.isEncrypted()&&r.decrypt!==false)throw new Error("start/end range not allowed for encrypted entry without options.decrypt === false")}if(r.start!=null){if(i=r.start,i<0)throw new Error("options.start < 0");if(i>e.compressedSize)throw new Error("options.start > entry.compressedSize")}if(r.end!=null){if(o=r.end,o<0)throw new Error("options.end < 0");if(o>e.compressedSize)throw new Error("options.end > entry.compressedSize");if(o<i)throw new Error("options.end < options.start")}}if(!n.isOpen)return t(new Error("closed"));if(e.isEncrypted()&&r.decrypt!==false)return t(new Error("entry is encrypted, and options.decrypt !== false"));n.reader.ref();var f=_(30);$(n.reader,f,0,f.length,e.relativeOffsetOfLocalHeader,function(s){try{if(s)return t(s);var u=f.readUInt32LE(0);if(u!==67324752)return t(new Error("invalid local file header signature: 0x"+u.toString(16)));var l=f.readUInt16LE(26),a=f.readUInt16LE(28),c=e.relativeOffsetOfLocalHeader+f.length+l+a,d;if(e.compressionMethod===0)d=!1;else if(e.compressionMethod===8)d=r.decompress!=null?r.decompress:!0;else return t(new Error("unsupported compression method: "+e.compressionMethod));var x=c,y=x+e.compressedSize;if(e.compressedSize!==0&&y>n.fileSize)return t(new Error("file data overflows file bounds: "+x+" + "+e.compressedSize+" > "+n.fileSize));var p=n.reader.createReadStream({start:x+i,end:x+o}),h=p;if(d){var v=!1,w=At.createInflateRaw();p.on("error",function(b){setImmediate(function(){v||w.emit("error",b);});}),p.pipe(w),n.validateEntrySizes?(h=new oe(e.uncompressedSize),w.on("error",function(b){setImmediate(function(){v||h.emit("error",b);});}),w.pipe(h)):h=w,h.destroy=function(){v=!0,w!==h&&w.unpipe(h),p.unpipe(w),p.destroy();};}t(null,h);}finally{n.reader.unref();}});};function ie(){}ie.prototype.getLastModDate=function(){return Tr(this.lastModFileDate,this.lastModFileTime)};ie.prototype.isEncrypted=function(){return (this.generalPurposeBitFlag&1)!==0};ie.prototype.isCompressed=function(){return this.compressionMethod===8};function Tr(e,r){var t=e&31,n=(e>>5&15)-1,i=(e>>9&127)+1980,o=0,f=(r&31)*2,s=r>>5&63,u=r>>11&31;return new Date(i,n,t,u,s,f,o)}function Ur(e){return e.indexOf("\\")!==-1?"invalid characters in fileName: "+e:/^[a-zA-Z]:/.test(e)||/^\//.test(e)?"absolute path: "+e:e.split("/").indexOf("..")!==-1?"invalid relative path: "+e:null}function $(e,r,t,n,i,o){if(n===0)return setImmediate(function(){o(null,_(0));});e.read(r,t,n,i,function(f,s){if(f)return o(f);if(s<n)return o(new Error("unexpected EOF"));o();});}Ce.inherits(oe,Ar);function oe(e){Ar.call(this),this.actualByteCount=0,this.expectedByteCount=e;}oe.prototype._transform=function(e,r,t){if(this.actualByteCount+=e.length,this.actualByteCount>this.expectedByteCount){var n="too many bytes in the stream. expected "+this.expectedByteCount+". got at least "+this.actualByteCount;return t(new Error(n))}t(null,e);};oe.prototype._flush=function(e){if(this.actualByteCount<this.expectedByteCount){var r="not enough bytes in the stream. expected "+this.expectedByteCount+". got only "+this.actualByteCount;return e(new Error(r))}e();};Ce.inherits(q,be);function q(){be.call(this),this.refCount=0;}q.prototype.ref=function(){this.refCount+=1;};q.prototype.unref=function(){var e=this;if(e.refCount-=1,e.refCount>0)return;if(e.refCount<0)throw new Error("invalid unref");e.close(r);function r(t){if(t)return e.emit("error",t);e.emit("close");}};q.prototype.createReadStream=function(e){var r=e.start,t=e.end;if(r===t){var n=new Ke;return setImmediate(function(){n.end();}),n}var i=this._readStreamForRange(r,t),o=false,f=new Fe(this);i.on("error",function(u){setImmediate(function(){o||f.emit("error",u);});}),f.destroy=function(){i.unpipe(f),f.unref(),i.destroy();};var s=new oe(t-r);return f.on("error",function(u){setImmediate(function(){o||s.emit("error",u);});}),s.destroy=function(){o=true,f.unpipe(s),f.destroy();},i.pipe(f).pipe(s)};q.prototype._readStreamForRange=function(e,r){throw new Error("not implemented")};q.prototype.read=function(e,r,t,n,i){var o=this.createReadStream({start:n,end:n+t}),f=new Dt,s=0;f._write=function(u,l,a){u.copy(e,r+s,0,u.length),s+=u.length,a();},f.on("finish",i),o.on("error",function(u){i(u);}),o.pipe(f);};q.prototype.close=function(e){setImmediate(e);};Ce.inherits(Fe,Ke);function Fe(e){Ke.call(this),this.context=e,this.context.ref(),this.unreffedYet=false;}Fe.prototype._flush=function(e){this.unref(),e();};Fe.prototype.unref=function(e){this.unreffedYet||(this.unreffedYet=true,this.context.unref());};var Nt="\0\u263A\u263B\u2665\u2666\u2663\u2660\u2022\u25D8\u25CB\u25D9\u2642\u2640\u266A\u266B\u263C\u25BA\u25C4\u2195\u203C\xB6\xA7\u25AC\u21A8\u2191\u2193\u2192\u2190\u221F\u2194\u25B2\u25BC !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u2302\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0";function ge(e,r,t,n){if(n)return e.toString("utf8",r,t);for(var i="",o=r;o<t;o++)i+=Nt[e[o]];return i}function j(e,r){var t=e.readUInt32LE(r),n=e.readUInt32LE(r+4);return n*4294967296+t}var _;typeof Buffer.allocUnsafe=="function"?_=function(e){return Buffer.allocUnsafe(e)}:_=function(e){return new Buffer(e)};function ye(e){if(e)throw e}});var Mr=E((Bn,Nr)=>{var K=1e3,V=K*60,X=V*60,H=X*24,Mt=H*7,Bt=H*365.25;Nr.exports=function(e,r){r=r||{};var t=typeof e;if(t==="string"&&e.length>0)return qt(e);if(t==="number"&&isFinite(e))return r.long?Zt(e):Pt(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function qt(e){if(e=String(e),!(e.length>100)){var r=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(r){var t=parseFloat(r[1]),n=(r[2]||"ms").toLowerCase();switch(n){case "years":case "year":case "yrs":case "yr":case "y":return t*Bt;case "weeks":case "week":case "w":return t*Mt;case "days":case "day":case "d":return t*H;case "hours":case "hour":case "hrs":case "hr":case "h":return t*X;case "minutes":case "minute":case "mins":case "min":case "m":return t*V;case "seconds":case "second":case "secs":case "sec":case "s":return t*K;case "milliseconds":case "millisecond":case "msecs":case "msec":case "ms":return t;default:return}}}}function Pt(e){var r=Math.abs(e);return r>=H?Math.round(e/H)+"d":r>=X?Math.round(e/X)+"h":r>=V?Math.round(e/V)+"m":r>=K?Math.round(e/K)+"s":e+"ms"}function Zt(e){var r=Math.abs(e);return r>=H?Se(e,r,H,"day"):r>=X?Se(e,r,X,"hour"):r>=V?Se(e,r,V,"minute"):r>=K?Se(e,r,K,"second"):e+" ms"}function Se(e,r,t,n){var i=r>=t*1.5;return Math.round(e/t)+" "+n+(i?"s":"")}});var Je=E((qn,Br)=>{function Wt(e){t.debug=t,t.default=t,t.coerce=u,t.disable=o,t.enable=i,t.enabled=f,t.humanize=Mr(),t.destroy=l,Object.keys(e).forEach(a=>{t[a]=e[a];}),t.names=[],t.skips=[],t.formatters={};function r(a){let c=0;for(let d=0;d<a.length;d++)c=(c<<5)-c+a.charCodeAt(d),c|=0;return t.colors[Math.abs(c)%t.colors.length]}t.selectColor=r;function t(a){let c,d=null,x,y;function p(...h){if(!p.enabled)return;let v=p,w=Number(new Date),b=w-(c||w);v.diff=b,v.prev=c,v.curr=w,c=w,h[0]=t.coerce(h[0]),typeof h[0]!="string"&&h.unshift("%O");let T=0;h[0]=h[0].replace(/%([a-zA-Z%])/g,(k,P)=>{if(k==="%%")return "%";T++;let ee=t.formatters[P];if(typeof ee=="function"){let ht=h[T];k=ee.call(v,ht),h.splice(T,1),T--;}return k}),t.formatArgs.call(v,h),(v.log||t.log).apply(v,h);}return p.namespace=a,p.useColors=t.useColors(),p.color=t.selectColor(a),p.extend=n,p.destroy=t.destroy,Object.defineProperty(p,"enabled",{enumerable:true,configurable:false,get:()=>d!==null?d:(x!==t.namespaces&&(x=t.namespaces,y=t.enabled(a)),y),set:h=>{d=h;}}),typeof t.init=="function"&&t.init(p),p}function n(a,c){let d=t(this.namespace+(typeof c=="undefined"?":":c)+a);return d.log=this.log,d}function i(a){t.save(a),t.namespaces=a,t.names=[],t.skips=[];let c,d=(typeof a=="string"?a:"").split(/[\s,]+/),x=d.length;for(c=0;c<x;c++)d[c]&&(a=d[c].replace(/\*/g,".*?"),a[0]==="-"?t.skips.push(new RegExp("^"+a.slice(1)+"$")):t.names.push(new RegExp("^"+a+"$")));}function o(){let a=[...t.names.map(s),...t.skips.map(s).map(c=>"-"+c)].join(",");return t.enable(""),a}function f(a){if(a[a.length-1]==="*")return  true;let c,d;for(c=0,d=t.skips.length;c<d;c++)if(t.skips[c].test(a))return  false;for(c=0,d=t.names.length;c<d;c++)if(t.names[c].test(a))return  true;return  false}function s(a){return a.toString().substring(2,a.toString().length-2).replace(/\.\*\?$/,"*")}function u(a){return a instanceof Error?a.stack||a.message:a}function l(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");}return t.enable(t.load()),t}Br.exports=Wt;});var qr=E((S,Ie)=>{S.formatArgs=Gt;S.save=Yt;S.load=$t;S.useColors=Ht;S.storage=jt();S.destroy=(()=>{let e=false;return ()=>{e||(e=true,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));}})();S.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function Ht(){return typeof window!="undefined"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?true:typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?false:typeof document!="undefined"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window!="undefined"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator!="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function Gt(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+Ie.exports.humanize(this.diff),!this.useColors)return;let r="color: "+this.color;e.splice(1,0,r,"color: inherit");let t=0,n=0;e[0].replace(/%[a-zA-Z%]/g,i=>{i!=="%%"&&(t++,i==="%c"&&(n=t));}),e.splice(n,0,r);}S.log=console.debug||console.log||(()=>{});function Yt(e){try{e?S.storage.setItem("debug",e):S.storage.removeItem("debug");}catch{}}function $t(){let e;try{e=S.storage.getItem("debug");}catch{}return !e&&typeof process!="undefined"&&"env"in process&&(e=process.env.DEBUG),e}function jt(){try{return localStorage}catch{}}Ie.exports=Je()(S);var{formatters:Kt}=Ie.exports;Kt.j=function(e){try{return JSON.stringify(e)}catch(r){return "[UnexpectedJSONParseError]: "+r.message}};});var Zr=E((Pn,Pr)=>{Pr.exports=(e,r=process.argv)=>{let t=e.startsWith("-")?"":e.length===1?"-":"--",n=r.indexOf(t+e),i=r.indexOf("--");return n!==-1&&(i===-1||n<i)};});var Gr=E((Zn,Hr)=>{var Vt=require$$0$2,Wr=require$$2$2,I=Zr(),{env:g}=process,Le;I("no-color")||I("no-colors")||I("color=false")||I("color=never")?Le=0:(I("color")||I("colors")||I("color=true")||I("color=always"))&&(Le=1);function Xt(){if("FORCE_COLOR"in g)return g.FORCE_COLOR==="true"?1:g.FORCE_COLOR==="false"?0:g.FORCE_COLOR.length===0?1:Math.min(Number.parseInt(g.FORCE_COLOR,10),3)}function Jt(e){return e===0?false:{level:e,hasBasic:true,has256:e>=2,has16m:e>=3}}function Qt(e,{streamIsTTY:r,sniffFlags:t=true}={}){let n=Xt();n!==void 0&&(Le=n);let i=t?Le:n;if(i===0)return 0;if(t){if(I("color=16m")||I("color=full")||I("color=truecolor"))return 3;if(I("color=256"))return 2}if(e&&!r&&i===void 0)return 0;let o=i||0;if(g.TERM==="dumb")return o;if(process.platform==="win32"){let f=Vt.release().split(".");return Number(f[0])>=10&&Number(f[2])>=10586?Number(f[2])>=14931?3:2:1}if("CI"in g)return ["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE","DRONE"].some(f=>f in g)||g.CI_NAME==="codeship"?1:o;if("TEAMCITY_VERSION"in g)return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(g.TEAMCITY_VERSION)?1:0;if(g.COLORTERM==="truecolor")return 3;if("TERM_PROGRAM"in g){let f=Number.parseInt((g.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(g.TERM_PROGRAM){case "iTerm.app":return f>=3?3:2;case "Apple_Terminal":return 2}}return /-256(color)?$/i.test(g.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(g.TERM)||"COLORTERM"in g?1:o}function Qe(e,r={}){let t=Qt(e,{streamIsTTY:e&&e.isTTY,...r});return Jt(t)}Hr.exports={supportsColor:Qe,stdout:Qe({isTTY:Wr.isatty(1)}),stderr:Qe({isTTY:Wr.isatty(2)})};});var $r=E((C,ze)=>{var kt=require$$2$2,Oe=require$$1;C.init=sn;C.log=nn;C.formatArgs=rn;C.save=on;C.load=fn;C.useColors=en;C.destroy=Oe.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");C.colors=[6,2,3,4,5,1];try{let e=Gr();e&&(e.stderr||e).level>=2&&(C.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221]);}catch{}C.inspectOpts=Object.keys(process.env).filter(e=>/^debug_/i.test(e)).reduce((e,r)=>{let t=r.substring(6).toLowerCase().replace(/_([a-z])/g,(i,o)=>o.toUpperCase()),n=process.env[r];return /^(yes|on|true|enabled)$/i.test(n)?n=true:/^(no|off|false|disabled)$/i.test(n)?n=false:n==="null"?n=null:n=Number(n),e[t]=n,e},{});function en(){return "colors"in C.inspectOpts?!!C.inspectOpts.colors:kt.isatty(process.stderr.fd)}function rn(e){let{namespace:r,useColors:t}=this;if(t){let n=this.color,i="\x1B[3"+(n<8?n:"8;5;"+n),o=`  ${i};1m${r} \x1B[0m`;e[0]=o+e[0].split(`
`).join(`
`+o),e.push(i+"m+"+ze.exports.humanize(this.diff)+"\x1B[0m");}else e[0]=tn()+r+" "+e[0];}function tn(){return C.inspectOpts.hideDate?"":new Date().toISOString()+" "}function nn(...e){return process.stderr.write(Oe.format(...e)+`
`)}function on(e){e?process.env.DEBUG=e:delete process.env.DEBUG;}function fn(){return process.env.DEBUG}function sn(e){e.inspectOpts={};let r=Object.keys(C.inspectOpts);for(let t=0;t<r.length;t++)e.inspectOpts[r[t]]=C.inspectOpts[r[t]];}ze.exports=Je()(C);var{formatters:Yr}=ze.exports;Yr.o=function(e){return this.inspectOpts.colors=this.useColors,Oe.inspect(e,this.inspectOpts).split(`
`).map(r=>r.trim()).join(" ")};Yr.O=function(e){return this.inspectOpts.colors=this.useColors,Oe.inspect(e,this.inspectOpts)};});var jr=E((Wn,ke)=>{typeof process=="undefined"||process.type==="renderer"||process.browser===true||process.__nwjs?ke.exports=qr():ke.exports=$r();});var Xr=E((Hn,Vr)=>{Vr.exports=Kr;function Kr(e,r){if(e&&r)return Kr(e)(r);if(typeof e!="function")throw new TypeError("need wrapper function");return Object.keys(e).forEach(function(n){t[n]=e[n];}),t;function t(){for(var n=new Array(arguments.length),i=0;i<n.length;i++)n[i]=arguments[i];var o=e.apply(this,n),f=n[n.length-1];return typeof o=="function"&&o!==f&&Object.keys(f).forEach(function(s){o[s]=f[s];}),o}}});var rr=E((Gn,er)=>{var Jr=Xr();er.exports=Jr(_e);er.exports.strict=Jr(Qr);_e.proto=_e(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return _e(this)},configurable:true}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return Qr(this)},configurable:true});});function _e(e){var r=function(){return r.called?r.value:(r.called=true,r.value=e.apply(this,arguments))};return r.called=false,r}function Qr(e){var r=function(){if(r.called)throw new Error(r.onceError);return r.called=true,r.value=e.apply(this,arguments)},t=e.name||"Function wrapped with `once`";return r.onceError=t+" shouldn't be called more than once",r.called=false,r}});var rt=E((Yn,et)=>{var an=rr(),un=function(){},cn=function(e){return e.setHeader&&typeof e.abort=="function"},ln=function(e){return e.stdio&&Array.isArray(e.stdio)&&e.stdio.length===3},kr=function(e,r,t){if(typeof r=="function")return kr(e,null,r);r||(r={}),t=an(t||un);var n=e._writableState,i=e._readableState,o=r.readable||r.readable!==false&&e.readable,f=r.writable||r.writable!==false&&e.writable,s=false,u=function(){e.writable||l();},l=function(){f=false,o||t.call(e);},a=function(){o=false,f||t.call(e);},c=function(h){t.call(e,h?new Error("exited with error code: "+h):null);},d=function(h){t.call(e,h);},x=function(){process.nextTick(y);},y=function(){if(!s){if(o&&!(i&&i.ended&&!i.destroyed))return t.call(e,new Error("premature close"));if(f&&!(n&&n.ended&&!n.destroyed))return t.call(e,new Error("premature close"))}},p=function(){e.req.on("finish",l);};return cn(e)?(e.on("complete",l),e.on("abort",x),e.req?p():e.on("request",p)):f&&!n&&(e.on("end",u),e.on("close",u)),ln(e)&&e.on("exit",c),e.on("end",a),e.on("finish",l),r.error!==false&&e.on("error",d),e.on("close",x),function(){s=true,e.removeListener("complete",l),e.removeListener("abort",x),e.removeListener("request",p),e.req&&e.req.removeListener("finish",l),e.removeListener("end",u),e.removeListener("close",u),e.removeListener("finish",l),e.removeListener("exit",c),e.removeListener("end",a),e.removeListener("error",d),e.removeListener("close",x);}};et.exports=kr;});var it=E(($n,nt)=>{var dn=rr(),hn=rt(),tr=require$$0$4,fe=function(){},pn=/^v?\.0/.test(process.version),Ae=function(e){return typeof e=="function"},mn=function(e){return !pn||!tr?false:(e instanceof(tr.ReadStream||fe)||e instanceof(tr.WriteStream||fe))&&Ae(e.close)},xn=function(e){return e.setHeader&&Ae(e.abort)},vn=function(e,r,t,n){n=dn(n);var i=false;e.on("close",function(){i=true;}),hn(e,{readable:r,writable:t},function(f){if(f)return n(f);i=true,n();});var o=false;return function(f){if(!i&&!o){if(o=true,mn(e))return e.close(fe);if(xn(e))return e.abort();if(Ae(e.destroy))return e.destroy();n(f||new Error("stream was destroyed"));}}},tt=function(e){e();},En=function(e,r){return e.pipe(r)},wn=function(){var e=Array.prototype.slice.call(arguments),r=Ae(e[e.length-1]||fe)&&e.pop()||fe;if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new Error("pump requires two streams per minimum");var t,n=e.map(function(i,o){var f=o<e.length-1,s=o>0;return vn(i,f,s,function(u){t||(t=u),u&&n.forEach(tt),!f&&(n.forEach(tt),r(t));})});return e.reduce(En)};nt.exports=wn;});var ft=E((jn,ot)=>{var{PassThrough:gn}=require$$12;ot.exports=e=>{e={...e};let{array:r}=e,{encoding:t}=e,n=t==="buffer",i=false;r?i=!(t||n):t=t||"utf8",n&&(t=null);let o=new gn({objectMode:i});t&&o.setEncoding(t);let f=0,s=[];return o.on("data",u=>{s.push(u),i?f=s.length:f+=u.length;}),o.getBufferedValue=()=>r?s:n?Buffer.concat(s,f):s.join(""),o.getBufferedLength=()=>f,o};});var st=E((Kn,J)=>{var{constants:yn}=require$$14,Cn=it(),bn=ft(),Re=class extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError";}};async function De(e,r){if(!e)return Promise.reject(new Error("Expected a stream"));r={maxBuffer:1/0,...r};let{maxBuffer:t}=r,n;return await new Promise((i,o)=>{let f=s=>{s&&n.getBufferedLength()<=yn.MAX_LENGTH&&(s.bufferedData=n.getBufferedValue()),o(s);};n=Cn(e,bn(r),s=>{if(s){f(s);return}i();}),n.on("data",()=>{n.getBufferedLength()>t&&f(new Re);});}),n.getBufferedValue()}J.exports=De;J.exports.default=De;J.exports.buffer=(e,r)=>De(e,{...r,encoding:"buffer"});J.exports.array=(e,r)=>De(e,{...r,array:true});J.exports.MaxBufferError=Re;});var ut=E((Vn,at)=>{var z=jr()("extract-zip"),{createWriteStream:Fn,promises:Q}=require$$0$4,Sn=st(),G=require$$1$1,{promisify:ir}=require$$1,In=require$$12,Ln=Xe(),On=ir(Ln.open),zn=ir(In.pipeline),nr=class{constructor(r,t){this.zipPath=r,this.opts=t;}async extract(){return z("opening",this.zipPath,"with opts",this.opts),this.zipfile=await On(this.zipPath,{lazyEntries:true}),this.canceled=false,new Promise((r,t)=>{this.zipfile.on("error",n=>{this.canceled=true,t(n);}),this.zipfile.readEntry(),this.zipfile.on("close",()=>{this.canceled||(z("zip extraction complete"),r());}),this.zipfile.on("entry",async n=>{if(this.canceled){z("skipping entry",n.fileName,{cancelled:this.canceled});return}if(z("zipfile entry",n.fileName),n.fileName.startsWith("__MACOSX/")){this.zipfile.readEntry();return}let i=G.dirname(G.join(this.opts.dir,n.fileName));try{await Q.mkdir(i,{recursive:!0});let o=await Q.realpath(i);if(G.relative(this.opts.dir,o).split(G.sep).includes(".."))throw new Error(`Out of bound path "${o}" found while processing file ${n.fileName}`);await this.extractEntry(n),z("finished processing",n.fileName),this.zipfile.readEntry();}catch(o){this.canceled=true,this.zipfile.close(),t(o);}});})}async extractEntry(r){if(this.canceled){z("skipping entry extraction",r.fileName,{cancelled:this.canceled});return}this.opts.onEntry&&this.opts.onEntry(r,this.zipfile);let t=G.join(this.opts.dir,r.fileName),n=r.externalFileAttributes>>16&65535,i=61440,o=16384,s=(n&i)===40960,u=(n&i)===o;!u&&r.fileName.endsWith("/")&&(u=true);let l=r.versionMadeBy>>8;u||(u=l===0&&r.externalFileAttributes===16),z("extracting entry",{filename:r.fileName,isDir:u,isSymlink:s});let a=this.getExtractedMode(n,u)&511,c=u?t:G.dirname(t),d={recursive:true};if(u&&(d.mode=a),z("mkdir",{dir:c,...d}),await Q.mkdir(c,d),u)return;z("opening read stream",t);let x=await ir(this.zipfile.openReadStream.bind(this.zipfile))(r);if(s){let y=await Sn(x);z("creating symlink",y,t),await Q.symlink(y,t);}else await zn(x,Fn(t,{mode:a}));}getExtractedMode(r,t){let n=r;return n===0&&(t?(this.opts.defaultDirMode&&(n=parseInt(this.opts.defaultDirMode,10)),n||(n=493)):(this.opts.defaultFileMode&&(n=parseInt(this.opts.defaultFileMode,10)),n||(n=420))),n}};at.exports=async function(e,r){if(z("creating target directory",r.dir),!G.isAbsolute(r.dir))throw new Error("Target directory is expected to be absolute");return await Q.mkdir(r.dir,{recursive:true}),r.dir=await Q.realpath(r.dir),new nr(e,r).extract()};});var An={};wt(An,{extract:()=>_n,yauzl:()=>dt,yazl:()=>lt});zipBundleImpl=gt(An);var lt=Te(br()),dt=Te(Xe()),ct=Te(ut()),_n=ct.default;	return zipBundleImpl;
}

var zipBundle;
var hasRequiredZipBundle;

function requireZipBundle () {
	if (hasRequiredZipBundle) return zipBundle;
	hasRequiredZipBundle = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var zipBundle_exports = {};
	__export(zipBundle_exports, {
	  extract: () => extract,
	  yauzl: () => yauzl,
	  yazl: () => yazl
	});
	zipBundle = __toCommonJS(zipBundle_exports);
	const yazl = requireZipBundleImpl().yazl;
	const yauzl = requireZipBundleImpl().yauzl;
	const extract = requireZipBundleImpl().extract;
	return zipBundle;
}

var fileUtils$1;
var hasRequiredFileUtils$1;

function requireFileUtils$1 () {
	if (hasRequiredFileUtils$1) return fileUtils$1;
	hasRequiredFileUtils$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var fileUtils_exports = {};
	__export(fileUtils_exports, {
	  SerializedFS: () => SerializedFS,
	  canAccessFile: () => canAccessFile,
	  copyFileAndMakeWritable: () => copyFileAndMakeWritable,
	  existsAsync: () => existsAsync,
	  mkdirIfNeeded: () => mkdirIfNeeded,
	  removeFolders: () => removeFolders,
	  sanitizeForFilePath: () => sanitizeForFilePath,
	  toPosixPath: () => toPosixPath
	});
	fileUtils$1 = __toCommonJS(fileUtils_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_manualPromise = requireManualPromise();
	var import_zipBundle = requireZipBundle();
	const existsAsync = (path2) => new Promise((resolve) => import_fs.default.stat(path2, (err) => resolve(!err)));
	async function mkdirIfNeeded(filePath) {
	  await import_fs.default.promises.mkdir(import_path.default.dirname(filePath), { recursive: true }).catch(() => {
	  });
	}
	async function removeFolders(dirs) {
	  return await Promise.all(dirs.map(
	    (dir) => import_fs.default.promises.rm(dir, { recursive: true, force: true, maxRetries: 10 }).catch((e) => e)
	  ));
	}
	function canAccessFile(file) {
	  if (!file)
	    return false;
	  try {
	    import_fs.default.accessSync(file);
	    return true;
	  } catch (e) {
	    return false;
	  }
	}
	async function copyFileAndMakeWritable(from, to) {
	  await import_fs.default.promises.copyFile(from, to);
	  await import_fs.default.promises.chmod(to, 436);
	}
	function sanitizeForFilePath(s) {
	  return s.replace(/[\x00-\x2C\x2E-\x2F\x3A-\x40\x5B-\x60\x7B-\x7F]+/g, "-");
	}
	function toPosixPath(aPath) {
	  return aPath.split(import_path.default.sep).join(import_path.default.posix.sep);
	}
	class SerializedFS {
	  constructor() {
	    this._buffers = /* @__PURE__ */ new Map();
	    this._operations = [];
	    this._operationsDone = new import_manualPromise.ManualPromise();
	    this._operationsDone.resolve();
	  }
	  mkdir(dir) {
	    this._appendOperation({ op: "mkdir", dir });
	  }
	  writeFile(file, content, skipIfExists) {
	    this._buffers.delete(file);
	    this._appendOperation({ op: "writeFile", file, content, skipIfExists });
	  }
	  appendFile(file, text, flush) {
	    if (!this._buffers.has(file))
	      this._buffers.set(file, []);
	    this._buffers.get(file).push(text);
	    if (flush)
	      this._flushFile(file);
	  }
	  _flushFile(file) {
	    const buffer = this._buffers.get(file);
	    if (buffer === void 0)
	      return;
	    const content = buffer.join("");
	    this._buffers.delete(file);
	    this._appendOperation({ op: "appendFile", file, content });
	  }
	  copyFile(from, to) {
	    this._flushFile(from);
	    this._buffers.delete(to);
	    this._appendOperation({ op: "copyFile", from, to });
	  }
	  async syncAndGetError() {
	    for (const file of this._buffers.keys())
	      this._flushFile(file);
	    await this._operationsDone;
	    return this._error;
	  }
	  zip(entries, zipFileName) {
	    for (const file of this._buffers.keys())
	      this._flushFile(file);
	    this._appendOperation({ op: "zip", entries, zipFileName });
	  }
	  // This method serializes all writes to the trace.
	  _appendOperation(op) {
	    const last = this._operations[this._operations.length - 1];
	    if (last?.op === "appendFile" && op.op === "appendFile" && last.file === op.file) {
	      last.content += op.content;
	      return;
	    }
	    this._operations.push(op);
	    if (this._operationsDone.isDone())
	      this._performOperations();
	  }
	  async _performOperations() {
	    this._operationsDone = new import_manualPromise.ManualPromise();
	    while (this._operations.length) {
	      const op = this._operations.shift();
	      if (this._error)
	        continue;
	      try {
	        await this._performOperation(op);
	      } catch (e) {
	        this._error = e;
	      }
	    }
	    this._operationsDone.resolve();
	  }
	  async _performOperation(op) {
	    switch (op.op) {
	      case "mkdir": {
	        await import_fs.default.promises.mkdir(op.dir, { recursive: true });
	        return;
	      }
	      case "writeFile": {
	        if (op.skipIfExists)
	          await import_fs.default.promises.writeFile(op.file, op.content, { flag: "wx" }).catch(() => {
	          });
	        else
	          await import_fs.default.promises.writeFile(op.file, op.content);
	        return;
	      }
	      case "copyFile": {
	        await import_fs.default.promises.copyFile(op.from, op.to);
	        return;
	      }
	      case "appendFile": {
	        await import_fs.default.promises.appendFile(op.file, op.content);
	        return;
	      }
	      case "zip": {
	        const zipFile = new import_zipBundle.yazl.ZipFile();
	        const result = new import_manualPromise.ManualPromise();
	        zipFile.on("error", (error) => result.reject(error));
	        for (const entry of op.entries)
	          zipFile.addFile(entry.value, entry.name);
	        zipFile.end();
	        zipFile.outputStream.pipe(import_fs.default.createWriteStream(op.zipFileName)).on("close", () => result.resolve()).on("error", (error) => result.reject(error));
	        await result;
	        return;
	      }
	    }
	  }
	}
	return fileUtils$1;
}

var browserFetcher;
var hasRequiredBrowserFetcher;

function requireBrowserFetcher () {
	if (hasRequiredBrowserFetcher) return browserFetcher;
	hasRequiredBrowserFetcher = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserFetcher_exports = {};
	__export(browserFetcher_exports, {
	  downloadBrowserWithProgressBar: () => downloadBrowserWithProgressBar,
	  logPolitely: () => logPolitely
	});
	browserFetcher = __toCommonJS(browserFetcher_exports);
	var childProcess = __toESM(require$$0$3);
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_debugLogger = requireDebugLogger();
	var import_manualPromise = requireManualPromise();
	var import_userAgent = requireUserAgent();
	var import_utilsBundle = requireUtilsBundle();
	var import_fileUtils = requireFileUtils$1();
	var import__ = requireRegistry();
	async function downloadBrowserWithProgressBar(title, browserDirectory, executablePath, downloadURLs, downloadFileName, downloadSocketTimeout) {
	  if (await (0, import_fileUtils.existsAsync)((0, import__.browserDirectoryToMarkerFilePath)(browserDirectory))) {
	    import_debugLogger.debugLogger.log("install", `${title} is already downloaded.`);
	    return false;
	  }
	  const zipPath = import_path.default.join(import_os.default.tmpdir(), downloadFileName);
	  try {
	    const retryCount = 5;
	    for (let attempt = 1; attempt <= retryCount; ++attempt) {
	      import_debugLogger.debugLogger.log("install", `downloading ${title} - attempt #${attempt}`);
	      const url = downloadURLs[(attempt - 1) % downloadURLs.length];
	      logPolitely(`Downloading ${title}` + import_utilsBundle.colors.dim(` from ${url}`));
	      const { error } = await downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, downloadSocketTimeout);
	      if (!error) {
	        import_debugLogger.debugLogger.log("install", `SUCCESS installing ${title}`);
	        break;
	      }
	      if (await (0, import_fileUtils.existsAsync)(zipPath))
	        await import_fs.default.promises.unlink(zipPath);
	      if (await (0, import_fileUtils.existsAsync)(browserDirectory))
	        await import_fs.default.promises.rmdir(browserDirectory, { recursive: true });
	      const errorMessage = error?.message || "";
	      import_debugLogger.debugLogger.log("install", `attempt #${attempt} - ERROR: ${errorMessage}`);
	      if (attempt >= retryCount)
	        throw error;
	    }
	  } catch (e) {
	    import_debugLogger.debugLogger.log("install", `FAILED installation ${title} with error: ${e}`);
	    process.exitCode = 1;
	    throw e;
	  } finally {
	    if (await (0, import_fileUtils.existsAsync)(zipPath))
	      await import_fs.default.promises.unlink(zipPath);
	  }
	  logPolitely(`${title} downloaded to ${browserDirectory}`);
	  return true;
	}
	function downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, socketTimeout) {
	  const cp = childProcess.fork(import_path.default.join(__dirname, "oopDownloadBrowserMain.js"));
	  const promise = new import_manualPromise.ManualPromise();
	  const progress = getDownloadProgress();
	  cp.on("message", (message) => {
	    if (message?.method === "log")
	      import_debugLogger.debugLogger.log("install", message.params.message);
	    if (message?.method === "progress")
	      progress(message.params.done, message.params.total);
	  });
	  cp.on("exit", (code) => {
	    if (code !== 0) {
	      promise.resolve({ error: new Error(`Download failure, code=${code}`) });
	      return;
	    }
	    if (!import_fs.default.existsSync((0, import__.browserDirectoryToMarkerFilePath)(browserDirectory)))
	      promise.resolve({ error: new Error(`Download failure, ${(0, import__.browserDirectoryToMarkerFilePath)(browserDirectory)} does not exist`) });
	    else
	      promise.resolve({ error: null });
	  });
	  cp.on("error", (error) => {
	    promise.resolve({ error });
	  });
	  import_debugLogger.debugLogger.log("install", `running download:`);
	  import_debugLogger.debugLogger.log("install", `-- from url: ${url}`);
	  import_debugLogger.debugLogger.log("install", `-- to location: ${zipPath}`);
	  const downloadParams = {
	    title,
	    browserDirectory,
	    url,
	    zipPath,
	    executablePath,
	    socketTimeout,
	    userAgent: (0, import_userAgent.getUserAgent)()
	  };
	  cp.send({ method: "download", params: downloadParams });
	  return promise;
	}
	function logPolitely(toBeLogged) {
	  const logLevel = process.env.npm_config_loglevel;
	  const logLevelDisplay = ["silent", "error", "warn"].indexOf(logLevel || "") > -1;
	  if (!logLevelDisplay)
	    console.log(toBeLogged);
	}
	function getDownloadProgress() {
	  if (process.stdout.isTTY)
	    return getAnimatedDownloadProgress();
	  return getBasicDownloadProgress();
	}
	function getAnimatedDownloadProgress() {
	  let progressBar;
	  let lastDownloadedBytes = 0;
	  return (downloadedBytes, totalBytes) => {
	    if (!progressBar) {
	      progressBar = new import_utilsBundle.progress(
	        `${toMegabytes(
	          totalBytes
	        )} [:bar] :percent :etas`,
	        {
	          complete: "=",
	          incomplete: " ",
	          width: 20,
	          total: totalBytes
	        }
	      );
	    }
	    const delta = downloadedBytes - lastDownloadedBytes;
	    lastDownloadedBytes = downloadedBytes;
	    progressBar.tick(delta);
	  };
	}
	function getBasicDownloadProgress() {
	  const totalRows = 10;
	  const stepWidth = 8;
	  let lastRow = -1;
	  return (downloadedBytes, totalBytes) => {
	    const percentage = downloadedBytes / totalBytes;
	    const row = Math.floor(totalRows * percentage);
	    if (row > lastRow) {
	      lastRow = row;
	      const percentageString = String(percentage * 100 | 0).padStart(3);
	      console.log(`|${"\u25A0".repeat(row * stepWidth)}${" ".repeat((totalRows - row) * stepWidth)}| ${percentageString}% of ${toMegabytes(totalBytes)}`);
	    }
	  };
	}
	function toMegabytes(bytes) {
	  const mb = bytes / 1024 / 1024;
	  return `${Math.round(mb * 10) / 10} MiB`;
	}
	return browserFetcher;
}

var nativeDeps;
var hasRequiredNativeDeps;

function requireNativeDeps () {
	if (hasRequiredNativeDeps) return nativeDeps;
	hasRequiredNativeDeps = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var nativeDeps_exports = {};
	__export(nativeDeps_exports, {
	  deps: () => deps
	});
	nativeDeps = __toCommonJS(nativeDeps_exports);
	const deps = {
	  "ubuntu20.04-x64": {
	    tools: [
	      "xvfb",
	      "fonts-noto-color-emoji",
	      "ttf-unifont",
	      "libfontconfig",
	      "libfreetype6",
	      "xfonts-cyrillic",
	      "xfonts-scalable",
	      "fonts-liberation",
	      "fonts-ipafont-gothic",
	      "fonts-wqy-zenhei",
	      "fonts-tlwg-loma-otf",
	      "ttf-ubuntu-font-family"
	    ],
	    chromium: [
	      "fonts-liberation",
	      "libasound2",
	      "libatk-bridge2.0-0",
	      "libatk1.0-0",
	      "libatspi2.0-0",
	      "libcairo2",
	      "libcups2",
	      "libdbus-1-3",
	      "libdrm2",
	      "libegl1",
	      "libgbm1",
	      "libglib2.0-0",
	      "libgtk-3-0",
	      "libnspr4",
	      "libnss3",
	      "libpango-1.0-0",
	      "libx11-6",
	      "libx11-xcb1",
	      "libxcb1",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxrandr2",
	      "libxshmfence1"
	    ],
	    firefox: [
	      "ffmpeg",
	      "libatk1.0-0",
	      "libcairo-gobject2",
	      "libcairo2",
	      "libdbus-1-3",
	      "libdbus-glib-1-2",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgdk-pixbuf2.0-0",
	      "libglib2.0-0",
	      "libgtk-3-0",
	      "libpango-1.0-0",
	      "libpangocairo-1.0-0",
	      "libpangoft2-1.0-0",
	      "libx11-6",
	      "libx11-xcb1",
	      "libxcb-shm0",
	      "libxcb1",
	      "libxcomposite1",
	      "libxcursor1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxi6",
	      "libxrender1",
	      "libxt6",
	      "libxtst6"
	    ],
	    webkit: [
	      "libenchant-2-2",
	      "libflite1",
	      "libx264-155",
	      "libatk-bridge2.0-0",
	      "libatk1.0-0",
	      "libcairo2",
	      "libegl1",
	      "libenchant1c2a",
	      "libepoxy0",
	      "libevdev2",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgdk-pixbuf2.0-0",
	      "libgl1",
	      "libgles2",
	      "libglib2.0-0",
	      "libgtk-3-0",
	      "libgudev-1.0-0",
	      "libharfbuzz-icu0",
	      "libharfbuzz0b",
	      "libhyphen0",
	      "libicu66",
	      "libjpeg-turbo8",
	      "libnghttp2-14",
	      "libnotify4",
	      "libopengl0",
	      "libopenjp2-7",
	      "libopus0",
	      "libpango-1.0-0",
	      "libpng16-16",
	      "libsecret-1-0",
	      "libvpx6",
	      "libwayland-client0",
	      "libwayland-egl1",
	      "libwayland-server0",
	      "libwebp6",
	      "libwebpdemux2",
	      "libwoff1",
	      "libx11-6",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxkbcommon0",
	      "libxml2",
	      "libxslt1.1",
	      "libatomic1",
	      "libevent-2.1-7"
	    ],
	    lib2package: {
	      "libflite.so.1": "libflite1",
	      "libflite_usenglish.so.1": "libflite1",
	      "libflite_cmu_grapheme_lang.so.1": "libflite1",
	      "libflite_cmu_grapheme_lex.so.1": "libflite1",
	      "libflite_cmu_indic_lang.so.1": "libflite1",
	      "libflite_cmu_indic_lex.so.1": "libflite1",
	      "libflite_cmulex.so.1": "libflite1",
	      "libflite_cmu_time_awb.so.1": "libflite1",
	      "libflite_cmu_us_awb.so.1": "libflite1",
	      "libflite_cmu_us_kal16.so.1": "libflite1",
	      "libflite_cmu_us_kal.so.1": "libflite1",
	      "libflite_cmu_us_rms.so.1": "libflite1",
	      "libflite_cmu_us_slt.so.1": "libflite1",
	      "libx264.so": "libx264-155",
	      "libasound.so.2": "libasound2",
	      "libatk-1.0.so.0": "libatk1.0-0",
	      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
	      "libatspi.so.0": "libatspi2.0-0",
	      "libcairo-gobject.so.2": "libcairo-gobject2",
	      "libcairo.so.2": "libcairo2",
	      "libcups.so.2": "libcups2",
	      "libdbus-1.so.3": "libdbus-1-3",
	      "libdbus-glib-1.so.2": "libdbus-glib-1-2",
	      "libdrm.so.2": "libdrm2",
	      "libEGL.so.1": "libegl1",
	      "libenchant.so.1": "libenchant1c2a",
	      "libevdev.so.2": "libevdev2",
	      "libepoxy.so.0": "libepoxy0",
	      "libfontconfig.so.1": "libfontconfig1",
	      "libfreetype.so.6": "libfreetype6",
	      "libgbm.so.1": "libgbm1",
	      "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf2.0-0",
	      "libgdk-3.so.0": "libgtk-3-0",
	      "libgdk-x11-2.0.so.0": "libgtk2.0-0",
	      "libgio-2.0.so.0": "libglib2.0-0",
	      "libGL.so.1": "libgl1",
	      "libGLESv2.so.2": "libgles2",
	      "libglib-2.0.so.0": "libglib2.0-0",
	      "libgmodule-2.0.so.0": "libglib2.0-0",
	      "libgobject-2.0.so.0": "libglib2.0-0",
	      "libgthread-2.0.so.0": "libglib2.0-0",
	      "libgtk-3.so.0": "libgtk-3-0",
	      "libgtk-x11-2.0.so.0": "libgtk2.0-0",
	      "libgudev-1.0.so.0": "libgudev-1.0-0",
	      "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
	      "libharfbuzz.so.0": "libharfbuzz0b",
	      "libhyphen.so.0": "libhyphen0",
	      "libicui18n.so.66": "libicu66",
	      "libicuuc.so.66": "libicu66",
	      "libjpeg.so.8": "libjpeg-turbo8",
	      "libnotify.so.4": "libnotify4",
	      "libnspr4.so": "libnspr4",
	      "libnss3.so": "libnss3",
	      "libnssutil3.so": "libnss3",
	      "libOpenGL.so.0": "libopengl0",
	      "libopenjp2.so.7": "libopenjp2-7",
	      "libopus.so.0": "libopus0",
	      "libpango-1.0.so.0": "libpango-1.0-0",
	      "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
	      "libpangoft2-1.0.so.0": "libpangoft2-1.0-0",
	      "libpng16.so.16": "libpng16-16",
	      "libsecret-1.so.0": "libsecret-1-0",
	      "libsmime3.so": "libnss3",
	      "libvpx.so.6": "libvpx6",
	      "libwayland-client.so.0": "libwayland-client0",
	      "libwayland-egl.so.1": "libwayland-egl1",
	      "libwayland-server.so.0": "libwayland-server0",
	      "libwebp.so.6": "libwebp6",
	      "libwebpdemux.so.2": "libwebpdemux2",
	      "libwoff2dec.so.1.0.2": "libwoff1",
	      "libX11-xcb.so.1": "libx11-xcb1",
	      "libX11.so.6": "libx11-6",
	      "libxcb-dri3.so.0": "libxcb-dri3-0",
	      "libxcb-shm.so.0": "libxcb-shm0",
	      "libxcb.so.1": "libxcb1",
	      "libXcomposite.so.1": "libxcomposite1",
	      "libXcursor.so.1": "libxcursor1",
	      "libXdamage.so.1": "libxdamage1",
	      "libXext.so.6": "libxext6",
	      "libXfixes.so.3": "libxfixes3",
	      "libXi.so.6": "libxi6",
	      "libxkbcommon.so.0": "libxkbcommon0",
	      "libxml2.so.2": "libxml2",
	      "libXrandr.so.2": "libxrandr2",
	      "libXrender.so.1": "libxrender1",
	      "libxslt.so.1": "libxslt1.1",
	      "libXt.so.6": "libxt6",
	      "libXtst.so.6": "libxtst6",
	      "libxshmfence.so.1": "libxshmfence1",
	      "libatomic.so.1": "libatomic1",
	      "libenchant-2.so.2": "libenchant-2-2",
	      "libevent-2.1.so.7": "libevent-2.1-7"
	    }
	  },
	  "ubuntu22.04-x64": {
	    tools: [
	      "xvfb",
	      "fonts-noto-color-emoji",
	      "fonts-unifont",
	      "libfontconfig1",
	      "libfreetype6",
	      "xfonts-cyrillic",
	      "xfonts-scalable",
	      "fonts-liberation",
	      "fonts-ipafont-gothic",
	      "fonts-wqy-zenhei",
	      "fonts-tlwg-loma-otf",
	      "fonts-freefont-ttf"
	    ],
	    chromium: [
	      "libasound2",
	      "libatk-bridge2.0-0",
	      "libatk1.0-0",
	      "libatspi2.0-0",
	      "libcairo2",
	      "libcups2",
	      "libdbus-1-3",
	      "libdrm2",
	      "libgbm1",
	      "libglib2.0-0",
	      "libnspr4",
	      "libnss3",
	      "libpango-1.0-0",
	      "libwayland-client0",
	      "libx11-6",
	      "libxcb1",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxkbcommon0",
	      "libxrandr2"
	    ],
	    firefox: [
	      "ffmpeg",
	      "libasound2",
	      "libatk1.0-0",
	      "libcairo-gobject2",
	      "libcairo2",
	      "libdbus-1-3",
	      "libdbus-glib-1-2",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgdk-pixbuf-2.0-0",
	      "libglib2.0-0",
	      "libgtk-3-0",
	      "libpango-1.0-0",
	      "libpangocairo-1.0-0",
	      "libx11-6",
	      "libx11-xcb1",
	      "libxcb-shm0",
	      "libxcb1",
	      "libxcomposite1",
	      "libxcursor1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxi6",
	      "libxrandr2",
	      "libxrender1",
	      "libxtst6"
	    ],
	    webkit: [
	      "libsoup-3.0-0",
	      "libenchant-2-2",
	      "gstreamer1.0-libav",
	      "gstreamer1.0-plugins-bad",
	      "gstreamer1.0-plugins-base",
	      "gstreamer1.0-plugins-good",
	      "libicu70",
	      "libatk-bridge2.0-0",
	      "libatk1.0-0",
	      "libcairo2",
	      "libdbus-1-3",
	      "libdrm2",
	      "libegl1",
	      "libepoxy0",
	      "libevdev2",
	      "libffi7",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgbm1",
	      "libgdk-pixbuf-2.0-0",
	      "libgles2",
	      "libglib2.0-0",
	      "libglx0",
	      "libgstreamer-gl1.0-0",
	      "libgstreamer-plugins-base1.0-0",
	      "libgstreamer1.0-0",
	      "libgtk-4-1",
	      "libgudev-1.0-0",
	      "libharfbuzz-icu0",
	      "libharfbuzz0b",
	      "libhyphen0",
	      "libjpeg-turbo8",
	      "liblcms2-2",
	      "libmanette-0.2-0",
	      "libnotify4",
	      "libopengl0",
	      "libopenjp2-7",
	      "libopus0",
	      "libpango-1.0-0",
	      "libpng16-16",
	      "libproxy1v5",
	      "libsecret-1-0",
	      "libwayland-client0",
	      "libwayland-egl1",
	      "libwayland-server0",
	      "libwebpdemux2",
	      "libwoff1",
	      "libx11-6",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxkbcommon0",
	      "libxml2",
	      "libxslt1.1",
	      "libx264-163",
	      "libatomic1",
	      "libevent-2.1-7",
	      "libavif13"
	    ],
	    lib2package: {
	      "libavif.so.13": "libavif13",
	      "libsoup-3.0.so.0": "libsoup-3.0-0",
	      "libasound.so.2": "libasound2",
	      "libatk-1.0.so.0": "libatk1.0-0",
	      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
	      "libatspi.so.0": "libatspi2.0-0",
	      "libcairo-gobject.so.2": "libcairo-gobject2",
	      "libcairo.so.2": "libcairo2",
	      "libcups.so.2": "libcups2",
	      "libdbus-1.so.3": "libdbus-1-3",
	      "libdbus-glib-1.so.2": "libdbus-glib-1-2",
	      "libdrm.so.2": "libdrm2",
	      "libEGL.so.1": "libegl1",
	      "libepoxy.so.0": "libepoxy0",
	      "libevdev.so.2": "libevdev2",
	      "libffi.so.7": "libffi7",
	      "libfontconfig.so.1": "libfontconfig1",
	      "libfreetype.so.6": "libfreetype6",
	      "libgbm.so.1": "libgbm1",
	      "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
	      "libgdk-3.so.0": "libgtk-3-0",
	      "libgio-2.0.so.0": "libglib2.0-0",
	      "libGLESv2.so.2": "libgles2",
	      "libglib-2.0.so.0": "libglib2.0-0",
	      "libGLX.so.0": "libglx0",
	      "libgmodule-2.0.so.0": "libglib2.0-0",
	      "libgobject-2.0.so.0": "libglib2.0-0",
	      "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstbase-1.0.so.0": "libgstreamer1.0-0",
	      "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
	      "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
	      "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgtk-3.so.0": "libgtk-3-0",
	      "libgtk-4.so.1": "libgtk-4-1",
	      "libgudev-1.0.so.0": "libgudev-1.0-0",
	      "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
	      "libharfbuzz.so.0": "libharfbuzz0b",
	      "libhyphen.so.0": "libhyphen0",
	      "libjpeg.so.8": "libjpeg-turbo8",
	      "liblcms2.so.2": "liblcms2-2",
	      "libmanette-0.2.so.0": "libmanette-0.2-0",
	      "libnotify.so.4": "libnotify4",
	      "libnspr4.so": "libnspr4",
	      "libnss3.so": "libnss3",
	      "libnssutil3.so": "libnss3",
	      "libOpenGL.so.0": "libopengl0",
	      "libopenjp2.so.7": "libopenjp2-7",
	      "libopus.so.0": "libopus0",
	      "libpango-1.0.so.0": "libpango-1.0-0",
	      "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
	      "libpng16.so.16": "libpng16-16",
	      "libproxy.so.1": "libproxy1v5",
	      "libsecret-1.so.0": "libsecret-1-0",
	      "libsmime3.so": "libnss3",
	      "libwayland-client.so.0": "libwayland-client0",
	      "libwayland-egl.so.1": "libwayland-egl1",
	      "libwayland-server.so.0": "libwayland-server0",
	      "libwebpdemux.so.2": "libwebpdemux2",
	      "libwoff2dec.so.1.0.2": "libwoff1",
	      "libX11-xcb.so.1": "libx11-xcb1",
	      "libX11.so.6": "libx11-6",
	      "libxcb-shm.so.0": "libxcb-shm0",
	      "libxcb.so.1": "libxcb1",
	      "libXcomposite.so.1": "libxcomposite1",
	      "libXcursor.so.1": "libxcursor1",
	      "libXdamage.so.1": "libxdamage1",
	      "libXext.so.6": "libxext6",
	      "libXfixes.so.3": "libxfixes3",
	      "libXi.so.6": "libxi6",
	      "libxkbcommon.so.0": "libxkbcommon0",
	      "libxml2.so.2": "libxml2",
	      "libXrandr.so.2": "libxrandr2",
	      "libXrender.so.1": "libxrender1",
	      "libxslt.so.1": "libxslt1.1",
	      "libXtst.so.6": "libxtst6",
	      "libicui18n.so.60": "libicu70",
	      "libicuuc.so.66": "libicu70",
	      "libicui18n.so.66": "libicu70",
	      "libwebp.so.6": "libwebp6",
	      "libenchant-2.so.2": "libenchant-2-2",
	      "libx264.so": "libx264-163",
	      "libvpx.so.7": "libvpx7",
	      "libatomic.so.1": "libatomic1",
	      "libevent-2.1.so.7": "libevent-2.1-7"
	    }
	  },
	  "ubuntu24.04-x64": {
	    tools: [
	      "xvfb",
	      "fonts-noto-color-emoji",
	      "fonts-unifont",
	      "libfontconfig1",
	      "libfreetype6",
	      "xfonts-cyrillic",
	      "xfonts-scalable",
	      "fonts-liberation",
	      "fonts-ipafont-gothic",
	      "fonts-wqy-zenhei",
	      "fonts-tlwg-loma-otf",
	      "fonts-freefont-ttf"
	    ],
	    chromium: [
	      "libasound2t64",
	      "libatk-bridge2.0-0t64",
	      "libatk1.0-0t64",
	      "libatspi2.0-0t64",
	      "libcairo2",
	      "libcups2t64",
	      "libdbus-1-3",
	      "libdrm2",
	      "libgbm1",
	      "libglib2.0-0t64",
	      "libnspr4",
	      "libnss3",
	      "libpango-1.0-0",
	      "libx11-6",
	      "libxcb1",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxkbcommon0",
	      "libxrandr2"
	    ],
	    firefox: [
	      "libasound2t64",
	      "libatk1.0-0t64",
	      "libcairo-gobject2",
	      "libcairo2",
	      "libdbus-1-3",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgdk-pixbuf-2.0-0",
	      "libglib2.0-0t64",
	      "libgtk-3-0t64",
	      "libpango-1.0-0",
	      "libpangocairo-1.0-0",
	      "libx11-6",
	      "libx11-xcb1",
	      "libxcb-shm0",
	      "libxcb1",
	      "libxcomposite1",
	      "libxcursor1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxi6",
	      "libxrandr2",
	      "libxrender1"
	    ],
	    webkit: [
	      "gstreamer1.0-libav",
	      "gstreamer1.0-plugins-bad",
	      "gstreamer1.0-plugins-base",
	      "gstreamer1.0-plugins-good",
	      "libicu74",
	      "libatomic1",
	      "libatk-bridge2.0-0t64",
	      "libatk1.0-0t64",
	      "libcairo-gobject2",
	      "libcairo2",
	      "libdbus-1-3",
	      "libdrm2",
	      "libenchant-2-2",
	      "libepoxy0",
	      "libevent-2.1-7t64",
	      "libflite1",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgbm1",
	      "libgdk-pixbuf-2.0-0",
	      "libgles2",
	      "libglib2.0-0t64",
	      "libgstreamer-gl1.0-0",
	      "libgstreamer-plugins-bad1.0-0",
	      "libgstreamer-plugins-base1.0-0",
	      "libgstreamer1.0-0",
	      "libgtk-4-1",
	      "libharfbuzz-icu0",
	      "libharfbuzz0b",
	      "libhyphen0",
	      "libicu74",
	      "libjpeg-turbo8",
	      "liblcms2-2",
	      "libmanette-0.2-0",
	      "libopus0",
	      "libpango-1.0-0",
	      "libpangocairo-1.0-0",
	      "libpng16-16t64",
	      "libsecret-1-0",
	      "libvpx9",
	      "libwayland-client0",
	      "libwayland-egl1",
	      "libwayland-server0",
	      "libwebp7",
	      "libwebpdemux2",
	      "libwoff1",
	      "libx11-6",
	      "libxkbcommon0",
	      "libxml2",
	      "libxslt1.1",
	      "libx264-164",
	      "libavif16"
	    ],
	    lib2package: {
	      "libavif.so.16": "libavif16",
	      "libasound.so.2": "libasound2t64",
	      "libatk-1.0.so.0": "libatk1.0-0t64",
	      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0t64",
	      "libatomic.so.1": "libatomic1",
	      "libatspi.so.0": "libatspi2.0-0t64",
	      "libcairo-gobject.so.2": "libcairo-gobject2",
	      "libcairo.so.2": "libcairo2",
	      "libcups.so.2": "libcups2t64",
	      "libdbus-1.so.3": "libdbus-1-3",
	      "libdrm.so.2": "libdrm2",
	      "libenchant-2.so.2": "libenchant-2-2",
	      "libepoxy.so.0": "libepoxy0",
	      "libevent-2.1.so.7": "libevent-2.1-7t64",
	      "libflite_cmu_grapheme_lang.so.1": "libflite1",
	      "libflite_cmu_grapheme_lex.so.1": "libflite1",
	      "libflite_cmu_indic_lang.so.1": "libflite1",
	      "libflite_cmu_indic_lex.so.1": "libflite1",
	      "libflite_cmu_time_awb.so.1": "libflite1",
	      "libflite_cmu_us_awb.so.1": "libflite1",
	      "libflite_cmu_us_kal.so.1": "libflite1",
	      "libflite_cmu_us_kal16.so.1": "libflite1",
	      "libflite_cmu_us_rms.so.1": "libflite1",
	      "libflite_cmu_us_slt.so.1": "libflite1",
	      "libflite_cmulex.so.1": "libflite1",
	      "libflite_usenglish.so.1": "libflite1",
	      "libflite.so.1": "libflite1",
	      "libfontconfig.so.1": "libfontconfig1",
	      "libfreetype.so.6": "libfreetype6",
	      "libgbm.so.1": "libgbm1",
	      "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
	      "libgdk-3.so.0": "libgtk-3-0t64",
	      "libgio-2.0.so.0": "libglib2.0-0t64",
	      "libGLESv2.so.2": "libgles2",
	      "libglib-2.0.so.0": "libglib2.0-0t64",
	      "libgmodule-2.0.so.0": "libglib2.0-0t64",
	      "libgobject-2.0.so.0": "libglib2.0-0t64",
	      "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstbase-1.0.so.0": "libgstreamer1.0-0",
	      "libgstcodecparsers-1.0.so.0": "libgstreamer-plugins-bad1.0-0",
	      "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
	      "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
	      "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgtk-3.so.0": "libgtk-3-0t64",
	      "libgtk-4.so.1": "libgtk-4-1",
	      "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
	      "libharfbuzz.so.0": "libharfbuzz0b",
	      "libhyphen.so.0": "libhyphen0",
	      "libicudata.so.74": "libicu74",
	      "libicui18n.so.74": "libicu74",
	      "libicuuc.so.74": "libicu74",
	      "libjpeg.so.8": "libjpeg-turbo8",
	      "liblcms2.so.2": "liblcms2-2",
	      "libmanette-0.2.so.0": "libmanette-0.2-0",
	      "libnspr4.so": "libnspr4",
	      "libnss3.so": "libnss3",
	      "libnssutil3.so": "libnss3",
	      "libopus.so.0": "libopus0",
	      "libpango-1.0.so.0": "libpango-1.0-0",
	      "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
	      "libpng16.so.16": "libpng16-16t64",
	      "libsecret-1.so.0": "libsecret-1-0",
	      "libsmime3.so": "libnss3",
	      "libsoup-3.0.so.0": "libsoup-3.0-0",
	      "libvpx.so.9": "libvpx9",
	      "libwayland-client.so.0": "libwayland-client0",
	      "libwayland-egl.so.1": "libwayland-egl1",
	      "libwayland-server.so.0": "libwayland-server0",
	      "libwebp.so.7": "libwebp7",
	      "libwebpdemux.so.2": "libwebpdemux2",
	      "libwoff2dec.so.1.0.2": "libwoff1",
	      "libX11-xcb.so.1": "libx11-xcb1",
	      "libX11.so.6": "libx11-6",
	      "libxcb-shm.so.0": "libxcb-shm0",
	      "libxcb.so.1": "libxcb1",
	      "libXcomposite.so.1": "libxcomposite1",
	      "libXcursor.so.1": "libxcursor1",
	      "libXdamage.so.1": "libxdamage1",
	      "libXext.so.6": "libxext6",
	      "libXfixes.so.3": "libxfixes3",
	      "libXi.so.6": "libxi6",
	      "libxkbcommon.so.0": "libxkbcommon0",
	      "libxml2.so.2": "libxml2",
	      "libXrandr.so.2": "libxrandr2",
	      "libXrender.so.1": "libxrender1",
	      "libxslt.so.1": "libxslt1.1",
	      "libx264.so": "libx264-164"
	    }
	  },
	  "debian11-x64": {
	    tools: [
	      "xvfb",
	      "fonts-noto-color-emoji",
	      "fonts-unifont",
	      "libfontconfig1",
	      "libfreetype6",
	      "xfonts-cyrillic",
	      "xfonts-scalable",
	      "fonts-liberation",
	      "fonts-ipafont-gothic",
	      "fonts-wqy-zenhei",
	      "fonts-tlwg-loma-otf",
	      "fonts-freefont-ttf"
	    ],
	    chromium: [
	      "libasound2",
	      "libatk-bridge2.0-0",
	      "libatk1.0-0",
	      "libatspi2.0-0",
	      "libcairo2",
	      "libcups2",
	      "libdbus-1-3",
	      "libdrm2",
	      "libgbm1",
	      "libglib2.0-0",
	      "libnspr4",
	      "libnss3",
	      "libpango-1.0-0",
	      "libwayland-client0",
	      "libx11-6",
	      "libxcb1",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxkbcommon0",
	      "libxrandr2"
	    ],
	    firefox: [
	      "libasound2",
	      "libatk1.0-0",
	      "libcairo-gobject2",
	      "libcairo2",
	      "libdbus-1-3",
	      "libdbus-glib-1-2",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgdk-pixbuf-2.0-0",
	      "libglib2.0-0",
	      "libgtk-3-0",
	      "libharfbuzz0b",
	      "libpango-1.0-0",
	      "libpangocairo-1.0-0",
	      "libx11-6",
	      "libx11-xcb1",
	      "libxcb-shm0",
	      "libxcb1",
	      "libxcomposite1",
	      "libxcursor1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxi6",
	      "libxrandr2",
	      "libxrender1",
	      "libxtst6"
	    ],
	    webkit: [
	      "gstreamer1.0-libav",
	      "gstreamer1.0-plugins-bad",
	      "gstreamer1.0-plugins-base",
	      "gstreamer1.0-plugins-good",
	      "libatk-bridge2.0-0",
	      "libatk1.0-0",
	      "libcairo2",
	      "libdbus-1-3",
	      "libdrm2",
	      "libegl1",
	      "libenchant-2-2",
	      "libepoxy0",
	      "libevdev2",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgbm1",
	      "libgdk-pixbuf-2.0-0",
	      "libgles2",
	      "libglib2.0-0",
	      "libglx0",
	      "libgstreamer-gl1.0-0",
	      "libgstreamer-plugins-base1.0-0",
	      "libgstreamer1.0-0",
	      "libgtk-3-0",
	      "libgudev-1.0-0",
	      "libharfbuzz-icu0",
	      "libharfbuzz0b",
	      "libhyphen0",
	      "libicu67",
	      "libjpeg62-turbo",
	      "liblcms2-2",
	      "libmanette-0.2-0",
	      "libnghttp2-14",
	      "libnotify4",
	      "libopengl0",
	      "libopenjp2-7",
	      "libopus0",
	      "libpango-1.0-0",
	      "libpng16-16",
	      "libproxy1v5",
	      "libsecret-1-0",
	      "libwayland-client0",
	      "libwayland-egl1",
	      "libwayland-server0",
	      "libwebp6",
	      "libwebpdemux2",
	      "libwoff1",
	      "libx11-6",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxkbcommon0",
	      "libxml2",
	      "libxslt1.1",
	      "libatomic1",
	      "libevent-2.1-7"
	    ],
	    lib2package: {
	      "libasound.so.2": "libasound2",
	      "libatk-1.0.so.0": "libatk1.0-0",
	      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
	      "libatspi.so.0": "libatspi2.0-0",
	      "libcairo-gobject.so.2": "libcairo-gobject2",
	      "libcairo.so.2": "libcairo2",
	      "libcups.so.2": "libcups2",
	      "libdbus-1.so.3": "libdbus-1-3",
	      "libdbus-glib-1.so.2": "libdbus-glib-1-2",
	      "libdrm.so.2": "libdrm2",
	      "libEGL.so.1": "libegl1",
	      "libenchant-2.so.2": "libenchant-2-2",
	      "libepoxy.so.0": "libepoxy0",
	      "libevdev.so.2": "libevdev2",
	      "libfontconfig.so.1": "libfontconfig1",
	      "libfreetype.so.6": "libfreetype6",
	      "libgbm.so.1": "libgbm1",
	      "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
	      "libgdk-3.so.0": "libgtk-3-0",
	      "libgio-2.0.so.0": "libglib2.0-0",
	      "libGLESv2.so.2": "libgles2",
	      "libglib-2.0.so.0": "libglib2.0-0",
	      "libGLX.so.0": "libglx0",
	      "libgmodule-2.0.so.0": "libglib2.0-0",
	      "libgobject-2.0.so.0": "libglib2.0-0",
	      "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstbase-1.0.so.0": "libgstreamer1.0-0",
	      "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
	      "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
	      "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
	      "libgtk-3.so.0": "libgtk-3-0",
	      "libgudev-1.0.so.0": "libgudev-1.0-0",
	      "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
	      "libharfbuzz.so.0": "libharfbuzz0b",
	      "libhyphen.so.0": "libhyphen0",
	      "libicui18n.so.67": "libicu67",
	      "libicuuc.so.67": "libicu67",
	      "libjpeg.so.62": "libjpeg62-turbo",
	      "liblcms2.so.2": "liblcms2-2",
	      "libmanette-0.2.so.0": "libmanette-0.2-0",
	      "libnotify.so.4": "libnotify4",
	      "libnspr4.so": "libnspr4",
	      "libnss3.so": "libnss3",
	      "libnssutil3.so": "libnss3",
	      "libOpenGL.so.0": "libopengl0",
	      "libopenjp2.so.7": "libopenjp2-7",
	      "libopus.so.0": "libopus0",
	      "libpango-1.0.so.0": "libpango-1.0-0",
	      "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
	      "libpng16.so.16": "libpng16-16",
	      "libproxy.so.1": "libproxy1v5",
	      "libsecret-1.so.0": "libsecret-1-0",
	      "libsmime3.so": "libnss3",
	      "libwayland-client.so.0": "libwayland-client0",
	      "libwayland-egl.so.1": "libwayland-egl1",
	      "libwayland-server.so.0": "libwayland-server0",
	      "libwebp.so.6": "libwebp6",
	      "libwebpdemux.so.2": "libwebpdemux2",
	      "libwoff2dec.so.1.0.2": "libwoff1",
	      "libX11-xcb.so.1": "libx11-xcb1",
	      "libX11.so.6": "libx11-6",
	      "libxcb-shm.so.0": "libxcb-shm0",
	      "libxcb.so.1": "libxcb1",
	      "libXcomposite.so.1": "libxcomposite1",
	      "libXcursor.so.1": "libxcursor1",
	      "libXdamage.so.1": "libxdamage1",
	      "libXext.so.6": "libxext6",
	      "libXfixes.so.3": "libxfixes3",
	      "libXi.so.6": "libxi6",
	      "libxkbcommon.so.0": "libxkbcommon0",
	      "libxml2.so.2": "libxml2",
	      "libXrandr.so.2": "libxrandr2",
	      "libXrender.so.1": "libxrender1",
	      "libxslt.so.1": "libxslt1.1",
	      "libXtst.so.6": "libxtst6",
	      "libatomic.so.1": "libatomic1",
	      "libevent-2.1.so.7": "libevent-2.1-7"
	    }
	  },
	  "debian12-x64": {
	    tools: [
	      "xvfb",
	      "fonts-noto-color-emoji",
	      "fonts-unifont",
	      "libfontconfig1",
	      "libfreetype6",
	      "xfonts-scalable",
	      "fonts-liberation",
	      "fonts-ipafont-gothic",
	      "fonts-wqy-zenhei",
	      "fonts-tlwg-loma-otf",
	      "fonts-freefont-ttf"
	    ],
	    chromium: [
	      "libasound2",
	      "libatk-bridge2.0-0",
	      "libatk1.0-0",
	      "libatspi2.0-0",
	      "libcairo2",
	      "libcups2",
	      "libdbus-1-3",
	      "libdrm2",
	      "libgbm1",
	      "libglib2.0-0",
	      "libnspr4",
	      "libnss3",
	      "libpango-1.0-0",
	      "libx11-6",
	      "libxcb1",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxkbcommon0",
	      "libxrandr2"
	    ],
	    firefox: [
	      "libasound2",
	      "libatk1.0-0",
	      "libcairo-gobject2",
	      "libcairo2",
	      "libdbus-1-3",
	      "libdbus-glib-1-2",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgdk-pixbuf-2.0-0",
	      "libglib2.0-0",
	      "libgtk-3-0",
	      "libharfbuzz0b",
	      "libpango-1.0-0",
	      "libpangocairo-1.0-0",
	      "libx11-6",
	      "libx11-xcb1",
	      "libxcb-shm0",
	      "libxcb1",
	      "libxcomposite1",
	      "libxcursor1",
	      "libxdamage1",
	      "libxext6",
	      "libxfixes3",
	      "libxi6",
	      "libxrandr2",
	      "libxrender1",
	      "libxtst6"
	    ],
	    webkit: [
	      "libsoup-3.0-0",
	      "gstreamer1.0-libav",
	      "gstreamer1.0-plugins-bad",
	      "gstreamer1.0-plugins-base",
	      "gstreamer1.0-plugins-good",
	      "libatk-bridge2.0-0",
	      "libatk1.0-0",
	      "libcairo2",
	      "libdbus-1-3",
	      "libdrm2",
	      "libegl1",
	      "libenchant-2-2",
	      "libepoxy0",
	      "libevdev2",
	      "libfontconfig1",
	      "libfreetype6",
	      "libgbm1",
	      "libgdk-pixbuf-2.0-0",
	      "libgles2",
	      "libglib2.0-0",
	      "libglx0",
	      "libgstreamer-gl1.0-0",
	      "libgstreamer-plugins-base1.0-0",
	      "libgstreamer1.0-0",
	      "libgtk-4-1",
	      "libgudev-1.0-0",
	      "libharfbuzz-icu0",
	      "libharfbuzz0b",
	      "libhyphen0",
	      "libicu72",
	      "libjpeg62-turbo",
	      "liblcms2-2",
	      "libmanette-0.2-0",
	      "libnotify4",
	      "libopengl0",
	      "libopenjp2-7",
	      "libopus0",
	      "libpango-1.0-0",
	      "libpng16-16",
	      "libproxy1v5",
	      "libsecret-1-0",
	      "libwayland-client0",
	      "libwayland-egl1",
	      "libwayland-server0",
	      "libwebp7",
	      "libwebpdemux2",
	      "libwoff1",
	      "libx11-6",
	      "libxcomposite1",
	      "libxdamage1",
	      "libxkbcommon0",
	      "libxml2",
	      "libxslt1.1",
	      "libatomic1",
	      "libevent-2.1-7",
	      "libavif15"
	    ],
	    lib2package: {
	      "libavif.so.15": "libavif15",
	      "libsoup-3.0.so.0": "libsoup-3.0-0",
	      "libasound.so.2": "libasound2",
	      "libatk-1.0.so.0": "libatk1.0-0",
	      "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
	      "libatspi.so.0": "libatspi2.0-0",
	      "libcairo.so.2": "libcairo2",
	      "libcups.so.2": "libcups2",
	      "libdbus-1.so.3": "libdbus-1-3",
	      "libdrm.so.2": "libdrm2",
	      "libgbm.so.1": "libgbm1",
	      "libgio-2.0.so.0": "libglib2.0-0",
	      "libglib-2.0.so.0": "libglib2.0-0",
	      "libgobject-2.0.so.0": "libglib2.0-0",
	      "libnspr4.so": "libnspr4",
	      "libnss3.so": "libnss3",
	      "libnssutil3.so": "libnss3",
	      "libpango-1.0.so.0": "libpango-1.0-0",
	      "libsmime3.so": "libnss3",
	      "libX11.so.6": "libx11-6",
	      "libxcb.so.1": "libxcb1",
	      "libXcomposite.so.1": "libxcomposite1",
	      "libXdamage.so.1": "libxdamage1",
	      "libXext.so.6": "libxext6",
	      "libXfixes.so.3": "libxfixes3",
	      "libxkbcommon.so.0": "libxkbcommon0",
	      "libXrandr.so.2": "libxrandr2",
	      "libgtk-4.so.1": "libgtk-4-1"
	    }
	  }
	};
	deps["ubuntu20.04-arm64"] = {
	  tools: [...deps["ubuntu20.04-x64"].tools],
	  chromium: [...deps["ubuntu20.04-x64"].chromium],
	  firefox: [
	    ...deps["ubuntu20.04-x64"].firefox
	  ],
	  webkit: [
	    ...deps["ubuntu20.04-x64"].webkit
	  ],
	  lib2package: {
	    ...deps["ubuntu20.04-x64"].lib2package
	  }
	};
	deps["ubuntu22.04-arm64"] = {
	  tools: [...deps["ubuntu22.04-x64"].tools],
	  chromium: [...deps["ubuntu22.04-x64"].chromium],
	  firefox: [
	    ...deps["ubuntu22.04-x64"].firefox
	  ],
	  webkit: [
	    ...deps["ubuntu22.04-x64"].webkit
	  ],
	  lib2package: {
	    ...deps["ubuntu22.04-x64"].lib2package
	  }
	};
	deps["ubuntu24.04-arm64"] = {
	  tools: [...deps["ubuntu24.04-x64"].tools],
	  chromium: [...deps["ubuntu24.04-x64"].chromium],
	  firefox: [
	    ...deps["ubuntu24.04-x64"].firefox
	  ],
	  webkit: [
	    ...deps["ubuntu24.04-x64"].webkit
	  ],
	  lib2package: {
	    ...deps["ubuntu24.04-x64"].lib2package
	  }
	};
	deps["debian11-arm64"] = {
	  tools: [...deps["debian11-x64"].tools],
	  chromium: [...deps["debian11-x64"].chromium],
	  firefox: [
	    ...deps["debian11-x64"].firefox
	  ],
	  webkit: [
	    ...deps["debian11-x64"].webkit
	  ],
	  lib2package: {
	    ...deps["debian11-x64"].lib2package
	  }
	};
	deps["debian12-arm64"] = {
	  tools: [...deps["debian12-x64"].tools],
	  chromium: [...deps["debian12-x64"].chromium],
	  firefox: [
	    ...deps["debian12-x64"].firefox
	  ],
	  webkit: [
	    ...deps["debian12-x64"].webkit
	  ],
	  lib2package: {
	    ...deps["debian12-x64"].lib2package
	  }
	};
	return nativeDeps;
}

var ascii;
var hasRequiredAscii;

function requireAscii () {
	if (hasRequiredAscii) return ascii;
	hasRequiredAscii = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ascii_exports = {};
	__export(ascii_exports, {
	  jsonStringifyForceASCII: () => jsonStringifyForceASCII,
	  wrapInASCIIBox: () => wrapInASCIIBox
	});
	ascii = __toCommonJS(ascii_exports);
	function wrapInASCIIBox(text, padding = 0) {
	  const lines = text.split("\n");
	  const maxLength = Math.max(...lines.map((line) => line.length));
	  return [
	    "\u2554" + "\u2550".repeat(maxLength + padding * 2) + "\u2557",
	    ...lines.map((line) => "\u2551" + " ".repeat(padding) + line + " ".repeat(maxLength - line.length + padding) + "\u2551"),
	    "\u255A" + "\u2550".repeat(maxLength + padding * 2) + "\u255D"
	  ].join("\n");
	}
	function jsonStringifyForceASCII(object) {
	  return JSON.stringify(object).replace(
	    /[\u007f-\uffff]/g,
	    (c) => "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4)
	  );
	}
	return ascii;
}

var hostPlatform_1;
var hasRequiredHostPlatform;

function requireHostPlatform () {
	if (hasRequiredHostPlatform) return hostPlatform_1;
	hasRequiredHostPlatform = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var hostPlatform_exports = {};
	__export(hostPlatform_exports, {
	  hostPlatform: () => hostPlatform,
	  isOfficiallySupportedPlatform: () => isOfficiallySupportedPlatform
	});
	hostPlatform_1 = __toCommonJS(hostPlatform_exports);
	var import_os = __toESM(require$$0$2);
	var import_linuxUtils = requireLinuxUtils();
	function calculatePlatform() {
	  if (process.env.PLAYWRIGHT_HOST_PLATFORM_OVERRIDE) {
	    return {
	      hostPlatform: process.env.PLAYWRIGHT_HOST_PLATFORM_OVERRIDE,
	      isOfficiallySupportedPlatform: false
	    };
	  }
	  const platform = import_os.default.platform();
	  if (platform === "darwin") {
	    const ver = import_os.default.release().split(".").map((a) => parseInt(a, 10));
	    let macVersion = "";
	    if (ver[0] < 18) {
	      macVersion = "mac10.13";
	    } else if (ver[0] === 18) {
	      macVersion = "mac10.14";
	    } else if (ver[0] === 19) {
	      macVersion = "mac10.15";
	    } else {
	      const LAST_STABLE_MACOS_MAJOR_VERSION = 15;
	      macVersion = "mac" + Math.min(ver[0] - 9, LAST_STABLE_MACOS_MAJOR_VERSION);
	      if (import_os.default.cpus().some((cpu) => cpu.model.includes("Apple")))
	        macVersion += "-arm64";
	    }
	    return { hostPlatform: macVersion, isOfficiallySupportedPlatform: true };
	  }
	  if (platform === "linux") {
	    if (!["x64", "arm64"].includes(import_os.default.arch()))
	      return { hostPlatform: "<unknown>", isOfficiallySupportedPlatform: false };
	    const archSuffix = "-" + import_os.default.arch();
	    const distroInfo = (0, import_linuxUtils.getLinuxDistributionInfoSync)();
	    if (distroInfo?.id === "ubuntu" || distroInfo?.id === "pop" || distroInfo?.id === "neon" || distroInfo?.id === "tuxedo") {
	      const isUbuntu = distroInfo?.id === "ubuntu";
	      const version = distroInfo?.version;
	      const major = parseInt(distroInfo.version, 10);
	      if (major < 20)
	        return { hostPlatform: "ubuntu18.04" + archSuffix, isOfficiallySupportedPlatform: false };
	      if (major < 22)
	        return { hostPlatform: "ubuntu20.04" + archSuffix, isOfficiallySupportedPlatform: isUbuntu && version === "20.04" };
	      if (major < 24)
	        return { hostPlatform: "ubuntu22.04" + archSuffix, isOfficiallySupportedPlatform: isUbuntu && version === "22.04" };
	      if (major < 26)
	        return { hostPlatform: "ubuntu24.04" + archSuffix, isOfficiallySupportedPlatform: isUbuntu && version === "24.04" };
	      return { hostPlatform: "ubuntu" + distroInfo.version + archSuffix, isOfficiallySupportedPlatform: false };
	    }
	    if (distroInfo?.id === "linuxmint") {
	      const mintMajor = parseInt(distroInfo.version, 10);
	      if (mintMajor <= 20)
	        return { hostPlatform: "ubuntu20.04" + archSuffix, isOfficiallySupportedPlatform: false };
	      if (mintMajor === 21)
	        return { hostPlatform: "ubuntu22.04" + archSuffix, isOfficiallySupportedPlatform: false };
	      return { hostPlatform: "ubuntu24.04" + archSuffix, isOfficiallySupportedPlatform: false };
	    }
	    if (distroInfo?.id === "debian" || distroInfo?.id === "raspbian") {
	      const isOfficiallySupportedPlatform2 = distroInfo?.id === "debian";
	      if (distroInfo?.version === "11")
	        return { hostPlatform: "debian11" + archSuffix, isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2 };
	      if (distroInfo?.version === "12")
	        return { hostPlatform: "debian12" + archSuffix, isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2 };
	      if (distroInfo?.version === "")
	        return { hostPlatform: "debian12" + archSuffix, isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2 };
	    }
	    return { hostPlatform: "ubuntu20.04" + archSuffix, isOfficiallySupportedPlatform: false };
	  }
	  if (platform === "win32")
	    return { hostPlatform: "win64", isOfficiallySupportedPlatform: true };
	  return { hostPlatform: "<unknown>", isOfficiallySupportedPlatform: false };
	}
	const { hostPlatform, isOfficiallySupportedPlatform } = calculatePlatform();
	return hostPlatform_1;
}

var spawnAsync_1;
var hasRequiredSpawnAsync;

function requireSpawnAsync () {
	if (hasRequiredSpawnAsync) return spawnAsync_1;
	hasRequiredSpawnAsync = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var spawnAsync_exports = {};
	__export(spawnAsync_exports, {
	  spawnAsync: () => spawnAsync
	});
	spawnAsync_1 = __toCommonJS(spawnAsync_exports);
	var import_child_process = require$$0$3;
	function spawnAsync(cmd, args, options = {}) {
	  const process = (0, import_child_process.spawn)(cmd, args, Object.assign({ windowsHide: true }, options));
	  return new Promise((resolve) => {
	    let stdout = "";
	    let stderr = "";
	    if (process.stdout)
	      process.stdout.on("data", (data) => stdout += data.toString());
	    if (process.stderr)
	      process.stderr.on("data", (data) => stderr += data.toString());
	    process.on("close", (code) => resolve({ stdout, stderr, code }));
	    process.on("error", (error) => resolve({ stdout, stderr, code: 0, error }));
	  });
	}
	return spawnAsync_1;
}

var dependencies;
var hasRequiredDependencies;

function requireDependencies () {
	if (hasRequiredDependencies) return dependencies;
	hasRequiredDependencies = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var dependencies_exports = {};
	__export(dependencies_exports, {
	  dockerVersion: () => dockerVersion,
	  installDependenciesLinux: () => installDependenciesLinux,
	  installDependenciesWindows: () => installDependenciesWindows,
	  readDockerVersionSync: () => readDockerVersionSync,
	  transformCommandsForRoot: () => transformCommandsForRoot,
	  validateDependenciesLinux: () => validateDependenciesLinux,
	  validateDependenciesWindows: () => validateDependenciesWindows,
	  writeDockerVersion: () => writeDockerVersion
	});
	dependencies = __toCommonJS(dependencies_exports);
	var childProcess = __toESM(require$$0$3);
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_nativeDeps = requireNativeDeps();
	var import_ascii = requireAscii();
	var import_hostPlatform = requireHostPlatform();
	var import_spawnAsync = requireSpawnAsync();
	var import_userAgent = requireUserAgent();
	var import__ = requireRegistry();
	const BIN_DIRECTORY = import_path.default.join(__dirname, "..", "..", "..", "bin");
	const languageBindingVersion = process.env.PW_CLI_DISPLAY_VERSION || require$$10.version;
	const dockerVersionFilePath = "/ms-playwright/.docker-info";
	async function writeDockerVersion(dockerImageNameTemplate) {
	  await import_fs.default.promises.mkdir(import_path.default.dirname(dockerVersionFilePath), { recursive: true });
	  await import_fs.default.promises.writeFile(dockerVersionFilePath, JSON.stringify(dockerVersion(dockerImageNameTemplate), null, 2), "utf8");
	  await import_fs.default.promises.chmod(dockerVersionFilePath, 511);
	}
	function dockerVersion(dockerImageNameTemplate) {
	  return {
	    driverVersion: languageBindingVersion,
	    dockerImageName: dockerImageNameTemplate.replace("%version%", languageBindingVersion)
	  };
	}
	function readDockerVersionSync() {
	  try {
	    const data = JSON.parse(import_fs.default.readFileSync(dockerVersionFilePath, "utf8"));
	    return {
	      ...data,
	      dockerImageNameTemplate: data.dockerImageName.replace(data.driverVersion, "%version%")
	    };
	  } catch (e) {
	    return null;
	  }
	}
	const checkExecutable = (filePath) => {
	  if (process.platform === "win32")
	    return filePath.endsWith(".exe");
	  return import_fs.default.promises.access(filePath, import_fs.default.constants.X_OK).then(() => true).catch(() => false);
	};
	function isSupportedWindowsVersion() {
	  if (import_os.default.platform() !== "win32" || import_os.default.arch() !== "x64")
	    return false;
	  const [major, minor] = import_os.default.release().split(".").map((token) => parseInt(token, 10));
	  return major > 6 || major === 6 && minor > 1;
	}
	async function installDependenciesWindows(targets, dryRun) {
	  if (targets.has("chromium")) {
	    const command = "powershell.exe";
	    const args = ["-ExecutionPolicy", "Bypass", "-File", import_path.default.join(BIN_DIRECTORY, "install_media_pack.ps1")];
	    if (dryRun) {
	      console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
	      return;
	    }
	    const { code } = await (0, import_spawnAsync.spawnAsync)(command, args, { cwd: BIN_DIRECTORY, stdio: "inherit" });
	    if (code !== 0)
	      throw new Error("Failed to install windows dependencies!");
	  }
	}
	async function installDependenciesLinux(targets, dryRun) {
	  const libraries = [];
	  const platform = import_hostPlatform.hostPlatform;
	  if (!import_hostPlatform.isOfficiallySupportedPlatform)
	    console.warn(`BEWARE: your OS is not officially supported by Playwright; installing dependencies for ${platform} as a fallback.`);
	  for (const target of targets) {
	    const info = import_nativeDeps.deps[platform];
	    if (!info) {
	      console.warn(`Cannot install dependencies for ${platform} with Playwright ${(0, import_userAgent.getPlaywrightVersion)()}!`);
	      return;
	    }
	    libraries.push(...info[target]);
	  }
	  const uniqueLibraries = Array.from(new Set(libraries));
	  if (!dryRun)
	    console.log(`Installing dependencies...`);
	  const commands = [];
	  commands.push("apt-get update");
	  commands.push([
	    "apt-get",
	    "install",
	    "-y",
	    "--no-install-recommends",
	    ...uniqueLibraries
	  ].join(" "));
	  const { command, args, elevatedPermissions } = await transformCommandsForRoot(commands);
	  if (dryRun) {
	    console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
	    return;
	  }
	  if (elevatedPermissions)
	    console.log("Switching to root user to install dependencies...");
	  const child = childProcess.spawn(command, args, { stdio: "inherit" });
	  await new Promise((resolve, reject) => {
	    child.on("exit", (code) => code === 0 ? resolve() : reject(new Error(`Installation process exited with code: ${code}`)));
	    child.on("error", reject);
	  });
	}
	async function validateDependenciesWindows(sdkLanguage, windowsExeAndDllDirectories) {
	  const directoryPaths = windowsExeAndDllDirectories;
	  const lddPaths = [];
	  for (const directoryPath of directoryPaths)
	    lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
	  const allMissingDeps = await Promise.all(lddPaths.map((lddPath) => missingFileDependenciesWindows(sdkLanguage, lddPath)));
	  const missingDeps = /* @__PURE__ */ new Set();
	  for (const deps2 of allMissingDeps) {
	    for (const dep of deps2)
	      missingDeps.add(dep);
	  }
	  if (!missingDeps.size)
	    return;
	  let isCrtMissing = false;
	  let isMediaFoundationMissing = false;
	  for (const dep of missingDeps) {
	    if (dep.startsWith("api-ms-win-crt") || dep === "vcruntime140.dll" || dep === "vcruntime140_1.dll" || dep === "msvcp140.dll")
	      isCrtMissing = true;
	    else if (dep === "mf.dll" || dep === "mfplat.dll" || dep === "msmpeg2vdec.dll" || dep === "evr.dll" || dep === "avrt.dll")
	      isMediaFoundationMissing = true;
	  }
	  const details = [];
	  if (isCrtMissing) {
	    details.push(
	      `Some of the Universal C Runtime files cannot be found on the system. You can fix`,
	      `that by installing Microsoft Visual C++ Redistributable for Visual Studio from:`,
	      `https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads`,
	      ``
	    );
	  }
	  if (isMediaFoundationMissing) {
	    details.push(
	      `Some of the Media Foundation files cannot be found on the system. If you are`,
	      `on Windows Server try fixing this by running the following command in PowerShell`,
	      `as Administrator:`,
	      ``,
	      `    Install-WindowsFeature Server-Media-Foundation`,
	      ``,
	      `For Windows N editions visit:`,
	      `https://support.microsoft.com/en-us/help/3145500/media-feature-pack-list-for-windows-n-editions`,
	      ``
	    );
	  }
	  details.push(
	    `Full list of missing libraries:`,
	    `    ${[...missingDeps].join("\n    ")}`,
	    ``
	  );
	  const message = `Host system is missing dependencies!

${details.join("\n")}`;
	  if (isSupportedWindowsVersion()) {
	    throw new Error(message);
	  } else {
	    console.warn(`WARNING: running on unsupported windows version!`);
	    console.warn(message);
	  }
	}
	async function validateDependenciesLinux(sdkLanguage, linuxLddDirectories, dlOpenLibraries) {
	  const directoryPaths = linuxLddDirectories;
	  const lddPaths = [];
	  for (const directoryPath of directoryPaths)
	    lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
	  const missingDepsPerFile = await Promise.all(lddPaths.map((lddPath) => missingFileDependencies(lddPath, directoryPaths)));
	  const missingDeps = /* @__PURE__ */ new Set();
	  for (const deps2 of missingDepsPerFile) {
	    for (const dep of deps2)
	      missingDeps.add(dep);
	  }
	  for (const dep of await missingDLOPENLibraries(dlOpenLibraries))
	    missingDeps.add(dep);
	  if (!missingDeps.size)
	    return;
	  const allMissingDeps = new Set(missingDeps);
	  const missingPackages = /* @__PURE__ */ new Set();
	  const libraryToPackageNameMapping = import_nativeDeps.deps[import_hostPlatform.hostPlatform] ? {
	    ...import_nativeDeps.deps[import_hostPlatform.hostPlatform]?.lib2package || {},
	    ...MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU
	  } : {};
	  for (const missingDep of missingDeps) {
	    const packageName = libraryToPackageNameMapping[missingDep];
	    if (packageName) {
	      missingPackages.add(packageName);
	      missingDeps.delete(missingDep);
	    }
	  }
	  const maybeSudo = process.getuid?.() && import_os.default.platform() !== "win32" ? "sudo " : "";
	  const dockerInfo = readDockerVersionSync();
	  const errorLines = [
	    `Host system is missing dependencies to run browsers.`
	  ];
	  if (dockerInfo && !dockerInfo.driverVersion.startsWith((0, import_userAgent.getPlaywrightVersion)(
	    true
	    /* majorMinorOnly */
	  ) + ".")) {
	    const pwVersion = (0, import_userAgent.getPlaywrightVersion)();
	    const requiredDockerImage = dockerInfo.dockerImageName.replace(dockerInfo.driverVersion, pwVersion);
	    errorLines.push(...[
	      `This is most likely due to Docker image version not matching Playwright version:`,
	      `- Playwright  : ${pwVersion}`,
	      `- Docker image: ${dockerInfo.driverVersion}`,
	      ``,
	      `Either:`,
	      `- (recommended) use Docker image "${requiredDockerImage}"`,
	      `- (alternative 1) run the following command inside Docker to install missing dependencies:`,
	      ``,
	      `    ${maybeSudo}${(0, import__.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`,
	      ``,
	      `- (alternative 2) use apt inside Docker:`,
	      ``,
	      `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`,
	      ``,
	      `<3 Playwright Team`
	    ]);
	  } else if (missingPackages.size && !missingDeps.size) {
	    errorLines.push(...[
	      `Please install them with the following command:`,
	      ``,
	      `    ${maybeSudo}${(0, import__.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`,
	      ``,
	      `Alternatively, use apt:`,
	      `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`,
	      ``,
	      `<3 Playwright Team`
	    ]);
	  } else {
	    errorLines.push(...[
	      `Missing libraries:`,
	      ...[...allMissingDeps].map((dep) => "    " + dep)
	    ]);
	  }
	  throw new Error("\n" + (0, import_ascii.wrapInASCIIBox)(errorLines.join("\n"), 1));
	}
	function isSharedLib(basename) {
	  switch (import_os.default.platform()) {
	    case "linux":
	      return basename.endsWith(".so") || basename.includes(".so.");
	    case "win32":
	      return basename.endsWith(".dll");
	    default:
	      return false;
	  }
	}
	async function executablesOrSharedLibraries(directoryPath) {
	  if (!import_fs.default.existsSync(directoryPath))
	    return [];
	  const allPaths = (await import_fs.default.promises.readdir(directoryPath)).map((file) => import_path.default.resolve(directoryPath, file));
	  const allStats = await Promise.all(allPaths.map((aPath) => import_fs.default.promises.stat(aPath)));
	  const filePaths = allPaths.filter((aPath, index) => allStats[index].isFile());
	  const executablersOrLibraries = (await Promise.all(filePaths.map(async (filePath) => {
	    const basename = import_path.default.basename(filePath).toLowerCase();
	    if (isSharedLib(basename))
	      return filePath;
	    if (await checkExecutable(filePath))
	      return filePath;
	    return false;
	  }))).filter(Boolean);
	  return executablersOrLibraries;
	}
	async function missingFileDependenciesWindows(sdkLanguage, filePath) {
	  const executable = import__.registry.findExecutable("winldd").executablePathOrDie(sdkLanguage);
	  const dirname = import_path.default.dirname(filePath);
	  const { stdout, code } = await (0, import_spawnAsync.spawnAsync)(executable, [filePath], {
	    cwd: dirname,
	    env: {
	      ...process.env,
	      LD_LIBRARY_PATH: process.env.LD_LIBRARY_PATH ? `${process.env.LD_LIBRARY_PATH}:${dirname}` : dirname
	    }
	  });
	  if (code !== 0)
	    return [];
	  const missingDeps = stdout.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim().toLowerCase());
	  return missingDeps;
	}
	async function missingFileDependencies(filePath, extraLDPaths) {
	  const dirname = import_path.default.dirname(filePath);
	  let LD_LIBRARY_PATH = extraLDPaths.join(":");
	  if (process.env.LD_LIBRARY_PATH)
	    LD_LIBRARY_PATH = `${process.env.LD_LIBRARY_PATH}:${LD_LIBRARY_PATH}`;
	  const { stdout, code } = await (0, import_spawnAsync.spawnAsync)("ldd", [filePath], {
	    cwd: dirname,
	    env: {
	      ...process.env,
	      LD_LIBRARY_PATH
	    }
	  });
	  if (code !== 0)
	    return [];
	  const missingDeps = stdout.split("\n").map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim());
	  return missingDeps;
	}
	async function missingDLOPENLibraries(libraries) {
	  if (!libraries.length)
	    return [];
	  const { stdout, code, error } = await (0, import_spawnAsync.spawnAsync)("/sbin/ldconfig", ["-p"], {});
	  if (code !== 0 || error)
	    return [];
	  const isLibraryAvailable = (library) => stdout.toLowerCase().includes(library.toLowerCase());
	  return libraries.filter((library) => !isLibraryAvailable(library));
	}
	const MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU = {
	  // libgstlibav.so (the only actual library provided by gstreamer1.0-libav) is not
	  // in the ldconfig cache, so we detect the actual library required for playing h.264
	  // and if it's missing recommend installing missing gstreamer lib.
	  // gstreamer1.0-libav -> libavcodec57 -> libx264-152
	  "libx264.so": "gstreamer1.0-libav"
	};
	function quoteProcessArgs(args) {
	  return args.map((arg) => {
	    if (arg.includes(" "))
	      return `"${arg}"`;
	    return arg;
	  });
	}
	async function transformCommandsForRoot(commands) {
	  const isRoot = process.getuid?.() === 0;
	  if (isRoot)
	    return { command: "sh", args: ["-c", `${commands.join("&& ")}`], elevatedPermissions: false };
	  const sudoExists = await (0, import_spawnAsync.spawnAsync)("which", ["sudo"]);
	  if (sudoExists.code === 0)
	    return { command: "sudo", args: ["--", "sh", "-c", `${commands.join("&& ")}`], elevatedPermissions: true };
	  return { command: "su", args: ["root", "-c", `${commands.join("&& ")}`], elevatedPermissions: true };
	}
	return dependencies;
}

var utils = {exports: {}};

var colors;
var hasRequiredColors;

function requireColors () {
	if (hasRequiredColors) return colors;
	hasRequiredColors = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var colors_exports = {};
	__export(colors_exports, {
	  noColors: () => noColors,
	  webColors: () => webColors
	});
	colors = __toCommonJS(colors_exports);
	const webColors = {
	  enabled: true,
	  reset: (text) => applyStyle(0, 0, text),
	  bold: (text) => applyStyle(1, 22, text),
	  dim: (text) => applyStyle(2, 22, text),
	  italic: (text) => applyStyle(3, 23, text),
	  underline: (text) => applyStyle(4, 24, text),
	  inverse: (text) => applyStyle(7, 27, text),
	  hidden: (text) => applyStyle(8, 28, text),
	  strikethrough: (text) => applyStyle(9, 29, text),
	  black: (text) => applyStyle(30, 39, text),
	  red: (text) => applyStyle(31, 39, text),
	  green: (text) => applyStyle(32, 39, text),
	  yellow: (text) => applyStyle(33, 39, text),
	  blue: (text) => applyStyle(34, 39, text),
	  magenta: (text) => applyStyle(35, 39, text),
	  cyan: (text) => applyStyle(36, 39, text),
	  white: (text) => applyStyle(37, 39, text),
	  gray: (text) => applyStyle(90, 39, text),
	  grey: (text) => applyStyle(90, 39, text)
	};
	const noColors = {
	  enabled: false,
	  reset: (t) => t,
	  bold: (t) => t,
	  dim: (t) => t,
	  italic: (t) => t,
	  underline: (t) => t,
	  inverse: (t) => t,
	  hidden: (t) => t,
	  strikethrough: (t) => t,
	  black: (t) => t,
	  red: (t) => t,
	  green: (t) => t,
	  yellow: (t) => t,
	  blue: (t) => t,
	  magenta: (t) => t,
	  cyan: (t) => t,
	  white: (t) => t,
	  gray: (t) => t,
	  grey: (t) => t
	};
	const applyStyle = (open, close, text) => `\x1B[${open}m${text}\x1B[${close}m`;
	return colors;
}

var headers;
var hasRequiredHeaders;

function requireHeaders () {
	if (hasRequiredHeaders) return headers;
	hasRequiredHeaders = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var headers_exports = {};
	__export(headers_exports, {
	  headersArrayToObject: () => headersArrayToObject,
	  headersObjectToArray: () => headersObjectToArray
	});
	headers = __toCommonJS(headers_exports);
	function headersObjectToArray(headers, separator, setCookieSeparator) {
	  if (!setCookieSeparator)
	    setCookieSeparator = separator;
	  const result = [];
	  for (const name in headers) {
	    const values = headers[name];
	    if (values === void 0)
	      continue;
	    if (separator) {
	      const sep = name.toLowerCase() === "set-cookie" ? setCookieSeparator : separator;
	      for (const value of values.split(sep))
	        result.push({ name, value: value.trim() });
	    } else {
	      result.push({ name, value: values });
	    }
	  }
	  return result;
	}
	function headersArrayToObject(headers, lowerCase) {
	  const result = {};
	  for (const { name, value } of headers)
	    result[lowerCase ? name.toLowerCase() : name] = value;
	  return result;
	}
	return headers;
}

var cssTokenizer;
var hasRequiredCssTokenizer;

function requireCssTokenizer () {
	if (hasRequiredCssTokenizer) return cssTokenizer;
	hasRequiredCssTokenizer = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var cssTokenizer_exports = {};
	__export(cssTokenizer_exports, {
	  AtKeywordToken: () => AtKeywordToken,
	  BadStringToken: () => BadStringToken,
	  BadURLToken: () => BadURLToken,
	  CDCToken: () => CDCToken,
	  CDOToken: () => CDOToken,
	  CSSParserToken: () => CSSParserToken,
	  CloseCurlyToken: () => CloseCurlyToken,
	  CloseParenToken: () => CloseParenToken,
	  CloseSquareToken: () => CloseSquareToken,
	  ColonToken: () => ColonToken,
	  ColumnToken: () => ColumnToken,
	  CommaToken: () => CommaToken,
	  DashMatchToken: () => DashMatchToken,
	  DelimToken: () => DelimToken,
	  DimensionToken: () => DimensionToken,
	  EOFToken: () => EOFToken,
	  FunctionToken: () => FunctionToken,
	  GroupingToken: () => GroupingToken,
	  HashToken: () => HashToken,
	  IdentToken: () => IdentToken,
	  IncludeMatchToken: () => IncludeMatchToken,
	  InvalidCharacterError: () => InvalidCharacterError,
	  NumberToken: () => NumberToken,
	  OpenCurlyToken: () => OpenCurlyToken,
	  OpenParenToken: () => OpenParenToken,
	  OpenSquareToken: () => OpenSquareToken,
	  PercentageToken: () => PercentageToken,
	  PrefixMatchToken: () => PrefixMatchToken,
	  SemicolonToken: () => SemicolonToken,
	  StringToken: () => StringToken,
	  StringValuedToken: () => StringValuedToken,
	  SubstringMatchToken: () => SubstringMatchToken,
	  SuffixMatchToken: () => SuffixMatchToken,
	  URLToken: () => URLToken,
	  WhitespaceToken: () => WhitespaceToken,
	  tokenize: () => tokenize
	});
	cssTokenizer = __toCommonJS(cssTokenizer_exports);
	const between = function(num, first, last) {
	  return num >= first && num <= last;
	};
	function digit(code) {
	  return between(code, 48, 57);
	}
	function hexdigit(code) {
	  return digit(code) || between(code, 65, 70) || between(code, 97, 102);
	}
	function uppercaseletter(code) {
	  return between(code, 65, 90);
	}
	function lowercaseletter(code) {
	  return between(code, 97, 122);
	}
	function letter(code) {
	  return uppercaseletter(code) || lowercaseletter(code);
	}
	function nonascii(code) {
	  return code >= 128;
	}
	function namestartchar(code) {
	  return letter(code) || nonascii(code) || code === 95;
	}
	function namechar(code) {
	  return namestartchar(code) || digit(code) || code === 45;
	}
	function nonprintable(code) {
	  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
	}
	function newline(code) {
	  return code === 10;
	}
	function whitespace(code) {
	  return newline(code) || code === 9 || code === 32;
	}
	const maximumallowedcodepoint = 1114111;
	class InvalidCharacterError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = "InvalidCharacterError";
	  }
	}
	function preprocess(str) {
	  const codepoints = [];
	  for (let i = 0; i < str.length; i++) {
	    let code = str.charCodeAt(i);
	    if (code === 13 && str.charCodeAt(i + 1) === 10) {
	      code = 10;
	      i++;
	    }
	    if (code === 13 || code === 12)
	      code = 10;
	    if (code === 0)
	      code = 65533;
	    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
	      const lead = code - 55296;
	      const trail = str.charCodeAt(i + 1) - 56320;
	      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
	      i++;
	    }
	    codepoints.push(code);
	  }
	  return codepoints;
	}
	function stringFromCode(code) {
	  if (code <= 65535)
	    return String.fromCharCode(code);
	  code -= Math.pow(2, 16);
	  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
	  const trail = code % Math.pow(2, 10) + 56320;
	  return String.fromCharCode(lead) + String.fromCharCode(trail);
	}
	function tokenize(str1) {
	  const str = preprocess(str1);
	  let i = -1;
	  const tokens = [];
	  let code;
	  const codepoint = function(i2) {
	    if (i2 >= str.length)
	      return -1;
	    return str[i2];
	  };
	  const next = function(num) {
	    if (num === void 0)
	      num = 1;
	    if (num > 3)
	      throw "Spec Error: no more than three codepoints of lookahead.";
	    return codepoint(i + num);
	  };
	  const consume = function(num) {
	    if (num === void 0)
	      num = 1;
	    i += num;
	    code = codepoint(i);
	    return true;
	  };
	  const reconsume = function() {
	    i -= 1;
	    return true;
	  };
	  const eof = function(codepoint2) {
	    if (codepoint2 === void 0)
	      codepoint2 = code;
	    return codepoint2 === -1;
	  };
	  const consumeAToken = function() {
	    consumeComments();
	    consume();
	    if (whitespace(code)) {
	      while (whitespace(next()))
	        consume();
	      return new WhitespaceToken();
	    } else if (code === 34) {
	      return consumeAStringToken();
	    } else if (code === 35) {
	      if (namechar(next()) || areAValidEscape(next(1), next(2))) {
	        const token = new HashToken("");
	        if (wouldStartAnIdentifier(next(1), next(2), next(3)))
	          token.type = "id";
	        token.value = consumeAName();
	        return token;
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 36) {
	      if (next() === 61) {
	        consume();
	        return new SuffixMatchToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 39) {
	      return consumeAStringToken();
	    } else if (code === 40) {
	      return new OpenParenToken();
	    } else if (code === 41) {
	      return new CloseParenToken();
	    } else if (code === 42) {
	      if (next() === 61) {
	        consume();
	        return new SubstringMatchToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 43) {
	      if (startsWithANumber()) {
	        reconsume();
	        return consumeANumericToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 44) {
	      return new CommaToken();
	    } else if (code === 45) {
	      if (startsWithANumber()) {
	        reconsume();
	        return consumeANumericToken();
	      } else if (next(1) === 45 && next(2) === 62) {
	        consume(2);
	        return new CDCToken();
	      } else if (startsWithAnIdentifier()) {
	        reconsume();
	        return consumeAnIdentlikeToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 46) {
	      if (startsWithANumber()) {
	        reconsume();
	        return consumeANumericToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 58) {
	      return new ColonToken();
	    } else if (code === 59) {
	      return new SemicolonToken();
	    } else if (code === 60) {
	      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
	        consume(3);
	        return new CDOToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 64) {
	      if (wouldStartAnIdentifier(next(1), next(2), next(3)))
	        return new AtKeywordToken(consumeAName());
	      else
	        return new DelimToken(code);
	    } else if (code === 91) {
	      return new OpenSquareToken();
	    } else if (code === 92) {
	      if (startsWithAValidEscape()) {
	        reconsume();
	        return consumeAnIdentlikeToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 93) {
	      return new CloseSquareToken();
	    } else if (code === 94) {
	      if (next() === 61) {
	        consume();
	        return new PrefixMatchToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 123) {
	      return new OpenCurlyToken();
	    } else if (code === 124) {
	      if (next() === 61) {
	        consume();
	        return new DashMatchToken();
	      } else if (next() === 124) {
	        consume();
	        return new ColumnToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (code === 125) {
	      return new CloseCurlyToken();
	    } else if (code === 126) {
	      if (next() === 61) {
	        consume();
	        return new IncludeMatchToken();
	      } else {
	        return new DelimToken(code);
	      }
	    } else if (digit(code)) {
	      reconsume();
	      return consumeANumericToken();
	    } else if (namestartchar(code)) {
	      reconsume();
	      return consumeAnIdentlikeToken();
	    } else if (eof()) {
	      return new EOFToken();
	    } else {
	      return new DelimToken(code);
	    }
	  };
	  const consumeComments = function() {
	    while (next(1) === 47 && next(2) === 42) {
	      consume(2);
	      while (true) {
	        consume();
	        if (code === 42 && next() === 47) {
	          consume();
	          break;
	        } else if (eof()) {
	          return;
	        }
	      }
	    }
	  };
	  const consumeANumericToken = function() {
	    const num = consumeANumber();
	    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
	      const token = new DimensionToken();
	      token.value = num.value;
	      token.repr = num.repr;
	      token.type = num.type;
	      token.unit = consumeAName();
	      return token;
	    } else if (next() === 37) {
	      consume();
	      const token = new PercentageToken();
	      token.value = num.value;
	      token.repr = num.repr;
	      return token;
	    } else {
	      const token = new NumberToken();
	      token.value = num.value;
	      token.repr = num.repr;
	      token.type = num.type;
	      return token;
	    }
	  };
	  const consumeAnIdentlikeToken = function() {
	    const str2 = consumeAName();
	    if (str2.toLowerCase() === "url" && next() === 40) {
	      consume();
	      while (whitespace(next(1)) && whitespace(next(2)))
	        consume();
	      if (next() === 34 || next() === 39)
	        return new FunctionToken(str2);
	      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))
	        return new FunctionToken(str2);
	      else
	        return consumeAURLToken();
	    } else if (next() === 40) {
	      consume();
	      return new FunctionToken(str2);
	    } else {
	      return new IdentToken(str2);
	    }
	  };
	  const consumeAStringToken = function(endingCodePoint) {
	    if (endingCodePoint === void 0)
	      endingCodePoint = code;
	    let string = "";
	    while (consume()) {
	      if (code === endingCodePoint || eof()) {
	        return new StringToken(string);
	      } else if (newline(code)) {
	        reconsume();
	        return new BadStringToken();
	      } else if (code === 92) {
	        if (eof(next()))
	          ;
	        else if (newline(next()))
	          consume();
	        else
	          string += stringFromCode(consumeEscape());
	      } else {
	        string += stringFromCode(code);
	      }
	    }
	    throw new Error("Internal error");
	  };
	  const consumeAURLToken = function() {
	    const token = new URLToken("");
	    while (whitespace(next()))
	      consume();
	    if (eof(next()))
	      return token;
	    while (consume()) {
	      if (code === 41 || eof()) {
	        return token;
	      } else if (whitespace(code)) {
	        while (whitespace(next()))
	          consume();
	        if (next() === 41 || eof(next())) {
	          consume();
	          return token;
	        } else {
	          consumeTheRemnantsOfABadURL();
	          return new BadURLToken();
	        }
	      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
	        consumeTheRemnantsOfABadURL();
	        return new BadURLToken();
	      } else if (code === 92) {
	        if (startsWithAValidEscape()) {
	          token.value += stringFromCode(consumeEscape());
	        } else {
	          consumeTheRemnantsOfABadURL();
	          return new BadURLToken();
	        }
	      } else {
	        token.value += stringFromCode(code);
	      }
	    }
	    throw new Error("Internal error");
	  };
	  const consumeEscape = function() {
	    consume();
	    if (hexdigit(code)) {
	      const digits = [code];
	      for (let total = 0; total < 5; total++) {
	        if (hexdigit(next())) {
	          consume();
	          digits.push(code);
	        } else {
	          break;
	        }
	      }
	      if (whitespace(next()))
	        consume();
	      let value = parseInt(digits.map(function(x) {
	        return String.fromCharCode(x);
	      }).join(""), 16);
	      if (value > maximumallowedcodepoint)
	        value = 65533;
	      return value;
	    } else if (eof()) {
	      return 65533;
	    } else {
	      return code;
	    }
	  };
	  const areAValidEscape = function(c1, c2) {
	    if (c1 !== 92)
	      return false;
	    if (newline(c2))
	      return false;
	    return true;
	  };
	  const startsWithAValidEscape = function() {
	    return areAValidEscape(code, next());
	  };
	  const wouldStartAnIdentifier = function(c1, c2, c3) {
	    if (c1 === 45)
	      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
	    else if (namestartchar(c1))
	      return true;
	    else if (c1 === 92)
	      return areAValidEscape(c1, c2);
	    else
	      return false;
	  };
	  const startsWithAnIdentifier = function() {
	    return wouldStartAnIdentifier(code, next(1), next(2));
	  };
	  const wouldStartANumber = function(c1, c2, c3) {
	    if (c1 === 43 || c1 === 45) {
	      if (digit(c2))
	        return true;
	      if (c2 === 46 && digit(c3))
	        return true;
	      return false;
	    } else if (c1 === 46) {
	      if (digit(c2))
	        return true;
	      return false;
	    } else if (digit(c1)) {
	      return true;
	    } else {
	      return false;
	    }
	  };
	  const startsWithANumber = function() {
	    return wouldStartANumber(code, next(1), next(2));
	  };
	  const consumeAName = function() {
	    let result = "";
	    while (consume()) {
	      if (namechar(code)) {
	        result += stringFromCode(code);
	      } else if (startsWithAValidEscape()) {
	        result += stringFromCode(consumeEscape());
	      } else {
	        reconsume();
	        return result;
	      }
	    }
	    throw new Error("Internal parse error");
	  };
	  const consumeANumber = function() {
	    let repr = "";
	    let type = "integer";
	    if (next() === 43 || next() === 45) {
	      consume();
	      repr += stringFromCode(code);
	    }
	    while (digit(next())) {
	      consume();
	      repr += stringFromCode(code);
	    }
	    if (next(1) === 46 && digit(next(2))) {
	      consume();
	      repr += stringFromCode(code);
	      consume();
	      repr += stringFromCode(code);
	      type = "number";
	      while (digit(next())) {
	        consume();
	        repr += stringFromCode(code);
	      }
	    }
	    const c1 = next(1), c2 = next(2), c3 = next(3);
	    if ((c1 === 69 || c1 === 101) && digit(c2)) {
	      consume();
	      repr += stringFromCode(code);
	      consume();
	      repr += stringFromCode(code);
	      type = "number";
	      while (digit(next())) {
	        consume();
	        repr += stringFromCode(code);
	      }
	    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
	      consume();
	      repr += stringFromCode(code);
	      consume();
	      repr += stringFromCode(code);
	      consume();
	      repr += stringFromCode(code);
	      type = "number";
	      while (digit(next())) {
	        consume();
	        repr += stringFromCode(code);
	      }
	    }
	    const value = convertAStringToANumber(repr);
	    return { type, value, repr };
	  };
	  const convertAStringToANumber = function(string) {
	    return +string;
	  };
	  const consumeTheRemnantsOfABadURL = function() {
	    while (consume()) {
	      if (code === 41 || eof()) {
	        return;
	      } else if (startsWithAValidEscape()) {
	        consumeEscape();
	      } else ;
	    }
	  };
	  let iterationCount = 0;
	  while (!eof(next())) {
	    tokens.push(consumeAToken());
	    iterationCount++;
	    if (iterationCount > str.length * 2)
	      throw new Error("I'm infinite-looping!");
	  }
	  return tokens;
	}
	class CSSParserToken {
	  constructor() {
	    this.tokenType = "";
	  }
	  toJSON() {
	    return { token: this.tokenType };
	  }
	  toString() {
	    return this.tokenType;
	  }
	  toSource() {
	    return "" + this;
	  }
	}
	class BadStringToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "BADSTRING";
	  }
	}
	class BadURLToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "BADURL";
	  }
	}
	class WhitespaceToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "WHITESPACE";
	  }
	  toString() {
	    return "WS";
	  }
	  toSource() {
	    return " ";
	  }
	}
	class CDOToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "CDO";
	  }
	  toSource() {
	    return "<!--";
	  }
	}
	class CDCToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "CDC";
	  }
	  toSource() {
	    return "-->";
	  }
	}
	class ColonToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = ":";
	  }
	}
	class SemicolonToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = ";";
	  }
	}
	class CommaToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = ",";
	  }
	}
	class GroupingToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.value = "";
	    this.mirror = "";
	  }
	}
	class OpenCurlyToken extends GroupingToken {
	  constructor() {
	    super();
	    this.tokenType = "{";
	    this.value = "{";
	    this.mirror = "}";
	  }
	}
	class CloseCurlyToken extends GroupingToken {
	  constructor() {
	    super();
	    this.tokenType = "}";
	    this.value = "}";
	    this.mirror = "{";
	  }
	}
	class OpenSquareToken extends GroupingToken {
	  constructor() {
	    super();
	    this.tokenType = "[";
	    this.value = "[";
	    this.mirror = "]";
	  }
	}
	class CloseSquareToken extends GroupingToken {
	  constructor() {
	    super();
	    this.tokenType = "]";
	    this.value = "]";
	    this.mirror = "[";
	  }
	}
	class OpenParenToken extends GroupingToken {
	  constructor() {
	    super();
	    this.tokenType = "(";
	    this.value = "(";
	    this.mirror = ")";
	  }
	}
	class CloseParenToken extends GroupingToken {
	  constructor() {
	    super();
	    this.tokenType = ")";
	    this.value = ")";
	    this.mirror = "(";
	  }
	}
	class IncludeMatchToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "~=";
	  }
	}
	class DashMatchToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "|=";
	  }
	}
	class PrefixMatchToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "^=";
	  }
	}
	class SuffixMatchToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "$=";
	  }
	}
	class SubstringMatchToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "*=";
	  }
	}
	class ColumnToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "||";
	  }
	}
	class EOFToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.tokenType = "EOF";
	  }
	  toSource() {
	    return "";
	  }
	}
	class DelimToken extends CSSParserToken {
	  constructor(code) {
	    super();
	    this.tokenType = "DELIM";
	    this.value = "";
	    this.value = stringFromCode(code);
	  }
	  toString() {
	    return "DELIM(" + this.value + ")";
	  }
	  toJSON() {
	    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
	    json.value = this.value;
	    return json;
	  }
	  toSource() {
	    if (this.value === "\\")
	      return "\\\n";
	    else
	      return this.value;
	  }
	}
	class StringValuedToken extends CSSParserToken {
	  constructor() {
	    super(...arguments);
	    this.value = "";
	  }
	  ASCIIMatch(str) {
	    return this.value.toLowerCase() === str.toLowerCase();
	  }
	  toJSON() {
	    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
	    json.value = this.value;
	    return json;
	  }
	}
	class IdentToken extends StringValuedToken {
	  constructor(val) {
	    super();
	    this.tokenType = "IDENT";
	    this.value = val;
	  }
	  toString() {
	    return "IDENT(" + this.value + ")";
	  }
	  toSource() {
	    return escapeIdent(this.value);
	  }
	}
	class FunctionToken extends StringValuedToken {
	  constructor(val) {
	    super();
	    this.tokenType = "FUNCTION";
	    this.value = val;
	    this.mirror = ")";
	  }
	  toString() {
	    return "FUNCTION(" + this.value + ")";
	  }
	  toSource() {
	    return escapeIdent(this.value) + "(";
	  }
	}
	class AtKeywordToken extends StringValuedToken {
	  constructor(val) {
	    super();
	    this.tokenType = "AT-KEYWORD";
	    this.value = val;
	  }
	  toString() {
	    return "AT(" + this.value + ")";
	  }
	  toSource() {
	    return "@" + escapeIdent(this.value);
	  }
	}
	class HashToken extends StringValuedToken {
	  constructor(val) {
	    super();
	    this.tokenType = "HASH";
	    this.value = val;
	    this.type = "unrestricted";
	  }
	  toString() {
	    return "HASH(" + this.value + ")";
	  }
	  toJSON() {
	    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
	    json.value = this.value;
	    json.type = this.type;
	    return json;
	  }
	  toSource() {
	    if (this.type === "id")
	      return "#" + escapeIdent(this.value);
	    else
	      return "#" + escapeHash(this.value);
	  }
	}
	class StringToken extends StringValuedToken {
	  constructor(val) {
	    super();
	    this.tokenType = "STRING";
	    this.value = val;
	  }
	  toString() {
	    return '"' + escapeString(this.value) + '"';
	  }
	}
	class URLToken extends StringValuedToken {
	  constructor(val) {
	    super();
	    this.tokenType = "URL";
	    this.value = val;
	  }
	  toString() {
	    return "URL(" + this.value + ")";
	  }
	  toSource() {
	    return 'url("' + escapeString(this.value) + '")';
	  }
	}
	class NumberToken extends CSSParserToken {
	  constructor() {
	    super();
	    this.tokenType = "NUMBER";
	    this.type = "integer";
	    this.repr = "";
	  }
	  toString() {
	    if (this.type === "integer")
	      return "INT(" + this.value + ")";
	    return "NUMBER(" + this.value + ")";
	  }
	  toJSON() {
	    const json = super.toJSON();
	    json.value = this.value;
	    json.type = this.type;
	    json.repr = this.repr;
	    return json;
	  }
	  toSource() {
	    return this.repr;
	  }
	}
	class PercentageToken extends CSSParserToken {
	  constructor() {
	    super();
	    this.tokenType = "PERCENTAGE";
	    this.repr = "";
	  }
	  toString() {
	    return "PERCENTAGE(" + this.value + ")";
	  }
	  toJSON() {
	    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
	    json.value = this.value;
	    json.repr = this.repr;
	    return json;
	  }
	  toSource() {
	    return this.repr + "%";
	  }
	}
	class DimensionToken extends CSSParserToken {
	  constructor() {
	    super();
	    this.tokenType = "DIMENSION";
	    this.type = "integer";
	    this.repr = "";
	    this.unit = "";
	  }
	  toString() {
	    return "DIM(" + this.value + "," + this.unit + ")";
	  }
	  toJSON() {
	    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
	    json.value = this.value;
	    json.type = this.type;
	    json.repr = this.repr;
	    json.unit = this.unit;
	    return json;
	  }
	  toSource() {
	    const source = this.repr;
	    let unit = escapeIdent(this.unit);
	    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
	      unit = "\\65 " + unit.slice(1, unit.length);
	    }
	    return source + unit;
	  }
	}
	function escapeIdent(string) {
	  string = "" + string;
	  let result = "";
	  const firstcode = string.charCodeAt(0);
	  for (let i = 0; i < string.length; i++) {
	    const code = string.charCodeAt(i);
	    if (code === 0)
	      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
	    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)
	      result += "\\" + code.toString(16) + " ";
	    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
	      result += string[i];
	    else
	      result += "\\" + string[i];
	  }
	  return result;
	}
	function escapeHash(string) {
	  string = "" + string;
	  let result = "";
	  for (let i = 0; i < string.length; i++) {
	    const code = string.charCodeAt(i);
	    if (code === 0)
	      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
	    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
	      result += string[i];
	    else
	      result += "\\" + code.toString(16) + " ";
	  }
	  return result;
	}
	function escapeString(string) {
	  string = "" + string;
	  let result = "";
	  for (let i = 0; i < string.length; i++) {
	    const code = string.charCodeAt(i);
	    if (code === 0)
	      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
	    if (between(code, 1, 31) || code === 127)
	      result += "\\" + code.toString(16) + " ";
	    else if (code === 34 || code === 92)
	      result += "\\" + string[i];
	    else
	      result += string[i];
	  }
	  return result;
	}
	return cssTokenizer;
}

var cssParser;
var hasRequiredCssParser;

function requireCssParser () {
	if (hasRequiredCssParser) return cssParser;
	hasRequiredCssParser = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var cssParser_exports = {};
	__export(cssParser_exports, {
	  InvalidSelectorError: () => InvalidSelectorError,
	  isInvalidSelectorError: () => isInvalidSelectorError,
	  parseCSS: () => parseCSS,
	  serializeSelector: () => serializeSelector
	});
	cssParser = __toCommonJS(cssParser_exports);
	var import_builtins = requireBuiltins();
	var css = __toESM(requireCssTokenizer());
	class InvalidSelectorError extends Error {
	}
	function isInvalidSelectorError(error) {
	  return error instanceof InvalidSelectorError;
	}
	function parseCSS(selector, customNames) {
	  let tokens;
	  try {
	    tokens = css.tokenize(selector);
	    if (!(tokens[tokens.length - 1] instanceof css.EOFToken))
	      tokens.push(new css.EOFToken());
	  } catch (e) {
	    const newMessage = e.message + ` while parsing css selector "${selector}". Did you mean to CSS.escape it?`;
	    const index = (e.stack || "").indexOf(e.message);
	    if (index !== -1)
	      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);
	    e.message = newMessage;
	    throw e;
	  }
	  const unsupportedToken = tokens.find((token) => {
	    return token instanceof css.AtKeywordToken || token instanceof css.BadStringToken || token instanceof css.BadURLToken || token instanceof css.ColumnToken || token instanceof css.CDOToken || token instanceof css.CDCToken || token instanceof css.SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.
	    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }
	    // Or this way :xpath( {complex-xpath-goes-here("hello")} )
	    token instanceof css.OpenCurlyToken || token instanceof css.CloseCurlyToken || // TODO: Consider treating these as strings?
	    token instanceof css.URLToken || token instanceof css.PercentageToken;
	  });
	  if (unsupportedToken)
	    throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
	  let pos = 0;
	  const names = new import_builtins.Set();
	  function unexpected() {
	    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
	  }
	  function skipWhitespace() {
	    while (tokens[pos] instanceof css.WhitespaceToken)
	      pos++;
	  }
	  function isIdent(p = pos) {
	    return tokens[p] instanceof css.IdentToken;
	  }
	  function isString(p = pos) {
	    return tokens[p] instanceof css.StringToken;
	  }
	  function isNumber(p = pos) {
	    return tokens[p] instanceof css.NumberToken;
	  }
	  function isComma(p = pos) {
	    return tokens[p] instanceof css.CommaToken;
	  }
	  function isOpenParen(p = pos) {
	    return tokens[p] instanceof css.OpenParenToken;
	  }
	  function isCloseParen(p = pos) {
	    return tokens[p] instanceof css.CloseParenToken;
	  }
	  function isFunction(p = pos) {
	    return tokens[p] instanceof css.FunctionToken;
	  }
	  function isStar(p = pos) {
	    return tokens[p] instanceof css.DelimToken && tokens[p].value === "*";
	  }
	  function isEOF(p = pos) {
	    return tokens[p] instanceof css.EOFToken;
	  }
	  function isClauseCombinator(p = pos) {
	    return tokens[p] instanceof css.DelimToken && [">", "+", "~"].includes(tokens[p].value);
	  }
	  function isSelectorClauseEnd(p = pos) {
	    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof css.WhitespaceToken;
	  }
	  function consumeFunctionArguments() {
	    const result2 = [consumeArgument()];
	    while (true) {
	      skipWhitespace();
	      if (!isComma())
	        break;
	      pos++;
	      result2.push(consumeArgument());
	    }
	    return result2;
	  }
	  function consumeArgument() {
	    skipWhitespace();
	    if (isNumber())
	      return tokens[pos++].value;
	    if (isString())
	      return tokens[pos++].value;
	    return consumeComplexSelector();
	  }
	  function consumeComplexSelector() {
	    const result2 = { simples: [] };
	    skipWhitespace();
	    if (isClauseCombinator()) {
	      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });
	    } else {
	      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });
	    }
	    while (true) {
	      skipWhitespace();
	      if (isClauseCombinator()) {
	        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;
	        skipWhitespace();
	      } else if (isSelectorClauseEnd()) {
	        break;
	      }
	      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });
	    }
	    return result2;
	  }
	  function consumeSimpleSelector() {
	    let rawCSSString = "";
	    const functions = [];
	    while (!isSelectorClauseEnd()) {
	      if (isIdent() || isStar()) {
	        rawCSSString += tokens[pos++].toSource();
	      } else if (tokens[pos] instanceof css.HashToken) {
	        rawCSSString += tokens[pos++].toSource();
	      } else if (tokens[pos] instanceof css.DelimToken && tokens[pos].value === ".") {
	        pos++;
	        if (isIdent())
	          rawCSSString += "." + tokens[pos++].toSource();
	        else
	          throw unexpected();
	      } else if (tokens[pos] instanceof css.ColonToken) {
	        pos++;
	        if (isIdent()) {
	          if (!customNames.has(tokens[pos].value.toLowerCase())) {
	            rawCSSString += ":" + tokens[pos++].toSource();
	          } else {
	            const name = tokens[pos++].value.toLowerCase();
	            functions.push({ name, args: [] });
	            names.add(name);
	          }
	        } else if (isFunction()) {
	          const name = tokens[pos++].value.toLowerCase();
	          if (!customNames.has(name)) {
	            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;
	          } else {
	            functions.push({ name, args: consumeFunctionArguments() });
	            names.add(name);
	          }
	          skipWhitespace();
	          if (!isCloseParen())
	            throw unexpected();
	          pos++;
	        } else {
	          throw unexpected();
	        }
	      } else if (tokens[pos] instanceof css.OpenSquareToken) {
	        rawCSSString += "[";
	        pos++;
	        while (!(tokens[pos] instanceof css.CloseSquareToken) && !isEOF())
	          rawCSSString += tokens[pos++].toSource();
	        if (!(tokens[pos] instanceof css.CloseSquareToken))
	          throw unexpected();
	        rawCSSString += "]";
	        pos++;
	      } else {
	        throw unexpected();
	      }
	    }
	    if (!rawCSSString && !functions.length)
	      throw unexpected();
	    return { css: rawCSSString || void 0, functions };
	  }
	  function consumeBuiltinFunctionArguments() {
	    let s = "";
	    let balance = 1;
	    while (!isEOF()) {
	      if (isOpenParen() || isFunction())
	        balance++;
	      if (isCloseParen())
	        balance--;
	      if (!balance)
	        break;
	      s += tokens[pos++].toSource();
	    }
	    return s;
	  }
	  const result = consumeFunctionArguments();
	  if (!isEOF())
	    throw unexpected();
	  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))
	    throw new InvalidSelectorError(`Error while parsing css selector "${selector}". Did you mean to CSS.escape it?`);
	  return { selector: result, names: Array.from(names) };
	}
	function serializeSelector(args) {
	  return args.map((arg) => {
	    if (typeof arg === "string")
	      return `"${arg}"`;
	    if (typeof arg === "number")
	      return String(arg);
	    return arg.simples.map(({ selector, combinator }) => {
	      let s = selector.css || "";
	      s = s + selector.functions.map((func) => `:${func.name}(${serializeSelector(func.args)})`).join("");
	      if (combinator)
	        s += " " + combinator;
	      return s;
	    }).join(" ");
	  }).join(", ");
	}
	return cssParser;
}

var selectorParser;
var hasRequiredSelectorParser;

function requireSelectorParser () {
	if (hasRequiredSelectorParser) return selectorParser;
	hasRequiredSelectorParser = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var selectorParser_exports = {};
	__export(selectorParser_exports, {
	  InvalidSelectorError: () => import_cssParser2.InvalidSelectorError,
	  customCSSNames: () => customCSSNames,
	  isInvalidSelectorError: () => import_cssParser2.isInvalidSelectorError,
	  parseAttributeSelector: () => parseAttributeSelector,
	  parseSelector: () => parseSelector,
	  splitSelectorByFrame: () => splitSelectorByFrame,
	  stringifySelector: () => stringifySelector,
	  visitAllSelectorParts: () => visitAllSelectorParts
	});
	selectorParser = __toCommonJS(selectorParser_exports);
	var import_builtins = requireBuiltins();
	var import_cssParser = requireCssParser();
	var import_cssParser2 = requireCssParser();
	const kNestedSelectorNames = new import_builtins.Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
	const kNestedSelectorNamesWithDistance = new import_builtins.Set(["left-of", "right-of", "above", "below", "near"]);
	const customCSSNames = new import_builtins.Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
	function parseSelector(selector) {
	  const parsedStrings = parseSelectorString(selector);
	  const parts = [];
	  for (const part of parsedStrings.parts) {
	    if (part.name === "css" || part.name === "css:light") {
	      if (part.name === "css:light")
	        part.body = ":light(" + part.body + ")";
	      const parsedCSS = (0, import_cssParser.parseCSS)(part.body, customCSSNames);
	      parts.push({
	        name: "css",
	        body: parsedCSS.selector,
	        source: part.body
	      });
	      continue;
	    }
	    if (kNestedSelectorNames.has(part.name)) {
	      let innerSelector;
	      let distance;
	      try {
	        const unescaped = JSON.parse("[" + part.body + "]");
	        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")
	          throw new import_cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
	        innerSelector = unescaped[0];
	        if (unescaped.length === 2) {
	          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))
	            throw new import_cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
	          distance = unescaped[1];
	        }
	      } catch (e) {
	        throw new import_cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
	      }
	      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };
	      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
	      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
	      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))
	        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
	      parts.push(nested);
	      continue;
	    }
	    parts.push({ ...part, source: part.body });
	  }
	  if (kNestedSelectorNames.has(parts[0].name))
	    throw new import_cssParser.InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);
	  return {
	    capture: parsedStrings.capture,
	    parts
	  };
	}
	function splitSelectorByFrame(selectorText) {
	  const selector = parseSelector(selectorText);
	  const result = [];
	  let chunk = {
	    parts: []
	  };
	  let chunkStartIndex = 0;
	  for (let i = 0; i < selector.parts.length; ++i) {
	    const part = selector.parts[i];
	    if (part.name === "internal:control" && part.body === "enter-frame") {
	      if (!chunk.parts.length)
	        throw new import_cssParser.InvalidSelectorError("Selector cannot start with entering frame, select the iframe first");
	      result.push(chunk);
	      chunk = { parts: [] };
	      chunkStartIndex = i + 1;
	      continue;
	    }
	    if (selector.capture === i)
	      chunk.capture = i - chunkStartIndex;
	    chunk.parts.push(part);
	  }
	  if (!chunk.parts.length)
	    throw new import_cssParser.InvalidSelectorError(`Selector cannot end with entering frame, while parsing selector ${selectorText}`);
	  result.push(chunk);
	  if (typeof selector.capture === "number" && typeof result[result.length - 1].capture !== "number")
	    throw new import_cssParser.InvalidSelectorError(`Can not capture the selector before diving into the frame. Only use * after the last frame has been selected`);
	  return result;
	}
	function selectorPartsEqual(list1, list2) {
	  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });
	}
	function stringifySelector(selector, forceEngineName) {
	  if (typeof selector === "string")
	    return selector;
	  return selector.parts.map((p, i) => {
	    let includeEngine = true;
	    if (!forceEngineName && i !== selector.capture) {
	      if (p.name === "css")
	        includeEngine = false;
	      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))
	        includeEngine = false;
	    }
	    const prefix = includeEngine ? p.name + "=" : "";
	    return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;
	  }).join(" >> ");
	}
	function visitAllSelectorParts(selector, visitor) {
	  const visit = (selector2, nested) => {
	    for (const part of selector2.parts) {
	      visitor(part, nested);
	      if (kNestedSelectorNames.has(part.name))
	        visit(part.body.parsed, true);
	    }
	  };
	  visit(selector, false);
	}
	function parseSelectorString(selector) {
	  let index = 0;
	  let quote;
	  let start = 0;
	  const result = { parts: [] };
	  const append = () => {
	    const part = selector.substring(start, index).trim();
	    const eqIndex = part.indexOf("=");
	    let name;
	    let body;
	    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
	      name = part.substring(0, eqIndex).trim();
	      body = part.substring(eqIndex + 1);
	    } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
	      name = "text";
	      body = part;
	    } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
	      name = "text";
	      body = part;
	    } else if (/^\(*\/\//.test(part) || part.startsWith("..")) {
	      name = "xpath";
	      body = part;
	    } else {
	      name = "css";
	      body = part;
	    }
	    let capture = false;
	    if (name[0] === "*") {
	      capture = true;
	      name = name.substring(1);
	    }
	    result.parts.push({ name, body });
	    if (capture) {
	      if (result.capture !== void 0)
	        throw new import_cssParser.InvalidSelectorError(`Only one of the selectors can capture using * modifier`);
	      result.capture = result.parts.length - 1;
	    }
	  };
	  if (!selector.includes(">>")) {
	    index = selector.length;
	    append();
	    return result;
	  }
	  const shouldIgnoreTextSelectorQuote = () => {
	    const prefix = selector.substring(start, index);
	    const match = prefix.match(/^\s*text\s*=(.*)$/);
	    return !!match && !!match[1];
	  };
	  while (index < selector.length) {
	    const c = selector[index];
	    if (c === "\\" && index + 1 < selector.length) {
	      index += 2;
	    } else if (c === quote) {
	      quote = void 0;
	      index++;
	    } else if (!quote && (c === '"' || c === "'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {
	      quote = c;
	      index++;
	    } else if (!quote && c === ">" && selector[index + 1] === ">") {
	      append();
	      index += 2;
	      start = index;
	    } else {
	      index++;
	    }
	  }
	  append();
	  return result;
	}
	function parseAttributeSelector(selector, allowUnquotedStrings) {
	  let wp = 0;
	  let EOL = selector.length === 0;
	  const next = () => selector[wp] || "";
	  const eat1 = () => {
	    const result2 = next();
	    ++wp;
	    EOL = wp >= selector.length;
	    return result2;
	  };
	  const syntaxError = (stage) => {
	    if (EOL)
	      throw new import_cssParser.InvalidSelectorError(`Unexpected end of selector while parsing selector \`${selector}\``);
	    throw new import_cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));
	  };
	  function skipSpaces() {
	    while (!EOL && /\s/.test(next()))
	      eat1();
	  }
	  function isCSSNameChar(char) {
	    return char >= "\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
	  }
	  function readIdentifier() {
	    let result2 = "";
	    skipSpaces();
	    while (!EOL && isCSSNameChar(next()))
	      result2 += eat1();
	    return result2;
	  }
	  function readQuotedString(quote) {
	    let result2 = eat1();
	    if (result2 !== quote)
	      syntaxError("parsing quoted string");
	    while (!EOL && next() !== quote) {
	      if (next() === "\\")
	        eat1();
	      result2 += eat1();
	    }
	    if (next() !== quote)
	      syntaxError("parsing quoted string");
	    result2 += eat1();
	    return result2;
	  }
	  function readRegularExpression() {
	    if (eat1() !== "/")
	      syntaxError("parsing regular expression");
	    let source = "";
	    let inClass = false;
	    while (!EOL) {
	      if (next() === "\\") {
	        source += eat1();
	        if (EOL)
	          syntaxError("parsing regular expression");
	      } else if (inClass && next() === "]") {
	        inClass = false;
	      } else if (!inClass && next() === "[") {
	        inClass = true;
	      } else if (!inClass && next() === "/") {
	        break;
	      }
	      source += eat1();
	    }
	    if (eat1() !== "/")
	      syntaxError("parsing regular expression");
	    let flags = "";
	    while (!EOL && next().match(/[dgimsuy]/))
	      flags += eat1();
	    try {
	      return new RegExp(source, flags);
	    } catch (e) {
	      throw new import_cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\`: ${e.message}`);
	    }
	  }
	  function readAttributeToken() {
	    let token = "";
	    skipSpaces();
	    if (next() === `'` || next() === `"`)
	      token = readQuotedString(next()).slice(1, -1);
	    else
	      token = readIdentifier();
	    if (!token)
	      syntaxError("parsing property path");
	    return token;
	  }
	  function readOperator() {
	    skipSpaces();
	    let op = "";
	    if (!EOL)
	      op += eat1();
	    if (!EOL && op !== "=")
	      op += eat1();
	    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))
	      syntaxError("parsing operator");
	    return op;
	  }
	  function readAttribute() {
	    eat1();
	    const jsonPath = [];
	    jsonPath.push(readAttributeToken());
	    skipSpaces();
	    while (next() === ".") {
	      eat1();
	      jsonPath.push(readAttributeToken());
	      skipSpaces();
	    }
	    if (next() === "]") {
	      eat1();
	      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };
	    }
	    const operator = readOperator();
	    let value = void 0;
	    let caseSensitive = true;
	    skipSpaces();
	    if (next() === "/") {
	      if (operator !== "=")
	        throw new import_cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with regular expression`);
	      value = readRegularExpression();
	    } else if (next() === `'` || next() === `"`) {
	      value = readQuotedString(next()).slice(1, -1);
	      skipSpaces();
	      if (next() === "i" || next() === "I") {
	        caseSensitive = false;
	        eat1();
	      } else if (next() === "s" || next() === "S") {
	        caseSensitive = true;
	        eat1();
	      }
	    } else {
	      value = "";
	      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))
	        value += eat1();
	      if (value === "true") {
	        value = true;
	      } else if (value === "false") {
	        value = false;
	      } else {
	        if (!allowUnquotedStrings) {
	          value = +value;
	          if (Number.isNaN(value))
	            syntaxError("parsing attribute value");
	        }
	      }
	    }
	    skipSpaces();
	    if (next() !== "]")
	      syntaxError("parsing attribute value");
	    eat1();
	    if (operator !== "=" && typeof value !== "string")
	      throw new import_cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);
	    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };
	  }
	  const result = {
	    name: "",
	    attributes: []
	  };
	  result.name = readIdentifier();
	  skipSpaces();
	  while (next() === "[") {
	    result.attributes.push(readAttribute());
	    skipSpaces();
	  }
	  if (!EOL)
	    syntaxError(void 0);
	  if (!result.name && !result.attributes.length)
	    throw new import_cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - selector cannot be empty`);
	  return result;
	}
	return selectorParser;
}

var stringUtils;
var hasRequiredStringUtils;

function requireStringUtils () {
	if (hasRequiredStringUtils) return stringUtils;
	hasRequiredStringUtils = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var stringUtils_exports = {};
	__export(stringUtils_exports, {
	  cacheNormalizedWhitespaces: () => cacheNormalizedWhitespaces,
	  cssEscape: () => cssEscape,
	  escapeForAttributeSelector: () => escapeForAttributeSelector,
	  escapeForTextSelector: () => escapeForTextSelector,
	  escapeHTML: () => escapeHTML,
	  escapeHTMLAttribute: () => escapeHTMLAttribute,
	  escapeRegExp: () => escapeRegExp,
	  escapeTemplateString: () => escapeTemplateString,
	  escapeWithQuotes: () => escapeWithQuotes,
	  isString: () => isString,
	  longestCommonSubstring: () => longestCommonSubstring,
	  normalizeEscapedRegexQuotes: () => normalizeEscapedRegexQuotes,
	  normalizeWhiteSpace: () => normalizeWhiteSpace,
	  quoteCSSAttributeValue: () => quoteCSSAttributeValue,
	  toSnakeCase: () => toSnakeCase,
	  toTitleCase: () => toTitleCase,
	  trimString: () => trimString,
	  trimStringWithEllipsis: () => trimStringWithEllipsis
	});
	stringUtils = __toCommonJS(stringUtils_exports);
	var import_builtins = requireBuiltins();
	function escapeWithQuotes(text, char = "'") {
	  const stringified = JSON.stringify(text);
	  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\"/g, '"');
	  if (char === "'")
	    return char + escapedText.replace(/[']/g, "\\'") + char;
	  if (char === '"')
	    return char + escapedText.replace(/["]/g, '\\"') + char;
	  if (char === "`")
	    return char + escapedText.replace(/[`]/g, "`") + char;
	  throw new Error("Invalid escape char");
	}
	function escapeTemplateString(text) {
	  return text.replace(/\\/g, "\\\\").replace(/`/g, "\\`").replace(/\$\{/g, "\\${");
	}
	function isString(obj) {
	  return typeof obj === "string" || obj instanceof String;
	}
	function toTitleCase(name) {
	  return name.charAt(0).toUpperCase() + name.substring(1);
	}
	function toSnakeCase(name) {
	  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
	}
	function cssEscape(s) {
	  let result = "";
	  for (let i = 0; i < s.length; i++)
	    result += cssEscapeOne(s, i);
	  return result;
	}
	function quoteCSSAttributeValue(text) {
	  return `"${cssEscape(text).replace(/\\ /g, " ")}"`;
	}
	function cssEscapeOne(s, i) {
	  const c = s.charCodeAt(i);
	  if (c === 0)
	    return "\uFFFD";
	  if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))
	    return "\\" + c.toString(16) + " ";
	  if (i === 0 && c === 45 && s.length === 1)
	    return "\\" + s.charAt(i);
	  if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)
	    return s.charAt(i);
	  return "\\" + s.charAt(i);
	}
	let normalizedWhitespaceCache;
	function cacheNormalizedWhitespaces() {
	  normalizedWhitespaceCache = new import_builtins.Map();
	}
	function normalizeWhiteSpace(text) {
	  let result = normalizedWhitespaceCache?.get(text);
	  if (result === void 0) {
	    result = text.replace(/[\u200b\u00ad]/g, "").trim().replace(/\s+/g, " ");
	    normalizedWhitespaceCache?.set(text, result);
	  }
	  return result;
	}
	function normalizeEscapedRegexQuotes(source) {
	  return source.replace(/(^|[^\\])(\\\\)*\\(['"`])/g, "$1$2$3");
	}
	function escapeRegexForSelector(re) {
	  if (re.unicode || re.unicodeSets)
	    return String(re);
	  return String(re).replace(/(^|[^\\])(\\\\)*(["'`])/g, "$1$2\\$3").replace(/>>/g, "\\>\\>");
	}
	function escapeForTextSelector(text, exact) {
	  if (typeof text !== "string")
	    return escapeRegexForSelector(text);
	  return `${JSON.stringify(text)}${exact ? "s" : "i"}`;
	}
	function escapeForAttributeSelector(value, exact) {
	  if (typeof value !== "string")
	    return escapeRegexForSelector(value);
	  return `"${value.replace(/\\/g, "\\\\").replace(/["]/g, '\\"')}"${exact ? "s" : "i"}`;
	}
	function trimString(input, cap, suffix = "") {
	  if (input.length <= cap)
	    return input;
	  const chars = [...input];
	  if (chars.length > cap)
	    return chars.slice(0, cap - suffix.length).join("") + suffix;
	  return chars.join("");
	}
	function trimStringWithEllipsis(input, cap) {
	  return trimString(input, cap, "\u2026");
	}
	function escapeRegExp(s) {
	  return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
	}
	const escaped = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" };
	function escapeHTMLAttribute(s) {
	  return s.replace(/[&<>"']/ug, (char) => escaped[char]);
	}
	function escapeHTML(s) {
	  return s.replace(/[&<]/ug, (char) => escaped[char]);
	}
	function longestCommonSubstring(s1, s2) {
	  const n = s1.length;
	  const m = s2.length;
	  let maxLen = 0;
	  let endingIndex = 0;
	  const dp = Array(n + 1).fill(null).map(() => Array(m + 1).fill(0));
	  for (let i = 1; i <= n; i++) {
	    for (let j = 1; j <= m; j++) {
	      if (s1[i - 1] === s2[j - 1]) {
	        dp[i][j] = dp[i - 1][j - 1] + 1;
	        if (dp[i][j] > maxLen) {
	          maxLen = dp[i][j];
	          endingIndex = i;
	        }
	      }
	    }
	  }
	  return s1.slice(endingIndex - maxLen, endingIndex);
	}
	return stringUtils;
}

var locatorGenerators;
var hasRequiredLocatorGenerators;

function requireLocatorGenerators () {
	if (hasRequiredLocatorGenerators) return locatorGenerators;
	hasRequiredLocatorGenerators = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var locatorGenerators_exports = {};
	__export(locatorGenerators_exports, {
	  CSharpLocatorFactory: () => CSharpLocatorFactory,
	  JavaLocatorFactory: () => JavaLocatorFactory,
	  JavaScriptLocatorFactory: () => JavaScriptLocatorFactory,
	  JsonlLocatorFactory: () => JsonlLocatorFactory,
	  PythonLocatorFactory: () => PythonLocatorFactory,
	  asLocator: () => asLocator,
	  asLocators: () => asLocators
	});
	locatorGenerators = __toCommonJS(locatorGenerators_exports);
	var import_selectorParser = requireSelectorParser();
	var import_stringUtils = requireStringUtils();
	function asLocator(lang, selector, isFrameLocator = false) {
	  return asLocators(lang, selector, isFrameLocator, 1)[0];
	}
	function asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
	  try {
	    return innerAsLocators(new generators[lang](preferredQuote), (0, import_selectorParser.parseSelector)(selector), isFrameLocator, maxOutputSize);
	  } catch (e) {
	    return [selector];
	  }
	}
	function innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
	  const parts = [...parsed.parts];
	  const tokens = [];
	  let nextBase = isFrameLocator ? "frame-locator" : "page";
	  for (let index = 0; index < parts.length; index++) {
	    const part = parts[index];
	    const base = nextBase;
	    nextBase = "locator";
	    if (part.name === "nth") {
	      if (part.body === "0")
	        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
	      else if (part.body === "-1")
	        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
	      else
	        tokens.push([factory.generateLocator(base, "nth", part.body)]);
	      continue;
	    }
	    if (part.name === "visible") {
	      tokens.push([factory.generateLocator(base, "visible", part.body), factory.generateLocator(base, "default", `visible=${part.body}`)]);
	      continue;
	    }
	    if (part.name === "internal:text") {
	      const { exact, text } = detectExact(part.body);
	      tokens.push([factory.generateLocator(base, "text", text, { exact })]);
	      continue;
	    }
	    if (part.name === "internal:has-text") {
	      const { exact, text } = detectExact(part.body);
	      if (!exact) {
	        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);
	        continue;
	      }
	    }
	    if (part.name === "internal:has-not-text") {
	      const { exact, text } = detectExact(part.body);
	      if (!exact) {
	        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);
	        continue;
	      }
	    }
	    if (part.name === "internal:has") {
	      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
	      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
	      continue;
	    }
	    if (part.name === "internal:has-not") {
	      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
	      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
	      continue;
	    }
	    if (part.name === "internal:and") {
	      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
	      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
	      continue;
	    }
	    if (part.name === "internal:or") {
	      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
	      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
	      continue;
	    }
	    if (part.name === "internal:chain") {
	      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
	      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
	      continue;
	    }
	    if (part.name === "internal:label") {
	      const { exact, text } = detectExact(part.body);
	      tokens.push([factory.generateLocator(base, "label", text, { exact })]);
	      continue;
	    }
	    if (part.name === "internal:role") {
	      const attrSelector = (0, import_selectorParser.parseAttributeSelector)(part.body, true);
	      const options = { attrs: [] };
	      for (const attr of attrSelector.attributes) {
	        if (attr.name === "name") {
	          options.exact = attr.caseSensitive;
	          options.name = attr.value;
	        } else {
	          if (attr.name === "level" && typeof attr.value === "string")
	            attr.value = +attr.value;
	          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });
	        }
	      }
	      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
	      continue;
	    }
	    if (part.name === "internal:testid") {
	      const attrSelector = (0, import_selectorParser.parseAttributeSelector)(part.body, true);
	      const { value } = attrSelector.attributes[0];
	      tokens.push([factory.generateLocator(base, "test-id", value)]);
	      continue;
	    }
	    if (part.name === "internal:attr") {
	      const attrSelector = (0, import_selectorParser.parseAttributeSelector)(part.body, true);
	      const { name, value, caseSensitive } = attrSelector.attributes[0];
	      const text = value;
	      const exact = !!caseSensitive;
	      if (name === "placeholder") {
	        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);
	        continue;
	      }
	      if (name === "alt") {
	        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);
	        continue;
	      }
	      if (name === "title") {
	        tokens.push([factory.generateLocator(base, "title", text, { exact })]);
	        continue;
	      }
	    }
	    if (part.name === "internal:control" && part.body === "enter-frame") {
	      const lastTokens = tokens[tokens.length - 1];
	      const lastPart = parts[index - 1];
	      const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));
	      if (["xpath", "css"].includes(lastPart.name)) {
	        transformed.push(
	          factory.generateLocator(base, "frame-locator", (0, import_selectorParser.stringifySelector)({ parts: [lastPart] })),
	          factory.generateLocator(base, "frame-locator", (0, import_selectorParser.stringifySelector)({ parts: [lastPart] }, true))
	        );
	      }
	      lastTokens.splice(0, lastTokens.length, ...transformed);
	      nextBase = "frame-locator";
	      continue;
	    }
	    const nextPart = parts[index + 1];
	    const selectorPart = (0, import_selectorParser.stringifySelector)({ parts: [part] });
	    const locatorPart = factory.generateLocator(base, "default", selectorPart);
	    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
	      const { exact, text } = detectExact(nextPart.body);
	      if (!exact) {
	        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });
	        const options = {};
	        if (nextPart.name === "internal:has-text")
	          options.hasText = text;
	        else
	          options.hasNotText = text;
	        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
	        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
	        index++;
	        continue;
	      }
	    }
	    let locatorPartWithEngine;
	    if (["xpath", "css"].includes(part.name)) {
	      const selectorPart2 = (0, import_selectorParser.stringifySelector)(
	        { parts: [part] },
	        /* forceEngineName */
	        true
	      );
	      locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);
	    }
	    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
	  }
	  return combineTokens(factory, tokens, maxOutputSize);
	}
	function combineTokens(factory, tokens, maxOutputSize) {
	  const currentTokens = tokens.map(() => "");
	  const result = [];
	  const visit = (index) => {
	    if (index === tokens.length) {
	      result.push(factory.chainLocators(currentTokens));
	      return result.length < maxOutputSize;
	    }
	    for (const taken of tokens[index]) {
	      currentTokens[index] = taken;
	      if (!visit(index + 1))
	        return false;
	    }
	    return true;
	  };
	  visit(0);
	  return result;
	}
	function detectExact(text) {
	  let exact = false;
	  const match = text.match(/^\/(.*)\/([igm]*)$/);
	  if (match)
	    return { text: new RegExp(match[1], match[2]) };
	  if (text.endsWith('"')) {
	    text = JSON.parse(text);
	    exact = true;
	  } else if (text.endsWith('"s')) {
	    text = JSON.parse(text.substring(0, text.length - 1));
	    exact = true;
	  } else if (text.endsWith('"i')) {
	    text = JSON.parse(text.substring(0, text.length - 1));
	    exact = false;
	  }
	  return { exact, text };
	}
	class JavaScriptLocatorFactory {
	  constructor(preferredQuote) {
	    this.preferredQuote = preferredQuote;
	  }
	  generateLocator(base, kind, body, options = {}) {
	    switch (kind) {
	      case "default":
	        if (options.hasText !== void 0)
	          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;
	        if (options.hasNotText !== void 0)
	          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;
	        return `locator(${this.quote(body)})`;
	      case "frame-locator":
	        return `frameLocator(${this.quote(body)})`;
	      case "frame":
	        return `contentFrame()`;
	      case "nth":
	        return `nth(${body})`;
	      case "first":
	        return `first()`;
	      case "last":
	        return `last()`;
	      case "visible":
	        return `filter({ visible: ${body === "true" ? "true" : "false"} })`;
	      case "role":
	        const attrs = [];
	        if (isRegExp(options.name)) {
	          attrs.push(`name: ${this.regexToSourceString(options.name)}`);
	        } else if (typeof options.name === "string") {
	          attrs.push(`name: ${this.quote(options.name)}`);
	          if (options.exact)
	            attrs.push(`exact: true`);
	        }
	        for (const { name, value } of options.attrs)
	          attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);
	        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";
	        return `getByRole(${this.quote(body)}${attrString})`;
	      case "has-text":
	        return `filter({ hasText: ${this.toHasText(body)} })`;
	      case "has-not-text":
	        return `filter({ hasNotText: ${this.toHasText(body)} })`;
	      case "has":
	        return `filter({ has: ${body} })`;
	      case "hasNot":
	        return `filter({ hasNot: ${body} })`;
	      case "and":
	        return `and(${body})`;
	      case "or":
	        return `or(${body})`;
	      case "chain":
	        return `locator(${body})`;
	      case "test-id":
	        return `getByTestId(${this.toTestIdValue(body)})`;
	      case "text":
	        return this.toCallWithExact("getByText", body, !!options.exact);
	      case "alt":
	        return this.toCallWithExact("getByAltText", body, !!options.exact);
	      case "placeholder":
	        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
	      case "label":
	        return this.toCallWithExact("getByLabel", body, !!options.exact);
	      case "title":
	        return this.toCallWithExact("getByTitle", body, !!options.exact);
	      default:
	        throw new Error("Unknown selector kind " + kind);
	    }
	  }
	  chainLocators(locators) {
	    return locators.join(".");
	  }
	  regexToSourceString(re) {
	    return (0, import_stringUtils.normalizeEscapedRegexQuotes)(String(re));
	  }
	  toCallWithExact(method, body, exact) {
	    if (isRegExp(body))
	      return `${method}(${this.regexToSourceString(body)})`;
	    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;
	  }
	  toHasText(body) {
	    if (isRegExp(body))
	      return this.regexToSourceString(body);
	    return this.quote(body);
	  }
	  toTestIdValue(value) {
	    if (isRegExp(value))
	      return this.regexToSourceString(value);
	    return this.quote(value);
	  }
	  quote(text) {
	    return (0, import_stringUtils.escapeWithQuotes)(text, this.preferredQuote ?? "'");
	  }
	}
	class PythonLocatorFactory {
	  generateLocator(base, kind, body, options = {}) {
	    switch (kind) {
	      case "default":
	        if (options.hasText !== void 0)
	          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;
	        if (options.hasNotText !== void 0)
	          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;
	        return `locator(${this.quote(body)})`;
	      case "frame-locator":
	        return `frame_locator(${this.quote(body)})`;
	      case "frame":
	        return `content_frame`;
	      case "nth":
	        return `nth(${body})`;
	      case "first":
	        return `first`;
	      case "last":
	        return `last`;
	      case "visible":
	        return `filter(visible=${body === "true" ? "True" : "False"})`;
	      case "role":
	        const attrs = [];
	        if (isRegExp(options.name)) {
	          attrs.push(`name=${this.regexToString(options.name)}`);
	        } else if (typeof options.name === "string") {
	          attrs.push(`name=${this.quote(options.name)}`);
	          if (options.exact)
	            attrs.push(`exact=True`);
	        }
	        for (const { name, value } of options.attrs) {
	          let valueString = typeof value === "string" ? this.quote(value) : value;
	          if (typeof value === "boolean")
	            valueString = value ? "True" : "False";
	          attrs.push(`${(0, import_stringUtils.toSnakeCase)(name)}=${valueString}`);
	        }
	        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";
	        return `get_by_role(${this.quote(body)}${attrString})`;
	      case "has-text":
	        return `filter(has_text=${this.toHasText(body)})`;
	      case "has-not-text":
	        return `filter(has_not_text=${this.toHasText(body)})`;
	      case "has":
	        return `filter(has=${body})`;
	      case "hasNot":
	        return `filter(has_not=${body})`;
	      case "and":
	        return `and_(${body})`;
	      case "or":
	        return `or_(${body})`;
	      case "chain":
	        return `locator(${body})`;
	      case "test-id":
	        return `get_by_test_id(${this.toTestIdValue(body)})`;
	      case "text":
	        return this.toCallWithExact("get_by_text", body, !!options.exact);
	      case "alt":
	        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
	      case "placeholder":
	        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
	      case "label":
	        return this.toCallWithExact("get_by_label", body, !!options.exact);
	      case "title":
	        return this.toCallWithExact("get_by_title", body, !!options.exact);
	      default:
	        throw new Error("Unknown selector kind " + kind);
	    }
	  }
	  chainLocators(locators) {
	    return locators.join(".");
	  }
	  regexToString(body) {
	    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
	    return `re.compile(r"${(0, import_stringUtils.normalizeEscapedRegexQuotes)(body.source).replace(/\\\//, "/").replace(/"/g, '\\"')}"${suffix})`;
	  }
	  toCallWithExact(method, body, exact) {
	    if (isRegExp(body))
	      return `${method}(${this.regexToString(body)})`;
	    if (exact)
	      return `${method}(${this.quote(body)}, exact=True)`;
	    return `${method}(${this.quote(body)})`;
	  }
	  toHasText(body) {
	    if (isRegExp(body))
	      return this.regexToString(body);
	    return `${this.quote(body)}`;
	  }
	  toTestIdValue(value) {
	    if (isRegExp(value))
	      return this.regexToString(value);
	    return this.quote(value);
	  }
	  quote(text) {
	    return (0, import_stringUtils.escapeWithQuotes)(text, '"');
	  }
	}
	class JavaLocatorFactory {
	  generateLocator(base, kind, body, options = {}) {
	    let clazz;
	    switch (base) {
	      case "page":
	        clazz = "Page";
	        break;
	      case "frame-locator":
	        clazz = "FrameLocator";
	        break;
	      case "locator":
	        clazz = "Locator";
	        break;
	    }
	    switch (kind) {
	      case "default":
	        if (options.hasText !== void 0)
	          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;
	        if (options.hasNotText !== void 0)
	          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;
	        return `locator(${this.quote(body)})`;
	      case "frame-locator":
	        return `frameLocator(${this.quote(body)})`;
	      case "frame":
	        return `contentFrame()`;
	      case "nth":
	        return `nth(${body})`;
	      case "first":
	        return `first()`;
	      case "last":
	        return `last()`;
	      case "visible":
	        return `filter(new ${clazz}.FilterOptions().setVisible(${body === "true" ? "true" : "false"}))`;
	      case "role":
	        const attrs = [];
	        if (isRegExp(options.name)) {
	          attrs.push(`.setName(${this.regexToString(options.name)})`);
	        } else if (typeof options.name === "string") {
	          attrs.push(`.setName(${this.quote(options.name)})`);
	          if (options.exact)
	            attrs.push(`.setExact(true)`);
	        }
	        for (const { name, value } of options.attrs)
	          attrs.push(`.set${(0, import_stringUtils.toTitleCase)(name)}(${typeof value === "string" ? this.quote(value) : value})`);
	        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";
	        return `getByRole(AriaRole.${(0, import_stringUtils.toSnakeCase)(body).toUpperCase()}${attrString})`;
	      case "has-text":
	        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;
	      case "has-not-text":
	        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;
	      case "has":
	        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;
	      case "hasNot":
	        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;
	      case "and":
	        return `and(${body})`;
	      case "or":
	        return `or(${body})`;
	      case "chain":
	        return `locator(${body})`;
	      case "test-id":
	        return `getByTestId(${this.toTestIdValue(body)})`;
	      case "text":
	        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
	      case "alt":
	        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
	      case "placeholder":
	        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
	      case "label":
	        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
	      case "title":
	        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
	      default:
	        throw new Error("Unknown selector kind " + kind);
	    }
	  }
	  chainLocators(locators) {
	    return locators.join(".");
	  }
	  regexToString(body) {
	    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
	    return `Pattern.compile(${this.quote((0, import_stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
	  }
	  toCallWithExact(clazz, method, body, exact) {
	    if (isRegExp(body))
	      return `${method}(${this.regexToString(body)})`;
	    if (exact)
	      return `${method}(${this.quote(body)}, new ${clazz}.${(0, import_stringUtils.toTitleCase)(method)}Options().setExact(true))`;
	    return `${method}(${this.quote(body)})`;
	  }
	  toHasText(body) {
	    if (isRegExp(body))
	      return this.regexToString(body);
	    return this.quote(body);
	  }
	  toTestIdValue(value) {
	    if (isRegExp(value))
	      return this.regexToString(value);
	    return this.quote(value);
	  }
	  quote(text) {
	    return (0, import_stringUtils.escapeWithQuotes)(text, '"');
	  }
	}
	class CSharpLocatorFactory {
	  generateLocator(base, kind, body, options = {}) {
	    switch (kind) {
	      case "default":
	        if (options.hasText !== void 0)
	          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;
	        if (options.hasNotText !== void 0)
	          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;
	        return `Locator(${this.quote(body)})`;
	      case "frame-locator":
	        return `FrameLocator(${this.quote(body)})`;
	      case "frame":
	        return `ContentFrame`;
	      case "nth":
	        return `Nth(${body})`;
	      case "first":
	        return `First`;
	      case "last":
	        return `Last`;
	      case "visible":
	        return `Filter(new() { Visible = ${body === "true" ? "true" : "false"} })`;
	      case "role":
	        const attrs = [];
	        if (isRegExp(options.name)) {
	          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);
	        } else if (typeof options.name === "string") {
	          attrs.push(`Name = ${this.quote(options.name)}`);
	          if (options.exact)
	            attrs.push(`Exact = true`);
	        }
	        for (const { name, value } of options.attrs)
	          attrs.push(`${(0, import_stringUtils.toTitleCase)(name)} = ${typeof value === "string" ? this.quote(value) : value}`);
	        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";
	        return `GetByRole(AriaRole.${(0, import_stringUtils.toTitleCase)(body)}${attrString})`;
	      case "has-text":
	        return `Filter(new() { ${this.toHasText(body)} })`;
	      case "has-not-text":
	        return `Filter(new() { ${this.toHasNotText(body)} })`;
	      case "has":
	        return `Filter(new() { Has = ${body} })`;
	      case "hasNot":
	        return `Filter(new() { HasNot = ${body} })`;
	      case "and":
	        return `And(${body})`;
	      case "or":
	        return `Or(${body})`;
	      case "chain":
	        return `Locator(${body})`;
	      case "test-id":
	        return `GetByTestId(${this.toTestIdValue(body)})`;
	      case "text":
	        return this.toCallWithExact("GetByText", body, !!options.exact);
	      case "alt":
	        return this.toCallWithExact("GetByAltText", body, !!options.exact);
	      case "placeholder":
	        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
	      case "label":
	        return this.toCallWithExact("GetByLabel", body, !!options.exact);
	      case "title":
	        return this.toCallWithExact("GetByTitle", body, !!options.exact);
	      default:
	        throw new Error("Unknown selector kind " + kind);
	    }
	  }
	  chainLocators(locators) {
	    return locators.join(".");
	  }
	  regexToString(body) {
	    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
	    return `new Regex(${this.quote((0, import_stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
	  }
	  toCallWithExact(method, body, exact) {
	    if (isRegExp(body))
	      return `${method}(${this.regexToString(body)})`;
	    if (exact)
	      return `${method}(${this.quote(body)}, new() { Exact = true })`;
	    return `${method}(${this.quote(body)})`;
	  }
	  toHasText(body) {
	    if (isRegExp(body))
	      return `HasTextRegex = ${this.regexToString(body)}`;
	    return `HasText = ${this.quote(body)}`;
	  }
	  toTestIdValue(value) {
	    if (isRegExp(value))
	      return this.regexToString(value);
	    return this.quote(value);
	  }
	  toHasNotText(body) {
	    if (isRegExp(body))
	      return `HasNotTextRegex = ${this.regexToString(body)}`;
	    return `HasNotText = ${this.quote(body)}`;
	  }
	  quote(text) {
	    return (0, import_stringUtils.escapeWithQuotes)(text, '"');
	  }
	}
	class JsonlLocatorFactory {
	  generateLocator(base, kind, body, options = {}) {
	    return JSON.stringify({
	      kind,
	      body,
	      options
	    });
	  }
	  chainLocators(locators) {
	    const objects = locators.map((l) => JSON.parse(l));
	    for (let i = 0; i < objects.length - 1; ++i)
	      objects[i].next = objects[i + 1];
	    return JSON.stringify(objects[0]);
	  }
	}
	const generators = {
	  javascript: JavaScriptLocatorFactory,
	  python: PythonLocatorFactory,
	  java: JavaLocatorFactory,
	  csharp: CSharpLocatorFactory,
	  jsonl: JsonlLocatorFactory
	};
	function isRegExp(obj) {
	  return obj instanceof RegExp;
	}
	return locatorGenerators;
}

var mimeType;
var hasRequiredMimeType;

function requireMimeType () {
	if (hasRequiredMimeType) return mimeType;
	hasRequiredMimeType = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var mimeType_exports = {};
	__export(mimeType_exports, {
	  getMimeTypeForPath: () => getMimeTypeForPath,
	  isJsonMimeType: () => isJsonMimeType,
	  isTextualMimeType: () => isTextualMimeType
	});
	mimeType = __toCommonJS(mimeType_exports);
	var import_builtins = requireBuiltins();
	function isJsonMimeType(mimeType) {
	  return !!mimeType.match(/^(application\/json|application\/.*?\+json|text\/(x-)?json)(;\s*charset=.*)?$/);
	}
	function isTextualMimeType(mimeType) {
	  return !!mimeType.match(/^(text\/.*?|application\/(json|(x-)?javascript|xml.*?|ecmascript|graphql|x-www-form-urlencoded)|image\/svg(\+xml)?|application\/.*?(\+json|\+xml))(;\s*charset=.*)?$/);
	}
	function getMimeTypeForPath(path) {
	  const dotIndex = path.lastIndexOf(".");
	  if (dotIndex === -1)
	    return null;
	  const extension = path.substring(dotIndex + 1);
	  return types.get(extension) || null;
	}
	const types = new import_builtins.Map([
	  ["ez", "application/andrew-inset"],
	  ["aw", "application/applixware"],
	  ["atom", "application/atom+xml"],
	  ["atomcat", "application/atomcat+xml"],
	  ["atomdeleted", "application/atomdeleted+xml"],
	  ["atomsvc", "application/atomsvc+xml"],
	  ["dwd", "application/atsc-dwd+xml"],
	  ["held", "application/atsc-held+xml"],
	  ["rsat", "application/atsc-rsat+xml"],
	  ["bdoc", "application/bdoc"],
	  ["xcs", "application/calendar+xml"],
	  ["ccxml", "application/ccxml+xml"],
	  ["cdfx", "application/cdfx+xml"],
	  ["cdmia", "application/cdmi-capability"],
	  ["cdmic", "application/cdmi-container"],
	  ["cdmid", "application/cdmi-domain"],
	  ["cdmio", "application/cdmi-object"],
	  ["cdmiq", "application/cdmi-queue"],
	  ["cu", "application/cu-seeme"],
	  ["mpd", "application/dash+xml"],
	  ["davmount", "application/davmount+xml"],
	  ["dbk", "application/docbook+xml"],
	  ["dssc", "application/dssc+der"],
	  ["xdssc", "application/dssc+xml"],
	  ["ecma", "application/ecmascript"],
	  ["es", "application/ecmascript"],
	  ["emma", "application/emma+xml"],
	  ["emotionml", "application/emotionml+xml"],
	  ["epub", "application/epub+zip"],
	  ["exi", "application/exi"],
	  ["exp", "application/express"],
	  ["fdt", "application/fdt+xml"],
	  ["pfr", "application/font-tdpfr"],
	  ["geojson", "application/geo+json"],
	  ["gml", "application/gml+xml"],
	  ["gpx", "application/gpx+xml"],
	  ["gxf", "application/gxf"],
	  ["gz", "application/gzip"],
	  ["hjson", "application/hjson"],
	  ["stk", "application/hyperstudio"],
	  ["ink", "application/inkml+xml"],
	  ["inkml", "application/inkml+xml"],
	  ["ipfix", "application/ipfix"],
	  ["its", "application/its+xml"],
	  ["ear", "application/java-archive"],
	  ["jar", "application/java-archive"],
	  ["war", "application/java-archive"],
	  ["ser", "application/java-serialized-object"],
	  ["class", "application/java-vm"],
	  ["js", "application/javascript"],
	  ["mjs", "application/javascript"],
	  ["json", "application/json"],
	  ["map", "application/json"],
	  ["json5", "application/json5"],
	  ["jsonml", "application/jsonml+json"],
	  ["jsonld", "application/ld+json"],
	  ["lgr", "application/lgr+xml"],
	  ["lostxml", "application/lost+xml"],
	  ["hqx", "application/mac-binhex40"],
	  ["cpt", "application/mac-compactpro"],
	  ["mads", "application/mads+xml"],
	  ["webmanifest", "application/manifest+json"],
	  ["mrc", "application/marc"],
	  ["mrcx", "application/marcxml+xml"],
	  ["ma", "application/mathematica"],
	  ["mb", "application/mathematica"],
	  ["nb", "application/mathematica"],
	  ["mathml", "application/mathml+xml"],
	  ["mbox", "application/mbox"],
	  ["mscml", "application/mediaservercontrol+xml"],
	  ["metalink", "application/metalink+xml"],
	  ["meta4", "application/metalink4+xml"],
	  ["mets", "application/mets+xml"],
	  ["maei", "application/mmt-aei+xml"],
	  ["musd", "application/mmt-usd+xml"],
	  ["mods", "application/mods+xml"],
	  ["m21", "application/mp21"],
	  ["mp21", "application/mp21"],
	  ["m4p", "application/mp4"],
	  ["mp4s", "application/mp4"],
	  ["doc", "application/msword"],
	  ["dot", "application/msword"],
	  ["mxf", "application/mxf"],
	  ["nq", "application/n-quads"],
	  ["nt", "application/n-triples"],
	  ["cjs", "application/node"],
	  ["bin", "application/octet-stream"],
	  ["bpk", "application/octet-stream"],
	  ["buffer", "application/octet-stream"],
	  ["deb", "application/octet-stream"],
	  ["deploy", "application/octet-stream"],
	  ["dist", "application/octet-stream"],
	  ["distz", "application/octet-stream"],
	  ["dll", "application/octet-stream"],
	  ["dmg", "application/octet-stream"],
	  ["dms", "application/octet-stream"],
	  ["dump", "application/octet-stream"],
	  ["elc", "application/octet-stream"],
	  ["exe", "application/octet-stream"],
	  ["img", "application/octet-stream"],
	  ["iso", "application/octet-stream"],
	  ["lrf", "application/octet-stream"],
	  ["mar", "application/octet-stream"],
	  ["msi", "application/octet-stream"],
	  ["msm", "application/octet-stream"],
	  ["msp", "application/octet-stream"],
	  ["pkg", "application/octet-stream"],
	  ["so", "application/octet-stream"],
	  ["oda", "application/oda"],
	  ["opf", "application/oebps-package+xml"],
	  ["ogx", "application/ogg"],
	  ["omdoc", "application/omdoc+xml"],
	  ["onepkg", "application/onenote"],
	  ["onetmp", "application/onenote"],
	  ["onetoc", "application/onenote"],
	  ["onetoc2", "application/onenote"],
	  ["oxps", "application/oxps"],
	  ["relo", "application/p2p-overlay+xml"],
	  ["xer", "application/patch-ops-error+xml"],
	  ["pdf", "application/pdf"],
	  ["pgp", "application/pgp-encrypted"],
	  ["asc", "application/pgp-signature"],
	  ["sig", "application/pgp-signature"],
	  ["prf", "application/pics-rules"],
	  ["p10", "application/pkcs10"],
	  ["p7c", "application/pkcs7-mime"],
	  ["p7m", "application/pkcs7-mime"],
	  ["p7s", "application/pkcs7-signature"],
	  ["p8", "application/pkcs8"],
	  ["ac", "application/pkix-attr-cert"],
	  ["cer", "application/pkix-cert"],
	  ["crl", "application/pkix-crl"],
	  ["pkipath", "application/pkix-pkipath"],
	  ["pki", "application/pkixcmp"],
	  ["pls", "application/pls+xml"],
	  ["ai", "application/postscript"],
	  ["eps", "application/postscript"],
	  ["ps", "application/postscript"],
	  ["provx", "application/provenance+xml"],
	  ["pskcxml", "application/pskc+xml"],
	  ["raml", "application/raml+yaml"],
	  ["owl", "application/rdf+xml"],
	  ["rdf", "application/rdf+xml"],
	  ["rif", "application/reginfo+xml"],
	  ["rnc", "application/relax-ng-compact-syntax"],
	  ["rl", "application/resource-lists+xml"],
	  ["rld", "application/resource-lists-diff+xml"],
	  ["rs", "application/rls-services+xml"],
	  ["rapd", "application/route-apd+xml"],
	  ["sls", "application/route-s-tsid+xml"],
	  ["rusd", "application/route-usd+xml"],
	  ["gbr", "application/rpki-ghostbusters"],
	  ["mft", "application/rpki-manifest"],
	  ["roa", "application/rpki-roa"],
	  ["rsd", "application/rsd+xml"],
	  ["rss", "application/rss+xml"],
	  ["rtf", "application/rtf"],
	  ["sbml", "application/sbml+xml"],
	  ["scq", "application/scvp-cv-request"],
	  ["scs", "application/scvp-cv-response"],
	  ["spq", "application/scvp-vp-request"],
	  ["spp", "application/scvp-vp-response"],
	  ["sdp", "application/sdp"],
	  ["senmlx", "application/senml+xml"],
	  ["sensmlx", "application/sensml+xml"],
	  ["setpay", "application/set-payment-initiation"],
	  ["setreg", "application/set-registration-initiation"],
	  ["shf", "application/shf+xml"],
	  ["sieve", "application/sieve"],
	  ["siv", "application/sieve"],
	  ["smi", "application/smil+xml"],
	  ["smil", "application/smil+xml"],
	  ["rq", "application/sparql-query"],
	  ["srx", "application/sparql-results+xml"],
	  ["gram", "application/srgs"],
	  ["grxml", "application/srgs+xml"],
	  ["sru", "application/sru+xml"],
	  ["ssdl", "application/ssdl+xml"],
	  ["ssml", "application/ssml+xml"],
	  ["swidtag", "application/swid+xml"],
	  ["tei", "application/tei+xml"],
	  ["teicorpus", "application/tei+xml"],
	  ["tfi", "application/thraud+xml"],
	  ["tsd", "application/timestamped-data"],
	  ["toml", "application/toml"],
	  ["trig", "application/trig"],
	  ["ttml", "application/ttml+xml"],
	  ["ubj", "application/ubjson"],
	  ["rsheet", "application/urc-ressheet+xml"],
	  ["td", "application/urc-targetdesc+xml"],
	  ["vxml", "application/voicexml+xml"],
	  ["wasm", "application/wasm"],
	  ["wgt", "application/widget"],
	  ["hlp", "application/winhlp"],
	  ["wsdl", "application/wsdl+xml"],
	  ["wspolicy", "application/wspolicy+xml"],
	  ["xaml", "application/xaml+xml"],
	  ["xav", "application/xcap-att+xml"],
	  ["xca", "application/xcap-caps+xml"],
	  ["xdf", "application/xcap-diff+xml"],
	  ["xel", "application/xcap-el+xml"],
	  ["xns", "application/xcap-ns+xml"],
	  ["xenc", "application/xenc+xml"],
	  ["xht", "application/xhtml+xml"],
	  ["xhtml", "application/xhtml+xml"],
	  ["xlf", "application/xliff+xml"],
	  ["rng", "application/xml"],
	  ["xml", "application/xml"],
	  ["xsd", "application/xml"],
	  ["xsl", "application/xml"],
	  ["dtd", "application/xml-dtd"],
	  ["xop", "application/xop+xml"],
	  ["xpl", "application/xproc+xml"],
	  ["*xsl", "application/xslt+xml"],
	  ["xslt", "application/xslt+xml"],
	  ["xspf", "application/xspf+xml"],
	  ["mxml", "application/xv+xml"],
	  ["xhvml", "application/xv+xml"],
	  ["xvm", "application/xv+xml"],
	  ["xvml", "application/xv+xml"],
	  ["yang", "application/yang"],
	  ["yin", "application/yin+xml"],
	  ["zip", "application/zip"],
	  ["*3gpp", "audio/3gpp"],
	  ["adp", "audio/adpcm"],
	  ["amr", "audio/amr"],
	  ["au", "audio/basic"],
	  ["snd", "audio/basic"],
	  ["kar", "audio/midi"],
	  ["mid", "audio/midi"],
	  ["midi", "audio/midi"],
	  ["rmi", "audio/midi"],
	  ["mxmf", "audio/mobile-xmf"],
	  ["*mp3", "audio/mp3"],
	  ["m4a", "audio/mp4"],
	  ["mp4a", "audio/mp4"],
	  ["m2a", "audio/mpeg"],
	  ["m3a", "audio/mpeg"],
	  ["mp2", "audio/mpeg"],
	  ["mp2a", "audio/mpeg"],
	  ["mp3", "audio/mpeg"],
	  ["mpga", "audio/mpeg"],
	  ["oga", "audio/ogg"],
	  ["ogg", "audio/ogg"],
	  ["opus", "audio/ogg"],
	  ["spx", "audio/ogg"],
	  ["s3m", "audio/s3m"],
	  ["sil", "audio/silk"],
	  ["wav", "audio/wav"],
	  ["*wav", "audio/wave"],
	  ["weba", "audio/webm"],
	  ["xm", "audio/xm"],
	  ["ttc", "font/collection"],
	  ["otf", "font/otf"],
	  ["ttf", "font/ttf"],
	  ["woff", "font/woff"],
	  ["woff2", "font/woff2"],
	  ["exr", "image/aces"],
	  ["apng", "image/apng"],
	  ["avif", "image/avif"],
	  ["bmp", "image/bmp"],
	  ["cgm", "image/cgm"],
	  ["drle", "image/dicom-rle"],
	  ["emf", "image/emf"],
	  ["fits", "image/fits"],
	  ["g3", "image/g3fax"],
	  ["gif", "image/gif"],
	  ["heic", "image/heic"],
	  ["heics", "image/heic-sequence"],
	  ["heif", "image/heif"],
	  ["heifs", "image/heif-sequence"],
	  ["hej2", "image/hej2k"],
	  ["hsj2", "image/hsj2"],
	  ["ief", "image/ief"],
	  ["jls", "image/jls"],
	  ["jp2", "image/jp2"],
	  ["jpg2", "image/jp2"],
	  ["jpe", "image/jpeg"],
	  ["jpeg", "image/jpeg"],
	  ["jpg", "image/jpeg"],
	  ["jph", "image/jph"],
	  ["jhc", "image/jphc"],
	  ["jpm", "image/jpm"],
	  ["jpf", "image/jpx"],
	  ["jpx", "image/jpx"],
	  ["jxr", "image/jxr"],
	  ["jxra", "image/jxra"],
	  ["jxrs", "image/jxrs"],
	  ["jxs", "image/jxs"],
	  ["jxsc", "image/jxsc"],
	  ["jxsi", "image/jxsi"],
	  ["jxss", "image/jxss"],
	  ["ktx", "image/ktx"],
	  ["ktx2", "image/ktx2"],
	  ["png", "image/png"],
	  ["sgi", "image/sgi"],
	  ["svg", "image/svg+xml"],
	  ["svgz", "image/svg+xml"],
	  ["t38", "image/t38"],
	  ["tif", "image/tiff"],
	  ["tiff", "image/tiff"],
	  ["tfx", "image/tiff-fx"],
	  ["webp", "image/webp"],
	  ["wmf", "image/wmf"],
	  ["disposition-notification", "message/disposition-notification"],
	  ["u8msg", "message/global"],
	  ["u8dsn", "message/global-delivery-status"],
	  ["u8mdn", "message/global-disposition-notification"],
	  ["u8hdr", "message/global-headers"],
	  ["eml", "message/rfc822"],
	  ["mime", "message/rfc822"],
	  ["3mf", "model/3mf"],
	  ["gltf", "model/gltf+json"],
	  ["glb", "model/gltf-binary"],
	  ["iges", "model/iges"],
	  ["igs", "model/iges"],
	  ["mesh", "model/mesh"],
	  ["msh", "model/mesh"],
	  ["silo", "model/mesh"],
	  ["mtl", "model/mtl"],
	  ["obj", "model/obj"],
	  ["stpx", "model/step+xml"],
	  ["stpz", "model/step+zip"],
	  ["stpxz", "model/step-xml+zip"],
	  ["stl", "model/stl"],
	  ["vrml", "model/vrml"],
	  ["wrl", "model/vrml"],
	  ["*x3db", "model/x3d+binary"],
	  ["x3dbz", "model/x3d+binary"],
	  ["x3db", "model/x3d+fastinfoset"],
	  ["*x3dv", "model/x3d+vrml"],
	  ["x3dvz", "model/x3d+vrml"],
	  ["x3d", "model/x3d+xml"],
	  ["x3dz", "model/x3d+xml"],
	  ["x3dv", "model/x3d-vrml"],
	  ["appcache", "text/cache-manifest"],
	  ["manifest", "text/cache-manifest"],
	  ["ics", "text/calendar"],
	  ["ifb", "text/calendar"],
	  ["coffee", "text/coffeescript"],
	  ["litcoffee", "text/coffeescript"],
	  ["css", "text/css"],
	  ["csv", "text/csv"],
	  ["htm", "text/html"],
	  ["html", "text/html"],
	  ["shtml", "text/html"],
	  ["jade", "text/jade"],
	  ["jsx", "text/jsx"],
	  ["less", "text/less"],
	  ["markdown", "text/markdown"],
	  ["md", "text/markdown"],
	  ["mml", "text/mathml"],
	  ["mdx", "text/mdx"],
	  ["n3", "text/n3"],
	  ["conf", "text/plain"],
	  ["def", "text/plain"],
	  ["in", "text/plain"],
	  ["ini", "text/plain"],
	  ["list", "text/plain"],
	  ["log", "text/plain"],
	  ["text", "text/plain"],
	  ["txt", "text/plain"],
	  ["rtx", "text/richtext"],
	  ["*rtf", "text/rtf"],
	  ["sgm", "text/sgml"],
	  ["sgml", "text/sgml"],
	  ["shex", "text/shex"],
	  ["slim", "text/slim"],
	  ["slm", "text/slim"],
	  ["spdx", "text/spdx"],
	  ["styl", "text/stylus"],
	  ["stylus", "text/stylus"],
	  ["tsv", "text/tab-separated-values"],
	  ["man", "text/troff"],
	  ["me", "text/troff"],
	  ["ms", "text/troff"],
	  ["roff", "text/troff"],
	  ["t", "text/troff"],
	  ["tr", "text/troff"],
	  ["ttl", "text/turtle"],
	  ["uri", "text/uri-list"],
	  ["uris", "text/uri-list"],
	  ["urls", "text/uri-list"],
	  ["vcard", "text/vcard"],
	  ["vtt", "text/vtt"],
	  ["*xml", "text/xml"],
	  ["yaml", "text/yaml"],
	  ["yml", "text/yaml"],
	  ["3gp", "video/3gpp"],
	  ["3gpp", "video/3gpp"],
	  ["3g2", "video/3gpp2"],
	  ["h261", "video/h261"],
	  ["h263", "video/h263"],
	  ["h264", "video/h264"],
	  ["m4s", "video/iso.segment"],
	  ["jpgv", "video/jpeg"],
	  ["jpm", "video/jpm"],
	  ["jpgm", "video/jpm"],
	  ["mj2", "video/mj2"],
	  ["mjp2", "video/mj2"],
	  ["ts", "video/mp2t"],
	  ["mp4", "video/mp4"],
	  ["mp4v", "video/mp4"],
	  ["mpg4", "video/mp4"],
	  ["m1v", "video/mpeg"],
	  ["m2v", "video/mpeg"],
	  ["mpe", "video/mpeg"],
	  ["mpeg", "video/mpeg"],
	  ["mpg", "video/mpeg"],
	  ["ogv", "video/ogg"],
	  ["mov", "video/quicktime"],
	  ["qt", "video/quicktime"],
	  ["webm", "video/webm"]
	]);
	return mimeType;
}

var multimap;
var hasRequiredMultimap;

function requireMultimap () {
	if (hasRequiredMultimap) return multimap;
	hasRequiredMultimap = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var multimap_exports = {};
	__export(multimap_exports, {
	  MultiMap: () => MultiMap
	});
	multimap = __toCommonJS(multimap_exports);
	var import_builtins = requireBuiltins();
	class MultiMap {
	  constructor() {
	    this._map = new import_builtins.Map();
	  }
	  set(key, value) {
	    let values = this._map.get(key);
	    if (!values) {
	      values = [];
	      this._map.set(key, values);
	    }
	    values.push(value);
	  }
	  get(key) {
	    return this._map.get(key) || [];
	  }
	  has(key) {
	    return this._map.has(key);
	  }
	  delete(key, value) {
	    const values = this._map.get(key);
	    if (!values)
	      return;
	    if (values.includes(value))
	      this._map.set(key, values.filter((v) => value !== v));
	  }
	  deleteAll(key) {
	    this._map.delete(key);
	  }
	  hasValue(key, value) {
	    const values = this._map.get(key);
	    if (!values)
	      return false;
	    return values.includes(value);
	  }
	  get size() {
	    return this._map.size;
	  }
	  [Symbol.iterator]() {
	    return this._map[Symbol.iterator]();
	  }
	  keys() {
	    return this._map.keys();
	  }
	  values() {
	    const result = [];
	    for (const key of this.keys())
	      result.push(...this.get(key));
	    return result;
	  }
	  clear() {
	    this._map.clear();
	  }
	}
	return multimap;
}

var rtti;
var hasRequiredRtti;

function requireRtti () {
	if (hasRequiredRtti) return rtti;
	hasRequiredRtti = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var rtti_exports = {};
	__export(rtti_exports, {
	  isError: () => isError,
	  isObject: () => isObject,
	  isRegExp: () => isRegExp,
	  isString: () => import_stringUtils.isString
	});
	rtti = __toCommonJS(rtti_exports);
	var import_stringUtils = requireStringUtils();
	function isRegExp(obj) {
	  return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
	}
	function isObject(obj) {
	  return typeof obj === "object" && obj !== null;
	}
	function isError(obj) {
	  return obj instanceof Error || obj && Object.getPrototypeOf(obj)?.name === "Error";
	}
	return rtti;
}

var semaphore;
var hasRequiredSemaphore;

function requireSemaphore () {
	if (hasRequiredSemaphore) return semaphore;
	hasRequiredSemaphore = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var semaphore_exports = {};
	__export(semaphore_exports, {
	  Semaphore: () => Semaphore
	});
	semaphore = __toCommonJS(semaphore_exports);
	var import_manualPromise = requireManualPromise();
	class Semaphore {
	  constructor(max) {
	    this._acquired = 0;
	    this._queue = [];
	    this._max = max;
	  }
	  setMax(max) {
	    this._max = max;
	  }
	  acquire() {
	    const lock = new import_manualPromise.ManualPromise();
	    this._queue.push(lock);
	    this._flush();
	    return lock;
	  }
	  release() {
	    --this._acquired;
	    this._flush();
	  }
	  _flush() {
	    while (this._acquired < this._max && this._queue.length) {
	      ++this._acquired;
	      this._queue.shift().resolve();
	    }
	  }
	}
	return semaphore;
}

var timeoutRunner;
var hasRequiredTimeoutRunner;

function requireTimeoutRunner () {
	if (hasRequiredTimeoutRunner) return timeoutRunner;
	hasRequiredTimeoutRunner = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var timeoutRunner_exports = {};
	__export(timeoutRunner_exports, {
	  pollAgainstDeadline: () => pollAgainstDeadline,
	  raceAgainstDeadline: () => raceAgainstDeadline
	});
	timeoutRunner = __toCommonJS(timeoutRunner_exports);
	var import_builtins = requireBuiltins();
	var import_time = requireTime$1();
	async function raceAgainstDeadline(cb, deadline) {
	  let timer;
	  return Promise.race([
	    cb().then((result) => {
	      return { result, timedOut: false };
	    }),
	    new Promise((resolve) => {
	      const kMaxDeadline = 2147483647;
	      const timeout = (deadline || kMaxDeadline) - (0, import_time.monotonicTime)();
	      timer = (0, import_builtins.setTimeout)(() => resolve({ timedOut: true }), timeout);
	    })
	  ]).finally(() => {
	    (0, import_builtins.clearTimeout)(timer);
	  });
	}
	async function pollAgainstDeadline(callback, deadline, pollIntervals = [100, 250, 500, 1e3]) {
	  const lastPollInterval = pollIntervals.pop() ?? 1e3;
	  let lastResult;
	  const wrappedCallback = () => Promise.resolve().then(callback);
	  while (true) {
	    const time = (0, import_time.monotonicTime)();
	    if (deadline && time >= deadline)
	      break;
	    const received = await raceAgainstDeadline(wrappedCallback, deadline);
	    if (received.timedOut)
	      break;
	    lastResult = received.result.result;
	    if (!received.result.continuePolling)
	      return { result: lastResult, timedOut: false };
	    const interval = pollIntervals.shift() ?? lastPollInterval;
	    if (deadline && deadline <= (0, import_time.monotonicTime)() + interval)
	      break;
	    await new Promise((x) => (0, import_builtins.setTimeout)(x, interval));
	  }
	  return { timedOut: true, result: lastResult };
	}
	return timeoutRunner;
}

var urlMatch;
var hasRequiredUrlMatch;

function requireUrlMatch () {
	if (hasRequiredUrlMatch) return urlMatch;
	hasRequiredUrlMatch = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var urlMatch_exports = {};
	__export(urlMatch_exports, {
	  constructURLBasedOnBaseURL: () => constructURLBasedOnBaseURL,
	  globToRegexPattern: () => globToRegexPattern,
	  resolveGlobToRegexPattern: () => resolveGlobToRegexPattern,
	  urlMatches: () => urlMatches,
	  urlMatchesEqual: () => urlMatchesEqual
	});
	urlMatch = __toCommonJS(urlMatch_exports);
	var import_builtins = requireBuiltins();
	var import_stringUtils = requireStringUtils();
	const escapedChars = new import_builtins.Set(["$", "^", "+", ".", "*", "(", ")", "|", "\\", "?", "{", "}", "[", "]"]);
	function globToRegexPattern(glob) {
	  const tokens = ["^"];
	  let inGroup = false;
	  for (let i = 0; i < glob.length; ++i) {
	    const c = glob[i];
	    if (c === "\\" && i + 1 < glob.length) {
	      const char = glob[++i];
	      tokens.push(escapedChars.has(char) ? "\\" + char : char);
	      continue;
	    }
	    if (c === "*") {
	      const beforeDeep = glob[i - 1];
	      let starCount = 1;
	      while (glob[i + 1] === "*") {
	        starCount++;
	        i++;
	      }
	      const afterDeep = glob[i + 1];
	      const isDeep = starCount > 1 && (beforeDeep === "/" || beforeDeep === void 0) && (afterDeep === "/" || afterDeep === void 0);
	      if (isDeep) {
	        tokens.push("((?:[^/]*(?:/|$))*)");
	        i++;
	      } else {
	        tokens.push("([^/]*)");
	      }
	      continue;
	    }
	    switch (c) {
	      case "{":
	        inGroup = true;
	        tokens.push("(");
	        break;
	      case "}":
	        inGroup = false;
	        tokens.push(")");
	        break;
	      case ",":
	        if (inGroup) {
	          tokens.push("|");
	          break;
	        }
	        tokens.push("\\" + c);
	        break;
	      default:
	        tokens.push(escapedChars.has(c) ? "\\" + c : c);
	    }
	  }
	  tokens.push("$");
	  return tokens.join("");
	}
	function isRegExp(obj) {
	  return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
	}
	function urlMatchesEqual(match1, match2) {
	  if (isRegExp(match1) && isRegExp(match2))
	    return match1.source === match2.source && match1.flags === match2.flags;
	  return match1 === match2;
	}
	function urlMatches(baseURL, urlString, match, webSocketUrl) {
	  if (match === void 0 || match === "")
	    return true;
	  if ((0, import_stringUtils.isString)(match))
	    match = new RegExp(resolveGlobToRegexPattern(baseURL, match, webSocketUrl));
	  if (isRegExp(match)) {
	    const r = match.test(urlString);
	    return r;
	  }
	  const url = parseURL(urlString);
	  if (!url)
	    return false;
	  if (typeof match !== "function")
	    throw new Error("url parameter should be string, RegExp or function");
	  return match(url);
	}
	function resolveGlobToRegexPattern(baseURL, glob, webSocketUrl) {
	  if (webSocketUrl)
	    baseURL = toWebSocketBaseUrl(baseURL);
	  glob = resolveGlobBase(baseURL, glob);
	  return globToRegexPattern(glob);
	}
	function toWebSocketBaseUrl(baseURL) {
	  if (baseURL && /^https?:\/\//.test(baseURL))
	    baseURL = baseURL.replace(/^http/, "ws");
	  return baseURL;
	}
	function resolveGlobBase(baseURL, match) {
	  if (!match.startsWith("*")) {
	    let mapToken2 = function(original, replacement) {
	      if (original.length === 0)
	        return "";
	      tokenMap.set(replacement, original);
	      return replacement;
	    };
	    const tokenMap = new import_builtins.Map();
	    match = match.replaceAll(/\\\\\?/g, "?");
	    const relativePath = match.split("/").map((token, index) => {
	      if (token === "." || token === ".." || token === "")
	        return token;
	      if (index === 0 && token.endsWith(":"))
	        return mapToken2(token, "http:");
	      const questionIndex = token.indexOf("?");
	      if (questionIndex === -1)
	        return mapToken2(token, `$_${index}_$`);
	      const newPrefix = mapToken2(token.substring(0, questionIndex), `$_${index}_$`);
	      const newSuffix = mapToken2(token.substring(questionIndex), `?$_${index}_$`);
	      return newPrefix + newSuffix;
	    }).join("/");
	    let resolved = constructURLBasedOnBaseURL(baseURL, relativePath);
	    for (const [token, original] of tokenMap)
	      resolved = resolved.replace(token, original);
	    match = resolved;
	  }
	  return match;
	}
	function parseURL(url) {
	  try {
	    return new URL(url);
	  } catch (e) {
	    return null;
	  }
	}
	function constructURLBasedOnBaseURL(baseURL, givenURL) {
	  try {
	    return new URL(givenURL, baseURL).toString();
	  } catch (e) {
	    return givenURL;
	  }
	}
	return urlMatch;
}

var colorUtils;
var hasRequiredColorUtils;

function requireColorUtils () {
	if (hasRequiredColorUtils) return colorUtils;
	hasRequiredColorUtils = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var colorUtils_exports = {};
	__export(colorUtils_exports, {
	  blendWithWhite: () => blendWithWhite,
	  colorDeltaE94: () => colorDeltaE94,
	  rgb2gray: () => rgb2gray,
	  srgb2xyz: () => srgb2xyz,
	  xyz2lab: () => xyz2lab
	});
	colorUtils = __toCommonJS(colorUtils_exports);
	function blendWithWhite(c, a) {
	  return 255 + (c - 255) * a;
	}
	function rgb2gray(r, g, b) {
	  return 77 * r + 150 * g + 29 * b + 128 >> 8;
	}
	function colorDeltaE94(rgb1, rgb2) {
	  const [l1, a1, b1] = xyz2lab(srgb2xyz(rgb1));
	  const [l2, a2, b2] = xyz2lab(srgb2xyz(rgb2));
	  const deltaL = l1 - l2;
	  const deltaA = a1 - a2;
	  const deltaB = b1 - b2;
	  const c1 = Math.sqrt(a1 ** 2 + b1 ** 2);
	  const c2 = Math.sqrt(a2 ** 2 + b2 ** 2);
	  const deltaC = c1 - c2;
	  let deltaH = deltaA ** 2 + deltaB ** 2 - deltaC ** 2;
	  deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);
	  const k1 = 0.045;
	  const k2 = 0.015;
	  const kL = 1;
	  const kC = 1;
	  const kH = 1;
	  const sC = 1 + k1 * c1;
	  const sH = 1 + k2 * c1;
	  const sL = 1;
	  return Math.sqrt((deltaL / sL / kL) ** 2 + (deltaC / sC / kC) ** 2 + (deltaH / sH / kH) ** 2);
	}
	function srgb2xyz(rgb) {
	  let r = rgb[0] / 255;
	  let g = rgb[1] / 255;
	  let b = rgb[2] / 255;
	  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
	  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
	  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
	  return [
	    r * 0.4124 + g * 0.3576 + b * 0.1805,
	    r * 0.2126 + g * 0.7152 + b * 0.0722,
	    r * 0.0193 + g * 0.1192 + b * 0.9505
	  ];
	}
	const sigma_pow2 = 6 * 6 / 29 / 29;
	const sigma_pow3 = 6 * 6 * 6 / 29 / 29 / 29;
	function xyz2lab(xyz) {
	  const x = xyz[0] / 0.950489;
	  const y = xyz[1];
	  const z = xyz[2] / 1.08884;
	  const fx = x > sigma_pow3 ? x ** (1 / 3) : x / 3 / sigma_pow2 + 4 / 29;
	  const fy = y > sigma_pow3 ? y ** (1 / 3) : y / 3 / sigma_pow2 + 4 / 29;
	  const fz = z > sigma_pow3 ? z ** (1 / 3) : z / 3 / sigma_pow2 + 4 / 29;
	  const l = 116 * fy - 16;
	  const a = 500 * (fx - fy);
	  const b = 200 * (fy - fz);
	  return [l, a, b];
	}
	return colorUtils;
}

var imageChannel;
var hasRequiredImageChannel;

function requireImageChannel () {
	if (hasRequiredImageChannel) return imageChannel;
	hasRequiredImageChannel = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var imageChannel_exports = {};
	__export(imageChannel_exports, {
	  ImageChannel: () => ImageChannel
	});
	imageChannel = __toCommonJS(imageChannel_exports);
	var import_colorUtils = requireColorUtils();
	class ImageChannel {
	  static intoRGB(width, height, data, options = {}) {
	    const {
	      paddingSize = 0,
	      paddingColorOdd = [255, 0, 255],
	      paddingColorEven = [0, 255, 0]
	    } = options;
	    const newWidth = width + 2 * paddingSize;
	    const newHeight = height + 2 * paddingSize;
	    const r = new Uint8Array(newWidth * newHeight);
	    const g = new Uint8Array(newWidth * newHeight);
	    const b = new Uint8Array(newWidth * newHeight);
	    for (let y = 0; y < newHeight; ++y) {
	      for (let x = 0; x < newWidth; ++x) {
	        const index = y * newWidth + x;
	        if (y >= paddingSize && y < newHeight - paddingSize && x >= paddingSize && x < newWidth - paddingSize) {
	          const offset = ((y - paddingSize) * width + (x - paddingSize)) * 4;
	          const alpha = data[offset + 3] === 255 ? 1 : data[offset + 3] / 255;
	          r[index] = (0, import_colorUtils.blendWithWhite)(data[offset], alpha);
	          g[index] = (0, import_colorUtils.blendWithWhite)(data[offset + 1], alpha);
	          b[index] = (0, import_colorUtils.blendWithWhite)(data[offset + 2], alpha);
	        } else {
	          const color = (y + x) % 2 === 0 ? paddingColorEven : paddingColorOdd;
	          r[index] = color[0];
	          g[index] = color[1];
	          b[index] = color[2];
	        }
	      }
	    }
	    return [
	      new ImageChannel(newWidth, newHeight, r),
	      new ImageChannel(newWidth, newHeight, g),
	      new ImageChannel(newWidth, newHeight, b)
	    ];
	  }
	  constructor(width, height, data) {
	    this.data = data;
	    this.width = width;
	    this.height = height;
	  }
	  get(x, y) {
	    return this.data[y * this.width + x];
	  }
	  boundXY(x, y) {
	    return [
	      Math.min(Math.max(x, 0), this.width - 1),
	      Math.min(Math.max(y, 0), this.height - 1)
	    ];
	  }
	}
	return imageChannel;
}

var stats;
var hasRequiredStats;

function requireStats () {
	if (hasRequiredStats) return stats;
	hasRequiredStats = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var stats_exports = {};
	__export(stats_exports, {
	  FastStats: () => FastStats,
	  ssim: () => ssim
	});
	stats = __toCommonJS(stats_exports);
	const DYNAMIC_RANGE = 2 ** 8 - 1;
	function ssim(stats, x1, y1, x2, y2) {
	  const mean1 = stats.meanC1(x1, y1, x2, y2);
	  const mean2 = stats.meanC2(x1, y1, x2, y2);
	  const var1 = stats.varianceC1(x1, y1, x2, y2);
	  const var2 = stats.varianceC2(x1, y1, x2, y2);
	  const cov = stats.covariance(x1, y1, x2, y2);
	  const c1 = (0.01 * DYNAMIC_RANGE) ** 2;
	  const c2 = (0.03 * DYNAMIC_RANGE) ** 2;
	  return (2 * mean1 * mean2 + c1) * (2 * cov + c2) / (mean1 ** 2 + mean2 ** 2 + c1) / (var1 + var2 + c2);
	}
	class FastStats {
	  constructor(c1, c2) {
	    this.c1 = c1;
	    this.c2 = c2;
	    const { width, height } = c1;
	    this._partialSumC1 = new Array(width * height);
	    this._partialSumC2 = new Array(width * height);
	    this._partialSumSq1 = new Array(width * height);
	    this._partialSumSq2 = new Array(width * height);
	    this._partialSumMult = new Array(width * height);
	    const recalc = (mx, idx, initial, x, y) => {
	      mx[idx] = initial;
	      if (y > 0)
	        mx[idx] += mx[(y - 1) * width + x];
	      if (x > 0)
	        mx[idx] += mx[y * width + x - 1];
	      if (x > 0 && y > 0)
	        mx[idx] -= mx[(y - 1) * width + x - 1];
	    };
	    for (let y = 0; y < height; ++y) {
	      for (let x = 0; x < width; ++x) {
	        const idx = y * width + x;
	        recalc(this._partialSumC1, idx, this.c1.data[idx], x, y);
	        recalc(this._partialSumC2, idx, this.c2.data[idx], x, y);
	        recalc(this._partialSumSq1, idx, this.c1.data[idx] * this.c1.data[idx], x, y);
	        recalc(this._partialSumSq2, idx, this.c2.data[idx] * this.c2.data[idx], x, y);
	        recalc(this._partialSumMult, idx, this.c1.data[idx] * this.c2.data[idx], x, y);
	      }
	    }
	  }
	  _sum(partialSum, x1, y1, x2, y2) {
	    const width = this.c1.width;
	    let result = partialSum[y2 * width + x2];
	    if (y1 > 0)
	      result -= partialSum[(y1 - 1) * width + x2];
	    if (x1 > 0)
	      result -= partialSum[y2 * width + x1 - 1];
	    if (x1 > 0 && y1 > 0)
	      result += partialSum[(y1 - 1) * width + x1 - 1];
	    return result;
	  }
	  meanC1(x1, y1, x2, y2) {
	    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
	    return this._sum(this._partialSumC1, x1, y1, x2, y2) / N;
	  }
	  meanC2(x1, y1, x2, y2) {
	    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
	    return this._sum(this._partialSumC2, x1, y1, x2, y2) / N;
	  }
	  varianceC1(x1, y1, x2, y2) {
	    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
	    return (this._sum(this._partialSumSq1, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) ** 2 / N) / N;
	  }
	  varianceC2(x1, y1, x2, y2) {
	    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
	    return (this._sum(this._partialSumSq2, x1, y1, x2, y2) - this._sum(this._partialSumC2, x1, y1, x2, y2) ** 2 / N) / N;
	  }
	  covariance(x1, y1, x2, y2) {
	    const N = (y2 - y1 + 1) * (x2 - x1 + 1);
	    return (this._sum(this._partialSumMult, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) * this._sum(this._partialSumC2, x1, y1, x2, y2) / N) / N;
	  }
	}
	return stats;
}

var compare_1;
var hasRequiredCompare;

function requireCompare () {
	if (hasRequiredCompare) return compare_1;
	hasRequiredCompare = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var compare_exports = {};
	__export(compare_exports, {
	  compare: () => compare
	});
	compare_1 = __toCommonJS(compare_exports);
	var import_colorUtils = requireColorUtils();
	var import_imageChannel = requireImageChannel();
	var import_stats = requireStats();
	const SSIM_WINDOW_RADIUS = 15;
	const VARIANCE_WINDOW_RADIUS = 1;
	function drawPixel(width, data, x, y, r, g, b) {
	  const idx = (y * width + x) * 4;
	  data[idx + 0] = r;
	  data[idx + 1] = g;
	  data[idx + 2] = b;
	  data[idx + 3] = 255;
	}
	function compare(actual, expected, diff, width, height, options = {}) {
	  const {
	    maxColorDeltaE94 = 1
	  } = options;
	  const paddingSize = Math.max(VARIANCE_WINDOW_RADIUS, SSIM_WINDOW_RADIUS);
	  const paddingColorEven = [255, 0, 255];
	  const paddingColorOdd = [0, 255, 0];
	  const [r1, g1, b1] = import_imageChannel.ImageChannel.intoRGB(width, height, expected, {
	    paddingSize,
	    paddingColorEven,
	    paddingColorOdd
	  });
	  const [r2, g2, b2] = import_imageChannel.ImageChannel.intoRGB(width, height, actual, {
	    paddingSize,
	    paddingColorEven,
	    paddingColorOdd
	  });
	  const noop = (x, y) => {
	  };
	  const drawRedPixel = diff ? (x, y) => drawPixel(width, diff, x - paddingSize, y - paddingSize, 255, 0, 0) : noop;
	  const drawYellowPixel = diff ? (x, y) => drawPixel(width, diff, x - paddingSize, y - paddingSize, 255, 255, 0) : noop;
	  const drawGrayPixel = diff ? (x, y) => {
	    const gray = (0, import_colorUtils.rgb2gray)(r1.get(x, y), g1.get(x, y), b1.get(x, y));
	    const value = (0, import_colorUtils.blendWithWhite)(gray, 0.1);
	    drawPixel(width, diff, x - paddingSize, y - paddingSize, value, value, value);
	  } : noop;
	  let fastR, fastG, fastB;
	  let diffCount = 0;
	  for (let y = paddingSize; y < r1.height - paddingSize; ++y) {
	    for (let x = paddingSize; x < r1.width - paddingSize; ++x) {
	      if (r1.get(x, y) === r2.get(x, y) && g1.get(x, y) === g2.get(x, y) && b1.get(x, y) === b2.get(x, y)) {
	        drawGrayPixel(x, y);
	        continue;
	      }
	      const delta = (0, import_colorUtils.colorDeltaE94)(
	        [r1.get(x, y), g1.get(x, y), b1.get(x, y)],
	        [r2.get(x, y), g2.get(x, y), b2.get(x, y)]
	      );
	      if (delta <= maxColorDeltaE94) {
	        drawGrayPixel(x, y);
	        continue;
	      }
	      if (!fastR || !fastG || !fastB) {
	        fastR = new import_stats.FastStats(r1, r2);
	        fastG = new import_stats.FastStats(g1, g2);
	        fastB = new import_stats.FastStats(b1, b2);
	      }
	      const [varX1, varY1] = r1.boundXY(x - VARIANCE_WINDOW_RADIUS, y - VARIANCE_WINDOW_RADIUS);
	      const [varX2, varY2] = r1.boundXY(x + VARIANCE_WINDOW_RADIUS, y + VARIANCE_WINDOW_RADIUS);
	      const var1 = fastR.varianceC1(varX1, varY1, varX2, varY2) + fastG.varianceC1(varX1, varY1, varX2, varY2) + fastB.varianceC1(varX1, varY1, varX2, varY2);
	      const var2 = fastR.varianceC2(varX1, varY1, varX2, varY2) + fastG.varianceC2(varX1, varY1, varX2, varY2) + fastB.varianceC2(varX1, varY1, varX2, varY2);
	      if (var1 === 0 || var2 === 0) {
	        drawRedPixel(x, y);
	        ++diffCount;
	        continue;
	      }
	      const [ssimX1, ssimY1] = r1.boundXY(x - SSIM_WINDOW_RADIUS, y - SSIM_WINDOW_RADIUS);
	      const [ssimX2, ssimY2] = r1.boundXY(x + SSIM_WINDOW_RADIUS, y + SSIM_WINDOW_RADIUS);
	      const ssimRGB = ((0, import_stats.ssim)(fastR, ssimX1, ssimY1, ssimX2, ssimY2) + (0, import_stats.ssim)(fastG, ssimX1, ssimY1, ssimX2, ssimY2) + (0, import_stats.ssim)(fastB, ssimX1, ssimY1, ssimX2, ssimY2)) / 3;
	      const isAntialiased = ssimRGB >= 0.99;
	      if (isAntialiased) {
	        drawYellowPixel(x, y);
	      } else {
	        drawRedPixel(x, y);
	        ++diffCount;
	      }
	    }
	  }
	  return diffCount;
	}
	return compare_1;
}

/**
 * 
 * ISC License
 *
 * Copyright (c) 2019, Mapbox

 * Permission to use, copy, modify, and/or distribute this software for any purpose
 * with or without fee is hereby granted, provided that the above copyright notice
 * and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
 * OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
 * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 */

var pixelmatch_1;
var hasRequiredPixelmatch;

function requirePixelmatch () {
	if (hasRequiredPixelmatch) return pixelmatch_1;
	hasRequiredPixelmatch = 1;

	pixelmatch_1 = pixelmatch;

	const defaultOptions = {
	    threshold: 0.1,         // matching threshold (0 to 1); smaller is more sensitive
	    includeAA: false,       // whether to skip anti-aliasing detection
	    alpha: 0.1,             // opacity of original image in diff output
	    aaColor: [255, 255, 0], // color of anti-aliased pixels in diff output
	    diffColor: [255, 0, 0], // color of different pixels in diff output
	    diffColorAlt: null,     // whether to detect dark on light differences between img1 and img2 and set an alternative color to differentiate between the two
	    diffMask: false         // draw the diff over a transparent background (a mask)
	};

	function pixelmatch(img1, img2, output, width, height, options) {

	    if (!isPixelData(img1) || !isPixelData(img2) || (output && !isPixelData(output)))
	        throw new Error('Image data: Uint8Array, Uint8ClampedArray or Buffer expected.');

	    if (img1.length !== img2.length || (output && output.length !== img1.length))
	        throw new Error('Image sizes do not match.');

	    if (img1.length !== width * height * 4) throw new Error('Image data size does not match width/height.');

	    options = Object.assign({}, defaultOptions, options);

	    // check if images are identical
	    const len = width * height;
	    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);
	    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);
	    let identical = true;

	    for (let i = 0; i < len; i++) {
	        if (a32[i] !== b32[i]) { identical = false; break; }
	    }
	    if (identical) { // fast path if identical
	        if (output && !options.diffMask) {
	            for (let i = 0; i < len; i++) drawGrayPixel(img1, 4 * i, options.alpha, output);
	        }
	        return 0;
	    }

	    // maximum acceptable square distance between two colors;
	    // 35215 is the maximum possible value for the YIQ difference metric
	    const maxDelta = 35215 * options.threshold * options.threshold;
	    let diff = 0;

	    // compare each pixel of one image against the other one
	    for (let y = 0; y < height; y++) {
	        for (let x = 0; x < width; x++) {

	            const pos = (y * width + x) * 4;

	            // squared YUV distance between colors at this pixel position, negative if the img2 pixel is darker
	            const delta = colorDelta(img1, img2, pos, pos);

	            // the color difference is above the threshold
	            if (Math.abs(delta) > maxDelta) {
	                // check it's a real rendering difference or just anti-aliasing
	                if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) ||
	                                           antialiased(img2, x, y, width, height, img1))) {
	                    // one of the pixels is anti-aliasing; draw as yellow and do not count as difference
	                    // note that we do not include such pixels in a mask
	                    if (output && !options.diffMask) drawPixel(output, pos, ...options.aaColor);

	                } else {
	                    // found substantial difference not caused by anti-aliasing; draw it as such
	                    if (output) {
	                        drawPixel(output, pos, ...(delta < 0 && options.diffColorAlt || options.diffColor));
	                    }
	                    diff++;
	                }

	            } else if (output) {
	                // pixels are similar; draw background as grayscale image blended with white
	                if (!options.diffMask) drawGrayPixel(img1, pos, options.alpha, output);
	            }
	        }
	    }

	    // return the number of different pixels
	    return diff;
	}

	function isPixelData(arr) {
	    // work around instanceof Uint8Array not working properly in some Jest environments
	    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;
	}

	// check if a pixel is likely a part of anti-aliasing;
	// based on "Anti-aliased Pixel and Intensity Slope Detector" paper by V. Vysniauskas, 2009

	function antialiased(img, x1, y1, width, height, img2) {
	    const x0 = Math.max(x1 - 1, 0);
	    const y0 = Math.max(y1 - 1, 0);
	    const x2 = Math.min(x1 + 1, width - 1);
	    const y2 = Math.min(y1 + 1, height - 1);
	    const pos = (y1 * width + x1) * 4;
	    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
	    let min = 0;
	    let max = 0;
	    let minX, minY, maxX, maxY;

	    // go through 8 adjacent pixels
	    for (let x = x0; x <= x2; x++) {
	        for (let y = y0; y <= y2; y++) {
	            if (x === x1 && y === y1) continue;

	            // brightness delta between the center pixel and adjacent one
	            const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);

	            // count the number of equal, darker and brighter adjacent pixels
	            if (delta === 0) {
	                zeroes++;
	                // if found more than 2 equal siblings, it's definitely not anti-aliasing
	                if (zeroes > 2) return false;

	            // remember the darkest pixel
	            } else if (delta < min) {
	                min = delta;
	                minX = x;
	                minY = y;

	            // remember the brightest pixel
	            } else if (delta > max) {
	                max = delta;
	                maxX = x;
	                maxY = y;
	            }
	        }
	    }

	    // if there are no both darker and brighter pixels among siblings, it's not anti-aliasing
	    if (min === 0 || max === 0) return false;

	    // if either the darkest or the brightest pixel has 3+ equal siblings in both images
	    // (definitely not anti-aliased), this pixel is anti-aliased
	    return (hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height)) ||
	           (hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height));
	}

	// check if a pixel has 3+ adjacent pixels of the same color.
	function hasManySiblings(img, x1, y1, width, height) {
	    const x0 = Math.max(x1 - 1, 0);
	    const y0 = Math.max(y1 - 1, 0);
	    const x2 = Math.min(x1 + 1, width - 1);
	    const y2 = Math.min(y1 + 1, height - 1);
	    const pos = (y1 * width + x1) * 4;
	    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;

	    // go through 8 adjacent pixels
	    for (let x = x0; x <= x2; x++) {
	        for (let y = y0; y <= y2; y++) {
	            if (x === x1 && y === y1) continue;

	            const pos2 = (y * width + x) * 4;
	            if (img[pos] === img[pos2] &&
	                img[pos + 1] === img[pos2 + 1] &&
	                img[pos + 2] === img[pos2 + 2] &&
	                img[pos + 3] === img[pos2 + 3]) zeroes++;

	            if (zeroes > 2) return true;
	        }
	    }

	    return false;
	}

	// calculate color difference according to the paper "Measuring perceived color difference
	// using YIQ NTSC transmission color space in mobile applications" by Y. Kotsarenko and F. Ramos

	function colorDelta(img1, img2, k, m, yOnly) {
	    let r1 = img1[k + 0];
	    let g1 = img1[k + 1];
	    let b1 = img1[k + 2];
	    let a1 = img1[k + 3];

	    let r2 = img2[m + 0];
	    let g2 = img2[m + 1];
	    let b2 = img2[m + 2];
	    let a2 = img2[m + 3];

	    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2) return 0;

	    if (a1 < 255) {
	        a1 /= 255;
	        r1 = blend(r1, a1);
	        g1 = blend(g1, a1);
	        b1 = blend(b1, a1);
	    }

	    if (a2 < 255) {
	        a2 /= 255;
	        r2 = blend(r2, a2);
	        g2 = blend(g2, a2);
	        b2 = blend(b2, a2);
	    }

	    const y1 = rgb2y(r1, g1, b1);
	    const y2 = rgb2y(r2, g2, b2);
	    const y = y1 - y2;

	    if (yOnly) return y; // brightness difference only

	    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);
	    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);

	    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;

	    // encode whether the pixel lightens or darkens in the sign
	    return y1 > y2 ? -delta : delta;
	}

	function rgb2y(r, g, b) { return r * 0.29889531 + g * 0.58662247 + b * 0.11448223; }
	function rgb2i(r, g, b) { return r * 0.59597799 - g * 0.27417610 - b * 0.32180189; }
	function rgb2q(r, g, b) { return r * 0.21147017 - g * 0.52261711 + b * 0.31114694; }

	// blend semi-transparent color with white
	function blend(c, a) {
	    return 255 + (c - 255) * a;
	}

	function drawPixel(output, pos, r, g, b) {
	    output[pos + 0] = r;
	    output[pos + 1] = g;
	    output[pos + 2] = b;
	    output[pos + 3] = 255;
	}

	function drawGrayPixel(img, i, alpha, output) {
	    const r = img[i + 0];
	    const g = img[i + 1];
	    const b = img[i + 2];
	    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);
	    drawPixel(output, i, val, val, val);
	}
	return pixelmatch_1;
}

var comparators;
var hasRequiredComparators;

function requireComparators () {
	if (hasRequiredComparators) return comparators;
	hasRequiredComparators = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var comparators_exports = {};
	__export(comparators_exports, {
	  compareBuffersOrStrings: () => compareBuffersOrStrings,
	  getComparator: () => getComparator
	});
	comparators = __toCommonJS(comparators_exports);
	var import_compare = requireCompare();
	var import_pixelmatch = __toESM(requirePixelmatch());
	var import_utilsBundle = requireUtilsBundle();
	var import_utilsBundle2 = requireUtilsBundle();
	var import_utilsBundle3 = requireUtilsBundle();
	function getComparator(mimeType) {
	  if (mimeType === "image/png")
	    return compareImages.bind(null, "image/png");
	  if (mimeType === "image/jpeg")
	    return compareImages.bind(null, "image/jpeg");
	  if (mimeType === "text/plain")
	    return compareText;
	  return compareBuffersOrStrings;
	}
	const JPEG_JS_MAX_BUFFER_SIZE_IN_MB = 5 * 1024;
	function compareBuffersOrStrings(actualBuffer, expectedBuffer) {
	  if (typeof actualBuffer === "string")
	    return compareText(actualBuffer, expectedBuffer);
	  if (!actualBuffer || !(actualBuffer instanceof Buffer))
	    return { errorMessage: "Actual result should be a Buffer or a string." };
	  if (Buffer.compare(actualBuffer, expectedBuffer))
	    return { errorMessage: "Buffers differ" };
	  return null;
	}
	function compareImages(mimeType, actualBuffer, expectedBuffer, options = {}) {
	  if (!actualBuffer || !(actualBuffer instanceof Buffer))
	    return { errorMessage: "Actual result should be a Buffer." };
	  validateBuffer(expectedBuffer, mimeType);
	  let actual = mimeType === "image/png" ? import_utilsBundle3.PNG.sync.read(actualBuffer) : import_utilsBundle.jpegjs.decode(actualBuffer, { maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB });
	  let expected = mimeType === "image/png" ? import_utilsBundle3.PNG.sync.read(expectedBuffer) : import_utilsBundle.jpegjs.decode(expectedBuffer, { maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB });
	  const size = { width: Math.max(expected.width, actual.width), height: Math.max(expected.height, actual.height) };
	  let sizesMismatchError = "";
	  if (expected.width !== actual.width || expected.height !== actual.height) {
	    sizesMismatchError = `Expected an image ${expected.width}px by ${expected.height}px, received ${actual.width}px by ${actual.height}px. `;
	    actual = resizeImage(actual, size);
	    expected = resizeImage(expected, size);
	  }
	  const diff2 = new import_utilsBundle3.PNG({ width: size.width, height: size.height });
	  let count;
	  if (options.comparator === "ssim-cie94") {
	    count = (0, import_compare.compare)(expected.data, actual.data, diff2.data, size.width, size.height, {
	      // All ΔE* formulae are originally designed to have the difference of 1.0 stand for a "just noticeable difference" (JND).
	      // See https://en.wikipedia.org/wiki/Color_difference#CIELAB_%CE%94E*
	      maxColorDeltaE94: 1
	    });
	  } else if ((options.comparator ?? "pixelmatch") === "pixelmatch") {
	    count = (0, import_pixelmatch.default)(expected.data, actual.data, diff2.data, size.width, size.height, {
	      threshold: options.threshold ?? 0.2
	    });
	  } else {
	    throw new Error(`Configuration specifies unknown comparator "${options.comparator}"`);
	  }
	  const maxDiffPixels1 = options.maxDiffPixels;
	  const maxDiffPixels2 = options.maxDiffPixelRatio !== void 0 ? expected.width * expected.height * options.maxDiffPixelRatio : void 0;
	  let maxDiffPixels;
	  if (maxDiffPixels1 !== void 0 && maxDiffPixels2 !== void 0)
	    maxDiffPixels = Math.min(maxDiffPixels1, maxDiffPixels2);
	  else
	    maxDiffPixels = maxDiffPixels1 ?? maxDiffPixels2 ?? 0;
	  const ratio = Math.ceil(count / (expected.width * expected.height) * 100) / 100;
	  const pixelsMismatchError = count > maxDiffPixels ? `${count} pixels (ratio ${ratio.toFixed(2)} of all image pixels) are different.` : "";
	  if (pixelsMismatchError || sizesMismatchError)
	    return { errorMessage: sizesMismatchError + pixelsMismatchError, diff: import_utilsBundle3.PNG.sync.write(diff2) };
	  return null;
	}
	function validateBuffer(buffer, mimeType) {
	  if (mimeType === "image/png") {
	    const pngMagicNumber = [137, 80, 78, 71, 13, 10, 26, 10];
	    if (buffer.length < pngMagicNumber.length || !pngMagicNumber.every((byte, index) => buffer[index] === byte))
	      throw new Error("could not decode image as PNG.");
	  } else if (mimeType === "image/jpeg") {
	    const jpegMagicNumber = [255, 216];
	    if (buffer.length < jpegMagicNumber.length || !jpegMagicNumber.every((byte, index) => buffer[index] === byte))
	      throw new Error("could not decode image as JPEG.");
	  }
	}
	function compareText(actual, expectedBuffer) {
	  if (typeof actual !== "string")
	    return { errorMessage: "Actual result should be a string" };
	  let expected = expectedBuffer.toString("utf-8");
	  if (expected === actual)
	    return null;
	  if (!actual.endsWith("\n"))
	    actual += "\n";
	  if (!expected.endsWith("\n"))
	    expected += "\n";
	  const lines = import_utilsBundle2.diff.createPatch("file", expected, actual, void 0, void 0, { context: 5 }).split("\n");
	  const coloredLines = lines.slice(4).map((line) => {
	    if (line.startsWith("-"))
	      return import_utilsBundle2.colors.red(line);
	    if (line.startsWith("+"))
	      return import_utilsBundle2.colors.green(line);
	    if (line.startsWith("@@"))
	      return import_utilsBundle2.colors.dim(line);
	    return line;
	  });
	  const errorMessage = coloredLines.join("\n");
	  return { errorMessage };
	}
	function resizeImage(image, size) {
	  if (image.width === size.width && image.height === size.height)
	    return image;
	  const buffer = new Uint8Array(size.width * size.height * 4);
	  for (let y = 0; y < size.height; y++) {
	    for (let x = 0; x < size.width; x++) {
	      const to = (y * size.width + x) * 4;
	      if (y < image.height && x < image.width) {
	        const from = (y * image.width + x) * 4;
	        buffer[to] = image.data[from];
	        buffer[to + 1] = image.data[from + 1];
	        buffer[to + 2] = image.data[from + 2];
	        buffer[to + 3] = image.data[from + 3];
	      } else {
	        buffer[to] = 0;
	        buffer[to + 1] = 0;
	        buffer[to + 2] = 0;
	        buffer[to + 3] = 0;
	      }
	    }
	  }
	  return { data: Buffer.from(buffer), width: size.width, height: size.height };
	}
	return comparators;
}

var env;
var hasRequiredEnv;

function requireEnv () {
	if (hasRequiredEnv) return env;
	hasRequiredEnv = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var env_exports = {};
	__export(env_exports, {
	  getAsBooleanFromENV: () => getAsBooleanFromENV,
	  getFromENV: () => getFromENV,
	  getPackageManager: () => getPackageManager,
	  getPackageManagerExecCommand: () => getPackageManagerExecCommand,
	  isLikelyNpxGlobal: () => isLikelyNpxGlobal
	});
	env = __toCommonJS(env_exports);
	function getFromENV(name) {
	  let value = process.env[name];
	  value = value === void 0 ? process.env[`npm_config_${name.toLowerCase()}`] : value;
	  value = value === void 0 ? process.env[`npm_package_config_${name.toLowerCase()}`] : value;
	  return value;
	}
	function getAsBooleanFromENV(name, defaultValue) {
	  const value = getFromENV(name);
	  if (value === "false" || value === "0")
	    return false;
	  if (value)
	    return true;
	  return !!defaultValue;
	}
	function getPackageManager() {
	  const env = process.env.npm_config_user_agent || "";
	  if (env.includes("yarn"))
	    return "yarn";
	  if (env.includes("pnpm"))
	    return "pnpm";
	  return "npm";
	}
	function getPackageManagerExecCommand() {
	  const packageManager = getPackageManager();
	  if (packageManager === "yarn")
	    return "yarn";
	  if (packageManager === "pnpm")
	    return "pnpm exec";
	  return "npx";
	}
	function isLikelyNpxGlobal() {
	  return process.argv.length >= 2 && process.argv[1].includes("_npx");
	}
	return env;
}

var debug$1;
var hasRequiredDebug$1;

function requireDebug$1 () {
	if (hasRequiredDebug$1) return debug$1;
	hasRequiredDebug$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var debug_exports = {};
	__export(debug_exports, {
	  debugMode: () => debugMode,
	  isUnderTest: () => isUnderTest,
	  setUnderTest: () => setUnderTest
	});
	debug$1 = __toCommonJS(debug_exports);
	var import_env = requireEnv();
	const _debugMode = (0, import_env.getFromENV)("PWDEBUG") || "";
	function debugMode() {
	  if (_debugMode === "console")
	    return "console";
	  if (_debugMode === "0" || _debugMode === "false")
	    return "";
	  return _debugMode ? "inspector" : "";
	}
	let _isUnderTest = !!process.env.PWTEST_UNDER_TEST;
	function setUnderTest() {
	  _isUnderTest = true;
	}
	function isUnderTest() {
	  return _isUnderTest;
	}
	return debug$1;
}

var eventsHelper_1;
var hasRequiredEventsHelper;

function requireEventsHelper () {
	if (hasRequiredEventsHelper) return eventsHelper_1;
	hasRequiredEventsHelper = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var eventsHelper_exports = {};
	__export(eventsHelper_exports, {
	  eventsHelper: () => eventsHelper
	});
	eventsHelper_1 = __toCommonJS(eventsHelper_exports);
	class EventsHelper {
	  static addEventListener(emitter, eventName, handler) {
	    emitter.on(eventName, handler);
	    return { emitter, eventName, handler };
	  }
	  static removeEventListeners(listeners) {
	    for (const listener of listeners)
	      listener.emitter.removeListener(listener.eventName, listener.handler);
	    listeners.splice(0, listeners.length);
	  }
	}
	const eventsHelper = EventsHelper;
	return eventsHelper_1;
}

var expectUtils;
var hasRequiredExpectUtils;

function requireExpectUtils () {
	if (hasRequiredExpectUtils) return expectUtils;
	hasRequiredExpectUtils = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var expectUtils_exports = {};
	__export(expectUtils_exports, {
	  serializeExpectedTextValues: () => serializeExpectedTextValues
	});
	expectUtils = __toCommonJS(expectUtils_exports);
	var import_rtti = requireRtti();
	function serializeExpectedTextValues(items, options = {}) {
	  return items.map((i) => ({
	    string: (0, import_rtti.isString)(i) ? i : void 0,
	    regexSource: (0, import_rtti.isRegExp)(i) ? i.source : void 0,
	    regexFlags: (0, import_rtti.isRegExp)(i) ? i.flags : void 0,
	    matchSubstring: options.matchSubstring,
	    ignoreCase: options.ignoreCase,
	    normalizeWhiteSpace: options.normalizeWhiteSpace
	  }));
	}
	return expectUtils;
}

var network$2;
var hasRequiredNetwork$2;

function requireNetwork$2 () {
	if (hasRequiredNetwork$2) return network$2;
	hasRequiredNetwork$2 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var network_exports = {};
	__export(network_exports, {
	  NET_DEFAULT_TIMEOUT: () => NET_DEFAULT_TIMEOUT,
	  createHttp2Server: () => createHttp2Server,
	  createHttpServer: () => createHttpServer,
	  createHttpsServer: () => createHttpsServer,
	  createProxyAgent: () => createProxyAgent,
	  fetchData: () => fetchData,
	  httpRequest: () => httpRequest,
	  isURLAvailable: () => isURLAvailable
	});
	network$2 = __toCommonJS(network_exports);
	var import_http = __toESM(require$$19);
	var import_http2 = __toESM(require$$1$2);
	var import_https = __toESM(require$$2$1);
	var import_url = __toESM(require$$6);
	var import_utilsBundle = requireUtilsBundle();
	var import_happyEyeballs = requireHappyEyeballs();
	const NET_DEFAULT_TIMEOUT = 3e4;
	function httpRequest(params, onResponse, onError) {
	  const parsedUrl = import_url.default.parse(params.url);
	  let options = {
	    ...parsedUrl,
	    agent: parsedUrl.protocol === "https:" ? import_happyEyeballs.httpsHappyEyeballsAgent : import_happyEyeballs.httpHappyEyeballsAgent,
	    method: params.method || "GET",
	    headers: params.headers
	  };
	  if (params.rejectUnauthorized !== void 0)
	    options.rejectUnauthorized = params.rejectUnauthorized;
	  const timeout = params.timeout ?? NET_DEFAULT_TIMEOUT;
	  const proxyURL = (0, import_utilsBundle.getProxyForUrl)(params.url);
	  if (proxyURL) {
	    const parsedProxyURL = import_url.default.parse(proxyURL);
	    if (params.url.startsWith("http:")) {
	      options = {
	        path: parsedUrl.href,
	        host: parsedProxyURL.hostname,
	        port: parsedProxyURL.port,
	        headers: options.headers,
	        method: options.method
	      };
	    } else {
	      parsedProxyURL.secureProxy = parsedProxyURL.protocol === "https:";
	      options.agent = new import_utilsBundle.HttpsProxyAgent(parsedProxyURL);
	      options.rejectUnauthorized = false;
	    }
	  }
	  const requestCallback = (res) => {
	    const statusCode = res.statusCode || 0;
	    if (statusCode >= 300 && statusCode < 400 && res.headers.location) {
	      request.destroy();
	      httpRequest({ ...params, url: new URL(res.headers.location, params.url).toString() }, onResponse, onError);
	    } else {
	      onResponse(res);
	    }
	  };
	  const request = options.protocol === "https:" ? import_https.default.request(options, requestCallback) : import_http.default.request(options, requestCallback);
	  request.on("error", onError);
	  if (timeout !== void 0) {
	    const rejectOnTimeout = () => {
	      onError(new Error(`Request to ${params.url} timed out after ${timeout}ms`));
	      request.abort();
	    };
	    if (timeout <= 0) {
	      rejectOnTimeout();
	      return;
	    }
	    request.setTimeout(timeout, rejectOnTimeout);
	  }
	  request.end(params.data);
	}
	function fetchData(params, onError) {
	  return new Promise((resolve, reject) => {
	    httpRequest(params, async (response) => {
	      if (response.statusCode !== 200) {
	        const error = onError ? await onError(params, response) : new Error(`fetch failed: server returned code ${response.statusCode}. URL: ${params.url}`);
	        reject(error);
	        return;
	      }
	      let body = "";
	      response.on("data", (chunk) => body += chunk);
	      response.on("error", (error) => reject(error));
	      response.on("end", () => resolve(body));
	    }, reject);
	  });
	}
	function shouldBypassProxy(url2, bypass) {
	  if (!bypass)
	    return false;
	  const domains = bypass.split(",").map((s) => {
	    s = s.trim();
	    if (!s.startsWith("."))
	      s = "." + s;
	    return s;
	  });
	  const domain = "." + url2.hostname;
	  return domains.some((d) => domain.endsWith(d));
	}
	function createProxyAgent(proxy, forUrl) {
	  if (!proxy)
	    return;
	  if (forUrl && proxy.bypass && shouldBypassProxy(forUrl, proxy.bypass))
	    return;
	  let proxyServer = proxy.server.trim();
	  if (!/^\w+:\/\//.test(proxyServer))
	    proxyServer = "http://" + proxyServer;
	  const proxyOpts = import_url.default.parse(proxyServer);
	  if (proxyOpts.protocol?.startsWith("socks")) {
	    return new import_utilsBundle.SocksProxyAgent({
	      host: proxyOpts.hostname,
	      port: proxyOpts.port || void 0
	    });
	  }
	  if (proxy.username)
	    proxyOpts.auth = `${proxy.username}:${proxy.password || ""}`;
	  if (forUrl && ["ws:", "wss:"].includes(forUrl.protocol)) {
	    return new import_utilsBundle.HttpsProxyAgent(proxyOpts);
	  }
	  return new import_utilsBundle.HttpsProxyAgent(proxyOpts);
	}
	function createHttpServer(...args) {
	  const server = import_http.default.createServer(...args);
	  decorateServer(server);
	  return server;
	}
	function createHttpsServer(...args) {
	  const server = import_https.default.createServer(...args);
	  decorateServer(server);
	  return server;
	}
	function createHttp2Server(...args) {
	  const server = import_http2.default.createSecureServer(...args);
	  decorateServer(server);
	  return server;
	}
	async function isURLAvailable(url2, ignoreHTTPSErrors, onLog, onStdErr) {
	  let statusCode = await httpStatusCode(url2, ignoreHTTPSErrors, onLog, onStdErr);
	  if (statusCode === 404 && url2.pathname === "/") {
	    const indexUrl = new URL(url2);
	    indexUrl.pathname = "/index.html";
	    statusCode = await httpStatusCode(indexUrl, ignoreHTTPSErrors, onLog, onStdErr);
	  }
	  return statusCode >= 200 && statusCode < 404;
	}
	async function httpStatusCode(url2, ignoreHTTPSErrors, onLog, onStdErr) {
	  return new Promise((resolve) => {
	    onLog?.(`HTTP GET: ${url2}`);
	    httpRequest({
	      url: url2.toString(),
	      headers: { Accept: "*/*" },
	      rejectUnauthorized: !ignoreHTTPSErrors
	    }, (res) => {
	      res.resume();
	      const statusCode = res.statusCode ?? 0;
	      onLog?.(`HTTP Status: ${statusCode}`);
	      resolve(statusCode);
	    }, (error) => {
	      if (error.code === "DEPTH_ZERO_SELF_SIGNED_CERT")
	        onStdErr?.(`[WebServer] Self-signed certificate detected. Try adding ignoreHTTPSErrors: true to config.webServer.`);
	      onLog?.(`Error while checking if ${url2} is available: ${error.message}`);
	      resolve(0);
	    });
	  });
	}
	function decorateServer(server) {
	  const sockets = /* @__PURE__ */ new Set();
	  server.on("connection", (socket) => {
	    sockets.add(socket);
	    socket.once("close", () => sockets.delete(socket));
	  });
	  const close = server.close;
	  server.close = (callback) => {
	    for (const socket of sockets)
	      socket.destroy();
	    sockets.clear();
	    return close.call(server, callback);
	  };
	}
	return network$2;
}

var httpServer;
var hasRequiredHttpServer;

function requireHttpServer () {
	if (hasRequiredHttpServer) return httpServer;
	hasRequiredHttpServer = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var httpServer_exports = {};
	__export(httpServer_exports, {
	  HttpServer: () => HttpServer
	});
	httpServer = __toCommonJS(httpServer_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_utilsBundle = requireUtilsBundle();
	var import_crypto = requireCrypto();
	var import_assert = requireAssert$1();
	var import_manualPromise = requireManualPromise();
	var import_network = requireNetwork$2();
	class HttpServer {
	  constructor() {
	    this._urlPrefixPrecise = "";
	    this._urlPrefixHumanReadable = "";
	    this._port = 0;
	    this._started = false;
	    this._routes = [];
	    this._server = (0, import_network.createHttpServer)(this._onRequest.bind(this));
	  }
	  server() {
	    return this._server;
	  }
	  routePrefix(prefix, handler) {
	    this._routes.push({ prefix, handler });
	  }
	  routePath(path2, handler) {
	    this._routes.push({ exact: path2, handler });
	  }
	  port() {
	    return this._port;
	  }
	  async _tryStart(port, host) {
	    const errorPromise = new import_manualPromise.ManualPromise();
	    const errorListener = (error) => errorPromise.reject(error);
	    this._server.on("error", errorListener);
	    try {
	      this._server.listen(port, host);
	      await Promise.race([
	        new Promise((cb) => this._server.once("listening", cb)),
	        errorPromise
	      ]);
	    } finally {
	      this._server.removeListener("error", errorListener);
	    }
	  }
	  createWebSocket(transport, guid) {
	    (0, import_assert.assert)(!this._wsGuid, "can only create one main websocket transport per server");
	    this._wsGuid = guid || (0, import_crypto.createGuid)();
	    const wss = new import_utilsBundle.wsServer({ server: this._server, path: "/" + this._wsGuid });
	    wss.on("connection", (ws) => {
	      transport.onconnect();
	      transport.sendEvent = (method, params) => ws.send(JSON.stringify({ method, params }));
	      transport.close = () => ws.close();
	      ws.on("message", async (message) => {
	        const { id, method, params } = JSON.parse(String(message));
	        try {
	          const result = await transport.dispatch(method, params);
	          ws.send(JSON.stringify({ id, result }));
	        } catch (e) {
	          ws.send(JSON.stringify({ id, error: String(e) }));
	        }
	      });
	      ws.on("close", () => transport.onclose());
	      ws.on("error", () => transport.onclose());
	    });
	  }
	  wsGuid() {
	    return this._wsGuid;
	  }
	  async start(options = {}) {
	    (0, import_assert.assert)(!this._started, "server already started");
	    this._started = true;
	    const host = options.host || "localhost";
	    if (options.preferredPort) {
	      try {
	        await this._tryStart(options.preferredPort, host);
	      } catch (e) {
	        if (!e || !e.message || !e.message.includes("EADDRINUSE"))
	          throw e;
	        await this._tryStart(void 0, host);
	      }
	    } else {
	      await this._tryStart(options.port, host);
	    }
	    const address = this._server.address();
	    (0, import_assert.assert)(address, "Could not bind server socket");
	    if (typeof address === "string") {
	      this._urlPrefixPrecise = address;
	      this._urlPrefixHumanReadable = address;
	    } else {
	      this._port = address.port;
	      const resolvedHost = address.family === "IPv4" ? address.address : `[${address.address}]`;
	      this._urlPrefixPrecise = `http://${resolvedHost}:${address.port}`;
	      this._urlPrefixHumanReadable = `http://${host}:${address.port}`;
	    }
	  }
	  async stop() {
	    await new Promise((cb) => this._server.close(cb));
	  }
	  urlPrefix(purpose) {
	    return purpose === "human-readable" ? this._urlPrefixHumanReadable : this._urlPrefixPrecise;
	  }
	  serveFile(request, response, absoluteFilePath, headers) {
	    try {
	      for (const [name, value] of Object.entries(headers || {}))
	        response.setHeader(name, value);
	      if (request.headers.range)
	        this._serveRangeFile(request, response, absoluteFilePath);
	      else
	        this._serveFile(response, absoluteFilePath);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }
	  _serveFile(response, absoluteFilePath) {
	    const content = import_fs.default.readFileSync(absoluteFilePath);
	    response.statusCode = 200;
	    const contentType = import_utilsBundle.mime.getType(import_path.default.extname(absoluteFilePath)) || "application/octet-stream";
	    response.setHeader("Content-Type", contentType);
	    response.setHeader("Content-Length", content.byteLength);
	    response.end(content);
	  }
	  _serveRangeFile(request, response, absoluteFilePath) {
	    const range = request.headers.range;
	    if (!range || !range.startsWith("bytes=") || range.includes(", ") || [...range].filter((char) => char === "-").length !== 1) {
	      response.statusCode = 400;
	      return response.end("Bad request");
	    }
	    const [startStr, endStr] = range.replace(/bytes=/, "").split("-");
	    let start;
	    let end;
	    const size = import_fs.default.statSync(absoluteFilePath).size;
	    if (startStr !== "" && endStr === "") {
	      start = +startStr;
	      end = size - 1;
	    } else if (startStr === "" && endStr !== "") {
	      start = size - +endStr;
	      end = size - 1;
	    } else {
	      start = +startStr;
	      end = +endStr;
	    }
	    if (Number.isNaN(start) || Number.isNaN(end) || start >= size || end >= size || start > end) {
	      response.writeHead(416, {
	        "Content-Range": `bytes */${size}`
	      });
	      return response.end();
	    }
	    response.writeHead(206, {
	      "Content-Range": `bytes ${start}-${end}/${size}`,
	      "Accept-Ranges": "bytes",
	      "Content-Length": end - start + 1,
	      "Content-Type": import_utilsBundle.mime.getType(import_path.default.extname(absoluteFilePath))
	    });
	    const readable = import_fs.default.createReadStream(absoluteFilePath, { start, end });
	    readable.pipe(response);
	  }
	  _onRequest(request, response) {
	    if (request.method === "OPTIONS") {
	      response.writeHead(200);
	      response.end();
	      return;
	    }
	    request.on("error", () => response.end());
	    try {
	      if (!request.url) {
	        response.end();
	        return;
	      }
	      const url = new URL("http://localhost" + request.url);
	      for (const route of this._routes) {
	        if (route.exact && url.pathname === route.exact && route.handler(request, response))
	          return;
	        if (route.prefix && url.pathname.startsWith(route.prefix) && route.handler(request, response))
	          return;
	      }
	      response.statusCode = 404;
	      response.end();
	    } catch (e) {
	      response.end();
	    }
	  }
	}
	return httpServer;
}

var zones;
var hasRequiredZones;

function requireZones () {
	if (hasRequiredZones) return zones;
	hasRequiredZones = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var zones_exports = {};
	__export(zones_exports, {
	  Zone: () => Zone,
	  currentZone: () => currentZone,
	  emptyZone: () => emptyZone
	});
	zones = __toCommonJS(zones_exports);
	var import_async_hooks = require$$0$6;
	const asyncLocalStorage = new import_async_hooks.AsyncLocalStorage();
	class Zone {
	  constructor(asyncLocalStorage2, store) {
	    this._asyncLocalStorage = asyncLocalStorage2;
	    this._data = store;
	  }
	  with(type, data) {
	    return new Zone(this._asyncLocalStorage, new Map(this._data).set(type, data));
	  }
	  without(type) {
	    const data = type ? new Map(this._data) : /* @__PURE__ */ new Map();
	    data.delete(type);
	    return new Zone(this._asyncLocalStorage, data);
	  }
	  run(func) {
	    return this._asyncLocalStorage.run(this, func);
	  }
	  data(type) {
	    return this._data.get(type);
	  }
	}
	const emptyZone = new Zone(asyncLocalStorage, /* @__PURE__ */ new Map());
	function currentZone() {
	  return asyncLocalStorage.getStore() ?? emptyZone;
	}
	return zones;
}

var nodePlatform_1;
var hasRequiredNodePlatform;

function requireNodePlatform () {
	if (hasRequiredNodePlatform) return nodePlatform_1;
	hasRequiredNodePlatform = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var nodePlatform_exports = {};
	__export(nodePlatform_exports, {
	  nodePlatform: () => nodePlatform,
	  setBoxedStackPrefixes: () => setBoxedStackPrefixes
	});
	nodePlatform_1 = __toCommonJS(nodePlatform_exports);
	var import_crypto = __toESM(require$$5);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var util = __toESM(require$$1);
	var import_stream = require$$12;
	var import_events = require$$0$5;
	var import_utilsBundle = requireUtilsBundle();
	var import_debugLogger = requireDebugLogger();
	var import_zones = requireZones();
	var import_debug = requireDebug$1();
	const pipelineAsync = util.promisify(import_stream.pipeline);
	class NodeZone {
	  constructor(zone) {
	    this._zone = zone;
	  }
	  push(data) {
	    return new NodeZone(this._zone.with("apiZone", data));
	  }
	  pop() {
	    return new NodeZone(this._zone.without("apiZone"));
	  }
	  run(func) {
	    return this._zone.run(func);
	  }
	  data() {
	    return this._zone.data("apiZone");
	  }
	}
	let boxedStackPrefixes = [];
	function setBoxedStackPrefixes(prefixes) {
	  boxedStackPrefixes = prefixes;
	}
	const coreDir = import_path.default.dirname(require.resolve("../../../package.json"));
	const nodePlatform = {
	  name: "node",
	  boxedStackPrefixes: () => {
	    if (process.env.PWDEBUGIMPL)
	      return [];
	    return [coreDir, ...boxedStackPrefixes];
	  },
	  calculateSha1: (text) => {
	    const sha1 = import_crypto.default.createHash("sha1");
	    sha1.update(text);
	    return Promise.resolve(sha1.digest("hex"));
	  },
	  colors: import_utilsBundle.colors,
	  coreDir,
	  createGuid: () => import_crypto.default.randomBytes(16).toString("hex"),
	  defaultMaxListeners: () => import_events.EventEmitter.defaultMaxListeners,
	  fs: () => import_fs.default,
	  env: process.env,
	  inspectCustom: util.inspect.custom,
	  isDebugMode: () => !!(0, import_debug.debugMode)(),
	  isJSDebuggerAttached: () => !!require$$10$2.url(),
	  isLogEnabled(name) {
	    return import_debugLogger.debugLogger.isEnabled(name);
	  },
	  isUnderTest: () => (0, import_debug.isUnderTest)(),
	  log(name, message) {
	    import_debugLogger.debugLogger.log(name, message);
	  },
	  path: () => import_path.default,
	  pathSeparator: import_path.default.sep,
	  showInternalStackFrames: () => !!process.env.PWDEBUGIMPL,
	  async streamFile(path2, stream) {
	    await pipelineAsync(import_fs.default.createReadStream(path2), stream);
	  },
	  streamReadable: (channel) => {
	    return new ReadableStreamImpl(channel);
	  },
	  streamWritable: (channel) => {
	    return new WritableStreamImpl(channel);
	  },
	  zones: {
	    current: () => new NodeZone((0, import_zones.currentZone)()),
	    empty: new NodeZone(import_zones.emptyZone)
	  }
	};
	class ReadableStreamImpl extends import_stream.Readable {
	  constructor(channel) {
	    super();
	    this._channel = channel;
	  }
	  async _read() {
	    const result = await this._channel.read({ size: 1024 * 1024 });
	    if (result.binary.byteLength)
	      this.push(result.binary);
	    else
	      this.push(null);
	  }
	  _destroy(error, callback) {
	    this._channel.close().catch((e) => null);
	    super._destroy(error, callback);
	  }
	}
	class WritableStreamImpl extends import_stream.Writable {
	  constructor(channel) {
	    super();
	    this._channel = channel;
	  }
	  async _write(chunk, encoding, callback) {
	    const error = await this._channel.write({ binary: typeof chunk === "string" ? Buffer.from(chunk) : chunk }).catch((e) => e);
	    callback(error || null);
	  }
	  async _final(callback) {
	    const error = await this._channel.close().catch((e) => e);
	    callback(error || null);
	  }
	}
	return nodePlatform_1;
}

var processLauncher;
var hasRequiredProcessLauncher;

function requireProcessLauncher () {
	if (hasRequiredProcessLauncher) return processLauncher;
	hasRequiredProcessLauncher = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var processLauncher_exports = {};
	__export(processLauncher_exports, {
	  envArrayToObject: () => envArrayToObject,
	  gracefullyCloseAll: () => gracefullyCloseAll,
	  gracefullyCloseSet: () => gracefullyCloseSet,
	  gracefullyProcessExitDoNotHang: () => gracefullyProcessExitDoNotHang,
	  launchProcess: () => launchProcess
	});
	processLauncher = __toCommonJS(processLauncher_exports);
	var childProcess = __toESM(require$$0$3);
	var import_fs = __toESM(require$$0$4);
	var readline = __toESM(require$$2);
	var import_fileUtils = requireFileUtils$1();
	var import_utils = requireUtils();
	const gracefullyCloseSet = /* @__PURE__ */ new Set();
	const killSet = /* @__PURE__ */ new Set();
	async function gracefullyCloseAll() {
	  await Promise.all(Array.from(gracefullyCloseSet).map((gracefullyClose) => gracefullyClose().catch((e) => {
	  })));
	}
	function gracefullyProcessExitDoNotHang(code) {
	  setTimeout(() => process.exit(code), 3e4);
	  gracefullyCloseAll().then(() => {
	    process.exit(code);
	  });
	}
	function exitHandler() {
	  for (const kill of killSet)
	    kill();
	}
	let sigintHandlerCalled = false;
	function sigintHandler() {
	  const exitWithCode130 = () => {
	    if ((0, import_utils.isUnderTest)()) {
	      setTimeout(() => process.exit(130), 1e3);
	    } else {
	      process.exit(130);
	    }
	  };
	  if (sigintHandlerCalled) {
	    process.off("SIGINT", sigintHandler);
	    for (const kill of killSet)
	      kill();
	    exitWithCode130();
	  } else {
	    sigintHandlerCalled = true;
	    gracefullyCloseAll().then(() => exitWithCode130());
	  }
	}
	function sigtermHandler() {
	  gracefullyCloseAll();
	}
	function sighupHandler() {
	  gracefullyCloseAll();
	}
	const installedHandlers = /* @__PURE__ */ new Set();
	const processHandlers = {
	  exit: exitHandler,
	  SIGINT: sigintHandler,
	  SIGTERM: sigtermHandler,
	  SIGHUP: sighupHandler
	};
	function addProcessHandlerIfNeeded(name) {
	  if (!installedHandlers.has(name)) {
	    installedHandlers.add(name);
	    process.on(name, processHandlers[name]);
	  }
	}
	function removeProcessHandlersIfNeeded() {
	  if (killSet.size)
	    return;
	  for (const handler of installedHandlers)
	    process.off(handler, processHandlers[handler]);
	  installedHandlers.clear();
	}
	async function launchProcess(options) {
	  const stdio = options.stdio === "pipe" ? ["ignore", "pipe", "pipe", "pipe", "pipe"] : ["pipe", "pipe", "pipe"];
	  options.log(`<launching> ${options.command} ${options.args ? options.args.join(" ") : ""}`);
	  const spawnOptions = {
	    // On non-windows platforms, `detached: true` makes child process a leader of a new
	    // process group, making it possible to kill child process tree with `.kill(-pid)` command.
	    // @see https://nodejs.org/api/child_process.html#child_process_options_detached
	    detached: process.platform !== "win32",
	    env: options.env,
	    cwd: options.cwd,
	    shell: options.shell,
	    stdio
	  };
	  const spawnedProcess = childProcess.spawn(options.command, options.args || [], spawnOptions);
	  const cleanup = async () => {
	    options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
	    const errors = await (0, import_fileUtils.removeFolders)(options.tempDirectories);
	    for (let i = 0; i < options.tempDirectories.length; ++i) {
	      if (errors[i])
	        options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${options.tempDirectories[i]}: ${errors[i]}`);
	    }
	    options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
	  };
	  spawnedProcess.on("error", () => {
	  });
	  if (!spawnedProcess.pid) {
	    let failed;
	    const failedPromise = new Promise((f, r) => failed = f);
	    spawnedProcess.once("error", (error) => {
	      failed(new Error("Failed to launch: " + error));
	    });
	    return cleanup().then(() => failedPromise).then((e) => Promise.reject(e));
	  }
	  options.log(`<launched> pid=${spawnedProcess.pid}`);
	  const stdout = readline.createInterface({ input: spawnedProcess.stdout });
	  stdout.on("line", (data) => {
	    options.log(`[pid=${spawnedProcess.pid}][out] ` + data);
	  });
	  const stderr = readline.createInterface({ input: spawnedProcess.stderr });
	  stderr.on("line", (data) => {
	    options.log(`[pid=${spawnedProcess.pid}][err] ` + data);
	  });
	  let processClosed = false;
	  let fulfillCleanup = () => {
	  };
	  const waitForCleanup = new Promise((f) => fulfillCleanup = f);
	  spawnedProcess.once("close", (exitCode, signal) => {
	    options.log(`[pid=${spawnedProcess.pid}] <process did exit: exitCode=${exitCode}, signal=${signal}>`);
	    processClosed = true;
	    gracefullyCloseSet.delete(gracefullyClose);
	    killSet.delete(killProcessAndCleanup);
	    removeProcessHandlersIfNeeded();
	    options.onExit(exitCode, signal);
	    cleanup().then(fulfillCleanup);
	  });
	  addProcessHandlerIfNeeded("exit");
	  if (options.handleSIGINT)
	    addProcessHandlerIfNeeded("SIGINT");
	  if (options.handleSIGTERM)
	    addProcessHandlerIfNeeded("SIGTERM");
	  if (options.handleSIGHUP)
	    addProcessHandlerIfNeeded("SIGHUP");
	  gracefullyCloseSet.add(gracefullyClose);
	  killSet.add(killProcessAndCleanup);
	  let gracefullyClosing = false;
	  async function gracefullyClose() {
	    if (gracefullyClosing) {
	      options.log(`[pid=${spawnedProcess.pid}] <forcefully close>`);
	      killProcess();
	      await waitForCleanup;
	      return;
	    }
	    gracefullyClosing = true;
	    options.log(`[pid=${spawnedProcess.pid}] <gracefully close start>`);
	    await options.attemptToGracefullyClose().catch(() => killProcess());
	    await waitForCleanup;
	    options.log(`[pid=${spawnedProcess.pid}] <gracefully close end>`);
	  }
	  function killProcess() {
	    gracefullyCloseSet.delete(gracefullyClose);
	    killSet.delete(killProcessAndCleanup);
	    removeProcessHandlersIfNeeded();
	    options.log(`[pid=${spawnedProcess.pid}] <kill>`);
	    if (spawnedProcess.pid && !spawnedProcess.killed && !processClosed) {
	      options.log(`[pid=${spawnedProcess.pid}] <will force kill>`);
	      try {
	        if (process.platform === "win32") {
	          const taskkillProcess = childProcess.spawnSync(`taskkill /pid ${spawnedProcess.pid} /T /F`, { shell: true });
	          const [stdout2, stderr2] = [taskkillProcess.stdout.toString(), taskkillProcess.stderr.toString()];
	          if (stdout2)
	            options.log(`[pid=${spawnedProcess.pid}] taskkill stdout: ${stdout2}`);
	          if (stderr2)
	            options.log(`[pid=${spawnedProcess.pid}] taskkill stderr: ${stderr2}`);
	        } else {
	          process.kill(-spawnedProcess.pid, "SIGKILL");
	        }
	      } catch (e) {
	        options.log(`[pid=${spawnedProcess.pid}] exception while trying to kill process: ${e}`);
	      }
	    } else {
	      options.log(`[pid=${spawnedProcess.pid}] <skipped force kill spawnedProcess.killed=${spawnedProcess.killed} processClosed=${processClosed}>`);
	    }
	  }
	  function killProcessAndCleanup() {
	    killProcess();
	    options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
	    for (const dir of options.tempDirectories) {
	      try {
	        import_fs.default.rmSync(dir, { force: true, recursive: true, maxRetries: 5 });
	      } catch (e) {
	        options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${dir}: ${e}`);
	      }
	    }
	    options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
	  }
	  function killAndWait() {
	    killProcess();
	    return waitForCleanup;
	  }
	  return { launchedProcess: spawnedProcess, gracefullyClose, kill: killAndWait };
	}
	function envArrayToObject(env) {
	  const result = {};
	  for (const { name, value } of env)
	    result[name] = value;
	  return result;
	}
	return processLauncher;
}

var profiler;
var hasRequiredProfiler;

function requireProfiler () {
	if (hasRequiredProfiler) return profiler;
	hasRequiredProfiler = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var profiler_exports = {};
	__export(profiler_exports, {
	  startProfiling: () => startProfiling,
	  stopProfiling: () => stopProfiling
	});
	profiler = __toCommonJS(profiler_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	const profileDir = process.env.PWTEST_PROFILE_DIR || "";
	let session;
	async function startProfiling() {
	  if (!profileDir)
	    return;
	  session = new (require$$10$2).Session();
	  session.connect();
	  await new Promise((f) => {
	    session.post("Profiler.enable", () => {
	      session.post("Profiler.start", f);
	    });
	  });
	}
	async function stopProfiling(profileName) {
	  if (!profileDir)
	    return;
	  await new Promise((f) => session.post("Profiler.stop", (err, { profile }) => {
	    if (!err) {
	      import_fs.default.mkdirSync(profileDir, { recursive: true });
	      import_fs.default.writeFileSync(import_path.default.join(profileDir, profileName + ".json"), JSON.stringify(profile));
	    }
	    f();
	  }));
	}
	return profiler;
}

var task;
var hasRequiredTask;

function requireTask () {
	if (hasRequiredTask) return task;
	hasRequiredTask = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var task_exports = {};
	__export(task_exports, {
	  makeWaitForNextTask: () => makeWaitForNextTask
	});
	task = __toCommonJS(task_exports);
	function makeWaitForNextTask() {
	  if (process.versions.electron)
	    return (callback) => setTimeout(callback, 0);
	  if (parseInt(process.versions.node, 10) >= 11)
	    return setImmediate;
	  let spinning = false;
	  const callbacks = [];
	  const loop = () => {
	    const callback = callbacks.shift();
	    if (!callback) {
	      spinning = false;
	      return;
	    }
	    setImmediate(loop);
	    callback();
	  };
	  return (callback) => {
	    callbacks.push(callback);
	    if (!spinning) {
	      spinning = true;
	      setImmediate(loop);
	    }
	  };
	}
	return task;
}

var wsServer;
var hasRequiredWsServer;

function requireWsServer () {
	if (hasRequiredWsServer) return wsServer;
	hasRequiredWsServer = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wsServer_exports = {};
	__export(wsServer_exports, {
	  WSServer: () => WSServer,
	  perMessageDeflate: () => perMessageDeflate
	});
	wsServer = __toCommonJS(wsServer_exports);
	var import_network = requireNetwork$2();
	var import_utilsBundle = requireUtilsBundle();
	var import_debugLogger = requireDebugLogger();
	let lastConnectionId = 0;
	const kConnectionSymbol = Symbol("kConnection");
	const perMessageDeflate = {
	  serverNoContextTakeover: true,
	  zlibDeflateOptions: {
	    level: 3
	  },
	  zlibInflateOptions: {
	    chunkSize: 10 * 1024
	  },
	  threshold: 10 * 1024
	};
	class WSServer {
	  constructor(delegate) {
	    this._delegate = delegate;
	  }
	  async listen(port = 0, hostname, path) {
	    import_debugLogger.debugLogger.log("server", `Server started at ${/* @__PURE__ */ new Date()}`);
	    const server = (0, import_network.createHttpServer)((request, response) => {
	      if (request.method === "GET" && request.url === "/json") {
	        response.setHeader("Content-Type", "application/json");
	        response.end(JSON.stringify({
	          wsEndpointPath: path
	        }));
	        return;
	      }
	      response.end("Running");
	    });
	    server.on("error", (error) => import_debugLogger.debugLogger.log("server", String(error)));
	    this.server = server;
	    const wsEndpoint = await new Promise((resolve, reject) => {
	      server.listen(port, hostname, () => {
	        const address = server.address();
	        if (!address) {
	          reject(new Error("Could not bind server socket"));
	          return;
	        }
	        const wsEndpoint2 = typeof address === "string" ? `${address}${path}` : `ws://${hostname || "localhost"}:${address.port}${path}`;
	        resolve(wsEndpoint2);
	      }).on("error", reject);
	    });
	    import_debugLogger.debugLogger.log("server", "Listening at " + wsEndpoint);
	    this._wsServer = new import_utilsBundle.wsServer({
	      noServer: true,
	      perMessageDeflate
	    });
	    if (this._delegate.onHeaders)
	      this._wsServer.on("headers", (headers) => this._delegate.onHeaders(headers));
	    server.on("upgrade", (request, socket, head) => {
	      const pathname = new URL("http://localhost" + request.url).pathname;
	      if (pathname !== path) {
	        socket.write(`HTTP/${request.httpVersion} 400 Bad Request\r
\r
`);
	        socket.destroy();
	        return;
	      }
	      const upgradeResult = this._delegate.onUpgrade?.(request, socket);
	      if (upgradeResult) {
	        socket.write(upgradeResult.error);
	        socket.destroy();
	        return;
	      }
	      this._wsServer?.handleUpgrade(request, socket, head, (ws) => this._wsServer?.emit("connection", ws, request));
	    });
	    this._wsServer.on("connection", (ws, request) => {
	      import_debugLogger.debugLogger.log("server", "Connected client ws.extension=" + ws.extensions);
	      const url = new URL("http://localhost" + (request.url || ""));
	      const id = String(++lastConnectionId);
	      import_debugLogger.debugLogger.log("server", `[${id}] serving connection: ${request.url}`);
	      const connection = this._delegate.onConnection(request, url, ws, id);
	      ws[kConnectionSymbol] = connection;
	    });
	    return wsEndpoint;
	  }
	  async close() {
	    const server = this._wsServer;
	    if (!server)
	      return;
	    import_debugLogger.debugLogger.log("server", "closing websocket server");
	    const waitForClose = new Promise((f) => server.close(f));
	    await Promise.all(Array.from(server.clients).map(async (ws) => {
	      const connection = ws[kConnectionSymbol];
	      if (connection)
	        await connection.close();
	      try {
	        ws.terminate();
	      } catch (e) {
	      }
	    }));
	    await waitForClose;
	    import_debugLogger.debugLogger.log("server", "closing http server");
	    if (this.server)
	      await new Promise((f) => this.server.close(f));
	    this._wsServer = void 0;
	    this.server = void 0;
	    import_debugLogger.debugLogger.log("server", "closed server");
	    await this._delegate.onClose?.();
	  }
	}
	return wsServer;
}

var zipFile;
var hasRequiredZipFile;

function requireZipFile () {
	if (hasRequiredZipFile) return zipFile;
	hasRequiredZipFile = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var zipFile_exports = {};
	__export(zipFile_exports, {
	  ZipFile: () => ZipFile
	});
	zipFile = __toCommonJS(zipFile_exports);
	var import_zipBundle = requireZipBundle();
	class ZipFile {
	  constructor(fileName) {
	    this._entries = /* @__PURE__ */ new Map();
	    this._fileName = fileName;
	    this._openedPromise = this._open();
	  }
	  async _open() {
	    await new Promise((fulfill, reject) => {
	      import_zipBundle.yauzl.open(this._fileName, { autoClose: false }, (e, z) => {
	        if (e) {
	          reject(e);
	          return;
	        }
	        this._zipFile = z;
	        this._zipFile.on("entry", (entry) => {
	          this._entries.set(entry.fileName, entry);
	        });
	        this._zipFile.on("end", fulfill);
	      });
	    });
	  }
	  async entries() {
	    await this._openedPromise;
	    return [...this._entries.keys()];
	  }
	  async read(entryPath) {
	    await this._openedPromise;
	    const entry = this._entries.get(entryPath);
	    if (!entry)
	      throw new Error(`${entryPath} not found in file ${this._fileName}`);
	    return new Promise((resolve, reject) => {
	      this._zipFile.openReadStream(entry, (error, readStream) => {
	        if (error || !readStream) {
	          reject(error || "Entry not found");
	          return;
	        }
	        const buffers = [];
	        readStream.on("data", (data) => buffers.push(data));
	        readStream.on("end", () => resolve(Buffer.concat(buffers)));
	      });
	    });
	  }
	  close() {
	    this._zipFile?.close();
	  }
	}
	return zipFile;
}

utils.exports;

var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils.exports;
	hasRequiredUtils = 1;
	(function (module) {
		var __defProp = Object.defineProperty;
		var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
		var __getOwnPropNames = Object.getOwnPropertyNames;
		var __hasOwnProp = Object.prototype.hasOwnProperty;
		var __export = (target, all) => {
		  for (var name in all)
		    __defProp(target, name, { get: all[name], enumerable: true });
		};
		var __copyProps = (to, from, except, desc) => {
		  if (from && typeof from === "object" || typeof from === "function") {
		    for (let key of __getOwnPropNames(from))
		      if (!__hasOwnProp.call(to, key) && key !== except)
		        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
		  }
		  return to;
		};
		var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
		var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
		var utils_exports = {};
		__export(utils_exports, {
		  colors: () => import_utilsBundle.colors
		});
		module.exports = __toCommonJS(utils_exports);
		__reExport(utils_exports, requireColors(), module.exports);
		__reExport(utils_exports, requireAssert$1(), module.exports);
		__reExport(utils_exports, requireHeaders(), module.exports);
		__reExport(utils_exports, requireLocatorGenerators(), module.exports);
		__reExport(utils_exports, requireManualPromise(), module.exports);
		__reExport(utils_exports, requireMimeType(), module.exports);
		__reExport(utils_exports, requireMultimap(), module.exports);
		__reExport(utils_exports, requireRtti(), module.exports);
		__reExport(utils_exports, requireSemaphore(), module.exports);
		__reExport(utils_exports, requireStackTrace(), module.exports);
		__reExport(utils_exports, requireStringUtils(), module.exports);
		__reExport(utils_exports, requireTime$1(), module.exports);
		__reExport(utils_exports, requireTimeoutRunner(), module.exports);
		__reExport(utils_exports, requireUrlMatch(), module.exports);
		__reExport(utils_exports, requireAscii(), module.exports);
		__reExport(utils_exports, requireComparators(), module.exports);
		__reExport(utils_exports, requireCrypto(), module.exports);
		__reExport(utils_exports, requireDebug$1(), module.exports);
		__reExport(utils_exports, requireDebugLogger(), module.exports);
		__reExport(utils_exports, requireEnv(), module.exports);
		__reExport(utils_exports, requireEventsHelper(), module.exports);
		__reExport(utils_exports, requireExpectUtils(), module.exports);
		__reExport(utils_exports, requireFileUtils$1(), module.exports);
		__reExport(utils_exports, requireHostPlatform(), module.exports);
		__reExport(utils_exports, requireHttpServer(), module.exports);
		__reExport(utils_exports, requireNetwork$2(), module.exports);
		__reExport(utils_exports, requireNodePlatform(), module.exports);
		__reExport(utils_exports, requireProcessLauncher(), module.exports);
		__reExport(utils_exports, requireProfiler(), module.exports);
		__reExport(utils_exports, requireSocksProxy(), module.exports);
		__reExport(utils_exports, requireSpawnAsync(), module.exports);
		__reExport(utils_exports, requireTask(), module.exports);
		__reExport(utils_exports, requireUserAgent(), module.exports);
		__reExport(utils_exports, requireWsServer(), module.exports);
		__reExport(utils_exports, requireZipFile(), module.exports);
		__reExport(utils_exports, requireZones(), module.exports);
		var import_utilsBundle = requireUtilsBundle();
	} (utils));
	return utils.exports;
}

var comment = "Do not edit this file, use utils/roll_browser.js";
var browsers = [
	{
		name: "chromium",
		revision: "1169",
		installByDefault: true,
		browserVersion: "136.0.7103.25"
	},
	{
		name: "chromium-headless-shell",
		revision: "1169",
		installByDefault: true,
		browserVersion: "136.0.7103.25"
	},
	{
		name: "chromium-tip-of-tree",
		revision: "1320",
		installByDefault: false,
		browserVersion: "137.0.7105.0"
	},
	{
		name: "chromium-tip-of-tree-headless-shell",
		revision: "1320",
		installByDefault: false,
		browserVersion: "137.0.7105.0"
	},
	{
		name: "firefox",
		revision: "1482",
		installByDefault: true,
		browserVersion: "137.0"
	},
	{
		name: "firefox-beta",
		revision: "1477",
		installByDefault: false,
		browserVersion: "137.0b2"
	},
	{
		name: "webkit",
		revision: "2158",
		installByDefault: true,
		revisionOverrides: {
			"debian11-x64": "2105",
			"debian11-arm64": "2105",
			"mac10.14": "1446",
			"mac10.15": "1616",
			mac11: "1816",
			"mac11-arm64": "1816",
			mac12: "2009",
			"mac12-arm64": "2009",
			mac13: "2140",
			"mac13-arm64": "2140",
			"ubuntu20.04-x64": "2092",
			"ubuntu20.04-arm64": "2092"
		},
		browserVersion: "18.4"
	},
	{
		name: "ffmpeg",
		revision: "1011",
		installByDefault: true,
		revisionOverrides: {
			mac12: "1010",
			"mac12-arm64": "1010"
		}
	},
	{
		name: "winldd",
		revision: "1007",
		installByDefault: false
	},
	{
		name: "android",
		revision: "1001",
		installByDefault: false
	}
];
var require$$15 = {
	comment: comment,
	browsers: browsers
};

var registry_1;
var hasRequiredRegistry;

function requireRegistry () {
	if (hasRequiredRegistry) return registry_1;
	hasRequiredRegistry = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var registry_exports = {};
	__export(registry_exports, {
	  Registry: () => Registry,
	  browserDirectoryToMarkerFilePath: () => browserDirectoryToMarkerFilePath,
	  buildPlaywrightCLICommand: () => buildPlaywrightCLICommand,
	  findChromiumChannel: () => findChromiumChannel,
	  installBrowsersForNpmInstall: () => installBrowsersForNpmInstall,
	  registry: () => registry,
	  registryDirectory: () => registryDirectory,
	  writeDockerVersion: () => import_dependencies3.writeDockerVersion
	});
	registry_1 = __toCommonJS(registry_exports);
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var util = __toESM(require$$1);
	var import_browserFetcher = requireBrowserFetcher();
	var import_dependencies = requireDependencies();
	var import_dependencies2 = requireDependencies();
	var import_utils = requireUtils();
	var import_ascii = requireAscii();
	var import_debugLogger = requireDebugLogger();
	var import_hostPlatform = requireHostPlatform();
	var import_network = requireNetwork$2();
	var import_spawnAsync = requireSpawnAsync();
	var import_userAgent = requireUserAgent();
	var import_utilsBundle = requireUtilsBundle();
	var import_fileUtils = requireFileUtils$1();
	var import_dependencies3 = requireDependencies();
	const PACKAGE_PATH = import_path.default.join(__dirname, "..", "..", "..");
	const BIN_PATH = import_path.default.join(__dirname, "..", "..", "..", "bin");
	const PLAYWRIGHT_CDN_MIRRORS = [
	  "https://cdn.playwright.dev/dbazure/download/playwright",
	  // ESRP CDN
	  "https://playwright.download.prss.microsoft.com/dbazure/download/playwright",
	  // Directly hit ESRP CDN
	  "https://cdn.playwright.dev"
	  // Hit the Storage Bucket directly
	];
	if (process.env.PW_TEST_CDN_THAT_SHOULD_WORK) {
	  for (let i = 0; i < PLAYWRIGHT_CDN_MIRRORS.length; i++) {
	    const cdn = PLAYWRIGHT_CDN_MIRRORS[i];
	    if (cdn !== process.env.PW_TEST_CDN_THAT_SHOULD_WORK) {
	      const parsedCDN = new URL(cdn);
	      parsedCDN.hostname = parsedCDN.hostname + ".does-not-resolve.playwright.dev";
	      PLAYWRIGHT_CDN_MIRRORS[i] = parsedCDN.toString();
	    }
	  }
	}
	const EXECUTABLE_PATHS = {
	  "chromium": {
	    "linux": ["chrome-linux", "chrome"],
	    "mac": ["chrome-mac", "Chromium.app", "Contents", "MacOS", "Chromium"],
	    "win": ["chrome-win", "chrome.exe"]
	  },
	  "chromium-headless-shell": {
	    "linux": ["chrome-linux", "headless_shell"],
	    "mac": ["chrome-mac", "headless_shell"],
	    "win": ["chrome-win", "headless_shell.exe"]
	  },
	  "firefox": {
	    "linux": ["firefox", "firefox"],
	    "mac": ["firefox", "Nightly.app", "Contents", "MacOS", "firefox"],
	    "win": ["firefox", "firefox.exe"]
	  },
	  "webkit": {
	    "linux": ["pw_run.sh"],
	    "mac": ["pw_run.sh"],
	    "win": ["Playwright.exe"]
	  },
	  "ffmpeg": {
	    "linux": ["ffmpeg-linux"],
	    "mac": ["ffmpeg-mac"],
	    "win": ["ffmpeg-win64.exe"]
	  },
	  "winldd": {
	    "linux": void 0,
	    "mac": void 0,
	    "win": ["PrintDeps.exe"]
	  }
	};
	const DOWNLOAD_PATHS = {
	  "chromium": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/chromium/%s/chromium-linux.zip",
	    "ubuntu22.04-x64": "builds/chromium/%s/chromium-linux.zip",
	    "ubuntu24.04-x64": "builds/chromium/%s/chromium-linux.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
	    "ubuntu22.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
	    "ubuntu24.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
	    "debian11-x64": "builds/chromium/%s/chromium-linux.zip",
	    "debian11-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
	    "debian12-x64": "builds/chromium/%s/chromium-linux.zip",
	    "debian12-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
	    "mac10.13": "builds/chromium/%s/chromium-mac.zip",
	    "mac10.14": "builds/chromium/%s/chromium-mac.zip",
	    "mac10.15": "builds/chromium/%s/chromium-mac.zip",
	    "mac11": "builds/chromium/%s/chromium-mac.zip",
	    "mac11-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
	    "mac12": "builds/chromium/%s/chromium-mac.zip",
	    "mac12-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
	    "mac13": "builds/chromium/%s/chromium-mac.zip",
	    "mac13-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
	    "mac14": "builds/chromium/%s/chromium-mac.zip",
	    "mac14-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
	    "mac15": "builds/chromium/%s/chromium-mac.zip",
	    "mac15-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
	    "win64": "builds/chromium/%s/chromium-win64.zip"
	  },
	  "chromium-headless-shell": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
	    "ubuntu22.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
	    "ubuntu24.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
	    "ubuntu22.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
	    "ubuntu24.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
	    "debian11-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
	    "debian11-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
	    "debian12-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
	    "debian12-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
	    "mac10.13": void 0,
	    "mac10.14": void 0,
	    "mac10.15": void 0,
	    "mac11": "builds/chromium/%s/chromium-headless-shell-mac.zip",
	    "mac11-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
	    "mac12": "builds/chromium/%s/chromium-headless-shell-mac.zip",
	    "mac12-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
	    "mac13": "builds/chromium/%s/chromium-headless-shell-mac.zip",
	    "mac13-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
	    "mac14": "builds/chromium/%s/chromium-headless-shell-mac.zip",
	    "mac14-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
	    "mac15": "builds/chromium/%s/chromium-headless-shell-mac.zip",
	    "mac15-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
	    "win64": "builds/chromium/%s/chromium-headless-shell-win64.zip"
	  },
	  "chromium-tip-of-tree": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
	    "ubuntu22.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
	    "ubuntu24.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
	    "ubuntu22.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
	    "ubuntu24.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
	    "debian11-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
	    "debian11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
	    "debian12-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
	    "debian12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
	    "mac10.13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
	    "mac10.14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
	    "mac10.15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
	    "mac11": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
	    "mac11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
	    "mac12": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
	    "mac12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
	    "mac13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
	    "mac13-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
	    "mac14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
	    "mac14-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
	    "mac15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
	    "mac15-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
	    "win64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-win64.zip"
	  },
	  "chromium-tip-of-tree-headless-shell": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
	    "ubuntu22.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
	    "ubuntu24.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
	    "ubuntu22.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
	    "ubuntu24.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
	    "debian11-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
	    "debian11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
	    "debian12-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux.zip",
	    "debian12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-linux-arm64.zip",
	    "mac10.13": void 0,
	    "mac10.14": void 0,
	    "mac10.15": void 0,
	    "mac11": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
	    "mac11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
	    "mac12": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
	    "mac12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
	    "mac13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
	    "mac13-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
	    "mac14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
	    "mac14-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
	    "mac15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac.zip",
	    "mac15-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-mac-arm64.zip",
	    "win64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-headless-shell-win64.zip"
	  },
	  "firefox": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/firefox/%s/firefox-ubuntu-20.04.zip",
	    "ubuntu22.04-x64": "builds/firefox/%s/firefox-ubuntu-22.04.zip",
	    "ubuntu24.04-x64": "builds/firefox/%s/firefox-ubuntu-24.04.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": "builds/firefox/%s/firefox-ubuntu-20.04-arm64.zip",
	    "ubuntu22.04-arm64": "builds/firefox/%s/firefox-ubuntu-22.04-arm64.zip",
	    "ubuntu24.04-arm64": "builds/firefox/%s/firefox-ubuntu-24.04-arm64.zip",
	    "debian11-x64": "builds/firefox/%s/firefox-debian-11.zip",
	    "debian11-arm64": "builds/firefox/%s/firefox-debian-11-arm64.zip",
	    "debian12-x64": "builds/firefox/%s/firefox-debian-12.zip",
	    "debian12-arm64": "builds/firefox/%s/firefox-debian-12-arm64.zip",
	    "mac10.13": "builds/firefox/%s/firefox-mac.zip",
	    "mac10.14": "builds/firefox/%s/firefox-mac.zip",
	    "mac10.15": "builds/firefox/%s/firefox-mac.zip",
	    "mac11": "builds/firefox/%s/firefox-mac.zip",
	    "mac11-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
	    "mac12": "builds/firefox/%s/firefox-mac.zip",
	    "mac12-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
	    "mac13": "builds/firefox/%s/firefox-mac.zip",
	    "mac13-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
	    "mac14": "builds/firefox/%s/firefox-mac.zip",
	    "mac14-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
	    "mac15": "builds/firefox/%s/firefox-mac.zip",
	    "mac15-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
	    "win64": "builds/firefox/%s/firefox-win64.zip"
	  },
	  "firefox-beta": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-20.04.zip",
	    "ubuntu22.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04.zip",
	    "ubuntu24.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-24.04.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": void 0,
	    "ubuntu22.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04-arm64.zip",
	    "ubuntu24.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-24.04-arm64.zip",
	    "debian11-x64": "builds/firefox-beta/%s/firefox-beta-debian-11.zip",
	    "debian11-arm64": "builds/firefox-beta/%s/firefox-beta-debian-11-arm64.zip",
	    "debian12-x64": "builds/firefox-beta/%s/firefox-beta-debian-12.zip",
	    "debian12-arm64": "builds/firefox-beta/%s/firefox-beta-debian-12-arm64.zip",
	    "mac10.13": "builds/firefox-beta/%s/firefox-beta-mac.zip",
	    "mac10.14": "builds/firefox-beta/%s/firefox-beta-mac.zip",
	    "mac10.15": "builds/firefox-beta/%s/firefox-beta-mac.zip",
	    "mac11": "builds/firefox-beta/%s/firefox-beta-mac.zip",
	    "mac11-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
	    "mac12": "builds/firefox-beta/%s/firefox-beta-mac.zip",
	    "mac12-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
	    "mac13": "builds/firefox-beta/%s/firefox-beta-mac.zip",
	    "mac13-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
	    "mac14": "builds/firefox-beta/%s/firefox-beta-mac.zip",
	    "mac14-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
	    "mac15": "builds/firefox-beta/%s/firefox-beta-mac.zip",
	    "mac15-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
	    "win64": "builds/firefox-beta/%s/firefox-beta-win64.zip"
	  },
	  "webkit": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/webkit/%s/webkit-ubuntu-20.04.zip",
	    "ubuntu22.04-x64": "builds/webkit/%s/webkit-ubuntu-22.04.zip",
	    "ubuntu24.04-x64": "builds/webkit/%s/webkit-ubuntu-24.04.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": "builds/webkit/%s/webkit-ubuntu-20.04-arm64.zip",
	    "ubuntu22.04-arm64": "builds/webkit/%s/webkit-ubuntu-22.04-arm64.zip",
	    "ubuntu24.04-arm64": "builds/webkit/%s/webkit-ubuntu-24.04-arm64.zip",
	    "debian11-x64": "builds/webkit/%s/webkit-debian-11.zip",
	    "debian11-arm64": "builds/webkit/%s/webkit-debian-11-arm64.zip",
	    "debian12-x64": "builds/webkit/%s/webkit-debian-12.zip",
	    "debian12-arm64": "builds/webkit/%s/webkit-debian-12-arm64.zip",
	    "mac10.13": void 0,
	    "mac10.14": "builds/deprecated-webkit-mac-10.14/%s/deprecated-webkit-mac-10.14.zip",
	    "mac10.15": "builds/deprecated-webkit-mac-10.15/%s/deprecated-webkit-mac-10.15.zip",
	    "mac11": "builds/webkit/%s/webkit-mac-11.zip",
	    "mac11-arm64": "builds/webkit/%s/webkit-mac-11-arm64.zip",
	    "mac12": "builds/webkit/%s/webkit-mac-12.zip",
	    "mac12-arm64": "builds/webkit/%s/webkit-mac-12-arm64.zip",
	    "mac13": "builds/webkit/%s/webkit-mac-13.zip",
	    "mac13-arm64": "builds/webkit/%s/webkit-mac-13-arm64.zip",
	    "mac14": "builds/webkit/%s/webkit-mac-14.zip",
	    "mac14-arm64": "builds/webkit/%s/webkit-mac-14-arm64.zip",
	    "mac15": "builds/webkit/%s/webkit-mac-15.zip",
	    "mac15-arm64": "builds/webkit/%s/webkit-mac-15-arm64.zip",
	    "win64": "builds/webkit/%s/webkit-win64.zip"
	  },
	  "ffmpeg": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
	    "ubuntu22.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
	    "ubuntu24.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
	    "ubuntu22.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
	    "ubuntu24.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
	    "debian11-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
	    "debian11-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
	    "debian12-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
	    "debian12-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
	    "mac10.13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
	    "mac10.14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
	    "mac10.15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
	    "mac11": "builds/ffmpeg/%s/ffmpeg-mac.zip",
	    "mac11-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
	    "mac12": "builds/ffmpeg/%s/ffmpeg-mac.zip",
	    "mac12-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
	    "mac13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
	    "mac13-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
	    "mac14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
	    "mac14-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
	    "mac15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
	    "mac15-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
	    "win64": "builds/ffmpeg/%s/ffmpeg-win64.zip"
	  },
	  "winldd": {
	    "<unknown>": void 0,
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": void 0,
	    "ubuntu22.04-x64": void 0,
	    "ubuntu24.04-x64": void 0,
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": void 0,
	    "ubuntu22.04-arm64": void 0,
	    "ubuntu24.04-arm64": void 0,
	    "debian11-x64": void 0,
	    "debian11-arm64": void 0,
	    "debian12-x64": void 0,
	    "debian12-arm64": void 0,
	    "mac10.13": void 0,
	    "mac10.14": void 0,
	    "mac10.15": void 0,
	    "mac11": void 0,
	    "mac11-arm64": void 0,
	    "mac12": void 0,
	    "mac12-arm64": void 0,
	    "mac13": void 0,
	    "mac13-arm64": void 0,
	    "mac14": void 0,
	    "mac14-arm64": void 0,
	    "mac15": void 0,
	    "mac15-arm64": void 0,
	    "win64": "builds/winldd/%s/winldd-win64.zip"
	  },
	  "android": {
	    "<unknown>": "builds/android/%s/android.zip",
	    "ubuntu18.04-x64": void 0,
	    "ubuntu20.04-x64": "builds/android/%s/android.zip",
	    "ubuntu22.04-x64": "builds/android/%s/android.zip",
	    "ubuntu24.04-x64": "builds/android/%s/android.zip",
	    "ubuntu18.04-arm64": void 0,
	    "ubuntu20.04-arm64": "builds/android/%s/android.zip",
	    "ubuntu22.04-arm64": "builds/android/%s/android.zip",
	    "ubuntu24.04-arm64": "builds/android/%s/android.zip",
	    "debian11-x64": "builds/android/%s/android.zip",
	    "debian11-arm64": "builds/android/%s/android.zip",
	    "debian12-x64": "builds/android/%s/android.zip",
	    "debian12-arm64": "builds/android/%s/android.zip",
	    "mac10.13": "builds/android/%s/android.zip",
	    "mac10.14": "builds/android/%s/android.zip",
	    "mac10.15": "builds/android/%s/android.zip",
	    "mac11": "builds/android/%s/android.zip",
	    "mac11-arm64": "builds/android/%s/android.zip",
	    "mac12": "builds/android/%s/android.zip",
	    "mac12-arm64": "builds/android/%s/android.zip",
	    "mac13": "builds/android/%s/android.zip",
	    "mac13-arm64": "builds/android/%s/android.zip",
	    "mac14": "builds/android/%s/android.zip",
	    "mac14-arm64": "builds/android/%s/android.zip",
	    "mac15": "builds/android/%s/android.zip",
	    "mac15-arm64": "builds/android/%s/android.zip",
	    "win64": "builds/android/%s/android.zip"
	  },
	  // TODO(bidi): implement downloads.
	  "bidi": {}
	};
	const registryDirectory = (() => {
	  let result;
	  const envDefined = (0, import_utils.getFromENV)("PLAYWRIGHT_BROWSERS_PATH");
	  if (envDefined === "0") {
	    result = import_path.default.join(__dirname, "..", "..", "..", ".local-browsers");
	  } else if (envDefined) {
	    result = envDefined;
	  } else {
	    let cacheDirectory;
	    if (process.platform === "linux")
	      cacheDirectory = process.env.XDG_CACHE_HOME || import_path.default.join(import_os.default.homedir(), ".cache");
	    else if (process.platform === "darwin")
	      cacheDirectory = import_path.default.join(import_os.default.homedir(), "Library", "Caches");
	    else if (process.platform === "win32")
	      cacheDirectory = process.env.LOCALAPPDATA || import_path.default.join(import_os.default.homedir(), "AppData", "Local");
	    else
	      throw new Error("Unsupported platform: " + process.platform);
	    result = import_path.default.join(cacheDirectory, "ms-playwright");
	  }
	  if (!import_path.default.isAbsolute(result)) {
	    result = import_path.default.resolve((0, import_utils.getFromENV)("INIT_CWD") || process.cwd(), result);
	  }
	  return result;
	})();
	function isBrowserDirectory(browserDirectory) {
	  const baseName = import_path.default.basename(browserDirectory);
	  for (const browserName of allDownloadable) {
	    if (baseName.startsWith(browserName.replace(/-/g, "_") + "-"))
	      return true;
	  }
	  return false;
	}
	function readDescriptors(browsersJSON) {
	  return browsersJSON["browsers"].map((obj) => {
	    const name = obj.name;
	    const revisionOverride = (obj.revisionOverrides || {})[import_hostPlatform.hostPlatform];
	    const revision = revisionOverride || obj.revision;
	    const browserDirectoryPrefix = revisionOverride ? `${name}_${import_hostPlatform.hostPlatform}_special` : `${name}`;
	    const descriptor = {
	      name,
	      revision,
	      hasRevisionOverride: !!revisionOverride,
	      // We only put browser version for the supported operating systems.
	      browserVersion: revisionOverride ? void 0 : obj.browserVersion,
	      installByDefault: !!obj.installByDefault,
	      // Method `isBrowserDirectory` determines directory to be browser iff
	      // it starts with some browser name followed by '-'. Some browser names
	      // are prefixes of others, e.g. 'webkit' is a prefix of `webkit-technology-preview`.
	      // To avoid older registries erroneously removing 'webkit-technology-preview', we have to
	      // ensure that browser folders to never include dashes inside.
	      dir: import_path.default.join(registryDirectory, browserDirectoryPrefix.replace(/-/g, "_") + "-" + revision)
	    };
	    return descriptor;
	  });
	}
	const allDownloadable = ["android", "chromium", "firefox", "webkit", "ffmpeg", "firefox-beta", "chromium-tip-of-tree", "chromium-headless-shell", "chromium-tip-of-tree-headless-shell"];
	class Registry {
	  constructor(browsersJSON) {
	    const descriptors = readDescriptors(browsersJSON);
	    const findExecutablePath = (dir, name) => {
	      let tokens = void 0;
	      if (process.platform === "linux")
	        tokens = EXECUTABLE_PATHS[name]["linux"];
	      else if (process.platform === "darwin")
	        tokens = EXECUTABLE_PATHS[name]["mac"];
	      else if (process.platform === "win32")
	        tokens = EXECUTABLE_PATHS[name]["win"];
	      return tokens ? import_path.default.join(dir, ...tokens) : void 0;
	    };
	    const executablePathOrDie = (name, e, installByDefault, sdkLanguage) => {
	      if (!e)
	        throw new Error(`${name} is not supported on ${import_hostPlatform.hostPlatform}`);
	      const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install${installByDefault ? "" : " " + name}`);
	      if (!(0, import_fileUtils.canAccessFile)(e)) {
	        const currentDockerVersion = (0, import_dependencies.readDockerVersionSync)();
	        const preferredDockerVersion = currentDockerVersion ? (0, import_dependencies.dockerVersion)(currentDockerVersion.dockerImageNameTemplate) : null;
	        const isOutdatedDockerImage = currentDockerVersion && preferredDockerVersion && currentDockerVersion.dockerImageName !== preferredDockerVersion.dockerImageName;
	        const prettyMessage = isOutdatedDockerImage ? [
	          `Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just updated to ${preferredDockerVersion.driverVersion}.`,
	          `Please update docker image as well.`,
	          `-  current: ${currentDockerVersion.dockerImageName}`,
	          `- required: ${preferredDockerVersion.dockerImageName}`,
	          ``,
	          `<3 Playwright Team`
	        ].join("\n") : [
	          `Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just installed or updated.`,
	          `Please run the following command to download new browser${installByDefault ? "s" : ""}:`,
	          ``,
	          `    ${installCommand}`,
	          ``,
	          `<3 Playwright Team`
	        ].join("\n");
	        throw new Error(`Executable doesn't exist at ${e}
${(0, import_ascii.wrapInASCIIBox)(prettyMessage, 1)}`);
	      }
	      return e;
	    };
	    this._executables = [];
	    const chromium = descriptors.find((d) => d.name === "chromium");
	    const chromiumExecutable = findExecutablePath(chromium.dir, "chromium");
	    this._executables.push({
	      type: "browser",
	      name: "chromium",
	      browserName: "chromium",
	      directory: chromium.dir,
	      executablePath: () => chromiumExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium.installByDefault, sdkLanguage),
	      installType: chromium.installByDefault ? "download-by-default" : "download-on-demand",
	      _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromium.dir, ["chrome-linux"], [], ["chrome-win"]),
	      downloadURLs: this._downloadURLs(chromium),
	      browserVersion: chromium.browserVersion,
	      _install: () => this._downloadExecutable(chromium, chromiumExecutable),
	      _dependencyGroup: "chromium",
	      _isHermeticInstallation: true
	    });
	    const chromiumHeadlessShell = descriptors.find((d) => d.name === "chromium-headless-shell");
	    const chromiumHeadlessShellExecutable = findExecutablePath(chromiumHeadlessShell.dir, "chromium-headless-shell");
	    this._executables.push({
	      type: "channel",
	      name: "chromium-headless-shell",
	      browserName: "chromium",
	      directory: chromiumHeadlessShell.dir,
	      executablePath: () => chromiumHeadlessShellExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumHeadlessShellExecutable, chromiumHeadlessShell.installByDefault, sdkLanguage),
	      installType: chromiumHeadlessShell.installByDefault ? "download-by-default" : "download-on-demand",
	      _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromiumHeadlessShell.dir, ["chrome-linux"], [], ["chrome-win"]),
	      downloadURLs: this._downloadURLs(chromiumHeadlessShell),
	      browserVersion: chromium.browserVersion,
	      _install: () => this._downloadExecutable(chromiumHeadlessShell, chromiumHeadlessShellExecutable),
	      _dependencyGroup: "chromium",
	      _isHermeticInstallation: true
	    });
	    const chromiumTipOfTreeHeadlessShell = descriptors.find((d) => d.name === "chromium-tip-of-tree-headless-shell");
	    const chromiumTipOfTreeHeadlessShellExecutable = findExecutablePath(chromiumTipOfTreeHeadlessShell.dir, "chromium-headless-shell");
	    this._executables.push({
	      type: "channel",
	      name: "chromium-tip-of-tree-headless-shell",
	      browserName: "chromium",
	      directory: chromiumTipOfTreeHeadlessShell.dir,
	      executablePath: () => chromiumTipOfTreeHeadlessShellExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumTipOfTreeHeadlessShellExecutable, chromiumTipOfTreeHeadlessShell.installByDefault, sdkLanguage),
	      installType: chromiumTipOfTreeHeadlessShell.installByDefault ? "download-by-default" : "download-on-demand",
	      _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromiumTipOfTreeHeadlessShell.dir, ["chrome-linux"], [], ["chrome-win"]),
	      downloadURLs: this._downloadURLs(chromiumTipOfTreeHeadlessShell),
	      browserVersion: chromium.browserVersion,
	      _install: () => this._downloadExecutable(chromiumTipOfTreeHeadlessShell, chromiumTipOfTreeHeadlessShellExecutable),
	      _dependencyGroup: "chromium",
	      _isHermeticInstallation: true
	    });
	    const chromiumTipOfTree = descriptors.find((d) => d.name === "chromium-tip-of-tree");
	    const chromiumTipOfTreeExecutable = findExecutablePath(chromiumTipOfTree.dir, "chromium");
	    this._executables.push({
	      type: "tool",
	      name: "chromium-tip-of-tree",
	      browserName: "chromium",
	      directory: chromiumTipOfTree.dir,
	      executablePath: () => chromiumTipOfTreeExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium-tip-of-tree", chromiumTipOfTreeExecutable, chromiumTipOfTree.installByDefault, sdkLanguage),
	      installType: chromiumTipOfTree.installByDefault ? "download-by-default" : "download-on-demand",
	      _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromiumTipOfTree.dir, ["chrome-linux"], [], ["chrome-win"]),
	      downloadURLs: this._downloadURLs(chromiumTipOfTree),
	      browserVersion: chromiumTipOfTree.browserVersion,
	      _install: () => this._downloadExecutable(chromiumTipOfTree, chromiumTipOfTreeExecutable),
	      _dependencyGroup: "chromium",
	      _isHermeticInstallation: true
	    });
	    this._executables.push(this._createChromiumChannel("chrome", {
	      "linux": "/opt/google/chrome/chrome",
	      "darwin": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
	      "win32": `\\Google\\Chrome\\Application\\chrome.exe`
	    }, () => this._installChromiumChannel("chrome", {
	      "linux": "reinstall_chrome_stable_linux.sh",
	      "darwin": "reinstall_chrome_stable_mac.sh",
	      "win32": "reinstall_chrome_stable_win.ps1"
	    })));
	    this._executables.push(this._createChromiumChannel("chrome-beta", {
	      "linux": "/opt/google/chrome-beta/chrome",
	      "darwin": "/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta",
	      "win32": `\\Google\\Chrome Beta\\Application\\chrome.exe`
	    }, () => this._installChromiumChannel("chrome-beta", {
	      "linux": "reinstall_chrome_beta_linux.sh",
	      "darwin": "reinstall_chrome_beta_mac.sh",
	      "win32": "reinstall_chrome_beta_win.ps1"
	    })));
	    this._executables.push(this._createChromiumChannel("chrome-dev", {
	      "linux": "/opt/google/chrome-unstable/chrome",
	      "darwin": "/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev",
	      "win32": `\\Google\\Chrome Dev\\Application\\chrome.exe`
	    }));
	    this._executables.push(this._createChromiumChannel("chrome-canary", {
	      "linux": "",
	      "darwin": "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
	      "win32": `\\Google\\Chrome SxS\\Application\\chrome.exe`
	    }));
	    this._executables.push(this._createChromiumChannel("msedge", {
	      "linux": "/opt/microsoft/msedge/msedge",
	      "darwin": "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
	      "win32": `\\Microsoft\\Edge\\Application\\msedge.exe`
	    }, () => this._installMSEdgeChannel("msedge", {
	      "linux": "reinstall_msedge_stable_linux.sh",
	      "darwin": "reinstall_msedge_stable_mac.sh",
	      "win32": "reinstall_msedge_stable_win.ps1"
	    })));
	    this._executables.push(this._createChromiumChannel("msedge-beta", {
	      "linux": "/opt/microsoft/msedge-beta/msedge",
	      "darwin": "/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta",
	      "win32": `\\Microsoft\\Edge Beta\\Application\\msedge.exe`
	    }, () => this._installMSEdgeChannel("msedge-beta", {
	      "darwin": "reinstall_msedge_beta_mac.sh",
	      "linux": "reinstall_msedge_beta_linux.sh",
	      "win32": "reinstall_msedge_beta_win.ps1"
	    })));
	    this._executables.push(this._createChromiumChannel("msedge-dev", {
	      "linux": "/opt/microsoft/msedge-dev/msedge",
	      "darwin": "/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev",
	      "win32": `\\Microsoft\\Edge Dev\\Application\\msedge.exe`
	    }, () => this._installMSEdgeChannel("msedge-dev", {
	      "darwin": "reinstall_msedge_dev_mac.sh",
	      "linux": "reinstall_msedge_dev_linux.sh",
	      "win32": "reinstall_msedge_dev_win.ps1"
	    })));
	    this._executables.push(this._createChromiumChannel("msedge-canary", {
	      "linux": "",
	      "darwin": "/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary",
	      "win32": `\\Microsoft\\Edge SxS\\Application\\msedge.exe`
	    }));
	    this._executables.push(this._createBidiFirefoxChannel("moz-firefox", {
	      "linux": "/snap/bin/firefox",
	      "darwin": "/Applications/Firefox.app/Contents/MacOS/firefox",
	      "win32": "\\Mozilla Firefox\\firefox.exe"
	    }));
	    this._executables.push(this._createBidiFirefoxChannel("moz-firefox-beta", {
	      "linux": "/opt/firefox-beta/firefox",
	      "darwin": "/Applications/Firefox.app/Contents/MacOS/firefox",
	      "win32": "\\Mozilla Firefox\\firefox.exe"
	    }));
	    this._executables.push(this._createBidiFirefoxChannel("moz-firefox-nightly", {
	      "linux": "/opt/firefox-nightly/firefox",
	      "darwin": "/Applications/Firefox Nightly.app/Contents/MacOS/firefox",
	      "win32": "\\Mozilla Firefox\\firefox.exe"
	    }));
	    this._executables.push(this._createBidiChromiumChannel("bidi-chrome-stable", {
	      "linux": "/opt/google/chrome/chrome",
	      "darwin": "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
	      "win32": `\\Google\\Chrome\\Application\\chrome.exe`
	    }));
	    this._executables.push(this._createBidiChromiumChannel("bidi-chrome-canary", {
	      "linux": "",
	      "darwin": "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
	      "win32": `\\Google\\Chrome SxS\\Application\\chrome.exe`
	    }));
	    this._executables.push({
	      type: "browser",
	      name: "bidi-chromium",
	      browserName: "bidi",
	      directory: chromium.dir,
	      executablePath: () => chromiumExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium.installByDefault, sdkLanguage),
	      installType: "download-on-demand",
	      _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromium.dir, ["chrome-linux"], [], ["chrome-win"]),
	      downloadURLs: this._downloadURLs(chromium),
	      browserVersion: chromium.browserVersion,
	      _install: () => this._downloadExecutable(chromium, chromiumExecutable),
	      _dependencyGroup: "chromium",
	      _isHermeticInstallation: true
	    });
	    const firefox = descriptors.find((d) => d.name === "firefox");
	    const firefoxExecutable = findExecutablePath(firefox.dir, "firefox");
	    this._executables.push({
	      type: "browser",
	      name: "firefox",
	      browserName: "firefox",
	      directory: firefox.dir,
	      executablePath: () => firefoxExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox", firefoxExecutable, firefox.installByDefault, sdkLanguage),
	      installType: firefox.installByDefault ? "download-by-default" : "download-on-demand",
	      _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, firefox.dir, ["firefox"], [], ["firefox"]),
	      downloadURLs: this._downloadURLs(firefox),
	      browserVersion: firefox.browserVersion,
	      _install: () => this._downloadExecutable(firefox, firefoxExecutable),
	      _dependencyGroup: "firefox",
	      _isHermeticInstallation: true
	    });
	    const firefoxBeta = descriptors.find((d) => d.name === "firefox-beta");
	    const firefoxBetaExecutable = findExecutablePath(firefoxBeta.dir, "firefox");
	    this._executables.push({
	      type: "tool",
	      name: "firefox-beta",
	      browserName: "firefox",
	      directory: firefoxBeta.dir,
	      executablePath: () => firefoxBetaExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox-beta", firefoxBetaExecutable, firefoxBeta.installByDefault, sdkLanguage),
	      installType: firefoxBeta.installByDefault ? "download-by-default" : "download-on-demand",
	      _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, firefoxBeta.dir, ["firefox"], [], ["firefox"]),
	      downloadURLs: this._downloadURLs(firefoxBeta),
	      browserVersion: firefoxBeta.browserVersion,
	      _install: () => this._downloadExecutable(firefoxBeta, firefoxBetaExecutable),
	      _dependencyGroup: "firefox",
	      _isHermeticInstallation: true
	    });
	    const webkit = descriptors.find((d) => d.name === "webkit");
	    const webkitExecutable = findExecutablePath(webkit.dir, "webkit");
	    const webkitLinuxLddDirectories = [
	      import_path.default.join("minibrowser-gtk"),
	      import_path.default.join("minibrowser-gtk", "bin"),
	      import_path.default.join("minibrowser-gtk", "lib"),
	      import_path.default.join("minibrowser-gtk", "sys", "lib"),
	      import_path.default.join("minibrowser-wpe"),
	      import_path.default.join("minibrowser-wpe", "bin"),
	      import_path.default.join("minibrowser-wpe", "lib"),
	      import_path.default.join("minibrowser-wpe", "sys", "lib")
	    ];
	    this._executables.push({
	      type: "browser",
	      name: "webkit",
	      browserName: "webkit",
	      directory: webkit.dir,
	      executablePath: () => webkitExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("webkit", webkitExecutable, webkit.installByDefault, sdkLanguage),
	      installType: webkit.installByDefault ? "download-by-default" : "download-on-demand",
	      _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, webkit.dir, webkitLinuxLddDirectories, ["libGLESv2.so.2", "libx264.so"], [""]),
	      downloadURLs: this._downloadURLs(webkit),
	      browserVersion: webkit.browserVersion,
	      _install: () => this._downloadExecutable(webkit, webkitExecutable),
	      _dependencyGroup: "webkit",
	      _isHermeticInstallation: true
	    });
	    const ffmpeg = descriptors.find((d) => d.name === "ffmpeg");
	    const ffmpegExecutable = findExecutablePath(ffmpeg.dir, "ffmpeg");
	    this._executables.push({
	      type: "tool",
	      name: "ffmpeg",
	      browserName: void 0,
	      directory: ffmpeg.dir,
	      executablePath: () => ffmpegExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("ffmpeg", ffmpegExecutable, ffmpeg.installByDefault, sdkLanguage),
	      installType: ffmpeg.installByDefault ? "download-by-default" : "download-on-demand",
	      _validateHostRequirements: () => Promise.resolve(),
	      downloadURLs: this._downloadURLs(ffmpeg),
	      _install: () => this._downloadExecutable(ffmpeg, ffmpegExecutable),
	      _dependencyGroup: "tools",
	      _isHermeticInstallation: true
	    });
	    const winldd = descriptors.find((d) => d.name === "winldd");
	    const winlddExecutable = findExecutablePath(winldd.dir, "winldd");
	    this._executables.push({
	      type: "tool",
	      name: "winldd",
	      browserName: void 0,
	      directory: winldd.dir,
	      executablePath: () => winlddExecutable,
	      executablePathOrDie: (sdkLanguage) => executablePathOrDie("winldd", winlddExecutable, winldd.installByDefault, sdkLanguage),
	      installType: process.platform === "win32" ? "download-by-default" : "none",
	      _validateHostRequirements: () => Promise.resolve(),
	      downloadURLs: this._downloadURLs(winldd),
	      _install: () => this._downloadExecutable(winldd, winlddExecutable),
	      _dependencyGroup: "tools",
	      _isHermeticInstallation: true
	    });
	    const android = descriptors.find((d) => d.name === "android");
	    this._executables.push({
	      type: "tool",
	      name: "android",
	      browserName: void 0,
	      directory: android.dir,
	      executablePath: () => void 0,
	      executablePathOrDie: () => "",
	      installType: "download-on-demand",
	      _validateHostRequirements: () => Promise.resolve(),
	      downloadURLs: this._downloadURLs(android),
	      _install: () => this._downloadExecutable(android),
	      _dependencyGroup: "tools",
	      _isHermeticInstallation: true
	    });
	    this._executables.push({
	      type: "browser",
	      name: "bidi",
	      browserName: "bidi",
	      directory: void 0,
	      executablePath: () => void 0,
	      executablePathOrDie: () => "",
	      installType: "none",
	      _validateHostRequirements: () => Promise.resolve(),
	      downloadURLs: [],
	      _install: () => Promise.resolve(),
	      _dependencyGroup: "tools",
	      _isHermeticInstallation: true
	    });
	  }
	  _createChromiumChannel(name, lookAt, install) {
	    const executablePath = (sdkLanguage, shouldThrow) => {
	      const suffix = lookAt[process.platform];
	      if (!suffix) {
	        if (shouldThrow)
	          throw new Error(`Chromium distribution '${name}' is not supported on ${process.platform}`);
	        return void 0;
	      }
	      const prefixes = process.platform === "win32" ? [
	        process.env.LOCALAPPDATA,
	        process.env.PROGRAMFILES,
	        process.env["PROGRAMFILES(X86)"],
	        // In some cases there is no PROGRAMFILES/(86) env var set but HOMEDRIVE is set.
	        process.env.HOMEDRIVE + "\\Program Files",
	        process.env.HOMEDRIVE + "\\Program Files (x86)"
	      ].filter(Boolean) : [""];
	      for (const prefix of prefixes) {
	        const executablePath2 = import_path.default.join(prefix, suffix);
	        if ((0, import_fileUtils.canAccessFile)(executablePath2))
	          return executablePath2;
	      }
	      if (!shouldThrow)
	        return void 0;
	      const location = prefixes.length ? ` at ${import_path.default.join(prefixes[0], suffix)}` : ``;
	      const installation = install ? `
Run "${buildPlaywrightCLICommand(sdkLanguage, "install " + name)}"` : "";
	      throw new Error(`Chromium distribution '${name}' is not found${location}${installation}`);
	    };
	    return {
	      type: "channel",
	      name,
	      browserName: "chromium",
	      directory: void 0,
	      executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
	      executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
	      installType: install ? "install-script" : "none",
	      _validateHostRequirements: () => Promise.resolve(),
	      _isHermeticInstallation: false,
	      _install: install
	    };
	  }
	  _createBidiFirefoxChannel(name, lookAt, install) {
	    const executablePath = (sdkLanguage, shouldThrow) => {
	      const suffix = lookAt[process.platform];
	      if (!suffix) {
	        if (shouldThrow)
	          throw new Error(`Firefox distribution '${name}' is not supported on ${process.platform}`);
	        return void 0;
	      }
	      const prefixes = process.platform === "win32" ? [
	        process.env.LOCALAPPDATA,
	        process.env.PROGRAMFILES,
	        process.env["PROGRAMFILES(X86)"],
	        // In some cases there is no PROGRAMFILES/(86) env var set but HOMEDRIVE is set.
	        process.env.HOMEDRIVE + "\\Program Files",
	        process.env.HOMEDRIVE + "\\Program Files (x86)"
	      ].filter(Boolean) : [""];
	      for (const prefix of prefixes) {
	        const executablePath2 = import_path.default.join(prefix, suffix);
	        if ((0, import_fileUtils.canAccessFile)(executablePath2))
	          return executablePath2;
	      }
	      if (shouldThrow)
	        throw new Error(`Cannot find Firefox installation for channel '${name}' at the standard system paths.`);
	      return void 0;
	    };
	    return {
	      type: "channel",
	      name,
	      browserName: "bidi",
	      directory: void 0,
	      executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
	      executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
	      installType: "none",
	      _validateHostRequirements: () => Promise.resolve(),
	      _isHermeticInstallation: true,
	      _install: install
	    };
	  }
	  _createBidiChromiumChannel(name, lookAt, install) {
	    const executablePath = (sdkLanguage, shouldThrow) => {
	      const suffix = lookAt[process.platform];
	      if (!suffix) {
	        if (shouldThrow)
	          throw new Error(`Firefox distribution '${name}' is not supported on ${process.platform}`);
	        return void 0;
	      }
	      const prefixes = process.platform === "win32" ? [
	        process.env.LOCALAPPDATA,
	        process.env.PROGRAMFILES,
	        process.env["PROGRAMFILES(X86)"],
	        // In some cases there is no PROGRAMFILES/(86) env var set but HOMEDRIVE is set.
	        process.env.HOMEDRIVE + "\\Program Files",
	        process.env.HOMEDRIVE + "\\Program Files (x86)"
	      ].filter(Boolean) : [""];
	      for (const prefix of prefixes) {
	        const executablePath2 = import_path.default.join(prefix, suffix);
	        if ((0, import_fileUtils.canAccessFile)(executablePath2))
	          return executablePath2;
	      }
	      if (!shouldThrow)
	        return void 0;
	      const location = prefixes.length ? ` at ${import_path.default.join(prefixes[0], suffix)}` : ``;
	      const installation = install ? `
Run "${buildPlaywrightCLICommand(sdkLanguage, "install " + name)}"` : "";
	      throw new Error(`Chromium distribution '${name}' is not found${location}${installation}`);
	    };
	    return {
	      type: "channel",
	      name,
	      browserName: "bidi",
	      directory: void 0,
	      executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
	      executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
	      installType: install ? "install-script" : "none",
	      _validateHostRequirements: () => Promise.resolve(),
	      _isHermeticInstallation: false,
	      _install: install
	    };
	  }
	  executables() {
	    return this._executables;
	  }
	  findExecutable(name) {
	    return this._executables.find((b) => b.name === name);
	  }
	  defaultExecutables() {
	    return this._executables.filter((e) => e.installType === "download-by-default");
	  }
	  _dedupe(executables) {
	    return Array.from(new Set(executables));
	  }
	  async _validateHostRequirements(sdkLanguage, browserDirectory, linuxLddDirectories, dlOpenLibraries, windowsExeAndDllDirectories) {
	    if (import_os.default.platform() === "linux")
	      return await (0, import_dependencies2.validateDependenciesLinux)(sdkLanguage, linuxLddDirectories.map((d) => import_path.default.join(browserDirectory, d)), dlOpenLibraries);
	    if (import_os.default.platform() === "win32" && import_os.default.arch() === "x64")
	      return await (0, import_dependencies2.validateDependenciesWindows)(sdkLanguage, windowsExeAndDllDirectories.map((d) => import_path.default.join(browserDirectory, d)));
	  }
	  async installDeps(executablesToInstallDeps, dryRun) {
	    const executables = this._dedupe(executablesToInstallDeps);
	    const targets = /* @__PURE__ */ new Set();
	    for (const executable of executables) {
	      if (executable._dependencyGroup)
	        targets.add(executable._dependencyGroup);
	    }
	    targets.add("tools");
	    if (import_os.default.platform() === "win32")
	      return await (0, import_dependencies2.installDependenciesWindows)(targets, dryRun);
	    if (import_os.default.platform() === "linux")
	      return await (0, import_dependencies2.installDependenciesLinux)(targets, dryRun);
	  }
	  async install(executablesToInstall, forceReinstall) {
	    const executables = this._dedupe(executablesToInstall);
	    await import_fs.default.promises.mkdir(registryDirectory, { recursive: true });
	    const lockfilePath = import_path.default.join(registryDirectory, "__dirlock");
	    const linksDir = import_path.default.join(registryDirectory, ".links");
	    let releaseLock;
	    try {
	      releaseLock = await import_utilsBundle.lockfile.lock(registryDirectory, {
	        retries: {
	          // Retry 20 times during 10 minutes with
	          // exponential back-off.
	          // See documentation at: https://www.npmjs.com/package/retry#retrytimeoutsoptions
	          retries: 20,
	          factor: 1.27579
	        },
	        onCompromised: (err) => {
	          throw new Error(`${err.message} Path: ${lockfilePath}`);
	        },
	        lockfilePath
	      });
	      await import_fs.default.promises.mkdir(linksDir, { recursive: true });
	      await import_fs.default.promises.writeFile(import_path.default.join(linksDir, (0, import_utils.calculateSha1)(PACKAGE_PATH)), PACKAGE_PATH);
	      await this._validateInstallationCache(linksDir);
	      for (const executable of executables) {
	        if (!executable._install)
	          throw new Error(`ERROR: Playwright does not support installing ${executable.name}`);
	        const { embedderName } = (0, import_userAgent.getEmbedderName)();
	        if (!(0, import_utils.getAsBooleanFromENV)("CI") && !executable._isHermeticInstallation && !forceReinstall && executable.executablePath(embedderName)) {
	          const command = buildPlaywrightCLICommand(embedderName, "install --force " + executable.name);
	          throw new Error("\n" + (0, import_ascii.wrapInASCIIBox)([
	            `ATTENTION: "${executable.name}" is already installed on the system!`,
	            ``,
	            `"${executable.name}" installation is not hermetic; installing newer version`,
	            `requires *removal* of a current installation first.`,
	            ``,
	            `To *uninstall* current version and re-install latest "${executable.name}":`,
	            ``,
	            `- Close all running instances of "${executable.name}", if any`,
	            `- Use "--force" to install browser:`,
	            ``,
	            `    ${command}`,
	            ``,
	            `<3 Playwright Team`
	          ].join("\n"), 1));
	        }
	        await executable._install();
	      }
	    } catch (e) {
	      if (e.code === "ELOCKED") {
	        const rmCommand = process.platform === "win32" ? "rm -R" : "rm -rf";
	        throw new Error("\n" + (0, import_ascii.wrapInASCIIBox)([
	          `An active lockfile is found at:`,
	          ``,
	          `  ${lockfilePath}`,
	          ``,
	          `Either:`,
	          `- wait a few minutes if other Playwright is installing browsers in parallel`,
	          `- remove lock manually with:`,
	          ``,
	          `    ${rmCommand} ${lockfilePath}`,
	          ``,
	          `<3 Playwright Team`
	        ].join("\n"), 1));
	      } else {
	        throw e;
	      }
	    } finally {
	      if (releaseLock)
	        await releaseLock();
	    }
	  }
	  async uninstall(all) {
	    const linksDir = import_path.default.join(registryDirectory, ".links");
	    if (all) {
	      const links = await import_fs.default.promises.readdir(linksDir).catch(() => []);
	      for (const link of links)
	        await import_fs.default.promises.unlink(import_path.default.join(linksDir, link));
	    } else {
	      await import_fs.default.promises.unlink(import_path.default.join(linksDir, (0, import_utils.calculateSha1)(PACKAGE_PATH))).catch(() => {
	      });
	    }
	    await this._validateInstallationCache(linksDir);
	    return {
	      numberOfBrowsersLeft: (await import_fs.default.promises.readdir(registryDirectory).catch(() => [])).filter((browserDirectory) => isBrowserDirectory(browserDirectory)).length
	    };
	  }
	  async validateHostRequirementsForExecutablesIfNeeded(executables, sdkLanguage) {
	    if ((0, import_utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS")) {
	      process.stderr.write("Skipping host requirements validation logic because `PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS` env variable is set.\n");
	      return;
	    }
	    for (const executable of executables)
	      await this._validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage);
	  }
	  async _validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage) {
	    const kMaximumReValidationPeriod = 30 * 24 * 60 * 60 * 1e3;
	    if (!executable.directory)
	      return;
	    const markerFile = import_path.default.join(executable.directory, "DEPENDENCIES_VALIDATED");
	    if (await import_fs.default.promises.stat(markerFile).then((stat) => Date.now() - stat.mtime.getTime() < kMaximumReValidationPeriod).catch(() => false))
	      return;
	    import_debugLogger.debugLogger.log("install", `validating host requirements for "${executable.name}"`);
	    try {
	      await executable._validateHostRequirements(sdkLanguage);
	      import_debugLogger.debugLogger.log("install", `validation passed for ${executable.name}`);
	    } catch (error) {
	      import_debugLogger.debugLogger.log("install", `validation failed for ${executable.name}`);
	      throw error;
	    }
	    await import_fs.default.promises.writeFile(markerFile, "").catch(() => {
	    });
	  }
	  _downloadURLs(descriptor) {
	    const paths = DOWNLOAD_PATHS[descriptor.name];
	    const downloadPathTemplate = paths[import_hostPlatform.hostPlatform] || paths["<unknown>"];
	    if (!downloadPathTemplate)
	      return [];
	    const downloadPath = util.format(downloadPathTemplate, descriptor.revision);
	    let downloadURLs = PLAYWRIGHT_CDN_MIRRORS.map((mirror) => `${mirror}/${downloadPath}`);
	    let downloadHostEnv;
	    if (descriptor.name.startsWith("chromium"))
	      downloadHostEnv = "PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST";
	    else if (descriptor.name.startsWith("firefox"))
	      downloadHostEnv = "PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST";
	    else if (descriptor.name.startsWith("webkit"))
	      downloadHostEnv = "PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST";
	    const customHostOverride = downloadHostEnv && (0, import_utils.getFromENV)(downloadHostEnv) || (0, import_utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_HOST");
	    if (customHostOverride)
	      downloadURLs = [`${customHostOverride}/${downloadPath}`];
	    return downloadURLs;
	  }
	  async _downloadExecutable(descriptor, executablePath) {
	    const downloadURLs = this._downloadURLs(descriptor);
	    if (!downloadURLs.length)
	      throw new Error(`ERROR: Playwright does not support ${descriptor.name} on ${import_hostPlatform.hostPlatform}`);
	    if (!import_hostPlatform.isOfficiallySupportedPlatform)
	      (0, import_browserFetcher.logPolitely)(`BEWARE: your OS is not officially supported by Playwright; downloading fallback build for ${import_hostPlatform.hostPlatform}.`);
	    if (descriptor.hasRevisionOverride) {
	      const message = `You are using a frozen ${descriptor.name} browser which does not receive updates anymore on ${import_hostPlatform.hostPlatform}. Please update to the latest version of your operating system to test up-to-date browsers.`;
	      if (process.env.GITHUB_ACTIONS)
	        console.log(`::warning title=Playwright::${message}`);
	      else
	        (0, import_browserFetcher.logPolitely)(message);
	    }
	    const displayName = descriptor.name.split("-").map((word) => {
	      return word === "ffmpeg" ? "FFMPEG" : word.charAt(0).toUpperCase() + word.slice(1);
	    }).join(" ");
	    const title = descriptor.browserVersion ? `${displayName} ${descriptor.browserVersion} (playwright build v${descriptor.revision})` : `${displayName} playwright build v${descriptor.revision}`;
	    const downloadFileName = `playwright-download-${descriptor.name}-${import_hostPlatform.hostPlatform}-${descriptor.revision}.zip`;
	    const downloadSocketTimeoutEnv = (0, import_utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT");
	    const downloadSocketTimeout = +(downloadSocketTimeoutEnv || "0") || 3e4;
	    await (0, import_browserFetcher.downloadBrowserWithProgressBar)(title, descriptor.dir, executablePath, downloadURLs, downloadFileName, downloadSocketTimeout).catch((e) => {
	      throw new Error(`Failed to download ${title}, caused by
${e.stack}`);
	    });
	  }
	  async _installMSEdgeChannel(channel, scripts) {
	    const scriptArgs = [];
	    if (process.platform !== "linux") {
	      const products = lowercaseAllKeys(JSON.parse(await (0, import_network.fetchData)({ url: "https://edgeupdates.microsoft.com/api/products" })));
	      const productName = {
	        "msedge": "Stable",
	        "msedge-beta": "Beta",
	        "msedge-dev": "Dev"
	      }[channel];
	      const product = products.find((product2) => product2.product === productName);
	      const searchConfig = {
	        darwin: { platform: "MacOS", arch: "universal", artifact: "pkg" },
	        win32: { platform: "Windows", arch: "x64", artifact: "msi" }
	      }[process.platform];
	      const release = searchConfig ? product.releases.find((release2) => release2.platform === searchConfig.platform && release2.architecture === searchConfig.arch && release2.artifacts.length > 0) : null;
	      const artifact = release ? release.artifacts.find((artifact2) => artifact2.artifactname === searchConfig.artifact) : null;
	      if (artifact)
	        scriptArgs.push(
	          artifact.location
	          /* url */
	        );
	      else
	        throw new Error(`Cannot install ${channel} on ${process.platform}`);
	    }
	    await this._installChromiumChannel(channel, scripts, scriptArgs);
	  }
	  async _installChromiumChannel(channel, scripts, scriptArgs = []) {
	    const scriptName = scripts[process.platform];
	    if (!scriptName)
	      throw new Error(`Cannot install ${channel} on ${process.platform}`);
	    const cwd = BIN_PATH;
	    const isPowerShell = scriptName.endsWith(".ps1");
	    if (isPowerShell) {
	      const args = [
	        "-ExecutionPolicy",
	        "Bypass",
	        "-File",
	        import_path.default.join(BIN_PATH, scriptName),
	        ...scriptArgs
	      ];
	      const { code } = await (0, import_spawnAsync.spawnAsync)("powershell.exe", args, { cwd, stdio: "inherit" });
	      if (code !== 0)
	        throw new Error(`Failed to install ${channel}`);
	    } else {
	      const { command, args, elevatedPermissions } = await (0, import_dependencies.transformCommandsForRoot)([`bash "${import_path.default.join(BIN_PATH, scriptName)}" ${scriptArgs.join("")}`]);
	      if (elevatedPermissions)
	        console.log("Switching to root user to install dependencies...");
	      const { code } = await (0, import_spawnAsync.spawnAsync)(command, args, { cwd, stdio: "inherit" });
	      if (code !== 0)
	        throw new Error(`Failed to install ${channel}`);
	    }
	  }
	  async _validateInstallationCache(linksDir) {
	    const usedBrowserPaths = /* @__PURE__ */ new Set();
	    for (const fileName of await import_fs.default.promises.readdir(linksDir)) {
	      const linkPath = import_path.default.join(linksDir, fileName);
	      let linkTarget = "";
	      try {
	        linkTarget = (await import_fs.default.promises.readFile(linkPath)).toString();
	        const browsersJSON = commonjsRequire(import_path.default.join(linkTarget, "browsers.json"));
	        const descriptors = readDescriptors(browsersJSON);
	        for (const browserName of allDownloadable) {
	          const descriptor = descriptors.find((d) => d.name === browserName);
	          if (!descriptor)
	            continue;
	          const usedBrowserPath = descriptor.dir;
	          const browserRevision = parseInt(descriptor.revision, 10);
	          const shouldHaveMarkerFile = browserName === "chromium" && (browserRevision >= 786218 || browserRevision < 3e5) || browserName === "firefox" && browserRevision >= 1128 || browserName === "webkit" && browserRevision >= 1307 || // All new applications have a marker file right away.
	          browserName !== "firefox" && browserName !== "chromium" && browserName !== "webkit";
	          if (!shouldHaveMarkerFile || await (0, import_fileUtils.existsAsync)(browserDirectoryToMarkerFilePath(usedBrowserPath)))
	            usedBrowserPaths.add(usedBrowserPath);
	        }
	      } catch (e) {
	        await import_fs.default.promises.unlink(linkPath).catch((e2) => {
	        });
	      }
	    }
	    if (!(0, import_utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_GC")) {
	      let downloadedBrowsers = (await import_fs.default.promises.readdir(registryDirectory)).map((file) => import_path.default.join(registryDirectory, file));
	      downloadedBrowsers = downloadedBrowsers.filter((file) => isBrowserDirectory(file));
	      const directories = new Set(downloadedBrowsers);
	      for (const browserDirectory of usedBrowserPaths)
	        directories.delete(browserDirectory);
	      for (const directory of directories)
	        (0, import_browserFetcher.logPolitely)("Removing unused browser at " + directory);
	      await (0, import_fileUtils.removeFolders)([...directories]);
	    }
	  }
	}
	function browserDirectoryToMarkerFilePath(browserDirectory) {
	  return import_path.default.join(browserDirectory, "INSTALLATION_COMPLETE");
	}
	function buildPlaywrightCLICommand(sdkLanguage, parameters) {
	  switch (sdkLanguage) {
	    case "python":
	      return `playwright ${parameters}`;
	    case "java":
	      return `mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="${parameters}"`;
	    case "csharp":
	      return `pwsh bin/Debug/netX/playwright.ps1 ${parameters}`;
	    default: {
	      const packageManagerCommand = (0, import_utils.getPackageManagerExecCommand)();
	      return `${packageManagerCommand} playwright ${parameters}`;
	    }
	  }
	}
	async function installBrowsersForNpmInstall(browsers) {
	  if ((0, import_utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD")) {
	    (0, import_browserFetcher.logPolitely)("Skipping browsers download because `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` env variable is set");
	    return false;
	  }
	  const executables = [];
	  if (process.platform === "win32")
	    executables.push(registry.findExecutable("winldd"));
	  for (const browserName of browsers) {
	    const executable = registry.findExecutable(browserName);
	    if (!executable || executable.installType === "none")
	      throw new Error(`Cannot install ${browserName}`);
	    executables.push(executable);
	  }
	  await registry.install(
	    executables,
	    false
	    /* forceReinstall */
	  );
	}
	function findChromiumChannel(sdkLanguage) {
	  let channel = null;
	  for (const name of ["chromium", "chrome", "msedge"]) {
	    try {
	      registry.findExecutable(name).executablePathOrDie(sdkLanguage);
	      channel = name === "chromium" ? void 0 : name;
	      break;
	    } catch (e) {
	    }
	  }
	  if (channel === null) {
	    const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install chromium`);
	    const prettyMessage = [
	      `No chromium-based browser found on the system.`,
	      `Please run the following command to download one:`,
	      ``,
	      `    ${installCommand}`,
	      ``,
	      `<3 Playwright Team`
	    ].join("\n");
	    throw new Error("\n" + (0, import_ascii.wrapInASCIIBox)(prettyMessage, 1));
	  }
	  return channel;
	}
	function lowercaseAllKeys(json) {
	  if (typeof json !== "object" || !json)
	    return json;
	  if (Array.isArray(json))
	    return json.map(lowercaseAllKeys);
	  const result = {};
	  for (const [key, value] of Object.entries(json))
	    result[key.toLowerCase()] = lowercaseAllKeys(value);
	  return result;
	}
	const registry = new Registry(require$$15);
	return registry_1;
}

var validatorPrimitives;
var hasRequiredValidatorPrimitives;

function requireValidatorPrimitives () {
	if (hasRequiredValidatorPrimitives) return validatorPrimitives;
	hasRequiredValidatorPrimitives = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var validatorPrimitives_exports = {};
	__export(validatorPrimitives_exports, {
	  ValidationError: () => ValidationError,
	  createMetadataValidator: () => createMetadataValidator,
	  findValidator: () => findValidator,
	  maybeFindValidator: () => maybeFindValidator,
	  scheme: () => scheme,
	  tAny: () => tAny,
	  tArray: () => tArray,
	  tBinary: () => tBinary,
	  tBoolean: () => tBoolean,
	  tChannel: () => tChannel,
	  tEnum: () => tEnum,
	  tNumber: () => tNumber,
	  tObject: () => tObject,
	  tOptional: () => tOptional,
	  tString: () => tString,
	  tType: () => tType,
	  tUndefined: () => tUndefined
	});
	validatorPrimitives = __toCommonJS(validatorPrimitives_exports);
	class ValidationError extends Error {
	}
	const scheme = {};
	function findValidator(type, method, kind) {
	  const validator = maybeFindValidator(type, method, kind);
	  if (!validator)
	    throw new ValidationError(`Unknown scheme for ${kind}: ${type}.${method}`);
	  return validator;
	}
	function maybeFindValidator(type, method, kind) {
	  const schemeName = type + (kind === "Initializer" ? "" : method[0].toUpperCase() + method.substring(1)) + kind;
	  return scheme[schemeName];
	}
	function createMetadataValidator() {
	  return tOptional(scheme["Metadata"]);
	}
	const tNumber = (arg, path, context) => {
	  if (arg instanceof Number)
	    return arg.valueOf();
	  if (typeof arg === "number")
	    return arg;
	  throw new ValidationError(`${path}: expected number, got ${typeof arg}`);
	};
	const tBoolean = (arg, path, context) => {
	  if (arg instanceof Boolean)
	    return arg.valueOf();
	  if (typeof arg === "boolean")
	    return arg;
	  throw new ValidationError(`${path}: expected boolean, got ${typeof arg}`);
	};
	const tString = (arg, path, context) => {
	  if (arg instanceof String)
	    return arg.valueOf();
	  if (typeof arg === "string")
	    return arg;
	  throw new ValidationError(`${path}: expected string, got ${typeof arg}`);
	};
	const tBinary = (arg, path, context) => {
	  if (context.binary === "fromBase64") {
	    if (arg instanceof String)
	      return Buffer.from(arg.valueOf(), "base64");
	    if (typeof arg === "string")
	      return Buffer.from(arg, "base64");
	    throw new ValidationError(`${path}: expected base64-encoded buffer, got ${typeof arg}`);
	  }
	  if (context.binary === "toBase64") {
	    if (!(arg instanceof Buffer))
	      throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
	    return arg.toString("base64");
	  }
	  if (context.binary === "buffer") {
	    if (!(arg instanceof Buffer))
	      throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
	    return arg;
	  }
	  throw new ValidationError(`Unsupported binary behavior "${context.binary}"`);
	};
	const tUndefined = (arg, path, context) => {
	  if (Object.is(arg, void 0))
	    return arg;
	  throw new ValidationError(`${path}: expected undefined, got ${typeof arg}`);
	};
	const tAny = (arg, path, context) => {
	  return arg;
	};
	const tOptional = (v) => {
	  return (arg, path, context) => {
	    if (Object.is(arg, void 0))
	      return arg;
	    return v(arg, path, context);
	  };
	};
	const tArray = (v) => {
	  return (arg, path, context) => {
	    if (!Array.isArray(arg))
	      throw new ValidationError(`${path}: expected array, got ${typeof arg}`);
	    return arg.map((x, index) => v(x, path + "[" + index + "]", context));
	  };
	};
	const tObject = (s) => {
	  return (arg, path, context) => {
	    if (Object.is(arg, null))
	      throw new ValidationError(`${path}: expected object, got null`);
	    if (typeof arg !== "object")
	      throw new ValidationError(`${path}: expected object, got ${typeof arg}`);
	    const result = {};
	    for (const [key, v] of Object.entries(s)) {
	      const value = v(arg[key], path ? path + "." + key : key, context);
	      if (!Object.is(value, void 0))
	        result[key] = value;
	    }
	    if (context.isUnderTest()) {
	      for (const [key, value] of Object.entries(arg)) {
	        if (key.startsWith("__testHook"))
	          result[key] = value;
	      }
	    }
	    return result;
	  };
	};
	const tEnum = (e) => {
	  return (arg, path, context) => {
	    if (!e.includes(arg))
	      throw new ValidationError(`${path}: expected one of (${e.join("|")})`);
	    return arg;
	  };
	};
	const tChannel = (names) => {
	  return (arg, path, context) => {
	    return context.tChannelImpl(names, arg, path, context);
	  };
	};
	const tType = (name) => {
	  return (arg, path, context) => {
	    const v = scheme[name];
	    if (!v)
	      throw new ValidationError(path + ': unknown type "' + name + '"');
	    return v(arg, path, context);
	  };
	};
	return validatorPrimitives;
}

var validator;
var hasRequiredValidator;

function requireValidator () {
	if (hasRequiredValidator) return validator;
	hasRequiredValidator = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var validator_exports = {};
	__export(validator_exports, {
	  ValidationError: () => import_validatorPrimitives2.ValidationError,
	  createMetadataValidator: () => import_validatorPrimitives2.createMetadataValidator,
	  findValidator: () => import_validatorPrimitives2.findValidator,
	  maybeFindValidator: () => import_validatorPrimitives2.maybeFindValidator
	});
	validator = __toCommonJS(validator_exports);
	var import_validatorPrimitives = requireValidatorPrimitives();
	var import_validatorPrimitives2 = requireValidatorPrimitives();
	import_validatorPrimitives.scheme.StackFrame = (0, import_validatorPrimitives.tObject)({
	  file: import_validatorPrimitives.tString,
	  line: import_validatorPrimitives.tNumber,
	  column: import_validatorPrimitives.tNumber,
	  function: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.Metadata = (0, import_validatorPrimitives.tObject)({
	  location: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    file: import_validatorPrimitives.tString,
	    line: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	    column: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  })),
	  apiName: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  internal: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  stepId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.ClientSideCallMetadata = (0, import_validatorPrimitives.tObject)({
	  id: import_validatorPrimitives.tNumber,
	  stack: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("StackFrame")))
	});
	import_validatorPrimitives.scheme.Point = (0, import_validatorPrimitives.tObject)({
	  x: import_validatorPrimitives.tNumber,
	  y: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.Rect = (0, import_validatorPrimitives.tObject)({
	  x: import_validatorPrimitives.tNumber,
	  y: import_validatorPrimitives.tNumber,
	  width: import_validatorPrimitives.tNumber,
	  height: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.SerializedValue = (0, import_validatorPrimitives.tObject)({
	  n: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  b: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  s: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  v: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["null", "undefined", "NaN", "Infinity", "-Infinity", "-0"])),
	  d: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  u: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  bi: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  ta: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    b: import_validatorPrimitives.tBinary,
	    k: (0, import_validatorPrimitives.tEnum)(["i8", "ui8", "ui8c", "i16", "ui16", "i32", "ui32", "f32", "f64", "bi64", "bui64"])
	  })),
	  e: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    m: import_validatorPrimitives.tString,
	    n: import_validatorPrimitives.tString,
	    s: import_validatorPrimitives.tString
	  })),
	  r: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    p: import_validatorPrimitives.tString,
	    f: import_validatorPrimitives.tString
	  })),
	  a: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("SerializedValue"))),
	  o: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    k: import_validatorPrimitives.tString,
	    v: (0, import_validatorPrimitives.tType)("SerializedValue")
	  }))),
	  h: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  id: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  ref: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.SerializedArgument = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue"),
	  handles: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)("*"))
	});
	import_validatorPrimitives.scheme.ExpectedTextValue = (0, import_validatorPrimitives.tObject)({
	  string: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  regexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  regexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  matchSubstring: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  ignoreCase: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  normalizeWhiteSpace: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.AXNode = (0, import_validatorPrimitives.tObject)({
	  role: import_validatorPrimitives.tString,
	  name: import_validatorPrimitives.tString,
	  valueString: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  valueNumber: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  description: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  keyshortcuts: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  roledescription: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  valuetext: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  disabled: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  expanded: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  focused: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modal: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  multiline: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  multiselectable: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  readonly: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  required: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  selected: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  checked: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["checked", "unchecked", "mixed"])),
	  pressed: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["pressed", "released", "mixed"])),
	  level: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  valuemin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  valuemax: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  autocomplete: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  haspopup: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  invalid: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  orientation: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  children: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("AXNode")))
	});
	import_validatorPrimitives.scheme.SetNetworkCookie = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  value: import_validatorPrimitives.tString,
	  url: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  domain: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  path: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  expires: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  httpOnly: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  secure: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  sameSite: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["Strict", "Lax", "None"]))
	});
	import_validatorPrimitives.scheme.NetworkCookie = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  value: import_validatorPrimitives.tString,
	  domain: import_validatorPrimitives.tString,
	  path: import_validatorPrimitives.tString,
	  expires: import_validatorPrimitives.tNumber,
	  httpOnly: import_validatorPrimitives.tBoolean,
	  secure: import_validatorPrimitives.tBoolean,
	  sameSite: (0, import_validatorPrimitives.tEnum)(["Strict", "Lax", "None"])
	});
	import_validatorPrimitives.scheme.NameValue = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.IndexedDBDatabase = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  version: import_validatorPrimitives.tNumber,
	  stores: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    name: import_validatorPrimitives.tString,
	    autoIncrement: import_validatorPrimitives.tBoolean,
	    keyPath: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    keyPathArray: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	    records: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	      key: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	      keyEncoded: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	      value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	      valueEncoded: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny)
	    })),
	    indexes: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	      name: import_validatorPrimitives.tString,
	      keyPath: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	      keyPathArray: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	      multiEntry: import_validatorPrimitives.tBoolean,
	      unique: import_validatorPrimitives.tBoolean
	    }))
	  }))
	});
	import_validatorPrimitives.scheme.SetOriginStorage = (0, import_validatorPrimitives.tObject)({
	  origin: import_validatorPrimitives.tString,
	  localStorage: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue")),
	  indexedDB: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("IndexedDBDatabase")))
	});
	import_validatorPrimitives.scheme.OriginStorage = (0, import_validatorPrimitives.tObject)({
	  origin: import_validatorPrimitives.tString,
	  localStorage: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue")),
	  indexedDB: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("IndexedDBDatabase")))
	});
	import_validatorPrimitives.scheme.SerializedError = (0, import_validatorPrimitives.tObject)({
	  error: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    message: import_validatorPrimitives.tString,
	    name: import_validatorPrimitives.tString,
	    stack: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })),
	  value: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("SerializedValue"))
	});
	import_validatorPrimitives.scheme.RecordHarOptions = (0, import_validatorPrimitives.tObject)({
	  path: import_validatorPrimitives.tString,
	  content: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["embed", "attach", "omit"])),
	  mode: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["full", "minimal"])),
	  urlGlob: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  urlRegexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  urlRegexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.FormField = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  file: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    name: import_validatorPrimitives.tString,
	    mimeType: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    buffer: import_validatorPrimitives.tBinary
	  }))
	});
	import_validatorPrimitives.scheme.APIRequestContextInitializer = (0, import_validatorPrimitives.tObject)({
	  tracing: (0, import_validatorPrimitives.tChannel)(["Tracing"])
	});
	import_validatorPrimitives.scheme.APIRequestContextFetchParams = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString,
	  encodedParams: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  params: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  method: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  headers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  postData: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	  jsonData: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  formData: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  multipartData: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("FormField"))),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  failOnStatusCode: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  ignoreHTTPSErrors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  maxRedirects: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  maxRetries: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.APIRequestContextFetchResult = (0, import_validatorPrimitives.tObject)({
	  response: (0, import_validatorPrimitives.tType)("APIResponse")
	});
	import_validatorPrimitives.scheme.APIRequestContextFetchResponseBodyParams = (0, import_validatorPrimitives.tObject)({
	  fetchUid: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.APIRequestContextFetchResponseBodyResult = (0, import_validatorPrimitives.tObject)({
	  binary: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary)
	});
	import_validatorPrimitives.scheme.APIRequestContextFetchLogParams = (0, import_validatorPrimitives.tObject)({
	  fetchUid: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.APIRequestContextFetchLogResult = (0, import_validatorPrimitives.tObject)({
	  log: (0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.APIRequestContextStorageStateParams = (0, import_validatorPrimitives.tObject)({
	  indexedDB: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.APIRequestContextStorageStateResult = (0, import_validatorPrimitives.tObject)({
	  cookies: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NetworkCookie")),
	  origins: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("OriginStorage"))
	});
	import_validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseParams = (0, import_validatorPrimitives.tObject)({
	  fetchUid: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.APIRequestContextDisposeParams = (0, import_validatorPrimitives.tObject)({
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.APIRequestContextDisposeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.APIResponse = (0, import_validatorPrimitives.tObject)({
	  fetchUid: import_validatorPrimitives.tString,
	  url: import_validatorPrimitives.tString,
	  status: import_validatorPrimitives.tNumber,
	  statusText: import_validatorPrimitives.tString,
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))
	});
	import_validatorPrimitives.scheme.LifecycleEvent = (0, import_validatorPrimitives.tEnum)(["load", "domcontentloaded", "networkidle", "commit"]);
	import_validatorPrimitives.scheme.LocalUtilsInitializer = (0, import_validatorPrimitives.tObject)({
	  deviceDescriptors: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    name: import_validatorPrimitives.tString,
	    descriptor: (0, import_validatorPrimitives.tObject)({
	      userAgent: import_validatorPrimitives.tString,
	      viewport: (0, import_validatorPrimitives.tObject)({
	        width: import_validatorPrimitives.tNumber,
	        height: import_validatorPrimitives.tNumber
	      }),
	      screen: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	        width: import_validatorPrimitives.tNumber,
	        height: import_validatorPrimitives.tNumber
	      })),
	      deviceScaleFactor: import_validatorPrimitives.tNumber,
	      isMobile: import_validatorPrimitives.tBoolean,
	      hasTouch: import_validatorPrimitives.tBoolean,
	      defaultBrowserType: (0, import_validatorPrimitives.tEnum)(["chromium", "firefox", "webkit"])
	    })
	  }))
	});
	import_validatorPrimitives.scheme.LocalUtilsZipParams = (0, import_validatorPrimitives.tObject)({
	  zipFile: import_validatorPrimitives.tString,
	  entries: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue")),
	  stacksId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  mode: (0, import_validatorPrimitives.tEnum)(["write", "append"]),
	  includeSources: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.LocalUtilsZipResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.LocalUtilsHarOpenParams = (0, import_validatorPrimitives.tObject)({
	  file: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.LocalUtilsHarOpenResult = (0, import_validatorPrimitives.tObject)({
	  harId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  error: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.LocalUtilsHarLookupParams = (0, import_validatorPrimitives.tObject)({
	  harId: import_validatorPrimitives.tString,
	  url: import_validatorPrimitives.tString,
	  method: import_validatorPrimitives.tString,
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue")),
	  postData: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	  isNavigationRequest: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.LocalUtilsHarLookupResult = (0, import_validatorPrimitives.tObject)({
	  action: (0, import_validatorPrimitives.tEnum)(["error", "redirect", "fulfill", "noentry"]),
	  message: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  redirectURL: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  status: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  headers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  body: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary)
	});
	import_validatorPrimitives.scheme.LocalUtilsHarCloseParams = (0, import_validatorPrimitives.tObject)({
	  harId: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.LocalUtilsHarCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.LocalUtilsHarUnzipParams = (0, import_validatorPrimitives.tObject)({
	  zipFile: import_validatorPrimitives.tString,
	  harFile: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.LocalUtilsHarUnzipResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.LocalUtilsConnectParams = (0, import_validatorPrimitives.tObject)({
	  wsEndpoint: import_validatorPrimitives.tString,
	  headers: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	  exposeNetwork: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  slowMo: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  socksProxyRedirectPortForTest: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.LocalUtilsConnectResult = (0, import_validatorPrimitives.tObject)({
	  pipe: (0, import_validatorPrimitives.tChannel)(["JsonPipe"]),
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))
	});
	import_validatorPrimitives.scheme.LocalUtilsTracingStartedParams = (0, import_validatorPrimitives.tObject)({
	  tracesDir: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  traceName: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.LocalUtilsTracingStartedResult = (0, import_validatorPrimitives.tObject)({
	  stacksId: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyParams = (0, import_validatorPrimitives.tObject)({
	  callData: (0, import_validatorPrimitives.tType)("ClientSideCallMetadata")
	});
	import_validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.LocalUtilsTraceDiscardedParams = (0, import_validatorPrimitives.tObject)({
	  stacksId: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.LocalUtilsTraceDiscardedResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.LocalUtilsGlobToRegexParams = (0, import_validatorPrimitives.tObject)({
	  glob: import_validatorPrimitives.tString,
	  baseURL: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  webSocketUrl: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.LocalUtilsGlobToRegexResult = (0, import_validatorPrimitives.tObject)({
	  regex: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.RootInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.RootInitializeParams = (0, import_validatorPrimitives.tObject)({
	  sdkLanguage: (0, import_validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
	});
	import_validatorPrimitives.scheme.RootInitializeResult = (0, import_validatorPrimitives.tObject)({
	  playwright: (0, import_validatorPrimitives.tChannel)(["Playwright"])
	});
	import_validatorPrimitives.scheme.PlaywrightInitializer = (0, import_validatorPrimitives.tObject)({
	  chromium: (0, import_validatorPrimitives.tChannel)(["BrowserType"]),
	  firefox: (0, import_validatorPrimitives.tChannel)(["BrowserType"]),
	  webkit: (0, import_validatorPrimitives.tChannel)(["BrowserType"]),
	  bidiChromium: (0, import_validatorPrimitives.tChannel)(["BrowserType"]),
	  bidiFirefox: (0, import_validatorPrimitives.tChannel)(["BrowserType"]),
	  android: (0, import_validatorPrimitives.tChannel)(["Android"]),
	  electron: (0, import_validatorPrimitives.tChannel)(["Electron"]),
	  utils: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["LocalUtils"])),
	  selectors: (0, import_validatorPrimitives.tChannel)(["Selectors"]),
	  preLaunchedBrowser: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Browser"])),
	  preConnectedAndroidDevice: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["AndroidDevice"])),
	  socksSupport: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["SocksSupport"]))
	});
	import_validatorPrimitives.scheme.PlaywrightNewRequestParams = (0, import_validatorPrimitives.tObject)({
	  baseURL: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  userAgent: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  ignoreHTTPSErrors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  extraHTTPHeaders: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  failOnStatusCode: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  clientCertificates: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    origin: import_validatorPrimitives.tString,
	    cert: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    key: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    passphrase: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    pfx: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary)
	  }))),
	  maxRedirects: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  httpCredentials: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    username: import_validatorPrimitives.tString,
	    password: import_validatorPrimitives.tString,
	    origin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    send: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["always", "unauthorized"]))
	  })),
	  proxy: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    server: import_validatorPrimitives.tString,
	    bypass: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    username: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    password: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  storageState: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    cookies: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NetworkCookie"))),
	    origins: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("SetOriginStorage")))
	  })),
	  tracesDir: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.PlaywrightNewRequestResult = (0, import_validatorPrimitives.tObject)({
	  request: (0, import_validatorPrimitives.tChannel)(["APIRequestContext"])
	});
	import_validatorPrimitives.scheme.RecorderSource = (0, import_validatorPrimitives.tObject)({
	  isRecorded: import_validatorPrimitives.tBoolean,
	  id: import_validatorPrimitives.tString,
	  label: import_validatorPrimitives.tString,
	  text: import_validatorPrimitives.tString,
	  language: import_validatorPrimitives.tString,
	  highlight: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    line: import_validatorPrimitives.tNumber,
	    type: import_validatorPrimitives.tString
	  })),
	  revealLine: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  group: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.DebugControllerInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerInspectRequestedEvent = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  locator: import_validatorPrimitives.tString,
	  ariaSnapshot: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.DebugControllerSetModeRequestedEvent = (0, import_validatorPrimitives.tObject)({
	  mode: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.DebugControllerStateChangedEvent = (0, import_validatorPrimitives.tObject)({
	  pageCount: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.DebugControllerSourceChangedEvent = (0, import_validatorPrimitives.tObject)({
	  text: import_validatorPrimitives.tString,
	  header: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  footer: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  actions: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString))
	});
	import_validatorPrimitives.scheme.DebugControllerPausedEvent = (0, import_validatorPrimitives.tObject)({
	  paused: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.DebugControllerInitializeParams = (0, import_validatorPrimitives.tObject)({
	  codegenId: import_validatorPrimitives.tString,
	  sdkLanguage: (0, import_validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
	});
	import_validatorPrimitives.scheme.DebugControllerInitializeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerSetReportStateChangedParams = (0, import_validatorPrimitives.tObject)({
	  enabled: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.DebugControllerSetReportStateChangedResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerResetForReuseParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerResetForReuseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerNavigateParams = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.DebugControllerNavigateResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerSetRecorderModeParams = (0, import_validatorPrimitives.tObject)({
	  mode: (0, import_validatorPrimitives.tEnum)(["inspecting", "recording", "none"]),
	  testIdAttributeName: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.DebugControllerSetRecorderModeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerHighlightParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  ariaTemplate: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.DebugControllerHighlightResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerHideHighlightParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerHideHighlightResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerResumeParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerResumeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerKillParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerKillResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerCloseAllBrowsersParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DebugControllerCloseAllBrowsersResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SocksSupportInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SocksSupportSocksRequestedEvent = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tString,
	  host: import_validatorPrimitives.tString,
	  port: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.SocksSupportSocksDataEvent = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tString,
	  data: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.SocksSupportSocksClosedEvent = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.SocksSupportSocksConnectedParams = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tString,
	  host: import_validatorPrimitives.tString,
	  port: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.SocksSupportSocksConnectedResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SocksSupportSocksFailedParams = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tString,
	  errorCode: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.SocksSupportSocksFailedResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SocksSupportSocksDataParams = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tString,
	  data: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.SocksSupportSocksDataResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SocksSupportSocksErrorParams = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tString,
	  error: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.SocksSupportSocksErrorResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SocksSupportSocksEndParams = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.SocksSupportSocksEndResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SelectorsInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SelectorsRegisterParams = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  source: import_validatorPrimitives.tString,
	  contentScript: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.SelectorsRegisterResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameParams = (0, import_validatorPrimitives.tObject)({
	  testIdAttributeName: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserTypeInitializer = (0, import_validatorPrimitives.tObject)({
	  executablePath: import_validatorPrimitives.tString,
	  name: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.BrowserTypeLaunchParams = (0, import_validatorPrimitives.tObject)({
	  channel: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  executablePath: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  args: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  ignoreAllDefaultArgs: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  ignoreDefaultArgs: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  handleSIGINT: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  handleSIGTERM: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  handleSIGHUP: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  env: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  headless: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  devtools: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  proxy: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    server: import_validatorPrimitives.tString,
	    bypass: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    username: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    password: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })),
	  downloadsPath: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  tracesDir: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  chromiumSandbox: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  firefoxUserPrefs: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	  slowMo: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.BrowserTypeLaunchResult = (0, import_validatorPrimitives.tObject)({
	  browser: (0, import_validatorPrimitives.tChannel)(["Browser"])
	});
	import_validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextParams = (0, import_validatorPrimitives.tObject)({
	  channel: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  executablePath: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  args: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  ignoreAllDefaultArgs: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  ignoreDefaultArgs: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  handleSIGINT: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  handleSIGTERM: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  handleSIGHUP: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  env: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  headless: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  devtools: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  proxy: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    server: import_validatorPrimitives.tString,
	    bypass: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    username: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    password: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })),
	  downloadsPath: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  tracesDir: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  chromiumSandbox: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  firefoxUserPrefs: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	  noDefaultViewport: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  viewport: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  screen: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  ignoreHTTPSErrors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  clientCertificates: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    origin: import_validatorPrimitives.tString,
	    cert: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    key: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    passphrase: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    pfx: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary)
	  }))),
	  javaScriptEnabled: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  bypassCSP: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  userAgent: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  locale: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  timezoneId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  geolocation: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    longitude: import_validatorPrimitives.tNumber,
	    latitude: import_validatorPrimitives.tNumber,
	    accuracy: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  })),
	  permissions: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  extraHTTPHeaders: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  offline: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  httpCredentials: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    username: import_validatorPrimitives.tString,
	    password: import_validatorPrimitives.tString,
	    origin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    send: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["always", "unauthorized"]))
	  })),
	  deviceScaleFactor: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  isMobile: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  hasTouch: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  colorScheme: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
	  reducedMotion: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
	  forcedColors: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["active", "none", "no-override"])),
	  acceptDownloads: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
	  contrast: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["no-preference", "more", "no-override"])),
	  baseURL: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  recordVideo: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    dir: import_validatorPrimitives.tString,
	    size: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	      width: import_validatorPrimitives.tNumber,
	      height: import_validatorPrimitives.tNumber
	    }))
	  })),
	  recordHar: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("RecordHarOptions")),
	  strictSelectors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  serviceWorkers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["allow", "block"])),
	  userDataDir: import_validatorPrimitives.tString,
	  slowMo: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextResult = (0, import_validatorPrimitives.tObject)({
	  context: (0, import_validatorPrimitives.tChannel)(["BrowserContext"])
	});
	import_validatorPrimitives.scheme.BrowserTypeConnectOverCDPParams = (0, import_validatorPrimitives.tObject)({
	  endpointURL: import_validatorPrimitives.tString,
	  headers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  slowMo: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.BrowserTypeConnectOverCDPResult = (0, import_validatorPrimitives.tObject)({
	  browser: (0, import_validatorPrimitives.tChannel)(["Browser"]),
	  defaultContext: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["BrowserContext"]))
	});
	import_validatorPrimitives.scheme.BrowserInitializer = (0, import_validatorPrimitives.tObject)({
	  version: import_validatorPrimitives.tString,
	  name: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.BrowserCloseEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserCloseParams = (0, import_validatorPrimitives.tObject)({
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserKillForTestsParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserKillForTestsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserDefaultUserAgentForTestParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserDefaultUserAgentForTestResult = (0, import_validatorPrimitives.tObject)({
	  userAgent: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.BrowserNewContextParams = (0, import_validatorPrimitives.tObject)({
	  noDefaultViewport: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  viewport: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  screen: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  ignoreHTTPSErrors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  clientCertificates: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    origin: import_validatorPrimitives.tString,
	    cert: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    key: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    passphrase: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    pfx: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary)
	  }))),
	  javaScriptEnabled: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  bypassCSP: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  userAgent: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  locale: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  timezoneId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  geolocation: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    longitude: import_validatorPrimitives.tNumber,
	    latitude: import_validatorPrimitives.tNumber,
	    accuracy: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  })),
	  permissions: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  extraHTTPHeaders: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  offline: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  httpCredentials: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    username: import_validatorPrimitives.tString,
	    password: import_validatorPrimitives.tString,
	    origin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    send: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["always", "unauthorized"]))
	  })),
	  deviceScaleFactor: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  isMobile: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  hasTouch: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  colorScheme: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
	  reducedMotion: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
	  forcedColors: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["active", "none", "no-override"])),
	  acceptDownloads: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
	  contrast: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["no-preference", "more", "no-override"])),
	  baseURL: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  recordVideo: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    dir: import_validatorPrimitives.tString,
	    size: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	      width: import_validatorPrimitives.tNumber,
	      height: import_validatorPrimitives.tNumber
	    }))
	  })),
	  recordHar: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("RecordHarOptions")),
	  strictSelectors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  serviceWorkers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["allow", "block"])),
	  proxy: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    server: import_validatorPrimitives.tString,
	    bypass: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    username: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    password: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })),
	  storageState: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    cookies: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("SetNetworkCookie"))),
	    origins: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("SetOriginStorage")))
	  }))
	});
	import_validatorPrimitives.scheme.BrowserNewContextResult = (0, import_validatorPrimitives.tObject)({
	  context: (0, import_validatorPrimitives.tChannel)(["BrowserContext"])
	});
	import_validatorPrimitives.scheme.BrowserNewContextForReuseParams = (0, import_validatorPrimitives.tObject)({
	  noDefaultViewport: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  viewport: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  screen: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  ignoreHTTPSErrors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  clientCertificates: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    origin: import_validatorPrimitives.tString,
	    cert: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    key: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    passphrase: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    pfx: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary)
	  }))),
	  javaScriptEnabled: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  bypassCSP: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  userAgent: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  locale: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  timezoneId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  geolocation: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    longitude: import_validatorPrimitives.tNumber,
	    latitude: import_validatorPrimitives.tNumber,
	    accuracy: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  })),
	  permissions: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  extraHTTPHeaders: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  offline: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  httpCredentials: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    username: import_validatorPrimitives.tString,
	    password: import_validatorPrimitives.tString,
	    origin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    send: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["always", "unauthorized"]))
	  })),
	  deviceScaleFactor: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  isMobile: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  hasTouch: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  colorScheme: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
	  reducedMotion: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
	  forcedColors: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["active", "none", "no-override"])),
	  acceptDownloads: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
	  contrast: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["no-preference", "more", "no-override"])),
	  baseURL: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  recordVideo: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    dir: import_validatorPrimitives.tString,
	    size: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	      width: import_validatorPrimitives.tNumber,
	      height: import_validatorPrimitives.tNumber
	    }))
	  })),
	  recordHar: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("RecordHarOptions")),
	  strictSelectors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  serviceWorkers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["allow", "block"])),
	  proxy: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    server: import_validatorPrimitives.tString,
	    bypass: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    username: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    password: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })),
	  storageState: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    cookies: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("SetNetworkCookie"))),
	    origins: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("SetOriginStorage")))
	  }))
	});
	import_validatorPrimitives.scheme.BrowserNewContextForReuseResult = (0, import_validatorPrimitives.tObject)({
	  context: (0, import_validatorPrimitives.tChannel)(["BrowserContext"])
	});
	import_validatorPrimitives.scheme.BrowserStopPendingOperationsParams = (0, import_validatorPrimitives.tObject)({
	  reason: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.BrowserStopPendingOperationsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserNewBrowserCDPSessionParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserNewBrowserCDPSessionResult = (0, import_validatorPrimitives.tObject)({
	  session: (0, import_validatorPrimitives.tChannel)(["CDPSession"])
	});
	import_validatorPrimitives.scheme.BrowserStartTracingParams = (0, import_validatorPrimitives.tObject)({
	  page: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"])),
	  screenshots: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  categories: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString))
	});
	import_validatorPrimitives.scheme.BrowserStartTracingResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserStopTracingParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserStopTracingResult = (0, import_validatorPrimitives.tObject)({
	  artifact: (0, import_validatorPrimitives.tChannel)(["Artifact"])
	});
	import_validatorPrimitives.scheme.EventTargetInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.EventTargetWaitForEventInfoParams = (0, import_validatorPrimitives.tObject)({
	  info: (0, import_validatorPrimitives.tObject)({
	    waitId: import_validatorPrimitives.tString,
	    phase: (0, import_validatorPrimitives.tEnum)(["before", "after", "log"]),
	    event: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    message: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    error: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })
	});
	import_validatorPrimitives.scheme.BrowserContextWaitForEventInfoParams = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
	import_validatorPrimitives.scheme.PageWaitForEventInfoParams = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
	import_validatorPrimitives.scheme.WebSocketWaitForEventInfoParams = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
	import_validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoParams = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
	import_validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoParams = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
	import_validatorPrimitives.scheme.EventTargetWaitForEventInfoResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextWaitForEventInfoResult = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
	import_validatorPrimitives.scheme.PageWaitForEventInfoResult = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
	import_validatorPrimitives.scheme.WebSocketWaitForEventInfoResult = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
	import_validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoResult = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
	import_validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoResult = (0, import_validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
	import_validatorPrimitives.scheme.BrowserContextInitializer = (0, import_validatorPrimitives.tObject)({
	  isChromium: import_validatorPrimitives.tBoolean,
	  requestContext: (0, import_validatorPrimitives.tChannel)(["APIRequestContext"]),
	  tracing: (0, import_validatorPrimitives.tChannel)(["Tracing"])
	});
	import_validatorPrimitives.scheme.BrowserContextBindingCallEvent = (0, import_validatorPrimitives.tObject)({
	  binding: (0, import_validatorPrimitives.tChannel)(["BindingCall"])
	});
	import_validatorPrimitives.scheme.BrowserContextConsoleEvent = (0, import_validatorPrimitives.tObject)({
	  type: import_validatorPrimitives.tString,
	  text: import_validatorPrimitives.tString,
	  args: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
	  location: (0, import_validatorPrimitives.tObject)({
	    url: import_validatorPrimitives.tString,
	    lineNumber: import_validatorPrimitives.tNumber,
	    columnNumber: import_validatorPrimitives.tNumber
	  }),
	  page: (0, import_validatorPrimitives.tChannel)(["Page"])
	});
	import_validatorPrimitives.scheme.BrowserContextCloseEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextDialogEvent = (0, import_validatorPrimitives.tObject)({
	  dialog: (0, import_validatorPrimitives.tChannel)(["Dialog"])
	});
	import_validatorPrimitives.scheme.BrowserContextPageEvent = (0, import_validatorPrimitives.tObject)({
	  page: (0, import_validatorPrimitives.tChannel)(["Page"])
	});
	import_validatorPrimitives.scheme.BrowserContextPageErrorEvent = (0, import_validatorPrimitives.tObject)({
	  error: (0, import_validatorPrimitives.tType)("SerializedError"),
	  page: (0, import_validatorPrimitives.tChannel)(["Page"])
	});
	import_validatorPrimitives.scheme.BrowserContextRouteEvent = (0, import_validatorPrimitives.tObject)({
	  route: (0, import_validatorPrimitives.tChannel)(["Route"])
	});
	import_validatorPrimitives.scheme.BrowserContextWebSocketRouteEvent = (0, import_validatorPrimitives.tObject)({
	  webSocketRoute: (0, import_validatorPrimitives.tChannel)(["WebSocketRoute"])
	});
	import_validatorPrimitives.scheme.BrowserContextVideoEvent = (0, import_validatorPrimitives.tObject)({
	  artifact: (0, import_validatorPrimitives.tChannel)(["Artifact"])
	});
	import_validatorPrimitives.scheme.BrowserContextBackgroundPageEvent = (0, import_validatorPrimitives.tObject)({
	  page: (0, import_validatorPrimitives.tChannel)(["Page"])
	});
	import_validatorPrimitives.scheme.BrowserContextServiceWorkerEvent = (0, import_validatorPrimitives.tObject)({
	  worker: (0, import_validatorPrimitives.tChannel)(["Worker"])
	});
	import_validatorPrimitives.scheme.BrowserContextRequestEvent = (0, import_validatorPrimitives.tObject)({
	  request: (0, import_validatorPrimitives.tChannel)(["Request"]),
	  page: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"]))
	});
	import_validatorPrimitives.scheme.BrowserContextRequestFailedEvent = (0, import_validatorPrimitives.tObject)({
	  request: (0, import_validatorPrimitives.tChannel)(["Request"]),
	  failureText: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  responseEndTiming: import_validatorPrimitives.tNumber,
	  page: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"]))
	});
	import_validatorPrimitives.scheme.BrowserContextRequestFinishedEvent = (0, import_validatorPrimitives.tObject)({
	  request: (0, import_validatorPrimitives.tChannel)(["Request"]),
	  response: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Response"])),
	  responseEndTiming: import_validatorPrimitives.tNumber,
	  page: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"]))
	});
	import_validatorPrimitives.scheme.BrowserContextResponseEvent = (0, import_validatorPrimitives.tObject)({
	  response: (0, import_validatorPrimitives.tChannel)(["Response"]),
	  page: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"]))
	});
	import_validatorPrimitives.scheme.BrowserContextAddCookiesParams = (0, import_validatorPrimitives.tObject)({
	  cookies: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("SetNetworkCookie"))
	});
	import_validatorPrimitives.scheme.BrowserContextAddCookiesResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextAddInitScriptParams = (0, import_validatorPrimitives.tObject)({
	  source: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.BrowserContextAddInitScriptResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClearCookiesParams = (0, import_validatorPrimitives.tObject)({
	  name: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  nameRegexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  nameRegexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  domain: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  domainRegexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  domainRegexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  path: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  pathRegexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  pathRegexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextClearCookiesResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClearPermissionsParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClearPermissionsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextCloseParams = (0, import_validatorPrimitives.tObject)({
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextCookiesParams = (0, import_validatorPrimitives.tObject)({
	  urls: (0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextCookiesResult = (0, import_validatorPrimitives.tObject)({
	  cookies: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NetworkCookie"))
	});
	import_validatorPrimitives.scheme.BrowserContextExposeBindingParams = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  needsHandle: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.BrowserContextExposeBindingResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextGrantPermissionsParams = (0, import_validatorPrimitives.tObject)({
	  permissions: (0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString),
	  origin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextGrantPermissionsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextNewPageParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextNewPageResult = (0, import_validatorPrimitives.tObject)({
	  page: (0, import_validatorPrimitives.tChannel)(["Page"])
	});
	import_validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersParams = (0, import_validatorPrimitives.tObject)({
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))
	});
	import_validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextSetGeolocationParams = (0, import_validatorPrimitives.tObject)({
	  geolocation: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    longitude: import_validatorPrimitives.tNumber,
	    latitude: import_validatorPrimitives.tNumber,
	    accuracy: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  }))
	});
	import_validatorPrimitives.scheme.BrowserContextSetGeolocationResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsParams = (0, import_validatorPrimitives.tObject)({
	  httpCredentials: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    username: import_validatorPrimitives.tString,
	    password: import_validatorPrimitives.tString,
	    origin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  }))
	});
	import_validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsParams = (0, import_validatorPrimitives.tObject)({
	  patterns: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    glob: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    regexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    regexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  }))
	});
	import_validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextSetWebSocketInterceptionPatternsParams = (0, import_validatorPrimitives.tObject)({
	  patterns: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    glob: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    regexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    regexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  }))
	});
	import_validatorPrimitives.scheme.BrowserContextSetWebSocketInterceptionPatternsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextSetOfflineParams = (0, import_validatorPrimitives.tObject)({
	  offline: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.BrowserContextSetOfflineResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextStorageStateParams = (0, import_validatorPrimitives.tObject)({
	  indexedDB: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.BrowserContextStorageStateResult = (0, import_validatorPrimitives.tObject)({
	  cookies: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NetworkCookie")),
	  origins: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("OriginStorage"))
	});
	import_validatorPrimitives.scheme.BrowserContextPauseParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextPauseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextEnableRecorderParams = (0, import_validatorPrimitives.tObject)({
	  language: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  mode: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["inspecting", "recording"])),
	  pauseOnNextStatement: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  testIdAttributeName: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  launchOptions: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	  contextOptions: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	  device: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  saveStorage: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  outputFile: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  handleSIGINT: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  omitCallTracking: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.BrowserContextEnableRecorderResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextNewCDPSessionParams = (0, import_validatorPrimitives.tObject)({
	  page: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"])),
	  frame: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Frame"]))
	});
	import_validatorPrimitives.scheme.BrowserContextNewCDPSessionResult = (0, import_validatorPrimitives.tObject)({
	  session: (0, import_validatorPrimitives.tChannel)(["CDPSession"])
	});
	import_validatorPrimitives.scheme.BrowserContextHarStartParams = (0, import_validatorPrimitives.tObject)({
	  page: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"])),
	  options: (0, import_validatorPrimitives.tType)("RecordHarOptions")
	});
	import_validatorPrimitives.scheme.BrowserContextHarStartResult = (0, import_validatorPrimitives.tObject)({
	  harId: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.BrowserContextHarExportParams = (0, import_validatorPrimitives.tObject)({
	  harId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextHarExportResult = (0, import_validatorPrimitives.tObject)({
	  artifact: (0, import_validatorPrimitives.tChannel)(["Artifact"])
	});
	import_validatorPrimitives.scheme.BrowserContextCreateTempFilesParams = (0, import_validatorPrimitives.tObject)({
	  rootDirName: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  items: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    name: import_validatorPrimitives.tString,
	    lastModifiedMs: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  }))
	});
	import_validatorPrimitives.scheme.BrowserContextCreateTempFilesResult = (0, import_validatorPrimitives.tObject)({
	  rootDir: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["WritableStream"])),
	  writableStreams: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["WritableStream"]))
	});
	import_validatorPrimitives.scheme.BrowserContextUpdateSubscriptionParams = (0, import_validatorPrimitives.tObject)({
	  event: (0, import_validatorPrimitives.tEnum)(["console", "dialog", "request", "response", "requestFinished", "requestFailed"]),
	  enabled: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.BrowserContextUpdateSubscriptionResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClockFastForwardParams = (0, import_validatorPrimitives.tObject)({
	  ticksNumber: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  ticksString: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextClockFastForwardResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClockInstallParams = (0, import_validatorPrimitives.tObject)({
	  timeNumber: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeString: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextClockInstallResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClockPauseAtParams = (0, import_validatorPrimitives.tObject)({
	  timeNumber: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeString: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextClockPauseAtResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClockResumeParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClockResumeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClockRunForParams = (0, import_validatorPrimitives.tObject)({
	  ticksNumber: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  ticksString: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextClockRunForResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClockSetFixedTimeParams = (0, import_validatorPrimitives.tObject)({
	  timeNumber: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeString: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextClockSetFixedTimeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BrowserContextClockSetSystemTimeParams = (0, import_validatorPrimitives.tObject)({
	  timeNumber: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeString: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.BrowserContextClockSetSystemTimeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageInitializer = (0, import_validatorPrimitives.tObject)({
	  mainFrame: (0, import_validatorPrimitives.tChannel)(["Frame"]),
	  viewportSize: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  isClosed: import_validatorPrimitives.tBoolean,
	  opener: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"]))
	});
	import_validatorPrimitives.scheme.PageBindingCallEvent = (0, import_validatorPrimitives.tObject)({
	  binding: (0, import_validatorPrimitives.tChannel)(["BindingCall"])
	});
	import_validatorPrimitives.scheme.PageCloseEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageCrashEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageDownloadEvent = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString,
	  suggestedFilename: import_validatorPrimitives.tString,
	  artifact: (0, import_validatorPrimitives.tChannel)(["Artifact"])
	});
	import_validatorPrimitives.scheme.PageFileChooserEvent = (0, import_validatorPrimitives.tObject)({
	  element: (0, import_validatorPrimitives.tChannel)(["ElementHandle"]),
	  isMultiple: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.PageFrameAttachedEvent = (0, import_validatorPrimitives.tObject)({
	  frame: (0, import_validatorPrimitives.tChannel)(["Frame"])
	});
	import_validatorPrimitives.scheme.PageFrameDetachedEvent = (0, import_validatorPrimitives.tObject)({
	  frame: (0, import_validatorPrimitives.tChannel)(["Frame"])
	});
	import_validatorPrimitives.scheme.PageLocatorHandlerTriggeredEvent = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.PageRouteEvent = (0, import_validatorPrimitives.tObject)({
	  route: (0, import_validatorPrimitives.tChannel)(["Route"])
	});
	import_validatorPrimitives.scheme.PageWebSocketRouteEvent = (0, import_validatorPrimitives.tObject)({
	  webSocketRoute: (0, import_validatorPrimitives.tChannel)(["WebSocketRoute"])
	});
	import_validatorPrimitives.scheme.PageVideoEvent = (0, import_validatorPrimitives.tObject)({
	  artifact: (0, import_validatorPrimitives.tChannel)(["Artifact"])
	});
	import_validatorPrimitives.scheme.PageWebSocketEvent = (0, import_validatorPrimitives.tObject)({
	  webSocket: (0, import_validatorPrimitives.tChannel)(["WebSocket"])
	});
	import_validatorPrimitives.scheme.PageWorkerEvent = (0, import_validatorPrimitives.tObject)({
	  worker: (0, import_validatorPrimitives.tChannel)(["Worker"])
	});
	import_validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageAddInitScriptParams = (0, import_validatorPrimitives.tObject)({
	  source: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.PageAddInitScriptResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageCloseParams = (0, import_validatorPrimitives.tObject)({
	  runBeforeUnload: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.PageCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageEmulateMediaParams = (0, import_validatorPrimitives.tObject)({
	  media: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["screen", "print", "no-override"])),
	  colorScheme: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
	  reducedMotion: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
	  forcedColors: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["active", "none", "no-override"])),
	  contrast: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["no-preference", "more", "no-override"]))
	});
	import_validatorPrimitives.scheme.PageEmulateMediaResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageExposeBindingParams = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  needsHandle: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.PageExposeBindingResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageGoBackParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  waitUntil: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("LifecycleEvent"))
	});
	import_validatorPrimitives.scheme.PageGoBackResult = (0, import_validatorPrimitives.tObject)({
	  response: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Response"]))
	});
	import_validatorPrimitives.scheme.PageGoForwardParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  waitUntil: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("LifecycleEvent"))
	});
	import_validatorPrimitives.scheme.PageGoForwardResult = (0, import_validatorPrimitives.tObject)({
	  response: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Response"]))
	});
	import_validatorPrimitives.scheme.PageRequestGCParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageRequestGCResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageRegisterLocatorHandlerParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  noWaitAfter: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.PageRegisterLocatorHandlerResult = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyParams = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tNumber,
	  remove: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageUnregisterLocatorHandlerParams = (0, import_validatorPrimitives.tObject)({
	  uid: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.PageUnregisterLocatorHandlerResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageReloadParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  waitUntil: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("LifecycleEvent"))
	});
	import_validatorPrimitives.scheme.PageReloadResult = (0, import_validatorPrimitives.tObject)({
	  response: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Response"]))
	});
	import_validatorPrimitives.scheme.PageExpectScreenshotParams = (0, import_validatorPrimitives.tObject)({
	  expected: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	  timeout: import_validatorPrimitives.tNumber,
	  isNot: import_validatorPrimitives.tBoolean,
	  locator: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    frame: (0, import_validatorPrimitives.tChannel)(["Frame"]),
	    selector: import_validatorPrimitives.tString
	  })),
	  comparator: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  maxDiffPixels: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  maxDiffPixelRatio: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  threshold: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  fullPage: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  clip: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Rect")),
	  omitBackground: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  caret: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["hide", "initial"])),
	  animations: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["disabled", "allow"])),
	  scale: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["css", "device"])),
	  mask: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    frame: (0, import_validatorPrimitives.tChannel)(["Frame"]),
	    selector: import_validatorPrimitives.tString
	  }))),
	  maskColor: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  style: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.PageExpectScreenshotResult = (0, import_validatorPrimitives.tObject)({
	  diff: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	  errorMessage: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  actual: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	  previous: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	  timedOut: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  log: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString))
	});
	import_validatorPrimitives.scheme.PageScreenshotParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  type: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["png", "jpeg"])),
	  quality: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  fullPage: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  clip: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Rect")),
	  omitBackground: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  caret: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["hide", "initial"])),
	  animations: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["disabled", "allow"])),
	  scale: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["css", "device"])),
	  mask: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    frame: (0, import_validatorPrimitives.tChannel)(["Frame"]),
	    selector: import_validatorPrimitives.tString
	  }))),
	  maskColor: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  style: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.PageScreenshotResult = (0, import_validatorPrimitives.tObject)({
	  binary: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.PageSetExtraHTTPHeadersParams = (0, import_validatorPrimitives.tObject)({
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))
	});
	import_validatorPrimitives.scheme.PageSetExtraHTTPHeadersResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsParams = (0, import_validatorPrimitives.tObject)({
	  patterns: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    glob: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    regexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    regexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  }))
	});
	import_validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageSetWebSocketInterceptionPatternsParams = (0, import_validatorPrimitives.tObject)({
	  patterns: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    glob: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    regexSource: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    regexFlags: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  }))
	});
	import_validatorPrimitives.scheme.PageSetWebSocketInterceptionPatternsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageSetViewportSizeParams = (0, import_validatorPrimitives.tObject)({
	  viewportSize: (0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })
	});
	import_validatorPrimitives.scheme.PageSetViewportSizeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageKeyboardDownParams = (0, import_validatorPrimitives.tObject)({
	  key: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.PageKeyboardDownResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageKeyboardUpParams = (0, import_validatorPrimitives.tObject)({
	  key: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.PageKeyboardUpResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageKeyboardInsertTextParams = (0, import_validatorPrimitives.tObject)({
	  text: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.PageKeyboardInsertTextResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageKeyboardTypeParams = (0, import_validatorPrimitives.tObject)({
	  text: import_validatorPrimitives.tString,
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.PageKeyboardTypeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageKeyboardPressParams = (0, import_validatorPrimitives.tObject)({
	  key: import_validatorPrimitives.tString,
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.PageKeyboardPressResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageMouseMoveParams = (0, import_validatorPrimitives.tObject)({
	  x: import_validatorPrimitives.tNumber,
	  y: import_validatorPrimitives.tNumber,
	  steps: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.PageMouseMoveResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageMouseDownParams = (0, import_validatorPrimitives.tObject)({
	  button: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["left", "right", "middle"])),
	  clickCount: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.PageMouseDownResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageMouseUpParams = (0, import_validatorPrimitives.tObject)({
	  button: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["left", "right", "middle"])),
	  clickCount: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.PageMouseUpResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageMouseClickParams = (0, import_validatorPrimitives.tObject)({
	  x: import_validatorPrimitives.tNumber,
	  y: import_validatorPrimitives.tNumber,
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  button: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["left", "right", "middle"])),
	  clickCount: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.PageMouseClickResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageMouseWheelParams = (0, import_validatorPrimitives.tObject)({
	  deltaX: import_validatorPrimitives.tNumber,
	  deltaY: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.PageMouseWheelResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageTouchscreenTapParams = (0, import_validatorPrimitives.tObject)({
	  x: import_validatorPrimitives.tNumber,
	  y: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.PageTouchscreenTapResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageAccessibilitySnapshotParams = (0, import_validatorPrimitives.tObject)({
	  interestingOnly: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  root: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))
	});
	import_validatorPrimitives.scheme.PageAccessibilitySnapshotResult = (0, import_validatorPrimitives.tObject)({
	  rootAXNode: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("AXNode"))
	});
	import_validatorPrimitives.scheme.PagePdfParams = (0, import_validatorPrimitives.tObject)({
	  scale: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  displayHeaderFooter: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  headerTemplate: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  footerTemplate: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  printBackground: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  landscape: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  pageRanges: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  format: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  width: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  height: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  preferCSSPageSize: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  margin: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    top: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    bottom: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    left: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    right: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })),
	  tagged: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  outline: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.PagePdfResult = (0, import_validatorPrimitives.tObject)({
	  pdf: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.PageStartJSCoverageParams = (0, import_validatorPrimitives.tObject)({
	  resetOnNavigation: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  reportAnonymousScripts: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.PageStartJSCoverageResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageStopJSCoverageParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageStopJSCoverageResult = (0, import_validatorPrimitives.tObject)({
	  entries: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    url: import_validatorPrimitives.tString,
	    scriptId: import_validatorPrimitives.tString,
	    source: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    functions: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	      functionName: import_validatorPrimitives.tString,
	      isBlockCoverage: import_validatorPrimitives.tBoolean,
	      ranges: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	        startOffset: import_validatorPrimitives.tNumber,
	        endOffset: import_validatorPrimitives.tNumber,
	        count: import_validatorPrimitives.tNumber
	      }))
	    }))
	  }))
	});
	import_validatorPrimitives.scheme.PageStartCSSCoverageParams = (0, import_validatorPrimitives.tObject)({
	  resetOnNavigation: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.PageStartCSSCoverageResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageStopCSSCoverageParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageStopCSSCoverageResult = (0, import_validatorPrimitives.tObject)({
	  entries: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    url: import_validatorPrimitives.tString,
	    text: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    ranges: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	      start: import_validatorPrimitives.tNumber,
	      end: import_validatorPrimitives.tNumber
	    }))
	  }))
	});
	import_validatorPrimitives.scheme.PageBringToFrontParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageBringToFrontResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.PageUpdateSubscriptionParams = (0, import_validatorPrimitives.tObject)({
	  event: (0, import_validatorPrimitives.tEnum)(["console", "dialog", "fileChooser", "request", "response", "requestFinished", "requestFailed"]),
	  enabled: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.PageUpdateSubscriptionResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameInitializer = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString,
	  name: import_validatorPrimitives.tString,
	  parentFrame: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Frame"])),
	  loadStates: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("LifecycleEvent"))
	});
	import_validatorPrimitives.scheme.FrameLoadstateEvent = (0, import_validatorPrimitives.tObject)({
	  add: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("LifecycleEvent")),
	  remove: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("LifecycleEvent"))
	});
	import_validatorPrimitives.scheme.FrameNavigatedEvent = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString,
	  name: import_validatorPrimitives.tString,
	  newDocument: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    request: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Request"]))
	  })),
	  error: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.FrameEvalOnSelectorParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.FrameEvalOnSelectorResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.FrameEvalOnSelectorAllParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.FrameEvalOnSelectorAllResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.FrameAddScriptTagParams = (0, import_validatorPrimitives.tObject)({
	  url: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  content: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  type: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.FrameAddScriptTagResult = (0, import_validatorPrimitives.tObject)({
	  element: (0, import_validatorPrimitives.tChannel)(["ElementHandle"])
	});
	import_validatorPrimitives.scheme.FrameAddStyleTagParams = (0, import_validatorPrimitives.tObject)({
	  url: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  content: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.FrameAddStyleTagResult = (0, import_validatorPrimitives.tObject)({
	  element: (0, import_validatorPrimitives.tChannel)(["ElementHandle"])
	});
	import_validatorPrimitives.scheme.FrameAriaSnapshotParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  ref: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  mode: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["raw", "regex"])),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameAriaSnapshotResult = (0, import_validatorPrimitives.tObject)({
	  snapshot: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameBlurParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameBlurResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameCheckParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameCheckResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameClickParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  noWaitAfter: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modifiers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  button: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["left", "right", "middle"])),
	  clickCount: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameClickResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameContentParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameContentResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameDragAndDropParams = (0, import_validatorPrimitives.tObject)({
	  source: import_validatorPrimitives.tString,
	  target: import_validatorPrimitives.tString,
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  sourcePosition: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  targetPosition: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameDragAndDropResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameDblclickParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modifiers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  button: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["left", "right", "middle"])),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameDblclickResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameDispatchEventParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  type: import_validatorPrimitives.tString,
	  eventInit: (0, import_validatorPrimitives.tType)("SerializedArgument"),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameDispatchEventResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameEvaluateExpressionParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.FrameEvaluateExpressionResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.FrameEvaluateExpressionHandleParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.FrameEvaluateExpressionHandleResult = (0, import_validatorPrimitives.tObject)({
	  handle: (0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
	});
	import_validatorPrimitives.scheme.FrameFillParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  value: import_validatorPrimitives.tString,
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameFillResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameFocusParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameFocusResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameFrameElementParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameFrameElementResult = (0, import_validatorPrimitives.tObject)({
	  element: (0, import_validatorPrimitives.tChannel)(["ElementHandle"])
	});
	import_validatorPrimitives.scheme.FrameHighlightParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameHighlightResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameGetAttributeParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  name: import_validatorPrimitives.tString,
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameGetAttributeResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.FrameGotoParams = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString,
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  waitUntil: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("LifecycleEvent")),
	  referer: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.FrameGotoResult = (0, import_validatorPrimitives.tObject)({
	  response: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Response"]))
	});
	import_validatorPrimitives.scheme.FrameHoverParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modifiers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameHoverResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameInnerHTMLParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameInnerHTMLResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameInnerTextParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameInnerTextResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameInputValueParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameInputValueResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameIsCheckedParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameIsCheckedResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.FrameIsDisabledParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameIsDisabledResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.FrameIsEnabledParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameIsEnabledResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.FrameIsHiddenParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameIsHiddenResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.FrameIsVisibleParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameIsVisibleResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.FrameIsEditableParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameIsEditableResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.FramePressParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  key: import_validatorPrimitives.tString,
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  noWaitAfter: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FramePressResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameQuerySelectorParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameQuerySelectorResult = (0, import_validatorPrimitives.tObject)({
	  element: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))
	});
	import_validatorPrimitives.scheme.FrameQuerySelectorAllParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameQuerySelectorAllResult = (0, import_validatorPrimitives.tObject)({
	  elements: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))
	});
	import_validatorPrimitives.scheme.FrameQueryCountParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameQueryCountResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.FrameSelectOptionParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  elements: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))),
	  options: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    valueOrLabel: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    label: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    index: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  }))),
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameSelectOptionResult = (0, import_validatorPrimitives.tObject)({
	  values: (0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.FrameSetContentParams = (0, import_validatorPrimitives.tObject)({
	  html: import_validatorPrimitives.tString,
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  waitUntil: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("LifecycleEvent"))
	});
	import_validatorPrimitives.scheme.FrameSetContentResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameSetInputFilesParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  payloads: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    name: import_validatorPrimitives.tString,
	    mimeType: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    buffer: import_validatorPrimitives.tBinary
	  }))),
	  localDirectory: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  directoryStream: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["WritableStream"])),
	  localPaths: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  streams: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["WritableStream"]))),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameSetInputFilesResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameTapParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modifiers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameTapResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameTextContentParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameTextContentResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.FrameTitleParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameTitleResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.FrameTypeParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  text: import_validatorPrimitives.tString,
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameTypeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameUncheckParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameUncheckResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameWaitForTimeoutParams = (0, import_validatorPrimitives.tObject)({
	  timeout: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.FrameWaitForTimeoutResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.FrameWaitForFunctionParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument"),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  pollingInterval: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.FrameWaitForFunctionResult = (0, import_validatorPrimitives.tObject)({
	  handle: (0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
	});
	import_validatorPrimitives.scheme.FrameWaitForSelectorParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  state: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"])),
	  omitReturnValue: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.FrameWaitForSelectorResult = (0, import_validatorPrimitives.tObject)({
	  element: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))
	});
	import_validatorPrimitives.scheme.FrameExpectParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  expression: import_validatorPrimitives.tString,
	  expressionArg: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny),
	  expectedText: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("ExpectedTextValue"))),
	  expectedNumber: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  expectedValue: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("SerializedArgument")),
	  useInnerText: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  isNot: import_validatorPrimitives.tBoolean,
	  timeout: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.FrameExpectResult = (0, import_validatorPrimitives.tObject)({
	  matches: import_validatorPrimitives.tBoolean,
	  received: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("SerializedValue")),
	  timedOut: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  log: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString))
	});
	import_validatorPrimitives.scheme.WorkerInitializer = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.WorkerCloseEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WorkerEvaluateExpressionParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.WorkerEvaluateExpressionResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.WorkerEvaluateExpressionHandleParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.WorkerEvaluateExpressionHandleResult = (0, import_validatorPrimitives.tObject)({
	  handle: (0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
	});
	import_validatorPrimitives.scheme.JSHandleInitializer = (0, import_validatorPrimitives.tObject)({
	  preview: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.JSHandlePreviewUpdatedEvent = (0, import_validatorPrimitives.tObject)({
	  preview: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ElementHandlePreviewUpdatedEvent = (0, import_validatorPrimitives.tType)("JSHandlePreviewUpdatedEvent");
	import_validatorPrimitives.scheme.JSHandleDisposeParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleDisposeParams = (0, import_validatorPrimitives.tType)("JSHandleDisposeParams");
	import_validatorPrimitives.scheme.JSHandleDisposeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleDisposeResult = (0, import_validatorPrimitives.tType)("JSHandleDisposeResult");
	import_validatorPrimitives.scheme.JSHandleEvaluateExpressionParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.ElementHandleEvaluateExpressionParams = (0, import_validatorPrimitives.tType)("JSHandleEvaluateExpressionParams");
	import_validatorPrimitives.scheme.JSHandleEvaluateExpressionResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.ElementHandleEvaluateExpressionResult = (0, import_validatorPrimitives.tType)("JSHandleEvaluateExpressionResult");
	import_validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleParams = (0, import_validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleParams");
	import_validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleResult = (0, import_validatorPrimitives.tObject)({
	  handle: (0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
	});
	import_validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleResult = (0, import_validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleResult");
	import_validatorPrimitives.scheme.JSHandleGetPropertyListParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleGetPropertyListParams = (0, import_validatorPrimitives.tType)("JSHandleGetPropertyListParams");
	import_validatorPrimitives.scheme.JSHandleGetPropertyListResult = (0, import_validatorPrimitives.tObject)({
	  properties: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    name: import_validatorPrimitives.tString,
	    value: (0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
	  }))
	});
	import_validatorPrimitives.scheme.ElementHandleGetPropertyListResult = (0, import_validatorPrimitives.tType)("JSHandleGetPropertyListResult");
	import_validatorPrimitives.scheme.JSHandleGetPropertyParams = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ElementHandleGetPropertyParams = (0, import_validatorPrimitives.tType)("JSHandleGetPropertyParams");
	import_validatorPrimitives.scheme.JSHandleGetPropertyResult = (0, import_validatorPrimitives.tObject)({
	  handle: (0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
	});
	import_validatorPrimitives.scheme.ElementHandleGetPropertyResult = (0, import_validatorPrimitives.tType)("JSHandleGetPropertyResult");
	import_validatorPrimitives.scheme.JSHandleJsonValueParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleJsonValueParams = (0, import_validatorPrimitives.tType)("JSHandleJsonValueParams");
	import_validatorPrimitives.scheme.JSHandleJsonValueResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.ElementHandleJsonValueResult = (0, import_validatorPrimitives.tType)("JSHandleJsonValueResult");
	import_validatorPrimitives.scheme.ElementHandleInitializer = (0, import_validatorPrimitives.tObject)({
	  preview: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ElementHandleEvalOnSelectorParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.ElementHandleEvalOnSelectorResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.ElementHandleBoundingBoxParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleBoundingBoxResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Rect"))
	});
	import_validatorPrimitives.scheme.ElementHandleCheckParams = (0, import_validatorPrimitives.tObject)({
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.ElementHandleCheckResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleClickParams = (0, import_validatorPrimitives.tObject)({
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  noWaitAfter: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modifiers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  button: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["left", "right", "middle"])),
	  clickCount: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.ElementHandleClickResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleContentFrameParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleContentFrameResult = (0, import_validatorPrimitives.tObject)({
	  frame: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Frame"]))
	});
	import_validatorPrimitives.scheme.ElementHandleDblclickParams = (0, import_validatorPrimitives.tObject)({
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modifiers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  button: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["left", "right", "middle"])),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.ElementHandleDblclickResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleDispatchEventParams = (0, import_validatorPrimitives.tObject)({
	  type: import_validatorPrimitives.tString,
	  eventInit: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.ElementHandleDispatchEventResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleFillParams = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString,
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.ElementHandleFillResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleFocusParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleFocusResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleGenerateLocatorStringParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleGenerateLocatorStringResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.ElementHandleGetAttributeParams = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ElementHandleGetAttributeResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.ElementHandleHoverParams = (0, import_validatorPrimitives.tObject)({
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modifiers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.ElementHandleHoverResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleInnerHTMLParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleInnerHTMLResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ElementHandleInnerTextParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleInnerTextResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ElementHandleInputValueParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleInputValueResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ElementHandleIsCheckedParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleIsCheckedResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.ElementHandleIsDisabledParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleIsDisabledResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.ElementHandleIsEditableParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleIsEditableResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.ElementHandleIsEnabledParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleIsEnabledResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.ElementHandleIsHiddenParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleIsHiddenResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.ElementHandleIsVisibleParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleIsVisibleResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.ElementHandleOwnerFrameParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleOwnerFrameResult = (0, import_validatorPrimitives.tObject)({
	  frame: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Frame"]))
	});
	import_validatorPrimitives.scheme.ElementHandlePressParams = (0, import_validatorPrimitives.tObject)({
	  key: import_validatorPrimitives.tString,
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  noWaitAfter: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.ElementHandlePressResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleQuerySelectorParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.ElementHandleQuerySelectorResult = (0, import_validatorPrimitives.tObject)({
	  element: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))
	});
	import_validatorPrimitives.scheme.ElementHandleQuerySelectorAllParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ElementHandleQuerySelectorAllResult = (0, import_validatorPrimitives.tObject)({
	  elements: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))
	});
	import_validatorPrimitives.scheme.ElementHandleScreenshotParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  type: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["png", "jpeg"])),
	  quality: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  omitBackground: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  caret: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["hide", "initial"])),
	  animations: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["disabled", "allow"])),
	  scale: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["css", "device"])),
	  mask: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    frame: (0, import_validatorPrimitives.tChannel)(["Frame"]),
	    selector: import_validatorPrimitives.tString
	  }))),
	  maskColor: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  style: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.ElementHandleScreenshotResult = (0, import_validatorPrimitives.tObject)({
	  binary: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededParams = (0, import_validatorPrimitives.tObject)({
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleSelectOptionParams = (0, import_validatorPrimitives.tObject)({
	  elements: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))),
	  options: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    valueOrLabel: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    label: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    index: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  }))),
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.ElementHandleSelectOptionResult = (0, import_validatorPrimitives.tObject)({
	  values: (0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.ElementHandleSelectTextParams = (0, import_validatorPrimitives.tObject)({
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.ElementHandleSelectTextResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleSetInputFilesParams = (0, import_validatorPrimitives.tObject)({
	  payloads: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    name: import_validatorPrimitives.tString,
	    mimeType: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    buffer: import_validatorPrimitives.tBinary
	  }))),
	  localDirectory: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  directoryStream: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["WritableStream"])),
	  localPaths: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  streams: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["WritableStream"]))),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.ElementHandleSetInputFilesResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleTapParams = (0, import_validatorPrimitives.tObject)({
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  modifiers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.ElementHandleTapResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleTextContentParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleTextContentResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.ElementHandleTypeParams = (0, import_validatorPrimitives.tObject)({
	  text: import_validatorPrimitives.tString,
	  delay: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.ElementHandleTypeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleUncheckParams = (0, import_validatorPrimitives.tObject)({
	  force: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  position: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("Point")),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  trial: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.ElementHandleUncheckResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleWaitForElementStateParams = (0, import_validatorPrimitives.tObject)({
	  state: (0, import_validatorPrimitives.tEnum)(["visible", "hidden", "stable", "enabled", "disabled", "editable"]),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.ElementHandleWaitForElementStateResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElementHandleWaitForSelectorParams = (0, import_validatorPrimitives.tObject)({
	  selector: import_validatorPrimitives.tString,
	  strict: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  state: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"]))
	});
	import_validatorPrimitives.scheme.ElementHandleWaitForSelectorResult = (0, import_validatorPrimitives.tObject)({
	  element: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["ElementHandle"]))
	});
	import_validatorPrimitives.scheme.RequestInitializer = (0, import_validatorPrimitives.tObject)({
	  frame: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Frame"])),
	  serviceWorker: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Worker"])),
	  url: import_validatorPrimitives.tString,
	  resourceType: import_validatorPrimitives.tString,
	  method: import_validatorPrimitives.tString,
	  postData: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue")),
	  isNavigationRequest: import_validatorPrimitives.tBoolean,
	  redirectedFrom: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Request"]))
	});
	import_validatorPrimitives.scheme.RequestResponseParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.RequestResponseResult = (0, import_validatorPrimitives.tObject)({
	  response: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Response"]))
	});
	import_validatorPrimitives.scheme.RequestRawRequestHeadersParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.RequestRawRequestHeadersResult = (0, import_validatorPrimitives.tObject)({
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))
	});
	import_validatorPrimitives.scheme.RouteInitializer = (0, import_validatorPrimitives.tObject)({
	  request: (0, import_validatorPrimitives.tChannel)(["Request"])
	});
	import_validatorPrimitives.scheme.RouteRedirectNavigationRequestParams = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.RouteRedirectNavigationRequestResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.RouteAbortParams = (0, import_validatorPrimitives.tObject)({
	  errorCode: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.RouteAbortResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.RouteContinueParams = (0, import_validatorPrimitives.tObject)({
	  url: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  method: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  headers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  postData: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	  isFallback: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.RouteContinueResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.RouteFulfillParams = (0, import_validatorPrimitives.tObject)({
	  status: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  headers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  body: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  isBase64: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  fetchResponseUid: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.RouteFulfillResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketRouteInitializer = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.WebSocketRouteMessageFromPageEvent = (0, import_validatorPrimitives.tObject)({
	  message: import_validatorPrimitives.tString,
	  isBase64: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.WebSocketRouteMessageFromServerEvent = (0, import_validatorPrimitives.tObject)({
	  message: import_validatorPrimitives.tString,
	  isBase64: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.WebSocketRouteClosePageEvent = (0, import_validatorPrimitives.tObject)({
	  code: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  wasClean: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.WebSocketRouteCloseServerEvent = (0, import_validatorPrimitives.tObject)({
	  code: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  wasClean: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.WebSocketRouteConnectParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketRouteConnectResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketRouteEnsureOpenedParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketRouteEnsureOpenedResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketRouteSendToPageParams = (0, import_validatorPrimitives.tObject)({
	  message: import_validatorPrimitives.tString,
	  isBase64: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.WebSocketRouteSendToPageResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketRouteSendToServerParams = (0, import_validatorPrimitives.tObject)({
	  message: import_validatorPrimitives.tString,
	  isBase64: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.WebSocketRouteSendToServerResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketRouteClosePageParams = (0, import_validatorPrimitives.tObject)({
	  code: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  wasClean: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.WebSocketRouteClosePageResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketRouteCloseServerParams = (0, import_validatorPrimitives.tObject)({
	  code: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  wasClean: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.WebSocketRouteCloseServerResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ResourceTiming = (0, import_validatorPrimitives.tObject)({
	  startTime: import_validatorPrimitives.tNumber,
	  domainLookupStart: import_validatorPrimitives.tNumber,
	  domainLookupEnd: import_validatorPrimitives.tNumber,
	  connectStart: import_validatorPrimitives.tNumber,
	  secureConnectionStart: import_validatorPrimitives.tNumber,
	  connectEnd: import_validatorPrimitives.tNumber,
	  requestStart: import_validatorPrimitives.tNumber,
	  responseStart: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.ResponseInitializer = (0, import_validatorPrimitives.tObject)({
	  request: (0, import_validatorPrimitives.tChannel)(["Request"]),
	  url: import_validatorPrimitives.tString,
	  status: import_validatorPrimitives.tNumber,
	  statusText: import_validatorPrimitives.tString,
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue")),
	  timing: (0, import_validatorPrimitives.tType)("ResourceTiming"),
	  fromServiceWorker: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.ResponseBodyParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ResponseBodyResult = (0, import_validatorPrimitives.tObject)({
	  binary: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.ResponseSecurityDetailsParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ResponseSecurityDetailsResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("SecurityDetails"))
	});
	import_validatorPrimitives.scheme.ResponseServerAddrParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ResponseServerAddrResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("RemoteAddr"))
	});
	import_validatorPrimitives.scheme.ResponseRawResponseHeadersParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ResponseRawResponseHeadersResult = (0, import_validatorPrimitives.tObject)({
	  headers: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))
	});
	import_validatorPrimitives.scheme.ResponseSizesParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ResponseSizesResult = (0, import_validatorPrimitives.tObject)({
	  sizes: (0, import_validatorPrimitives.tType)("RequestSizes")
	});
	import_validatorPrimitives.scheme.SecurityDetails = (0, import_validatorPrimitives.tObject)({
	  issuer: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  protocol: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  subjectName: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  validFrom: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  validTo: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.RequestSizes = (0, import_validatorPrimitives.tObject)({
	  requestBodySize: import_validatorPrimitives.tNumber,
	  requestHeadersSize: import_validatorPrimitives.tNumber,
	  responseBodySize: import_validatorPrimitives.tNumber,
	  responseHeadersSize: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.RemoteAddr = (0, import_validatorPrimitives.tObject)({
	  ipAddress: import_validatorPrimitives.tString,
	  port: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.WebSocketInitializer = (0, import_validatorPrimitives.tObject)({
	  url: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.WebSocketOpenEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WebSocketFrameSentEvent = (0, import_validatorPrimitives.tObject)({
	  opcode: import_validatorPrimitives.tNumber,
	  data: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.WebSocketFrameReceivedEvent = (0, import_validatorPrimitives.tObject)({
	  opcode: import_validatorPrimitives.tNumber,
	  data: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.WebSocketSocketErrorEvent = (0, import_validatorPrimitives.tObject)({
	  error: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.WebSocketCloseEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BindingCallInitializer = (0, import_validatorPrimitives.tObject)({
	  frame: (0, import_validatorPrimitives.tChannel)(["Frame"]),
	  name: import_validatorPrimitives.tString,
	  args: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("SerializedValue"))),
	  handle: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"]))
	});
	import_validatorPrimitives.scheme.BindingCallRejectParams = (0, import_validatorPrimitives.tObject)({
	  error: (0, import_validatorPrimitives.tType)("SerializedError")
	});
	import_validatorPrimitives.scheme.BindingCallRejectResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.BindingCallResolveParams = (0, import_validatorPrimitives.tObject)({
	  result: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.BindingCallResolveResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DialogInitializer = (0, import_validatorPrimitives.tObject)({
	  page: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Page"])),
	  type: import_validatorPrimitives.tString,
	  message: import_validatorPrimitives.tString,
	  defaultValue: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.DialogAcceptParams = (0, import_validatorPrimitives.tObject)({
	  promptText: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.DialogAcceptResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DialogDismissParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.DialogDismissResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.TracingInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.TracingTracingStartParams = (0, import_validatorPrimitives.tObject)({
	  name: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  snapshots: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  screenshots: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  live: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.TracingTracingStartResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.TracingTracingStartChunkParams = (0, import_validatorPrimitives.tObject)({
	  name: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  title: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.TracingTracingStartChunkResult = (0, import_validatorPrimitives.tObject)({
	  traceName: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.TracingTracingGroupParams = (0, import_validatorPrimitives.tObject)({
	  name: import_validatorPrimitives.tString,
	  location: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    file: import_validatorPrimitives.tString,
	    line: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	    column: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  }))
	});
	import_validatorPrimitives.scheme.TracingTracingGroupResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.TracingTracingGroupEndParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.TracingTracingGroupEndResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.TracingTracingStopChunkParams = (0, import_validatorPrimitives.tObject)({
	  mode: (0, import_validatorPrimitives.tEnum)(["archive", "discard", "entries"])
	});
	import_validatorPrimitives.scheme.TracingTracingStopChunkResult = (0, import_validatorPrimitives.tObject)({
	  artifact: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tChannel)(["Artifact"])),
	  entries: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue")))
	});
	import_validatorPrimitives.scheme.TracingTracingStopParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.TracingTracingStopResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactInitializer = (0, import_validatorPrimitives.tObject)({
	  absolutePath: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ArtifactPathAfterFinishedParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactPathAfterFinishedResult = (0, import_validatorPrimitives.tObject)({
	  value: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ArtifactSaveAsParams = (0, import_validatorPrimitives.tObject)({
	  path: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.ArtifactSaveAsResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactSaveAsStreamParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactSaveAsStreamResult = (0, import_validatorPrimitives.tObject)({
	  stream: (0, import_validatorPrimitives.tChannel)(["Stream"])
	});
	import_validatorPrimitives.scheme.ArtifactFailureParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactFailureResult = (0, import_validatorPrimitives.tObject)({
	  error: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.ArtifactStreamParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactStreamResult = (0, import_validatorPrimitives.tObject)({
	  stream: (0, import_validatorPrimitives.tChannel)(["Stream"])
	});
	import_validatorPrimitives.scheme.ArtifactCancelParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactCancelResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactDeleteParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ArtifactDeleteResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.StreamInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.StreamReadParams = (0, import_validatorPrimitives.tObject)({
	  size: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.StreamReadResult = (0, import_validatorPrimitives.tObject)({
	  binary: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.StreamCloseParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.StreamCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WritableStreamInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WritableStreamWriteParams = (0, import_validatorPrimitives.tObject)({
	  binary: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.WritableStreamWriteResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WritableStreamCloseParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.WritableStreamCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.CDPSessionInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.CDPSessionEventEvent = (0, import_validatorPrimitives.tObject)({
	  method: import_validatorPrimitives.tString,
	  params: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny)
	});
	import_validatorPrimitives.scheme.CDPSessionSendParams = (0, import_validatorPrimitives.tObject)({
	  method: import_validatorPrimitives.tString,
	  params: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tAny)
	});
	import_validatorPrimitives.scheme.CDPSessionSendResult = (0, import_validatorPrimitives.tObject)({
	  result: import_validatorPrimitives.tAny
	});
	import_validatorPrimitives.scheme.CDPSessionDetachParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.CDPSessionDetachResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElectronInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElectronLaunchParams = (0, import_validatorPrimitives.tObject)({
	  executablePath: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  args: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  cwd: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  env: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  acceptDownloads: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
	  bypassCSP: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  colorScheme: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
	  extraHTTPHeaders: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  geolocation: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    longitude: import_validatorPrimitives.tNumber,
	    latitude: import_validatorPrimitives.tNumber,
	    accuracy: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  })),
	  httpCredentials: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    username: import_validatorPrimitives.tString,
	    password: import_validatorPrimitives.tString,
	    origin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  })),
	  ignoreHTTPSErrors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  locale: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  offline: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  recordHar: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("RecordHarOptions")),
	  recordVideo: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    dir: import_validatorPrimitives.tString,
	    size: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	      width: import_validatorPrimitives.tNumber,
	      height: import_validatorPrimitives.tNumber
	    }))
	  })),
	  strictSelectors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  timezoneId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  tracesDir: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.ElectronLaunchResult = (0, import_validatorPrimitives.tObject)({
	  electronApplication: (0, import_validatorPrimitives.tChannel)(["ElectronApplication"])
	});
	import_validatorPrimitives.scheme.ElectronApplicationInitializer = (0, import_validatorPrimitives.tObject)({
	  context: (0, import_validatorPrimitives.tChannel)(["BrowserContext"])
	});
	import_validatorPrimitives.scheme.ElectronApplicationCloseEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.ElectronApplicationConsoleEvent = (0, import_validatorPrimitives.tObject)({
	  type: import_validatorPrimitives.tString,
	  text: import_validatorPrimitives.tString,
	  args: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
	  location: (0, import_validatorPrimitives.tObject)({
	    url: import_validatorPrimitives.tString,
	    lineNumber: import_validatorPrimitives.tNumber,
	    columnNumber: import_validatorPrimitives.tNumber
	  })
	});
	import_validatorPrimitives.scheme.ElectronApplicationBrowserWindowParams = (0, import_validatorPrimitives.tObject)({
	  page: (0, import_validatorPrimitives.tChannel)(["Page"])
	});
	import_validatorPrimitives.scheme.ElectronApplicationBrowserWindowResult = (0, import_validatorPrimitives.tObject)({
	  handle: (0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
	});
	import_validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionResult = (0, import_validatorPrimitives.tObject)({
	  value: (0, import_validatorPrimitives.tType)("SerializedValue")
	});
	import_validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleParams = (0, import_validatorPrimitives.tObject)({
	  expression: import_validatorPrimitives.tString,
	  isFunction: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  arg: (0, import_validatorPrimitives.tType)("SerializedArgument")
	});
	import_validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleResult = (0, import_validatorPrimitives.tObject)({
	  handle: (0, import_validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
	});
	import_validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionParams = (0, import_validatorPrimitives.tObject)({
	  event: (0, import_validatorPrimitives.tEnum)(["console"]),
	  enabled: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDevicesParams = (0, import_validatorPrimitives.tObject)({
	  host: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  port: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  omitDriverInstall: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean)
	});
	import_validatorPrimitives.scheme.AndroidDevicesResult = (0, import_validatorPrimitives.tObject)({
	  devices: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tChannel)(["AndroidDevice"]))
	});
	import_validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyParams = (0, import_validatorPrimitives.tObject)({
	  timeout: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidSocketInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidSocketDataEvent = (0, import_validatorPrimitives.tObject)({
	  data: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.AndroidSocketCloseEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidSocketWriteParams = (0, import_validatorPrimitives.tObject)({
	  data: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.AndroidSocketWriteResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidSocketCloseParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidSocketCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceInitializer = (0, import_validatorPrimitives.tObject)({
	  model: import_validatorPrimitives.tString,
	  serial: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.AndroidDeviceCloseEvent = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceWebViewAddedEvent = (0, import_validatorPrimitives.tObject)({
	  webView: (0, import_validatorPrimitives.tType)("AndroidWebView")
	});
	import_validatorPrimitives.scheme.AndroidDeviceWebViewRemovedEvent = (0, import_validatorPrimitives.tObject)({
	  socketName: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.AndroidDeviceWaitParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  state: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["gone"])),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDeviceWaitResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceFillParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  text: import_validatorPrimitives.tString,
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDeviceFillResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceTapParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  duration: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDeviceTapResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceDragParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  dest: (0, import_validatorPrimitives.tType)("Point"),
	  speed: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDeviceDragResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceFlingParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  direction: (0, import_validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
	  speed: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDeviceFlingResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceLongTapParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDeviceLongTapResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDevicePinchCloseParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  percent: import_validatorPrimitives.tNumber,
	  speed: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDevicePinchCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDevicePinchOpenParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  percent: import_validatorPrimitives.tNumber,
	  speed: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDevicePinchOpenResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceScrollParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  direction: (0, import_validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
	  percent: import_validatorPrimitives.tNumber,
	  speed: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDeviceScrollResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceSwipeParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	  direction: (0, import_validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
	  percent: import_validatorPrimitives.tNumber,
	  speed: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  timeout: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDeviceSwipeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceInfoParams = (0, import_validatorPrimitives.tObject)({
	  selector: (0, import_validatorPrimitives.tType)("AndroidSelector")
	});
	import_validatorPrimitives.scheme.AndroidDeviceInfoResult = (0, import_validatorPrimitives.tObject)({
	  info: (0, import_validatorPrimitives.tType)("AndroidElementInfo")
	});
	import_validatorPrimitives.scheme.AndroidDeviceScreenshotParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceScreenshotResult = (0, import_validatorPrimitives.tObject)({
	  binary: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.AndroidDeviceInputTypeParams = (0, import_validatorPrimitives.tObject)({
	  text: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.AndroidDeviceInputTypeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceInputPressParams = (0, import_validatorPrimitives.tObject)({
	  key: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.AndroidDeviceInputPressResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceInputTapParams = (0, import_validatorPrimitives.tObject)({
	  point: (0, import_validatorPrimitives.tType)("Point")
	});
	import_validatorPrimitives.scheme.AndroidDeviceInputTapResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceInputSwipeParams = (0, import_validatorPrimitives.tObject)({
	  segments: (0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("Point")),
	  steps: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.AndroidDeviceInputSwipeResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceInputDragParams = (0, import_validatorPrimitives.tObject)({
	  from: (0, import_validatorPrimitives.tType)("Point"),
	  to: (0, import_validatorPrimitives.tType)("Point"),
	  steps: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.AndroidDeviceInputDragResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceLaunchBrowserParams = (0, import_validatorPrimitives.tObject)({
	  noDefaultViewport: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  viewport: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  screen: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    width: import_validatorPrimitives.tNumber,
	    height: import_validatorPrimitives.tNumber
	  })),
	  ignoreHTTPSErrors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  clientCertificates: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tObject)({
	    origin: import_validatorPrimitives.tString,
	    cert: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    key: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary),
	    passphrase: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    pfx: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBinary)
	  }))),
	  javaScriptEnabled: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  bypassCSP: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  userAgent: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  locale: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  timezoneId: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  geolocation: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    longitude: import_validatorPrimitives.tNumber,
	    latitude: import_validatorPrimitives.tNumber,
	    accuracy: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  })),
	  permissions: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  extraHTTPHeaders: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("NameValue"))),
	  offline: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  httpCredentials: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    username: import_validatorPrimitives.tString,
	    password: import_validatorPrimitives.tString,
	    origin: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    send: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["always", "unauthorized"]))
	  })),
	  deviceScaleFactor: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  isMobile: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  hasTouch: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  colorScheme: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
	  reducedMotion: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
	  forcedColors: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["active", "none", "no-override"])),
	  acceptDownloads: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
	  contrast: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["no-preference", "more", "no-override"])),
	  baseURL: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  recordVideo: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    dir: import_validatorPrimitives.tString,
	    size: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	      width: import_validatorPrimitives.tNumber,
	      height: import_validatorPrimitives.tNumber
	    }))
	  })),
	  recordHar: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tType)("RecordHarOptions")),
	  strictSelectors: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  serviceWorkers: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tEnum)(["allow", "block"])),
	  pkg: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  args: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString)),
	  proxy: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    server: import_validatorPrimitives.tString,
	    bypass: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    username: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	    password: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	  }))
	});
	import_validatorPrimitives.scheme.AndroidDeviceLaunchBrowserResult = (0, import_validatorPrimitives.tObject)({
	  context: (0, import_validatorPrimitives.tChannel)(["BrowserContext"])
	});
	import_validatorPrimitives.scheme.AndroidDeviceOpenParams = (0, import_validatorPrimitives.tObject)({
	  command: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.AndroidDeviceOpenResult = (0, import_validatorPrimitives.tObject)({
	  socket: (0, import_validatorPrimitives.tChannel)(["AndroidSocket"])
	});
	import_validatorPrimitives.scheme.AndroidDeviceShellParams = (0, import_validatorPrimitives.tObject)({
	  command: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.AndroidDeviceShellResult = (0, import_validatorPrimitives.tObject)({
	  result: import_validatorPrimitives.tBinary
	});
	import_validatorPrimitives.scheme.AndroidDeviceInstallApkParams = (0, import_validatorPrimitives.tObject)({
	  file: import_validatorPrimitives.tBinary,
	  args: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)(import_validatorPrimitives.tString))
	});
	import_validatorPrimitives.scheme.AndroidDeviceInstallApkResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDevicePushParams = (0, import_validatorPrimitives.tObject)({
	  file: import_validatorPrimitives.tBinary,
	  path: import_validatorPrimitives.tString,
	  mode: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	});
	import_validatorPrimitives.scheme.AndroidDevicePushResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyParams = (0, import_validatorPrimitives.tObject)({
	  timeout: import_validatorPrimitives.tNumber
	});
	import_validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceConnectToWebViewParams = (0, import_validatorPrimitives.tObject)({
	  socketName: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.AndroidDeviceConnectToWebViewResult = (0, import_validatorPrimitives.tObject)({
	  context: (0, import_validatorPrimitives.tChannel)(["BrowserContext"])
	});
	import_validatorPrimitives.scheme.AndroidDeviceCloseParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidDeviceCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.AndroidWebView = (0, import_validatorPrimitives.tObject)({
	  pid: import_validatorPrimitives.tNumber,
	  pkg: import_validatorPrimitives.tString,
	  socketName: import_validatorPrimitives.tString
	});
	import_validatorPrimitives.scheme.AndroidSelector = (0, import_validatorPrimitives.tObject)({
	  checkable: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  checked: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  clazz: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  clickable: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  depth: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber),
	  desc: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  enabled: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  focusable: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  focused: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  hasChild: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    selector: (0, import_validatorPrimitives.tType)("AndroidSelector")
	  })),
	  hasDescendant: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({
	    selector: (0, import_validatorPrimitives.tType)("AndroidSelector"),
	    maxDepth: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tNumber)
	  })),
	  longClickable: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  pkg: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  res: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString),
	  scrollable: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  selected: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tBoolean),
	  text: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.AndroidElementInfo = (0, import_validatorPrimitives.tObject)({
	  children: (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tArray)((0, import_validatorPrimitives.tType)("AndroidElementInfo"))),
	  clazz: import_validatorPrimitives.tString,
	  desc: import_validatorPrimitives.tString,
	  res: import_validatorPrimitives.tString,
	  pkg: import_validatorPrimitives.tString,
	  text: import_validatorPrimitives.tString,
	  bounds: (0, import_validatorPrimitives.tType)("Rect"),
	  checkable: import_validatorPrimitives.tBoolean,
	  checked: import_validatorPrimitives.tBoolean,
	  clickable: import_validatorPrimitives.tBoolean,
	  enabled: import_validatorPrimitives.tBoolean,
	  focusable: import_validatorPrimitives.tBoolean,
	  focused: import_validatorPrimitives.tBoolean,
	  longClickable: import_validatorPrimitives.tBoolean,
	  scrollable: import_validatorPrimitives.tBoolean,
	  selected: import_validatorPrimitives.tBoolean
	});
	import_validatorPrimitives.scheme.JsonPipeInitializer = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.JsonPipeMessageEvent = (0, import_validatorPrimitives.tObject)({
	  message: import_validatorPrimitives.tAny
	});
	import_validatorPrimitives.scheme.JsonPipeClosedEvent = (0, import_validatorPrimitives.tObject)({
	  reason: (0, import_validatorPrimitives.tOptional)(import_validatorPrimitives.tString)
	});
	import_validatorPrimitives.scheme.JsonPipeSendParams = (0, import_validatorPrimitives.tObject)({
	  message: import_validatorPrimitives.tAny
	});
	import_validatorPrimitives.scheme.JsonPipeSendResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.JsonPipeCloseParams = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	import_validatorPrimitives.scheme.JsonPipeCloseResult = (0, import_validatorPrimitives.tOptional)((0, import_validatorPrimitives.tObject)({}));
	return validator;
}

var serializers;
var hasRequiredSerializers;

function requireSerializers () {
	if (hasRequiredSerializers) return serializers;
	hasRequiredSerializers = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var serializers_exports = {};
	__export(serializers_exports, {
	  parseSerializedValue: () => parseSerializedValue,
	  serializeValue: () => serializeValue
	});
	serializers = __toCommonJS(serializers_exports);
	function parseSerializedValue(value, handles) {
	  return innerParseSerializedValue(value, handles, /* @__PURE__ */ new Map(), []);
	}
	function innerParseSerializedValue(value, handles, refs, accessChain) {
	  if (value.ref !== void 0)
	    return refs.get(value.ref);
	  if (value.n !== void 0)
	    return value.n;
	  if (value.s !== void 0)
	    return value.s;
	  if (value.b !== void 0)
	    return value.b;
	  if (value.v !== void 0) {
	    if (value.v === "undefined")
	      return void 0;
	    if (value.v === "null")
	      return null;
	    if (value.v === "NaN")
	      return NaN;
	    if (value.v === "Infinity")
	      return Infinity;
	    if (value.v === "-Infinity")
	      return -Infinity;
	    if (value.v === "-0")
	      return -0;
	  }
	  if (value.d !== void 0)
	    return new Date(value.d);
	  if (value.u !== void 0)
	    return new URL(value.u);
	  if (value.bi !== void 0)
	    return BigInt(value.bi);
	  if (value.e !== void 0) {
	    const error = new Error(value.e.m);
	    error.name = value.e.n;
	    error.stack = value.e.s;
	    return error;
	  }
	  if (value.r !== void 0)
	    return new RegExp(value.r.p, value.r.f);
	  if (value.ta !== void 0) {
	    const ctor = typedArrayKindToConstructor[value.ta.k];
	    return new ctor(value.ta.b.buffer, value.ta.b.byteOffset, value.ta.b.length / ctor.BYTES_PER_ELEMENT);
	  }
	  if (value.a !== void 0) {
	    const result = [];
	    refs.set(value.id, result);
	    for (let i = 0; i < value.a.length; i++)
	      result.push(innerParseSerializedValue(value.a[i], handles, refs, [...accessChain, i]));
	    return result;
	  }
	  if (value.o !== void 0) {
	    const result = {};
	    refs.set(value.id, result);
	    for (const { k, v } of value.o)
	      result[k] = innerParseSerializedValue(v, handles, refs, [...accessChain, k]);
	    return result;
	  }
	  if (value.h !== void 0) {
	    if (handles === void 0)
	      throw new Error("Unexpected handle");
	    return handles[value.h];
	  }
	  throw new Error(`Attempting to deserialize unexpected value${accessChainToDisplayString(accessChain)}: ${value}`);
	}
	function serializeValue(value, handleSerializer) {
	  return innerSerializeValue(value, handleSerializer, { lastId: 0, visited: /* @__PURE__ */ new Map() }, []);
	}
	function innerSerializeValue(value, handleSerializer, visitorInfo, accessChain) {
	  const handle = handleSerializer(value);
	  if ("fallThrough" in handle)
	    value = handle.fallThrough;
	  else
	    return handle;
	  if (typeof value === "symbol")
	    return { v: "undefined" };
	  if (Object.is(value, void 0))
	    return { v: "undefined" };
	  if (Object.is(value, null))
	    return { v: "null" };
	  if (Object.is(value, NaN))
	    return { v: "NaN" };
	  if (Object.is(value, Infinity))
	    return { v: "Infinity" };
	  if (Object.is(value, -Infinity))
	    return { v: "-Infinity" };
	  if (Object.is(value, -0))
	    return { v: "-0" };
	  if (typeof value === "boolean")
	    return { b: value };
	  if (typeof value === "number")
	    return { n: value };
	  if (typeof value === "string")
	    return { s: value };
	  if (typeof value === "bigint")
	    return { bi: value.toString() };
	  if (isError(value))
	    return { e: { n: value.name, m: value.message, s: value.stack || "" } };
	  if (isDate(value))
	    return { d: value.toJSON() };
	  if (isURL(value))
	    return { u: value.toJSON() };
	  if (isRegExp(value))
	    return { r: { p: value.source, f: value.flags } };
	  const typedArrayKind = constructorToTypedArrayKind.get(value.constructor);
	  if (typedArrayKind)
	    return { ta: { b: Buffer.from(value.buffer, value.byteOffset, value.byteLength), k: typedArrayKind } };
	  const id = visitorInfo.visited.get(value);
	  if (id)
	    return { ref: id };
	  if (Array.isArray(value)) {
	    const a = [];
	    const id2 = ++visitorInfo.lastId;
	    visitorInfo.visited.set(value, id2);
	    for (let i = 0; i < value.length; ++i)
	      a.push(innerSerializeValue(value[i], handleSerializer, visitorInfo, [...accessChain, i]));
	    return { a, id: id2 };
	  }
	  if (typeof value === "object") {
	    const o = [];
	    const id2 = ++visitorInfo.lastId;
	    visitorInfo.visited.set(value, id2);
	    for (const name of Object.keys(value))
	      o.push({ k: name, v: innerSerializeValue(value[name], handleSerializer, visitorInfo, [...accessChain, name]) });
	    return { o, id: id2 };
	  }
	  throw new Error(`Attempting to serialize unexpected value${accessChainToDisplayString(accessChain)}: ${value}`);
	}
	function accessChainToDisplayString(accessChain) {
	  const chainString = accessChain.map((accessor, i) => {
	    if (typeof accessor === "string")
	      return i ? `.${accessor}` : accessor;
	    return `[${accessor}]`;
	  }).join("");
	  return chainString.length > 0 ? ` at position "${chainString}"` : "";
	}
	function isRegExp(obj) {
	  return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
	}
	function isDate(obj) {
	  return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
	}
	function isURL(obj) {
	  return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
	}
	function isError(obj) {
	  const proto = obj ? Object.getPrototypeOf(obj) : null;
	  return obj instanceof Error || proto?.name === "Error" || proto && isError(proto);
	}
	const typedArrayKindToConstructor = {
	  i8: Int8Array,
	  ui8: Uint8Array,
	  ui8c: Uint8ClampedArray,
	  i16: Int16Array,
	  ui16: Uint16Array,
	  i32: Int32Array,
	  ui32: Uint32Array,
	  f32: Float32Array,
	  f64: Float64Array,
	  bi64: BigInt64Array,
	  bui64: BigUint64Array
	};
	const constructorToTypedArrayKind = new Map(Object.entries(typedArrayKindToConstructor).map(([k, v]) => [v, k]));
	return serializers;
}

var errors$1;
var hasRequiredErrors$1;

function requireErrors$1 () {
	if (hasRequiredErrors$1) return errors$1;
	hasRequiredErrors$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var errors_exports = {};
	__export(errors_exports, {
	  TargetClosedError: () => TargetClosedError,
	  TimeoutError: () => TimeoutError,
	  isTargetClosedError: () => isTargetClosedError,
	  parseError: () => parseError,
	  serializeError: () => serializeError
	});
	errors$1 = __toCommonJS(errors_exports);
	var import_serializers = requireSerializers();
	var import_utils = requireUtils();
	class CustomError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = this.constructor.name;
	  }
	}
	class TimeoutError extends CustomError {
	}
	class TargetClosedError extends CustomError {
	  constructor(cause, logs) {
	    super((cause || "Target page, context or browser has been closed") + (logs || ""));
	  }
	}
	function isTargetClosedError(error) {
	  return error instanceof TargetClosedError || error.name === "TargetClosedError";
	}
	function serializeError(e) {
	  if ((0, import_utils.isError)(e))
	    return { error: { message: e.message, stack: e.stack, name: e.name } };
	  return { value: (0, import_serializers.serializeValue)(e, (value) => ({ fallThrough: value })) };
	}
	function parseError(error) {
	  if (!error.error) {
	    if (error.value === void 0)
	      throw new Error("Serialized error must have either an error or a value");
	    return (0, import_serializers.parseSerializedValue)(error.value, void 0);
	  }
	  const e = new Error(error.error.message);
	  e.stack = error.error.stack || "";
	  e.name = error.error.name;
	  return e;
	}
	return errors$1;
}

var instrumentation;
var hasRequiredInstrumentation;

function requireInstrumentation () {
	if (hasRequiredInstrumentation) return instrumentation;
	hasRequiredInstrumentation = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var instrumentation_exports = {};
	__export(instrumentation_exports, {
	  SdkObject: () => SdkObject,
	  createInstrumentation: () => createInstrumentation,
	  serverSideCallMetadata: () => serverSideCallMetadata
	});
	instrumentation = __toCommonJS(instrumentation_exports);
	var import_events = require$$0$5;
	var import_crypto = requireCrypto();
	class SdkObject extends import_events.EventEmitter {
	  constructor(parent, guidPrefix, guid) {
	    super();
	    this.guid = guid || `${guidPrefix || ""}@${(0, import_crypto.createGuid)()}`;
	    this.setMaxListeners(0);
	    this.attribution = { ...parent.attribution };
	    this.instrumentation = parent.instrumentation;
	  }
	}
	function createInstrumentation() {
	  const listeners = /* @__PURE__ */ new Map();
	  return new Proxy({}, {
	    get: (obj, prop) => {
	      if (typeof prop !== "string")
	        return obj[prop];
	      if (prop === "addListener")
	        return (listener, context) => listeners.set(listener, context);
	      if (prop === "removeListener")
	        return (listener) => listeners.delete(listener);
	      if (!prop.startsWith("on"))
	        return obj[prop];
	      return async (sdkObject, ...params) => {
	        for (const [listener, context] of listeners) {
	          if (!context || sdkObject.attribution.context === context)
	            await listener[prop]?.(sdkObject, ...params);
	        }
	      };
	    }
	  });
	}
	function serverSideCallMetadata() {
	  return {
	    id: "",
	    startTime: 0,
	    endTime: 0,
	    type: "Internal",
	    method: "",
	    params: {},
	    log: [],
	    isServerSide: true
	  };
	}
	return instrumentation;
}

var protocolError;
var hasRequiredProtocolError;

function requireProtocolError () {
	if (hasRequiredProtocolError) return protocolError;
	hasRequiredProtocolError = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var protocolError_exports = {};
	__export(protocolError_exports, {
	  ProtocolError: () => ProtocolError,
	  isProtocolError: () => isProtocolError,
	  isSessionClosedError: () => isSessionClosedError
	});
	protocolError = __toCommonJS(protocolError_exports);
	var import_stackTrace = requireStackTrace();
	class ProtocolError extends Error {
	  constructor(type, method, logs) {
	    super();
	    this.type = type;
	    this.method = method;
	    this.logs = logs;
	  }
	  setMessage(message) {
	    (0, import_stackTrace.rewriteErrorMessage)(this, `Protocol error (${this.method}): ${message}`);
	  }
	  browserLogMessage() {
	    return this.logs ? "\nBrowser logs:\n" + this.logs : "";
	  }
	}
	function isProtocolError(e) {
	  return e instanceof ProtocolError;
	}
	function isSessionClosedError(e) {
	  return e instanceof ProtocolError && (e.type === "closed" || e.type === "crashed");
	}
	return protocolError;
}

var callLog;
var hasRequiredCallLog;

function requireCallLog () {
	if (hasRequiredCallLog) return callLog;
	hasRequiredCallLog = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var callLog_exports = {};
	__export(callLog_exports, {
	  compressCallLog: () => compressCallLog,
	  findRepeatedSubsequencesForTest: () => findRepeatedSubsequencesForTest
	});
	callLog = __toCommonJS(callLog_exports);
	function compressCallLog(log) {
	  const lines = [];
	  for (const block of findRepeatedSubsequences(log)) {
	    for (let i = 0; i < block.sequence.length; i++) {
	      const line = block.sequence[i];
	      const leadingWhitespace = line.match(/^\s*/);
	      const whitespacePrefix = "  " + leadingWhitespace?.[0] || "";
	      const countPrefix = `${block.count} \xD7 `;
	      if (block.count > 1 && i === 0)
	        lines.push(whitespacePrefix + countPrefix + line.trim());
	      else if (block.count > 1)
	        lines.push(whitespacePrefix + " ".repeat(countPrefix.length - 2) + "- " + line.trim());
	      else
	        lines.push(whitespacePrefix + "- " + line.trim());
	    }
	  }
	  return lines;
	}
	function findRepeatedSubsequences(s) {
	  const n = s.length;
	  const result = [];
	  let i = 0;
	  const arraysEqual = (a1, a2) => {
	    if (a1.length !== a2.length)
	      return false;
	    for (let j = 0; j < a1.length; j++) {
	      if (a1[j] !== a2[j])
	        return false;
	    }
	    return true;
	  };
	  while (i < n) {
	    let maxRepeatCount = 1;
	    let maxRepeatSubstr = [s[i]];
	    let maxRepeatLength = 1;
	    for (let p = 1; p <= n - i; p++) {
	      const substr = s.slice(i, i + p);
	      let k = 1;
	      while (i + p * k <= n && arraysEqual(s.slice(i + p * (k - 1), i + p * k), substr))
	        k += 1;
	      k -= 1;
	      if (k > 1 && k * p > maxRepeatCount * maxRepeatLength) {
	        maxRepeatCount = k;
	        maxRepeatSubstr = substr;
	        maxRepeatLength = p;
	      }
	    }
	    result.push({ sequence: maxRepeatSubstr, count: maxRepeatCount });
	    i += maxRepeatLength * maxRepeatCount;
	  }
	  return result;
	}
	const findRepeatedSubsequencesForTest = findRepeatedSubsequences;
	return callLog;
}

var dispatcher;
var hasRequiredDispatcher;

function requireDispatcher () {
	if (hasRequiredDispatcher) return dispatcher;
	hasRequiredDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var dispatcher_exports = {};
	__export(dispatcher_exports, {
	  Dispatcher: () => Dispatcher,
	  DispatcherConnection: () => DispatcherConnection,
	  RootDispatcher: () => RootDispatcher,
	  dispatcherSymbol: () => dispatcherSymbol,
	  existingDispatcher: () => existingDispatcher,
	  setMaxDispatchersForTest: () => setMaxDispatchersForTest
	});
	dispatcher = __toCommonJS(dispatcher_exports);
	var import_events = require$$0$5;
	var import_eventsHelper = requireEventsHelper();
	var import_validator = requireValidator();
	var import_utils = requireUtils();
	var import_debug = requireDebug$1();
	var import_errors = requireErrors$1();
	var import_instrumentation = requireInstrumentation();
	var import_protocolError = requireProtocolError();
	var import_callLog = requireCallLog();
	const dispatcherSymbol = Symbol("dispatcher");
	const metadataValidator = (0, import_validator.createMetadataValidator)();
	function existingDispatcher(object) {
	  return object[dispatcherSymbol];
	}
	let maxDispatchersOverride;
	function setMaxDispatchersForTest(value) {
	  maxDispatchersOverride = value;
	}
	function maxDispatchersForBucket(gcBucket) {
	  return maxDispatchersOverride ?? {
	    "JSHandle": 1e5,
	    "ElementHandle": 1e5
	  }[gcBucket] ?? 1e4;
	}
	class Dispatcher extends import_events.EventEmitter {
	  constructor(parent, object, type, initializer, gcBucket) {
	    super();
	    // Only "isScope" channel owners have registered dispatchers inside.
	    this._dispatchers = /* @__PURE__ */ new Map();
	    this._disposed = false;
	    this._eventListeners = [];
	    this._openScope = new import_utils.LongStandingScope();
	    this._connection = parent instanceof DispatcherConnection ? parent : parent._connection;
	    this._parent = parent instanceof DispatcherConnection ? void 0 : parent;
	    const guid = object.guid;
	    this._guid = guid;
	    this._type = type;
	    this._object = object;
	    this._gcBucket = gcBucket ?? type;
	    object[dispatcherSymbol] = this;
	    this._connection.registerDispatcher(this);
	    if (this._parent) {
	      (0, import_utils.assert)(!this._parent._dispatchers.has(guid));
	      this._parent._dispatchers.set(guid, this);
	    }
	    if (this._parent)
	      this._connection.sendCreate(this._parent, type, guid, initializer);
	    this._connection.maybeDisposeStaleDispatchers(this._gcBucket);
	  }
	  parentScope() {
	    return this._parent;
	  }
	  addObjectListener(eventName, handler) {
	    this._eventListeners.push(import_eventsHelper.eventsHelper.addEventListener(this._object, eventName, handler));
	  }
	  adopt(child) {
	    if (child._parent === this)
	      return;
	    const oldParent = child._parent;
	    oldParent._dispatchers.delete(child._guid);
	    this._dispatchers.set(child._guid, child);
	    child._parent = this;
	    this._connection.sendAdopt(this, child);
	  }
	  async _handleCommand(callMetadata, method, validParams) {
	    const commandPromise = this[method](validParams, callMetadata);
	    try {
	      return await this._openScope.race(commandPromise);
	    } catch (e) {
	      if (callMetadata.potentiallyClosesScope && (0, import_errors.isTargetClosedError)(e))
	        return await commandPromise;
	      throw e;
	    }
	  }
	  _dispatchEvent(method, params) {
	    if (this._disposed) {
	      if ((0, import_debug.isUnderTest)())
	        throw new Error(`${this._guid} is sending "${String(method)}" event after being disposed`);
	      return;
	    }
	    this._connection.sendEvent(this, method, params);
	  }
	  _dispose(reason) {
	    this._disposeRecursively(new import_errors.TargetClosedError());
	    this._connection.sendDispose(this, reason);
	  }
	  _onDispose() {
	  }
	  _disposeRecursively(error) {
	    (0, import_utils.assert)(!this._disposed, `${this._guid} is disposed more than once`);
	    this._onDispose();
	    this._disposed = true;
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	    this._parent?._dispatchers.delete(this._guid);
	    const list = this._connection._dispatchersByBucket.get(this._gcBucket);
	    list?.delete(this._guid);
	    this._connection._dispatchers.delete(this._guid);
	    for (const dispatcher of [...this._dispatchers.values()])
	      dispatcher._disposeRecursively(error);
	    this._dispatchers.clear();
	    delete this._object[dispatcherSymbol];
	    this._openScope.close(error);
	  }
	  _debugScopeState() {
	    return {
	      _guid: this._guid,
	      objects: Array.from(this._dispatchers.values()).map((o) => o._debugScopeState())
	    };
	  }
	  async waitForEventInfo() {
	  }
	}
	class RootDispatcher extends Dispatcher {
	  constructor(connection, createPlaywright) {
	    super(connection, { guid: "" }, "Root", {});
	    this.createPlaywright = createPlaywright;
	    this._initialized = false;
	  }
	  async initialize(params) {
	    (0, import_utils.assert)(this.createPlaywright);
	    (0, import_utils.assert)(!this._initialized);
	    this._initialized = true;
	    return {
	      playwright: await this.createPlaywright(this, params)
	    };
	  }
	}
	class DispatcherConnection {
	  constructor(isLocal) {
	    this._dispatchers = /* @__PURE__ */ new Map();
	    this._dispatchersByBucket = /* @__PURE__ */ new Map();
	    this.onmessage = (message) => {
	    };
	    this._waitOperations = /* @__PURE__ */ new Map();
	    this._isLocal = !!isLocal;
	  }
	  sendEvent(dispatcher, event, params) {
	    const validator = (0, import_validator.findValidator)(dispatcher._type, event, "Event");
	    params = validator(params, "", this._validatorToWireContext());
	    this.onmessage({ guid: dispatcher._guid, method: event, params });
	  }
	  sendCreate(parent, type, guid, initializer) {
	    const validator = (0, import_validator.findValidator)(type, "", "Initializer");
	    initializer = validator(initializer, "", this._validatorToWireContext());
	    this.onmessage({ guid: parent._guid, method: "__create__", params: { type, initializer, guid } });
	  }
	  sendAdopt(parent, dispatcher) {
	    this.onmessage({ guid: parent._guid, method: "__adopt__", params: { guid: dispatcher._guid } });
	  }
	  sendDispose(dispatcher, reason) {
	    this.onmessage({ guid: dispatcher._guid, method: "__dispose__", params: { reason } });
	  }
	  _validatorToWireContext() {
	    return {
	      tChannelImpl: this._tChannelImplToWire.bind(this),
	      binary: this._isLocal ? "buffer" : "toBase64",
	      isUnderTest: import_debug.isUnderTest
	    };
	  }
	  _validatorFromWireContext() {
	    return {
	      tChannelImpl: this._tChannelImplFromWire.bind(this),
	      binary: this._isLocal ? "buffer" : "fromBase64",
	      isUnderTest: import_debug.isUnderTest
	    };
	  }
	  _tChannelImplFromWire(names, arg, path, context) {
	    if (arg && typeof arg === "object" && typeof arg.guid === "string") {
	      const guid = arg.guid;
	      const dispatcher = this._dispatchers.get(guid);
	      if (!dispatcher)
	        throw new import_validator.ValidationError(`${path}: no object with guid ${guid}`);
	      if (names !== "*" && !names.includes(dispatcher._type))
	        throw new import_validator.ValidationError(`${path}: object with guid ${guid} has type ${dispatcher._type}, expected ${names.toString()}`);
	      return dispatcher;
	    }
	    throw new import_validator.ValidationError(`${path}: expected guid for ${names.toString()}`);
	  }
	  _tChannelImplToWire(names, arg, path, context) {
	    if (arg instanceof Dispatcher) {
	      if (names !== "*" && !names.includes(arg._type))
	        throw new import_validator.ValidationError(`${path}: dispatcher with guid ${arg._guid} has type ${arg._type}, expected ${names.toString()}`);
	      return { guid: arg._guid };
	    }
	    throw new import_validator.ValidationError(`${path}: expected dispatcher ${names.toString()}`);
	  }
	  registerDispatcher(dispatcher) {
	    (0, import_utils.assert)(!this._dispatchers.has(dispatcher._guid));
	    this._dispatchers.set(dispatcher._guid, dispatcher);
	    let list = this._dispatchersByBucket.get(dispatcher._gcBucket);
	    if (!list) {
	      list = /* @__PURE__ */ new Set();
	      this._dispatchersByBucket.set(dispatcher._gcBucket, list);
	    }
	    list.add(dispatcher._guid);
	  }
	  maybeDisposeStaleDispatchers(gcBucket) {
	    const maxDispatchers = maxDispatchersForBucket(gcBucket);
	    const list = this._dispatchersByBucket.get(gcBucket);
	    if (!list || list.size <= maxDispatchers)
	      return;
	    const dispatchersArray = [...list];
	    const disposeCount = maxDispatchers / 10 | 0;
	    this._dispatchersByBucket.set(gcBucket, new Set(dispatchersArray.slice(disposeCount)));
	    for (let i = 0; i < disposeCount; ++i) {
	      const d = this._dispatchers.get(dispatchersArray[i]);
	      if (!d)
	        continue;
	      d._dispose("gc");
	    }
	  }
	  async dispatch(message) {
	    const { id, guid, method, params, metadata } = message;
	    const dispatcher = this._dispatchers.get(guid);
	    if (!dispatcher) {
	      this.onmessage({ id, error: (0, import_errors.serializeError)(new import_errors.TargetClosedError()) });
	      return;
	    }
	    let validParams;
	    let validMetadata;
	    try {
	      const validator = (0, import_validator.findValidator)(dispatcher._type, method, "Params");
	      const validatorContext = this._validatorFromWireContext();
	      validParams = validator(params, "", validatorContext);
	      validMetadata = metadataValidator(metadata, "", validatorContext);
	      if (typeof dispatcher[method] !== "function")
	        throw new Error(`Mismatching dispatcher: "${dispatcher._type}" does not implement "${method}"`);
	    } catch (e) {
	      this.onmessage({ id, error: (0, import_errors.serializeError)(e) });
	      return;
	    }
	    const sdkObject = dispatcher._object instanceof import_instrumentation.SdkObject ? dispatcher._object : void 0;
	    const callMetadata = {
	      id: `call@${id}`,
	      location: validMetadata.location,
	      apiName: validMetadata.apiName,
	      internal: validMetadata.internal,
	      stepId: validMetadata.stepId,
	      objectId: sdkObject?.guid,
	      pageId: sdkObject?.attribution?.page?.guid,
	      frameId: sdkObject?.attribution?.frame?.guid,
	      startTime: (0, import_utils.monotonicTime)(),
	      endTime: 0,
	      type: dispatcher._type,
	      method,
	      params: params || {},
	      log: []
	    };
	    if (sdkObject && params?.info?.waitId) {
	      const info = params.info;
	      switch (info.phase) {
	        case "before": {
	          this._waitOperations.set(info.waitId, callMetadata);
	          await sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata);
	          this.onmessage({ id });
	          return;
	        }
	        case "log": {
	          const originalMetadata = this._waitOperations.get(info.waitId);
	          originalMetadata.log.push(info.message);
	          sdkObject.instrumentation.onCallLog(sdkObject, originalMetadata, "api", info.message);
	          this.onmessage({ id });
	          return;
	        }
	        case "after": {
	          const originalMetadata = this._waitOperations.get(info.waitId);
	          originalMetadata.endTime = (0, import_utils.monotonicTime)();
	          originalMetadata.error = info.error ? { error: { name: "Error", message: info.error } } : void 0;
	          this._waitOperations.delete(info.waitId);
	          await sdkObject.instrumentation.onAfterCall(sdkObject, originalMetadata);
	          this.onmessage({ id });
	          return;
	        }
	      }
	    }
	    await sdkObject?.instrumentation.onBeforeCall(sdkObject, callMetadata);
	    const response = { id };
	    try {
	      const result = await dispatcher._handleCommand(callMetadata, method, validParams);
	      const validator = (0, import_validator.findValidator)(dispatcher._type, method, "Result");
	      response.result = validator(result, "", this._validatorToWireContext());
	      callMetadata.result = result;
	    } catch (e) {
	      if ((0, import_errors.isTargetClosedError)(e) && sdkObject) {
	        const reason = closeReason(sdkObject);
	        if (reason)
	          (0, import_utils.rewriteErrorMessage)(e, reason);
	      } else if ((0, import_protocolError.isProtocolError)(e)) {
	        if (e.type === "closed") {
	          const reason = sdkObject ? closeReason(sdkObject) : void 0;
	          e = new import_errors.TargetClosedError(reason, e.browserLogMessage());
	        } else if (e.type === "crashed") {
	          (0, import_utils.rewriteErrorMessage)(e, "Target crashed " + e.browserLogMessage());
	        }
	      }
	      response.error = (0, import_errors.serializeError)(e);
	      callMetadata.error = response.error;
	    } finally {
	      callMetadata.endTime = (0, import_utils.monotonicTime)();
	      await sdkObject?.instrumentation.onAfterCall(sdkObject, callMetadata);
	    }
	    if (response.error)
	      response.log = (0, import_callLog.compressCallLog)(callMetadata.log);
	    this.onmessage(response);
	  }
	}
	function closeReason(sdkObject) {
	  return sdkObject.attribution.page?._closeReason || sdkObject.attribution.context?._closeReason || sdkObject.attribution.browser?._closeReason;
	}
	return dispatcher;
}

var timeoutSettings$1;
var hasRequiredTimeoutSettings$1;

function requireTimeoutSettings$1 () {
	if (hasRequiredTimeoutSettings$1) return timeoutSettings$1;
	hasRequiredTimeoutSettings$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var timeoutSettings_exports = {};
	__export(timeoutSettings_exports, {
	  DEFAULT_LAUNCH_TIMEOUT: () => DEFAULT_LAUNCH_TIMEOUT,
	  DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
	  TimeoutSettings: () => TimeoutSettings
	});
	timeoutSettings$1 = __toCommonJS(timeoutSettings_exports);
	var import_debug = requireDebug$1();
	const DEFAULT_TIMEOUT = 3e4;
	const DEFAULT_LAUNCH_TIMEOUT = 3 * 60 * 1e3;
	class TimeoutSettings {
	  constructor(parent) {
	    this._parent = parent;
	  }
	  setDefaultTimeout(timeout) {
	    this._defaultTimeout = timeout;
	  }
	  setDefaultNavigationTimeout(timeout) {
	    this._defaultNavigationTimeout = timeout;
	  }
	  defaultNavigationTimeout() {
	    return this._defaultNavigationTimeout;
	  }
	  defaultTimeout() {
	    return this._defaultTimeout;
	  }
	  navigationTimeout(options) {
	    if (typeof options.timeout === "number")
	      return options.timeout;
	    if (this._defaultNavigationTimeout !== void 0)
	      return this._defaultNavigationTimeout;
	    if ((0, import_debug.debugMode)())
	      return 0;
	    if (this._defaultTimeout !== void 0)
	      return this._defaultTimeout;
	    if (this._parent)
	      return this._parent.navigationTimeout(options);
	    return DEFAULT_TIMEOUT;
	  }
	  timeout(options) {
	    if (typeof options.timeout === "number")
	      return options.timeout;
	    if ((0, import_debug.debugMode)())
	      return 0;
	    if (this._defaultTimeout !== void 0)
	      return this._defaultTimeout;
	    if (this._parent)
	      return this._parent.timeout(options);
	    return DEFAULT_TIMEOUT;
	  }
	  static timeout(options) {
	    if (typeof options.timeout === "number")
	      return options.timeout;
	    if ((0, import_debug.debugMode)())
	      return 0;
	    return DEFAULT_TIMEOUT;
	  }
	  static launchTimeout(options) {
	    if (typeof options.timeout === "number")
	      return options.timeout;
	    if ((0, import_debug.debugMode)())
	      return 0;
	    return DEFAULT_LAUNCH_TIMEOUT;
	  }
	}
	return timeoutSettings$1;
}

var clockSource;
var hasRequiredClockSource;

function requireClockSource () {
	if (hasRequiredClockSource) return clockSource;
	hasRequiredClockSource = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var clockSource_exports = {};
	__export(clockSource_exports, {
	  source: () => source
	});
	clockSource = __toCommonJS(clockSource_exports);
	const source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/injected/src/clock.ts\nvar clock_exports = {};\n__export(clock_exports, {\n  ClockController: () => ClockController,\n  createClock: () => createClock,\n  inject: () => inject,\n  install: () => install\n});\nmodule.exports = __toCommonJS(clock_exports);\n\n// packages/playwright-core/src/utils/isomorphic/builtins.ts\nfunction builtins(global) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n  global = global != null ? global : globalThis;\n  if (!global["__playwright_builtins__"]) {\n    const builtins2 = {\n      setTimeout: (_a = global.setTimeout) == null ? void 0 : _a.bind(global),\n      clearTimeout: (_b = global.clearTimeout) == null ? void 0 : _b.bind(global),\n      setInterval: (_c = global.setInterval) == null ? void 0 : _c.bind(global),\n      clearInterval: (_d = global.clearInterval) == null ? void 0 : _d.bind(global),\n      requestAnimationFrame: (_e = global.requestAnimationFrame) == null ? void 0 : _e.bind(global),\n      cancelAnimationFrame: (_f = global.cancelAnimationFrame) == null ? void 0 : _f.bind(global),\n      requestIdleCallback: (_g = global.requestIdleCallback) == null ? void 0 : _g.bind(global),\n      cancelIdleCallback: (_h = global.cancelIdleCallback) == null ? void 0 : _h.bind(global),\n      performance: global.performance,\n      eval: (_i = global.eval) == null ? void 0 : _i.bind(global),\n      Intl: global.Intl,\n      Date: global.Date,\n      Map: global.Map,\n      Set: global.Set\n    };\n    Object.defineProperty(global, "__playwright_builtins__", { value: builtins2, configurable: false, enumerable: false, writable: false });\n  }\n  return global["__playwright_builtins__"];\n}\nvar instance = builtins();\nvar setTimeout = instance.setTimeout;\nvar clearTimeout = instance.clearTimeout;\nvar setInterval = instance.setInterval;\nvar clearInterval = instance.clearInterval;\nvar requestAnimationFrame = instance.requestAnimationFrame;\nvar cancelAnimationFrame = instance.cancelAnimationFrame;\nvar requestIdleCallback = instance.requestIdleCallback;\nvar cancelIdleCallback = instance.cancelIdleCallback;\nvar performance = instance.performance;\nvar Intl = instance.Intl;\nvar Date = instance.Date;\nvar Map = instance.Map;\nvar Set = instance.Set;\n\n// packages/injected/src/clock.ts\nvar ClockController = class {\n  constructor(embedder) {\n    this._duringTick = false;\n    this._uniqueTimerId = idCounterStart;\n    this.disposables = [];\n    this._log = [];\n    this._timers = new Map();\n    this._now = { time: asWallTime(0), isFixedTime: false, ticks: 0, origin: asWallTime(-1) };\n    this._embedder = embedder;\n  }\n  uninstall() {\n    this.disposables.forEach((dispose) => dispose());\n    this.disposables.length = 0;\n  }\n  now() {\n    this._replayLogOnce();\n    this._syncRealTime();\n    return this._now.time;\n  }\n  install(time) {\n    this._replayLogOnce();\n    this._innerSetTime(asWallTime(time));\n  }\n  setSystemTime(time) {\n    this._replayLogOnce();\n    this._innerSetTime(asWallTime(time));\n  }\n  setFixedTime(time) {\n    this._replayLogOnce();\n    this._innerSetFixedTime(asWallTime(time));\n  }\n  performanceNow() {\n    this._replayLogOnce();\n    this._syncRealTime();\n    return this._now.ticks;\n  }\n  _syncRealTime() {\n    if (!this._realTime)\n      return;\n    const now = this._embedder.performanceNow();\n    const sinceLastSync = now - this._realTime.lastSyncTicks;\n    if (sinceLastSync > 0) {\n      this._advanceNow(shiftTicks(this._now.ticks, sinceLastSync));\n      this._realTime.lastSyncTicks = now;\n    }\n  }\n  _innerSetTime(time) {\n    this._now.time = time;\n    this._now.isFixedTime = false;\n    if (this._now.origin < 0)\n      this._now.origin = this._now.time;\n  }\n  _innerSetFixedTime(time) {\n    this._innerSetTime(time);\n    this._now.isFixedTime = true;\n  }\n  _advanceNow(to) {\n    if (!this._now.isFixedTime)\n      this._now.time = asWallTime(this._now.time + to - this._now.ticks);\n    this._now.ticks = to;\n  }\n  async log(type, time, param) {\n    this._log.push({ type, time, param });\n  }\n  async runFor(ticks) {\n    this._replayLogOnce();\n    if (ticks < 0)\n      throw new TypeError("Negative ticks are not supported");\n    await this._runTo(shiftTicks(this._now.ticks, ticks));\n  }\n  async _runTo(to) {\n    to = Math.ceil(to);\n    if (this._now.ticks > to)\n      return;\n    let firstException;\n    while (true) {\n      const result = await this._callFirstTimer(to);\n      if (!result.timerFound)\n        break;\n      firstException = firstException || result.error;\n    }\n    this._advanceNow(to);\n    if (firstException)\n      throw firstException;\n  }\n  async pauseAt(time) {\n    this._replayLogOnce();\n    this._innerPause();\n    const toConsume = time - this._now.time;\n    await this._innerFastForwardTo(shiftTicks(this._now.ticks, toConsume));\n    return toConsume;\n  }\n  _innerPause() {\n    this._realTime = void 0;\n    this._updateRealTimeTimer();\n  }\n  resume() {\n    this._replayLogOnce();\n    this._innerResume();\n  }\n  _innerResume() {\n    const now = this._embedder.performanceNow();\n    this._realTime = { startTicks: now, lastSyncTicks: now };\n    this._updateRealTimeTimer();\n  }\n  _updateRealTimeTimer() {\n    var _a;\n    if (!this._realTime) {\n      (_a = this._currentRealTimeTimer) == null ? void 0 : _a.dispose();\n      this._currentRealTimeTimer = void 0;\n      return;\n    }\n    const firstTimer = this._firstTimer();\n    const callAt = Math.min(firstTimer ? firstTimer.callAt : this._now.ticks + maxTimeout, this._now.ticks + 100);\n    if (this._currentRealTimeTimer && this._currentRealTimeTimer.callAt < callAt)\n      return;\n    if (this._currentRealTimeTimer) {\n      this._currentRealTimeTimer.dispose();\n      this._currentRealTimeTimer = void 0;\n    }\n    this._currentRealTimeTimer = {\n      callAt,\n      dispose: this._embedder.setTimeout(() => {\n        this._currentRealTimeTimer = void 0;\n        this._syncRealTime();\n        void this._runTo(this._now.ticks).catch((e) => console.error(e)).then(() => this._updateRealTimeTimer());\n      }, callAt - this._now.ticks)\n    };\n  }\n  async fastForward(ticks) {\n    this._replayLogOnce();\n    await this._innerFastForwardTo(shiftTicks(this._now.ticks, ticks | 0));\n  }\n  async _innerFastForwardTo(to) {\n    if (to < this._now.ticks)\n      throw new Error("Cannot fast-forward to the past");\n    for (const timer of this._timers.values()) {\n      if (to > timer.callAt)\n        timer.callAt = to;\n    }\n    await this._runTo(to);\n  }\n  addTimer(options) {\n    this._replayLogOnce();\n    if (options.type === "AnimationFrame" /* AnimationFrame */ && !options.func)\n      throw new Error("Callback must be provided to requestAnimationFrame calls");\n    if (options.type === "IdleCallback" /* IdleCallback */ && !options.func)\n      throw new Error("Callback must be provided to requestIdleCallback calls");\n    if (["Timeout" /* Timeout */, "Interval" /* Interval */].includes(options.type) && !options.func && options.delay === void 0)\n      throw new Error("Callback must be provided to timer calls");\n    let delay = options.delay ? +options.delay : 0;\n    if (!Number.isFinite(delay))\n      delay = 0;\n    delay = delay > maxTimeout ? 1 : delay;\n    delay = Math.max(0, delay);\n    const timer = {\n      type: options.type,\n      func: options.func,\n      args: options.args || [],\n      delay,\n      callAt: shiftTicks(this._now.ticks, delay || (this._duringTick ? 1 : 0)),\n      createdAt: this._now.ticks,\n      id: this._uniqueTimerId++,\n      error: new Error()\n    };\n    this._timers.set(timer.id, timer);\n    if (this._realTime)\n      this._updateRealTimeTimer();\n    return timer.id;\n  }\n  countTimers() {\n    return this._timers.size;\n  }\n  _firstTimer(beforeTick) {\n    let firstTimer = null;\n    for (const timer of this._timers.values()) {\n      const isInRange = beforeTick === void 0 || timer.callAt <= beforeTick;\n      if (isInRange && (!firstTimer || compareTimers(firstTimer, timer) === 1))\n        firstTimer = timer;\n    }\n    return firstTimer;\n  }\n  _takeFirstTimer(beforeTick) {\n    const timer = this._firstTimer(beforeTick);\n    if (!timer)\n      return null;\n    this._advanceNow(timer.callAt);\n    if (timer.type === "Interval" /* Interval */)\n      timer.callAt = shiftTicks(timer.callAt, timer.delay);\n    else\n      this._timers.delete(timer.id);\n    return timer;\n  }\n  async _callFirstTimer(beforeTick) {\n    const timer = this._takeFirstTimer(beforeTick);\n    if (!timer)\n      return { timerFound: false };\n    this._duringTick = true;\n    try {\n      if (typeof timer.func !== "function") {\n        let error2;\n        try {\n          (() => {\n            globalThis.eval(timer.func);\n          })();\n        } catch (e) {\n          error2 = e;\n        }\n        await new Promise((f) => this._embedder.setTimeout(f));\n        return { timerFound: true, error: error2 };\n      }\n      let args = timer.args;\n      if (timer.type === "AnimationFrame" /* AnimationFrame */)\n        args = [this._now.ticks];\n      else if (timer.type === "IdleCallback" /* IdleCallback */)\n        args = [{ didTimeout: false, timeRemaining: () => 0 }];\n      let error;\n      try {\n        timer.func.apply(null, args);\n      } catch (e) {\n        error = e;\n      }\n      await new Promise((f) => this._embedder.setTimeout(f));\n      return { timerFound: true, error };\n    } finally {\n      this._duringTick = false;\n    }\n  }\n  getTimeToNextFrame() {\n    return 16 - this._now.ticks % 16;\n  }\n  clearTimer(timerId, type) {\n    this._replayLogOnce();\n    if (!timerId) {\n      return;\n    }\n    const id = Number(timerId);\n    if (Number.isNaN(id) || id < idCounterStart) {\n      const handlerName = getClearHandler(type);\n      new Error(`Clock: ${handlerName} was invoked to clear a native timer instead of one created by the clock library.`);\n    }\n    const timer = this._timers.get(id);\n    if (timer) {\n      if (timer.type === type || timer.type === "Timeout" && type === "Interval" || timer.type === "Interval" && type === "Timeout") {\n        this._timers.delete(id);\n      } else {\n        const clear = getClearHandler(type);\n        const schedule = getScheduleHandler(timer.type);\n        throw new Error(\n          `Cannot clear timer: timer created with ${schedule}() but cleared with ${clear}()`\n        );\n      }\n    }\n  }\n  _replayLogOnce() {\n    if (!this._log.length)\n      return;\n    let lastLogTime = -1;\n    let isPaused = false;\n    for (const { type, time, param } of this._log) {\n      if (!isPaused && lastLogTime !== -1)\n        this._advanceNow(shiftTicks(this._now.ticks, time - lastLogTime));\n      lastLogTime = time;\n      if (type === "install") {\n        this._innerSetTime(asWallTime(param));\n      } else if (type === "fastForward" || type === "runFor") {\n        this._advanceNow(shiftTicks(this._now.ticks, param));\n      } else if (type === "pauseAt") {\n        isPaused = true;\n        this._innerPause();\n        this._innerSetTime(asWallTime(param));\n      } else if (type === "resume") {\n        this._innerResume();\n        isPaused = false;\n      } else if (type === "setFixedTime") {\n        this._innerSetFixedTime(asWallTime(param));\n      } else if (type === "setSystemTime") {\n        this._innerSetTime(asWallTime(param));\n      }\n    }\n    if (!isPaused && lastLogTime > 0)\n      this._advanceNow(shiftTicks(this._now.ticks, this._embedder.dateNow() - lastLogTime));\n    this._log.length = 0;\n  }\n};\nfunction mirrorDateProperties(target, source) {\n  for (const prop in source) {\n    if (source.hasOwnProperty(prop))\n      target[prop] = source[prop];\n  }\n  target.toString = () => source.toString();\n  target.prototype = source.prototype;\n  target.parse = source.parse;\n  target.UTC = source.UTC;\n  target.prototype.toUTCString = source.prototype.toUTCString;\n  target.isFake = true;\n  return target;\n}\nfunction createDate(clock, NativeDate) {\n  function ClockDate(year, month, date, hour, minute, second, ms) {\n    if (!(this instanceof ClockDate))\n      return new NativeDate(clock.now()).toString();\n    switch (arguments.length) {\n      case 0:\n        return new NativeDate(clock.now());\n      case 1:\n        return new NativeDate(year);\n      case 2:\n        return new NativeDate(year, month);\n      case 3:\n        return new NativeDate(year, month, date);\n      case 4:\n        return new NativeDate(year, month, date, hour);\n      case 5:\n        return new NativeDate(year, month, date, hour, minute);\n      case 6:\n        return new NativeDate(\n          year,\n          month,\n          date,\n          hour,\n          minute,\n          second\n        );\n      default:\n        return new NativeDate(\n          year,\n          month,\n          date,\n          hour,\n          minute,\n          second,\n          ms\n        );\n    }\n  }\n  ClockDate.now = () => clock.now();\n  return mirrorDateProperties(ClockDate, NativeDate);\n}\nfunction createIntl(clock, NativeIntl) {\n  const ClockIntl = {};\n  for (const key of Object.getOwnPropertyNames(NativeIntl))\n    ClockIntl[key] = NativeIntl[key];\n  ClockIntl.DateTimeFormat = function(...args) {\n    const realFormatter = new NativeIntl.DateTimeFormat(...args);\n    const formatter = {\n      formatRange: realFormatter.formatRange.bind(realFormatter),\n      formatRangeToParts: realFormatter.formatRangeToParts.bind(realFormatter),\n      resolvedOptions: realFormatter.resolvedOptions.bind(realFormatter),\n      format: (date) => realFormatter.format(date || clock.now()),\n      formatToParts: (date) => realFormatter.formatToParts(date || clock.now())\n    };\n    return formatter;\n  };\n  ClockIntl.DateTimeFormat.prototype = Object.create(\n    NativeIntl.DateTimeFormat.prototype\n  );\n  ClockIntl.DateTimeFormat.supportedLocalesOf = NativeIntl.DateTimeFormat.supportedLocalesOf;\n  return ClockIntl;\n}\nfunction compareTimers(a, b) {\n  if (a.callAt < b.callAt)\n    return -1;\n  if (a.callAt > b.callAt)\n    return 1;\n  if (a.type === "Immediate" /* Immediate */ && b.type !== "Immediate" /* Immediate */)\n    return -1;\n  if (a.type !== "Immediate" /* Immediate */ && b.type === "Immediate" /* Immediate */)\n    return 1;\n  if (a.createdAt < b.createdAt)\n    return -1;\n  if (a.createdAt > b.createdAt)\n    return 1;\n  if (a.id < b.id)\n    return -1;\n  if (a.id > b.id)\n    return 1;\n}\nvar maxTimeout = Math.pow(2, 31) - 1;\nvar idCounterStart = 1e12;\nfunction platformOriginals(globalObject) {\n  const raw = {\n    setTimeout: globalObject.setTimeout,\n    clearTimeout: globalObject.clearTimeout,\n    setInterval: globalObject.setInterval,\n    clearInterval: globalObject.clearInterval,\n    requestAnimationFrame: globalObject.requestAnimationFrame ? globalObject.requestAnimationFrame : void 0,\n    cancelAnimationFrame: globalObject.cancelAnimationFrame ? globalObject.cancelAnimationFrame : void 0,\n    requestIdleCallback: globalObject.requestIdleCallback ? globalObject.requestIdleCallback : void 0,\n    cancelIdleCallback: globalObject.cancelIdleCallback ? globalObject.cancelIdleCallback : void 0,\n    Date: globalObject.Date,\n    performance: globalObject.performance,\n    Intl: globalObject.Intl\n  };\n  const bound = { ...raw };\n  for (const key of Object.keys(bound)) {\n    if (key !== "Date" && typeof bound[key] === "function")\n      bound[key] = bound[key].bind(globalObject);\n  }\n  return { raw, bound };\n}\nfunction getScheduleHandler(type) {\n  if (type === "IdleCallback" || type === "AnimationFrame")\n    return `request${type}`;\n  return `set${type}`;\n}\nfunction createApi(clock, originals) {\n  return {\n    setTimeout: (func, timeout, ...args) => {\n      const delay = timeout ? +timeout : timeout;\n      return clock.addTimer({\n        type: "Timeout" /* Timeout */,\n        func,\n        args,\n        delay\n      });\n    },\n    clearTimeout: (timerId) => {\n      if (timerId)\n        clock.clearTimer(timerId, "Timeout" /* Timeout */);\n    },\n    setInterval: (func, timeout, ...args) => {\n      const delay = timeout ? +timeout : timeout;\n      return clock.addTimer({\n        type: "Interval" /* Interval */,\n        func,\n        args,\n        delay\n      });\n    },\n    clearInterval: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "Interval" /* Interval */);\n    },\n    requestAnimationFrame: (callback) => {\n      return clock.addTimer({\n        type: "AnimationFrame" /* AnimationFrame */,\n        func: callback,\n        delay: clock.getTimeToNextFrame()\n      });\n    },\n    cancelAnimationFrame: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "AnimationFrame" /* AnimationFrame */);\n    },\n    requestIdleCallback: (callback, options) => {\n      let timeToNextIdlePeriod = 0;\n      if (clock.countTimers() > 0)\n        timeToNextIdlePeriod = 50;\n      return clock.addTimer({\n        type: "IdleCallback" /* IdleCallback */,\n        func: callback,\n        delay: (options == null ? void 0 : options.timeout) ? Math.min(options == null ? void 0 : options.timeout, timeToNextIdlePeriod) : timeToNextIdlePeriod\n      });\n    },\n    cancelIdleCallback: (timerId) => {\n      if (timerId)\n        return clock.clearTimer(timerId, "IdleCallback" /* IdleCallback */);\n    },\n    Intl: originals.Intl ? createIntl(clock, originals.Intl) : void 0,\n    Date: createDate(clock, originals.Date),\n    performance: originals.performance ? fakePerformance(clock, originals.performance) : void 0\n  };\n}\nfunction getClearHandler(type) {\n  if (type === "IdleCallback" || type === "AnimationFrame")\n    return `cancel${type}`;\n  return `clear${type}`;\n}\nfunction fakePerformance(clock, performance2) {\n  const result = {\n    now: () => clock.performanceNow()\n  };\n  result.__defineGetter__("timeOrigin", () => clock._now.origin || 0);\n  for (const key of Object.keys(performance2.__proto__)) {\n    if (key === "now" || key === "timeOrigin")\n      continue;\n    if (key === "getEntries" || key === "getEntriesByName" || key === "getEntriesByType")\n      result[key] = () => [];\n    else\n      result[key] = () => {\n      };\n  }\n  return result;\n}\nfunction createClock(globalObject) {\n  const originals = platformOriginals(globalObject);\n  const embedder = {\n    dateNow: () => originals.raw.Date.now(),\n    performanceNow: () => Math.ceil(originals.raw.performance.now()),\n    setTimeout: (task, timeout) => {\n      const timerId = originals.bound.setTimeout(task, timeout);\n      return () => originals.bound.clearTimeout(timerId);\n    },\n    setInterval: (task, delay) => {\n      const intervalId = originals.bound.setInterval(task, delay);\n      return () => originals.bound.clearInterval(intervalId);\n    }\n  };\n  const clock = new ClockController(embedder);\n  const api = createApi(clock, originals.bound);\n  return { clock, api, originals: originals.raw };\n}\nfunction install(globalObject, config = {}) {\n  var _a, _b;\n  if ((_a = globalObject.Date) == null ? void 0 : _a.isFake) {\n    throw new TypeError(`Can\'t install fake timers twice on the same global object.`);\n  }\n  const { clock, api, originals } = createClock(globalObject);\n  const toFake = ((_b = config.toFake) == null ? void 0 : _b.length) ? config.toFake : Object.keys(originals);\n  for (const method of toFake) {\n    if (method === "Date") {\n      globalObject.Date = mirrorDateProperties(api.Date, globalObject.Date);\n    } else if (method === "Intl") {\n      globalObject.Intl = api[method];\n    } else if (method === "performance") {\n      globalObject.performance = api[method];\n      const kEventTimeStamp = Symbol("playwrightEventTimeStamp");\n      Object.defineProperty(Event.prototype, "timeStamp", {\n        get() {\n          var _a2;\n          if (!this[kEventTimeStamp])\n            this[kEventTimeStamp] = (_a2 = api.performance) == null ? void 0 : _a2.now();\n          return this[kEventTimeStamp];\n        }\n      });\n    } else {\n      globalObject[method] = (...args) => {\n        return api[method].apply(api, args);\n      };\n    }\n    clock.disposables.push(() => {\n      globalObject[method] = originals[method];\n    });\n  }\n  return { clock, api, originals };\n}\nfunction inject(globalObject) {\n  const builtin = platformOriginals(globalObject).bound;\n  const { clock: controller } = install(globalObject);\n  controller.resume();\n  return {\n    controller,\n    builtin\n  };\n}\nfunction asWallTime(n) {\n  return n;\n}\nfunction shiftTicks(ticks, ms) {\n  return ticks + ms;\n}\n';
	return clockSource;
}

var clock$1;
var hasRequiredClock$1;

function requireClock$1 () {
	if (hasRequiredClock$1) return clock$1;
	hasRequiredClock$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var clock_exports = {};
	__export(clock_exports, {
	  Clock: () => Clock
	});
	clock$1 = __toCommonJS(clock_exports);
	var clockSource = __toESM(requireClockSource());
	class Clock {
	  constructor(browserContext) {
	    this._scriptInstalled = false;
	    this._browserContext = browserContext;
	  }
	  markAsUninstalled() {
	    this._scriptInstalled = false;
	  }
	  async fastForward(ticks) {
	    await this._installIfNeeded();
	    const ticksMillis = parseTicks(ticks);
	    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('fastForward', ${Date.now()}, ${ticksMillis})`);
	    await this._evaluateInFrames(`globalThis.__pwClock.controller.fastForward(${ticksMillis})`);
	  }
	  async install(time) {
	    await this._installIfNeeded();
	    const timeMillis = time !== void 0 ? parseTime(time) : Date.now();
	    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('install', ${Date.now()}, ${timeMillis})`);
	    await this._evaluateInFrames(`globalThis.__pwClock.controller.install(${timeMillis})`);
	  }
	  async pauseAt(ticks) {
	    await this._installIfNeeded();
	    const timeMillis = parseTime(ticks);
	    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('pauseAt', ${Date.now()}, ${timeMillis})`);
	    await this._evaluateInFrames(`globalThis.__pwClock.controller.pauseAt(${timeMillis})`);
	  }
	  async resume() {
	    await this._installIfNeeded();
	    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('resume', ${Date.now()})`);
	    await this._evaluateInFrames(`globalThis.__pwClock.controller.resume()`);
	  }
	  async setFixedTime(time) {
	    await this._installIfNeeded();
	    const timeMillis = parseTime(time);
	    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('setFixedTime', ${Date.now()}, ${timeMillis})`);
	    await this._evaluateInFrames(`globalThis.__pwClock.controller.setFixedTime(${timeMillis})`);
	  }
	  async setSystemTime(time) {
	    await this._installIfNeeded();
	    const timeMillis = parseTime(time);
	    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('setSystemTime', ${Date.now()}, ${timeMillis})`);
	    await this._evaluateInFrames(`globalThis.__pwClock.controller.setSystemTime(${timeMillis})`);
	  }
	  async runFor(ticks) {
	    await this._installIfNeeded();
	    const ticksMillis = parseTicks(ticks);
	    await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('runFor', ${Date.now()}, ${ticksMillis})`);
	    await this._evaluateInFrames(`globalThis.__pwClock.controller.runFor(${ticksMillis})`);
	  }
	  async _installIfNeeded() {
	    if (this._scriptInstalled)
	      return;
	    this._scriptInstalled = true;
	    const script = `(() => {
      const module = {};
      ${clockSource.source}
      globalThis.__pwClock = (module.exports.inject())(globalThis);
    })();`;
	    await this._browserContext.addInitScript(script);
	    await this._evaluateInFrames(script);
	  }
	  async _evaluateInFrames(script) {
	    await this._browserContext.safeNonStallingEvaluateInAllFrames(script, "main", { throwOnJSErrors: true });
	  }
	}
	function parseTicks(value) {
	  if (typeof value === "number")
	    return value;
	  if (!value)
	    return 0;
	  const str = value;
	  const strings = str.split(":");
	  const l = strings.length;
	  let i = l;
	  let ms = 0;
	  let parsed;
	  if (l > 3 || !/^(\d\d:){0,2}\d\d?$/.test(str)) {
	    throw new Error(
	      `Clock only understands numbers, 'mm:ss' and 'hh:mm:ss'`
	    );
	  }
	  while (i--) {
	    parsed = parseInt(strings[i], 10);
	    if (parsed >= 60)
	      throw new Error(`Invalid time ${str}`);
	    ms += parsed * Math.pow(60, l - i - 1);
	  }
	  return ms * 1e3;
	}
	function parseTime(epoch) {
	  if (!epoch)
	    return 0;
	  if (typeof epoch === "number")
	    return epoch;
	  const parsed = new Date(epoch);
	  if (!isFinite(parsed.getTime()))
	    throw new Error(`Invalid date: ${epoch}`);
	  return parsed.getTime();
	}
	return clock$1;
}

var debug;
var hasRequiredDebug;

function requireDebug () {
	if (hasRequiredDebug) return debug;
	hasRequiredDebug = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var debug_exports = {};
	__export(debug_exports, {
	  commandsWithTracingSnapshots: () => commandsWithTracingSnapshots,
	  pausesBeforeInputActions: () => pausesBeforeInputActions,
	  slowMoActions: () => slowMoActions
	});
	debug = __toCommonJS(debug_exports);
	const slowMoActions = /* @__PURE__ */ new Set([
	  "Page.goBack",
	  "Page.goForward",
	  "Page.reload",
	  "Page.keyboardDown",
	  "Page.keyboardUp",
	  "Page.keyboardInsertText",
	  "Page.keyboardType",
	  "Page.keyboardPress",
	  "Page.mouseMove",
	  "Page.mouseDown",
	  "Page.mouseUp",
	  "Page.mouseClick",
	  "Page.mouseWheel",
	  "Page.touchscreenTap",
	  "Frame.blur",
	  "Frame.check",
	  "Frame.click",
	  "Frame.dragAndDrop",
	  "Frame.dblclick",
	  "Frame.dispatchEvent",
	  "Frame.fill",
	  "Frame.focus",
	  "Frame.goto",
	  "Frame.hover",
	  "Frame.press",
	  "Frame.selectOption",
	  "Frame.setInputFiles",
	  "Frame.tap",
	  "Frame.type",
	  "Frame.uncheck",
	  "ElementHandle.check",
	  "ElementHandle.click",
	  "ElementHandle.dblclick",
	  "ElementHandle.dispatchEvent",
	  "ElementHandle.fill",
	  "ElementHandle.focus",
	  "ElementHandle.hover",
	  "ElementHandle.press",
	  "ElementHandle.scrollIntoViewIfNeeded",
	  "ElementHandle.selectOption",
	  "ElementHandle.selectText",
	  "ElementHandle.setInputFiles",
	  "ElementHandle.tap",
	  "ElementHandle.type",
	  "ElementHandle.uncheck"
	]);
	const commandsWithTracingSnapshots = /* @__PURE__ */ new Set([
	  "EventTarget.waitForEventInfo",
	  "BrowserContext.waitForEventInfo",
	  "Page.waitForEventInfo",
	  "WebSocket.waitForEventInfo",
	  "ElectronApplication.waitForEventInfo",
	  "AndroidDevice.waitForEventInfo",
	  "Page.emulateMedia",
	  "Page.goBack",
	  "Page.goForward",
	  "Page.reload",
	  "Page.expectScreenshot",
	  "Page.screenshot",
	  "Page.setViewportSize",
	  "Page.keyboardDown",
	  "Page.keyboardUp",
	  "Page.keyboardInsertText",
	  "Page.keyboardType",
	  "Page.keyboardPress",
	  "Page.mouseMove",
	  "Page.mouseDown",
	  "Page.mouseUp",
	  "Page.mouseClick",
	  "Page.mouseWheel",
	  "Page.touchscreenTap",
	  "Page.accessibilitySnapshot",
	  "Frame.evalOnSelector",
	  "Frame.evalOnSelectorAll",
	  "Frame.addScriptTag",
	  "Frame.addStyleTag",
	  "Frame.ariaSnapshot",
	  "Frame.blur",
	  "Frame.check",
	  "Frame.click",
	  "Frame.content",
	  "Frame.dragAndDrop",
	  "Frame.dblclick",
	  "Frame.dispatchEvent",
	  "Frame.evaluateExpression",
	  "Frame.evaluateExpressionHandle",
	  "Frame.fill",
	  "Frame.focus",
	  "Frame.getAttribute",
	  "Frame.goto",
	  "Frame.hover",
	  "Frame.innerHTML",
	  "Frame.innerText",
	  "Frame.inputValue",
	  "Frame.isChecked",
	  "Frame.isDisabled",
	  "Frame.isEnabled",
	  "Frame.isHidden",
	  "Frame.isVisible",
	  "Frame.isEditable",
	  "Frame.press",
	  "Frame.querySelector",
	  "Frame.querySelectorAll",
	  "Frame.queryCount",
	  "Frame.selectOption",
	  "Frame.setContent",
	  "Frame.setInputFiles",
	  "Frame.tap",
	  "Frame.textContent",
	  "Frame.type",
	  "Frame.uncheck",
	  "Frame.waitForTimeout",
	  "Frame.waitForFunction",
	  "Frame.waitForSelector",
	  "Frame.expect",
	  "JSHandle.evaluateExpression",
	  "ElementHandle.evaluateExpression",
	  "JSHandle.evaluateExpressionHandle",
	  "ElementHandle.evaluateExpressionHandle",
	  "ElementHandle.evalOnSelector",
	  "ElementHandle.evalOnSelectorAll",
	  "ElementHandle.boundingBox",
	  "ElementHandle.check",
	  "ElementHandle.click",
	  "ElementHandle.contentFrame",
	  "ElementHandle.dblclick",
	  "ElementHandle.dispatchEvent",
	  "ElementHandle.fill",
	  "ElementHandle.focus",
	  "ElementHandle.hover",
	  "ElementHandle.innerHTML",
	  "ElementHandle.innerText",
	  "ElementHandle.inputValue",
	  "ElementHandle.isChecked",
	  "ElementHandle.isDisabled",
	  "ElementHandle.isEditable",
	  "ElementHandle.isEnabled",
	  "ElementHandle.isHidden",
	  "ElementHandle.isVisible",
	  "ElementHandle.press",
	  "ElementHandle.querySelector",
	  "ElementHandle.querySelectorAll",
	  "ElementHandle.screenshot",
	  "ElementHandle.scrollIntoViewIfNeeded",
	  "ElementHandle.selectOption",
	  "ElementHandle.selectText",
	  "ElementHandle.setInputFiles",
	  "ElementHandle.tap",
	  "ElementHandle.textContent",
	  "ElementHandle.type",
	  "ElementHandle.uncheck",
	  "ElementHandle.waitForElementState",
	  "ElementHandle.waitForSelector"
	]);
	const pausesBeforeInputActions = /* @__PURE__ */ new Set([
	  "Frame.check",
	  "Frame.click",
	  "Frame.dragAndDrop",
	  "Frame.dblclick",
	  "Frame.fill",
	  "Frame.hover",
	  "Frame.press",
	  "Frame.selectOption",
	  "Frame.setInputFiles",
	  "Frame.tap",
	  "Frame.type",
	  "Frame.uncheck",
	  "ElementHandle.check",
	  "ElementHandle.click",
	  "ElementHandle.dblclick",
	  "ElementHandle.fill",
	  "ElementHandle.hover",
	  "ElementHandle.press",
	  "ElementHandle.selectOption",
	  "ElementHandle.setInputFiles",
	  "ElementHandle.tap",
	  "ElementHandle.type",
	  "ElementHandle.uncheck"
	]);
	return debug;
}

var _debugger;
var hasRequired_debugger;

function require_debugger () {
	if (hasRequired_debugger) return _debugger;
	hasRequired_debugger = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var debugger_exports = {};
	__export(debugger_exports, {
	  Debugger: () => Debugger,
	  shouldSlowMo: () => shouldSlowMo
	});
	_debugger = __toCommonJS(debugger_exports);
	var import_events = require$$0$5;
	var import_utils = requireUtils();
	var import_browserContext = requireBrowserContext$1();
	var import_debug = requireDebug();
	const symbol = Symbol("Debugger");
	class Debugger extends import_events.EventEmitter {
	  constructor(context) {
	    super();
	    this._pauseOnNextStatement = false;
	    this._pausedCallsMetadata = /* @__PURE__ */ new Map();
	    this._muted = false;
	    this._context = context;
	    this._context[symbol] = this;
	    this._enabled = (0, import_utils.debugMode)() === "inspector";
	    if (this._enabled)
	      this.pauseOnNextStatement();
	    context.instrumentation.addListener(this, context);
	    this._context.once(import_browserContext.BrowserContext.Events.Close, () => {
	      this._context.instrumentation.removeListener(this);
	    });
	    this._slowMo = this._context._browser.options.slowMo;
	  }
	  static {
	    this.Events = {
	      PausedStateChanged: "pausedstatechanged"
	    };
	  }
	  async setMuted(muted) {
	    this._muted = muted;
	  }
	  async onBeforeCall(sdkObject, metadata) {
	    if (this._muted)
	      return;
	    if (shouldPauseOnCall(sdkObject, metadata) || this._pauseOnNextStatement && shouldPauseBeforeStep(metadata))
	      await this.pause(sdkObject, metadata);
	  }
	  async _doSlowMo() {
	    await new Promise((f) => setTimeout(f, this._slowMo));
	  }
	  async onAfterCall(sdkObject, metadata) {
	    if (this._slowMo && shouldSlowMo(metadata))
	      await this._doSlowMo();
	  }
	  async onBeforeInputAction(sdkObject, metadata) {
	    if (this._muted)
	      return;
	    if (this._enabled && this._pauseOnNextStatement)
	      await this.pause(sdkObject, metadata);
	  }
	  async pause(sdkObject, metadata) {
	    if (this._muted)
	      return;
	    this._enabled = true;
	    metadata.pauseStartTime = (0, import_utils.monotonicTime)();
	    const result = new Promise((resolve) => {
	      this._pausedCallsMetadata.set(metadata, { resolve, sdkObject });
	    });
	    this.emit(Debugger.Events.PausedStateChanged);
	    return result;
	  }
	  resume(step) {
	    if (!this.isPaused())
	      return;
	    this._pauseOnNextStatement = step;
	    const endTime = (0, import_utils.monotonicTime)();
	    for (const [metadata, { resolve }] of this._pausedCallsMetadata) {
	      metadata.pauseEndTime = endTime;
	      resolve();
	    }
	    this._pausedCallsMetadata.clear();
	    this.emit(Debugger.Events.PausedStateChanged);
	  }
	  pauseOnNextStatement() {
	    this._pauseOnNextStatement = true;
	  }
	  isPaused(metadata) {
	    if (metadata)
	      return this._pausedCallsMetadata.has(metadata);
	    return !!this._pausedCallsMetadata.size;
	  }
	  pausedDetails() {
	    const result = [];
	    for (const [metadata, { sdkObject }] of this._pausedCallsMetadata)
	      result.push({ metadata, sdkObject });
	    return result;
	  }
	}
	function shouldPauseOnCall(sdkObject, metadata) {
	  if (sdkObject.attribution.playwright.options.isServer)
	    return false;
	  if (!sdkObject.attribution.browser?.options.headful && !(0, import_utils.isUnderTest)())
	    return false;
	  return metadata.method === "pause";
	}
	function shouldPauseBeforeStep(metadata) {
	  if (!metadata.apiName)
	    return false;
	  if (metadata.method === "close")
	    return true;
	  if (metadata.method === "waitForSelector" || metadata.method === "waitForEventInfo" || metadata.method === "querySelector" || metadata.method === "querySelectorAll")
	    return false;
	  const step = metadata.type + "." + metadata.method;
	  return import_debug.commandsWithTracingSnapshots.has(step) && !import_debug.pausesBeforeInputActions.has(metadata.type + "." + metadata.method);
	}
	function shouldSlowMo(metadata) {
	  return import_debug.slowMoActions.has(metadata.type + "." + metadata.method);
	}
	return _debugger;
}

var artifact$1;
var hasRequiredArtifact$1;

function requireArtifact$1 () {
	if (hasRequiredArtifact$1) return artifact$1;
	hasRequiredArtifact$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var artifact_exports = {};
	__export(artifact_exports, {
	  Artifact: () => Artifact
	});
	artifact$1 = __toCommonJS(artifact_exports);
	var import_fs = __toESM(require$$0$4);
	var import_utils = requireUtils();
	var import_errors = requireErrors$1();
	var import_instrumentation = requireInstrumentation();
	var import_manualPromise = requireManualPromise();
	class Artifact extends import_instrumentation.SdkObject {
	  constructor(parent, localPath, unaccessibleErrorMessage, cancelCallback) {
	    super(parent, "artifact");
	    this._finishedPromise = new import_manualPromise.ManualPromise();
	    this._saveCallbacks = [];
	    this._finished = false;
	    this._deleted = false;
	    this._localPath = localPath;
	    this._unaccessibleErrorMessage = unaccessibleErrorMessage;
	    this._cancelCallback = cancelCallback;
	  }
	  finishedPromise() {
	    return this._finishedPromise;
	  }
	  localPath() {
	    return this._localPath;
	  }
	  async localPathAfterFinished() {
	    if (this._unaccessibleErrorMessage)
	      throw new Error(this._unaccessibleErrorMessage);
	    await this._finishedPromise;
	    if (this._failureError)
	      throw this._failureError;
	    return this._localPath;
	  }
	  saveAs(saveCallback) {
	    if (this._unaccessibleErrorMessage)
	      throw new Error(this._unaccessibleErrorMessage);
	    if (this._deleted)
	      throw new Error(`File already deleted. Save before deleting.`);
	    if (this._failureError)
	      throw this._failureError;
	    if (this._finished) {
	      saveCallback(this._localPath).catch(() => {
	      });
	      return;
	    }
	    this._saveCallbacks.push(saveCallback);
	  }
	  async failureError() {
	    if (this._unaccessibleErrorMessage)
	      return this._unaccessibleErrorMessage;
	    await this._finishedPromise;
	    return this._failureError?.message || null;
	  }
	  async cancel() {
	    (0, import_utils.assert)(this._cancelCallback !== void 0);
	    return this._cancelCallback();
	  }
	  async delete() {
	    if (this._unaccessibleErrorMessage)
	      return;
	    const fileName = await this.localPathAfterFinished();
	    if (this._deleted)
	      return;
	    this._deleted = true;
	    if (fileName)
	      await import_fs.default.promises.unlink(fileName).catch((e) => {
	      });
	  }
	  async deleteOnContextClose() {
	    if (this._deleted)
	      return;
	    this._deleted = true;
	    if (!this._unaccessibleErrorMessage)
	      await import_fs.default.promises.unlink(this._localPath).catch((e) => {
	      });
	    await this.reportFinished(new import_errors.TargetClosedError());
	  }
	  async reportFinished(error) {
	    if (this._finished)
	      return;
	    this._finished = true;
	    this._failureError = error;
	    if (error) {
	      for (const callback of this._saveCallbacks)
	        await callback("", error);
	    } else {
	      for (const callback of this._saveCallbacks)
	        await callback(this._localPath);
	    }
	    this._saveCallbacks = [];
	    this._finishedPromise.resolve();
	  }
	}
	return artifact$1;
}

var utilityScriptSource;
var hasRequiredUtilityScriptSource;

function requireUtilityScriptSource () {
	if (hasRequiredUtilityScriptSource) return utilityScriptSource;
	hasRequiredUtilityScriptSource = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var utilityScriptSource_exports = {};
	__export(utilityScriptSource_exports, {
	  source: () => source
	});
	utilityScriptSource = __toCommonJS(utilityScriptSource_exports);
	const source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/injected/src/utilityScript.ts\nvar utilityScript_exports = {};\n__export(utilityScript_exports, {\n  UtilityScript: () => UtilityScript\n});\nmodule.exports = __toCommonJS(utilityScript_exports);\n\n// packages/playwright-core/src/utils/isomorphic/builtins.ts\nfunction builtins(global) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n  global = global != null ? global : globalThis;\n  if (!global["__playwright_builtins__"]) {\n    const builtins2 = {\n      setTimeout: (_a = global.setTimeout) == null ? void 0 : _a.bind(global),\n      clearTimeout: (_b = global.clearTimeout) == null ? void 0 : _b.bind(global),\n      setInterval: (_c = global.setInterval) == null ? void 0 : _c.bind(global),\n      clearInterval: (_d = global.clearInterval) == null ? void 0 : _d.bind(global),\n      requestAnimationFrame: (_e = global.requestAnimationFrame) == null ? void 0 : _e.bind(global),\n      cancelAnimationFrame: (_f = global.cancelAnimationFrame) == null ? void 0 : _f.bind(global),\n      requestIdleCallback: (_g = global.requestIdleCallback) == null ? void 0 : _g.bind(global),\n      cancelIdleCallback: (_h = global.cancelIdleCallback) == null ? void 0 : _h.bind(global),\n      performance: global.performance,\n      eval: (_i = global.eval) == null ? void 0 : _i.bind(global),\n      Intl: global.Intl,\n      Date: global.Date,\n      Map: global.Map,\n      Set: global.Set\n    };\n    Object.defineProperty(global, "__playwright_builtins__", { value: builtins2, configurable: false, enumerable: false, writable: false });\n  }\n  return global["__playwright_builtins__"];\n}\nvar instance = builtins();\nvar setTimeout = instance.setTimeout;\nvar clearTimeout = instance.clearTimeout;\nvar setInterval = instance.setInterval;\nvar clearInterval = instance.clearInterval;\nvar requestAnimationFrame = instance.requestAnimationFrame;\nvar cancelAnimationFrame = instance.cancelAnimationFrame;\nvar requestIdleCallback = instance.requestIdleCallback;\nvar cancelIdleCallback = instance.cancelIdleCallback;\nvar performance = instance.performance;\nvar Intl = instance.Intl;\nvar Date = instance.Date;\nvar Map = instance.Map;\nvar Set = instance.Set;\n\n// packages/playwright-core/src/utils/isomorphic/utilityScriptSerializers.ts\nfunction source(builtins2) {\n  function isRegExp(obj) {\n    try {\n      return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isDate(obj) {\n    try {\n      return obj instanceof builtins2.Date || Object.prototype.toString.call(obj) === "[object Date]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isURL(obj) {\n    try {\n      return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isError(obj) {\n    var _a;\n    try {\n      return obj instanceof Error || obj && ((_a = Object.getPrototypeOf(obj)) == null ? void 0 : _a.name) === "Error";\n    } catch (error) {\n      return false;\n    }\n  }\n  function isTypedArray(obj, constructor) {\n    try {\n      return obj instanceof constructor || Object.prototype.toString.call(obj) === `[object ${constructor.name}]`;\n    } catch (error) {\n      return false;\n    }\n  }\n  const typedArrayConstructors = {\n    i8: Int8Array,\n    ui8: Uint8Array,\n    ui8c: Uint8ClampedArray,\n    i16: Int16Array,\n    ui16: Uint16Array,\n    i32: Int32Array,\n    ui32: Uint32Array,\n    // TODO: add Float16Array once it\'s in baseline\n    f32: Float32Array,\n    f64: Float64Array,\n    bi64: BigInt64Array,\n    bui64: BigUint64Array\n  };\n  function typedArrayToBase64(array) {\n    if ("toBase64" in array)\n      return array.toBase64();\n    const binary = Array.from(new Uint8Array(array.buffer, array.byteOffset, array.byteLength)).map((b) => String.fromCharCode(b)).join("");\n    return btoa(binary);\n  }\n  function base64ToTypedArray(base64, TypedArrayConstructor) {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++)\n      bytes[i] = binary.charCodeAt(i);\n    return new TypedArrayConstructor(bytes.buffer);\n  }\n  function parseEvaluationResultValue(value, handles = [], refs = new builtins2.Map()) {\n    if (Object.is(value, void 0))\n      return void 0;\n    if (typeof value === "object" && value) {\n      if ("ref" in value)\n        return refs.get(value.ref);\n      if ("v" in value) {\n        if (value.v === "undefined")\n          return void 0;\n        if (value.v === "null")\n          return null;\n        if (value.v === "NaN")\n          return NaN;\n        if (value.v === "Infinity")\n          return Infinity;\n        if (value.v === "-Infinity")\n          return -Infinity;\n        if (value.v === "-0")\n          return -0;\n        return void 0;\n      }\n      if ("d" in value)\n        return new builtins2.Date(value.d);\n      if ("u" in value)\n        return new URL(value.u);\n      if ("bi" in value)\n        return BigInt(value.bi);\n      if ("e" in value) {\n        const error = new Error(value.e.m);\n        error.name = value.e.n;\n        error.stack = value.e.s;\n        return error;\n      }\n      if ("r" in value)\n        return new RegExp(value.r.p, value.r.f);\n      if ("a" in value) {\n        const result = [];\n        refs.set(value.id, result);\n        for (const a of value.a)\n          result.push(parseEvaluationResultValue(a, handles, refs));\n        return result;\n      }\n      if ("o" in value) {\n        const result = {};\n        refs.set(value.id, result);\n        for (const { k, v } of value.o)\n          result[k] = parseEvaluationResultValue(v, handles, refs);\n        return result;\n      }\n      if ("h" in value)\n        return handles[value.h];\n      if ("ta" in value)\n        return base64ToTypedArray(value.ta.b, typedArrayConstructors[value.ta.k]);\n    }\n    return value;\n  }\n  function serializeAsCallArgument(value, handleSerializer) {\n    return serialize(value, handleSerializer, { visited: new builtins2.Map(), lastId: 0 });\n  }\n  function serialize(value, handleSerializer, visitorInfo) {\n    if (value && typeof value === "object") {\n      if (typeof globalThis.Window === "function" && value instanceof globalThis.Window)\n        return "ref: <Window>";\n      if (typeof globalThis.Document === "function" && value instanceof globalThis.Document)\n        return "ref: <Document>";\n      if (typeof globalThis.Node === "function" && value instanceof globalThis.Node)\n        return "ref: <Node>";\n    }\n    return innerSerialize(value, handleSerializer, visitorInfo);\n  }\n  function innerSerialize(value, handleSerializer, visitorInfo) {\n    var _a;\n    const result = handleSerializer(value);\n    if ("fallThrough" in result)\n      value = result.fallThrough;\n    else\n      return result;\n    if (typeof value === "symbol")\n      return { v: "undefined" };\n    if (Object.is(value, void 0))\n      return { v: "undefined" };\n    if (Object.is(value, null))\n      return { v: "null" };\n    if (Object.is(value, NaN))\n      return { v: "NaN" };\n    if (Object.is(value, Infinity))\n      return { v: "Infinity" };\n    if (Object.is(value, -Infinity))\n      return { v: "-Infinity" };\n    if (Object.is(value, -0))\n      return { v: "-0" };\n    if (typeof value === "boolean")\n      return value;\n    if (typeof value === "number")\n      return value;\n    if (typeof value === "string")\n      return value;\n    if (typeof value === "bigint")\n      return { bi: value.toString() };\n    if (isError(value)) {\n      let stack;\n      if ((_a = value.stack) == null ? void 0 : _a.startsWith(value.name + ": " + value.message)) {\n        stack = value.stack;\n      } else {\n        stack = `${value.name}: ${value.message}\n${value.stack}`;\n      }\n      return { e: { n: value.name, m: value.message, s: stack } };\n    }\n    if (isDate(value))\n      return { d: value.toJSON() };\n    if (isURL(value))\n      return { u: value.toJSON() };\n    if (isRegExp(value))\n      return { r: { p: value.source, f: value.flags } };\n    for (const [k, ctor] of Object.entries(typedArrayConstructors)) {\n      if (isTypedArray(value, ctor))\n        return { ta: { b: typedArrayToBase64(value), k } };\n    }\n    const id = visitorInfo.visited.get(value);\n    if (id)\n      return { ref: id };\n    if (Array.isArray(value)) {\n      const a = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (let i = 0; i < value.length; ++i)\n        a.push(serialize(value[i], handleSerializer, visitorInfo));\n      return { a, id: id2 };\n    }\n    if (typeof value === "object") {\n      const o = [];\n      const id2 = ++visitorInfo.lastId;\n      visitorInfo.visited.set(value, id2);\n      for (const name of Object.keys(value)) {\n        let item;\n        try {\n          item = value[name];\n        } catch (e) {\n          continue;\n        }\n        if (name === "toJSON" && typeof item === "function")\n          o.push({ k: name, v: { o: [], id: 0 } });\n        else\n          o.push({ k: name, v: serialize(item, handleSerializer, visitorInfo) });\n      }\n      let jsonWrapper;\n      try {\n        if (o.length === 0 && value.toJSON && typeof value.toJSON === "function")\n          jsonWrapper = { value: value.toJSON() };\n      } catch (e) {\n      }\n      if (jsonWrapper)\n        return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);\n      return { o, id: id2 };\n    }\n  }\n  return { parseEvaluationResultValue, serializeAsCallArgument };\n}\n\n// packages/injected/src/utilityScript.ts\nvar UtilityScript = class {\n  constructor(isUnderTest) {\n    if (isUnderTest) {\n      globalThis.builtins = builtins();\n    }\n    const result = source(builtins());\n    this.serializeAsCallArgument = result.serializeAsCallArgument;\n    this.parseEvaluationResultValue = result.parseEvaluationResultValue;\n  }\n  evaluate(isFunction, returnByValue, expression, argCount, ...argsAndHandles) {\n    const args = argsAndHandles.slice(0, argCount);\n    const handles = argsAndHandles.slice(argCount);\n    const parameters = [];\n    for (let i = 0; i < args.length; i++)\n      parameters[i] = this.parseEvaluationResultValue(args[i], handles);\n    let result = builtins().eval(expression);\n    if (isFunction === true) {\n      result = result(...parameters);\n    } else if (isFunction === false) {\n      result = result;\n    } else {\n      if (typeof result === "function")\n        result = result(...parameters);\n    }\n    return returnByValue ? this._promiseAwareJsonValueNoThrow(result) : result;\n  }\n  jsonValue(returnByValue, value) {\n    if (value === void 0)\n      return void 0;\n    return this.serializeAsCallArgument(value, (value2) => ({ fallThrough: value2 }));\n  }\n  _promiseAwareJsonValueNoThrow(value) {\n    const safeJson = (value2) => {\n      try {\n        return this.jsonValue(true, value2);\n      } catch (e) {\n        return void 0;\n      }\n    };\n    if (value && typeof value === "object" && typeof value.then === "function") {\n      return (async () => {\n        const promiseValue = await value;\n        return safeJson(promiseValue);\n      })();\n    }\n    return safeJson(value);\n  }\n};\n';
	return utilityScriptSource;
}

var utilityScriptSerializers;
var hasRequiredUtilityScriptSerializers;

function requireUtilityScriptSerializers () {
	if (hasRequiredUtilityScriptSerializers) return utilityScriptSerializers;
	hasRequiredUtilityScriptSerializers = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var utilityScriptSerializers_exports = {};
	__export(utilityScriptSerializers_exports, {
	  source: () => source
	});
	utilityScriptSerializers = __toCommonJS(utilityScriptSerializers_exports);
	function source(builtins) {
	  function isRegExp(obj) {
	    try {
	      return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
	    } catch (error) {
	      return false;
	    }
	  }
	  function isDate(obj) {
	    try {
	      return obj instanceof builtins.Date || Object.prototype.toString.call(obj) === "[object Date]";
	    } catch (error) {
	      return false;
	    }
	  }
	  function isURL(obj) {
	    try {
	      return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
	    } catch (error) {
	      return false;
	    }
	  }
	  function isError(obj) {
	    try {
	      return obj instanceof Error || obj && Object.getPrototypeOf(obj)?.name === "Error";
	    } catch (error) {
	      return false;
	    }
	  }
	  function isTypedArray(obj, constructor) {
	    try {
	      return obj instanceof constructor || Object.prototype.toString.call(obj) === `[object ${constructor.name}]`;
	    } catch (error) {
	      return false;
	    }
	  }
	  const typedArrayConstructors = {
	    i8: Int8Array,
	    ui8: Uint8Array,
	    ui8c: Uint8ClampedArray,
	    i16: Int16Array,
	    ui16: Uint16Array,
	    i32: Int32Array,
	    ui32: Uint32Array,
	    // TODO: add Float16Array once it's in baseline
	    f32: Float32Array,
	    f64: Float64Array,
	    bi64: BigInt64Array,
	    bui64: BigUint64Array
	  };
	  function typedArrayToBase64(array) {
	    if ("toBase64" in array)
	      return array.toBase64();
	    const binary = Array.from(new Uint8Array(array.buffer, array.byteOffset, array.byteLength)).map((b) => String.fromCharCode(b)).join("");
	    return btoa(binary);
	  }
	  function base64ToTypedArray(base64, TypedArrayConstructor) {
	    const binary = atob(base64);
	    const bytes = new Uint8Array(binary.length);
	    for (let i = 0; i < binary.length; i++)
	      bytes[i] = binary.charCodeAt(i);
	    return new TypedArrayConstructor(bytes.buffer);
	  }
	  function parseEvaluationResultValue(value, handles = [], refs = new builtins.Map()) {
	    if (Object.is(value, void 0))
	      return void 0;
	    if (typeof value === "object" && value) {
	      if ("ref" in value)
	        return refs.get(value.ref);
	      if ("v" in value) {
	        if (value.v === "undefined")
	          return void 0;
	        if (value.v === "null")
	          return null;
	        if (value.v === "NaN")
	          return NaN;
	        if (value.v === "Infinity")
	          return Infinity;
	        if (value.v === "-Infinity")
	          return -Infinity;
	        if (value.v === "-0")
	          return -0;
	        return void 0;
	      }
	      if ("d" in value)
	        return new builtins.Date(value.d);
	      if ("u" in value)
	        return new URL(value.u);
	      if ("bi" in value)
	        return BigInt(value.bi);
	      if ("e" in value) {
	        const error = new Error(value.e.m);
	        error.name = value.e.n;
	        error.stack = value.e.s;
	        return error;
	      }
	      if ("r" in value)
	        return new RegExp(value.r.p, value.r.f);
	      if ("a" in value) {
	        const result = [];
	        refs.set(value.id, result);
	        for (const a of value.a)
	          result.push(parseEvaluationResultValue(a, handles, refs));
	        return result;
	      }
	      if ("o" in value) {
	        const result = {};
	        refs.set(value.id, result);
	        for (const { k, v } of value.o)
	          result[k] = parseEvaluationResultValue(v, handles, refs);
	        return result;
	      }
	      if ("h" in value)
	        return handles[value.h];
	      if ("ta" in value)
	        return base64ToTypedArray(value.ta.b, typedArrayConstructors[value.ta.k]);
	    }
	    return value;
	  }
	  function serializeAsCallArgument(value, handleSerializer) {
	    return serialize(value, handleSerializer, { visited: new builtins.Map(), lastId: 0 });
	  }
	  function serialize(value, handleSerializer, visitorInfo) {
	    if (value && typeof value === "object") {
	      if (typeof globalThis.Window === "function" && value instanceof globalThis.Window)
	        return "ref: <Window>";
	      if (typeof globalThis.Document === "function" && value instanceof globalThis.Document)
	        return "ref: <Document>";
	      if (typeof globalThis.Node === "function" && value instanceof globalThis.Node)
	        return "ref: <Node>";
	    }
	    return innerSerialize(value, handleSerializer, visitorInfo);
	  }
	  function innerSerialize(value, handleSerializer, visitorInfo) {
	    const result = handleSerializer(value);
	    if ("fallThrough" in result)
	      value = result.fallThrough;
	    else
	      return result;
	    if (typeof value === "symbol")
	      return { v: "undefined" };
	    if (Object.is(value, void 0))
	      return { v: "undefined" };
	    if (Object.is(value, null))
	      return { v: "null" };
	    if (Object.is(value, NaN))
	      return { v: "NaN" };
	    if (Object.is(value, Infinity))
	      return { v: "Infinity" };
	    if (Object.is(value, -Infinity))
	      return { v: "-Infinity" };
	    if (Object.is(value, -0))
	      return { v: "-0" };
	    if (typeof value === "boolean")
	      return value;
	    if (typeof value === "number")
	      return value;
	    if (typeof value === "string")
	      return value;
	    if (typeof value === "bigint")
	      return { bi: value.toString() };
	    if (isError(value)) {
	      let stack;
	      if (value.stack?.startsWith(value.name + ": " + value.message)) {
	        stack = value.stack;
	      } else {
	        stack = `${value.name}: ${value.message}
${value.stack}`;
	      }
	      return { e: { n: value.name, m: value.message, s: stack } };
	    }
	    if (isDate(value))
	      return { d: value.toJSON() };
	    if (isURL(value))
	      return { u: value.toJSON() };
	    if (isRegExp(value))
	      return { r: { p: value.source, f: value.flags } };
	    for (const [k, ctor] of Object.entries(typedArrayConstructors)) {
	      if (isTypedArray(value, ctor))
	        return { ta: { b: typedArrayToBase64(value), k } };
	    }
	    const id = visitorInfo.visited.get(value);
	    if (id)
	      return { ref: id };
	    if (Array.isArray(value)) {
	      const a = [];
	      const id2 = ++visitorInfo.lastId;
	      visitorInfo.visited.set(value, id2);
	      for (let i = 0; i < value.length; ++i)
	        a.push(serialize(value[i], handleSerializer, visitorInfo));
	      return { a, id: id2 };
	    }
	    if (typeof value === "object") {
	      const o = [];
	      const id2 = ++visitorInfo.lastId;
	      visitorInfo.visited.set(value, id2);
	      for (const name of Object.keys(value)) {
	        let item;
	        try {
	          item = value[name];
	        } catch (e) {
	          continue;
	        }
	        if (name === "toJSON" && typeof item === "function")
	          o.push({ k: name, v: { o: [], id: 0 } });
	        else
	          o.push({ k: name, v: serialize(item, handleSerializer, visitorInfo) });
	      }
	      let jsonWrapper;
	      try {
	        if (o.length === 0 && value.toJSON && typeof value.toJSON === "function")
	          jsonWrapper = { value: value.toJSON() };
	      } catch (e) {
	      }
	      if (jsonWrapper)
	        return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);
	      return { o, id: id2 };
	    }
	  }
	  return { parseEvaluationResultValue, serializeAsCallArgument };
	}
	return utilityScriptSerializers;
}

var javascript$1;
var hasRequiredJavascript$1;

function requireJavascript$1 () {
	if (hasRequiredJavascript$1) return javascript$1;
	hasRequiredJavascript$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var javascript_exports = {};
	__export(javascript_exports, {
	  ExecutionContext: () => ExecutionContext,
	  JSHandle: () => JSHandle,
	  JavaScriptErrorInEvaluate: () => JavaScriptErrorInEvaluate,
	  evaluate: () => evaluate,
	  evaluateExpression: () => evaluateExpression,
	  isJavaScriptErrorInEvaluate: () => isJavaScriptErrorInEvaluate,
	  normalizeEvaluationExpression: () => normalizeEvaluationExpression,
	  parseEvaluationResultValue: () => parseEvaluationResultValue,
	  parseUnserializableValue: () => parseUnserializableValue,
	  serializeAsCallArgument: () => serializeAsCallArgument,
	  sparseArrayToString: () => sparseArrayToString
	});
	javascript$1 = __toCommonJS(javascript_exports);
	var import_instrumentation = requireInstrumentation();
	var utilityScriptSource = __toESM(requireUtilityScriptSource());
	var import_utils = requireUtils();
	var import_builtins = requireBuiltins();
	var import_utilityScriptSerializers = requireUtilityScriptSerializers();
	var import_manualPromise = requireManualPromise();
	const utilityScriptSerializers = (0, import_utilityScriptSerializers.source)((0, import_builtins.builtins)());
	const parseEvaluationResultValue = utilityScriptSerializers.parseEvaluationResultValue;
	const serializeAsCallArgument = utilityScriptSerializers.serializeAsCallArgument;
	class ExecutionContext extends import_instrumentation.SdkObject {
	  constructor(parent, delegate, worldNameForTest) {
	    super(parent, "execution-context");
	    this._contextDestroyedScope = new import_manualPromise.LongStandingScope();
	    this.worldNameForTest = worldNameForTest;
	    this.delegate = delegate;
	  }
	  contextDestroyed(reason) {
	    this._contextDestroyedScope.close(new Error(reason));
	  }
	  async _raceAgainstContextDestroyed(promise) {
	    return this._contextDestroyedScope.race(promise);
	  }
	  rawEvaluateJSON(expression) {
	    return this._raceAgainstContextDestroyed(this.delegate.rawEvaluateJSON(expression));
	  }
	  rawEvaluateHandle(expression) {
	    return this._raceAgainstContextDestroyed(this.delegate.rawEvaluateHandle(this, expression));
	  }
	  async evaluateWithArguments(expression, returnByValue, values, handles) {
	    const utilityScript = await this._utilityScript();
	    return this._raceAgainstContextDestroyed(this.delegate.evaluateWithArguments(expression, returnByValue, utilityScript, values, handles));
	  }
	  getProperties(object) {
	    return this._raceAgainstContextDestroyed(this.delegate.getProperties(object));
	  }
	  releaseHandle(handle) {
	    return this.delegate.releaseHandle(handle);
	  }
	  adoptIfNeeded(handle) {
	    return null;
	  }
	  _utilityScript() {
	    if (!this._utilityScriptPromise) {
	      const source2 = `
      (() => {
        const module = {};
        ${utilityScriptSource.source}
        return new (module.exports.UtilityScript())(${(0, import_utils.isUnderTest)()});
      })();`;
	      this._utilityScriptPromise = this._raceAgainstContextDestroyed(this.delegate.rawEvaluateHandle(this, source2)).then((handle) => {
	        handle._setPreview("UtilityScript");
	        return handle;
	      });
	    }
	    return this._utilityScriptPromise;
	  }
	  async doSlowMo() {
	  }
	}
	class JSHandle extends import_instrumentation.SdkObject {
	  constructor(context, type, preview, objectId, value) {
	    super(context, "handle");
	    this.__jshandle = true;
	    this._disposed = false;
	    this._context = context;
	    this._objectId = objectId;
	    this._value = value;
	    this._objectType = type;
	    this._preview = this._objectId ? preview || `JSHandle@${this._objectType}` : String(value);
	    if (this._objectId && globalThis.leakedJSHandles)
	      globalThis.leakedJSHandles.set(this, new Error("Leaked JSHandle"));
	  }
	  async evaluate(pageFunction, arg) {
	    return evaluate(this._context, true, pageFunction, this, arg);
	  }
	  async evaluateHandle(pageFunction, arg) {
	    return evaluate(this._context, false, pageFunction, this, arg);
	  }
	  async evaluateExpression(expression, options, arg) {
	    const value = await evaluateExpression(this._context, expression, { ...options, returnByValue: true }, this, arg);
	    await this._context.doSlowMo();
	    return value;
	  }
	  async evaluateExpressionHandle(expression, options, arg) {
	    const value = await evaluateExpression(this._context, expression, { ...options, returnByValue: false }, this, arg);
	    await this._context.doSlowMo();
	    return value;
	  }
	  async getProperty(propertyName) {
	    const objectHandle = await this.evaluateHandle((object, propertyName2) => {
	      const result2 = { __proto__: null };
	      result2[propertyName2] = object[propertyName2];
	      return result2;
	    }, propertyName);
	    const properties = await objectHandle.getProperties();
	    const result = properties.get(propertyName);
	    objectHandle.dispose();
	    return result;
	  }
	  async getProperties() {
	    if (!this._objectId)
	      return /* @__PURE__ */ new Map();
	    return this._context.getProperties(this);
	  }
	  rawValue() {
	    return this._value;
	  }
	  async jsonValue() {
	    if (!this._objectId)
	      return this._value;
	    const script = `(utilityScript, ...args) => utilityScript.jsonValue(...args)`;
	    return this._context.evaluateWithArguments(script, true, [true], [this]);
	  }
	  asElement() {
	    return null;
	  }
	  dispose() {
	    if (this._disposed)
	      return;
	    this._disposed = true;
	    if (this._objectId) {
	      this._context.releaseHandle(this).catch((e) => {
	      });
	      if (globalThis.leakedJSHandles)
	        globalThis.leakedJSHandles.delete(this);
	    }
	  }
	  toString() {
	    return this._preview;
	  }
	  _setPreviewCallback(callback) {
	    this._previewCallback = callback;
	  }
	  preview() {
	    return this._preview;
	  }
	  worldNameForTest() {
	    return this._context.worldNameForTest;
	  }
	  _setPreview(preview) {
	    this._preview = preview;
	    if (this._previewCallback)
	      this._previewCallback(preview);
	  }
	}
	async function evaluate(context, returnByValue, pageFunction, ...args) {
	  return evaluateExpression(context, String(pageFunction), { returnByValue, isFunction: typeof pageFunction === "function" }, ...args);
	}
	async function evaluateExpression(context, expression, options, ...args) {
	  expression = normalizeEvaluationExpression(expression, options.isFunction);
	  const handles = [];
	  const toDispose = [];
	  const pushHandle = (handle) => {
	    handles.push(handle);
	    return handles.length - 1;
	  };
	  args = args.map((arg) => serializeAsCallArgument(arg, (handle) => {
	    if (handle instanceof JSHandle) {
	      if (!handle._objectId)
	        return { fallThrough: handle._value };
	      if (handle._disposed)
	        throw new JavaScriptErrorInEvaluate("JSHandle is disposed!");
	      const adopted = context.adoptIfNeeded(handle);
	      if (adopted === null)
	        return { h: pushHandle(Promise.resolve(handle)) };
	      toDispose.push(adopted);
	      return { h: pushHandle(adopted) };
	    }
	    return { fallThrough: handle };
	  }));
	  const utilityScriptObjects = [];
	  for (const handle of await Promise.all(handles)) {
	    if (handle._context !== context)
	      throw new JavaScriptErrorInEvaluate("JSHandles can be evaluated only in the context they were created!");
	    utilityScriptObjects.push(handle);
	  }
	  const utilityScriptValues = [options.isFunction, options.returnByValue, expression, args.length, ...args];
	  const script = `(utilityScript, ...args) => utilityScript.evaluate(...args)`;
	  try {
	    return await context.evaluateWithArguments(script, options.returnByValue || false, utilityScriptValues, utilityScriptObjects);
	  } finally {
	    toDispose.map((handlePromise) => handlePromise.then((handle) => handle.dispose()));
	  }
	}
	function parseUnserializableValue(unserializableValue) {
	  if (unserializableValue === "NaN")
	    return NaN;
	  if (unserializableValue === "Infinity")
	    return Infinity;
	  if (unserializableValue === "-Infinity")
	    return -Infinity;
	  if (unserializableValue === "-0")
	    return -0;
	}
	function normalizeEvaluationExpression(expression, isFunction) {
	  expression = expression.trim();
	  if (isFunction) {
	    try {
	      new Function("(" + expression + ")");
	    } catch (e1) {
	      if (expression.startsWith("async "))
	        expression = "async function " + expression.substring("async ".length);
	      else
	        expression = "function " + expression;
	      try {
	        new Function("(" + expression + ")");
	      } catch (e2) {
	        throw new Error("Passed function is not well-serializable!");
	      }
	    }
	  }
	  if (/^(async)?\s*function(\s|\()/.test(expression))
	    expression = "(" + expression + ")";
	  return expression;
	}
	class JavaScriptErrorInEvaluate extends Error {
	}
	function isJavaScriptErrorInEvaluate(error) {
	  return error instanceof JavaScriptErrorInEvaluate;
	}
	function sparseArrayToString(entries) {
	  const arrayEntries = [];
	  for (const { name, value } of entries) {
	    const index = +name;
	    if (isNaN(index) || index < 0)
	      continue;
	    arrayEntries.push({ index, value });
	  }
	  arrayEntries.sort((a, b) => a.index - b.index);
	  let lastIndex = -1;
	  const tokens = [];
	  for (const { index, value } of arrayEntries) {
	    const emptyItems = index - lastIndex - 1;
	    if (emptyItems === 1)
	      tokens.push(`empty`);
	    else if (emptyItems > 1)
	      tokens.push(`empty x ${emptyItems}`);
	    tokens.push(String(value));
	    lastIndex = index;
	  }
	  return "[" + tokens.join(", ") + "]";
	}
	return javascript$1;
}

var progress;
var hasRequiredProgress;

function requireProgress () {
	if (hasRequiredProgress) return progress;
	hasRequiredProgress = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var progress_exports = {};
	__export(progress_exports, {
	  ProgressController: () => ProgressController
	});
	progress = __toCommonJS(progress_exports);
	var import_errors = requireErrors$1();
	var import_utils = requireUtils();
	var import_manualPromise = requireManualPromise();
	class ProgressController {
	  constructor(metadata, sdkObject) {
	    this._forceAbortPromise = new import_manualPromise.ManualPromise();
	    // Cleanups to be run only in the case of abort.
	    this._cleanups = [];
	    this._logName = "api";
	    this._state = "before";
	    this._deadline = 0;
	    this._timeout = 0;
	    this.metadata = metadata;
	    this.sdkObject = sdkObject;
	    this.instrumentation = sdkObject.instrumentation;
	    this._forceAbortPromise.catch((e) => null);
	  }
	  setLogName(logName) {
	    this._logName = logName;
	  }
	  abort(error) {
	    this._forceAbortPromise.reject(error);
	  }
	  async run(task, timeout) {
	    if (timeout) {
	      this._timeout = timeout;
	      this._deadline = timeout ? (0, import_utils.monotonicTime)() + timeout : 0;
	    }
	    (0, import_utils.assert)(this._state === "before");
	    this._state = "running";
	    this.sdkObject.attribution.context?._activeProgressControllers.add(this);
	    const progress = {
	      log: (message) => {
	        if (this._state === "running")
	          this.metadata.log.push(message);
	        this.instrumentation.onCallLog(this.sdkObject, this.metadata, this._logName, message);
	      },
	      timeUntilDeadline: () => this._deadline ? this._deadline - (0, import_utils.monotonicTime)() : 2147483647,
	      // 2^31-1 safe setTimeout in Node.
	      isRunning: () => this._state === "running",
	      cleanupWhenAborted: (cleanup) => {
	        if (this._state === "running")
	          this._cleanups.push(cleanup);
	        else
	          runCleanup(cleanup);
	      },
	      throwIfAborted: () => {
	        if (this._state === "aborted")
	          throw new AbortedError();
	      },
	      metadata: this.metadata
	    };
	    const timeoutError = new import_errors.TimeoutError(`Timeout ${this._timeout}ms exceeded.`);
	    const timer = setTimeout(() => this._forceAbortPromise.reject(timeoutError), progress.timeUntilDeadline());
	    try {
	      const promise = task(progress);
	      const result = await Promise.race([promise, this._forceAbortPromise]);
	      this._state = "finished";
	      return result;
	    } catch (e) {
	      this._state = "aborted";
	      await Promise.all(this._cleanups.splice(0).map(runCleanup));
	      throw e;
	    } finally {
	      this.sdkObject.attribution.context?._activeProgressControllers.delete(this);
	      clearTimeout(timer);
	    }
	  }
	}
	async function runCleanup(cleanup) {
	  try {
	    await cleanup();
	  } catch (e) {
	  }
	}
	class AbortedError extends Error {
	}
	return progress;
}

var fileUploadUtils;
var hasRequiredFileUploadUtils;

function requireFileUploadUtils () {
	if (hasRequiredFileUploadUtils) return fileUploadUtils;
	hasRequiredFileUploadUtils = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var fileUploadUtils_exports = {};
	__export(fileUploadUtils_exports, {
	  fileUploadSizeLimit: () => fileUploadSizeLimit,
	  prepareFilesForUpload: () => prepareFilesForUpload
	});
	fileUploadUtils = __toCommonJS(fileUploadUtils_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_assert = requireAssert$1();
	var import_utilsBundle = requireUtilsBundle();
	const fileUploadSizeLimit = 50 * 1024 * 1024;
	async function filesExceedUploadLimit(files) {
	  const sizes = await Promise.all(files.map(async (file) => (await import_fs.default.promises.stat(file)).size));
	  return sizes.reduce((total, size) => total + size, 0) >= fileUploadSizeLimit;
	}
	async function prepareFilesForUpload(frame, params) {
	  const { payloads, streams, directoryStream } = params;
	  let { localPaths, localDirectory } = params;
	  if ([payloads, localPaths, localDirectory, streams, directoryStream].filter(Boolean).length !== 1)
	    throw new Error("Exactly one of payloads, localPaths and streams must be provided");
	  if (streams)
	    localPaths = streams.map((c) => c.path());
	  if (directoryStream)
	    localDirectory = directoryStream.path();
	  if (localPaths) {
	    for (const p of localPaths)
	      (0, import_assert.assert)(import_path.default.isAbsolute(p) && import_path.default.resolve(p) === p, "Paths provided to localPaths must be absolute and fully resolved.");
	  }
	  let fileBuffers = payloads;
	  if (!frame._page._browserContext._browser._isCollocatedWithServer) {
	    if (localPaths) {
	      if (await filesExceedUploadLimit(localPaths))
	        throw new Error("Cannot transfer files larger than 50Mb to a browser not co-located with the server");
	      fileBuffers = await Promise.all(localPaths.map(async (item) => {
	        return {
	          name: import_path.default.basename(item),
	          buffer: await import_fs.default.promises.readFile(item),
	          lastModifiedMs: (await import_fs.default.promises.stat(item)).mtimeMs
	        };
	      }));
	      localPaths = void 0;
	    }
	  }
	  const filePayloads = fileBuffers?.map((payload) => ({
	    name: payload.name,
	    mimeType: payload.mimeType || import_utilsBundle.mime.getType(payload.name) || "application/octet-stream",
	    buffer: payload.buffer.toString("base64"),
	    lastModifiedMs: payload.lastModifiedMs
	  }));
	  return { localPaths, localDirectory, filePayloads };
	}
	return fileUploadUtils;
}

var injectedScriptSource;
var hasRequiredInjectedScriptSource;

function requireInjectedScriptSource () {
	if (hasRequiredInjectedScriptSource) return injectedScriptSource;
	hasRequiredInjectedScriptSource = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var injectedScriptSource_exports = {};
	__export(injectedScriptSource_exports, {
	  source: () => source
	});
	injectedScriptSource = __toCommonJS(injectedScriptSource_exports);
	const source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/injected/src/injectedScript.ts\nvar injectedScript_exports = {};\n__export(injectedScript_exports, {\n  InjectedScript: () => InjectedScript\n});\nmodule.exports = __toCommonJS(injectedScript_exports);\n\n// packages/playwright-core/src/utils/isomorphic/ariaSnapshot.ts\nfunction parseAriaSnapshot(yaml, text, options = {}) {\n  var _a;\n  const lineCounter = new yaml.LineCounter();\n  const parseOptions = {\n    keepSourceTokens: true,\n    lineCounter,\n    ...options\n  };\n  const yamlDoc = yaml.parseDocument(text, parseOptions);\n  const errors = [];\n  const convertRange = (range) => {\n    return [lineCounter.linePos(range[0]), lineCounter.linePos(range[1])];\n  };\n  const addError = (error) => {\n    errors.push({\n      message: error.message,\n      range: [lineCounter.linePos(error.pos[0]), lineCounter.linePos(error.pos[1])]\n    });\n  };\n  const convertSeq = (container, seq) => {\n    for (const item of seq.items) {\n      const itemIsString = item instanceof yaml.Scalar && typeof item.value === "string";\n      if (itemIsString) {\n        const childNode = KeyParser.parse(item, parseOptions, errors);\n        if (childNode) {\n          container.children = container.children || [];\n          container.children.push(childNode);\n        }\n        continue;\n      }\n      const itemIsMap = item instanceof yaml.YAMLMap;\n      if (itemIsMap) {\n        convertMap(container, item);\n        continue;\n      }\n      errors.push({\n        message: "Sequence items should be strings or maps",\n        range: convertRange(item.range || seq.range)\n      });\n    }\n  };\n  const convertMap = (container, map) => {\n    var _a2;\n    for (const entry of map.items) {\n      container.children = container.children || [];\n      const keyIsString = entry.key instanceof yaml.Scalar && typeof entry.key.value === "string";\n      if (!keyIsString) {\n        errors.push({\n          message: "Only string keys are supported",\n          range: convertRange(entry.key.range || map.range)\n        });\n        continue;\n      }\n      const key = entry.key;\n      const value = entry.value;\n      if (key.value === "text") {\n        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";\n        if (!valueIsString) {\n          errors.push({\n            message: "Text value should be a string",\n            range: convertRange(entry.value.range || map.range)\n          });\n          continue;\n        }\n        container.children.push({\n          kind: "text",\n          text: valueOrRegex(value.value)\n        });\n        continue;\n      }\n      if (key.value === "/children") {\n        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";\n        if (!valueIsString || value.value !== "contain" && value.value !== "equal" && value.value !== "deep-equal") {\n          errors.push({\n            message: \'Strict value should be "contain", "equal" or "deep-equal"\',\n            range: convertRange(entry.value.range || map.range)\n          });\n          continue;\n        }\n        container.containerMode = value.value;\n        continue;\n      }\n      if (key.value.startsWith("/")) {\n        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";\n        if (!valueIsString) {\n          errors.push({\n            message: "Property value should be a string",\n            range: convertRange(entry.value.range || map.range)\n          });\n          continue;\n        }\n        container.props = (_a2 = container.props) != null ? _a2 : {};\n        container.props[key.value.slice(1)] = valueOrRegex(value.value);\n        continue;\n      }\n      const childNode = KeyParser.parse(key, parseOptions, errors);\n      if (!childNode)\n        continue;\n      const valueIsScalar = value instanceof yaml.Scalar;\n      if (valueIsScalar) {\n        const type = typeof value.value;\n        if (type !== "string" && type !== "number" && type !== "boolean") {\n          errors.push({\n            message: "Node value should be a string or a sequence",\n            range: convertRange(entry.value.range || map.range)\n          });\n          continue;\n        }\n        container.children.push({\n          ...childNode,\n          children: [{\n            kind: "text",\n            text: valueOrRegex(String(value.value))\n          }]\n        });\n        continue;\n      }\n      const valueIsSequence = value instanceof yaml.YAMLSeq;\n      if (valueIsSequence) {\n        container.children.push(childNode);\n        convertSeq(childNode, value);\n        continue;\n      }\n      errors.push({\n        message: "Map values should be strings or sequences",\n        range: convertRange(entry.value.range || map.range)\n      });\n    }\n  };\n  const fragment = { kind: "role", role: "fragment" };\n  yamlDoc.errors.forEach(addError);\n  if (errors.length)\n    return { errors, fragment };\n  if (!(yamlDoc.contents instanceof yaml.YAMLSeq)) {\n    errors.push({\n      message: \'Aria snapshot must be a YAML sequence, elements starting with " -"\',\n      range: yamlDoc.contents ? convertRange(yamlDoc.contents.range) : [{ line: 0, col: 0 }, { line: 0, col: 0 }]\n    });\n  }\n  if (errors.length)\n    return { errors, fragment };\n  convertSeq(fragment, yamlDoc.contents);\n  if (errors.length)\n    return { errors, fragment: emptyFragment };\n  if (((_a = fragment.children) == null ? void 0 : _a.length) === 1)\n    return { fragment: fragment.children[0], errors };\n  return { fragment, errors };\n}\nvar emptyFragment = { kind: "role", role: "fragment" };\nfunction normalizeWhitespace(text) {\n  return text.replace(/[\\u200b\\u00ad]/g, "").replace(/[\\r\\n\\s\\t]+/g, " ").trim();\n}\nfunction valueOrRegex(value) {\n  return value.startsWith("/") && value.endsWith("/") && value.length > 1 ? { pattern: value.slice(1, -1) } : normalizeWhitespace(value);\n}\nvar KeyParser = class _KeyParser {\n  static parse(text, options, errors) {\n    try {\n      return new _KeyParser(text.value)._parse();\n    } catch (e) {\n      if (e instanceof ParserError) {\n        const message = options.prettyErrors === false ? e.message : e.message + ":\\n\\n" + text.value + "\\n" + " ".repeat(e.pos) + "^\\n";\n        errors.push({\n          message,\n          range: [options.lineCounter.linePos(text.range[0]), options.lineCounter.linePos(text.range[0] + e.pos)]\n        });\n        return null;\n      }\n      throw e;\n    }\n  }\n  constructor(input) {\n    this._input = input;\n    this._pos = 0;\n    this._length = input.length;\n  }\n  _peek() {\n    return this._input[this._pos] || "";\n  }\n  _next() {\n    if (this._pos < this._length)\n      return this._input[this._pos++];\n    return null;\n  }\n  _eof() {\n    return this._pos >= this._length;\n  }\n  _isWhitespace() {\n    return !this._eof() && /\\s/.test(this._peek());\n  }\n  _skipWhitespace() {\n    while (this._isWhitespace())\n      this._pos++;\n  }\n  _readIdentifier(type) {\n    if (this._eof())\n      this._throwError(`Unexpected end of input when expecting ${type}`);\n    const start = this._pos;\n    while (!this._eof() && /[a-zA-Z]/.test(this._peek()))\n      this._pos++;\n    return this._input.slice(start, this._pos);\n  }\n  _readString() {\n    let result = "";\n    let escaped = false;\n    while (!this._eof()) {\n      const ch = this._next();\n      if (escaped) {\n        result += ch;\n        escaped = false;\n      } else if (ch === "\\\\") {\n        escaped = true;\n      } else if (ch === \'"\') {\n        return result;\n      } else {\n        result += ch;\n      }\n    }\n    this._throwError("Unterminated string");\n  }\n  _throwError(message, offset = 0) {\n    throw new ParserError(message, offset || this._pos);\n  }\n  _readRegex() {\n    let result = "";\n    let escaped = false;\n    let insideClass = false;\n    while (!this._eof()) {\n      const ch = this._next();\n      if (escaped) {\n        result += ch;\n        escaped = false;\n      } else if (ch === "\\\\") {\n        escaped = true;\n        result += ch;\n      } else if (ch === "/" && !insideClass) {\n        return { pattern: result };\n      } else if (ch === "[") {\n        insideClass = true;\n        result += ch;\n      } else if (ch === "]" && insideClass) {\n        result += ch;\n        insideClass = false;\n      } else {\n        result += ch;\n      }\n    }\n    this._throwError("Unterminated regex");\n  }\n  _readStringOrRegex() {\n    const ch = this._peek();\n    if (ch === \'"\') {\n      this._next();\n      return normalizeWhitespace(this._readString());\n    }\n    if (ch === "/") {\n      this._next();\n      return this._readRegex();\n    }\n    return null;\n  }\n  _readAttributes(result) {\n    let errorPos = this._pos;\n    while (true) {\n      this._skipWhitespace();\n      if (this._peek() === "[") {\n        this._next();\n        this._skipWhitespace();\n        errorPos = this._pos;\n        const flagName = this._readIdentifier("attribute");\n        this._skipWhitespace();\n        let flagValue = "";\n        if (this._peek() === "=") {\n          this._next();\n          this._skipWhitespace();\n          errorPos = this._pos;\n          while (this._peek() !== "]" && !this._isWhitespace() && !this._eof())\n            flagValue += this._next();\n        }\n        this._skipWhitespace();\n        if (this._peek() !== "]")\n          this._throwError("Expected ]");\n        this._next();\n        this._applyAttribute(result, flagName, flagValue || "true", errorPos);\n      } else {\n        break;\n      }\n    }\n  }\n  _parse() {\n    this._skipWhitespace();\n    const role = this._readIdentifier("role");\n    this._skipWhitespace();\n    const name = this._readStringOrRegex() || "";\n    const result = { kind: "role", role, name };\n    this._readAttributes(result);\n    this._skipWhitespace();\n    if (!this._eof())\n      this._throwError("Unexpected input");\n    return result;\n  }\n  _applyAttribute(node, key, value, errorPos) {\n    if (key === "checked") {\n      this._assert(value === "true" || value === "false" || value === "mixed", \'Value of "checked" attribute must be a boolean or "mixed"\', errorPos);\n      node.checked = value === "true" ? true : value === "false" ? false : "mixed";\n      return;\n    }\n    if (key === "disabled") {\n      this._assert(value === "true" || value === "false", \'Value of "disabled" attribute must be a boolean\', errorPos);\n      node.disabled = value === "true";\n      return;\n    }\n    if (key === "expanded") {\n      this._assert(value === "true" || value === "false", \'Value of "expanded" attribute must be a boolean\', errorPos);\n      node.expanded = value === "true";\n      return;\n    }\n    if (key === "level") {\n      this._assert(!isNaN(Number(value)), \'Value of "level" attribute must be a number\', errorPos);\n      node.level = Number(value);\n      return;\n    }\n    if (key === "pressed") {\n      this._assert(value === "true" || value === "false" || value === "mixed", \'Value of "pressed" attribute must be a boolean or "mixed"\', errorPos);\n      node.pressed = value === "true" ? true : value === "false" ? false : "mixed";\n      return;\n    }\n    if (key === "selected") {\n      this._assert(value === "true" || value === "false", \'Value of "selected" attribute must be a boolean\', errorPos);\n      node.selected = value === "true";\n      return;\n    }\n    this._assert(false, `Unsupported attribute [${key}]`, errorPos);\n  }\n  _assert(value, message, valuePos) {\n    if (!value)\n      this._throwError(message || "Assertion error", valuePos);\n  }\n};\nvar ParserError = class extends Error {\n  constructor(message, pos) {\n    super(message);\n    this.pos = pos;\n  }\n};\n\n// packages/playwright-core/src/utils/isomorphic/builtins.ts\nfunction builtins(global) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n  global = global != null ? global : globalThis;\n  if (!global["__playwright_builtins__"]) {\n    const builtins2 = {\n      setTimeout: (_a = global.setTimeout) == null ? void 0 : _a.bind(global),\n      clearTimeout: (_b = global.clearTimeout) == null ? void 0 : _b.bind(global),\n      setInterval: (_c = global.setInterval) == null ? void 0 : _c.bind(global),\n      clearInterval: (_d = global.clearInterval) == null ? void 0 : _d.bind(global),\n      requestAnimationFrame: (_e = global.requestAnimationFrame) == null ? void 0 : _e.bind(global),\n      cancelAnimationFrame: (_f = global.cancelAnimationFrame) == null ? void 0 : _f.bind(global),\n      requestIdleCallback: (_g = global.requestIdleCallback) == null ? void 0 : _g.bind(global),\n      cancelIdleCallback: (_h = global.cancelIdleCallback) == null ? void 0 : _h.bind(global),\n      performance: global.performance,\n      eval: (_i = global.eval) == null ? void 0 : _i.bind(global),\n      Intl: global.Intl,\n      Date: global.Date,\n      Map: global.Map,\n      Set: global.Set\n    };\n    Object.defineProperty(global, "__playwright_builtins__", { value: builtins2, configurable: false, enumerable: false, writable: false });\n  }\n  return global["__playwright_builtins__"];\n}\nvar instance = builtins();\nvar setTimeout = instance.setTimeout;\nvar clearTimeout = instance.clearTimeout;\nvar setInterval = instance.setInterval;\nvar clearInterval = instance.clearInterval;\nvar requestAnimationFrame = instance.requestAnimationFrame;\nvar cancelAnimationFrame = instance.cancelAnimationFrame;\nvar requestIdleCallback = instance.requestIdleCallback;\nvar cancelIdleCallback = instance.cancelIdleCallback;\nvar performance = instance.performance;\nvar Intl = instance.Intl;\nvar Date = instance.Date;\nvar Map = instance.Map;\nvar Set = instance.Set;\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = "InvalidCharacterError";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw "Spec Error: no more than three codepoints of lookahead.";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken("");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = "id";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === "url" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = "";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken("");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(""), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = "";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error("Internal parse error");\n  };\n  const consumeANumber = function() {\n    let repr = "";\n    let type = "integer";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error("I\'m infinite-looping!");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = "";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return "" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADSTRING";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADURL";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "WHITESPACE";\n  }\n  toString() {\n    return "WS";\n  }\n  toSource() {\n    return " ";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDO";\n  }\n  toSource() {\n    return "<!--";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDC";\n  }\n  toSource() {\n    return "-->";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ":";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ";";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ",";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n    this.mirror = "";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "{";\n    this.value = "{";\n    this.mirror = "}";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "}";\n    this.value = "}";\n    this.mirror = "{";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "[";\n    this.value = "[";\n    this.mirror = "]";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "]";\n    this.value = "]";\n    this.mirror = "[";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "(";\n    this.value = "(";\n    this.mirror = ")";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = ")";\n    this.value = ")";\n    this.mirror = "(";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "~=";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "|=";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "^=";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "$=";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "*=";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "||";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "EOF";\n  }\n  toSource() {\n    return "";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = "DELIM";\n    this.value = "";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return "DELIM(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === "\\\\")\n      return "\\\\\\n";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "IDENT";\n    this.value = val;\n  }\n  toString() {\n    return "IDENT(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "FUNCTION";\n    this.value = val;\n    this.mirror = ")";\n  }\n  toString() {\n    return "FUNCTION(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value) + "(";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "AT-KEYWORD";\n    this.value = val;\n  }\n  toString() {\n    return "AT(" + this.value + ")";\n  }\n  toSource() {\n    return "@" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "HASH";\n    this.value = val;\n    this.type = "unrestricted";\n  }\n  toString() {\n    return "HASH(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === "id")\n      return "#" + escapeIdent(this.value);\n    else\n      return "#" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "STRING";\n    this.value = val;\n  }\n  toString() {\n    return \'"\' + escapeString(this.value) + \'"\';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "URL";\n    this.value = val;\n  }\n  toString() {\n    return "URL(" + this.value + ")";\n  }\n  toSource() {\n    return \'url("\' + escapeString(this.value) + \'")\';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "NUMBER";\n    this.type = "integer";\n    this.repr = "";\n  }\n  toString() {\n    if (this.type === "integer")\n      return "INT(" + this.value + ")";\n    return "NUMBER(" + this.value + ")";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "PERCENTAGE";\n    this.repr = "";\n  }\n  toString() {\n    return "PERCENTAGE(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + "%";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "DIMENSION";\n    this.type = "integer";\n    this.repr = "";\n    this.unit = "";\n  }\n  toString() {\n    return "DIM(" + this.value + "," + this.unit + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = "\\\\65 " + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = "" + string;\n  let result = "";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + code.toString(16) + " ";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code === 34 || code === 92)\n      result += "\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing css selector "${selector}". Did you mean to CSS.escape it?`;\n    const index = (e.stack || "").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here("hello")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  let pos = 0;\n  const names = new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === "*";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = "";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {\n        pos++;\n        if (isIdent())\n          rawCSSString += "." + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += ":" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += "[";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += "]";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = "";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))\n    throw new InvalidSelectorError(`Error while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);\nvar kNestedSelectorNamesWithDistance = new Set(["left-of", "right-of", "above", "below", "near"]);\nvar customCSSNames = new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === "css" || part.name === "css:light") {\n      if (part.name === "css:light")\n        part.body = ":light(" + part.body + ")";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: "css",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse("[" + part.body + "]");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === "string")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === "css")\n        includeEngine = false;\n      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + "=" : "";\n    return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;\n  }).join(" >> ");\n}\nfunction visitAllSelectorParts(selector, visitor) {\n  const visit = (selector2, nested) => {\n    for (const part of selector2.parts) {\n      visitor(part, nested);\n      if (kNestedSelectorNames.has(part.name))\n        visit(part.body.parsed, true);\n    }\n  };\n  visit(selector, false);\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf("=");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === \'"\' && part[part.length - 1] === \'"\') {\n      name = "text";\n      body = part;\n    } else if (part.length > 1 && part[0] === "\'" && part[part.length - 1] === "\'") {\n      name = "text";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith("..")) {\n      name = "xpath";\n      body = part;\n    } else {\n      name = "css";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === "*") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(">>")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === "\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === \'"\' || c === "\'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === ">" && selector[index + 1] === ">") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || "";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= "\\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";\n  }\n  function readIdentifier() {\n    let result2 = "";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError("parsing quoted string");\n    while (!EOL && next() !== quote) {\n      if (next() === "\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError("parsing quoted string");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let source = "";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === "\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError("parsing regular expression");\n      } else if (inClass && next() === "]") {\n        inClass = false;\n      } else if (!inClass && next() === "[") {\n        inClass = true;\n      } else if (!inClass && next() === "/") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let flags = "";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = "";\n    skipSpaces();\n    if (next() === `\'` || next() === `"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError("parsing property path");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = "";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== "=")\n      op += eat1();\n    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))\n      syntaxError("parsing operator");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === ".") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === "]") {\n      eat1();\n      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === "/") {\n      if (operator !== "=")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `\'` || next() === `"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === "i" || next() === "I") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === "s" || next() === "S") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = "";\n      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))\n        value += eat1();\n      if (value === "true") {\n        value = true;\n      } else if (value === "false") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError("parsing attribute value");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== "]")\n      syntaxError("parsing attribute value");\n    eat1();\n    if (operator !== "=" && typeof value !== "string")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: "",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === "[") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = "\'") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\"/g, \'"\');\n  if (char === "\'")\n    return char + escapedText.replace(/[\']/g, "\\\\\'") + char;\n  if (char === \'"\')\n    return char + escapedText.replace(/["]/g, \'\\\\"\') + char;\n  if (char === "`")\n    return char + escapedText.replace(/[`]/g, "`") + char;\n  throw new Error("Invalid escape char");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();\n}\nfunction cssEscape(s) {\n  let result = "";\n  for (let i = 0; i < s.length; i++)\n    result += cssEscapeOne(s, i);\n  return result;\n}\nfunction quoteCSSAttributeValue(text) {\n  return `"${cssEscape(text).replace(/\\\\ /g, " ")}"`;\n}\nfunction cssEscapeOne(s, i) {\n  const c = s.charCodeAt(i);\n  if (c === 0)\n    return "\\uFFFD";\n  if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))\n    return "\\\\" + c.toString(16) + " ";\n  if (i === 0 && c === 45 && s.length === 1)\n    return "\\\\" + s.charAt(i);\n  if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)\n    return s.charAt(i);\n  return "\\\\" + s.charAt(i);\n}\nvar normalizedWhitespaceCache;\nfunction cacheNormalizedWhitespaces() {\n  normalizedWhitespaceCache = new Map();\n}\nfunction normalizeWhiteSpace(text) {\n  let result = normalizedWhitespaceCache == null ? void 0 : normalizedWhitespaceCache.get(text);\n  if (result === void 0) {\n    result = text.replace(/[\\u200b\\u00ad]/g, "").trim().replace(/\\s+/g, " ");\n    normalizedWhitespaceCache == null ? void 0 : normalizedWhitespaceCache.set(text, result);\n  }\n  return result;\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\([\'"`])/g, "$1$2$3");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*(["\'`])/g, "$1$2\\\\$3").replace(/>>/g, "\\\\>\\\\>");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== "string")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? "s" : "i"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== "string")\n    return escapeRegexForSelector(value);\n  return `"${value.replace(/\\\\/g, "\\\\\\\\").replace(/["]/g, \'\\\\"\')}"${exact ? "s" : "i"}`;\n}\nfunction trimString(input, cap, suffix = "") {\n  if (input.length <= cap)\n    return input;\n  const chars = [...input];\n  if (chars.length > cap)\n    return chars.slice(0, cap - suffix.length).join("") + suffix;\n  return chars.join("");\n}\nfunction trimStringWithEllipsis(input, cap) {\n  return trimString(input, cap, "\\u2026");\n}\nfunction escapeRegExp(s) {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, "\\\\$&");\n}\nfunction longestCommonSubstring(s1, s2) {\n  const n = s1.length;\n  const m = s2.length;\n  let maxLen = 0;\n  let endingIndex = 0;\n  const dp = Array(n + 1).fill(null).map(() => Array(m + 1).fill(0));\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= m; j++) {\n      if (s1[i - 1] === s2[j - 1]) {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n        if (dp[i][j] > maxLen) {\n          maxLen = dp[i][j];\n          endingIndex = i;\n        }\n      }\n    }\n  }\n  return s1.slice(endingIndex - maxLen, endingIndex);\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator, 1)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  const tokens = [];\n  let nextBase = isFrameLocator ? "frame-locator" : "page";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = "locator";\n    if (part.name === "nth") {\n      if (part.body === "0")\n        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);\n      else if (part.body === "-1")\n        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);\n      else\n        tokens.push([factory.generateLocator(base, "nth", part.body)]);\n      continue;\n    }\n    if (part.name === "visible") {\n      tokens.push([factory.generateLocator(base, "visible", part.body), factory.generateLocator(base, "default", `visible=${part.body}`)]);\n      continue;\n    }\n    if (part.name === "internal:text") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "text", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:has-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has-not-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));\n      continue;\n    }\n    if (part.name === "internal:has-not") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));\n      continue;\n    }\n    if (part.name === "internal:and") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));\n      continue;\n    }\n    if (part.name === "internal:or") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));\n      continue;\n    }\n    if (part.name === "internal:chain") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));\n      continue;\n    }\n    if (part.name === "internal:label") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "label", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:role") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === "name") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === "level" && typeof attr.value === "string")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === "internal:testid") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, "test-id", value)]);\n      continue;\n    }\n    if (part.name === "internal:attr") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === "placeholder") {\n        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);\n        continue;\n      }\n      if (name === "alt") {\n        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);\n        continue;\n      }\n      if (name === "title") {\n        tokens.push([factory.generateLocator(base, "title", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:control" && part.body === "enter-frame") {\n      const lastTokens = tokens[tokens.length - 1];\n      const lastPart = parts[index - 1];\n      const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));\n      if (["xpath", "css"].includes(lastPart.name)) {\n        transformed.push(\n          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] })),\n          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] }, true))\n        );\n      }\n      lastTokens.splice(0, lastTokens.length, ...transformed);\n      nextBase = "frame-locator";\n      continue;\n    }\n    const nextPart = parts[index + 1];\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, "default", selectorPart);\n    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });\n        const options = {};\n        if (nextPart.name === "internal:has-text")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if (["xpath", "css"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => "");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return result.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith(\'"\')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith(\'"s\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith(\'"i\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frameLocator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "visible":\n        return `filter({ visible: ${body === "true" ? "true" : "false"} })`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case "has":\n        return `filter({ has: ${body} })`;\n      case "hasNot":\n        return `filter({ hasNot: ${body} })`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : "\'");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frame_locator(${this.quote(body)})`;\n      case "frame":\n        return `content_frame`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first`;\n      case "last":\n        return `last`;\n      case "visible":\n        return `filter(visible=${body === "true" ? "True" : "False"})`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === "string" ? this.quote(value) : value;\n          if (typeof value === "boolean")\n            valueString = value ? "True" : "False";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case "has-not-text":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case "has":\n        return `filter(has=${body})`;\n      case "hasNot":\n        return `filter(has_not=${body})`;\n      case "and":\n        return `and_(${body})`;\n      case "or":\n        return `or_(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("get_by_text", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("get_by_label", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("get_by_title", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";\n    return `re.compile(r"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, "/").replace(/"/g, \'\\\\"\')}"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case "page":\n        clazz = "Page";\n        break;\n      case "frame-locator":\n        clazz = "FrameLocator";\n        break;\n      case "locator":\n        clazz = "Locator";\n        break;\n    }\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frameLocator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "visible":\n        return `filter(new ${clazz}.FilterOptions().setVisible(${body === "true" ? "true" : "false"}))`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === "string" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case "has-text":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case "has-not-text":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case "has":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case "hasNot":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `FrameLocator(${this.quote(body)})`;\n      case "frame":\n        return `ContentFrame`;\n      case "nth":\n        return `Nth(${body})`;\n      case "first":\n        return `First`;\n      case "last":\n        return `Last`;\n      case "visible":\n        return `Filter(new() { Visible = ${body === "true" ? "true" : "false"} })`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case "has-text":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case "has":\n        return `Filter(new() { Has = ${body} })`;\n      case "hasNot":\n        return `Filter(new() { HasNot = ${body} })`;\n      case "and":\n        return `And(${body})`;\n      case "or":\n        return `Or(${body})`;\n      case "chain":\n        return `Locator(${body})`;\n      case "test-id":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("GetByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("GetByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("GetByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("GetByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/injected/src/domUtils.ts\nvar globalOptions = {};\nfunction setGlobalOptions(options) {\n  globalOptions = options;\n}\nfunction getGlobalOptions() {\n  return globalOptions;\n}\nfunction isInsideScope(scope, element) {\n  while (element) {\n    if (scope.contains(element))\n      return true;\n    element = enclosingShadowHost(element);\n  }\n  return false;\n}\nfunction parentElementOrShadowHost(element) {\n  if (element.parentElement)\n    return element.parentElement;\n  if (!element.parentNode)\n    return;\n  if (element.parentNode.nodeType === 11 && element.parentNode.host)\n    return element.parentNode.host;\n}\nfunction enclosingShadowRootOrDocument(element) {\n  let node = element;\n  while (node.parentNode)\n    node = node.parentNode;\n  if (node.nodeType === 11 || node.nodeType === 9)\n    return node;\n}\nfunction enclosingShadowHost(element) {\n  while (element.parentElement)\n    element = element.parentElement;\n  return parentElementOrShadowHost(element);\n}\nfunction closestCrossShadow(element, css, scope) {\n  while (element) {\n    const closest = element.closest(css);\n    if (scope && closest !== scope && (closest == null ? void 0 : closest.contains(scope)))\n      return;\n    if (closest)\n      return closest;\n    element = enclosingShadowHost(element);\n  }\n}\nfunction getElementComputedStyle(element, pseudo) {\n  return element.ownerDocument && element.ownerDocument.defaultView ? element.ownerDocument.defaultView.getComputedStyle(element, pseudo) : void 0;\n}\nfunction isElementStyleVisibilityVisible(element, style) {\n  style = style != null ? style : getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (Element.prototype.checkVisibility && globalOptions.browserNameForWorkarounds !== "webkit") {\n    if (!element.checkVisibility())\n      return false;\n  } else {\n    const detailsOrSummary = element.closest("details,summary");\n    if (detailsOrSummary !== element && (detailsOrSummary == null ? void 0 : detailsOrSummary.nodeName) === "DETAILS" && !detailsOrSummary.open)\n      return false;\n  }\n  if (style.visibility !== "visible")\n    return false;\n  return true;\n}\nfunction isElementVisible(element) {\n  const style = getElementComputedStyle(element);\n  if (!style)\n    return true;\n  if (style.display === "contents") {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && isElementVisible(child))\n        return true;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return true;\n    }\n    return false;\n  }\n  if (!isElementStyleVisibilityVisible(element, style))\n    return false;\n  const rect = element.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction isVisibleTextNode(node) {\n  const range = node.ownerDocument.createRange();\n  range.selectNode(node);\n  const rect = range.getBoundingClientRect();\n  return rect.width > 0 && rect.height > 0;\n}\nfunction elementSafeTagName(element) {\n  if (element instanceof HTMLFormElement)\n    return "FORM";\n  return element.tagName.toUpperCase();\n}\n\n// packages/injected/src/roleUtils.ts\nfunction hasExplicitAccessibleName(e) {\n  return e.hasAttribute("aria-label") || e.hasAttribute("aria-labelledby");\n}\nvar kAncestorPreventingLandmark = "article:not([role]), aside:not([role]), main:not([role]), nav:not([role]), section:not([role]), [role=article], [role=complementary], [role=main], [role=navigation], [role=region]";\nvar kGlobalAriaAttributes = [\n  ["aria-atomic", void 0],\n  ["aria-busy", void 0],\n  ["aria-controls", void 0],\n  ["aria-current", void 0],\n  ["aria-describedby", void 0],\n  ["aria-details", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-disabled\', undefined],\n  ["aria-dropeffect", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-errormessage\', undefined],\n  ["aria-flowto", void 0],\n  ["aria-grabbed", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-haspopup\', undefined],\n  ["aria-hidden", void 0],\n  // Global use deprecated in ARIA 1.2\n  // [\'aria-invalid\', undefined],\n  ["aria-keyshortcuts", void 0],\n  ["aria-label", ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]],\n  ["aria-labelledby", ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]],\n  ["aria-live", void 0],\n  ["aria-owns", void 0],\n  ["aria-relevant", void 0],\n  ["aria-roledescription", ["generic"]]\n];\nfunction hasGlobalAriaAttribute(element, forRole) {\n  return kGlobalAriaAttributes.some(([attr, prohibited]) => {\n    return !(prohibited == null ? void 0 : prohibited.includes(forRole || "")) && element.hasAttribute(attr);\n  });\n}\nfunction hasTabIndex(element) {\n  return !Number.isNaN(Number(String(element.getAttribute("tabindex"))));\n}\nfunction isFocusable(element) {\n  return !isNativelyDisabled(element) && (isNativelyFocusable(element) || hasTabIndex(element));\n}\nfunction isNativelyFocusable(element) {\n  const tagName = elementSafeTagName(element);\n  if (["BUTTON", "DETAILS", "SELECT", "TEXTAREA"].includes(tagName))\n    return true;\n  if (tagName === "A" || tagName === "AREA")\n    return element.hasAttribute("href");\n  if (tagName === "INPUT")\n    return !element.hidden;\n  return false;\n}\nvar kImplicitRoleByTagName = {\n  "A": (e) => {\n    return e.hasAttribute("href") ? "link" : null;\n  },\n  "AREA": (e) => {\n    return e.hasAttribute("href") ? "link" : null;\n  },\n  "ARTICLE": () => "article",\n  "ASIDE": () => "complementary",\n  "BLOCKQUOTE": () => "blockquote",\n  "BUTTON": () => "button",\n  "CAPTION": () => "caption",\n  "CODE": () => "code",\n  "DATALIST": () => "listbox",\n  "DD": () => "definition",\n  "DEL": () => "deletion",\n  "DETAILS": () => "group",\n  "DFN": () => "term",\n  "DIALOG": () => "dialog",\n  "DT": () => "term",\n  "EM": () => "emphasis",\n  "FIELDSET": () => "group",\n  "FIGURE": () => "figure",\n  "FOOTER": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : "contentinfo",\n  "FORM": (e) => hasExplicitAccessibleName(e) ? "form" : null,\n  "H1": () => "heading",\n  "H2": () => "heading",\n  "H3": () => "heading",\n  "H4": () => "heading",\n  "H5": () => "heading",\n  "H6": () => "heading",\n  "HEADER": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : "banner",\n  "HR": () => "separator",\n  "HTML": () => "document",\n  "IMG": (e) => e.getAttribute("alt") === "" && !e.getAttribute("title") && !hasGlobalAriaAttribute(e) && !hasTabIndex(e) ? "presentation" : "img",\n  "INPUT": (e) => {\n    const type = e.type.toLowerCase();\n    if (type === "search")\n      return e.hasAttribute("list") ? "combobox" : "searchbox";\n    if (["email", "tel", "text", "url", ""].includes(type)) {\n      const list = getIdRefs(e, e.getAttribute("list"))[0];\n      return list && elementSafeTagName(list) === "DATALIST" ? "combobox" : "textbox";\n    }\n    if (type === "hidden")\n      return null;\n    if (type === "file" && !getGlobalOptions().inputFileRoleTextbox)\n      return "button";\n    return inputTypeToRole[type] || "textbox";\n  },\n  "INS": () => "insertion",\n  "LI": () => "listitem",\n  "MAIN": () => "main",\n  "MARK": () => "mark",\n  "MATH": () => "math",\n  "MENU": () => "list",\n  "METER": () => "meter",\n  "NAV": () => "navigation",\n  "OL": () => "list",\n  "OPTGROUP": () => "group",\n  "OPTION": () => "option",\n  "OUTPUT": () => "status",\n  "P": () => "paragraph",\n  "PROGRESS": () => "progressbar",\n  "SECTION": (e) => hasExplicitAccessibleName(e) ? "region" : null,\n  "SELECT": (e) => e.hasAttribute("multiple") || e.size > 1 ? "listbox" : "combobox",\n  "STRONG": () => "strong",\n  "SUB": () => "subscript",\n  "SUP": () => "superscript",\n  // For <svg> we default to Chrome behavior:\n  // - Chrome reports \'img\'.\n  // - Firefox reports \'diagram\' that is not in official ARIA spec yet.\n  // - Safari reports \'no role\', but still computes accessible name.\n  "SVG": () => "img",\n  "TABLE": () => "table",\n  "TBODY": () => "rowgroup",\n  "TD": (e) => {\n    const table = closestCrossShadow(e, "table");\n    const role = table ? getExplicitAriaRole(table) : "";\n    return role === "grid" || role === "treegrid" ? "gridcell" : "cell";\n  },\n  "TEXTAREA": () => "textbox",\n  "TFOOT": () => "rowgroup",\n  "TH": (e) => {\n    if (e.getAttribute("scope") === "col")\n      return "columnheader";\n    if (e.getAttribute("scope") === "row")\n      return "rowheader";\n    const table = closestCrossShadow(e, "table");\n    const role = table ? getExplicitAriaRole(table) : "";\n    return role === "grid" || role === "treegrid" ? "gridcell" : "cell";\n  },\n  "THEAD": () => "rowgroup",\n  "TIME": () => "time",\n  "TR": () => "row",\n  "UL": () => "list"\n};\nvar kPresentationInheritanceParents = {\n  "DD": ["DL", "DIV"],\n  "DIV": ["DL"],\n  "DT": ["DL", "DIV"],\n  "LI": ["OL", "UL"],\n  "TBODY": ["TABLE"],\n  "TD": ["TR"],\n  "TFOOT": ["TABLE"],\n  "TH": ["TR"],\n  "THEAD": ["TABLE"],\n  "TR": ["THEAD", "TBODY", "TFOOT", "TABLE"]\n};\nfunction getImplicitAriaRole(element) {\n  var _a;\n  const implicitRole = ((_a = kImplicitRoleByTagName[elementSafeTagName(element)]) == null ? void 0 : _a.call(kImplicitRoleByTagName, element)) || "";\n  if (!implicitRole)\n    return null;\n  let ancestor = element;\n  while (ancestor) {\n    const parent = parentElementOrShadowHost(ancestor);\n    const parents = kPresentationInheritanceParents[elementSafeTagName(ancestor)];\n    if (!parents || !parent || !parents.includes(elementSafeTagName(parent)))\n      break;\n    const parentExplicitRole = getExplicitAriaRole(parent);\n    if ((parentExplicitRole === "none" || parentExplicitRole === "presentation") && !hasPresentationConflictResolution(parent, parentExplicitRole))\n      return parentExplicitRole;\n    ancestor = parent;\n  }\n  return implicitRole;\n}\nvar validRoles = [\n  "alert",\n  "alertdialog",\n  "application",\n  "article",\n  "banner",\n  "blockquote",\n  "button",\n  "caption",\n  "cell",\n  "checkbox",\n  "code",\n  "columnheader",\n  "combobox",\n  "complementary",\n  "contentinfo",\n  "definition",\n  "deletion",\n  "dialog",\n  "directory",\n  "document",\n  "emphasis",\n  "feed",\n  "figure",\n  "form",\n  "generic",\n  "grid",\n  "gridcell",\n  "group",\n  "heading",\n  "img",\n  "insertion",\n  "link",\n  "list",\n  "listbox",\n  "listitem",\n  "log",\n  "main",\n  "mark",\n  "marquee",\n  "math",\n  "meter",\n  "menu",\n  "menubar",\n  "menuitem",\n  "menuitemcheckbox",\n  "menuitemradio",\n  "navigation",\n  "none",\n  "note",\n  "option",\n  "paragraph",\n  "presentation",\n  "progressbar",\n  "radio",\n  "radiogroup",\n  "region",\n  "row",\n  "rowgroup",\n  "rowheader",\n  "scrollbar",\n  "search",\n  "searchbox",\n  "separator",\n  "slider",\n  "spinbutton",\n  "status",\n  "strong",\n  "subscript",\n  "superscript",\n  "switch",\n  "tab",\n  "table",\n  "tablist",\n  "tabpanel",\n  "term",\n  "textbox",\n  "time",\n  "timer",\n  "toolbar",\n  "tooltip",\n  "tree",\n  "treegrid",\n  "treeitem"\n];\nfunction getExplicitAriaRole(element) {\n  const roles = (element.getAttribute("role") || "").split(" ").map((role) => role.trim());\n  return roles.find((role) => validRoles.includes(role)) || null;\n}\nfunction hasPresentationConflictResolution(element, role) {\n  return hasGlobalAriaAttribute(element, role) || isFocusable(element);\n}\nfunction getAriaRole(element) {\n  const explicitRole = getExplicitAriaRole(element);\n  if (!explicitRole)\n    return getImplicitAriaRole(element);\n  if (explicitRole === "none" || explicitRole === "presentation") {\n    const implicitRole = getImplicitAriaRole(element);\n    if (hasPresentationConflictResolution(element, implicitRole))\n      return implicitRole;\n  }\n  return explicitRole;\n}\nfunction getAriaBoolean(attr) {\n  return attr === null ? void 0 : attr.toLowerCase() === "true";\n}\nfunction isElementIgnoredForAria(element) {\n  return ["STYLE", "SCRIPT", "NOSCRIPT", "TEMPLATE"].includes(elementSafeTagName(element));\n}\nfunction isElementHiddenForAria(element) {\n  if (isElementIgnoredForAria(element))\n    return true;\n  const style = getElementComputedStyle(element);\n  const isSlot = element.nodeName === "SLOT";\n  if ((style == null ? void 0 : style.display) === "contents" && !isSlot) {\n    for (let child = element.firstChild; child; child = child.nextSibling) {\n      if (child.nodeType === 1 && !isElementHiddenForAria(child))\n        return false;\n      if (child.nodeType === 3 && isVisibleTextNode(child))\n        return false;\n    }\n    return true;\n  }\n  const isOptionInsideSelect = element.nodeName === "OPTION" && !!element.closest("select");\n  if (!isOptionInsideSelect && !isSlot && !isElementStyleVisibilityVisible(element, style))\n    return true;\n  return belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element);\n}\nfunction belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element) {\n  let hidden = cacheIsHidden == null ? void 0 : cacheIsHidden.get(element);\n  if (hidden === void 0) {\n    hidden = false;\n    if (element.parentElement && element.parentElement.shadowRoot && !element.assignedSlot)\n      hidden = true;\n    if (!hidden) {\n      const style = getElementComputedStyle(element);\n      hidden = !style || style.display === "none" || getAriaBoolean(element.getAttribute("aria-hidden")) === true;\n    }\n    if (!hidden) {\n      const parent = parentElementOrShadowHost(element);\n      if (parent)\n        hidden = belongsToDisplayNoneOrAriaHiddenOrNonSlotted(parent);\n    }\n    cacheIsHidden == null ? void 0 : cacheIsHidden.set(element, hidden);\n  }\n  return hidden;\n}\nfunction getIdRefs(element, ref) {\n  if (!ref)\n    return [];\n  const root = enclosingShadowRootOrDocument(element);\n  if (!root)\n    return [];\n  try {\n    const ids = ref.split(" ").filter((id) => !!id);\n    const result = [];\n    for (const id of ids) {\n      const firstElement = root.querySelector("#" + CSS.escape(id));\n      if (firstElement && !result.includes(firstElement))\n        result.push(firstElement);\n    }\n    return result;\n  } catch (e) {\n    return [];\n  }\n}\nfunction trimFlatString(s) {\n  return s.trim();\n}\nfunction asFlatString(s) {\n  return s.split("\\xA0").map((chunk) => chunk.replace(/\\r\\n/g, "\\n").replace(/[\\u200b\\u00ad]/g, "").replace(/\\s\\s*/g, " ")).join("\\xA0").trim();\n}\nfunction queryInAriaOwned(element, selector) {\n  const result = [...element.querySelectorAll(selector)];\n  for (const owned of getIdRefs(element, element.getAttribute("aria-owns"))) {\n    if (owned.matches(selector))\n      result.push(owned);\n    result.push(...owned.querySelectorAll(selector));\n  }\n  return result;\n}\nfunction getPseudoContent(element, pseudo) {\n  const cache = pseudo === "::before" ? cachePseudoContentBefore : cachePseudoContentAfter;\n  if (cache == null ? void 0 : cache.has(element))\n    return (cache == null ? void 0 : cache.get(element)) || "";\n  const pseudoStyle = getElementComputedStyle(element, pseudo);\n  const content = getPseudoContentImpl(element, pseudoStyle);\n  if (cache)\n    cache.set(element, content);\n  return content;\n}\nfunction getPseudoContentImpl(element, pseudoStyle) {\n  if (!pseudoStyle || pseudoStyle.display === "none" || pseudoStyle.visibility === "hidden")\n    return "";\n  const content = pseudoStyle.content;\n  let resolvedContent;\n  if (content[0] === "\'" && content[content.length - 1] === "\'" || content[0] === \'"\' && content[content.length - 1] === \'"\') {\n    resolvedContent = content.substring(1, content.length - 1);\n  } else if (content.startsWith("attr(") && content.endsWith(")")) {\n    const attrName = content.substring("attr(".length, content.length - 1).trim();\n    resolvedContent = element.getAttribute(attrName) || "";\n  }\n  if (resolvedContent !== void 0) {\n    const display = pseudoStyle.display || "inline";\n    if (display !== "inline")\n      return " " + resolvedContent + " ";\n    return resolvedContent;\n  }\n  return "";\n}\nfunction getAriaLabelledByElements(element) {\n  const ref = element.getAttribute("aria-labelledby");\n  if (ref === null)\n    return null;\n  const refs = getIdRefs(element, ref);\n  return refs.length ? refs : null;\n}\nfunction allowsNameFromContent(role, targetDescendant) {\n  const alwaysAllowsNameFromContent = ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"].includes(role);\n  const descendantAllowsNameFromContent = targetDescendant && ["", "caption", "code", "contentinfo", "definition", "deletion", "emphasis", "insertion", "list", "listitem", "mark", "none", "paragraph", "presentation", "region", "row", "rowgroup", "section", "strong", "subscript", "superscript", "table", "term", "time"].includes(role);\n  return alwaysAllowsNameFromContent || descendantAllowsNameFromContent;\n}\nfunction getElementAccessibleName(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleNameHidden : cacheAccessibleName;\n  let accessibleName = cache == null ? void 0 : cache.get(element);\n  if (accessibleName === void 0) {\n    accessibleName = "";\n    const elementProhibitsNaming = ["caption", "code", "definition", "deletion", "emphasis", "generic", "insertion", "mark", "paragraph", "presentation", "strong", "subscript", "suggestion", "superscript", "term", "time"].includes(getAriaRole(element) || "");\n    if (!elementProhibitsNaming) {\n      accessibleName = asFlatString(getTextAlternativeInternal(element, {\n        includeHidden,\n        visitedElements: new Set(),\n        embeddedInTargetElement: "self"\n      }));\n    }\n    cache == null ? void 0 : cache.set(element, accessibleName);\n  }\n  return accessibleName;\n}\nfunction getElementAccessibleDescription(element, includeHidden) {\n  const cache = includeHidden ? cacheAccessibleDescriptionHidden : cacheAccessibleDescription;\n  let accessibleDescription = cache == null ? void 0 : cache.get(element);\n  if (accessibleDescription === void 0) {\n    accessibleDescription = "";\n    if (element.hasAttribute("aria-describedby")) {\n      const describedBy = getIdRefs(element, element.getAttribute("aria-describedby"));\n      accessibleDescription = asFlatString(describedBy.map((ref) => getTextAlternativeInternal(ref, {\n        includeHidden,\n        visitedElements: new Set(),\n        embeddedInDescribedBy: { element: ref, hidden: isElementHiddenForAria(ref) }\n      })).join(" "));\n    } else if (element.hasAttribute("aria-description")) {\n      accessibleDescription = asFlatString(element.getAttribute("aria-description") || "");\n    } else {\n      accessibleDescription = asFlatString(element.getAttribute("title") || "");\n    }\n    cache == null ? void 0 : cache.set(element, accessibleDescription);\n  }\n  return accessibleDescription;\n}\nvar kAriaInvalidRoles = ["application", "checkbox", "combobox", "gridcell", "listbox", "radiogroup", "slider", "spinbutton", "textbox", "tree", "columnheader", "rowheader", "searchbox", "switch", "treegrid"];\nfunction getAriaInvalid(element) {\n  const role = getAriaRole(element) || "";\n  if (!role || !kAriaInvalidRoles.includes(role))\n    return "false";\n  const ariaInvalid = element.getAttribute("aria-invalid");\n  if (!ariaInvalid || ariaInvalid.trim() === "" || ariaInvalid.toLocaleLowerCase() === "false")\n    return "false";\n  if (ariaInvalid === "true" || ariaInvalid === "grammar" || ariaInvalid === "spelling")\n    return ariaInvalid;\n  return "true";\n}\nfunction getValidityInvalid(element) {\n  if ("validity" in element) {\n    const validity = element.validity;\n    return (validity == null ? void 0 : validity.valid) === false;\n  }\n  return false;\n}\nfunction getElementAccessibleErrorMessage(element) {\n  const cache = cacheAccessibleErrorMessage;\n  let accessibleErrorMessage = cacheAccessibleErrorMessage == null ? void 0 : cacheAccessibleErrorMessage.get(element);\n  if (accessibleErrorMessage === void 0) {\n    accessibleErrorMessage = "";\n    const isAriaInvalid = getAriaInvalid(element) !== "false";\n    const isValidityInvalid = getValidityInvalid(element);\n    if (isAriaInvalid || isValidityInvalid) {\n      const errorMessageId = element.getAttribute("aria-errormessage");\n      const errorMessages = getIdRefs(element, errorMessageId);\n      const parts = errorMessages.map((errorMessage) => asFlatString(\n        getTextAlternativeInternal(errorMessage, {\n          visitedElements: new Set(),\n          embeddedInDescribedBy: { element: errorMessage, hidden: isElementHiddenForAria(errorMessage) }\n        })\n      ));\n      accessibleErrorMessage = parts.join(" ").trim();\n    }\n    cache == null ? void 0 : cache.set(element, accessibleErrorMessage);\n  }\n  return accessibleErrorMessage;\n}\nfunction getTextAlternativeInternal(element, options) {\n  var _a, _b, _c, _d;\n  if (options.visitedElements.has(element))\n    return "";\n  const childOptions = {\n    ...options,\n    embeddedInTargetElement: options.embeddedInTargetElement === "self" ? "descendant" : options.embeddedInTargetElement\n  };\n  if (!options.includeHidden) {\n    const isEmbeddedInHiddenReferenceTraversal = !!((_a = options.embeddedInLabelledBy) == null ? void 0 : _a.hidden) || !!((_b = options.embeddedInDescribedBy) == null ? void 0 : _b.hidden) || !!((_c = options.embeddedInNativeTextAlternative) == null ? void 0 : _c.hidden) || !!((_d = options.embeddedInLabel) == null ? void 0 : _d.hidden);\n    if (isElementIgnoredForAria(element) || !isEmbeddedInHiddenReferenceTraversal && isElementHiddenForAria(element)) {\n      options.visitedElements.add(element);\n      return "";\n    }\n  }\n  const labelledBy = getAriaLabelledByElements(element);\n  if (!options.embeddedInLabelledBy) {\n    const accessibleName = (labelledBy || []).map((ref) => getTextAlternativeInternal(ref, {\n      ...options,\n      embeddedInLabelledBy: { element: ref, hidden: isElementHiddenForAria(ref) },\n      embeddedInDescribedBy: void 0,\n      embeddedInTargetElement: void 0,\n      embeddedInLabel: void 0,\n      embeddedInNativeTextAlternative: void 0\n    })).join(" ");\n    if (accessibleName)\n      return accessibleName;\n  }\n  const role = getAriaRole(element) || "";\n  const tagName = elementSafeTagName(element);\n  if (!!options.embeddedInLabel || !!options.embeddedInLabelledBy || options.embeddedInTargetElement === "descendant") {\n    const isOwnLabel = [...element.labels || []].includes(element);\n    const isOwnLabelledBy = (labelledBy || []).includes(element);\n    if (!isOwnLabel && !isOwnLabelledBy) {\n      if (role === "textbox") {\n        options.visitedElements.add(element);\n        if (tagName === "INPUT" || tagName === "TEXTAREA")\n          return element.value;\n        return element.textContent || "";\n      }\n      if (["combobox", "listbox"].includes(role)) {\n        options.visitedElements.add(element);\n        let selectedOptions;\n        if (tagName === "SELECT") {\n          selectedOptions = [...element.selectedOptions];\n          if (!selectedOptions.length && element.options.length)\n            selectedOptions.push(element.options[0]);\n        } else {\n          const listbox = role === "combobox" ? queryInAriaOwned(element, "*").find((e) => getAriaRole(e) === "listbox") : element;\n          selectedOptions = listbox ? queryInAriaOwned(listbox, \'[aria-selected="true"]\').filter((e) => getAriaRole(e) === "option") : [];\n        }\n        if (!selectedOptions.length && tagName === "INPUT") {\n          return element.value;\n        }\n        return selectedOptions.map((option) => getTextAlternativeInternal(option, childOptions)).join(" ");\n      }\n      if (["progressbar", "scrollbar", "slider", "spinbutton", "meter"].includes(role)) {\n        options.visitedElements.add(element);\n        if (element.hasAttribute("aria-valuetext"))\n          return element.getAttribute("aria-valuetext") || "";\n        if (element.hasAttribute("aria-valuenow"))\n          return element.getAttribute("aria-valuenow") || "";\n        return element.getAttribute("value") || "";\n      }\n      if (["menu"].includes(role)) {\n        options.visitedElements.add(element);\n        return "";\n      }\n    }\n  }\n  const ariaLabel = element.getAttribute("aria-label") || "";\n  if (trimFlatString(ariaLabel)) {\n    options.visitedElements.add(element);\n    return ariaLabel;\n  }\n  if (!["presentation", "none"].includes(role)) {\n    if (tagName === "INPUT" && ["button", "submit", "reset"].includes(element.type)) {\n      options.visitedElements.add(element);\n      const value = element.value || "";\n      if (trimFlatString(value))\n        return value;\n      if (element.type === "submit")\n        return "Submit";\n      if (element.type === "reset")\n        return "Reset";\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (!getGlobalOptions().inputFileRoleTextbox && tagName === "INPUT" && element.type === "file") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length && !options.embeddedInLabelledBy)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      return "Choose File";\n    }\n    if (tagName === "INPUT" && element.type === "image") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length && !options.embeddedInLabelledBy)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      if (trimFlatString(title))\n        return title;\n      return "Submit";\n    }\n    if (!labelledBy && tagName === "BUTTON") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n    }\n    if (!labelledBy && tagName === "OUTPUT") {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      return element.getAttribute("title") || "";\n    }\n    if (!labelledBy && (tagName === "TEXTAREA" || tagName === "SELECT" || tagName === "INPUT")) {\n      options.visitedElements.add(element);\n      const labels = element.labels || [];\n      if (labels.length)\n        return getAccessibleNameFromAssociatedLabels(labels, options);\n      const usePlaceholder = tagName === "INPUT" && ["text", "password", "search", "tel", "email", "url"].includes(element.type) || tagName === "TEXTAREA";\n      const placeholder = element.getAttribute("placeholder") || "";\n      const title = element.getAttribute("title") || "";\n      if (!usePlaceholder || title)\n        return title;\n      return placeholder;\n    }\n    if (!labelledBy && tagName === "FIELDSET") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "LEGEND") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (!labelledBy && tagName === "FIGURE") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "FIGCAPTION") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "IMG") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "TABLE") {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "CAPTION") {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n      const summary = element.getAttribute("summary") || "";\n      if (summary)\n        return summary;\n    }\n    if (tagName === "AREA") {\n      options.visitedElements.add(element);\n      const alt = element.getAttribute("alt") || "";\n      if (trimFlatString(alt))\n        return alt;\n      const title = element.getAttribute("title") || "";\n      return title;\n    }\n    if (tagName === "SVG" || element.ownerSVGElement) {\n      options.visitedElements.add(element);\n      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {\n        if (elementSafeTagName(child) === "TITLE" && child.ownerSVGElement) {\n          return getTextAlternativeInternal(child, {\n            ...childOptions,\n            embeddedInLabelledBy: { element: child, hidden: isElementHiddenForAria(child) }\n          });\n        }\n      }\n    }\n    if (element.ownerSVGElement && tagName === "A") {\n      const title = element.getAttribute("xlink:title") || "";\n      if (trimFlatString(title)) {\n        options.visitedElements.add(element);\n        return title;\n      }\n    }\n  }\n  const shouldNameFromContentForSummary = tagName === "SUMMARY" && !["presentation", "none"].includes(role);\n  if (allowsNameFromContent(role, options.embeddedInTargetElement === "descendant") || shouldNameFromContentForSummary || !!options.embeddedInLabelledBy || !!options.embeddedInDescribedBy || !!options.embeddedInLabel || !!options.embeddedInNativeTextAlternative) {\n    options.visitedElements.add(element);\n    const accessibleName = innerAccumulatedElementText(element, childOptions);\n    const maybeTrimmedAccessibleName = options.embeddedInTargetElement === "self" ? trimFlatString(accessibleName) : accessibleName;\n    if (maybeTrimmedAccessibleName)\n      return accessibleName;\n  }\n  if (!["presentation", "none"].includes(role) || tagName === "IFRAME") {\n    options.visitedElements.add(element);\n    const title = element.getAttribute("title") || "";\n    if (trimFlatString(title))\n      return title;\n  }\n  options.visitedElements.add(element);\n  return "";\n}\nfunction innerAccumulatedElementText(element, options) {\n  const tokens = [];\n  const visit = (node, skipSlotted) => {\n    var _a;\n    if (skipSlotted && node.assignedSlot)\n      return;\n    if (node.nodeType === 1) {\n      const display = ((_a = getElementComputedStyle(node)) == null ? void 0 : _a.display) || "inline";\n      let token = getTextAlternativeInternal(node, options);\n      if (display !== "inline" || node.nodeName === "BR")\n        token = " " + token + " ";\n      tokens.push(token);\n    } else if (node.nodeType === 3) {\n      tokens.push(node.textContent || "");\n    }\n  };\n  tokens.push(getPseudoContent(element, "::before"));\n  const assignedNodes = element.nodeName === "SLOT" ? element.assignedNodes() : [];\n  if (assignedNodes.length) {\n    for (const child of assignedNodes)\n      visit(child, false);\n  } else {\n    for (let child = element.firstChild; child; child = child.nextSibling)\n      visit(child, true);\n    if (element.shadowRoot) {\n      for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)\n        visit(child, true);\n    }\n    for (const owned of getIdRefs(element, element.getAttribute("aria-owns")))\n      visit(owned, true);\n  }\n  tokens.push(getPseudoContent(element, "::after"));\n  return tokens.join("");\n}\nvar kAriaSelectedRoles = ["gridcell", "option", "row", "tab", "rowheader", "columnheader", "treeitem"];\nfunction getAriaSelected(element) {\n  if (elementSafeTagName(element) === "OPTION")\n    return element.selected;\n  if (kAriaSelectedRoles.includes(getAriaRole(element) || ""))\n    return getAriaBoolean(element.getAttribute("aria-selected")) === true;\n  return false;\n}\nvar kAriaCheckedRoles = ["checkbox", "menuitemcheckbox", "option", "radio", "switch", "menuitemradio", "treeitem"];\nfunction getAriaChecked(element) {\n  const result = getChecked(element, true);\n  return result === "error" ? false : result;\n}\nfunction getCheckedAllowMixed(element) {\n  return getChecked(element, true);\n}\nfunction getCheckedWithoutMixed(element) {\n  const result = getChecked(element, false);\n  return result;\n}\nfunction getChecked(element, allowMixed) {\n  const tagName = elementSafeTagName(element);\n  if (allowMixed && tagName === "INPUT" && element.indeterminate)\n    return "mixed";\n  if (tagName === "INPUT" && ["checkbox", "radio"].includes(element.type))\n    return element.checked;\n  if (kAriaCheckedRoles.includes(getAriaRole(element) || "")) {\n    const checked = element.getAttribute("aria-checked");\n    if (checked === "true")\n      return true;\n    if (allowMixed && checked === "mixed")\n      return "mixed";\n    return false;\n  }\n  return "error";\n}\nvar kAriaReadonlyRoles = ["checkbox", "combobox", "grid", "gridcell", "listbox", "radiogroup", "slider", "spinbutton", "textbox", "columnheader", "rowheader", "searchbox", "switch", "treegrid"];\nfunction getReadonly(element) {\n  const tagName = elementSafeTagName(element);\n  if (["INPUT", "TEXTAREA", "SELECT"].includes(tagName))\n    return element.hasAttribute("readonly");\n  if (kAriaReadonlyRoles.includes(getAriaRole(element) || ""))\n    return element.getAttribute("aria-readonly") === "true";\n  if (element.isContentEditable)\n    return false;\n  return "error";\n}\nvar kAriaPressedRoles = ["button"];\nfunction getAriaPressed(element) {\n  if (kAriaPressedRoles.includes(getAriaRole(element) || "")) {\n    const pressed = element.getAttribute("aria-pressed");\n    if (pressed === "true")\n      return true;\n    if (pressed === "mixed")\n      return "mixed";\n  }\n  return false;\n}\nvar kAriaExpandedRoles = ["application", "button", "checkbox", "combobox", "gridcell", "link", "listbox", "menuitem", "row", "rowheader", "tab", "treeitem", "columnheader", "menuitemcheckbox", "menuitemradio", "rowheader", "switch"];\nfunction getAriaExpanded(element) {\n  if (elementSafeTagName(element) === "DETAILS")\n    return element.open;\n  if (kAriaExpandedRoles.includes(getAriaRole(element) || "")) {\n    const expanded = element.getAttribute("aria-expanded");\n    if (expanded === null)\n      return void 0;\n    if (expanded === "true")\n      return true;\n    return false;\n  }\n  return void 0;\n}\nvar kAriaLevelRoles = ["heading", "listitem", "row", "treeitem"];\nfunction getAriaLevel(element) {\n  const native = { "H1": 1, "H2": 2, "H3": 3, "H4": 4, "H5": 5, "H6": 6 }[elementSafeTagName(element)];\n  if (native)\n    return native;\n  if (kAriaLevelRoles.includes(getAriaRole(element) || "")) {\n    const attr = element.getAttribute("aria-level");\n    const value = attr === null ? Number.NaN : Number(attr);\n    if (Number.isInteger(value) && value >= 1)\n      return value;\n  }\n  return 0;\n}\nvar kAriaDisabledRoles = ["application", "button", "composite", "gridcell", "group", "input", "link", "menuitem", "scrollbar", "separator", "tab", "checkbox", "columnheader", "combobox", "grid", "listbox", "menu", "menubar", "menuitemcheckbox", "menuitemradio", "option", "radio", "radiogroup", "row", "rowheader", "searchbox", "select", "slider", "spinbutton", "switch", "tablist", "textbox", "toolbar", "tree", "treegrid", "treeitem"];\nfunction getAriaDisabled(element) {\n  return isNativelyDisabled(element) || hasExplicitAriaDisabled(element);\n}\nfunction isNativelyDisabled(element) {\n  const isNativeFormControl = ["BUTTON", "INPUT", "SELECT", "TEXTAREA", "OPTION", "OPTGROUP"].includes(element.tagName);\n  return isNativeFormControl && (element.hasAttribute("disabled") || belongsToDisabledFieldSet(element));\n}\nfunction belongsToDisabledFieldSet(element) {\n  const fieldSetElement = element == null ? void 0 : element.closest("FIELDSET[DISABLED]");\n  if (!fieldSetElement)\n    return false;\n  const legendElement = fieldSetElement.querySelector(":scope > LEGEND");\n  return !legendElement || !legendElement.contains(element);\n}\nfunction hasExplicitAriaDisabled(element, isAncestor = false) {\n  if (!element)\n    return false;\n  if (isAncestor || kAriaDisabledRoles.includes(getAriaRole(element) || "")) {\n    const attribute = (element.getAttribute("aria-disabled") || "").toLowerCase();\n    if (attribute === "true")\n      return true;\n    if (attribute === "false")\n      return false;\n    return hasExplicitAriaDisabled(parentElementOrShadowHost(element), true);\n  }\n  return false;\n}\nfunction getAccessibleNameFromAssociatedLabels(labels, options) {\n  return [...labels].map((label) => getTextAlternativeInternal(label, {\n    ...options,\n    embeddedInLabel: { element: label, hidden: isElementHiddenForAria(label) },\n    embeddedInNativeTextAlternative: void 0,\n    embeddedInLabelledBy: void 0,\n    embeddedInDescribedBy: void 0,\n    embeddedInTargetElement: void 0\n  })).filter((accessibleName) => !!accessibleName).join(" ");\n}\nvar cacheAccessibleName;\nvar cacheAccessibleNameHidden;\nvar cacheAccessibleDescription;\nvar cacheAccessibleDescriptionHidden;\nvar cacheAccessibleErrorMessage;\nvar cacheIsHidden;\nvar cachePseudoContentBefore;\nvar cachePseudoContentAfter;\nvar cachesCounter = 0;\nfunction beginAriaCaches() {\n  ++cachesCounter;\n  cacheAccessibleName != null ? cacheAccessibleName : cacheAccessibleName = new Map();\n  cacheAccessibleNameHidden != null ? cacheAccessibleNameHidden : cacheAccessibleNameHidden = new Map();\n  cacheAccessibleDescription != null ? cacheAccessibleDescription : cacheAccessibleDescription = new Map();\n  cacheAccessibleDescriptionHidden != null ? cacheAccessibleDescriptionHidden : cacheAccessibleDescriptionHidden = new Map();\n  cacheAccessibleErrorMessage != null ? cacheAccessibleErrorMessage : cacheAccessibleErrorMessage = new Map();\n  cacheIsHidden != null ? cacheIsHidden : cacheIsHidden = new Map();\n  cachePseudoContentBefore != null ? cachePseudoContentBefore : cachePseudoContentBefore = new Map();\n  cachePseudoContentAfter != null ? cachePseudoContentAfter : cachePseudoContentAfter = new Map();\n}\nfunction endAriaCaches() {\n  if (!--cachesCounter) {\n    cacheAccessibleName = void 0;\n    cacheAccessibleNameHidden = void 0;\n    cacheAccessibleDescription = void 0;\n    cacheAccessibleDescriptionHidden = void 0;\n    cacheAccessibleErrorMessage = void 0;\n    cacheIsHidden = void 0;\n    cachePseudoContentBefore = void 0;\n    cachePseudoContentAfter = void 0;\n  }\n}\nvar inputTypeToRole = {\n  "button": "button",\n  "checkbox": "checkbox",\n  "image": "button",\n  "number": "spinbutton",\n  "radio": "radio",\n  "range": "slider",\n  "reset": "button",\n  "submit": "button"\n};\n\n// packages/injected/src/yaml.ts\nfunction yamlEscapeKeyIfNeeded(str) {\n  if (!yamlStringNeedsQuotes(str))\n    return str;\n  return `\'` + str.replace(/\'/g, `\'\'`) + `\'`;\n}\nfunction yamlEscapeValueIfNeeded(str) {\n  if (!yamlStringNeedsQuotes(str))\n    return str;\n  return \'"\' + str.replace(/[\\\\"\\x00-\\x1f\\x7f-\\x9f]/g, (c) => {\n    switch (c) {\n      case "\\\\":\n        return "\\\\\\\\";\n      case \'"\':\n        return \'\\\\"\';\n      case "\\b":\n        return "\\\\b";\n      case "\\f":\n        return "\\\\f";\n      case "\\n":\n        return "\\\\n";\n      case "\\r":\n        return "\\\\r";\n      case "	":\n        return "\\\\t";\n      default:\n        const code = c.charCodeAt(0);\n        return "\\\\x" + code.toString(16).padStart(2, "0");\n    }\n  }) + \'"\';\n}\nfunction yamlStringNeedsQuotes(str) {\n  if (str.length === 0)\n    return true;\n  if (/^\\s|\\s$/.test(str))\n    return true;\n  if (/[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f-\\x9f]/.test(str))\n    return true;\n  if (/^-/.test(str))\n    return true;\n  if (/[\\n:](\\s|$)/.test(str))\n    return true;\n  if (/\\s#/.test(str))\n    return true;\n  if (/[\\n\\r]/.test(str))\n    return true;\n  if (/^[&*\\],?!>|@"\'#%]/.test(str))\n    return true;\n  if (/[{}`]/.test(str))\n    return true;\n  if (/^\\[/.test(str))\n    return true;\n  if (!isNaN(Number(str)) || ["y", "n", "yes", "no", "true", "false", "on", "off", "null"].includes(str.toLowerCase()))\n    return true;\n  return false;\n}\n\n// packages/injected/src/ariaSnapshot.ts\nfunction generateAriaTree(rootElement, generation) {\n  const visited = new Set();\n  const snapshot = {\n    root: { role: "fragment", name: "", children: [], element: rootElement, props: {} },\n    elements: new Map(),\n    generation,\n    ids: new Map()\n  };\n  const addElement = (element) => {\n    const id = snapshot.elements.size + 1;\n    snapshot.elements.set(id, element);\n    snapshot.ids.set(element, id);\n  };\n  addElement(rootElement);\n  const visit = (ariaNode, node) => {\n    if (visited.has(node))\n      return;\n    visited.add(node);\n    if (node.nodeType === Node.TEXT_NODE && node.nodeValue) {\n      const text = node.nodeValue;\n      if (ariaNode.role !== "textbox" && text)\n        ariaNode.children.push(node.nodeValue || "");\n      return;\n    }\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return;\n    const element = node;\n    if (isElementHiddenForAria(element))\n      return;\n    const ariaChildren = [];\n    if (element.hasAttribute("aria-owns")) {\n      const ids = element.getAttribute("aria-owns").split(/\\s+/);\n      for (const id of ids) {\n        const ownedElement = rootElement.ownerDocument.getElementById(id);\n        if (ownedElement)\n          ariaChildren.push(ownedElement);\n      }\n    }\n    addElement(element);\n    const childAriaNode = toAriaNode(element);\n    if (childAriaNode)\n      ariaNode.children.push(childAriaNode);\n    processElement(childAriaNode || ariaNode, element, ariaChildren);\n  };\n  function processElement(ariaNode, element, ariaChildren = []) {\n    var _a;\n    const display = ((_a = getElementComputedStyle(element)) == null ? void 0 : _a.display) || "inline";\n    const treatAsBlock = display !== "inline" || element.nodeName === "BR" ? " " : "";\n    if (treatAsBlock)\n      ariaNode.children.push(treatAsBlock);\n    ariaNode.children.push(getPseudoContent(element, "::before"));\n    const assignedNodes = element.nodeName === "SLOT" ? element.assignedNodes() : [];\n    if (assignedNodes.length) {\n      for (const child of assignedNodes)\n        visit(ariaNode, child);\n    } else {\n      for (let child = element.firstChild; child; child = child.nextSibling) {\n        if (!child.assignedSlot)\n          visit(ariaNode, child);\n      }\n      if (element.shadowRoot) {\n        for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)\n          visit(ariaNode, child);\n      }\n    }\n    for (const child of ariaChildren)\n      visit(ariaNode, child);\n    ariaNode.children.push(getPseudoContent(element, "::after"));\n    if (treatAsBlock)\n      ariaNode.children.push(treatAsBlock);\n    if (ariaNode.children.length === 1 && ariaNode.name === ariaNode.children[0])\n      ariaNode.children = [];\n    if (ariaNode.role === "link" && element.hasAttribute("href")) {\n      const href = element.getAttribute("href");\n      ariaNode.props["url"] = href;\n    }\n  }\n  beginAriaCaches();\n  try {\n    visit(snapshot.root, rootElement);\n  } finally {\n    endAriaCaches();\n  }\n  normalizeStringChildren(snapshot.root);\n  return snapshot;\n}\nfunction toAriaNode(element) {\n  if (element.nodeName === "IFRAME")\n    return { role: "iframe", name: "", children: [], props: {}, element };\n  const role = getAriaRole(element);\n  if (!role || role === "presentation" || role === "none")\n    return null;\n  const name = normalizeWhiteSpace(getElementAccessibleName(element, false) || "");\n  const result = { role, name, children: [], props: {}, element };\n  if (kAriaCheckedRoles.includes(role))\n    result.checked = getAriaChecked(element);\n  if (kAriaDisabledRoles.includes(role))\n    result.disabled = getAriaDisabled(element);\n  if (kAriaExpandedRoles.includes(role))\n    result.expanded = getAriaExpanded(element);\n  if (kAriaLevelRoles.includes(role))\n    result.level = getAriaLevel(element);\n  if (kAriaPressedRoles.includes(role))\n    result.pressed = getAriaPressed(element);\n  if (kAriaSelectedRoles.includes(role))\n    result.selected = getAriaSelected(element);\n  if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n    if (element.type !== "checkbox" && element.type !== "radio" && (element.type !== "file" || getGlobalOptions().inputFileRoleTextbox))\n      result.children = [element.value];\n  }\n  return result;\n}\nfunction normalizeStringChildren(rootA11yNode) {\n  const flushChildren = (buffer, normalizedChildren) => {\n    if (!buffer.length)\n      return;\n    const text = normalizeWhiteSpace(buffer.join(""));\n    if (text)\n      normalizedChildren.push(text);\n    buffer.length = 0;\n  };\n  const visit = (ariaNode) => {\n    const normalizedChildren = [];\n    const buffer = [];\n    for (const child of ariaNode.children || []) {\n      if (typeof child === "string") {\n        buffer.push(child);\n      } else {\n        flushChildren(buffer, normalizedChildren);\n        visit(child);\n        normalizedChildren.push(child);\n      }\n    }\n    flushChildren(buffer, normalizedChildren);\n    ariaNode.children = normalizedChildren.length ? normalizedChildren : [];\n    if (ariaNode.children.length === 1 && ariaNode.children[0] === ariaNode.name)\n      ariaNode.children = [];\n  };\n  visit(rootA11yNode);\n}\nfunction matchesText(text, template) {\n  if (!template)\n    return true;\n  if (!text)\n    return false;\n  if (typeof template === "string")\n    return text === template;\n  return !!text.match(new RegExp(template.pattern));\n}\nfunction matchesTextNode(text, template) {\n  return matchesText(text, template.text);\n}\nfunction matchesName(text, template) {\n  return matchesText(text, template.name);\n}\nfunction matchesAriaTree(rootElement, template) {\n  const snapshot = generateAriaTree(rootElement, 0);\n  const matches = matchesNodeDeep(snapshot.root, template, false, false);\n  return {\n    matches,\n    received: {\n      raw: renderAriaTree(snapshot, { mode: "raw" }),\n      regex: renderAriaTree(snapshot, { mode: "regex" })\n    }\n  };\n}\nfunction getAllByAria(rootElement, template) {\n  const root = generateAriaTree(rootElement, 0).root;\n  const matches = matchesNodeDeep(root, template, true, false);\n  return matches.map((n) => n.element);\n}\nfunction matchesNode(node, template, isDeepEqual) {\n  var _a;\n  if (typeof node === "string" && template.kind === "text")\n    return matchesTextNode(node, template);\n  if (node === null || typeof node !== "object" || template.kind !== "role")\n    return false;\n  if (template.role !== "fragment" && template.role !== node.role)\n    return false;\n  if (template.checked !== void 0 && template.checked !== node.checked)\n    return false;\n  if (template.disabled !== void 0 && template.disabled !== node.disabled)\n    return false;\n  if (template.expanded !== void 0 && template.expanded !== node.expanded)\n    return false;\n  if (template.level !== void 0 && template.level !== node.level)\n    return false;\n  if (template.pressed !== void 0 && template.pressed !== node.pressed)\n    return false;\n  if (template.selected !== void 0 && template.selected !== node.selected)\n    return false;\n  if (!matchesName(node.name, template))\n    return false;\n  if (!matchesText(node.props.url, (_a = template.props) == null ? void 0 : _a.url))\n    return false;\n  if (template.containerMode === "contain")\n    return containsList(node.children || [], template.children || []);\n  if (template.containerMode === "equal")\n    return listEqual(node.children || [], template.children || [], false);\n  if (template.containerMode === "deep-equal" || isDeepEqual)\n    return listEqual(node.children || [], template.children || [], true);\n  return containsList(node.children || [], template.children || []);\n}\nfunction listEqual(children, template, isDeepEqual) {\n  if (template.length !== children.length)\n    return false;\n  for (let i = 0; i < template.length; ++i) {\n    if (!matchesNode(children[i], template[i], isDeepEqual))\n      return false;\n  }\n  return true;\n}\nfunction containsList(children, template) {\n  if (template.length > children.length)\n    return false;\n  const cc = children.slice();\n  const tt = template.slice();\n  for (const t of tt) {\n    let c = cc.shift();\n    while (c) {\n      if (matchesNode(c, t, false))\n        break;\n      c = cc.shift();\n    }\n    if (!c)\n      return false;\n  }\n  return true;\n}\nfunction matchesNodeDeep(root, template, collectAll, isDeepEqual) {\n  const results = [];\n  const visit = (node, parent) => {\n    if (matchesNode(node, template, isDeepEqual)) {\n      const result = typeof node === "string" ? parent : node;\n      if (result)\n        results.push(result);\n      return !collectAll;\n    }\n    if (typeof node === "string")\n      return false;\n    for (const child of node.children || []) {\n      if (visit(child, node))\n        return true;\n    }\n    return false;\n  };\n  visit(root, null);\n  return results;\n}\nfunction renderAriaTree(ariaSnapshot, options) {\n  const lines = [];\n  const includeText = (options == null ? void 0 : options.mode) === "regex" ? textContributesInfo : () => true;\n  const renderString = (options == null ? void 0 : options.mode) === "regex" ? convertToBestGuessRegex : (str) => str;\n  const visit = (ariaNode2, parentAriaNode, indent) => {\n    if (typeof ariaNode2 === "string") {\n      if (parentAriaNode && !includeText(parentAriaNode, ariaNode2))\n        return;\n      const text = yamlEscapeValueIfNeeded(renderString(ariaNode2));\n      if (text)\n        lines.push(indent + "- text: " + text);\n      return;\n    }\n    let key = ariaNode2.role;\n    if (ariaNode2.name && ariaNode2.name.length <= 900) {\n      const name = renderString(ariaNode2.name);\n      if (name) {\n        const stringifiedName = name.startsWith("/") && name.endsWith("/") ? name : JSON.stringify(name);\n        key += " " + stringifiedName;\n      }\n    }\n    if (ariaNode2.checked === "mixed")\n      key += ` [checked=mixed]`;\n    if (ariaNode2.checked === true)\n      key += ` [checked]`;\n    if (ariaNode2.disabled)\n      key += ` [disabled]`;\n    if (ariaNode2.expanded)\n      key += ` [expanded]`;\n    if (ariaNode2.level)\n      key += ` [level=${ariaNode2.level}]`;\n    if (ariaNode2.pressed === "mixed")\n      key += ` [pressed=mixed]`;\n    if (ariaNode2.pressed === true)\n      key += ` [pressed]`;\n    if (ariaNode2.selected === true)\n      key += ` [selected]`;\n    if (options == null ? void 0 : options.ref) {\n      const id = ariaSnapshot.ids.get(ariaNode2.element);\n      if (id)\n        key += ` [ref=s${ariaSnapshot.generation}e${id}]`;\n    }\n    const escapedKey = indent + "- " + yamlEscapeKeyIfNeeded(key);\n    const hasProps = !!Object.keys(ariaNode2.props).length;\n    if (!ariaNode2.children.length && !hasProps) {\n      lines.push(escapedKey);\n    } else if (ariaNode2.children.length === 1 && typeof ariaNode2.children[0] === "string" && !hasProps) {\n      const text = includeText(ariaNode2, ariaNode2.children[0]) ? renderString(ariaNode2.children[0]) : null;\n      if (text)\n        lines.push(escapedKey + ": " + yamlEscapeValueIfNeeded(text));\n      else\n        lines.push(escapedKey);\n    } else {\n      lines.push(escapedKey + ":");\n      for (const [name, value] of Object.entries(ariaNode2.props))\n        lines.push(indent + "  - /" + name + ": " + yamlEscapeValueIfNeeded(value));\n      for (const child of ariaNode2.children || [])\n        visit(child, ariaNode2, indent + "  ");\n    }\n  };\n  const ariaNode = ariaSnapshot.root;\n  if (ariaNode.role === "fragment") {\n    for (const child of ariaNode.children || [])\n      visit(child, ariaNode, "");\n  } else {\n    visit(ariaNode, null, "");\n  }\n  return lines.join("\\n");\n}\nfunction convertToBestGuessRegex(text) {\n  const dynamicContent = [\n    // 2mb\n    { regex: /\\b[\\d,.]+[bkmBKM]+\\b/, replacement: "[\\\\d,.]+[bkmBKM]+" },\n    // 2ms, 20s\n    { regex: /\\b\\d+[hmsp]+\\b/, replacement: "\\\\d+[hmsp]+" },\n    { regex: /\\b[\\d,.]+[hmsp]+\\b/, replacement: "[\\\\d,.]+[hmsp]+" },\n    // Do not replace single digits with regex by default.\n    // 2+ digits: [Issue 22, 22.3, 2.33, 2,333]\n    { regex: /\\b\\d+,\\d+\\b/, replacement: "\\\\d+,\\\\d+" },\n    { regex: /\\b\\d+\\.\\d{2,}\\b/, replacement: "\\\\d+\\\\.\\\\d+" },\n    { regex: /\\b\\d{2,}\\.\\d+\\b/, replacement: "\\\\d+\\\\.\\\\d+" },\n    { regex: /\\b\\d{2,}\\b/, replacement: "\\\\d+" }\n  ];\n  let pattern = "";\n  let lastIndex = 0;\n  const combinedRegex = new RegExp(dynamicContent.map((r) => "(" + r.regex.source + ")").join("|"), "g");\n  text.replace(combinedRegex, (match, ...args) => {\n    const offset = args[args.length - 2];\n    const groups = args.slice(0, -2);\n    pattern += escapeRegExp(text.slice(lastIndex, offset));\n    for (let i = 0; i < groups.length; i++) {\n      if (groups[i]) {\n        const { replacement } = dynamicContent[i];\n        pattern += replacement;\n        break;\n      }\n    }\n    lastIndex = offset + match.length;\n    return match;\n  });\n  if (!pattern)\n    return text;\n  pattern += escapeRegExp(text.slice(lastIndex));\n  return String(new RegExp(pattern));\n}\nfunction textContributesInfo(node, text) {\n  if (!text.length)\n    return false;\n  if (!node.name)\n    return true;\n  if (node.name.length > text.length)\n    return false;\n  const substr = text.length <= 200 && node.name.length <= 200 ? longestCommonSubstring(text, node.name) : "";\n  let filtered = text;\n  while (substr && filtered.includes(substr))\n    filtered = filtered.replace(substr, "");\n  return filtered.trim().length / text.length > 0.1;\n}\n\n// packages/injected/src/highlight.css?inline\nvar highlight_default = ":host{font-size:13px;font-family:system-ui,Ubuntu,Droid Sans,sans-serif;color:#333}svg{position:absolute;height:0}x-pw-tooltip{backdrop-filter:blur(5px);background-color:#fff;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:none;font-size:12.8px;font-weight:400;left:0;line-height:1.5;max-width:600px;position:absolute;top:0;padding:0;flex-direction:column;overflow:hidden}x-pw-tooltip-line{display:flex;max-width:600px;padding:6px;user-select:none;cursor:pointer}x-pw-tooltip-line.selectable:hover{background-color:#f2f2f2;overflow:hidden}x-pw-tooltip-footer{display:flex;max-width:600px;padding:6px;user-select:none;color:#777}x-pw-dialog{background-color:#fff;pointer-events:auto;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:flex;flex-direction:column;position:absolute;width:400px;height:150px;z-index:10;font-size:13px}x-pw-dialog-body{display:flex;flex-direction:column;flex:auto}x-pw-dialog-body label{margin:5px 8px;display:flex;flex-direction:row;align-items:center}x-pw-highlight{position:absolute;top:0;left:0;width:0;height:0}x-pw-action-point{position:absolute;width:20px;height:20px;background:red;border-radius:10px;margin:-10px 0 0 -10px;z-index:2}x-pw-separator{height:1px;margin:6px 9px;background:#949494e5}x-pw-tool-gripper{height:28px;width:24px;margin:2px 0;cursor:grab}x-pw-tool-gripper:active{cursor:grabbing}x-pw-tool-gripper>x-div{width:16px;height:16px;margin:6px 4px;clip-path:url(#icon-gripper);background-color:#555}x-pw-tools-list>label{display:flex;align-items:center;margin:0 10px;user-select:none}x-pw-tools-list{display:flex;width:100%;border-bottom:1px solid #dddddd}x-pw-tool-item{pointer-events:auto;height:28px;width:28px;border-radius:3px}x-pw-tool-item:not(.disabled){cursor:pointer}x-pw-tool-item:not(.disabled):hover{background-color:#dbdbdb}x-pw-tool-item.toggled{background-color:#8acae480}x-pw-tool-item.toggled:not(.disabled):hover{background-color:#8acae4c4}x-pw-tool-item>x-div{width:16px;height:16px;margin:6px;background-color:#3a3a3a}x-pw-tool-item.disabled>x-div{background-color:#61616180;cursor:default}x-pw-tool-item.record.toggled{background-color:transparent}x-pw-tool-item.record.toggled:not(.disabled):hover{background-color:#dbdbdb}x-pw-tool-item.record.toggled>x-div{background-color:#a1260d}x-pw-tool-item.record.disabled.toggled>x-div{opacity:.8}x-pw-tool-item.accept>x-div{background-color:#388a34}x-pw-tool-item.record>x-div{clip-path:url(#icon-circle-large-filled)}x-pw-tool-item.pick-locator>x-div{clip-path:url(#icon-inspect)}x-pw-tool-item.text>x-div{clip-path:url(#icon-whole-word)}x-pw-tool-item.visibility>x-div{clip-path:url(#icon-eye)}x-pw-tool-item.value>x-div{clip-path:url(#icon-symbol-constant)}x-pw-tool-item.snapshot>x-div{clip-path:url(#icon-gist)}x-pw-tool-item.accept>x-div{clip-path:url(#icon-check)}x-pw-tool-item.cancel>x-div{clip-path:url(#icon-close)}x-pw-tool-item.succeeded>x-div{clip-path:url(#icon-pass);background-color:#388a34!important}x-pw-overlay{position:absolute;top:0;max-width:min-content;z-index:2147483647;background:transparent;pointer-events:auto}x-pw-overlay x-pw-tools-list{background-color:#fffd;box-shadow:#0000001a 0 5px 5px;border-radius:3px;border-bottom:none}x-pw-overlay x-pw-tool-item{margin:2px}textarea.text-editor{font-family:system-ui,Ubuntu,Droid Sans,sans-serif;flex:auto;border:none;margin:6px 10px;color:#333;outline:1px solid transparent!important;resize:none;padding:0;font-size:13px}textarea.text-editor.does-not-match{outline:1px solid red!important}x-div{display:block}x-spacer{flex:auto}*{box-sizing:border-box}*[hidden]{display:none!important}x-locator-editor{flex:none;width:100%;height:60px;padding:4px;border-bottom:1px solid #dddddd;outline:1px solid transparent}x-locator-editor.does-not-match{outline:1px solid red}.CodeMirror{width:100%!important;height:100%!important}\\n";\n\n// packages/injected/src/highlight.ts\nvar Highlight = class {\n  constructor(injectedScript) {\n    this._renderedEntries = [];\n    this._language = "javascript";\n    this._injectedScript = injectedScript;\n    const document = injectedScript.document;\n    this._isUnderTest = injectedScript.isUnderTest;\n    this._glassPaneElement = document.createElement("x-pw-glass");\n    this._glassPaneElement.style.position = "fixed";\n    this._glassPaneElement.style.top = "0";\n    this._glassPaneElement.style.right = "0";\n    this._glassPaneElement.style.bottom = "0";\n    this._glassPaneElement.style.left = "0";\n    this._glassPaneElement.style.zIndex = "2147483646";\n    this._glassPaneElement.style.pointerEvents = "none";\n    this._glassPaneElement.style.display = "flex";\n    this._glassPaneElement.style.backgroundColor = "transparent";\n    for (const eventName of ["click", "auxclick", "dragstart", "input", "keydown", "keyup", "pointerdown", "pointerup", "mousedown", "mouseup", "mouseleave", "focus", "scroll"]) {\n      this._glassPaneElement.addEventListener(eventName, (e) => {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      });\n    }\n    this._actionPointElement = document.createElement("x-pw-action-point");\n    this._actionPointElement.setAttribute("hidden", "true");\n    this._glassPaneShadow = this._glassPaneElement.attachShadow({ mode: this._isUnderTest ? "open" : "closed" });\n    if (typeof this._glassPaneShadow.adoptedStyleSheets.push === "function") {\n      const sheet = new this._injectedScript.window.CSSStyleSheet();\n      sheet.replaceSync(highlight_default);\n      this._glassPaneShadow.adoptedStyleSheets.push(sheet);\n    } else {\n      const styleElement = this._injectedScript.document.createElement("style");\n      styleElement.textContent = highlight_default;\n      this._glassPaneShadow.appendChild(styleElement);\n    }\n    this._glassPaneShadow.appendChild(this._actionPointElement);\n  }\n  install() {\n    if (this._injectedScript.document.documentElement && !this._injectedScript.document.documentElement.contains(this._glassPaneElement))\n      this._injectedScript.document.documentElement.appendChild(this._glassPaneElement);\n  }\n  setLanguage(language) {\n    this._language = language;\n  }\n  runHighlightOnRaf(selector) {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    const elements = this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement);\n    const locator = asLocator(this._language, stringifySelector(selector));\n    const color = elements.length > 1 ? "#f6b26b7f" : "#6fa8dc7f";\n    this.updateHighlight(elements.map((element, index) => {\n      const suffix = elements.length > 1 ? ` [${index + 1} of ${elements.length}]` : "";\n      return { element, color, tooltipText: locator + suffix };\n    }));\n    this._rafRequest = requestAnimationFrame(() => this.runHighlightOnRaf(selector));\n  }\n  uninstall() {\n    if (this._rafRequest)\n      cancelAnimationFrame(this._rafRequest);\n    this._glassPaneElement.remove();\n  }\n  showActionPoint(x, y) {\n    this._actionPointElement.style.top = y + "px";\n    this._actionPointElement.style.left = x + "px";\n    this._actionPointElement.hidden = false;\n  }\n  hideActionPoint() {\n    this._actionPointElement.hidden = true;\n  }\n  clearHighlight() {\n    var _a, _b;\n    for (const entry of this._renderedEntries) {\n      (_a = entry.highlightElement) == null ? void 0 : _a.remove();\n      (_b = entry.tooltipElement) == null ? void 0 : _b.remove();\n    }\n    this._renderedEntries = [];\n  }\n  maskElements(elements, color) {\n    this.updateHighlight(elements.map((element) => ({ element, color })));\n  }\n  updateHighlight(entries) {\n    if (this._highlightIsUpToDate(entries))\n      return;\n    this.clearHighlight();\n    for (const entry of entries) {\n      const highlightElement = this._createHighlightElement();\n      this._glassPaneShadow.appendChild(highlightElement);\n      let tooltipElement;\n      if (entry.tooltipText) {\n        tooltipElement = this._injectedScript.document.createElement("x-pw-tooltip");\n        this._glassPaneShadow.appendChild(tooltipElement);\n        tooltipElement.style.top = "0";\n        tooltipElement.style.left = "0";\n        tooltipElement.style.display = "flex";\n        const lineElement = this._injectedScript.document.createElement("x-pw-tooltip-line");\n        lineElement.textContent = entry.tooltipText;\n        tooltipElement.appendChild(lineElement);\n      }\n      this._renderedEntries.push({ targetElement: entry.element, color: entry.color, tooltipElement, highlightElement });\n    }\n    for (const entry of this._renderedEntries) {\n      entry.box = entry.targetElement.getBoundingClientRect();\n      if (!entry.tooltipElement)\n        continue;\n      const { anchorLeft, anchorTop } = this.tooltipPosition(entry.box, entry.tooltipElement);\n      entry.tooltipTop = anchorTop;\n      entry.tooltipLeft = anchorLeft;\n    }\n    for (const entry of this._renderedEntries) {\n      if (entry.tooltipElement) {\n        entry.tooltipElement.style.top = entry.tooltipTop + "px";\n        entry.tooltipElement.style.left = entry.tooltipLeft + "px";\n      }\n      const box = entry.box;\n      entry.highlightElement.style.backgroundColor = entry.color;\n      entry.highlightElement.style.left = box.x + "px";\n      entry.highlightElement.style.top = box.y + "px";\n      entry.highlightElement.style.width = box.width + "px";\n      entry.highlightElement.style.height = box.height + "px";\n      entry.highlightElement.style.display = "block";\n      if (this._isUnderTest)\n        console.error("Highlight box for test: " + JSON.stringify({ x: box.x, y: box.y, width: box.width, height: box.height }));\n    }\n  }\n  firstBox() {\n    var _a;\n    return (_a = this._renderedEntries[0]) == null ? void 0 : _a.box;\n  }\n  tooltipPosition(box, tooltipElement) {\n    const tooltipWidth = tooltipElement.offsetWidth;\n    const tooltipHeight = tooltipElement.offsetHeight;\n    const totalWidth = this._glassPaneElement.offsetWidth;\n    const totalHeight = this._glassPaneElement.offsetHeight;\n    let anchorLeft = box.left;\n    if (anchorLeft + tooltipWidth > totalWidth - 5)\n      anchorLeft = totalWidth - tooltipWidth - 5;\n    let anchorTop = box.bottom + 5;\n    if (anchorTop + tooltipHeight > totalHeight - 5) {\n      if (box.top > tooltipHeight + 5) {\n        anchorTop = box.top - tooltipHeight - 5;\n      } else {\n        anchorTop = totalHeight - 5 - tooltipHeight;\n      }\n    }\n    return { anchorLeft, anchorTop };\n  }\n  _highlightIsUpToDate(entries) {\n    if (entries.length !== this._renderedEntries.length)\n      return false;\n    for (let i = 0; i < this._renderedEntries.length; ++i) {\n      if (entries[i].element !== this._renderedEntries[i].targetElement)\n        return false;\n      if (entries[i].color !== this._renderedEntries[i].color)\n        return false;\n      const oldBox = this._renderedEntries[i].box;\n      if (!oldBox)\n        return false;\n      const box = entries[i].element.getBoundingClientRect();\n      if (box.top !== oldBox.top || box.right !== oldBox.right || box.bottom !== oldBox.bottom || box.left !== oldBox.left)\n        return false;\n    }\n    return true;\n  }\n  _createHighlightElement() {\n    return this._injectedScript.document.createElement("x-pw-highlight");\n  }\n  appendChild(element) {\n    this._glassPaneShadow.appendChild(element);\n  }\n};\n\n// packages/injected/src/layoutSelectorUtils.ts\nfunction boxRightOf(box1, box2, maxDistance) {\n  const distance = box1.left - box2.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxLeftOf(box1, box2, maxDistance) {\n  const distance = box2.left - box1.right;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);\n}\nfunction boxAbove(box1, box2, maxDistance) {\n  const distance = box2.top - box1.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxBelow(box1, box2, maxDistance) {\n  const distance = box1.top - box2.bottom;\n  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)\n    return;\n  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);\n}\nfunction boxNear(box1, box2, maxDistance) {\n  const kThreshold = maxDistance === void 0 ? 50 : maxDistance;\n  let score = 0;\n  if (box1.left - box2.right >= 0)\n    score += box1.left - box2.right;\n  if (box2.left - box1.right >= 0)\n    score += box2.left - box1.right;\n  if (box2.top - box1.bottom >= 0)\n    score += box2.top - box1.bottom;\n  if (box1.top - box2.bottom >= 0)\n    score += box1.top - box2.bottom;\n  return score > kThreshold ? void 0 : score;\n}\nvar kLayoutSelectorNames = ["left-of", "right-of", "above", "below", "near"];\nfunction layoutSelectorScore(name, element, inner, maxDistance) {\n  const box = element.getBoundingClientRect();\n  const scorer = { "left-of": boxLeftOf, "right-of": boxRightOf, "above": boxAbove, "below": boxBelow, "near": boxNear }[name];\n  let bestScore;\n  for (const e of inner) {\n    if (e === element)\n      continue;\n    const score = scorer(box, e.getBoundingClientRect(), maxDistance);\n    if (score === void 0)\n      continue;\n    if (bestScore === void 0 || score < bestScore)\n      bestScore = score;\n  }\n  return bestScore;\n}\n\n// packages/injected/src/selectorUtils.ts\nfunction matchesComponentAttribute(obj, attr) {\n  for (const token of attr.jsonPath) {\n    if (obj !== void 0 && obj !== null)\n      obj = obj[token];\n  }\n  return matchesAttributePart(obj, attr);\n}\nfunction matchesAttributePart(value, attr) {\n  const objValue = typeof value === "string" && !attr.caseSensitive ? value.toUpperCase() : value;\n  const attrValue = typeof attr.value === "string" && !attr.caseSensitive ? attr.value.toUpperCase() : attr.value;\n  if (attr.op === "<truthy>")\n    return !!objValue;\n  if (attr.op === "=") {\n    if (attrValue instanceof RegExp)\n      return typeof objValue === "string" && !!objValue.match(attrValue);\n    return objValue === attrValue;\n  }\n  if (typeof objValue !== "string" || typeof attrValue !== "string")\n    return false;\n  if (attr.op === "*=")\n    return objValue.includes(attrValue);\n  if (attr.op === "^=")\n    return objValue.startsWith(attrValue);\n  if (attr.op === "$=")\n    return objValue.endsWith(attrValue);\n  if (attr.op === "|=")\n    return objValue === attrValue || objValue.startsWith(attrValue + "-");\n  if (attr.op === "~=")\n    return objValue.split(" ").includes(attrValue);\n  return false;\n}\nfunction shouldSkipForTextMatching(element) {\n  const document = element.ownerDocument;\n  return element.nodeName === "SCRIPT" || element.nodeName === "NOSCRIPT" || element.nodeName === "STYLE" || document.head && document.head.contains(element);\n}\nfunction elementText(cache, root) {\n  let value = cache.get(root);\n  if (value === void 0) {\n    value = { full: "", normalized: "", immediate: [] };\n    if (!shouldSkipForTextMatching(root)) {\n      let currentImmediate = "";\n      if (root instanceof HTMLInputElement && (root.type === "submit" || root.type === "button")) {\n        value = { full: root.value, normalized: normalizeWhiteSpace(root.value), immediate: [root.value] };\n      } else {\n        for (let child = root.firstChild; child; child = child.nextSibling) {\n          if (child.nodeType === Node.TEXT_NODE) {\n            value.full += child.nodeValue || "";\n            currentImmediate += child.nodeValue || "";\n          } else if (child.nodeType === Node.COMMENT_NODE) {\n            continue;\n          } else {\n            if (currentImmediate)\n              value.immediate.push(currentImmediate);\n            currentImmediate = "";\n            if (child.nodeType === Node.ELEMENT_NODE)\n              value.full += elementText(cache, child).full;\n          }\n        }\n        if (currentImmediate)\n          value.immediate.push(currentImmediate);\n        if (root.shadowRoot)\n          value.full += elementText(cache, root.shadowRoot).full;\n        if (value.full)\n          value.normalized = normalizeWhiteSpace(value.full);\n      }\n    }\n    cache.set(root, value);\n  }\n  return value;\n}\nfunction elementMatchesText(cache, element, matcher) {\n  if (shouldSkipForTextMatching(element))\n    return "none";\n  if (!matcher(elementText(cache, element)))\n    return "none";\n  for (let child = element.firstChild; child; child = child.nextSibling) {\n    if (child.nodeType === Node.ELEMENT_NODE && matcher(elementText(cache, child)))\n      return "selfAndChildren";\n  }\n  if (element.shadowRoot && matcher(elementText(cache, element.shadowRoot)))\n    return "selfAndChildren";\n  return "self";\n}\nfunction getElementLabels(textCache, element) {\n  const labels = getAriaLabelledByElements(element);\n  if (labels)\n    return labels.map((label) => elementText(textCache, label));\n  const ariaLabel = element.getAttribute("aria-label");\n  if (ariaLabel !== null && !!ariaLabel.trim())\n    return [{ full: ariaLabel, normalized: normalizeWhiteSpace(ariaLabel), immediate: [ariaLabel] }];\n  const isNonHiddenInput = element.nodeName === "INPUT" && element.type !== "hidden";\n  if (["BUTTON", "METER", "OUTPUT", "PROGRESS", "SELECT", "TEXTAREA"].includes(element.nodeName) || isNonHiddenInput) {\n    const labels2 = element.labels;\n    if (labels2)\n      return [...labels2].map((label) => elementText(textCache, label));\n  }\n  return [];\n}\n\n// packages/injected/src/reactSelectorEngine.ts\nfunction getFunctionComponentName(component) {\n  return component.displayName || component.name || "Anonymous";\n}\nfunction getComponentName(reactElement) {\n  if (reactElement.type) {\n    switch (typeof reactElement.type) {\n      case "function":\n        return getFunctionComponentName(reactElement.type);\n      case "string":\n        return reactElement.type;\n      case "object":\n        return reactElement.type.displayName || (reactElement.type.render ? getFunctionComponentName(reactElement.type.render) : "");\n    }\n  }\n  if (reactElement._currentElement) {\n    const elementType = reactElement._currentElement.type;\n    if (typeof elementType === "string")\n      return elementType;\n    if (typeof elementType === "function")\n      return elementType.displayName || elementType.name || "Anonymous";\n  }\n  return "";\n}\nfunction getComponentKey(reactElement) {\n  var _a, _b;\n  return (_b = reactElement.key) != null ? _b : (_a = reactElement._currentElement) == null ? void 0 : _a.key;\n}\nfunction getChildren(reactElement) {\n  if (reactElement.child) {\n    const children = [];\n    for (let child = reactElement.child; child; child = child.sibling)\n      children.push(child);\n    return children;\n  }\n  if (!reactElement._currentElement)\n    return [];\n  const isKnownElement = (reactElement2) => {\n    var _a;\n    const elementType = (_a = reactElement2._currentElement) == null ? void 0 : _a.type;\n    return typeof elementType === "function" || typeof elementType === "string";\n  };\n  if (reactElement._renderedComponent) {\n    const child = reactElement._renderedComponent;\n    return isKnownElement(child) ? [child] : [];\n  }\n  if (reactElement._renderedChildren)\n    return [...Object.values(reactElement._renderedChildren)].filter(isKnownElement);\n  return [];\n}\nfunction getProps(reactElement) {\n  var _a;\n  const props = (\n    // React 16+\n    reactElement.memoizedProps || // React 15\n    ((_a = reactElement._currentElement) == null ? void 0 : _a.props)\n  );\n  if (!props || typeof props === "string")\n    return props;\n  const result = { ...props };\n  delete result.children;\n  return result;\n}\nfunction buildComponentsTree(reactElement) {\n  var _a;\n  const treeNode = {\n    key: getComponentKey(reactElement),\n    name: getComponentName(reactElement),\n    children: getChildren(reactElement).map(buildComponentsTree),\n    rootElements: [],\n    props: getProps(reactElement)\n  };\n  const rootElement = (\n    // React 16+\n    // @see https://github.com/baruchvlz/resq/blob/5c15a5e04d3f7174087248f5a158c3d6dcc1ec72/src/utils.js#L29\n    reactElement.stateNode || // React 15\n    reactElement._hostNode || ((_a = reactElement._renderedComponent) == null ? void 0 : _a._hostNode)\n  );\n  if (rootElement instanceof Element) {\n    treeNode.rootElements.push(rootElement);\n  } else {\n    for (const child of treeNode.children)\n      treeNode.rootElements.push(...child.rootElements);\n  }\n  return treeNode;\n}\nfunction filterComponentsTree(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree(child, searchFn, result);\n  return result;\n}\nfunction findReactRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  do {\n    const node = walker.currentNode;\n    const reactNode = node;\n    const rootKey = Object.keys(reactNode).find((key) => key.startsWith("__reactContainer") && reactNode[key] !== null);\n    if (rootKey) {\n      roots.push(reactNode[rootKey].stateNode.current);\n    } else {\n      const legacyRootKey = "_reactRootContainer";\n      if (reactNode.hasOwnProperty(legacyRootKey) && reactNode[legacyRootKey] !== null) {\n        roots.push(reactNode[legacyRootKey]._internalRoot.current);\n      }\n    }\n    if (node instanceof Element && node.hasAttribute("data-reactroot")) {\n      for (const key of Object.keys(node)) {\n        if (key.startsWith("__reactInternalInstance") || key.startsWith("__reactFiber"))\n          roots.push(node[key]);\n      }\n    }\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findReactRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  return roots;\n}\nvar createReactEngine = () => ({\n  queryAll(scope, selector) {\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const reactRoots = findReactRoots(scope.ownerDocument || scope);\n    const trees = reactRoots.map((reactRoot) => buildComponentsTree(reactRoot));\n    const treeNodes = trees.map((tree) => filterComponentsTree(tree, (treeNode) => {\n      var _a;\n      const props = (_a = treeNode.props) != null ? _a : {};\n      if (treeNode.key !== void 0)\n        props.key = treeNode.key;\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((domNode) => !isInsideScope(scope, domNode)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = new Set();\n    for (const treeNode of treeNodes) {\n      for (const domNode of treeNode.rootElements)\n        allRootElements.add(domNode);\n    }\n    return [...allRootElements];\n  }\n});\n\n// packages/injected/src/roleSelectorEngine.ts\nvar kSupportedAttributes = ["selected", "checked", "pressed", "expanded", "level", "disabled", "name", "include-hidden"];\nkSupportedAttributes.sort();\nfunction validateSupportedRole(attr, roles, role) {\n  if (!roles.includes(role))\n    throw new Error(`"${attr}" attribute is only supported for roles: ${roles.slice().sort().map((role2) => `"${role2}"`).join(", ")}`);\n}\nfunction validateSupportedValues(attr, values) {\n  if (attr.op !== "<truthy>" && !values.includes(attr.value))\n    throw new Error(`"${attr.name}" must be one of ${values.map((v) => JSON.stringify(v)).join(", ")}`);\n}\nfunction validateSupportedOp(attr, ops) {\n  if (!ops.includes(attr.op))\n    throw new Error(`"${attr.name}" does not support "${attr.op}" matcher`);\n}\nfunction validateAttributes(attrs, role) {\n  const options = { role };\n  for (const attr of attrs) {\n    switch (attr.name) {\n      case "checked": {\n        validateSupportedRole(attr.name, kAriaCheckedRoles, role);\n        validateSupportedValues(attr, [true, false, "mixed"]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.checked = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "pressed": {\n        validateSupportedRole(attr.name, kAriaPressedRoles, role);\n        validateSupportedValues(attr, [true, false, "mixed"]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.pressed = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "selected": {\n        validateSupportedRole(attr.name, kAriaSelectedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.selected = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "expanded": {\n        validateSupportedRole(attr.name, kAriaExpandedRoles, role);\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.expanded = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "level": {\n        validateSupportedRole(attr.name, kAriaLevelRoles, role);\n        if (typeof attr.value === "string")\n          attr.value = +attr.value;\n        if (attr.op !== "=" || typeof attr.value !== "number" || Number.isNaN(attr.value))\n          throw new Error(`"level" attribute must be compared to a number`);\n        options.level = attr.value;\n        break;\n      }\n      case "disabled": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.disabled = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      case "name": {\n        if (attr.op === "<truthy>")\n          throw new Error(`"name" attribute must have a value`);\n        if (typeof attr.value !== "string" && !(attr.value instanceof RegExp))\n          throw new Error(`"name" attribute must be a string or a regular expression`);\n        options.name = attr.value;\n        options.nameOp = attr.op;\n        options.exact = attr.caseSensitive;\n        break;\n      }\n      case "include-hidden": {\n        validateSupportedValues(attr, [true, false]);\n        validateSupportedOp(attr, ["<truthy>", "="]);\n        options.includeHidden = attr.op === "<truthy>" ? true : attr.value;\n        break;\n      }\n      default: {\n        throw new Error(`Unknown attribute "${attr.name}", must be one of ${kSupportedAttributes.map((a) => `"${a}"`).join(", ")}.`);\n      }\n    }\n  }\n  return options;\n}\nfunction queryRole(scope, options, internal) {\n  const result = [];\n  const match = (element) => {\n    if (getAriaRole(element) !== options.role)\n      return;\n    if (options.selected !== void 0 && getAriaSelected(element) !== options.selected)\n      return;\n    if (options.checked !== void 0 && getAriaChecked(element) !== options.checked)\n      return;\n    if (options.pressed !== void 0 && getAriaPressed(element) !== options.pressed)\n      return;\n    if (options.expanded !== void 0 && getAriaExpanded(element) !== options.expanded)\n      return;\n    if (options.level !== void 0 && getAriaLevel(element) !== options.level)\n      return;\n    if (options.disabled !== void 0 && getAriaDisabled(element) !== options.disabled)\n      return;\n    if (!options.includeHidden) {\n      const isHidden = isElementHiddenForAria(element);\n      if (isHidden)\n        return;\n    }\n    if (options.name !== void 0) {\n      const accessibleName = normalizeWhiteSpace(getElementAccessibleName(element, !!options.includeHidden));\n      if (typeof options.name === "string")\n        options.name = normalizeWhiteSpace(options.name);\n      if (internal && !options.exact && options.nameOp === "=")\n        options.nameOp = "*=";\n      if (!matchesAttributePart(accessibleName, { name: "", jsonPath: [], op: options.nameOp || "=", value: options.name, caseSensitive: !!options.exact }))\n        return;\n    }\n    result.push(element);\n  };\n  const query = (root) => {\n    const shadows = [];\n    if (root.shadowRoot)\n      shadows.push(root.shadowRoot);\n    for (const element of root.querySelectorAll("*")) {\n      match(element);\n      if (element.shadowRoot)\n        shadows.push(element.shadowRoot);\n    }\n    shadows.forEach(query);\n  };\n  query(scope);\n  return result;\n}\nfunction createRoleEngine(internal) {\n  return {\n    queryAll: (scope, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      const role = parsed.name.toLowerCase();\n      if (!role)\n        throw new Error(`Role must not be empty`);\n      const options = validateAttributes(parsed.attributes, role);\n      beginAriaCaches();\n      try {\n        return queryRole(scope, options, internal);\n      } finally {\n        endAriaCaches();\n      }\n    }\n  };\n}\n\n// packages/injected/src/selectorEvaluator.ts\nvar SelectorEvaluatorImpl = class {\n  constructor() {\n    this._retainCacheCounter = 0;\n    this._cacheText = new Map();\n    this._cacheQueryCSS = new Map();\n    this._cacheMatches = new Map();\n    this._cacheQuery = new Map();\n    this._cacheMatchesSimple = new Map();\n    this._cacheMatchesParents = new Map();\n    this._cacheCallMatches = new Map();\n    this._cacheCallQuery = new Map();\n    this._cacheQuerySimple = new Map();\n    this._engines = new Map();\n    this._engines.set("not", notEngine);\n    this._engines.set("is", isEngine);\n    this._engines.set("where", isEngine);\n    this._engines.set("has", hasEngine);\n    this._engines.set("scope", scopeEngine);\n    this._engines.set("light", lightEngine);\n    this._engines.set("visible", visibleEngine);\n    this._engines.set("text", textEngine);\n    this._engines.set("text-is", textIsEngine);\n    this._engines.set("text-matches", textMatchesEngine);\n    this._engines.set("has-text", hasTextEngine);\n    this._engines.set("right-of", createLayoutEngine("right-of"));\n    this._engines.set("left-of", createLayoutEngine("left-of"));\n    this._engines.set("above", createLayoutEngine("above"));\n    this._engines.set("below", createLayoutEngine("below"));\n    this._engines.set("near", createLayoutEngine("near"));\n    this._engines.set("nth-match", nthMatchEngine);\n    const allNames = [...this._engines.keys()];\n    allNames.sort();\n    const parserNames = [...customCSSNames];\n    parserNames.sort();\n    if (allNames.join("|") !== parserNames.join("|"))\n      throw new Error(`Please keep customCSSNames in sync with evaluator engines: ${allNames.join("|")} vs ${parserNames.join("|")}`);\n  }\n  begin() {\n    ++this._retainCacheCounter;\n  }\n  end() {\n    --this._retainCacheCounter;\n    if (!this._retainCacheCounter) {\n      this._cacheQueryCSS.clear();\n      this._cacheMatches.clear();\n      this._cacheQuery.clear();\n      this._cacheMatchesSimple.clear();\n      this._cacheMatchesParents.clear();\n      this._cacheCallMatches.clear();\n      this._cacheCallQuery.clear();\n      this._cacheQuerySimple.clear();\n      this._cacheText.clear();\n    }\n  }\n  _cached(cache, main, rest, cb) {\n    if (!cache.has(main))\n      cache.set(main, []);\n    const entries = cache.get(main);\n    const entry = entries.find((e) => rest.every((value, index) => e.rest[index] === value));\n    if (entry)\n      return entry.result;\n    const result = cb();\n    entries.push({ rest, result });\n    return result;\n  }\n  _checkSelector(s) {\n    const wellFormed = typeof s === "object" && s && (Array.isArray(s) || "simples" in s && s.simples.length);\n    if (!wellFormed)\n      throw new Error(`Malformed selector "${s}"`);\n    return s;\n  }\n  matches(element, s, context) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheMatches, element, [selector, context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._matchesEngine(isEngine, element, selector, context);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        if (!this._matchesSimple(element, selector.simples[selector.simples.length - 1].selector, context))\n          return false;\n        return this._matchesParents(element, selector, selector.simples.length - 2, context);\n      });\n    } finally {\n      this.end();\n    }\n  }\n  query(context, s) {\n    const selector = this._checkSelector(s);\n    this.begin();\n    try {\n      return this._cached(this._cacheQuery, selector, [context.scope, context.pierceShadow, context.originalScope], () => {\n        if (Array.isArray(selector))\n          return this._queryEngine(isEngine, context, selector);\n        if (this._hasScopeClause(selector))\n          context = this._expandContextForScopeMatching(context);\n        const previousScoreMap = this._scoreMap;\n        this._scoreMap = new Map();\n        let elements = this._querySimple(context, selector.simples[selector.simples.length - 1].selector);\n        elements = elements.filter((element) => this._matchesParents(element, selector, selector.simples.length - 2, context));\n        if (this._scoreMap.size) {\n          elements.sort((a, b) => {\n            const aScore = this._scoreMap.get(a);\n            const bScore = this._scoreMap.get(b);\n            if (aScore === bScore)\n              return 0;\n            if (aScore === void 0)\n              return 1;\n            if (bScore === void 0)\n              return -1;\n            return aScore - bScore;\n          });\n        }\n        this._scoreMap = previousScoreMap;\n        return elements;\n      });\n    } finally {\n      this.end();\n    }\n  }\n  _markScore(element, score) {\n    if (this._scoreMap)\n      this._scoreMap.set(element, score);\n  }\n  _hasScopeClause(selector) {\n    return selector.simples.some((simple) => simple.selector.functions.some((f) => f.name === "scope"));\n  }\n  _expandContextForScopeMatching(context) {\n    if (context.scope.nodeType !== 1)\n      return context;\n    const scope = parentElementOrShadowHost(context.scope);\n    if (!scope)\n      return context;\n    return { ...context, scope, originalScope: context.originalScope || context.scope };\n  }\n  _matchesSimple(element, simple, context) {\n    return this._cached(this._cacheMatchesSimple, element, [simple, context.scope, context.pierceShadow, context.originalScope], () => {\n      if (element === context.scope)\n        return false;\n      if (simple.css && !this._matchesCSS(element, simple.css))\n        return false;\n      for (const func of simple.functions) {\n        if (!this._matchesEngine(this._getEngine(func.name), element, func.args, context))\n          return false;\n      }\n      return true;\n    });\n  }\n  _querySimple(context, simple) {\n    if (!simple.functions.length)\n      return this._queryCSS(context, simple.css || "*");\n    return this._cached(this._cacheQuerySimple, simple, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let css = simple.css;\n      const funcs = simple.functions;\n      if (css === "*" && funcs.length)\n        css = void 0;\n      let elements;\n      let firstIndex = -1;\n      if (css !== void 0) {\n        elements = this._queryCSS(context, css);\n      } else {\n        firstIndex = funcs.findIndex((func) => this._getEngine(func.name).query !== void 0);\n        if (firstIndex === -1)\n          firstIndex = 0;\n        elements = this._queryEngine(this._getEngine(funcs[firstIndex].name), context, funcs[firstIndex].args);\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches !== void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      for (let i = 0; i < funcs.length; i++) {\n        if (i === firstIndex)\n          continue;\n        const engine = this._getEngine(funcs[i].name);\n        if (engine.matches === void 0)\n          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));\n      }\n      return elements;\n    });\n  }\n  _matchesParents(element, complex, index, context) {\n    if (index < 0)\n      return true;\n    return this._cached(this._cacheMatchesParents, element, [complex, index, context.scope, context.pierceShadow, context.originalScope], () => {\n      const { selector: simple, combinator } = complex.simples[index];\n      if (combinator === ">") {\n        const parent = parentElementOrShadowHostInContext(element, context);\n        if (!parent || !this._matchesSimple(parent, simple, context))\n          return false;\n        return this._matchesParents(parent, complex, index - 1, context);\n      }\n      if (combinator === "+") {\n        const previousSibling = previousSiblingInContext(element, context);\n        if (!previousSibling || !this._matchesSimple(previousSibling, simple, context))\n          return false;\n        return this._matchesParents(previousSibling, complex, index - 1, context);\n      }\n      if (combinator === "") {\n        let parent = parentElementOrShadowHostInContext(element, context);\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      if (combinator === "~") {\n        let previousSibling = previousSiblingInContext(element, context);\n        while (previousSibling) {\n          if (this._matchesSimple(previousSibling, simple, context)) {\n            if (this._matchesParents(previousSibling, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "~")\n              break;\n          }\n          previousSibling = previousSiblingInContext(previousSibling, context);\n        }\n        return false;\n      }\n      if (combinator === ">=") {\n        let parent = element;\n        while (parent) {\n          if (this._matchesSimple(parent, simple, context)) {\n            if (this._matchesParents(parent, complex, index - 1, context))\n              return true;\n            if (complex.simples[index - 1].combinator === "")\n              break;\n          }\n          parent = parentElementOrShadowHostInContext(parent, context);\n        }\n        return false;\n      }\n      throw new Error(`Unsupported combinator "${combinator}"`);\n    });\n  }\n  _matchesEngine(engine, element, args, context) {\n    if (engine.matches)\n      return this._callMatches(engine, element, args, context);\n    if (engine.query)\n      return this._callQuery(engine, args, context).includes(element);\n    throw new Error(`Selector engine should implement "matches" or "query"`);\n  }\n  _queryEngine(engine, context, args) {\n    if (engine.query)\n      return this._callQuery(engine, args, context);\n    if (engine.matches)\n      return this._queryCSS(context, "*").filter((element) => this._callMatches(engine, element, args, context));\n    throw new Error(`Selector engine should implement "matches" or "query"`);\n  }\n  _callMatches(engine, element, args, context) {\n    return this._cached(this._cacheCallMatches, element, [engine, context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.matches(element, args, context, this);\n    });\n  }\n  _callQuery(engine, args, context) {\n    return this._cached(this._cacheCallQuery, engine, [context.scope, context.pierceShadow, context.originalScope, ...args], () => {\n      return engine.query(context, args, this);\n    });\n  }\n  _matchesCSS(element, css) {\n    return element.matches(css);\n  }\n  _queryCSS(context, css) {\n    return this._cached(this._cacheQueryCSS, css, [context.scope, context.pierceShadow, context.originalScope], () => {\n      let result = [];\n      function query(root) {\n        result = result.concat([...root.querySelectorAll(css)]);\n        if (!context.pierceShadow)\n          return;\n        if (root.shadowRoot)\n          query(root.shadowRoot);\n        for (const element of root.querySelectorAll("*")) {\n          if (element.shadowRoot)\n            query(element.shadowRoot);\n        }\n      }\n      query(context.scope);\n      return result;\n    });\n  }\n  _getEngine(name) {\n    const engine = this._engines.get(name);\n    if (!engine)\n      throw new Error(`Unknown selector engine "${name}"`);\n    return engine;\n  }\n};\nvar isEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"is" engine expects non-empty selector list`);\n    return args.some((selector) => evaluator.matches(element, selector, context));\n  },\n  query(context, args, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"is" engine expects non-empty selector list`);\n    let elements = [];\n    for (const arg of args)\n      elements = elements.concat(evaluator.query(context, arg));\n    return args.length === 1 ? elements : sortInDOMOrder(elements);\n  }\n};\nvar hasEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"has" engine expects non-empty selector list`);\n    return evaluator.query({ ...context, scope: element }, args).length > 0;\n  }\n  // TODO: we can implement efficient "query" by matching "args" and returning\n  // all parents/descendants, just have to be careful with the ":scope" matching.\n};\nvar scopeEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`"scope" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9)\n      return element === actualScope.documentElement;\n    return element === actualScope;\n  },\n  query(context, args, evaluator) {\n    if (args.length !== 0)\n      throw new Error(`"scope" engine expects no arguments`);\n    const actualScope = context.originalScope || context.scope;\n    if (actualScope.nodeType === 9) {\n      const root = actualScope.documentElement;\n      return root ? [root] : [];\n    }\n    if (actualScope.nodeType === 1)\n      return [actualScope];\n    return [];\n  }\n};\nvar notEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0)\n      throw new Error(`"not" engine expects non-empty selector list`);\n    return !evaluator.matches(element, args, context);\n  }\n};\nvar lightEngine = {\n  query(context, args, evaluator) {\n    return evaluator.query({ ...context, pierceShadow: false }, args);\n  },\n  matches(element, args, context, evaluator) {\n    return evaluator.matches(element, args, { ...context, pierceShadow: false });\n  }\n};\nvar visibleEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length)\n      throw new Error(`"visible" engine expects no arguments`);\n    return isElementVisible(element);\n  }\n};\nvar textEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"text" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === "self";\n  }\n};\nvar textIsEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"text-is" engine expects a single string`);\n    const text = normalizeWhiteSpace(args[0]);\n    const matcher = (elementText2) => {\n      if (!text && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === text);\n    };\n    return elementMatchesText(evaluator._cacheText, element, matcher) !== "none";\n  }\n};\nvar textMatchesEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length === 0 || typeof args[0] !== "string" || args.length > 2 || args.length === 2 && typeof args[1] !== "string")\n      throw new Error(`"text-matches" engine expects a regexp body and optional regexp flags`);\n    const re = new RegExp(args[0], args.length === 2 ? args[1] : void 0);\n    const matcher = (elementText2) => re.test(elementText2.full);\n    return elementMatchesText(evaluator._cacheText, element, matcher) === "self";\n  }\n};\nvar hasTextEngine = {\n  matches(element, args, context, evaluator) {\n    if (args.length !== 1 || typeof args[0] !== "string")\n      throw new Error(`"has-text" engine expects a single string`);\n    if (shouldSkipForTextMatching(element))\n      return false;\n    const text = normalizeWhiteSpace(args[0]).toLowerCase();\n    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);\n    return matcher(elementText(evaluator._cacheText, element));\n  }\n};\nfunction createLayoutEngine(name) {\n  return {\n    matches(element, args, context, evaluator) {\n      const maxDistance = args.length && typeof args[args.length - 1] === "number" ? args[args.length - 1] : void 0;\n      const queryArgs = maxDistance === void 0 ? args : args.slice(0, args.length - 1);\n      if (args.length < 1 + (maxDistance === void 0 ? 0 : 1))\n        throw new Error(`"${name}" engine expects a selector list and optional maximum distance in pixels`);\n      const inner = evaluator.query(context, queryArgs);\n      const score = layoutSelectorScore(name, element, inner, maxDistance);\n      if (score === void 0)\n        return false;\n      evaluator._markScore(element, score);\n      return true;\n    }\n  };\n}\nvar nthMatchEngine = {\n  query(context, args, evaluator) {\n    let index = args[args.length - 1];\n    if (args.length < 2)\n      throw new Error(`"nth-match" engine expects non-empty selector list and an index argument`);\n    if (typeof index !== "number" || index < 1)\n      throw new Error(`"nth-match" engine expects a one-based index as the last argument`);\n    const elements = isEngine.query(context, args.slice(0, args.length - 1), evaluator);\n    index--;\n    return index < elements.length ? [elements[index]] : [];\n  }\n};\nfunction parentElementOrShadowHostInContext(element, context) {\n  if (element === context.scope)\n    return;\n  if (!context.pierceShadow)\n    return element.parentElement || void 0;\n  return parentElementOrShadowHost(element);\n}\nfunction previousSiblingInContext(element, context) {\n  if (element === context.scope)\n    return;\n  return element.previousElementSibling || void 0;\n}\nfunction sortInDOMOrder(elements) {\n  const elementToEntry = new Map();\n  const roots = [];\n  const result = [];\n  function append(element) {\n    let entry = elementToEntry.get(element);\n    if (entry)\n      return entry;\n    const parent = parentElementOrShadowHost(element);\n    if (parent) {\n      const parentEntry = append(parent);\n      parentEntry.children.push(element);\n    } else {\n      roots.push(element);\n    }\n    entry = { children: [], taken: false };\n    elementToEntry.set(element, entry);\n    return entry;\n  }\n  for (const e of elements)\n    append(e).taken = true;\n  function visit(element) {\n    const entry = elementToEntry.get(element);\n    if (entry.taken)\n      result.push(element);\n    if (entry.children.length > 1) {\n      const set = new Set(entry.children);\n      entry.children = [];\n      let child = element.firstElementChild;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n      child = element.shadowRoot ? element.shadowRoot.firstElementChild : null;\n      while (child && entry.children.length < set.size) {\n        if (set.has(child))\n          entry.children.push(child);\n        child = child.nextElementSibling;\n      }\n    }\n    entry.children.forEach(visit);\n  }\n  roots.forEach(visit);\n  return result;\n}\n\n// packages/injected/src/selectorGenerator.ts\nvar kTextScoreRange = 10;\nvar kExactPenalty = kTextScoreRange / 2;\nvar kTestIdScore = 1;\nvar kOtherTestIdScore = 2;\nvar kIframeByAttributeScore = 10;\nvar kBeginPenalizedScore = 50;\nvar kRoleWithNameScore = 100;\nvar kPlaceholderScore = 120;\nvar kLabelScore = 140;\nvar kAltTextScore = 160;\nvar kTextScore = 180;\nvar kTitleScore = 200;\nvar kTextScoreRegex = 250;\nvar kPlaceholderScoreExact = kPlaceholderScore + kExactPenalty;\nvar kLabelScoreExact = kLabelScore + kExactPenalty;\nvar kRoleWithNameScoreExact = kRoleWithNameScore + kExactPenalty;\nvar kAltTextScoreExact = kAltTextScore + kExactPenalty;\nvar kTextScoreExact = kTextScore + kExactPenalty;\nvar kTitleScoreExact = kTitleScore + kExactPenalty;\nvar kEndPenalizedScore = 300;\nvar kCSSIdScore = 500;\nvar kRoleWithoutNameScore = 510;\nvar kCSSInputTypeNameScore = 520;\nvar kCSSTagNameScore = 530;\nvar kNthScore = 1e4;\nvar kCSSFallbackScore = 1e7;\nvar kScoreThresholdForTextExpect = 1e3;\nfunction generateSelector(injectedScript, targetElement, options) {\n  var _a;\n  injectedScript._evaluator.begin();\n  const cache = { allowText: new Map(), disallowText: new Map() };\n  beginAriaCaches();\n  try {\n    let selectors = [];\n    if (options.forTextExpect) {\n      let targetTokens = cssFallback(injectedScript, targetElement.ownerDocument.documentElement, options);\n      for (let element = targetElement; element; element = parentElementOrShadowHost(element)) {\n        const tokens = generateSelectorFor(cache, injectedScript, element, { ...options, noText: true });\n        if (!tokens)\n          continue;\n        const score = combineScores(tokens);\n        if (score <= kScoreThresholdForTextExpect) {\n          targetTokens = tokens;\n          break;\n        }\n      }\n      selectors = [joinTokens(targetTokens)];\n    } else {\n      if (!targetElement.matches("input,textarea,select") && !targetElement.isContentEditable) {\n        const interactiveParent = closestCrossShadow(targetElement, "button,select,input,[role=button],[role=checkbox],[role=radio],a,[role=link]", options.root);\n        if (interactiveParent && isElementVisible(interactiveParent))\n          targetElement = interactiveParent;\n      }\n      if (options.multiple) {\n        const withText = generateSelectorFor(cache, injectedScript, targetElement, options);\n        const withoutText = generateSelectorFor(cache, injectedScript, targetElement, { ...options, noText: true });\n        let tokens = [withText, withoutText];\n        cache.allowText.clear();\n        cache.disallowText.clear();\n        if (withText && hasCSSIdToken(withText))\n          tokens.push(generateSelectorFor(cache, injectedScript, targetElement, { ...options, noCSSId: true }));\n        if (withoutText && hasCSSIdToken(withoutText))\n          tokens.push(generateSelectorFor(cache, injectedScript, targetElement, { ...options, noText: true, noCSSId: true }));\n        tokens = tokens.filter(Boolean);\n        if (!tokens.length) {\n          const css = cssFallback(injectedScript, targetElement, options);\n          tokens.push(css);\n          if (hasCSSIdToken(css))\n            tokens.push(cssFallback(injectedScript, targetElement, { ...options, noCSSId: true }));\n        }\n        selectors = [...new Set(tokens.map((t) => joinTokens(t)))];\n      } else {\n        const targetTokens = generateSelectorFor(cache, injectedScript, targetElement, options) || cssFallback(injectedScript, targetElement, options);\n        selectors = [joinTokens(targetTokens)];\n      }\n    }\n    const selector = selectors[0];\n    const parsedSelector = injectedScript.parseSelector(selector);\n    return {\n      selector,\n      selectors,\n      elements: injectedScript.querySelectorAll(parsedSelector, (_a = options.root) != null ? _a : targetElement.ownerDocument)\n    };\n  } finally {\n    endAriaCaches();\n    injectedScript._evaluator.end();\n  }\n}\nfunction filterRegexTokens(textCandidates) {\n  return textCandidates.filter((c) => c[0].selector[0] !== "/");\n}\nfunction generateSelectorFor(cache, injectedScript, targetElement, options) {\n  if (options.root && !isInsideScope(options.root, targetElement))\n    throw new Error(`Target element must belong to the root\'s subtree`);\n  if (targetElement === options.root)\n    return [{ engine: "css", selector: ":scope", score: 1 }];\n  if (targetElement.ownerDocument.documentElement === targetElement)\n    return [{ engine: "css", selector: "html", score: 1 }];\n  const calculate = (element, allowText) => {\n    var _a;\n    const allowNthMatch = element === targetElement;\n    let textCandidates = allowText ? buildTextCandidates(injectedScript, element, element === targetElement) : [];\n    if (element !== targetElement) {\n      textCandidates = filterRegexTokens(textCandidates);\n    }\n    const noTextCandidates = buildNoTextCandidates(injectedScript, element, options).filter((token) => !options.omitInternalEngines || !token.engine.startsWith("internal:")).map((token) => [token]);\n    let result = chooseFirstSelector(injectedScript, (_a = options.root) != null ? _a : targetElement.ownerDocument, element, [...textCandidates, ...noTextCandidates], allowNthMatch);\n    textCandidates = filterRegexTokens(textCandidates);\n    const checkWithText = (textCandidatesToUse) => {\n      const allowParentText = allowText && !textCandidatesToUse.length;\n      const candidates = [...textCandidatesToUse, ...noTextCandidates].filter((c) => {\n        if (!result)\n          return true;\n        return combineScores(c) < combineScores(result);\n      });\n      let bestPossibleInParent = candidates[0];\n      if (!bestPossibleInParent)\n        return;\n      for (let parent = parentElementOrShadowHost(element); parent && parent !== options.root; parent = parentElementOrShadowHost(parent)) {\n        const parentTokens = calculateCached(parent, allowParentText);\n        if (!parentTokens)\n          continue;\n        if (result && combineScores([...parentTokens, ...bestPossibleInParent]) >= combineScores(result))\n          continue;\n        bestPossibleInParent = chooseFirstSelector(injectedScript, parent, element, candidates, allowNthMatch);\n        if (!bestPossibleInParent)\n          return;\n        const combined = [...parentTokens, ...bestPossibleInParent];\n        if (!result || combineScores(combined) < combineScores(result))\n          result = combined;\n      }\n    };\n    checkWithText(textCandidates);\n    if (element === targetElement && textCandidates.length)\n      checkWithText([]);\n    return result;\n  };\n  const calculateCached = (element, allowText) => {\n    const map = allowText ? cache.allowText : cache.disallowText;\n    let value = map.get(element);\n    if (value === void 0) {\n      value = calculate(element, allowText);\n      map.set(element, value);\n    }\n    return value;\n  };\n  return calculate(targetElement, !options.noText);\n}\nfunction buildNoTextCandidates(injectedScript, element, options) {\n  const candidates = [];\n  {\n    for (const attr of ["data-testid", "data-test-id", "data-test"]) {\n      if (attr !== options.testIdAttributeName && element.getAttribute(attr))\n        candidates.push({ engine: "css", selector: `[${attr}=${quoteCSSAttributeValue(element.getAttribute(attr))}]`, score: kOtherTestIdScore });\n    }\n    if (!options.noCSSId) {\n      const idAttr = element.getAttribute("id");\n      if (idAttr && !isGuidLike(idAttr))\n        candidates.push({ engine: "css", selector: makeSelectorForId(idAttr), score: kCSSIdScore });\n    }\n    candidates.push({ engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore });\n  }\n  if (element.nodeName === "IFRAME") {\n    for (const attribute of ["name", "title"]) {\n      if (element.getAttribute(attribute))\n        candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[${attribute}=${quoteCSSAttributeValue(element.getAttribute(attribute))}]`, score: kIframeByAttributeScore });\n    }\n    if (element.getAttribute(options.testIdAttributeName))\n      candidates.push({ engine: "css", selector: `[${options.testIdAttributeName}=${quoteCSSAttributeValue(element.getAttribute(options.testIdAttributeName))}]`, score: kTestIdScore });\n    penalizeScoreForLength([candidates]);\n    return candidates;\n  }\n  if (element.getAttribute(options.testIdAttributeName))\n    candidates.push({ engine: "internal:testid", selector: `[${options.testIdAttributeName}=${escapeForAttributeSelector(element.getAttribute(options.testIdAttributeName), true)}]`, score: kTestIdScore });\n  if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {\n    const input = element;\n    if (input.placeholder) {\n      candidates.push({ engine: "internal:attr", selector: `[placeholder=${escapeForAttributeSelector(input.placeholder, true)}]`, score: kPlaceholderScoreExact });\n      for (const alternative of suitableTextAlternatives(input.placeholder))\n        candidates.push({ engine: "internal:attr", selector: `[placeholder=${escapeForAttributeSelector(alternative.text, false)}]`, score: kPlaceholderScore - alternative.scoreBonus });\n    }\n  }\n  const labels = getElementLabels(injectedScript._evaluator._cacheText, element);\n  for (const label of labels) {\n    const labelText = label.normalized;\n    candidates.push({ engine: "internal:label", selector: escapeForTextSelector(labelText, true), score: kLabelScoreExact });\n    for (const alternative of suitableTextAlternatives(labelText))\n      candidates.push({ engine: "internal:label", selector: escapeForTextSelector(alternative.text, false), score: kLabelScore - alternative.scoreBonus });\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && !["none", "presentation"].includes(ariaRole))\n    candidates.push({ engine: "internal:role", selector: ariaRole, score: kRoleWithoutNameScore });\n  if (element.getAttribute("name") && ["BUTTON", "FORM", "FIELDSET", "FRAME", "IFRAME", "INPUT", "KEYGEN", "OBJECT", "OUTPUT", "SELECT", "TEXTAREA", "MAP", "META", "PARAM"].includes(element.nodeName))\n    candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[name=${quoteCSSAttributeValue(element.getAttribute("name"))}]`, score: kCSSInputTypeNameScore });\n  if (["INPUT", "TEXTAREA"].includes(element.nodeName) && element.getAttribute("type") !== "hidden") {\n    if (element.getAttribute("type"))\n      candidates.push({ engine: "css", selector: `${cssEscape(element.nodeName.toLowerCase())}[type=${quoteCSSAttributeValue(element.getAttribute("type"))}]`, score: kCSSInputTypeNameScore });\n  }\n  if (["INPUT", "TEXTAREA", "SELECT"].includes(element.nodeName) && element.getAttribute("type") !== "hidden")\n    candidates.push({ engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSInputTypeNameScore + 1 });\n  penalizeScoreForLength([candidates]);\n  return candidates;\n}\nfunction buildTextCandidates(injectedScript, element, isTargetNode) {\n  if (element.nodeName === "SELECT")\n    return [];\n  const candidates = [];\n  const title = element.getAttribute("title");\n  if (title) {\n    candidates.push([{ engine: "internal:attr", selector: `[title=${escapeForAttributeSelector(title, true)}]`, score: kTitleScoreExact }]);\n    for (const alternative of suitableTextAlternatives(title))\n      candidates.push([{ engine: "internal:attr", selector: `[title=${escapeForAttributeSelector(alternative.text, false)}]`, score: kTitleScore - alternative.scoreBonus }]);\n  }\n  const alt = element.getAttribute("alt");\n  if (alt && ["APPLET", "AREA", "IMG", "INPUT"].includes(element.nodeName)) {\n    candidates.push([{ engine: "internal:attr", selector: `[alt=${escapeForAttributeSelector(alt, true)}]`, score: kAltTextScoreExact }]);\n    for (const alternative of suitableTextAlternatives(alt))\n      candidates.push([{ engine: "internal:attr", selector: `[alt=${escapeForAttributeSelector(alternative.text, false)}]`, score: kAltTextScore - alternative.scoreBonus }]);\n  }\n  const text = elementText(injectedScript._evaluator._cacheText, element).normalized;\n  const textAlternatives = text ? suitableTextAlternatives(text) : [];\n  if (text) {\n    if (isTargetNode) {\n      if (text.length <= 80)\n        candidates.push([{ engine: "internal:text", selector: escapeForTextSelector(text, true), score: kTextScoreExact }]);\n      for (const alternative of textAlternatives)\n        candidates.push([{ engine: "internal:text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBonus }]);\n    }\n    const cssToken = { engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore };\n    for (const alternative of textAlternatives)\n      candidates.push([cssToken, { engine: "internal:has-text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBonus }]);\n    if (text.length <= 80) {\n      const re = new RegExp("^" + escapeRegExp(text) + "$");\n      candidates.push([cssToken, { engine: "internal:has-text", selector: escapeForTextSelector(re, false), score: kTextScoreRegex }]);\n    }\n  }\n  const ariaRole = getAriaRole(element);\n  if (ariaRole && !["none", "presentation"].includes(ariaRole)) {\n    const ariaName = getElementAccessibleName(element, false);\n    if (ariaName) {\n      const roleToken = { engine: "internal:role", selector: `${ariaRole}[name=${escapeForAttributeSelector(ariaName, true)}]`, score: kRoleWithNameScoreExact };\n      candidates.push([roleToken]);\n      for (const alternative of suitableTextAlternatives(ariaName))\n        candidates.push([{ engine: "internal:role", selector: `${ariaRole}[name=${escapeForAttributeSelector(alternative.text, false)}]`, score: kRoleWithNameScore - alternative.scoreBonus }]);\n    } else {\n      const roleToken = { engine: "internal:role", selector: `${ariaRole}`, score: kRoleWithoutNameScore };\n      for (const alternative of textAlternatives)\n        candidates.push([roleToken, { engine: "internal:has-text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBonus }]);\n      if (text.length <= 80) {\n        const re = new RegExp("^" + escapeRegExp(text) + "$");\n        candidates.push([roleToken, { engine: "internal:has-text", selector: escapeForTextSelector(re, false), score: kTextScoreRegex }]);\n      }\n    }\n  }\n  penalizeScoreForLength(candidates);\n  return candidates;\n}\nfunction makeSelectorForId(id) {\n  return /^[a-zA-Z][a-zA-Z0-9\\-\\_]+$/.test(id) ? "#" + id : `[id="${cssEscape(id)}"]`;\n}\nfunction hasCSSIdToken(tokens) {\n  return tokens.some((token) => token.engine === "css" && (token.selector.startsWith("#") || token.selector.startsWith(\'[id="\')));\n}\nfunction cssFallback(injectedScript, targetElement, options) {\n  var _a;\n  const root = (_a = options.root) != null ? _a : targetElement.ownerDocument;\n  const tokens = [];\n  function uniqueCSSSelector(prefix) {\n    const path = tokens.slice();\n    if (prefix)\n      path.unshift(prefix);\n    const selector = path.join(" > ");\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const node = injectedScript.querySelector(parsedSelector, root, false);\n    return node === targetElement ? selector : void 0;\n  }\n  function makeStrict(selector) {\n    const token = { engine: "css", selector, score: kCSSFallbackScore };\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const elements = injectedScript.querySelectorAll(parsedSelector, root);\n    if (elements.length === 1)\n      return [token];\n    const nth = { engine: "nth", selector: String(elements.indexOf(targetElement)), score: kNthScore };\n    return [token, nth];\n  }\n  for (let element = targetElement; element && element !== root; element = parentElementOrShadowHost(element)) {\n    const nodeName = element.nodeName.toLowerCase();\n    let bestTokenForLevel = "";\n    if (element.id && !options.noCSSId) {\n      const token = makeSelectorForId(element.id);\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      bestTokenForLevel = token;\n    }\n    const parent = element.parentNode;\n    const classes = [...element.classList];\n    for (let i = 0; i < classes.length; ++i) {\n      const token = "." + cssEscape(classes.slice(0, i + 1).join("."));\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel && parent) {\n        const sameClassSiblings = parent.querySelectorAll(token);\n        if (sameClassSiblings.length === 1)\n          bestTokenForLevel = token;\n      }\n    }\n    if (parent) {\n      const siblings = [...parent.children];\n      const sameTagSiblings = siblings.filter((sibling) => sibling.nodeName.toLowerCase() === nodeName);\n      const token = sameTagSiblings.indexOf(element) === 0 ? cssEscape(nodeName) : `${cssEscape(nodeName)}:nth-child(${1 + siblings.indexOf(element)})`;\n      const selector = uniqueCSSSelector(token);\n      if (selector)\n        return makeStrict(selector);\n      if (!bestTokenForLevel)\n        bestTokenForLevel = token;\n    } else if (!bestTokenForLevel) {\n      bestTokenForLevel = cssEscape(nodeName);\n    }\n    tokens.unshift(bestTokenForLevel);\n  }\n  return makeStrict(uniqueCSSSelector());\n}\nfunction penalizeScoreForLength(groups) {\n  for (const group of groups) {\n    for (const token of group) {\n      if (token.score > kBeginPenalizedScore && token.score < kEndPenalizedScore)\n        token.score += Math.min(kTextScoreRange, token.selector.length / 10 | 0);\n    }\n  }\n}\nfunction joinTokens(tokens) {\n  const parts = [];\n  let lastEngine = "";\n  for (const { engine, selector } of tokens) {\n    if (parts.length && (lastEngine !== "css" || engine !== "css" || selector.startsWith(":nth-match(")))\n      parts.push(">>");\n    lastEngine = engine;\n    if (engine === "css")\n      parts.push(selector);\n    else\n      parts.push(`${engine}=${selector}`);\n  }\n  return parts.join(" ");\n}\nfunction combineScores(tokens) {\n  let score = 0;\n  for (let i = 0; i < tokens.length; i++)\n    score += tokens[i].score * (tokens.length - i);\n  return score;\n}\nfunction chooseFirstSelector(injectedScript, scope, targetElement, selectors, allowNthMatch) {\n  const joined = selectors.map((tokens) => ({ tokens, score: combineScores(tokens) }));\n  joined.sort((a, b) => a.score - b.score);\n  let bestWithIndex = null;\n  for (const { tokens } of joined) {\n    const parsedSelector = injectedScript.parseSelector(joinTokens(tokens));\n    const result = injectedScript.querySelectorAll(parsedSelector, scope);\n    if (result[0] === targetElement && result.length === 1) {\n      return tokens;\n    }\n    const index = result.indexOf(targetElement);\n    if (!allowNthMatch || bestWithIndex || index === -1 || result.length > 5)\n      continue;\n    const nth = { engine: "nth", selector: String(index), score: kNthScore };\n    bestWithIndex = [...tokens, nth];\n  }\n  return bestWithIndex;\n}\nfunction isGuidLike(id) {\n  let lastCharacterType;\n  let transitionCount = 0;\n  for (let i = 0; i < id.length; ++i) {\n    const c = id[i];\n    let characterType;\n    if (c === "-" || c === "_")\n      continue;\n    if (c >= "a" && c <= "z")\n      characterType = "lower";\n    else if (c >= "A" && c <= "Z")\n      characterType = "upper";\n    else if (c >= "0" && c <= "9")\n      characterType = "digit";\n    else\n      characterType = "other";\n    if (characterType === "lower" && lastCharacterType === "upper") {\n      lastCharacterType = characterType;\n      continue;\n    }\n    if (lastCharacterType && lastCharacterType !== characterType)\n      ++transitionCount;\n    lastCharacterType = characterType;\n  }\n  return transitionCount >= id.length / 4;\n}\nfunction trimWordBoundary(text, maxLength) {\n  if (text.length <= maxLength)\n    return text;\n  text = text.substring(0, maxLength);\n  const match = text.match(/^(.*)\\b(.+?)$/);\n  if (!match)\n    return "";\n  return match[1].trimEnd();\n}\nfunction suitableTextAlternatives(text) {\n  let result = [];\n  {\n    const match = text.match(/^([\\d.,]+)[^.,\\w]/);\n    const leadingNumberLength = match ? match[1].length : 0;\n    if (leadingNumberLength) {\n      const alt = trimWordBoundary(text.substring(leadingNumberLength).trimStart(), 80);\n      result.push({ text: alt, scoreBonus: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  {\n    const match = text.match(/[^.,\\w]([\\d.,]+)$/);\n    const trailingNumberLength = match ? match[1].length : 0;\n    if (trailingNumberLength) {\n      const alt = trimWordBoundary(text.substring(0, text.length - trailingNumberLength).trimEnd(), 80);\n      result.push({ text: alt, scoreBonus: alt.length <= 30 ? 2 : 1 });\n    }\n  }\n  if (text.length <= 30) {\n    result.push({ text, scoreBonus: 0 });\n  } else {\n    result.push({ text: trimWordBoundary(text, 80), scoreBonus: 0 });\n    result.push({ text: trimWordBoundary(text, 30), scoreBonus: 1 });\n  }\n  result = result.filter((r) => r.text);\n  if (!result.length)\n    result.push({ text: text.substring(0, 80), scoreBonus: 0 });\n  return result;\n}\n\n// packages/injected/src/vueSelectorEngine.ts\nfunction basename(filename, ext) {\n  const normalized = filename.replace(/^[a-zA-Z]:/, "").replace(/\\\\/g, "/");\n  let result = normalized.substring(normalized.lastIndexOf("/") + 1);\n  if (ext && result.endsWith(ext))\n    result = result.substring(0, result.length - ext.length);\n  return result;\n}\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : "";\n}\nvar classifyRE = /(?:^|[-_/])(\\w)/g;\nvar classify = (str) => {\n  return str && str.replace(classifyRE, toUpper);\n};\nfunction buildComponentsTreeVue3(instance2) {\n  function getComponentTypeName(options) {\n    const name = options.name || options._componentTag || options.__playwright_guessedName;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, ".vue"));\n  }\n  function saveComponentName(instance3, key) {\n    instance3.type.__playwright_guessedName = key;\n    return key;\n  }\n  function getInstanceName(instance3) {\n    var _a, _b, _c, _d;\n    const name = getComponentTypeName(instance3.type || {});\n    if (name)\n      return name;\n    if (instance3.root === instance3)\n      return "Root";\n    for (const key in (_b = (_a = instance3.parent) == null ? void 0 : _a.type) == null ? void 0 : _b.components) {\n      if (((_c = instance3.parent) == null ? void 0 : _c.type.components[key]) === instance3.type)\n        return saveComponentName(instance3, key);\n    }\n    for (const key in (_d = instance3.appContext) == null ? void 0 : _d.components) {\n      if (instance3.appContext.components[key] === instance3.type)\n        return saveComponentName(instance3, key);\n    }\n    return "Anonymous Component";\n  }\n  function isBeingDestroyed(instance3) {\n    return instance3._isBeingDestroyed || instance3.isUnmounted;\n  }\n  function isFragment(instance3) {\n    return instance3.subTree.type.toString() === "Symbol(Fragment)";\n  }\n  function getInternalInstanceChildren(subTree) {\n    const list = [];\n    if (subTree.component)\n      list.push(subTree.component);\n    if (subTree.suspense)\n      list.push(...getInternalInstanceChildren(subTree.suspense.activeBranch));\n    if (Array.isArray(subTree.children)) {\n      subTree.children.forEach((childSubTree) => {\n        if (childSubTree.component)\n          list.push(childSubTree.component);\n        else\n          list.push(...getInternalInstanceChildren(childSubTree));\n      });\n    }\n    return list.filter((child) => {\n      var _a;\n      return !isBeingDestroyed(child) && !((_a = child.type.devtools) == null ? void 0 : _a.hide);\n    });\n  }\n  function getRootElementsFromComponentInstance(instance3) {\n    if (isFragment(instance3))\n      return getFragmentRootElements(instance3.subTree);\n    return [instance3.subTree.el];\n  }\n  function getFragmentRootElements(vnode) {\n    if (!vnode.children)\n      return [];\n    const list = [];\n    for (let i = 0, l = vnode.children.length; i < l; i++) {\n      const childVnode = vnode.children[i];\n      if (childVnode.component)\n        list.push(...getRootElementsFromComponentInstance(childVnode.component));\n      else if (childVnode.el)\n        list.push(childVnode.el);\n    }\n    return list;\n  }\n  function buildComponentsTree2(instance3) {\n    return {\n      name: getInstanceName(instance3),\n      children: getInternalInstanceChildren(instance3.subTree).map(buildComponentsTree2),\n      rootElements: getRootElementsFromComponentInstance(instance3),\n      props: instance3.props\n    };\n  }\n  return buildComponentsTree2(instance2);\n}\nfunction buildComponentsTreeVue2(instance2) {\n  function getComponentName2(options) {\n    const name = options.displayName || options.name || options._componentTag;\n    if (name)\n      return name;\n    const file = options.__file;\n    if (file)\n      return classify(basename(file, ".vue"));\n  }\n  function getInstanceName(instance3) {\n    const name = getComponentName2(instance3.$options || instance3.fnOptions || {});\n    if (name)\n      return name;\n    return instance3.$root === instance3 ? "Root" : "Anonymous Component";\n  }\n  function getInternalInstanceChildren(instance3) {\n    if (instance3.$children)\n      return instance3.$children;\n    if (Array.isArray(instance3.subTree.children))\n      return instance3.subTree.children.filter((vnode) => !!vnode.component).map((vnode) => vnode.component);\n    return [];\n  }\n  function buildComponentsTree2(instance3) {\n    return {\n      name: getInstanceName(instance3),\n      children: getInternalInstanceChildren(instance3).map(buildComponentsTree2),\n      rootElements: [instance3.$el],\n      props: instance3._props\n    };\n  }\n  return buildComponentsTree2(instance2);\n}\nfunction filterComponentsTree2(treeNode, searchFn, result = []) {\n  if (searchFn(treeNode))\n    result.push(treeNode);\n  for (const child of treeNode.children)\n    filterComponentsTree2(child, searchFn, result);\n  return result;\n}\nfunction findVueRoots(root, roots = []) {\n  const document = root.ownerDocument || root;\n  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);\n  const vue2Roots = new Set();\n  do {\n    const node = walker.currentNode;\n    if (node.__vue__)\n      vue2Roots.add(node.__vue__.$root);\n    if (node.__vue_app__ && node._vnode && node._vnode.component)\n      roots.push({ root: node._vnode.component, version: 3 });\n    const shadowRoot = node instanceof Element ? node.shadowRoot : null;\n    if (shadowRoot)\n      findVueRoots(shadowRoot, roots);\n  } while (walker.nextNode());\n  for (const vue2root of vue2Roots) {\n    roots.push({\n      version: 2,\n      root: vue2root\n    });\n  }\n  return roots;\n}\nvar createVueEngine = () => ({\n  queryAll(scope, selector) {\n    const document = scope.ownerDocument || scope;\n    const { name, attributes } = parseAttributeSelector(selector, false);\n    const vueRoots = findVueRoots(document);\n    const trees = vueRoots.map((vueRoot) => vueRoot.version === 3 ? buildComponentsTreeVue3(vueRoot.root) : buildComponentsTreeVue2(vueRoot.root));\n    const treeNodes = trees.map((tree) => filterComponentsTree2(tree, (treeNode) => {\n      if (name && treeNode.name !== name)\n        return false;\n      if (treeNode.rootElements.some((rootElement) => !isInsideScope(scope, rootElement)))\n        return false;\n      for (const attr of attributes) {\n        if (!matchesComponentAttribute(treeNode.props, attr))\n          return false;\n      }\n      return true;\n    })).flat();\n    const allRootElements = new Set();\n    for (const treeNode of treeNodes) {\n      for (const rootElement of treeNode.rootElements)\n        allRootElements.add(rootElement);\n    }\n    return [...allRootElements];\n  }\n});\n\n// packages/injected/src/xpathSelectorEngine.ts\nvar XPathEngine = {\n  queryAll(root, selector) {\n    if (selector.startsWith("/") && root.nodeType !== Node.DOCUMENT_NODE)\n      selector = "." + selector;\n    const result = [];\n    const document = root.ownerDocument || root;\n    if (!document)\n      return result;\n    const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);\n    for (let node = it.iterateNext(); node; node = it.iterateNext()) {\n      if (node.nodeType === Node.ELEMENT_NODE)\n        result.push(node);\n    }\n    return result;\n  }\n};\n\n// packages/injected/src/injectedScript.ts\nvar InjectedScript = class {\n  // eslint-disable-next-line no-restricted-globals\n  constructor(window, isUnderTest, sdkLanguage, testIdAttributeNameForStrictErrorAndConsoleCodegen, stableRafCount, browserName, inputFileRoleTextbox, customEngines) {\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = "data-testid";\n    // Recorder must use any external dependencies through InjectedScript.\n    // Otherwise it will end up with a copy of all modules it uses, and any\n    // module-level globals will be duplicated, which leads to subtle bugs.\n    this.utils = {\n      asLocator,\n      cacheNormalizedWhitespaces,\n      elementText,\n      getAriaRole,\n      getElementAccessibleDescription,\n      getElementAccessibleName,\n      isElementVisible,\n      isInsideScope,\n      normalizeWhiteSpace,\n      parseAriaSnapshot,\n      builtins: builtins()\n    };\n    this.window = window;\n    this.document = window.document;\n    this.isUnderTest = isUnderTest;\n    this.utils.builtins = builtins(window);\n    this._sdkLanguage = sdkLanguage;\n    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = testIdAttributeNameForStrictErrorAndConsoleCodegen;\n    this._evaluator = new SelectorEvaluatorImpl();\n    this.onGlobalListenersRemoved = new Set();\n    this._autoClosingTags = new Set(["AREA", "BASE", "BR", "COL", "COMMAND", "EMBED", "HR", "IMG", "INPUT", "KEYGEN", "LINK", "MENUITEM", "META", "PARAM", "SOURCE", "TRACK", "WBR"]);\n    this._booleanAttributes = new Set(["checked", "selected", "disabled", "readonly", "multiple"]);\n    this._eventTypes = new Map([\n      ["auxclick", "mouse"],\n      ["click", "mouse"],\n      ["dblclick", "mouse"],\n      ["mousedown", "mouse"],\n      ["mouseeenter", "mouse"],\n      ["mouseleave", "mouse"],\n      ["mousemove", "mouse"],\n      ["mouseout", "mouse"],\n      ["mouseover", "mouse"],\n      ["mouseup", "mouse"],\n      ["mouseleave", "mouse"],\n      ["mousewheel", "mouse"],\n      ["keydown", "keyboard"],\n      ["keyup", "keyboard"],\n      ["keypress", "keyboard"],\n      ["textInput", "keyboard"],\n      ["touchstart", "touch"],\n      ["touchmove", "touch"],\n      ["touchend", "touch"],\n      ["touchcancel", "touch"],\n      ["pointerover", "pointer"],\n      ["pointerout", "pointer"],\n      ["pointerenter", "pointer"],\n      ["pointerleave", "pointer"],\n      ["pointerdown", "pointer"],\n      ["pointerup", "pointer"],\n      ["pointermove", "pointer"],\n      ["pointercancel", "pointer"],\n      ["gotpointercapture", "pointer"],\n      ["lostpointercapture", "pointer"],\n      ["focus", "focus"],\n      ["blur", "focus"],\n      ["drag", "drag"],\n      ["dragstart", "drag"],\n      ["dragend", "drag"],\n      ["dragover", "drag"],\n      ["dragenter", "drag"],\n      ["dragleave", "drag"],\n      ["dragexit", "drag"],\n      ["drop", "drag"],\n      ["wheel", "wheel"],\n      ["deviceorientation", "deviceorientation"],\n      ["deviceorientationabsolute", "deviceorientation"],\n      ["devicemotion", "devicemotion"]\n    ]);\n    this._hoverHitTargetInterceptorEvents = new Set(["mousemove"]);\n    this._tapHitTargetInterceptorEvents = new Set(["pointerdown", "pointerup", "touchstart", "touchend", "touchcancel"]);\n    this._mouseHitTargetInterceptorEvents = new Set(["mousedown", "mouseup", "pointerdown", "pointerup", "click", "auxclick", "dblclick", "contextmenu"]);\n    this._allHitTargetInterceptorEvents = new Set([...this._hoverHitTargetInterceptorEvents, ...this._tapHitTargetInterceptorEvents, ...this._mouseHitTargetInterceptorEvents]);\n    this._engines = new Map();\n    this._engines.set("xpath", XPathEngine);\n    this._engines.set("xpath:light", XPathEngine);\n    this._engines.set("_react", createReactEngine());\n    this._engines.set("_vue", createVueEngine());\n    this._engines.set("role", createRoleEngine(false));\n    this._engines.set("text", this._createTextEngine(true, false));\n    this._engines.set("text:light", this._createTextEngine(false, false));\n    this._engines.set("id", this._createAttributeEngine("id", true));\n    this._engines.set("id:light", this._createAttributeEngine("id", false));\n    this._engines.set("data-testid", this._createAttributeEngine("data-testid", true));\n    this._engines.set("data-testid:light", this._createAttributeEngine("data-testid", false));\n    this._engines.set("data-test-id", this._createAttributeEngine("data-test-id", true));\n    this._engines.set("data-test-id:light", this._createAttributeEngine("data-test-id", false));\n    this._engines.set("data-test", this._createAttributeEngine("data-test", true));\n    this._engines.set("data-test:light", this._createAttributeEngine("data-test", false));\n    this._engines.set("css", this._createCSSEngine());\n    this._engines.set("nth", { queryAll: () => [] });\n    this._engines.set("visible", this._createVisibleEngine());\n    this._engines.set("internal:control", this._createControlEngine());\n    this._engines.set("internal:has", this._createHasEngine());\n    this._engines.set("internal:has-not", this._createHasNotEngine());\n    this._engines.set("internal:and", { queryAll: () => [] });\n    this._engines.set("internal:or", { queryAll: () => [] });\n    this._engines.set("internal:chain", this._createInternalChainEngine());\n    this._engines.set("internal:label", this._createInternalLabelEngine());\n    this._engines.set("internal:text", this._createTextEngine(true, true));\n    this._engines.set("internal:has-text", this._createInternalHasTextEngine());\n    this._engines.set("internal:has-not-text", this._createInternalHasNotTextEngine());\n    this._engines.set("internal:attr", this._createNamedAttributeEngine());\n    this._engines.set("internal:testid", this._createNamedAttributeEngine());\n    this._engines.set("internal:role", createRoleEngine(true));\n    this._engines.set("aria-ref", this._createAriaIdEngine());\n    for (const { name, engine } of customEngines)\n      this._engines.set(name, engine);\n    this._stableRafCount = stableRafCount;\n    this._browserName = browserName;\n    setGlobalOptions({ browserNameForWorkarounds: browserName, inputFileRoleTextbox });\n    this._setupGlobalListenersRemovalDetection();\n    this._setupHitTargetInterceptors();\n    if (isUnderTest)\n      this.window.__injectedScript = this;\n  }\n  eval(expression) {\n    return this.window.eval(expression);\n  }\n  testIdAttributeNameForStrictErrorAndConsoleCodegen() {\n    return this._testIdAttributeNameForStrictErrorAndConsoleCodegen;\n  }\n  parseSelector(selector) {\n    const result = parseSelector(selector);\n    visitAllSelectorParts(result, (part) => {\n      if (!this._engines.has(part.name))\n        throw this.createStacklessError(`Unknown engine "${part.name}" while parsing selector ${selector}`);\n    });\n    return result;\n  }\n  generateSelector(targetElement, options) {\n    return generateSelector(this, targetElement, options);\n  }\n  generateSelectorSimple(targetElement, options) {\n    return generateSelector(this, targetElement, { ...options, testIdAttributeName: this._testIdAttributeNameForStrictErrorAndConsoleCodegen }).selector;\n  }\n  querySelector(selector, root, strict) {\n    const result = this.querySelectorAll(selector, root);\n    if (strict && result.length > 1)\n      throw this.strictModeViolationError(selector, result);\n    return result[0];\n  }\n  _queryNth(elements, part) {\n    const list = [...elements];\n    let nth = +part.body;\n    if (nth === -1)\n      nth = list.length - 1;\n    return new Set(list.slice(nth, nth + 1));\n  }\n  _queryLayoutSelector(elements, part, originalRoot) {\n    const name = part.name;\n    const body = part.body;\n    const result = [];\n    const inner = this.querySelectorAll(body.parsed, originalRoot);\n    for (const element of elements) {\n      const score = layoutSelectorScore(name, element, inner, body.distance);\n      if (score !== void 0)\n        result.push({ element, score });\n    }\n    result.sort((a, b) => a.score - b.score);\n    return new Set(result.map((r) => r.element));\n  }\n  ariaSnapshot(node, options) {\n    var _a;\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError("Can only capture aria snapshot of Element nodes.");\n    const generation = (((_a = this._lastAriaSnapshot) == null ? void 0 : _a.generation) || 0) + 1;\n    this._lastAriaSnapshot = generateAriaTree(node, generation);\n    return renderAriaTree(this._lastAriaSnapshot, options);\n  }\n  ariaSnapshotElement(snapshot, elementId) {\n    return snapshot.elements.get(elementId) || null;\n  }\n  getAllByAria(document, template) {\n    return getAllByAria(document.documentElement, template);\n  }\n  querySelectorAll(selector, root) {\n    if (selector.capture !== void 0) {\n      if (selector.parts.some((part) => part.name === "nth"))\n        throw this.createStacklessError(`Can\'t query n-th element in a request with the capture.`);\n      const withHas = { parts: selector.parts.slice(0, selector.capture + 1) };\n      if (selector.capture < selector.parts.length - 1) {\n        const parsed = { parts: selector.parts.slice(selector.capture + 1) };\n        const has = { name: "internal:has", body: { parsed }, source: stringifySelector(parsed) };\n        withHas.parts.push(has);\n      }\n      return this.querySelectorAll(withHas, root);\n    }\n    if (!root["querySelectorAll"])\n      throw this.createStacklessError("Node is not queryable.");\n    if (selector.capture !== void 0) {\n      throw this.createStacklessError("Internal error: there should not be a capture in the selector.");\n    }\n    if (root.nodeType === 11 && selector.parts.length === 1 && selector.parts[0].name === "css" && selector.parts[0].source === ":scope")\n      return [root];\n    this._evaluator.begin();\n    try {\n      let roots = new Set([root]);\n      for (const part of selector.parts) {\n        if (part.name === "nth") {\n          roots = this._queryNth(roots, part);\n        } else if (part.name === "internal:and") {\n          const andElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(andElements.filter((e) => roots.has(e)));\n        } else if (part.name === "internal:or") {\n          const orElements = this.querySelectorAll(part.body.parsed, root);\n          roots = new Set(sortInDOMOrder(new Set([...roots, ...orElements])));\n        } else if (kLayoutSelectorNames.includes(part.name)) {\n          roots = this._queryLayoutSelector(roots, part, root);\n        } else {\n          const next = new Set();\n          for (const root2 of roots) {\n            const all = this._queryEngineAll(part, root2);\n            for (const one of all)\n              next.add(one);\n          }\n          roots = next;\n        }\n      }\n      return [...roots];\n    } finally {\n      this._evaluator.end();\n    }\n  }\n  _queryEngineAll(part, root) {\n    const result = this._engines.get(part.name).queryAll(root, part.body);\n    for (const element of result) {\n      if (!("nodeName" in element))\n        throw this.createStacklessError(`Expected a Node but got ${Object.prototype.toString.call(element)}`);\n    }\n    return result;\n  }\n  _createAttributeEngine(attribute, shadow) {\n    const toCSS = (selector) => {\n      const css = `[${attribute}=${JSON.stringify(selector)}]`;\n      return [{ simples: [{ selector: { css, functions: [] }, combinator: "" }] }];\n    };\n    return {\n      queryAll: (root, selector) => {\n        return this._evaluator.query({ scope: root, pierceShadow: shadow }, toCSS(selector));\n      }\n    };\n  }\n  _createCSSEngine() {\n    return {\n      queryAll: (root, body) => {\n        return this._evaluator.query({ scope: root, pierceShadow: true }, body);\n      }\n    };\n  }\n  _createTextEngine(shadow, internal) {\n    const queryAll = (root, selector) => {\n      const { matcher, kind } = createTextMatcher(selector, internal);\n      const result = [];\n      let lastDidNotMatchSelf = null;\n      const appendElement = (element) => {\n        if (kind === "lax" && lastDidNotMatchSelf && lastDidNotMatchSelf.contains(element))\n          return false;\n        const matches = elementMatchesText(this._evaluator._cacheText, element, matcher);\n        if (matches === "none")\n          lastDidNotMatchSelf = element;\n        if (matches === "self" || matches === "selfAndChildren" && kind === "strict" && !internal)\n          result.push(element);\n      };\n      if (root.nodeType === Node.ELEMENT_NODE)\n        appendElement(root);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: shadow }, "*");\n      for (const element of elements)\n        appendElement(element);\n      return result;\n    };\n    return { queryAll };\n  }\n  _createInternalHasTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [element] : [];\n      }\n    };\n  }\n  _createInternalHasNotTextEngine() {\n    return {\n      queryAll: (root, selector) => {\n        if (root.nodeType !== 1)\n          return [];\n        const element = root;\n        const text = elementText(this._evaluator._cacheText, element);\n        const { matcher } = createTextMatcher(selector, true);\n        return matcher(text) ? [] : [element];\n      }\n    };\n  }\n  _createInternalLabelEngine() {\n    return {\n      queryAll: (root, selector) => {\n        const { matcher } = createTextMatcher(selector, true);\n        const allElements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, "*");\n        return allElements.filter((element) => {\n          return getElementLabels(this._evaluator._cacheText, element).some((label) => matcher(label));\n        });\n      }\n    };\n  }\n  _createNamedAttributeEngine() {\n    const queryAll = (root, selector) => {\n      const parsed = parseAttributeSelector(selector, true);\n      if (parsed.name || parsed.attributes.length !== 1)\n        throw new Error("Malformed attribute selector: " + selector);\n      const { name, value, caseSensitive } = parsed.attributes[0];\n      const lowerCaseValue = caseSensitive ? null : value.toLowerCase();\n      let matcher;\n      if (value instanceof RegExp)\n        matcher = (s) => !!s.match(value);\n      else if (caseSensitive)\n        matcher = (s) => s === value;\n      else\n        matcher = (s) => s.toLowerCase().includes(lowerCaseValue);\n      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, `[${name}]`);\n      return elements.filter((e) => matcher(e.getAttribute(name)));\n    };\n    return { queryAll };\n  }\n  _createControlEngine() {\n    return {\n      queryAll(root, body) {\n        if (body === "enter-frame")\n          return [];\n        if (body === "return-empty")\n          return [];\n        if (body === "component") {\n          if (root.nodeType !== 1)\n            return [];\n          return [root.childElementCount === 1 ? root.firstElementChild : root];\n        }\n        throw new Error(`Internal error, unknown internal:control selector ${body}`);\n      }\n    };\n  }\n  _createHasEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createHasNotEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const has = !!this.querySelector(body.parsed, root, false);\n      return has ? [] : [root];\n    };\n    return { queryAll };\n  }\n  _createVisibleEngine() {\n    const queryAll = (root, body) => {\n      if (root.nodeType !== 1)\n        return [];\n      const visible = body === "true";\n      return isElementVisible(root) === visible ? [root] : [];\n    };\n    return { queryAll };\n  }\n  _createInternalChainEngine() {\n    const queryAll = (root, body) => {\n      return this.querySelectorAll(body.parsed, root);\n    };\n    return { queryAll };\n  }\n  extend(source, params) {\n    const constrFunction = this.window.eval(`\n    (() => {\n      const module = {};\n      ${source}\n      return module.exports.default();\n    })()`);\n    return new constrFunction(this, params);\n  }\n  async viewportRatio(element) {\n    return await new Promise((resolve) => {\n      const observer = new IntersectionObserver((entries) => {\n        resolve(entries[0].intersectionRatio);\n        observer.disconnect();\n      });\n      observer.observe(element);\n      requestAnimationFrame(() => {\n      });\n    });\n  }\n  getElementBorderWidth(node) {\n    if (node.nodeType !== Node.ELEMENT_NODE || !node.ownerDocument || !node.ownerDocument.defaultView)\n      return { left: 0, top: 0 };\n    const style = node.ownerDocument.defaultView.getComputedStyle(node);\n    return { left: parseInt(style.borderLeftWidth || "", 10), top: parseInt(style.borderTopWidth || "", 10) };\n  }\n  describeIFrameStyle(iframe) {\n    if (!iframe.ownerDocument || !iframe.ownerDocument.defaultView)\n      return "error:notconnected";\n    const defaultView = iframe.ownerDocument.defaultView;\n    for (let e = iframe; e; e = parentElementOrShadowHost(e)) {\n      if (defaultView.getComputedStyle(e).transform !== "none")\n        return "transformed";\n    }\n    const iframeStyle = defaultView.getComputedStyle(iframe);\n    return {\n      left: parseInt(iframeStyle.borderLeftWidth || "", 10) + parseInt(iframeStyle.paddingLeft || "", 10),\n      top: parseInt(iframeStyle.borderTopWidth || "", 10) + parseInt(iframeStyle.paddingTop || "", 10)\n    };\n  }\n  retarget(node, behavior) {\n    let element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;\n    if (!element)\n      return null;\n    if (behavior === "none")\n      return element;\n    if (!element.matches("input, textarea, select") && !element.isContentEditable) {\n      if (behavior === "button-link")\n        element = element.closest("button, [role=button], a, [role=link]") || element;\n      else\n        element = element.closest("button, [role=button], [role=checkbox], [role=radio]") || element;\n    }\n    if (behavior === "follow-label") {\n      if (!element.matches("a, input, textarea, button, select, [role=link], [role=button], [role=checkbox], [role=radio]") && !element.isContentEditable) {\n        const enclosingLabel = element.closest("label");\n        if (enclosingLabel && enclosingLabel.control)\n          element = enclosingLabel.control;\n      }\n    }\n    return element;\n  }\n  async checkElementStates(node, states) {\n    if (states.includes("stable")) {\n      const stableResult = await this._checkElementIsStable(node);\n      if (stableResult === false)\n        return { missingState: "stable" };\n      if (stableResult === "error:notconnected")\n        return "error:notconnected";\n    }\n    for (const state of states) {\n      if (state !== "stable") {\n        const result = this.elementState(node, state);\n        if (result.received === "error:notconnected")\n          return "error:notconnected";\n        if (!result.matches)\n          return { missingState: state };\n      }\n    }\n  }\n  async _checkElementIsStable(node) {\n    const continuePolling = Symbol("continuePolling");\n    let lastRect;\n    let stableRafCounter = 0;\n    let lastTime = 0;\n    const check = () => {\n      const element = this.retarget(node, "no-follow-label");\n      if (!element)\n        return "error:notconnected";\n      const time = performance.now();\n      if (this._stableRafCount > 1 && time - lastTime < 15)\n        return continuePolling;\n      lastTime = time;\n      const clientRect = element.getBoundingClientRect();\n      const rect = { x: clientRect.top, y: clientRect.left, width: clientRect.width, height: clientRect.height };\n      if (lastRect) {\n        const samePosition = rect.x === lastRect.x && rect.y === lastRect.y && rect.width === lastRect.width && rect.height === lastRect.height;\n        if (!samePosition)\n          return false;\n        if (++stableRafCounter >= this._stableRafCount)\n          return true;\n      }\n      lastRect = rect;\n      return continuePolling;\n    };\n    let fulfill;\n    let reject;\n    const result = new Promise((f, r) => {\n      fulfill = f;\n      reject = r;\n    });\n    const raf = () => {\n      try {\n        const success = check();\n        if (success !== continuePolling)\n          fulfill(success);\n        else\n          requestAnimationFrame(raf);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    requestAnimationFrame(raf);\n    return result;\n  }\n  _createAriaIdEngine() {\n    const queryAll = (root, selector) => {\n      var _a, _b, _c, _d;\n      const match = selector.match(/^s(\\d+)e(\\d+)$/);\n      if (!match)\n        throw this.createStacklessError("Invalid aria-ref selector, should be of form s<number>e<number>");\n      const [, generation, elementId] = match;\n      if (((_a = this._lastAriaSnapshot) == null ? void 0 : _a.generation) !== +generation)\n        throw this.createStacklessError(`Stale aria-ref, expected s${(_b = this._lastAriaSnapshot) == null ? void 0 : _b.generation}e{number}, got ${selector}`);\n      const result = (_d = (_c = this._lastAriaSnapshot) == null ? void 0 : _c.elements) == null ? void 0 : _d.get(+elementId);\n      return result && result.isConnected ? [result] : [];\n    };\n    return { queryAll };\n  }\n  elementState(node, state) {\n    const element = this.retarget(node, ["visible", "hidden"].includes(state) ? "none" : "follow-label");\n    if (!element || !element.isConnected) {\n      if (state === "hidden")\n        return { matches: true, received: "hidden" };\n      return { matches: false, received: "error:notconnected" };\n    }\n    if (state === "visible" || state === "hidden") {\n      const visible = isElementVisible(element);\n      return {\n        matches: state === "visible" ? visible : !visible,\n        received: visible ? "visible" : "hidden"\n      };\n    }\n    if (state === "disabled" || state === "enabled") {\n      const disabled = getAriaDisabled(element);\n      return {\n        matches: state === "disabled" ? disabled : !disabled,\n        received: disabled ? "disabled" : "enabled"\n      };\n    }\n    if (state === "editable") {\n      const disabled = getAriaDisabled(element);\n      const readonly = getReadonly(element);\n      if (readonly === "error")\n        throw this.createStacklessError("Element is not an <input>, <textarea>, <select> or [contenteditable] and does not have a role allowing [aria-readonly]");\n      return {\n        matches: !disabled && !readonly,\n        received: disabled ? "disabled" : readonly ? "readOnly" : "editable"\n      };\n    }\n    if (state === "checked" || state === "unchecked") {\n      const need = state === "checked";\n      const checked = getCheckedWithoutMixed(element);\n      if (checked === "error")\n        throw this.createStacklessError("Not a checkbox or radio button");\n      return {\n        matches: need === checked,\n        received: checked ? "checked" : "unchecked"\n      };\n    }\n    if (state === "indeterminate") {\n      const checked = getCheckedAllowMixed(element);\n      if (checked === "error")\n        throw this.createStacklessError("Not a checkbox or radio button");\n      return {\n        matches: checked === "mixed",\n        received: checked === true ? "checked" : checked === false ? "unchecked" : "mixed"\n      };\n    }\n    throw this.createStacklessError(`Unexpected element state "${state}"`);\n  }\n  selectOptions(node, optionsToSelect) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() !== "select")\n      throw this.createStacklessError("Element is not a <select> element");\n    const select = element;\n    const options = [...select.options];\n    const selectedOptions = [];\n    let remainingOptionsToSelect = optionsToSelect.slice();\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index];\n      const filter = (optionToSelect) => {\n        if (optionToSelect instanceof Node)\n          return option === optionToSelect;\n        let matches = true;\n        if (optionToSelect.valueOrLabel !== void 0)\n          matches = matches && (optionToSelect.valueOrLabel === option.value || optionToSelect.valueOrLabel === option.label);\n        if (optionToSelect.value !== void 0)\n          matches = matches && optionToSelect.value === option.value;\n        if (optionToSelect.label !== void 0)\n          matches = matches && optionToSelect.label === option.label;\n        if (optionToSelect.index !== void 0)\n          matches = matches && optionToSelect.index === index;\n        return matches;\n      };\n      if (!remainingOptionsToSelect.some(filter))\n        continue;\n      selectedOptions.push(option);\n      if (select.multiple) {\n        remainingOptionsToSelect = remainingOptionsToSelect.filter((o) => !filter(o));\n      } else {\n        remainingOptionsToSelect = [];\n        break;\n      }\n    }\n    if (remainingOptionsToSelect.length)\n      return "error:optionsnotfound";\n    select.value = void 0;\n    selectedOptions.forEach((option) => option.selected = true);\n    select.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n    select.dispatchEvent(new Event("change", { bubbles: true }));\n    return selectedOptions.map((option) => option.value);\n  }\n  fill(node, value) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() === "input") {\n      const input = element;\n      const type = input.type.toLowerCase();\n      const kInputTypesToSetValue = new Set(["color", "date", "time", "datetime-local", "month", "range", "week"]);\n      const kInputTypesToTypeInto = new Set(["", "email", "number", "password", "search", "tel", "text", "url"]);\n      if (!kInputTypesToTypeInto.has(type) && !kInputTypesToSetValue.has(type))\n        throw this.createStacklessError(`Input of type "${type}" cannot be filled`);\n      if (type === "number") {\n        value = value.trim();\n        if (isNaN(Number(value)))\n          throw this.createStacklessError("Cannot type text into input[type=number]");\n      }\n      if (kInputTypesToSetValue.has(type)) {\n        value = value.trim();\n        input.focus();\n        input.value = value;\n        if (input.value !== value)\n          throw this.createStacklessError("Malformed value");\n        element.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n        element.dispatchEvent(new Event("change", { bubbles: true }));\n        return "done";\n      }\n    } else if (element.nodeName.toLowerCase() === "textarea") {\n    } else if (!element.isContentEditable) {\n      throw this.createStacklessError("Element is not an <input>, <textarea> or [contenteditable] element");\n    }\n    this.selectText(element);\n    return "needsinput";\n  }\n  selectText(node) {\n    const element = this.retarget(node, "follow-label");\n    if (!element)\n      return "error:notconnected";\n    if (element.nodeName.toLowerCase() === "input") {\n      const input = element;\n      input.select();\n      input.focus();\n      return "done";\n    }\n    if (element.nodeName.toLowerCase() === "textarea") {\n      const textarea = element;\n      textarea.selectionStart = 0;\n      textarea.selectionEnd = textarea.value.length;\n      textarea.focus();\n      return "done";\n    }\n    const range = element.ownerDocument.createRange();\n    range.selectNodeContents(element);\n    const selection = element.ownerDocument.defaultView.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n    element.focus();\n    return "done";\n  }\n  _activelyFocused(node) {\n    const activeElement = node.getRootNode().activeElement;\n    const isFocused = activeElement === node && !!node.ownerDocument && node.ownerDocument.hasFocus();\n    return { activeElement, isFocused };\n  }\n  focusNode(node, resetSelectionIfNotFocused) {\n    if (!node.isConnected)\n      return "error:notconnected";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError("Node is not an element");\n    const { activeElement, isFocused: wasFocused } = this._activelyFocused(node);\n    if (node.isContentEditable && !wasFocused && activeElement && activeElement.blur) {\n      activeElement.blur();\n    }\n    node.focus();\n    node.focus();\n    if (resetSelectionIfNotFocused && !wasFocused && node.nodeName.toLowerCase() === "input") {\n      try {\n        const input = node;\n        input.setSelectionRange(0, 0);\n      } catch (e) {\n      }\n    }\n    return "done";\n  }\n  blurNode(node) {\n    if (!node.isConnected)\n      return "error:notconnected";\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      throw this.createStacklessError("Node is not an element");\n    node.blur();\n    return "done";\n  }\n  setInputFiles(node, payloads) {\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return "Node is not of type HTMLElement";\n    const element = node;\n    if (element.nodeName !== "INPUT")\n      return "Not an <input> element";\n    const input = element;\n    const type = (input.getAttribute("type") || "").toLowerCase();\n    if (type !== "file")\n      return "Not an input[type=file] element";\n    const files = payloads.map((file) => {\n      const bytes = Uint8Array.from(atob(file.buffer), (c) => c.charCodeAt(0));\n      return new File([bytes], file.name, { type: file.mimeType, lastModified: file.lastModifiedMs });\n    });\n    const dt = new DataTransfer();\n    for (const file of files)\n      dt.items.add(file);\n    input.files = dt.files;\n    input.dispatchEvent(new Event("input", { bubbles: true, composed: true }));\n    input.dispatchEvent(new Event("change", { bubbles: true }));\n  }\n  expectHitTarget(hitPoint, targetElement) {\n    const roots = [];\n    let parentElement = targetElement;\n    while (parentElement) {\n      const root = enclosingShadowRootOrDocument(parentElement);\n      if (!root)\n        break;\n      roots.push(root);\n      if (root.nodeType === 9)\n        break;\n      parentElement = root.host;\n    }\n    let hitElement;\n    for (let index = roots.length - 1; index >= 0; index--) {\n      const root = roots[index];\n      const elements = root.elementsFromPoint(hitPoint.x, hitPoint.y);\n      const singleElement = root.elementFromPoint(hitPoint.x, hitPoint.y);\n      if (singleElement && elements[0] && parentElementOrShadowHost(singleElement) === elements[0]) {\n        const style = this.window.getComputedStyle(singleElement);\n        if ((style == null ? void 0 : style.display) === "contents") {\n          elements.unshift(singleElement);\n        }\n      }\n      if (elements[0] && elements[0].shadowRoot === root && elements[1] === singleElement) {\n        elements.shift();\n      }\n      const innerElement = elements[0];\n      if (!innerElement)\n        break;\n      hitElement = innerElement;\n      if (index && innerElement !== roots[index - 1].host)\n        break;\n    }\n    const hitParents = [];\n    while (hitElement && hitElement !== targetElement) {\n      hitParents.push(hitElement);\n      hitElement = parentElementOrShadowHost(hitElement);\n    }\n    if (hitElement === targetElement)\n      return "done";\n    const hitTargetDescription = this.previewNode(hitParents[0] || this.document.documentElement);\n    let rootHitTargetDescription;\n    let element = targetElement;\n    while (element) {\n      const index = hitParents.indexOf(element);\n      if (index !== -1) {\n        if (index > 1)\n          rootHitTargetDescription = this.previewNode(hitParents[index - 1]);\n        break;\n      }\n      element = parentElementOrShadowHost(element);\n    }\n    if (rootHitTargetDescription)\n      return { hitTargetDescription: `${hitTargetDescription} from ${rootHitTargetDescription} subtree` };\n    return { hitTargetDescription };\n  }\n  // Life of a pointer action, for example click.\n  //\n  // 0. Retry items 1 and 2 while action fails due to navigation or element being detached.\n  //   1. Resolve selector to an element.\n  //   2. Retry the following steps until the element is detached or frame navigates away.\n  //     2a. Wait for the element to be stable (not moving), visible and enabled.\n  //     2b. Scroll element into view. Scrolling alternates between:\n  //         - Built-in protocol scrolling.\n  //         - Anchoring to the top/left, bottom/right and center/center.\n  //         This is to scroll elements from under sticky headers/footers.\n  //     2c. Click point is calculated, either based on explicitly specified position,\n  //         or some visible point of the element based on protocol content quads.\n  //     2d. Click point relative to page viewport is converted relative to the target iframe\n  //         for the next hit-point check.\n  //     2e. (injected) Hit target at the click point must be a descendant of the target element.\n  //         This prevents mis-clicking in edge cases like <iframe> overlaying the target.\n  //     2f. (injected) Events specific for click (or some other action type) are intercepted on\n  //         the Window with capture:true. See 2i for details.\n  //         Note: this step is skipped for drag&drop (see inline comments for the reason).\n  //     2g. Necessary keyboard modifiers are pressed.\n  //     2h. Click event is issued (mousemove + mousedown + mouseup).\n  //     2i. (injected) For each event, we check that hit target at the event point\n  //         is a descendant of the target element.\n  //         This guarantees no race between issuing the event and handling it in the page,\n  //         for example due to layout shift.\n  //         When hit target check fails, we block all future events in the page.\n  //     2j. Keyboard modifiers are restored.\n  //     2k. (injected) Event interceptor is removed.\n  //     2l. All navigations triggered between 2g-2k are awaited to be either committed or canceled.\n  //     2m. If failed, wait for increasing amount of time before the next retry.\n  setupHitTargetInterceptor(node, action, hitPoint, blockAllEvents) {\n    const element = this.retarget(node, "button-link");\n    if (!element || !element.isConnected)\n      return "error:notconnected";\n    if (hitPoint) {\n      const preliminaryResult = this.expectHitTarget(hitPoint, element);\n      if (preliminaryResult !== "done")\n        return preliminaryResult.hitTargetDescription;\n    }\n    if (action === "drag")\n      return { stop: () => "done" };\n    const events = {\n      "hover": this._hoverHitTargetInterceptorEvents,\n      "tap": this._tapHitTargetInterceptorEvents,\n      "mouse": this._mouseHitTargetInterceptorEvents\n    }[action];\n    let result;\n    const listener = (event) => {\n      if (!events.has(event.type))\n        return;\n      if (!event.isTrusted)\n        return;\n      const point = !!this.window.TouchEvent && event instanceof this.window.TouchEvent ? event.touches[0] : event;\n      if (result === void 0 && point)\n        result = this.expectHitTarget({ x: point.clientX, y: point.clientY }, element);\n      if (blockAllEvents || result !== "done" && result !== void 0) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.stopImmediatePropagation();\n      }\n    };\n    const stop = () => {\n      if (this._hitTargetInterceptor === listener)\n        this._hitTargetInterceptor = void 0;\n      return result || "done";\n    };\n    this._hitTargetInterceptor = listener;\n    return { stop };\n  }\n  dispatchEvent(node, type, eventInitObj) {\n    var _a, _b, _c, _d, _e;\n    let event;\n    const eventInit = { bubbles: true, cancelable: true, composed: true, ...eventInitObj };\n    switch (this._eventTypes.get(type)) {\n      case "mouse":\n        event = new MouseEvent(type, eventInit);\n        break;\n      case "keyboard":\n        event = new KeyboardEvent(type, eventInit);\n        break;\n      case "touch": {\n        if (this._browserName === "webkit") {\n          const createTouch = (t) => {\n            var _a2, _b2, _c2;\n            if (t instanceof Touch)\n              return t;\n            let pageX = t.pageX;\n            if (pageX === void 0 && t.clientX !== void 0)\n              pageX = t.clientX + (((_a2 = this.document.scrollingElement) == null ? void 0 : _a2.scrollLeft) || 0);\n            let pageY = t.pageY;\n            if (pageY === void 0 && t.clientY !== void 0)\n              pageY = t.clientY + (((_b2 = this.document.scrollingElement) == null ? void 0 : _b2.scrollTop) || 0);\n            return this.document.createTouch(this.window, (_c2 = t.target) != null ? _c2 : node, t.identifier, pageX, pageY, t.screenX, t.screenY, t.radiusX, t.radiusY, t.rotationAngle, t.force);\n          };\n          const createTouchList = (touches) => {\n            if (touches instanceof TouchList || !touches)\n              return touches;\n            return this.document.createTouchList(...touches.map(createTouch));\n          };\n          (_a = eventInit.target) != null ? _a : eventInit.target = node;\n          eventInit.touches = createTouchList(eventInit.touches);\n          eventInit.targetTouches = createTouchList(eventInit.targetTouches);\n          eventInit.changedTouches = createTouchList(eventInit.changedTouches);\n          event = new TouchEvent(type, eventInit);\n        } else {\n          (_b = eventInit.target) != null ? _b : eventInit.target = node;\n          eventInit.touches = (_c = eventInit.touches) == null ? void 0 : _c.map((t) => {\n            var _a2;\n            return t instanceof Touch ? t : new Touch({ ...t, target: (_a2 = t.target) != null ? _a2 : node });\n          });\n          eventInit.targetTouches = (_d = eventInit.targetTouches) == null ? void 0 : _d.map((t) => {\n            var _a2;\n            return t instanceof Touch ? t : new Touch({ ...t, target: (_a2 = t.target) != null ? _a2 : node });\n          });\n          eventInit.changedTouches = (_e = eventInit.changedTouches) == null ? void 0 : _e.map((t) => {\n            var _a2;\n            return t instanceof Touch ? t : new Touch({ ...t, target: (_a2 = t.target) != null ? _a2 : node });\n          });\n          event = new TouchEvent(type, eventInit);\n        }\n        break;\n      }\n      case "pointer":\n        event = new PointerEvent(type, eventInit);\n        break;\n      case "focus":\n        event = new FocusEvent(type, eventInit);\n        break;\n      case "drag":\n        event = new DragEvent(type, eventInit);\n        break;\n      case "wheel":\n        event = new WheelEvent(type, eventInit);\n        break;\n      case "deviceorientation":\n        try {\n          event = new DeviceOrientationEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, alpha, beta, gamma, absolute } = eventInit;\n          event = this.document.createEvent("DeviceOrientationEvent");\n          event.initDeviceOrientationEvent(type, bubbles, cancelable, alpha, beta, gamma, absolute);\n        }\n        break;\n      case "devicemotion":\n        try {\n          event = new DeviceMotionEvent(type, eventInit);\n        } catch {\n          const { bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval } = eventInit;\n          event = this.document.createEvent("DeviceMotionEvent");\n          event.initDeviceMotionEvent(type, bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval);\n        }\n        break;\n      default:\n        event = new Event(type, eventInit);\n        break;\n    }\n    node.dispatchEvent(event);\n  }\n  previewNode(node) {\n    if (node.nodeType === Node.TEXT_NODE)\n      return oneLine(`#text=${node.nodeValue || ""}`);\n    if (node.nodeType !== Node.ELEMENT_NODE)\n      return oneLine(`<${node.nodeName.toLowerCase()} />`);\n    const element = node;\n    const attrs = [];\n    for (let i = 0; i < element.attributes.length; i++) {\n      const { name, value } = element.attributes[i];\n      if (name === "style")\n        continue;\n      if (!value && this._booleanAttributes.has(name))\n        attrs.push(` ${name}`);\n      else\n        attrs.push(` ${name}="${value}"`);\n    }\n    attrs.sort((a, b) => a.length - b.length);\n    const attrText = trimStringWithEllipsis(attrs.join(""), 500);\n    if (this._autoClosingTags.has(element.nodeName))\n      return oneLine(`<${element.nodeName.toLowerCase()}${attrText}/>`);\n    const children = element.childNodes;\n    let onlyText = false;\n    if (children.length <= 5) {\n      onlyText = true;\n      for (let i = 0; i < children.length; i++)\n        onlyText = onlyText && children[i].nodeType === Node.TEXT_NODE;\n    }\n    const text = onlyText ? element.textContent || "" : children.length ? "\\u2026" : "";\n    return oneLine(`<${element.nodeName.toLowerCase()}${attrText}>${trimStringWithEllipsis(text, 50)}</${element.nodeName.toLowerCase()}>`);\n  }\n  strictModeViolationError(selector, matches) {\n    const infos = matches.slice(0, 10).map((m) => ({\n      preview: this.previewNode(m),\n      selector: this.generateSelectorSimple(m)\n    }));\n    const lines = infos.map((info, i) => `\n    ${i + 1}) ${info.preview} aka ${asLocator(this._sdkLanguage, info.selector)}`);\n    if (infos.length < matches.length)\n      lines.push("\\n    ...");\n    return this.createStacklessError(`strict mode violation: ${asLocator(this._sdkLanguage, stringifySelector(selector))} resolved to ${matches.length} elements:${lines.join("")}\n`);\n  }\n  createStacklessError(message) {\n    if (this._browserName === "firefox") {\n      const error2 = new Error("Error: " + message);\n      error2.stack = "";\n      return error2;\n    }\n    const error = new Error(message);\n    delete error.stack;\n    return error;\n  }\n  createHighlight() {\n    return new Highlight(this);\n  }\n  maskSelectors(selectors, color) {\n    if (this._highlight)\n      this.hideHighlight();\n    this._highlight = new Highlight(this);\n    this._highlight.install();\n    const elements = [];\n    for (const selector of selectors)\n      elements.push(this.querySelectorAll(selector, this.document.documentElement));\n    this._highlight.maskElements(elements.flat(), color);\n  }\n  highlight(selector) {\n    if (!this._highlight) {\n      this._highlight = new Highlight(this);\n      this._highlight.install();\n    }\n    this._highlight.runHighlightOnRaf(selector);\n  }\n  hideHighlight() {\n    if (this._highlight) {\n      this._highlight.uninstall();\n      delete this._highlight;\n    }\n  }\n  markTargetElements(markedElements, callId) {\n    var _a, _b;\n    if (((_a = this._markedElements) == null ? void 0 : _a.callId) !== callId)\n      this._markedElements = void 0;\n    const previous = ((_b = this._markedElements) == null ? void 0 : _b.elements) || new Set();\n    const unmarkEvent = new CustomEvent("__playwright_unmark_target__", {\n      bubbles: true,\n      cancelable: true,\n      detail: callId,\n      composed: true\n    });\n    for (const element of previous) {\n      if (!markedElements.has(element))\n        element.dispatchEvent(unmarkEvent);\n    }\n    const markEvent = new CustomEvent("__playwright_mark_target__", {\n      bubbles: true,\n      cancelable: true,\n      detail: callId,\n      composed: true\n    });\n    for (const element of markedElements) {\n      if (!previous.has(element))\n        element.dispatchEvent(markEvent);\n    }\n    this._markedElements = { callId, elements: markedElements };\n  }\n  _setupGlobalListenersRemovalDetection() {\n    const customEventName = "__playwright_global_listeners_check__";\n    let seenEvent = false;\n    const handleCustomEvent = () => seenEvent = true;\n    this.window.addEventListener(customEventName, handleCustomEvent);\n    new MutationObserver((entries) => {\n      const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(this.document.documentElement));\n      if (!newDocumentElement)\n        return;\n      seenEvent = false;\n      this.window.dispatchEvent(new CustomEvent(customEventName));\n      if (seenEvent)\n        return;\n      this.window.addEventListener(customEventName, handleCustomEvent);\n      for (const callback of this.onGlobalListenersRemoved)\n        callback();\n    }).observe(this.document, { childList: true });\n  }\n  _setupHitTargetInterceptors() {\n    const listener = (event) => {\n      var _a;\n      return (_a = this._hitTargetInterceptor) == null ? void 0 : _a.call(this, event);\n    };\n    const addHitTargetInterceptorListeners = () => {\n      for (const event of this._allHitTargetInterceptorEvents)\n        this.window.addEventListener(event, listener, { capture: true, passive: false });\n    };\n    addHitTargetInterceptorListeners();\n    this.onGlobalListenersRemoved.add(addHitTargetInterceptorListeners);\n  }\n  async expect(element, options, elements) {\n    const isArray = options.expression === "to.have.count" || options.expression.endsWith(".array");\n    if (isArray)\n      return this.expectArray(elements, options);\n    if (!element) {\n      if (!options.isNot && options.expression === "to.be.hidden")\n        return { matches: true };\n      if (options.isNot && options.expression === "to.be.visible")\n        return { matches: false };\n      if (!options.isNot && options.expression === "to.be.detached")\n        return { matches: true };\n      if (options.isNot && options.expression === "to.be.attached")\n        return { matches: false };\n      if (options.isNot && options.expression === "to.be.in.viewport")\n        return { matches: false };\n      return { matches: options.isNot, missingReceived: true };\n    }\n    return await this.expectSingleElement(element, options);\n  }\n  async expectSingleElement(element, options) {\n    var _a, _b;\n    const expression = options.expression;\n    {\n      let result;\n      if (expression === "to.have.attribute") {\n        const hasAttribute = element.hasAttribute(options.expressionArg);\n        result = {\n          matches: hasAttribute,\n          received: hasAttribute ? "attribute present" : "attribute not present"\n        };\n      } else if (expression === "to.be.checked") {\n        const { checked, indeterminate } = options.expectedValue;\n        if (indeterminate) {\n          if (checked !== void 0)\n            throw this.createStacklessError("Can\'t assert indeterminate and checked at the same time");\n          result = this.elementState(element, "indeterminate");\n        } else {\n          result = this.elementState(element, checked === false ? "unchecked" : "checked");\n        }\n      } else if (expression === "to.be.disabled") {\n        result = this.elementState(element, "disabled");\n      } else if (expression === "to.be.editable") {\n        result = this.elementState(element, "editable");\n      } else if (expression === "to.be.readonly") {\n        result = this.elementState(element, "editable");\n        result.matches = !result.matches;\n      } else if (expression === "to.be.empty") {\n        if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {\n          const value = element.value;\n          result = { matches: !value, received: value ? "notEmpty" : "empty" };\n        } else {\n          const text = (_a = element.textContent) == null ? void 0 : _a.trim();\n          result = { matches: !text, received: text ? "notEmpty" : "empty" };\n        }\n      } else if (expression === "to.be.enabled") {\n        result = this.elementState(element, "enabled");\n      } else if (expression === "to.be.focused") {\n        const focused = this._activelyFocused(element).isFocused;\n        result = {\n          matches: focused,\n          received: focused ? "focused" : "inactive"\n        };\n      } else if (expression === "to.be.hidden") {\n        result = this.elementState(element, "hidden");\n      } else if (expression === "to.be.visible") {\n        result = this.elementState(element, "visible");\n      } else if (expression === "to.be.attached") {\n        result = {\n          matches: true,\n          received: "attached"\n        };\n      } else if (expression === "to.be.detached") {\n        result = {\n          matches: false,\n          received: "attached"\n        };\n      }\n      if (result) {\n        if (result.received === "error:notconnected")\n          throw this.createStacklessError("Element is not connected");\n        return result;\n      }\n    }\n    {\n      if (expression === "to.have.property") {\n        let target = element;\n        const properties = options.expressionArg.split(".");\n        for (let i = 0; i < properties.length - 1; i++) {\n          if (typeof target !== "object" || !(properties[i] in target))\n            return { received: void 0, matches: false };\n          target = target[properties[i]];\n        }\n        const received = target[properties[properties.length - 1]];\n        const matches = deepEquals(received, options.expectedValue);\n        return { received, matches };\n      }\n    }\n    {\n      if (expression === "to.be.in.viewport") {\n        const ratio = await this.viewportRatio(element);\n        return { received: `viewport ratio ${ratio}`, matches: ratio > 0 && ratio > ((_b = options.expectedNumber) != null ? _b : 0) - 1e-9 };\n      }\n    }\n    {\n      if (expression === "to.have.values") {\n        element = this.retarget(element, "follow-label");\n        if (element.nodeName !== "SELECT" || !element.multiple)\n          throw this.createStacklessError("Not a select element with a multiple attribute");\n        const received = [...element.selectedOptions].map((o) => o.value);\n        if (received.length !== options.expectedText.length)\n          return { received, matches: false };\n        return { received, matches: received.map((r, i) => new ExpectedTextMatcher(options.expectedText[i]).matches(r)).every(Boolean) };\n      }\n    }\n    {\n      if (expression === "to.match.aria") {\n        const result = matchesAriaTree(element, options.expectedValue);\n        return {\n          received: result.received,\n          matches: !!result.matches.length\n        };\n      }\n    }\n    {\n      let received;\n      if (expression === "to.have.attribute.value") {\n        const value = element.getAttribute(options.expressionArg);\n        if (value === null)\n          return { received: null, matches: false };\n        received = value;\n      } else if (["to.have.class", "to.contain.class"].includes(expression)) {\n        if (!options.expectedText)\n          throw this.createStacklessError("Expected text is not provided for " + expression);\n        return {\n          received: element.classList.toString(),\n          matches: new ExpectedTextMatcher(options.expectedText[0]).matchesClassList(\n            this,\n            element.classList,\n            /* partial */\n            expression === "to.contain.class"\n          )\n        };\n      } else if (expression === "to.have.css") {\n        received = this.window.getComputedStyle(element).getPropertyValue(options.expressionArg);\n      } else if (expression === "to.have.id") {\n        received = element.id;\n      } else if (expression === "to.have.text") {\n        received = options.useInnerText ? element.innerText : elementText(new Map(), element).full;\n      } else if (expression === "to.have.accessible.name") {\n        received = getElementAccessibleName(\n          element,\n          false\n          /* includeHidden */\n        );\n      } else if (expression === "to.have.accessible.description") {\n        received = getElementAccessibleDescription(\n          element,\n          false\n          /* includeHidden */\n        );\n      } else if (expression === "to.have.accessible.error.message") {\n        received = getElementAccessibleErrorMessage(element);\n      } else if (expression === "to.have.role") {\n        received = getAriaRole(element) || "";\n      } else if (expression === "to.have.title") {\n        received = this.document.title;\n      } else if (expression === "to.have.url") {\n        received = this.document.location.href;\n      } else if (expression === "to.have.value") {\n        element = this.retarget(element, "follow-label");\n        if (element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT")\n          throw this.createStacklessError("Not an input element");\n        received = element.value;\n      }\n      if (received !== void 0 && options.expectedText) {\n        const matcher = new ExpectedTextMatcher(options.expectedText[0]);\n        return { received, matches: matcher.matches(received) };\n      }\n    }\n    throw this.createStacklessError("Unknown expect matcher: " + expression);\n  }\n  expectArray(elements, options) {\n    const expression = options.expression;\n    if (expression === "to.have.count") {\n      const received2 = elements.length;\n      const matches2 = received2 === options.expectedNumber;\n      return { received: received2, matches: matches2 };\n    }\n    if (!options.expectedText)\n      throw this.createStacklessError("Expected text is not provided for " + expression);\n    if (["to.have.class.array", "to.contain.class.array"].includes(expression)) {\n      const receivedClassLists = elements.map((e) => e.classList);\n      const received2 = receivedClassLists.map(String);\n      if (receivedClassLists.length !== options.expectedText.length)\n        return { received: received2, matches: false };\n      const matches2 = this._matchSequentially(\n        options.expectedText,\n        receivedClassLists,\n        (matcher, r) => matcher.matchesClassList(\n          this,\n          r,\n          /* partial */\n          expression === "to.contain.class.array"\n        )\n      );\n      return {\n        received: received2,\n        matches: matches2\n      };\n    }\n    if (!["to.contain.text.array", "to.have.text.array"].includes(expression))\n      throw this.createStacklessError("Unknown expect matcher: " + expression);\n    const received = elements.map((e) => options.useInnerText ? e.innerText : elementText(new Map(), e).full);\n    const lengthShouldMatch = expression !== "to.contain.text.array";\n    const matchesLength = received.length === options.expectedText.length || !lengthShouldMatch;\n    if (!matchesLength)\n      return { received, matches: false };\n    const matches = this._matchSequentially(options.expectedText, received, (matcher, r) => matcher.matches(r));\n    return { received, matches };\n  }\n  _matchSequentially(expectedText, received, matchFn) {\n    const matchers = expectedText.map((e) => new ExpectedTextMatcher(e));\n    let mIndex = 0;\n    let rIndex = 0;\n    while (mIndex < matchers.length && rIndex < received.length) {\n      if (matchFn(matchers[mIndex], received[rIndex]))\n        ++mIndex;\n      ++rIndex;\n    }\n    return mIndex === matchers.length;\n  }\n};\nfunction oneLine(s) {\n  return s.replace(/\\n/g, "\\u21B5").replace(/\\t/g, "\\u21C6");\n}\nfunction cssUnquote(s) {\n  s = s.substring(1, s.length - 1);\n  if (!s.includes("\\\\"))\n    return s;\n  const r = [];\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === "\\\\" && i + 1 < s.length)\n      i++;\n    r.push(s[i++]);\n  }\n  return r.join("");\n}\nfunction createTextMatcher(selector, internal) {\n  if (selector[0] === "/" && selector.lastIndexOf("/") > 0) {\n    const lastSlash = selector.lastIndexOf("/");\n    const re = new RegExp(selector.substring(1, lastSlash), selector.substring(lastSlash + 1));\n    return { matcher: (elementText2) => re.test(elementText2.full), kind: "regex" };\n  }\n  const unquote = internal ? JSON.parse.bind(JSON) : cssUnquote;\n  let strict = false;\n  if (selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 1] === \'"\') {\n    selector = unquote(selector);\n    strict = true;\n  } else if (internal && selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 2] === \'"\' && selector[selector.length - 1] === "i") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = false;\n  } else if (internal && selector.length > 1 && selector[0] === \'"\' && selector[selector.length - 2] === \'"\' && selector[selector.length - 1] === "s") {\n    selector = unquote(selector.substring(0, selector.length - 1));\n    strict = true;\n  } else if (selector.length > 1 && selector[0] === "\'" && selector[selector.length - 1] === "\'") {\n    selector = unquote(selector);\n    strict = true;\n  }\n  selector = normalizeWhiteSpace(selector);\n  if (strict) {\n    if (internal)\n      return { kind: "strict", matcher: (elementText2) => elementText2.normalized === selector };\n    const strictTextNodeMatcher = (elementText2) => {\n      if (!selector && !elementText2.immediate.length)\n        return true;\n      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === selector);\n    };\n    return { matcher: strictTextNodeMatcher, kind: "strict" };\n  }\n  selector = selector.toLowerCase();\n  return { kind: "lax", matcher: (elementText2) => elementText2.normalized.toLowerCase().includes(selector) };\n}\nvar ExpectedTextMatcher = class {\n  constructor(expected) {\n    this._normalizeWhiteSpace = expected.normalizeWhiteSpace;\n    this._ignoreCase = expected.ignoreCase;\n    this._string = expected.matchSubstring ? void 0 : this.normalize(expected.string);\n    this._substring = expected.matchSubstring ? this.normalize(expected.string) : void 0;\n    if (expected.regexSource) {\n      const flags = new Set((expected.regexFlags || "").split(""));\n      if (expected.ignoreCase === false)\n        flags.delete("i");\n      if (expected.ignoreCase === true)\n        flags.add("i");\n      this._regex = new RegExp(expected.regexSource, [...flags].join(""));\n    }\n  }\n  matches(text) {\n    if (!this._regex)\n      text = this.normalize(text);\n    if (this._string !== void 0)\n      return text === this._string;\n    if (this._substring !== void 0)\n      return text.includes(this._substring);\n    if (this._regex)\n      return !!this._regex.test(text);\n    return false;\n  }\n  matchesClassList(injectedScript, classList, partial) {\n    if (partial) {\n      if (this._regex)\n        throw injectedScript.createStacklessError("Partial matching does not support regular expressions. Please provide a string value.");\n      return this._string.split(/\\s+/g).filter(Boolean).every((className) => classList.contains(className));\n    }\n    return this.matches(classList.toString());\n  }\n  normalize(s) {\n    if (!s)\n      return s;\n    if (this._normalizeWhiteSpace)\n      s = normalizeWhiteSpace(s);\n    if (this._ignoreCase)\n      s = s.toLocaleLowerCase();\n    return s;\n  }\n};\nfunction deepEquals(a, b) {\n  if (a === b)\n    return true;\n  if (a && b && typeof a === "object" && typeof b === "object") {\n    if (a.constructor !== b.constructor)\n      return false;\n    if (Array.isArray(a)) {\n      if (a.length !== b.length)\n        return false;\n      for (let i = 0; i < a.length; ++i) {\n        if (!deepEquals(a[i], b[i]))\n          return false;\n      }\n      return true;\n    }\n    if (a instanceof RegExp)\n      return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString)\n      return a.toString() === b.toString();\n    const keys = Object.keys(a);\n    if (keys.length !== Object.keys(b).length)\n      return false;\n    for (let i = 0; i < keys.length; ++i) {\n      if (!b.hasOwnProperty(keys[i]))\n        return false;\n    }\n    for (const key of keys) {\n      if (!deepEquals(a[key], b[key]))\n        return false;\n    }\n    return true;\n  }\n  if (typeof a === "number" && typeof b === "number")\n    return isNaN(a) && isNaN(b);\n  return false;\n}\n';
	return injectedScriptSource;
}

var dom;
var hasRequiredDom;

function requireDom () {
	if (hasRequiredDom) return dom;
	hasRequiredDom = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var dom_exports = {};
	__export(dom_exports, {
	  ElementHandle: () => ElementHandle,
	  FrameExecutionContext: () => FrameExecutionContext,
	  NonRecoverableDOMError: () => NonRecoverableDOMError,
	  assertDone: () => assertDone,
	  isNonRecoverableDOMError: () => isNonRecoverableDOMError,
	  kUnableToAdoptErrorMessage: () => kUnableToAdoptErrorMessage,
	  throwElementIsNotAttached: () => throwElementIsNotAttached,
	  throwRetargetableDOMError: () => throwRetargetableDOMError
	});
	dom = __toCommonJS(dom_exports);
	var import_fs = __toESM(require$$0$4);
	var js = __toESM(requireJavascript$1());
	var import_progress = requireProgress();
	var import_utils = requireUtils();
	var import_fileUploadUtils = requireFileUploadUtils();
	var import_protocolError = requireProtocolError();
	var injectedScriptSource = __toESM(requireInjectedScriptSource());
	class NonRecoverableDOMError extends Error {
	}
	function isNonRecoverableDOMError(error) {
	  return error instanceof NonRecoverableDOMError;
	}
	class FrameExecutionContext extends js.ExecutionContext {
	  constructor(delegate, frame, world) {
	    super(frame, delegate, world || "content-script");
	    this.frame = frame;
	    this.world = world;
	  }
	  adoptIfNeeded(handle) {
	    if (handle instanceof ElementHandle && handle._context !== this)
	      return this.frame._page._delegate.adoptElementHandle(handle, this);
	    return null;
	  }
	  async evaluate(pageFunction, arg) {
	    return js.evaluate(this, true, pageFunction, arg);
	  }
	  async evaluateHandle(pageFunction, arg) {
	    return js.evaluate(this, false, pageFunction, arg);
	  }
	  async evaluateExpression(expression, options, arg) {
	    return js.evaluateExpression(this, expression, { ...options, returnByValue: true }, arg);
	  }
	  async evaluateExpressionHandle(expression, options, arg) {
	    return js.evaluateExpression(this, expression, { ...options, returnByValue: false }, arg);
	  }
	  injectedScript() {
	    if (!this._injectedScriptPromise) {
	      const custom = [];
	      const selectorsRegistry = this.frame._page.context().selectors();
	      for (const [name, { source: source2 }] of selectorsRegistry._engines)
	        custom.push(`{ name: '${name}', engine: (${source2}) }`);
	      const sdkLanguage = this.frame.attribution.playwright.options.sdkLanguage;
	      const source = `
        (() => {
        const module = {};
        ${injectedScriptSource.source}
        return new (module.exports.InjectedScript())(
          globalThis,
          ${(0, import_utils.isUnderTest)()},
          "${sdkLanguage}",
          ${JSON.stringify(selectorsRegistry.testIdAttributeName())},
          ${this.frame._page._delegate.rafCountForStablePosition()},
          "${this.frame._page._browserContext._browser.options.name}",
          ${process.env.PLAYWRIGHT_INPUT_FILE_TEXTBOX ? "true" : "false"},
          [${custom.join(",\n")}]
        );
        })();
      `;
	      this._injectedScriptPromise = this.rawEvaluateHandle(source).then((handle) => {
	        handle._setPreview("InjectedScript");
	        return handle;
	      });
	    }
	    return this._injectedScriptPromise;
	  }
	}
	class ElementHandle extends js.JSHandle {
	  constructor(context, objectId) {
	    super(context, "node", void 0, objectId);
	    this.__elementhandle = true;
	    this._page = context.frame._page;
	    this._frame = context.frame;
	    this._initializePreview().catch((e) => {
	    });
	  }
	  async _initializePreview() {
	    const utility = await this._context.injectedScript();
	    this._setPreview(await utility.evaluate((injected, e) => "JSHandle@" + injected.previewNode(e), this));
	  }
	  asElement() {
	    return this;
	  }
	  async evaluateInUtility(pageFunction, arg) {
	    try {
	      const utility = await this._frame._utilityContext();
	      return await utility.evaluate(pageFunction, [await utility.injectedScript(), this, arg]);
	    } catch (e) {
	      if (js.isJavaScriptErrorInEvaluate(e) || (0, import_protocolError.isSessionClosedError)(e))
	        throw e;
	      return "error:notconnected";
	    }
	  }
	  async evaluateHandleInUtility(pageFunction, arg) {
	    try {
	      const utility = await this._frame._utilityContext();
	      return await utility.evaluateHandle(pageFunction, [await utility.injectedScript(), this, arg]);
	    } catch (e) {
	      if (js.isJavaScriptErrorInEvaluate(e) || (0, import_protocolError.isSessionClosedError)(e))
	        throw e;
	      return "error:notconnected";
	    }
	  }
	  async ownerFrame() {
	    const frameId = await this._page._delegate.getOwnerFrame(this);
	    if (!frameId)
	      return null;
	    const frame = this._page._frameManager.frame(frameId);
	    if (frame)
	      return frame;
	    for (const page of this._page._browserContext.pages()) {
	      const frame2 = page._frameManager.frame(frameId);
	      if (frame2)
	        return frame2;
	    }
	    return null;
	  }
	  async isIframeElement() {
	    return this.evaluateInUtility(([injected, node]) => node && (node.nodeName === "IFRAME" || node.nodeName === "FRAME"), {});
	  }
	  async contentFrame() {
	    const isFrameElement = throwRetargetableDOMError(await this.isIframeElement());
	    if (!isFrameElement)
	      return null;
	    return this._page._delegate.getContentFrame(this);
	  }
	  async generateLocatorString() {
	    const selector = await this.evaluateInUtility(async ([injected, node]) => {
	      return injected.generateSelectorSimple(node);
	    }, {});
	    if (selector === "error:notconnected")
	      return;
	    return (0, import_utils.asLocator)("javascript", selector);
	  }
	  async getAttribute(metadata, name) {
	    return this._frame.getAttribute(metadata, ":scope", name, {}, this);
	  }
	  async inputValue(metadata) {
	    return this._frame.inputValue(metadata, ":scope", {}, this);
	  }
	  async textContent(metadata) {
	    return this._frame.textContent(metadata, ":scope", {}, this);
	  }
	  async innerText(metadata) {
	    return this._frame.innerText(metadata, ":scope", {}, this);
	  }
	  async innerHTML(metadata) {
	    return this._frame.innerHTML(metadata, ":scope", {}, this);
	  }
	  async dispatchEvent(metadata, type, eventInit = {}) {
	    return this._frame.dispatchEvent(metadata, ":scope", type, eventInit, {}, this);
	  }
	  async _scrollRectIntoViewIfNeeded(rect) {
	    return await this._page._delegate.scrollRectIntoViewIfNeeded(this, rect);
	  }
	  async _waitAndScrollIntoViewIfNeeded(progress, waitForVisible) {
	    const result = await this._retryAction(progress, "scroll into view", async () => {
	      progress.log(`  waiting for element to be stable`);
	      const waitResult = await this.evaluateInUtility(async ([injected, node, { waitForVisible: waitForVisible2 }]) => {
	        return await injected.checkElementStates(node, waitForVisible2 ? ["visible", "stable"] : ["stable"]);
	      }, { waitForVisible });
	      if (waitResult)
	        return waitResult;
	      return await this._scrollRectIntoViewIfNeeded();
	    }, {});
	    assertDone(throwRetargetableDOMError(result));
	  }
	  async scrollIntoViewIfNeeded(metadata, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(
	      (progress) => this._waitAndScrollIntoViewIfNeeded(
	        progress,
	        false
	        /* waitForVisible */
	      ),
	      this._page._timeoutSettings.timeout(options)
	    );
	  }
	  async _clickablePoint() {
	    const intersectQuadWithViewport = (quad) => {
	      return quad.map((point) => ({
	        x: Math.min(Math.max(point.x, 0), metrics.width),
	        y: Math.min(Math.max(point.y, 0), metrics.height)
	      }));
	    };
	    const computeQuadArea = (quad) => {
	      let area = 0;
	      for (let i = 0; i < quad.length; ++i) {
	        const p1 = quad[i];
	        const p2 = quad[(i + 1) % quad.length];
	        area += (p1.x * p2.y - p2.x * p1.y) / 2;
	      }
	      return Math.abs(area);
	    };
	    const [quads, metrics] = await Promise.all([
	      this._page._delegate.getContentQuads(this),
	      this._page.mainFrame()._utilityContext().then((utility) => utility.evaluate(() => ({ width: innerWidth, height: innerHeight })))
	    ]);
	    if (quads === "error:notconnected")
	      return quads;
	    if (!quads || !quads.length)
	      return "error:notvisible";
	    const filtered = quads.map((quad) => intersectQuadWithViewport(quad)).filter((quad) => computeQuadArea(quad) > 0.99);
	    if (!filtered.length)
	      return "error:notinviewport";
	    if (this._page._browserContext._browser.options.name === "firefox") {
	      for (const quad of filtered) {
	        const integerPoint = findIntegerPointInsideQuad(quad);
	        if (integerPoint)
	          return integerPoint;
	      }
	    }
	    return quadMiddlePoint(filtered[0]);
	  }
	  async _offsetPoint(offset) {
	    const [box, border] = await Promise.all([
	      this.boundingBox(),
	      this.evaluateInUtility(([injected, node]) => injected.getElementBorderWidth(node), {}).catch((e) => {
	      })
	    ]);
	    if (!box || !border)
	      return "error:notvisible";
	    if (border === "error:notconnected")
	      return border;
	    return {
	      x: box.x + border.left + offset.x,
	      y: box.y + border.top + offset.y
	    };
	  }
	  async _retryAction(progress, actionName, action, options) {
	    let retry = 0;
	    const waitTime = [0, 20, 100, 100, 500];
	    while (progress.isRunning()) {
	      if (retry) {
	        progress.log(`retrying ${actionName} action${options.trial ? " (trial run)" : ""}`);
	        const timeout = waitTime[Math.min(retry - 1, waitTime.length - 1)];
	        if (timeout) {
	          progress.log(`  waiting ${timeout}ms`);
	          const result2 = await this.evaluateInUtility(([injected, node, timeout2]) => new Promise((f) => setTimeout(f, timeout2)), timeout);
	          if (result2 === "error:notconnected")
	            return result2;
	        }
	      } else {
	        progress.log(`attempting ${actionName} action${options.trial ? " (trial run)" : ""}`);
	      }
	      if (!options.skipActionPreChecks && !options.force)
	        await this._frame._page.performActionPreChecks(progress);
	      const result = await action(retry);
	      ++retry;
	      if (result === "error:notvisible") {
	        if (options.force)
	          throw new NonRecoverableDOMError("Element is not visible");
	        progress.log("  element is not visible");
	        continue;
	      }
	      if (result === "error:notinviewport") {
	        if (options.force)
	          throw new NonRecoverableDOMError("Element is outside of the viewport");
	        progress.log("  element is outside of the viewport");
	        continue;
	      }
	      if (result === "error:optionsnotfound") {
	        progress.log("  did not find some options");
	        continue;
	      }
	      if (typeof result === "object" && "hitTargetDescription" in result) {
	        progress.log(`  ${result.hitTargetDescription} intercepts pointer events`);
	        continue;
	      }
	      if (typeof result === "object" && "missingState" in result) {
	        progress.log(`  element is not ${result.missingState}`);
	        continue;
	      }
	      return result;
	    }
	    return "done";
	  }
	  async _retryPointerAction(progress, actionName, waitForEnabled, action, options) {
	    const skipActionPreChecks = actionName === "move and up";
	    return await this._retryAction(progress, actionName, async (retry) => {
	      const scrollOptions = [
	        void 0,
	        { block: "end", inline: "end" },
	        { block: "center", inline: "center" },
	        { block: "start", inline: "start" }
	      ];
	      const forceScrollOptions = scrollOptions[retry % scrollOptions.length];
	      return await this._performPointerAction(progress, actionName, waitForEnabled, action, forceScrollOptions, options);
	    }, { ...options, skipActionPreChecks });
	  }
	  async _performPointerAction(progress, actionName, waitForEnabled, action, forceScrollOptions, options) {
	    const { force = false, position } = options;
	    const doScrollIntoView = async () => {
	      if (forceScrollOptions) {
	        return await this.evaluateInUtility(([injected, node, options2]) => {
	          if (node.nodeType === 1)
	            node.scrollIntoView(options2);
	          return "done";
	        }, forceScrollOptions);
	      }
	      return await this._scrollRectIntoViewIfNeeded(position ? { x: position.x, y: position.y, width: 0, height: 0 } : void 0);
	    };
	    if (this._frame.parentFrame()) {
	      progress.throwIfAborted();
	      await doScrollIntoView().catch(() => {
	      });
	    }
	    if (options.__testHookBeforeStable)
	      await options.__testHookBeforeStable();
	    if (!force) {
	      const elementStates = waitForEnabled ? ["visible", "enabled", "stable"] : ["visible", "stable"];
	      progress.log(`  waiting for element to be ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
	      const result = await this.evaluateInUtility(async ([injected, node, { elementStates: elementStates2 }]) => {
	        return await injected.checkElementStates(node, elementStates2);
	      }, { elementStates });
	      if (result)
	        return result;
	      progress.log(`  element is ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
	    }
	    if (options.__testHookAfterStable)
	      await options.__testHookAfterStable();
	    progress.log("  scrolling into view if needed");
	    progress.throwIfAborted();
	    const scrolled = await doScrollIntoView();
	    if (scrolled !== "done")
	      return scrolled;
	    progress.log("  done scrolling");
	    const maybePoint = position ? await this._offsetPoint(position) : await this._clickablePoint();
	    if (typeof maybePoint === "string")
	      return maybePoint;
	    const point = roundPoint(maybePoint);
	    progress.metadata.point = point;
	    await this.instrumentation.onBeforeInputAction(this, progress.metadata);
	    let hitTargetInterceptionHandle;
	    if (force) {
	      progress.log(`  forcing action`);
	    } else {
	      if (options.__testHookBeforeHitTarget)
	        await options.__testHookBeforeHitTarget();
	      const frameCheckResult = await this._checkFrameIsHitTarget(point);
	      if (frameCheckResult === "error:notconnected" || "hitTargetDescription" in frameCheckResult)
	        return frameCheckResult;
	      const hitPoint = frameCheckResult.framePoint;
	      const actionType = actionName === "move and up" ? "drag" : actionName === "hover" || actionName === "tap" ? actionName : "mouse";
	      const handle = await this.evaluateHandleInUtility(([injected, node, { actionType: actionType2, hitPoint: hitPoint2, trial }]) => injected.setupHitTargetInterceptor(node, actionType2, hitPoint2, trial), { actionType, hitPoint, trial: !!options.trial });
	      if (handle === "error:notconnected")
	        return handle;
	      if (!handle._objectId) {
	        const error = handle.rawValue();
	        if (error === "error:notconnected")
	          return error;
	        return { hitTargetDescription: error };
	      }
	      hitTargetInterceptionHandle = handle;
	      progress.cleanupWhenAborted(() => {
	        hitTargetInterceptionHandle.evaluate((h) => h.stop()).catch((e) => {
	        });
	        hitTargetInterceptionHandle.dispose();
	      });
	    }
	    const actionResult = await this._page._frameManager.waitForSignalsCreatedBy(progress, options.waitAfter === true, async () => {
	      if (options.__testHookBeforePointerAction)
	        await options.__testHookBeforePointerAction();
	      progress.throwIfAborted();
	      let restoreModifiers;
	      if (options && options.modifiers)
	        restoreModifiers = await this._page.keyboard.ensureModifiers(options.modifiers);
	      progress.log(`  performing ${actionName} action`);
	      await action(point);
	      if (restoreModifiers)
	        await this._page.keyboard.ensureModifiers(restoreModifiers);
	      if (hitTargetInterceptionHandle) {
	        const stopHitTargetInterception = this._frame.raceAgainstEvaluationStallingEvents(() => {
	          return hitTargetInterceptionHandle.evaluate((h) => h.stop());
	        }).catch((e) => "done").finally(() => {
	          hitTargetInterceptionHandle?.dispose();
	        });
	        if (options.waitAfter !== false) {
	          const hitTargetResult = await stopHitTargetInterception;
	          if (hitTargetResult !== "done")
	            return hitTargetResult;
	        }
	      }
	      progress.log(`  ${options.trial ? "trial " : ""}${actionName} action done`);
	      progress.log("  waiting for scheduled navigations to finish");
	      if (options.__testHookAfterPointerAction)
	        await options.__testHookAfterPointerAction();
	      return "done";
	    });
	    if (actionResult !== "done")
	      return actionResult;
	    progress.log("  navigations have finished");
	    return "done";
	  }
	  async _markAsTargetElement(metadata) {
	    if (!metadata.id)
	      return;
	    await this.evaluateInUtility(([injected, node, callId]) => {
	      if (node.nodeType === 1)
	        injected.markTargetElements(/* @__PURE__ */ new Set([node]), callId);
	    }, metadata.id);
	  }
	  async hover(metadata, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._hover(progress, options);
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  _hover(progress, options) {
	    return this._retryPointerAction(progress, "hover", false, (point) => this._page.mouse.move(point.x, point.y), { ...options, waitAfter: "disabled" });
	  }
	  async click(metadata, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._click(progress, { ...options, waitAfter: !options.noWaitAfter });
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  _click(progress, options) {
	    return this._retryPointerAction(progress, "click", true, (point) => this._page.mouse.click(point.x, point.y, options), options);
	  }
	  async dblclick(metadata, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._dblclick(progress, options);
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  _dblclick(progress, options) {
	    return this._retryPointerAction(progress, "dblclick", true, (point) => this._page.mouse.dblclick(point.x, point.y, options), { ...options, waitAfter: "disabled" });
	  }
	  async tap(metadata, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._tap(progress, options);
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  _tap(progress, options) {
	    return this._retryPointerAction(progress, "tap", true, (point) => this._page.touchscreen.tap(point.x, point.y), { ...options, waitAfter: "disabled" });
	  }
	  async selectOption(metadata, elements, values, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._selectOption(progress, elements, values, options);
	      return throwRetargetableDOMError(result);
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async _selectOption(progress, elements, values, options) {
	    let resultingOptions = [];
	    const result = await this._retryAction(progress, "select option", async () => {
	      await this.instrumentation.onBeforeInputAction(this, progress.metadata);
	      if (!options.force)
	        progress.log(`  waiting for element to be visible and enabled`);
	      const optionsToSelect = [...elements, ...values];
	      const result2 = await this.evaluateInUtility(async ([injected, node, { optionsToSelect: optionsToSelect2, force }]) => {
	        if (!force) {
	          const checkResult = await injected.checkElementStates(node, ["visible", "enabled"]);
	          if (checkResult)
	            return checkResult;
	        }
	        return injected.selectOptions(node, optionsToSelect2);
	      }, { optionsToSelect, force: options.force });
	      if (Array.isArray(result2)) {
	        progress.log("  selected specified option(s)");
	        resultingOptions = result2;
	        return "done";
	      }
	      return result2;
	    }, options);
	    if (result === "error:notconnected")
	      return result;
	    return resultingOptions;
	  }
	  async fill(metadata, value, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._fill(progress, value, options);
	      assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async _fill(progress, value, options) {
	    progress.log(`  fill("${value}")`);
	    return await this._retryAction(progress, "fill", async () => {
	      await this.instrumentation.onBeforeInputAction(this, progress.metadata);
	      if (!options.force)
	        progress.log("  waiting for element to be visible, enabled and editable");
	      const result = await this.evaluateInUtility(async ([injected, node, { value: value2, force }]) => {
	        if (!force) {
	          const checkResult = await injected.checkElementStates(node, ["visible", "enabled", "editable"]);
	          if (checkResult)
	            return checkResult;
	        }
	        return injected.fill(node, value2);
	      }, { value, force: options.force });
	      progress.throwIfAborted();
	      if (result === "needsinput") {
	        if (value)
	          await this._page.keyboard.insertText(value);
	        else
	          await this._page.keyboard.press("Delete");
	        return "done";
	      } else {
	        return result;
	      }
	    }, options);
	  }
	  async selectText(metadata, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      const result = await this._retryAction(progress, "selectText", async () => {
	        if (!options.force)
	          progress.log("  waiting for element to be visible");
	        return await this.evaluateInUtility(async ([injected, node, { force }]) => {
	          if (!force) {
	            const checkResult = await injected.checkElementStates(node, ["visible"]);
	            if (checkResult)
	              return checkResult;
	          }
	          return injected.selectText(node);
	        }, { force: options.force });
	      }, options);
	      assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async setInputFiles(metadata, params) {
	    const inputFileItems = await (0, import_fileUploadUtils.prepareFilesForUpload)(this._frame, params);
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._setInputFiles(progress, inputFileItems);
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(params));
	  }
	  async _setInputFiles(progress, items) {
	    const { filePayloads, localPaths, localDirectory } = items;
	    const multiple = filePayloads && filePayloads.length > 1 || localPaths && localPaths.length > 1;
	    const result = await this.evaluateHandleInUtility(([injected, node, { multiple: multiple2, directoryUpload }]) => {
	      const element = injected.retarget(node, "follow-label");
	      if (!element)
	        return;
	      if (element.tagName !== "INPUT")
	        throw injected.createStacklessError("Node is not an HTMLInputElement");
	      const inputElement = element;
	      if (multiple2 && !inputElement.multiple && !inputElement.webkitdirectory)
	        throw injected.createStacklessError("Non-multiple file input can only accept single file");
	      if (directoryUpload && !inputElement.webkitdirectory)
	        throw injected.createStacklessError("File input does not support directories, pass individual files instead");
	      if (!directoryUpload && inputElement.webkitdirectory)
	        throw injected.createStacklessError("[webkitdirectory] input requires passing a path to a directory");
	      return inputElement;
	    }, { multiple, directoryUpload: !!localDirectory });
	    if (result === "error:notconnected" || !result.asElement())
	      return "error:notconnected";
	    const retargeted = result.asElement();
	    await this.instrumentation.onBeforeInputAction(this, progress.metadata);
	    progress.throwIfAborted();
	    if (localPaths || localDirectory) {
	      const localPathsOrDirectory = localDirectory ? [localDirectory] : localPaths;
	      await Promise.all(localPathsOrDirectory.map((localPath) => import_fs.default.promises.access(localPath, import_fs.default.constants.F_OK)));
	      const waitForInputEvent = localDirectory ? this.evaluate((node) => new Promise((fulfill) => {
	        node.addEventListener("input", fulfill, { once: true });
	      })).catch(() => {
	      }) : Promise.resolve();
	      await this._page._delegate.setInputFilePaths(retargeted, localPathsOrDirectory);
	      await waitForInputEvent;
	    } else {
	      await retargeted.evaluateInUtility(([injected, node, files]) => injected.setInputFiles(node, files), filePayloads);
	    }
	    return "done";
	  }
	  async focus(metadata) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    await controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._focus(progress);
	      return assertDone(throwRetargetableDOMError(result));
	    }, 0);
	  }
	  async _focus(progress, resetSelectionIfNotFocused) {
	    progress.throwIfAborted();
	    return await this.evaluateInUtility(([injected, node, resetSelectionIfNotFocused2]) => injected.focusNode(node, resetSelectionIfNotFocused2), resetSelectionIfNotFocused);
	  }
	  async _blur(progress) {
	    progress.throwIfAborted();
	    return await this.evaluateInUtility(([injected, node]) => injected.blurNode(node), {});
	  }
	  async type(metadata, text, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._type(progress, text, options);
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async _type(progress, text, options) {
	    progress.log(`elementHandle.type("${text}")`);
	    await this.instrumentation.onBeforeInputAction(this, progress.metadata);
	    const result = await this._focus(
	      progress,
	      true
	      /* resetSelectionIfNotFocused */
	    );
	    if (result !== "done")
	      return result;
	    progress.throwIfAborted();
	    await this._page.keyboard.type(text, options);
	    return "done";
	  }
	  async press(metadata, key, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this._markAsTargetElement(metadata);
	      const result = await this._press(progress, key, options);
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async _press(progress, key, options) {
	    progress.log(`elementHandle.press("${key}")`);
	    await this.instrumentation.onBeforeInputAction(this, progress.metadata);
	    return this._page._frameManager.waitForSignalsCreatedBy(progress, !options.noWaitAfter, async () => {
	      const result = await this._focus(
	        progress,
	        true
	        /* resetSelectionIfNotFocused */
	      );
	      if (result !== "done")
	        return result;
	      progress.throwIfAborted();
	      await this._page.keyboard.press(key, options);
	      return "done";
	    });
	  }
	  async check(metadata, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      const result = await this._setChecked(progress, true, options);
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async uncheck(metadata, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      const result = await this._setChecked(progress, false, options);
	      return assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async _setChecked(progress, state, options) {
	    const isChecked = async () => {
	      const result2 = await this.evaluateInUtility(([injected, node]) => injected.elementState(node, "checked"), {});
	      if (result2 === "error:notconnected" || result2.received === "error:notconnected")
	        throwElementIsNotAttached();
	      return result2.matches;
	    };
	    await this._markAsTargetElement(progress.metadata);
	    if (await isChecked() === state)
	      return "done";
	    const result = await this._click(progress, { ...options, waitAfter: "disabled" });
	    if (result !== "done")
	      return result;
	    if (options.trial)
	      return "done";
	    if (await isChecked() !== state)
	      throw new NonRecoverableDOMError("Clicking the checkbox did not change its state");
	    return "done";
	  }
	  async boundingBox() {
	    return this._page._delegate.getBoundingBox(this);
	  }
	  async ariaSnapshot(options) {
	    return await this.evaluateInUtility(([injected, element, options2]) => injected.ariaSnapshot(element, options2), options);
	  }
	  async screenshot(metadata, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(
	      (progress) => this._page._screenshotter.screenshotElement(progress, this, options),
	      this._page._timeoutSettings.timeout(options)
	    );
	  }
	  async querySelector(selector, options) {
	    return this._frame.selectors.query(selector, options, this);
	  }
	  async querySelectorAll(selector) {
	    return this._frame.selectors.queryAll(selector, this);
	  }
	  async evalOnSelector(selector, strict, expression, isFunction, arg) {
	    return this._frame.evalOnSelector(selector, strict, expression, isFunction, arg, this);
	  }
	  async evalOnSelectorAll(selector, expression, isFunction, arg) {
	    return this._frame.evalOnSelectorAll(selector, expression, isFunction, arg, this);
	  }
	  async isVisible(metadata) {
	    return this._frame.isVisible(metadata, ":scope", {}, this);
	  }
	  async isHidden(metadata) {
	    return this._frame.isHidden(metadata, ":scope", {}, this);
	  }
	  async isEnabled(metadata) {
	    return this._frame.isEnabled(metadata, ":scope", {}, this);
	  }
	  async isDisabled(metadata) {
	    return this._frame.isDisabled(metadata, ":scope", {}, this);
	  }
	  async isEditable(metadata) {
	    return this._frame.isEditable(metadata, ":scope", {}, this);
	  }
	  async isChecked(metadata) {
	    return this._frame.isChecked(metadata, ":scope", {}, this);
	  }
	  async waitForElementState(metadata, state, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      const actionName = `wait for ${state}`;
	      const result = await this._retryAction(progress, actionName, async () => {
	        return await this.evaluateInUtility(async ([injected, node, state2]) => {
	          return await injected.checkElementStates(node, [state2]) || "done";
	        }, state);
	      }, {});
	      assertDone(throwRetargetableDOMError(result));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async waitForSelector(metadata, selector, options = {}) {
	    return this._frame.waitForSelector(metadata, selector, options, this);
	  }
	  async _adoptTo(context) {
	    if (this._context !== context) {
	      const adopted = await this._page._delegate.adoptElementHandle(this, context);
	      this.dispose();
	      return adopted;
	    }
	    return this;
	  }
	  async _checkFrameIsHitTarget(point) {
	    let frame = this._frame;
	    const data = [];
	    while (frame.parentFrame()) {
	      const frameElement = await frame.frameElement();
	      const box = await frameElement.boundingBox();
	      const style = await frameElement.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e) => "error:notconnected");
	      if (!box || style === "error:notconnected")
	        return "error:notconnected";
	      if (style === "transformed") {
	        return { framePoint: void 0 };
	      }
	      const pointInFrame = { x: point.x - box.x - style.left, y: point.y - box.y - style.top };
	      data.push({ frame, frameElement, pointInFrame });
	      frame = frame.parentFrame();
	    }
	    data.push({ frame, frameElement: null, pointInFrame: point });
	    for (let i = data.length - 1; i > 0; i--) {
	      const element = data[i - 1].frameElement;
	      const point2 = data[i].pointInFrame;
	      const hitTargetResult = await element.evaluateInUtility(([injected, element2, hitPoint]) => {
	        return injected.expectHitTarget(hitPoint, element2);
	      }, point2);
	      if (hitTargetResult !== "done")
	        return hitTargetResult;
	    }
	    return { framePoint: data[0].pointInFrame };
	  }
	}
	function throwRetargetableDOMError(result) {
	  if (result === "error:notconnected")
	    throwElementIsNotAttached();
	  return result;
	}
	function throwElementIsNotAttached() {
	  throw new Error("Element is not attached to the DOM");
	}
	function assertDone(result) {
	}
	function roundPoint(point) {
	  return {
	    x: (point.x * 100 | 0) / 100,
	    y: (point.y * 100 | 0) / 100
	  };
	}
	function quadMiddlePoint(quad) {
	  const result = { x: 0, y: 0 };
	  for (const point of quad) {
	    result.x += point.x / 4;
	    result.y += point.y / 4;
	  }
	  return result;
	}
	function triangleArea(p1, p2, p3) {
	  return Math.abs(p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y)) / 2;
	}
	function isPointInsideQuad(point, quad) {
	  const area1 = triangleArea(point, quad[0], quad[1]) + triangleArea(point, quad[1], quad[2]) + triangleArea(point, quad[2], quad[3]) + triangleArea(point, quad[3], quad[0]);
	  const area2 = triangleArea(quad[0], quad[1], quad[2]) + triangleArea(quad[1], quad[2], quad[3]);
	  if (Math.abs(area1 - area2) > 0.1)
	    return false;
	  return point.x < Math.max(quad[0].x, quad[1].x, quad[2].x, quad[3].x) && point.y < Math.max(quad[0].y, quad[1].y, quad[2].y, quad[3].y);
	}
	function findIntegerPointInsideQuad(quad) {
	  const point = quadMiddlePoint(quad);
	  point.x = Math.floor(point.x);
	  point.y = Math.floor(point.y);
	  if (isPointInsideQuad(point, quad))
	    return point;
	  point.x += 1;
	  if (isPointInsideQuad(point, quad))
	    return point;
	  point.y += 1;
	  if (isPointInsideQuad(point, quad))
	    return point;
	  point.x -= 1;
	  if (isPointInsideQuad(point, quad))
	    return point;
	}
	const kUnableToAdoptErrorMessage = "Unable to adopt element handle from a different document";
	return dom;
}

var frameSelectors;
var hasRequiredFrameSelectors;

function requireFrameSelectors () {
	if (hasRequiredFrameSelectors) return frameSelectors;
	hasRequiredFrameSelectors = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var frameSelectors_exports = {};
	__export(frameSelectors_exports, {
	  FrameSelectors: () => FrameSelectors
	});
	frameSelectors = __toCommonJS(frameSelectors_exports);
	var import_utils = requireUtils();
	var import_selectorParser = requireSelectorParser();
	class FrameSelectors {
	  constructor(frame) {
	    this.frame = frame;
	  }
	  _parseSelector(selector, options) {
	    const strict = typeof options?.strict === "boolean" ? options.strict : !!this.frame._page.context()._options.strictSelectors;
	    return this.frame._page.context().selectors().parseSelector(selector, strict);
	  }
	  async query(selector, options, scope) {
	    const resolved = await this.resolveInjectedForSelector(selector, options, scope);
	    if (!resolved)
	      return null;
	    const handle = await resolved.injected.evaluateHandle((injected, { info, scope: scope2 }) => {
	      return injected.querySelector(info.parsed, scope2 || document, info.strict);
	    }, { info: resolved.info, scope: resolved.scope });
	    const elementHandle = handle.asElement();
	    if (!elementHandle) {
	      handle.dispose();
	      return null;
	    }
	    return adoptIfNeeded(elementHandle, await resolved.frame._mainContext());
	  }
	  async queryArrayInMainWorld(selector, scope) {
	    const resolved = await this.resolveInjectedForSelector(selector, { mainWorld: true }, scope);
	    if (!resolved)
	      throw new Error(`Failed to find frame for selector "${selector}"`);
	    return await resolved.injected.evaluateHandle((injected, { info, scope: scope2 }) => {
	      return injected.querySelectorAll(info.parsed, scope2 || document);
	    }, { info: resolved.info, scope: resolved.scope });
	  }
	  async queryCount(selector) {
	    const resolved = await this.resolveInjectedForSelector(selector);
	    if (!resolved)
	      throw new Error(`Failed to find frame for selector "${selector}"`);
	    return await resolved.injected.evaluate((injected, { info }) => {
	      return injected.querySelectorAll(info.parsed, document).length;
	    }, { info: resolved.info });
	  }
	  async queryAll(selector, scope) {
	    const resolved = await this.resolveInjectedForSelector(selector, {}, scope);
	    if (!resolved)
	      return [];
	    const arrayHandle = await resolved.injected.evaluateHandle((injected, { info, scope: scope2 }) => {
	      return injected.querySelectorAll(info.parsed, scope2 || document);
	    }, { info: resolved.info, scope: resolved.scope });
	    const properties = await arrayHandle.getProperties();
	    arrayHandle.dispose();
	    const targetContext = await resolved.frame._mainContext();
	    const result = [];
	    for (const property of properties.values()) {
	      const elementHandle = property.asElement();
	      if (elementHandle)
	        result.push(adoptIfNeeded(elementHandle, targetContext));
	      else
	        property.dispose();
	    }
	    return Promise.all(result);
	  }
	  async resolveFrameForSelector(selector, options = {}, scope) {
	    let frame = this.frame;
	    const frameChunks = (0, import_selectorParser.splitSelectorByFrame)(selector);
	    for (const chunk of frameChunks) {
	      (0, import_selectorParser.visitAllSelectorParts)(chunk, (part, nested) => {
	        if (nested && part.name === "internal:control" && part.body === "enter-frame") {
	          const locator = (0, import_utils.asLocator)(this.frame._page.attribution.playwright.options.sdkLanguage, selector);
	          throw new import_selectorParser.InvalidSelectorError(`Frame locators are not allowed inside composite locators, while querying "${locator}"`);
	        }
	      });
	    }
	    for (let i = 0; i < frameChunks.length - 1; ++i) {
	      const info = this._parseSelector(frameChunks[i], options);
	      const context = await frame._context(info.world);
	      const injectedScript = await context.injectedScript();
	      const handle = await injectedScript.evaluateHandle((injected, { info: info2, scope: scope2, selectorString }) => {
	        const element2 = injected.querySelector(info2.parsed, scope2 || document, info2.strict);
	        if (element2 && element2.nodeName !== "IFRAME" && element2.nodeName !== "FRAME")
	          throw injected.createStacklessError(`Selector "${selectorString}" resolved to ${injected.previewNode(element2)}, <iframe> was expected`);
	        return element2;
	      }, { info, scope: i === 0 ? scope : void 0, selectorString: (0, import_selectorParser.stringifySelector)(info.parsed) });
	      const element = handle.asElement();
	      if (!element)
	        return null;
	      const maybeFrame = await frame._page._delegate.getContentFrame(element);
	      element.dispose();
	      if (!maybeFrame)
	        return null;
	      frame = maybeFrame;
	    }
	    if (frame !== this.frame)
	      scope = void 0;
	    return { frame, info: frame.selectors._parseSelector(frameChunks[frameChunks.length - 1], options), scope };
	  }
	  async resolveInjectedForSelector(selector, options, scope) {
	    const resolved = await this.resolveFrameForSelector(selector, options, scope);
	    if (!resolved)
	      return;
	    const context = await resolved.frame._context(options?.mainWorld ? "main" : resolved.info.world);
	    const injected = await context.injectedScript();
	    return { injected, info: resolved.info, frame: resolved.frame, scope: resolved.scope };
	  }
	}
	async function adoptIfNeeded(handle, context) {
	  if (handle._context === context)
	    return handle;
	  const adopted = await handle._page._delegate.adoptElementHandle(handle, context);
	  handle.dispose();
	  return adopted;
	}
	return frameSelectors;
}

var helper_1;
var hasRequiredHelper;

function requireHelper () {
	if (hasRequiredHelper) return helper_1;
	hasRequiredHelper = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var helper_exports = {};
	__export(helper_exports, {
	  helper: () => helper
	});
	helper_1 = __toCommonJS(helper_exports);
	var import_debugLogger = requireDebugLogger();
	var import_eventsHelper = requireEventsHelper();
	const MAX_LOG_LENGTH = process.env.MAX_LOG_LENGTH ? +process.env.MAX_LOG_LENGTH : Infinity;
	class Helper {
	  static completeUserURL(urlString) {
	    if (urlString.startsWith("localhost") || urlString.startsWith("127.0.0.1"))
	      urlString = "http://" + urlString;
	    return urlString;
	  }
	  static enclosingIntRect(rect) {
	    const x = Math.floor(rect.x + 1e-3);
	    const y = Math.floor(rect.y + 1e-3);
	    const x2 = Math.ceil(rect.x + rect.width - 1e-3);
	    const y2 = Math.ceil(rect.y + rect.height - 1e-3);
	    return { x, y, width: x2 - x, height: y2 - y };
	  }
	  static enclosingIntSize(size) {
	    return { width: Math.floor(size.width + 1e-3), height: Math.floor(size.height + 1e-3) };
	  }
	  static getViewportSizeFromWindowFeatures(features) {
	    const widthString = features.find((f) => f.startsWith("width="));
	    const heightString = features.find((f) => f.startsWith("height="));
	    const width = widthString ? parseInt(widthString.substring(6), 10) : NaN;
	    const height = heightString ? parseInt(heightString.substring(7), 10) : NaN;
	    if (!Number.isNaN(width) && !Number.isNaN(height))
	      return { width, height };
	    return null;
	  }
	  static waitForEvent(progress, emitter, event, predicate) {
	    const listeners = [];
	    const promise = new Promise((resolve, reject) => {
	      listeners.push(import_eventsHelper.eventsHelper.addEventListener(emitter, event, (eventArg) => {
	        try {
	          if (predicate && !predicate(eventArg))
	            return;
	          import_eventsHelper.eventsHelper.removeEventListeners(listeners);
	          resolve(eventArg);
	        } catch (e) {
	          import_eventsHelper.eventsHelper.removeEventListeners(listeners);
	          reject(e);
	        }
	      }));
	    });
	    const dispose = () => import_eventsHelper.eventsHelper.removeEventListeners(listeners);
	    if (progress)
	      progress.cleanupWhenAborted(dispose);
	    return { promise, dispose };
	  }
	  static secondsToRoundishMillis(value) {
	    return (value * 1e6 | 0) / 1e3;
	  }
	  static millisToRoundishMillis(value) {
	    return (value * 1e3 | 0) / 1e3;
	  }
	  static debugProtocolLogger(protocolLogger) {
	    return (direction, message) => {
	      if (protocolLogger)
	        protocolLogger(direction, message);
	      if (import_debugLogger.debugLogger.isEnabled("protocol")) {
	        let text = JSON.stringify(message);
	        if (text.length > MAX_LOG_LENGTH)
	          text = text.substring(0, MAX_LOG_LENGTH / 2) + " <<<<<( LOG TRUNCATED )>>>>> " + text.substring(text.length - MAX_LOG_LENGTH / 2);
	        import_debugLogger.debugLogger.log("protocol", (direction === "send" ? "SEND \u25BA " : "\u25C0 RECV ") + text);
	      }
	    };
	  }
	  static formatBrowserLogs(logs, disconnectReason) {
	    if (!disconnectReason && !logs.length)
	      return "";
	    return "\n" + (disconnectReason ? disconnectReason + "\n" : "") + logs.join("\n");
	  }
	}
	const helper = Helper;
	return helper_1;
}

var network$1;
var hasRequiredNetwork$1;

function requireNetwork$1 () {
	if (hasRequiredNetwork$1) return network$1;
	hasRequiredNetwork$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var network_exports = {};
	__export(network_exports, {
	  Request: () => Request,
	  Response: () => Response,
	  Route: () => Route,
	  WebSocket: () => WebSocket,
	  filterCookies: () => filterCookies,
	  kMaxCookieExpiresDateInSeconds: () => kMaxCookieExpiresDateInSeconds,
	  mergeHeaders: () => mergeHeaders,
	  parseURL: () => parseURL,
	  rewriteCookies: () => rewriteCookies,
	  singleHeader: () => singleHeader,
	  statusText: () => statusText,
	  stripFragmentFromUrl: () => stripFragmentFromUrl
	});
	network$1 = __toCommonJS(network_exports);
	var import_utils = requireUtils();
	var import_browserContext = requireBrowserContext$1();
	var import_fetch = requireFetch$1();
	var import_instrumentation = requireInstrumentation();
	var import_manualPromise = requireManualPromise();
	function filterCookies(cookies, urls) {
	  const parsedURLs = urls.map((s) => new URL(s));
	  return cookies.filter((c) => {
	    if (!parsedURLs.length)
	      return true;
	    for (const parsedURL of parsedURLs) {
	      let domain = c.domain;
	      if (!domain.startsWith("."))
	        domain = "." + domain;
	      if (!("." + parsedURL.hostname).endsWith(domain))
	        continue;
	      if (!parsedURL.pathname.startsWith(c.path))
	        continue;
	      if (parsedURL.protocol !== "https:" && parsedURL.hostname !== "localhost" && c.secure)
	        continue;
	      return true;
	    }
	    return false;
	  });
	}
	const kMaxCookieExpiresDateInSeconds = 253402300799;
	function rewriteCookies(cookies) {
	  return cookies.map((c) => {
	    (0, import_utils.assert)(c.url || c.domain && c.path, "Cookie should have a url or a domain/path pair");
	    (0, import_utils.assert)(!(c.url && c.domain), "Cookie should have either url or domain");
	    (0, import_utils.assert)(!(c.url && c.path), "Cookie should have either url or path");
	    (0, import_utils.assert)(!(c.expires && c.expires < 0 && c.expires !== -1), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
	    (0, import_utils.assert)(!(c.expires && c.expires > 0 && c.expires > kMaxCookieExpiresDateInSeconds), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
	    const copy = { ...c };
	    if (copy.url) {
	      (0, import_utils.assert)(copy.url !== "about:blank", `Blank page can not have cookie "${c.name}"`);
	      (0, import_utils.assert)(!copy.url.startsWith("data:"), `Data URL page can not have cookie "${c.name}"`);
	      const url = new URL(copy.url);
	      copy.domain = url.hostname;
	      copy.path = url.pathname.substring(0, url.pathname.lastIndexOf("/") + 1);
	      copy.secure = url.protocol === "https:";
	    }
	    return copy;
	  });
	}
	function parseURL(url) {
	  try {
	    return new URL(url);
	  } catch (e) {
	    return null;
	  }
	}
	function stripFragmentFromUrl(url) {
	  if (!url.includes("#"))
	    return url;
	  return url.substring(0, url.indexOf("#"));
	}
	class Request extends import_instrumentation.SdkObject {
	  constructor(context, frame, serviceWorker, redirectedFrom, documentId, url, resourceType, method, postData, headers) {
	    super(frame || context, "request");
	    this._response = null;
	    this._redirectedTo = null;
	    this._failureText = null;
	    this._headersMap = /* @__PURE__ */ new Map();
	    this._frame = null;
	    this._serviceWorker = null;
	    this._rawRequestHeadersPromise = new import_manualPromise.ManualPromise();
	    this._waitForResponsePromise = new import_manualPromise.ManualPromise();
	    this._responseEndTiming = -1;
	    (0, import_utils.assert)(!url.startsWith("data:"), "Data urls should not fire requests");
	    this._context = context;
	    this._frame = frame;
	    this._serviceWorker = serviceWorker;
	    this._redirectedFrom = redirectedFrom;
	    if (redirectedFrom)
	      redirectedFrom._redirectedTo = this;
	    this._documentId = documentId;
	    this._url = stripFragmentFromUrl(url);
	    this._resourceType = resourceType;
	    this._method = method;
	    this._postData = postData;
	    this._headers = headers;
	    this._updateHeadersMap();
	    this._isFavicon = url.endsWith("/favicon.ico") || !!redirectedFrom?._isFavicon;
	  }
	  _setFailureText(failureText) {
	    this._failureText = failureText;
	    this._waitForResponsePromise.resolve(null);
	  }
	  _setOverrides(overrides) {
	    this._overrides = overrides;
	    this._updateHeadersMap();
	  }
	  _updateHeadersMap() {
	    for (const { name, value } of this.headers())
	      this._headersMap.set(name.toLowerCase(), value);
	  }
	  _hasOverrides() {
	    return !!this._overrides;
	  }
	  url() {
	    return this._overrides?.url || this._url;
	  }
	  resourceType() {
	    return this._resourceType;
	  }
	  method() {
	    return this._overrides?.method || this._method;
	  }
	  postDataBuffer() {
	    return this._overrides?.postData || this._postData;
	  }
	  headers() {
	    return this._overrides?.headers || this._headers;
	  }
	  headerValue(name) {
	    return this._headersMap.get(name);
	  }
	  // "null" means no raw headers available - we'll use provisional headers as raw headers.
	  setRawRequestHeaders(headers) {
	    if (!this._rawRequestHeadersPromise.isDone())
	      this._rawRequestHeadersPromise.resolve(headers || this._headers);
	  }
	  async rawRequestHeaders() {
	    return this._overrides?.headers || this._rawRequestHeadersPromise;
	  }
	  response() {
	    return this._waitForResponsePromise;
	  }
	  _existingResponse() {
	    return this._response;
	  }
	  _setResponse(response) {
	    this._response = response;
	    this._waitForResponsePromise.resolve(response);
	  }
	  _finalRequest() {
	    return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
	  }
	  frame() {
	    return this._frame;
	  }
	  serviceWorker() {
	    return this._serviceWorker;
	  }
	  isNavigationRequest() {
	    return !!this._documentId;
	  }
	  redirectedFrom() {
	    return this._redirectedFrom;
	  }
	  failure() {
	    if (this._failureText === null)
	      return null;
	    return {
	      errorText: this._failureText
	    };
	  }
	  // TODO(bidi): remove once post body is available.
	  _setBodySize(size) {
	    this._bodySize = size;
	  }
	  bodySize() {
	    return this._bodySize || this.postDataBuffer()?.length || 0;
	  }
	  async requestHeadersSize() {
	    let headersSize = 4;
	    headersSize += this.method().length;
	    headersSize += new URL(this.url()).pathname.length;
	    headersSize += 8;
	    const headers = await this.rawRequestHeaders();
	    for (const header of headers)
	      headersSize += header.name.length + header.value.length + 4;
	    return headersSize;
	  }
	}
	class Route extends import_instrumentation.SdkObject {
	  constructor(request, delegate) {
	    super(request._frame || request._context, "route");
	    this._handled = false;
	    this._request = request;
	    this._delegate = delegate;
	    this._request._context.addRouteInFlight(this);
	  }
	  request() {
	    return this._request;
	  }
	  async abort(errorCode = "failed") {
	    this._startHandling();
	    this._request._context.emit(import_browserContext.BrowserContext.Events.RequestAborted, this._request);
	    await this._delegate.abort(errorCode);
	    this._endHandling();
	  }
	  async redirectNavigationRequest(url) {
	    this._startHandling();
	    (0, import_utils.assert)(this._request.isNavigationRequest());
	    this._request.frame().redirectNavigation(url, this._request._documentId, this._request.headerValue("referer"));
	  }
	  async fulfill(overrides) {
	    this._startHandling();
	    let body = overrides.body;
	    let isBase64 = overrides.isBase64 || false;
	    if (body === void 0) {
	      if (overrides.fetchResponseUid) {
	        const buffer = this._request._context.fetchRequest.fetchResponses.get(overrides.fetchResponseUid) || import_fetch.APIRequestContext.findResponseBody(overrides.fetchResponseUid);
	        (0, import_utils.assert)(buffer, "Fetch response has been disposed");
	        body = buffer.toString("base64");
	        isBase64 = true;
	      } else {
	        body = "";
	        isBase64 = false;
	      }
	    }
	    const headers = [...overrides.headers || []];
	    this._maybeAddCorsHeaders(headers);
	    this._request._context.emit(import_browserContext.BrowserContext.Events.RequestFulfilled, this._request);
	    await this._delegate.fulfill({
	      status: overrides.status || 200,
	      headers,
	      body,
	      isBase64
	    });
	    this._endHandling();
	  }
	  // See https://github.com/microsoft/playwright/issues/12929
	  _maybeAddCorsHeaders(headers) {
	    const origin = this._request.headerValue("origin");
	    if (!origin)
	      return;
	    const requestUrl = new URL(this._request.url());
	    if (!requestUrl.protocol.startsWith("http"))
	      return;
	    if (requestUrl.origin === origin.trim())
	      return;
	    const corsHeader = headers.find(({ name }) => name === "access-control-allow-origin");
	    if (corsHeader)
	      return;
	    headers.push({ name: "access-control-allow-origin", value: origin });
	    headers.push({ name: "access-control-allow-credentials", value: "true" });
	    headers.push({ name: "vary", value: "Origin" });
	  }
	  async continue(overrides) {
	    this._startHandling();
	    if (overrides.url) {
	      const newUrl = new URL(overrides.url);
	      const oldUrl = new URL(this._request.url());
	      if (oldUrl.protocol !== newUrl.protocol)
	        throw new Error("New URL must have same protocol as overridden URL");
	    }
	    if (overrides.headers)
	      overrides.headers = overrides.headers?.filter((header) => header.name.toLowerCase() !== "cookie");
	    this._request._setOverrides(overrides);
	    if (!overrides.isFallback)
	      this._request._context.emit(import_browserContext.BrowserContext.Events.RequestContinued, this._request);
	    await this._delegate.continue(overrides);
	    this._endHandling();
	  }
	  _startHandling() {
	    (0, import_utils.assert)(!this._handled, "Route is already handled!");
	    this._handled = true;
	  }
	  _endHandling() {
	    this._request._context.removeRouteInFlight(this);
	  }
	}
	class Response extends import_instrumentation.SdkObject {
	  constructor(request, status, statusText2, headers, timing, getResponseBodyCallback, fromServiceWorker, httpVersion) {
	    super(request.frame() || request._context, "response");
	    this._contentPromise = null;
	    this._finishedPromise = new import_manualPromise.ManualPromise();
	    this._headersMap = /* @__PURE__ */ new Map();
	    this._serverAddrPromise = new import_manualPromise.ManualPromise();
	    this._securityDetailsPromise = new import_manualPromise.ManualPromise();
	    this._rawResponseHeadersPromise = new import_manualPromise.ManualPromise();
	    this._encodedBodySizePromise = new import_manualPromise.ManualPromise();
	    this._transferSizePromise = new import_manualPromise.ManualPromise();
	    this._responseHeadersSizePromise = new import_manualPromise.ManualPromise();
	    this._request = request;
	    this._timing = timing;
	    this._status = status;
	    this._statusText = statusText2;
	    this._url = request.url();
	    this._headers = headers;
	    for (const { name, value } of this._headers)
	      this._headersMap.set(name.toLowerCase(), value);
	    this._getResponseBodyCallback = getResponseBodyCallback;
	    this._request._setResponse(this);
	    this._httpVersion = httpVersion;
	    this._fromServiceWorker = fromServiceWorker;
	  }
	  _serverAddrFinished(addr) {
	    this._serverAddrPromise.resolve(addr);
	  }
	  _securityDetailsFinished(securityDetails) {
	    this._securityDetailsPromise.resolve(securityDetails);
	  }
	  _requestFinished(responseEndTiming) {
	    this._request._responseEndTiming = Math.max(responseEndTiming, this._timing.responseStart);
	    if (this._timing.requestStart === -1)
	      this._timing.requestStart = this._request._responseEndTiming;
	    this._finishedPromise.resolve();
	  }
	  _setHttpVersion(httpVersion) {
	    this._httpVersion = httpVersion;
	  }
	  url() {
	    return this._url;
	  }
	  status() {
	    return this._status;
	  }
	  statusText() {
	    return this._statusText;
	  }
	  headers() {
	    return this._headers;
	  }
	  headerValue(name) {
	    return this._headersMap.get(name);
	  }
	  async rawResponseHeaders() {
	    return this._rawResponseHeadersPromise;
	  }
	  // "null" means no raw headers available - we'll use provisional headers as raw headers.
	  setRawResponseHeaders(headers) {
	    if (!this._rawResponseHeadersPromise.isDone())
	      this._rawResponseHeadersPromise.resolve(headers || this._headers);
	  }
	  setTransferSize(size) {
	    this._transferSizePromise.resolve(size);
	  }
	  setEncodedBodySize(size) {
	    this._encodedBodySizePromise.resolve(size);
	  }
	  setResponseHeadersSize(size) {
	    this._responseHeadersSizePromise.resolve(size);
	  }
	  timing() {
	    return this._timing;
	  }
	  async serverAddr() {
	    return await this._serverAddrPromise || null;
	  }
	  async securityDetails() {
	    return await this._securityDetailsPromise || null;
	  }
	  body() {
	    if (!this._contentPromise) {
	      this._contentPromise = this._finishedPromise.then(async () => {
	        if (this._status >= 300 && this._status <= 399)
	          throw new Error("Response body is unavailable for redirect responses");
	        return this._getResponseBodyCallback();
	      });
	    }
	    return this._contentPromise;
	  }
	  request() {
	    return this._request;
	  }
	  frame() {
	    return this._request.frame();
	  }
	  httpVersion() {
	    if (!this._httpVersion)
	      return "HTTP/1.1";
	    if (this._httpVersion === "http/1.1")
	      return "HTTP/1.1";
	    if (this._httpVersion === "h2")
	      return "HTTP/2.0";
	    return this._httpVersion;
	  }
	  fromServiceWorker() {
	    return this._fromServiceWorker;
	  }
	  async responseHeadersSize() {
	    const availableSize = await this._responseHeadersSizePromise;
	    if (availableSize !== null)
	      return availableSize;
	    let headersSize = 4;
	    headersSize += 8;
	    headersSize += 3;
	    headersSize += this.statusText().length;
	    const headers = await this._rawResponseHeadersPromise;
	    for (const header of headers)
	      headersSize += header.name.length + header.value.length + 4;
	    headersSize += 2;
	    return headersSize;
	  }
	  async sizes() {
	    const requestHeadersSize = await this._request.requestHeadersSize();
	    const responseHeadersSize = await this.responseHeadersSize();
	    let encodedBodySize = await this._encodedBodySizePromise;
	    if (encodedBodySize === null) {
	      const headers = await this._rawResponseHeadersPromise;
	      const contentLength = headers.find((h) => h.name.toLowerCase() === "content-length")?.value;
	      encodedBodySize = contentLength ? +contentLength : 0;
	    }
	    let transferSize = await this._transferSizePromise;
	    if (transferSize === null) {
	      transferSize = responseHeadersSize + encodedBodySize;
	    }
	    return {
	      requestBodySize: this._request.bodySize(),
	      requestHeadersSize,
	      responseBodySize: encodedBodySize,
	      responseHeadersSize,
	      transferSize
	    };
	  }
	}
	class WebSocket extends import_instrumentation.SdkObject {
	  constructor(parent, url) {
	    super(parent, "ws");
	    this._notified = false;
	    this._url = url;
	  }
	  static {
	    this.Events = {
	      Close: "close",
	      SocketError: "socketerror",
	      FrameReceived: "framereceived",
	      FrameSent: "framesent"
	    };
	  }
	  markAsNotified() {
	    if (this._notified)
	      return false;
	    this._notified = true;
	    return true;
	  }
	  url() {
	    return this._url;
	  }
	  frameSent(opcode, data) {
	    this.emit(WebSocket.Events.FrameSent, { opcode, data });
	  }
	  frameReceived(opcode, data) {
	    this.emit(WebSocket.Events.FrameReceived, { opcode, data });
	  }
	  error(errorMessage) {
	    this.emit(WebSocket.Events.SocketError, errorMessage);
	  }
	  closed() {
	    this.emit(WebSocket.Events.Close);
	  }
	}
	const STATUS_TEXTS = {
	  "100": "Continue",
	  "101": "Switching Protocols",
	  "102": "Processing",
	  "103": "Early Hints",
	  "200": "OK",
	  "201": "Created",
	  "202": "Accepted",
	  "203": "Non-Authoritative Information",
	  "204": "No Content",
	  "205": "Reset Content",
	  "206": "Partial Content",
	  "207": "Multi-Status",
	  "208": "Already Reported",
	  "226": "IM Used",
	  "300": "Multiple Choices",
	  "301": "Moved Permanently",
	  "302": "Found",
	  "303": "See Other",
	  "304": "Not Modified",
	  "305": "Use Proxy",
	  "306": "Switch Proxy",
	  "307": "Temporary Redirect",
	  "308": "Permanent Redirect",
	  "400": "Bad Request",
	  "401": "Unauthorized",
	  "402": "Payment Required",
	  "403": "Forbidden",
	  "404": "Not Found",
	  "405": "Method Not Allowed",
	  "406": "Not Acceptable",
	  "407": "Proxy Authentication Required",
	  "408": "Request Timeout",
	  "409": "Conflict",
	  "410": "Gone",
	  "411": "Length Required",
	  "412": "Precondition Failed",
	  "413": "Payload Too Large",
	  "414": "URI Too Long",
	  "415": "Unsupported Media Type",
	  "416": "Range Not Satisfiable",
	  "417": "Expectation Failed",
	  "418": "I'm a teapot",
	  "421": "Misdirected Request",
	  "422": "Unprocessable Entity",
	  "423": "Locked",
	  "424": "Failed Dependency",
	  "425": "Too Early",
	  "426": "Upgrade Required",
	  "428": "Precondition Required",
	  "429": "Too Many Requests",
	  "431": "Request Header Fields Too Large",
	  "451": "Unavailable For Legal Reasons",
	  "500": "Internal Server Error",
	  "501": "Not Implemented",
	  "502": "Bad Gateway",
	  "503": "Service Unavailable",
	  "504": "Gateway Timeout",
	  "505": "HTTP Version Not Supported",
	  "506": "Variant Also Negotiates",
	  "507": "Insufficient Storage",
	  "508": "Loop Detected",
	  "510": "Not Extended",
	  "511": "Network Authentication Required"
	};
	function statusText(status) {
	  return STATUS_TEXTS[String(status)] || "Unknown";
	}
	function singleHeader(name, value) {
	  return [{ name, value }];
	}
	function mergeHeaders(headers) {
	  const lowerCaseToValue = /* @__PURE__ */ new Map();
	  const lowerCaseToOriginalCase = /* @__PURE__ */ new Map();
	  for (const h of headers) {
	    if (!h)
	      continue;
	    for (const { name, value } of h) {
	      const lower = name.toLowerCase();
	      lowerCaseToOriginalCase.set(lower, name);
	      lowerCaseToValue.set(lower, value);
	    }
	  }
	  const result = [];
	  for (const [lower, value] of lowerCaseToValue)
	    result.push({ name: lowerCaseToOriginalCase.get(lower), value });
	  return result;
	}
	return network$1;
}

var accessibility$1;
var hasRequiredAccessibility$1;

function requireAccessibility$1 () {
	if (hasRequiredAccessibility$1) return accessibility$1;
	hasRequiredAccessibility$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var accessibility_exports = {};
	__export(accessibility_exports, {
	  Accessibility: () => Accessibility
	});
	accessibility$1 = __toCommonJS(accessibility_exports);
	class Accessibility {
	  constructor(getAXTree) {
	    this._getAXTree = getAXTree;
	  }
	  async snapshot(options = {}) {
	    const {
	      interestingOnly = true,
	      root = null
	    } = options;
	    const { tree, needle } = await this._getAXTree(root || void 0);
	    if (!interestingOnly) {
	      if (root)
	        return needle && serializeTree(needle)[0];
	      return serializeTree(tree)[0];
	    }
	    const interestingNodes = /* @__PURE__ */ new Set();
	    collectInterestingNodes(interestingNodes, tree, false);
	    if (root && (!needle || !interestingNodes.has(needle)))
	      return null;
	    return serializeTree(needle || tree, interestingNodes)[0];
	  }
	}
	function collectInterestingNodes(collection, node, insideControl) {
	  if (node.isInteresting(insideControl))
	    collection.add(node);
	  if (node.isLeafNode())
	    return;
	  insideControl = insideControl || node.isControl();
	  for (const child of node.children())
	    collectInterestingNodes(collection, child, insideControl);
	}
	function serializeTree(node, whitelistedNodes) {
	  const children = [];
	  for (const child of node.children())
	    children.push(...serializeTree(child, whitelistedNodes));
	  if (whitelistedNodes && !whitelistedNodes.has(node))
	    return children;
	  const serializedNode = node.serialize();
	  if (children.length)
	    serializedNode.children = children;
	  return [serializedNode];
	}
	return accessibility$1;
}

var console$1;
var hasRequiredConsole;

function requireConsole () {
	if (hasRequiredConsole) return console$1;
	hasRequiredConsole = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var console_exports = {};
	__export(console_exports, {
	  ConsoleMessage: () => ConsoleMessage
	});
	console$1 = __toCommonJS(console_exports);
	class ConsoleMessage {
	  constructor(page, type, text, args, location) {
	    this._page = page;
	    this._type = type;
	    this._text = text;
	    this._args = args;
	    this._location = location || { url: "", lineNumber: 0, columnNumber: 0 };
	  }
	  page() {
	    return this._page;
	  }
	  type() {
	    return this._type;
	  }
	  text() {
	    if (this._text === void 0)
	      this._text = this._args.map((arg) => arg.preview()).join(" ");
	    return this._text;
	  }
	  args() {
	    return this._args;
	  }
	  location() {
	    return this._location;
	  }
	}
	return console$1;
}

var fileChooser$1;
var hasRequiredFileChooser$1;

function requireFileChooser$1 () {
	if (hasRequiredFileChooser$1) return fileChooser$1;
	hasRequiredFileChooser$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var fileChooser_exports = {};
	__export(fileChooser_exports, {
	  FileChooser: () => FileChooser
	});
	fileChooser$1 = __toCommonJS(fileChooser_exports);
	class FileChooser {
	  constructor(page, elementHandle, isMultiple) {
	    this._page = page;
	    this._elementHandle = elementHandle;
	    this._isMultiple = isMultiple;
	  }
	  element() {
	    return this._elementHandle;
	  }
	  isMultiple() {
	    return this._isMultiple;
	  }
	  page() {
	    return this._page;
	  }
	}
	return fileChooser$1;
}

var usKeyboardLayout;
var hasRequiredUsKeyboardLayout;

function requireUsKeyboardLayout () {
	if (hasRequiredUsKeyboardLayout) return usKeyboardLayout;
	hasRequiredUsKeyboardLayout = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var usKeyboardLayout_exports = {};
	__export(usKeyboardLayout_exports, {
	  USKeyboardLayout: () => USKeyboardLayout,
	  keypadLocation: () => keypadLocation
	});
	usKeyboardLayout = __toCommonJS(usKeyboardLayout_exports);
	const keypadLocation = 3;
	const USKeyboardLayout = {
	  // Functions row
	  "Escape": { "keyCode": 27, "key": "Escape" },
	  "F1": { "keyCode": 112, "key": "F1" },
	  "F2": { "keyCode": 113, "key": "F2" },
	  "F3": { "keyCode": 114, "key": "F3" },
	  "F4": { "keyCode": 115, "key": "F4" },
	  "F5": { "keyCode": 116, "key": "F5" },
	  "F6": { "keyCode": 117, "key": "F6" },
	  "F7": { "keyCode": 118, "key": "F7" },
	  "F8": { "keyCode": 119, "key": "F8" },
	  "F9": { "keyCode": 120, "key": "F9" },
	  "F10": { "keyCode": 121, "key": "F10" },
	  "F11": { "keyCode": 122, "key": "F11" },
	  "F12": { "keyCode": 123, "key": "F12" },
	  // Numbers row
	  "Backquote": { "keyCode": 192, "shiftKey": "~", "key": "`" },
	  "Digit1": { "keyCode": 49, "shiftKey": "!", "key": "1" },
	  "Digit2": { "keyCode": 50, "shiftKey": "@", "key": "2" },
	  "Digit3": { "keyCode": 51, "shiftKey": "#", "key": "3" },
	  "Digit4": { "keyCode": 52, "shiftKey": "$", "key": "4" },
	  "Digit5": { "keyCode": 53, "shiftKey": "%", "key": "5" },
	  "Digit6": { "keyCode": 54, "shiftKey": "^", "key": "6" },
	  "Digit7": { "keyCode": 55, "shiftKey": "&", "key": "7" },
	  "Digit8": { "keyCode": 56, "shiftKey": "*", "key": "8" },
	  "Digit9": { "keyCode": 57, "shiftKey": "(", "key": "9" },
	  "Digit0": { "keyCode": 48, "shiftKey": ")", "key": "0" },
	  "Minus": { "keyCode": 189, "shiftKey": "_", "key": "-" },
	  "Equal": { "keyCode": 187, "shiftKey": "+", "key": "=" },
	  "Backslash": { "keyCode": 220, "shiftKey": "|", "key": "\\" },
	  "Backspace": { "keyCode": 8, "key": "Backspace" },
	  // First row
	  "Tab": { "keyCode": 9, "key": "Tab" },
	  "KeyQ": { "keyCode": 81, "shiftKey": "Q", "key": "q" },
	  "KeyW": { "keyCode": 87, "shiftKey": "W", "key": "w" },
	  "KeyE": { "keyCode": 69, "shiftKey": "E", "key": "e" },
	  "KeyR": { "keyCode": 82, "shiftKey": "R", "key": "r" },
	  "KeyT": { "keyCode": 84, "shiftKey": "T", "key": "t" },
	  "KeyY": { "keyCode": 89, "shiftKey": "Y", "key": "y" },
	  "KeyU": { "keyCode": 85, "shiftKey": "U", "key": "u" },
	  "KeyI": { "keyCode": 73, "shiftKey": "I", "key": "i" },
	  "KeyO": { "keyCode": 79, "shiftKey": "O", "key": "o" },
	  "KeyP": { "keyCode": 80, "shiftKey": "P", "key": "p" },
	  "BracketLeft": { "keyCode": 219, "shiftKey": "{", "key": "[" },
	  "BracketRight": { "keyCode": 221, "shiftKey": "}", "key": "]" },
	  // Second row
	  "CapsLock": { "keyCode": 20, "key": "CapsLock" },
	  "KeyA": { "keyCode": 65, "shiftKey": "A", "key": "a" },
	  "KeyS": { "keyCode": 83, "shiftKey": "S", "key": "s" },
	  "KeyD": { "keyCode": 68, "shiftKey": "D", "key": "d" },
	  "KeyF": { "keyCode": 70, "shiftKey": "F", "key": "f" },
	  "KeyG": { "keyCode": 71, "shiftKey": "G", "key": "g" },
	  "KeyH": { "keyCode": 72, "shiftKey": "H", "key": "h" },
	  "KeyJ": { "keyCode": 74, "shiftKey": "J", "key": "j" },
	  "KeyK": { "keyCode": 75, "shiftKey": "K", "key": "k" },
	  "KeyL": { "keyCode": 76, "shiftKey": "L", "key": "l" },
	  "Semicolon": { "keyCode": 186, "shiftKey": ":", "key": ";" },
	  "Quote": { "keyCode": 222, "shiftKey": '"', "key": "'" },
	  "Enter": { "keyCode": 13, "key": "Enter", "text": "\r" },
	  // Third row
	  "ShiftLeft": { "keyCode": 160, "keyCodeWithoutLocation": 16, "key": "Shift", "location": 1 },
	  "KeyZ": { "keyCode": 90, "shiftKey": "Z", "key": "z" },
	  "KeyX": { "keyCode": 88, "shiftKey": "X", "key": "x" },
	  "KeyC": { "keyCode": 67, "shiftKey": "C", "key": "c" },
	  "KeyV": { "keyCode": 86, "shiftKey": "V", "key": "v" },
	  "KeyB": { "keyCode": 66, "shiftKey": "B", "key": "b" },
	  "KeyN": { "keyCode": 78, "shiftKey": "N", "key": "n" },
	  "KeyM": { "keyCode": 77, "shiftKey": "M", "key": "m" },
	  "Comma": { "keyCode": 188, "shiftKey": "<", "key": "," },
	  "Period": { "keyCode": 190, "shiftKey": ">", "key": "." },
	  "Slash": { "keyCode": 191, "shiftKey": "?", "key": "/" },
	  "ShiftRight": { "keyCode": 161, "keyCodeWithoutLocation": 16, "key": "Shift", "location": 2 },
	  // Last row
	  "ControlLeft": { "keyCode": 162, "keyCodeWithoutLocation": 17, "key": "Control", "location": 1 },
	  "MetaLeft": { "keyCode": 91, "key": "Meta", "location": 1 },
	  "AltLeft": { "keyCode": 164, "keyCodeWithoutLocation": 18, "key": "Alt", "location": 1 },
	  "Space": { "keyCode": 32, "key": " " },
	  "AltRight": { "keyCode": 165, "keyCodeWithoutLocation": 18, "key": "Alt", "location": 2 },
	  "AltGraph": { "keyCode": 225, "key": "AltGraph" },
	  "MetaRight": { "keyCode": 92, "key": "Meta", "location": 2 },
	  "ContextMenu": { "keyCode": 93, "key": "ContextMenu" },
	  "ControlRight": { "keyCode": 163, "keyCodeWithoutLocation": 17, "key": "Control", "location": 2 },
	  // Center block
	  "PrintScreen": { "keyCode": 44, "key": "PrintScreen" },
	  "ScrollLock": { "keyCode": 145, "key": "ScrollLock" },
	  "Pause": { "keyCode": 19, "key": "Pause" },
	  "PageUp": { "keyCode": 33, "key": "PageUp" },
	  "PageDown": { "keyCode": 34, "key": "PageDown" },
	  "Insert": { "keyCode": 45, "key": "Insert" },
	  "Delete": { "keyCode": 46, "key": "Delete" },
	  "Home": { "keyCode": 36, "key": "Home" },
	  "End": { "keyCode": 35, "key": "End" },
	  "ArrowLeft": { "keyCode": 37, "key": "ArrowLeft" },
	  "ArrowUp": { "keyCode": 38, "key": "ArrowUp" },
	  "ArrowRight": { "keyCode": 39, "key": "ArrowRight" },
	  "ArrowDown": { "keyCode": 40, "key": "ArrowDown" },
	  // Numpad
	  "NumLock": { "keyCode": 144, "key": "NumLock" },
	  "NumpadDivide": { "keyCode": 111, "key": "/", "location": 3 },
	  "NumpadMultiply": { "keyCode": 106, "key": "*", "location": 3 },
	  "NumpadSubtract": { "keyCode": 109, "key": "-", "location": 3 },
	  "Numpad7": { "keyCode": 36, "shiftKeyCode": 103, "key": "Home", "shiftKey": "7", "location": 3 },
	  "Numpad8": { "keyCode": 38, "shiftKeyCode": 104, "key": "ArrowUp", "shiftKey": "8", "location": 3 },
	  "Numpad9": { "keyCode": 33, "shiftKeyCode": 105, "key": "PageUp", "shiftKey": "9", "location": 3 },
	  "Numpad4": { "keyCode": 37, "shiftKeyCode": 100, "key": "ArrowLeft", "shiftKey": "4", "location": 3 },
	  "Numpad5": { "keyCode": 12, "shiftKeyCode": 101, "key": "Clear", "shiftKey": "5", "location": 3 },
	  "Numpad6": { "keyCode": 39, "shiftKeyCode": 102, "key": "ArrowRight", "shiftKey": "6", "location": 3 },
	  "NumpadAdd": { "keyCode": 107, "key": "+", "location": 3 },
	  "Numpad1": { "keyCode": 35, "shiftKeyCode": 97, "key": "End", "shiftKey": "1", "location": 3 },
	  "Numpad2": { "keyCode": 40, "shiftKeyCode": 98, "key": "ArrowDown", "shiftKey": "2", "location": 3 },
	  "Numpad3": { "keyCode": 34, "shiftKeyCode": 99, "key": "PageDown", "shiftKey": "3", "location": 3 },
	  "Numpad0": { "keyCode": 45, "shiftKeyCode": 96, "key": "Insert", "shiftKey": "0", "location": 3 },
	  "NumpadDecimal": { "keyCode": 46, "shiftKeyCode": 110, "key": "\0", "shiftKey": ".", "location": 3 },
	  "NumpadEnter": { "keyCode": 13, "key": "Enter", "text": "\r", "location": 3 }
	};
	return usKeyboardLayout;
}

var input$1;
var hasRequiredInput$1;

function requireInput$1 () {
	if (hasRequiredInput$1) return input$1;
	hasRequiredInput$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var input_exports = {};
	__export(input_exports, {
	  Keyboard: () => Keyboard,
	  Mouse: () => Mouse,
	  Touchscreen: () => Touchscreen,
	  keypadLocation: () => keypadLocation,
	  resolveSmartModifier: () => resolveSmartModifier,
	  resolveSmartModifierString: () => resolveSmartModifierString
	});
	input$1 = __toCommonJS(input_exports);
	var import_utils = requireUtils();
	var keyboardLayout = __toESM(requireUsKeyboardLayout());
	const keypadLocation = keyboardLayout.keypadLocation;
	const kModifiers = ["Alt", "Control", "Meta", "Shift"];
	class Keyboard {
	  constructor(raw) {
	    this._pressedModifiers = /* @__PURE__ */ new Set();
	    this._pressedKeys = /* @__PURE__ */ new Set();
	    this._raw = raw;
	  }
	  async down(key) {
	    const description = this._keyDescriptionForString(key);
	    const autoRepeat = this._pressedKeys.has(description.code);
	    this._pressedKeys.add(description.code);
	    if (kModifiers.includes(description.key))
	      this._pressedModifiers.add(description.key);
	    await this._raw.keydown(this._pressedModifiers, key, description, autoRepeat);
	  }
	  _keyDescriptionForString(str) {
	    const keyString = resolveSmartModifierString(str);
	    let description = usKeyboardLayout.get(keyString);
	    (0, import_utils.assert)(description, `Unknown key: "${keyString}"`);
	    const shift = this._pressedModifiers.has("Shift");
	    description = shift && description.shifted ? description.shifted : description;
	    if (this._pressedModifiers.size > 1 || !this._pressedModifiers.has("Shift") && this._pressedModifiers.size === 1)
	      return { ...description, text: "" };
	    return description;
	  }
	  async up(key) {
	    const description = this._keyDescriptionForString(key);
	    if (kModifiers.includes(description.key))
	      this._pressedModifiers.delete(description.key);
	    this._pressedKeys.delete(description.code);
	    await this._raw.keyup(this._pressedModifiers, key, description);
	  }
	  async insertText(text) {
	    await this._raw.sendText(text);
	  }
	  async type(text, options) {
	    const delay = options && options.delay || void 0;
	    for (const char of text) {
	      if (usKeyboardLayout.has(char)) {
	        await this.press(char, { delay });
	      } else {
	        if (delay)
	          await new Promise((f) => setTimeout(f, delay));
	        await this.insertText(char);
	      }
	    }
	  }
	  async press(key, options = {}) {
	    function split(keyString) {
	      const keys = [];
	      let building = "";
	      for (const char of keyString) {
	        if (char === "+" && building) {
	          keys.push(building);
	          building = "";
	        } else {
	          building += char;
	        }
	      }
	      keys.push(building);
	      return keys;
	    }
	    const tokens = split(key);
	    key = tokens[tokens.length - 1];
	    for (let i = 0; i < tokens.length - 1; ++i)
	      await this.down(tokens[i]);
	    await this.down(key);
	    if (options.delay)
	      await new Promise((f) => setTimeout(f, options.delay));
	    await this.up(key);
	    for (let i = tokens.length - 2; i >= 0; --i)
	      await this.up(tokens[i]);
	  }
	  async ensureModifiers(mm) {
	    const modifiers = mm.map(resolveSmartModifier);
	    for (const modifier of modifiers) {
	      if (!kModifiers.includes(modifier))
	        throw new Error("Unknown modifier " + modifier);
	    }
	    const restore = Array.from(this._pressedModifiers);
	    for (const key of kModifiers) {
	      const needDown = modifiers.includes(key);
	      const isDown = this._pressedModifiers.has(key);
	      if (needDown && !isDown)
	        await this.down(key);
	      else if (!needDown && isDown)
	        await this.up(key);
	    }
	    return restore;
	  }
	  _modifiers() {
	    return this._pressedModifiers;
	  }
	}
	function resolveSmartModifierString(key) {
	  if (key === "ControlOrMeta")
	    return process.platform === "darwin" ? "Meta" : "Control";
	  return key;
	}
	function resolveSmartModifier(m) {
	  return resolveSmartModifierString(m);
	}
	class Mouse {
	  constructor(raw, page) {
	    this._x = 0;
	    this._y = 0;
	    this._lastButton = "none";
	    this._buttons = /* @__PURE__ */ new Set();
	    this._raw = raw;
	    this._page = page;
	    this._keyboard = this._page.keyboard;
	  }
	  async move(x, y, options = {}, metadata) {
	    if (metadata)
	      metadata.point = { x, y };
	    const { steps = 1 } = options;
	    const fromX = this._x;
	    const fromY = this._y;
	    this._x = x;
	    this._y = y;
	    for (let i = 1; i <= steps; i++) {
	      const middleX = fromX + (x - fromX) * (i / steps);
	      const middleY = fromY + (y - fromY) * (i / steps);
	      await this._raw.move(middleX, middleY, this._lastButton, this._buttons, this._keyboard._modifiers(), !!options.forClick);
	    }
	  }
	  async down(options = {}, metadata) {
	    if (metadata)
	      metadata.point = { x: this._x, y: this._y };
	    const { button = "left", clickCount = 1 } = options;
	    this._lastButton = button;
	    this._buttons.add(button);
	    await this._raw.down(this._x, this._y, this._lastButton, this._buttons, this._keyboard._modifiers(), clickCount);
	  }
	  async up(options = {}, metadata) {
	    if (metadata)
	      metadata.point = { x: this._x, y: this._y };
	    const { button = "left", clickCount = 1 } = options;
	    this._lastButton = "none";
	    this._buttons.delete(button);
	    await this._raw.up(this._x, this._y, button, this._buttons, this._keyboard._modifiers(), clickCount);
	  }
	  async click(x, y, options = {}, metadata) {
	    if (metadata)
	      metadata.point = { x, y };
	    const { delay = null, clickCount = 1 } = options;
	    if (delay) {
	      this.move(x, y, { forClick: true });
	      for (let cc = 1; cc <= clickCount; ++cc) {
	        await this.down({ ...options, clickCount: cc });
	        await new Promise((f) => setTimeout(f, delay));
	        await this.up({ ...options, clickCount: cc });
	        if (cc < clickCount)
	          await new Promise((f) => setTimeout(f, delay));
	      }
	    } else {
	      const promises = [];
	      promises.push(this.move(x, y, { forClick: true }));
	      for (let cc = 1; cc <= clickCount; ++cc) {
	        promises.push(this.down({ ...options, clickCount: cc }));
	        promises.push(this.up({ ...options, clickCount: cc }));
	      }
	      await Promise.all(promises);
	    }
	  }
	  async dblclick(x, y, options = {}) {
	    await this.click(x, y, { ...options, clickCount: 2 });
	  }
	  async wheel(deltaX, deltaY) {
	    await this._raw.wheel(this._x, this._y, this._buttons, this._keyboard._modifiers(), deltaX, deltaY);
	  }
	}
	const aliases = /* @__PURE__ */ new Map([
	  ["ShiftLeft", ["Shift"]],
	  ["ControlLeft", ["Control"]],
	  ["AltLeft", ["Alt"]],
	  ["MetaLeft", ["Meta"]],
	  ["Enter", ["\n", "\r"]]
	]);
	const usKeyboardLayout = buildLayoutClosure(keyboardLayout.USKeyboardLayout);
	function buildLayoutClosure(layout) {
	  const result = /* @__PURE__ */ new Map();
	  for (const code in layout) {
	    const definition = layout[code];
	    const description = {
	      key: definition.key || "",
	      keyCode: definition.keyCode || 0,
	      keyCodeWithoutLocation: definition.keyCodeWithoutLocation || definition.keyCode || 0,
	      code,
	      text: definition.text || "",
	      location: definition.location || 0
	    };
	    if (definition.key.length === 1)
	      description.text = description.key;
	    let shiftedDescription;
	    if (definition.shiftKey) {
	      (0, import_utils.assert)(definition.shiftKey.length === 1);
	      shiftedDescription = { ...description };
	      shiftedDescription.key = definition.shiftKey;
	      shiftedDescription.text = definition.shiftKey;
	      if (definition.shiftKeyCode)
	        shiftedDescription.keyCode = definition.shiftKeyCode;
	    }
	    result.set(code, { ...description, shifted: shiftedDescription });
	    if (aliases.has(code)) {
	      for (const alias of aliases.get(code))
	        result.set(alias, description);
	    }
	    if (definition.location)
	      continue;
	    if (description.key.length === 1)
	      result.set(description.key, description);
	    if (shiftedDescription)
	      result.set(shiftedDescription.key, { ...shiftedDescription, shifted: void 0 });
	  }
	  return result;
	}
	class Touchscreen {
	  constructor(raw, page) {
	    this._raw = raw;
	    this._page = page;
	  }
	  async tap(x, y, metadata) {
	    if (metadata)
	      metadata.point = { x, y };
	    if (!this._page._browserContext._options.hasTouch)
	      throw new Error("hasTouch must be enabled on the browser context before using the touchscreen.");
	    await this._raw.tap(x, y, this._page.keyboard._modifiers());
	  }
	}
	return input$1;
}

var pageBinding;
var hasRequiredPageBinding;

function requirePageBinding () {
	if (hasRequiredPageBinding) return pageBinding;
	hasRequiredPageBinding = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var pageBinding_exports = {};
	__export(pageBinding_exports, {
	  createPageBindingScript: () => createPageBindingScript,
	  deliverBindingResult: () => deliverBindingResult,
	  takeBindingHandle: () => takeBindingHandle
	});
	pageBinding = __toCommonJS(pageBinding_exports);
	var import_builtins = requireBuiltins();
	var import_utilityScriptSerializers = requireUtilityScriptSerializers();
	function addPageBinding(playwrightBinding, bindingName, needsHandle, utilityScriptSerializersFactory, builtins2) {
	  const { serializeAsCallArgument } = utilityScriptSerializersFactory(builtins2);
	  const binding = globalThis[playwrightBinding];
	  globalThis[bindingName] = (...args) => {
	    const me = globalThis[bindingName];
	    if (needsHandle && args.slice(1).some((arg) => arg !== void 0))
	      throw new Error(`exposeBindingHandle supports a single argument, ${args.length} received`);
	    let callbacks = me["callbacks"];
	    if (!callbacks) {
	      callbacks = new builtins2.Map();
	      me["callbacks"] = callbacks;
	    }
	    const seq = (me["lastSeq"] || 0) + 1;
	    me["lastSeq"] = seq;
	    let handles = me["handles"];
	    if (!handles) {
	      handles = new builtins2.Map();
	      me["handles"] = handles;
	    }
	    const promise = new Promise((resolve, reject) => callbacks.set(seq, { resolve, reject }));
	    let payload;
	    if (needsHandle) {
	      handles.set(seq, args[0]);
	      payload = { name: bindingName, seq };
	    } else {
	      const serializedArgs = [];
	      for (let i = 0; i < args.length; i++) {
	        serializedArgs[i] = serializeAsCallArgument(args[i], (v) => {
	          return { fallThrough: v };
	        });
	      }
	      payload = { name: bindingName, seq, serializedArgs };
	    }
	    binding(JSON.stringify(payload));
	    return promise;
	  };
	  globalThis[bindingName].__installed = true;
	}
	function takeBindingHandle(arg) {
	  const handles = globalThis[arg.name]["handles"];
	  const handle = handles.get(arg.seq);
	  handles.delete(arg.seq);
	  return handle;
	}
	function deliverBindingResult(arg) {
	  const callbacks = globalThis[arg.name]["callbacks"];
	  if ("error" in arg)
	    callbacks.get(arg.seq).reject(arg.error);
	  else
	    callbacks.get(arg.seq).resolve(arg.result);
	  callbacks.delete(arg.seq);
	}
	function createPageBindingScript(playwrightBinding, name, needsHandle) {
	  return `(${addPageBinding.toString()})(${JSON.stringify(playwrightBinding)}, ${JSON.stringify(name)}, ${needsHandle}, (${import_utilityScriptSerializers.source}), (${import_builtins.builtins})())`;
	}
	return pageBinding;
}

var screenshotter;
var hasRequiredScreenshotter;

function requireScreenshotter () {
	if (hasRequiredScreenshotter) return screenshotter;
	hasRequiredScreenshotter = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var screenshotter_exports = {};
	__export(screenshotter_exports, {
	  Screenshotter: () => Screenshotter,
	  validateScreenshotOptions: () => validateScreenshotOptions
	});
	screenshotter = __toCommonJS(screenshotter_exports);
	var import_helper = requireHelper();
	var import_utils = requireUtils();
	var import_multimap = requireMultimap();
	function inPagePrepareForScreenshots(screenshotStyle, hideCaret, disableAnimations, syncAnimations) {
	  if (syncAnimations) {
	    const style = document.createElement("style");
	    style.textContent = "body {}";
	    document.head.appendChild(style);
	    document.documentElement.getBoundingClientRect();
	    style.remove();
	  }
	  if (!screenshotStyle && !hideCaret && !disableAnimations)
	    return;
	  const collectRoots = (root, roots2 = []) => {
	    roots2.push(root);
	    const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
	    do {
	      const node = walker.currentNode;
	      const shadowRoot = node instanceof Element ? node.shadowRoot : null;
	      if (shadowRoot)
	        collectRoots(shadowRoot, roots2);
	    } while (walker.nextNode());
	    return roots2;
	  };
	  const roots = collectRoots(document);
	  const cleanupCallbacks = [];
	  if (screenshotStyle) {
	    for (const root of roots) {
	      const styleTag = document.createElement("style");
	      styleTag.textContent = screenshotStyle;
	      if (root === document)
	        document.documentElement.append(styleTag);
	      else
	        root.append(styleTag);
	      cleanupCallbacks.push(() => {
	        styleTag.remove();
	      });
	    }
	  }
	  if (hideCaret) {
	    const elements = /* @__PURE__ */ new Map();
	    for (const root of roots) {
	      root.querySelectorAll("input,textarea,[contenteditable]").forEach((element) => {
	        elements.set(element, {
	          value: element.style.getPropertyValue("caret-color"),
	          priority: element.style.getPropertyPriority("caret-color")
	        });
	        element.style.setProperty("caret-color", "transparent", "important");
	      });
	    }
	    cleanupCallbacks.push(() => {
	      for (const [element, value] of elements)
	        element.style.setProperty("caret-color", value.value, value.priority);
	    });
	  }
	  if (disableAnimations) {
	    const infiniteAnimationsToResume = /* @__PURE__ */ new Set();
	    const handleAnimations = (root) => {
	      for (const animation of root.getAnimations()) {
	        if (!animation.effect || animation.playbackRate === 0 || infiniteAnimationsToResume.has(animation))
	          continue;
	        const endTime = animation.effect.getComputedTiming().endTime;
	        if (Number.isFinite(endTime)) {
	          try {
	            animation.finish();
	          } catch (e) {
	          }
	        } else {
	          try {
	            animation.cancel();
	            infiniteAnimationsToResume.add(animation);
	          } catch (e) {
	          }
	        }
	      }
	    };
	    for (const root of roots) {
	      const handleRootAnimations = handleAnimations.bind(null, root);
	      handleRootAnimations();
	      root.addEventListener("transitionrun", handleRootAnimations);
	      root.addEventListener("animationstart", handleRootAnimations);
	      cleanupCallbacks.push(() => {
	        root.removeEventListener("transitionrun", handleRootAnimations);
	        root.removeEventListener("animationstart", handleRootAnimations);
	      });
	    }
	    cleanupCallbacks.push(() => {
	      for (const animation of infiniteAnimationsToResume) {
	        try {
	          animation.play();
	        } catch (e) {
	        }
	      }
	    });
	  }
	  window.__pwCleanupScreenshot = () => {
	    for (const cleanupCallback of cleanupCallbacks)
	      cleanupCallback();
	    delete window.__pwCleanupScreenshot;
	  };
	}
	class Screenshotter {
	  constructor(page) {
	    this._queue = new TaskQueue();
	    this._page = page;
	    this._queue = new TaskQueue();
	  }
	  async _originalViewportSize(progress) {
	    const originalViewportSize = this._page.viewportSize();
	    let viewportSize = originalViewportSize;
	    if (!viewportSize)
	      viewportSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress, () => ({ width: window.innerWidth, height: window.innerHeight }));
	    return { viewportSize, originalViewportSize };
	  }
	  async _fullPageSize(progress) {
	    const fullPageSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress, () => {
	      if (!document.body || !document.documentElement)
	        return null;
	      return {
	        width: Math.max(
	          document.body.scrollWidth,
	          document.documentElement.scrollWidth,
	          document.body.offsetWidth,
	          document.documentElement.offsetWidth,
	          document.body.clientWidth,
	          document.documentElement.clientWidth
	        ),
	        height: Math.max(
	          document.body.scrollHeight,
	          document.documentElement.scrollHeight,
	          document.body.offsetHeight,
	          document.documentElement.offsetHeight,
	          document.body.clientHeight,
	          document.documentElement.clientHeight
	        )
	      };
	    });
	    return fullPageSize;
	  }
	  async screenshotPage(progress, options) {
	    const format = validateScreenshotOptions(options);
	    return this._queue.postTask(async () => {
	      progress.log("taking page screenshot");
	      const { viewportSize } = await this._originalViewportSize(progress);
	      await this._preparePageForScreenshot(progress, this._page.mainFrame(), options.style, options.caret !== "initial", options.animations === "disabled");
	      progress.throwIfAborted();
	      if (options.fullPage) {
	        const fullPageSize = await this._fullPageSize(progress);
	        let documentRect = { x: 0, y: 0, width: fullPageSize.width, height: fullPageSize.height };
	        const fitsViewport = fullPageSize.width <= viewportSize.width && fullPageSize.height <= viewportSize.height;
	        if (options.clip)
	          documentRect = trimClipToSize(options.clip, documentRect);
	        const buffer2 = await this._screenshot(progress, format, documentRect, void 0, fitsViewport, options);
	        progress.throwIfAborted();
	        await this._restorePageAfterScreenshot();
	        return buffer2;
	      }
	      const viewportRect = options.clip ? trimClipToSize(options.clip, viewportSize) : { x: 0, y: 0, ...viewportSize };
	      const buffer = await this._screenshot(progress, format, void 0, viewportRect, true, options);
	      progress.throwIfAborted();
	      await this._restorePageAfterScreenshot();
	      return buffer;
	    });
	  }
	  async screenshotElement(progress, handle, options) {
	    const format = validateScreenshotOptions(options);
	    return this._queue.postTask(async () => {
	      progress.log("taking element screenshot");
	      const { viewportSize } = await this._originalViewportSize(progress);
	      await this._preparePageForScreenshot(progress, handle._frame, options.style, options.caret !== "initial", options.animations === "disabled");
	      progress.throwIfAborted();
	      await handle._waitAndScrollIntoViewIfNeeded(
	        progress,
	        true
	        /* waitForVisible */
	      );
	      progress.throwIfAborted();
	      const boundingBox = await handle.boundingBox();
	      (0, import_utils.assert)(boundingBox, "Node is either not visible or not an HTMLElement");
	      (0, import_utils.assert)(boundingBox.width !== 0, "Node has 0 width.");
	      (0, import_utils.assert)(boundingBox.height !== 0, "Node has 0 height.");
	      const fitsViewport = boundingBox.width <= viewportSize.width && boundingBox.height <= viewportSize.height;
	      progress.throwIfAborted();
	      const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress, () => ({ x: window.scrollX, y: window.scrollY }));
	      const documentRect = { ...boundingBox };
	      documentRect.x += scrollOffset.x;
	      documentRect.y += scrollOffset.y;
	      const buffer = await this._screenshot(progress, format, import_helper.helper.enclosingIntRect(documentRect), void 0, fitsViewport, options);
	      progress.throwIfAborted();
	      await this._restorePageAfterScreenshot();
	      return buffer;
	    });
	  }
	  async _preparePageForScreenshot(progress, frame, screenshotStyle, hideCaret, disableAnimations) {
	    if (disableAnimations)
	      progress.log("  disabled all CSS animations");
	    const syncAnimations = this._page._delegate.shouldToggleStyleSheetToSyncAnimations();
	    await this._page.safeNonStallingEvaluateInAllFrames("(" + inPagePrepareForScreenshots.toString() + `)(${JSON.stringify(screenshotStyle)}, ${hideCaret}, ${disableAnimations}, ${syncAnimations})`, "utility");
	    if (!process.env.PW_TEST_SCREENSHOT_NO_FONTS_READY) {
	      progress.log("waiting for fonts to load...");
	      await frame.nonStallingEvaluateInExistingContext("document.fonts.ready", "utility").catch(() => {
	      });
	      progress.log("fonts loaded");
	    }
	    progress.cleanupWhenAborted(() => this._restorePageAfterScreenshot());
	  }
	  async _restorePageAfterScreenshot() {
	    await this._page.safeNonStallingEvaluateInAllFrames("window.__pwCleanupScreenshot && window.__pwCleanupScreenshot()", "utility");
	  }
	  async _maskElements(progress, options) {
	    const framesToParsedSelectors = new import_multimap.MultiMap();
	    const cleanup = async () => {
	      await Promise.all([...framesToParsedSelectors.keys()].map(async (frame) => {
	        await frame.hideHighlight();
	      }));
	    };
	    if (!options.mask || !options.mask.length)
	      return cleanup;
	    await Promise.all((options.mask || []).map(async ({ frame, selector }) => {
	      const pair = await frame.selectors.resolveFrameForSelector(selector);
	      if (pair)
	        framesToParsedSelectors.set(pair.frame, pair.info.parsed);
	    }));
	    progress.throwIfAborted();
	    await Promise.all([...framesToParsedSelectors.keys()].map(async (frame) => {
	      await frame.maskSelectors(framesToParsedSelectors.get(frame), options.maskColor || "#F0F");
	    }));
	    progress.cleanupWhenAborted(cleanup);
	    return cleanup;
	  }
	  async _screenshot(progress, format, documentRect, viewportRect, fitsViewport, options) {
	    if (options.__testHookBeforeScreenshot)
	      await options.__testHookBeforeScreenshot();
	    progress.throwIfAborted();
	    const shouldSetDefaultBackground = options.omitBackground && format === "png";
	    if (shouldSetDefaultBackground) {
	      await this._page._delegate.setBackgroundColor({ r: 0, g: 0, b: 0, a: 0 });
	      progress.cleanupWhenAborted(() => this._page._delegate.setBackgroundColor());
	    }
	    progress.throwIfAborted();
	    const cleanupHighlight = await this._maskElements(progress, options);
	    progress.throwIfAborted();
	    const quality = format === "jpeg" ? options.quality ?? 80 : void 0;
	    const buffer = await this._page._delegate.takeScreenshot(progress, format, documentRect, viewportRect, quality, fitsViewport, options.scale || "device");
	    progress.throwIfAborted();
	    await cleanupHighlight();
	    progress.throwIfAborted();
	    if (shouldSetDefaultBackground)
	      await this._page._delegate.setBackgroundColor();
	    progress.throwIfAborted();
	    if (options.__testHookAfterScreenshot)
	      await options.__testHookAfterScreenshot();
	    return buffer;
	  }
	}
	class TaskQueue {
	  constructor() {
	    this._chain = Promise.resolve();
	  }
	  postTask(task) {
	    const result = this._chain.then(task);
	    this._chain = result.catch(() => {
	    });
	    return result;
	  }
	}
	function trimClipToSize(clip, size) {
	  const p1 = {
	    x: Math.max(0, Math.min(clip.x, size.width)),
	    y: Math.max(0, Math.min(clip.y, size.height))
	  };
	  const p2 = {
	    x: Math.max(0, Math.min(clip.x + clip.width, size.width)),
	    y: Math.max(0, Math.min(clip.y + clip.height, size.height))
	  };
	  const result = { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };
	  (0, import_utils.assert)(result.width && result.height, "Clipped area is either empty or outside the resulting image");
	  return result;
	}
	function validateScreenshotOptions(options) {
	  let format = null;
	  if (options.type) {
	    (0, import_utils.assert)(options.type === "png" || options.type === "jpeg", "Unknown options.type value: " + options.type);
	    format = options.type;
	  }
	  if (!format)
	    format = "png";
	  if (options.quality !== void 0) {
	    (0, import_utils.assert)(format === "jpeg", "options.quality is unsupported for the " + format + " screenshots");
	    (0, import_utils.assert)(typeof options.quality === "number", "Expected options.quality to be a number but found " + typeof options.quality);
	    (0, import_utils.assert)(Number.isInteger(options.quality), "Expected options.quality to be an integer");
	    (0, import_utils.assert)(options.quality >= 0 && options.quality <= 100, "Expected options.quality to be between 0 and 100 (inclusive), got " + options.quality);
	  }
	  if (options.clip) {
	    (0, import_utils.assert)(typeof options.clip.x === "number", "Expected options.clip.x to be a number but found " + typeof options.clip.x);
	    (0, import_utils.assert)(typeof options.clip.y === "number", "Expected options.clip.y to be a number but found " + typeof options.clip.y);
	    (0, import_utils.assert)(typeof options.clip.width === "number", "Expected options.clip.width to be a number but found " + typeof options.clip.width);
	    (0, import_utils.assert)(typeof options.clip.height === "number", "Expected options.clip.height to be a number but found " + typeof options.clip.height);
	    (0, import_utils.assert)(options.clip.width !== 0, "Expected options.clip.width not to be 0.");
	    (0, import_utils.assert)(options.clip.height !== 0, "Expected options.clip.height not to be 0.");
	  }
	  return format;
	}
	return screenshotter;
}

var page$1;
var hasRequiredPage$1;

function requirePage$1 () {
	if (hasRequiredPage$1) return page$1;
	hasRequiredPage$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var page_exports = {};
	__export(page_exports, {
	  InitScript: () => InitScript,
	  Page: () => Page,
	  PageBinding: () => PageBinding,
	  Worker: () => Worker,
	  kBuiltinsScript: () => kBuiltinsScript
	});
	page$1 = __toCommonJS(page_exports);
	var accessibility = __toESM(requireAccessibility$1());
	var import_browserContext = requireBrowserContext$1();
	var import_console = requireConsole();
	var import_errors = requireErrors$1();
	var import_fileChooser = requireFileChooser$1();
	var frames = __toESM(requireFrames());
	var import_helper = requireHelper();
	var input = __toESM(requireInput$1());
	var import_instrumentation = requireInstrumentation();
	var import_builtins = requireBuiltins();
	var import_pageBinding = requirePageBinding();
	var js = __toESM(requireJavascript$1());
	var import_progress = requireProgress();
	var import_screenshotter = requireScreenshotter();
	var import_timeoutSettings = requireTimeoutSettings$1();
	var import_utils = requireUtils();
	var import_crypto = requireCrypto();
	var import_utils2 = requireUtils();
	var import_comparators = requireComparators();
	var import_debugLogger = requireDebugLogger();
	var import_selectorParser = requireSelectorParser();
	var import_manualPromise = requireManualPromise();
	var import_callLog = requireCallLog();
	class Page extends import_instrumentation.SdkObject {
	  constructor(delegate, browserContext) {
	    super(browserContext, "page");
	    this._closedState = "open";
	    this._closedPromise = new import_manualPromise.ManualPromise();
	    this._initializedPromise = new import_manualPromise.ManualPromise();
	    this._eventsToEmitAfterInitialized = [];
	    this._crashed = false;
	    this.openScope = new import_utils.LongStandingScope();
	    this._emulatedMedia = {};
	    this._interceptFileChooser = false;
	    this._pageBindings = /* @__PURE__ */ new Map();
	    this.initScripts = [];
	    this._workers = /* @__PURE__ */ new Map();
	    this._video = null;
	    this._isServerSideOnly = false;
	    this._locatorHandlers = /* @__PURE__ */ new Map();
	    this._lastLocatorHandlerUid = 0;
	    this._locatorHandlerRunningCounter = 0;
	    // Aiming at 25 fps by default - each frame is 40ms, but we give some slack with 35ms.
	    // When throttling for tracing, 200ms between frames, except for 10 frames around the action.
	    this._frameThrottler = new FrameThrottler(10, 35, 200);
	    this.attribution.page = this;
	    this._delegate = delegate;
	    this._browserContext = browserContext;
	    this.accessibility = new accessibility.Accessibility(delegate.getAccessibilityTree.bind(delegate));
	    this.keyboard = new input.Keyboard(delegate.rawKeyboard);
	    this.mouse = new input.Mouse(delegate.rawMouse, this);
	    this.touchscreen = new input.Touchscreen(delegate.rawTouchscreen, this);
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings(browserContext._timeoutSettings);
	    this._screenshotter = new import_screenshotter.Screenshotter(this);
	    this._frameManager = new frames.FrameManager(this);
	    if (delegate.pdf)
	      this.pdf = delegate.pdf.bind(delegate);
	    this.coverage = delegate.coverage ? delegate.coverage() : null;
	  }
	  static {
	    this.Events = {
	      Close: "close",
	      Crash: "crash",
	      Download: "download",
	      FileChooser: "filechooser",
	      FrameAttached: "frameattached",
	      FrameDetached: "framedetached",
	      InternalFrameNavigatedToNewDocument: "internalframenavigatedtonewdocument",
	      LocatorHandlerTriggered: "locatorhandlertriggered",
	      ScreencastFrame: "screencastframe",
	      Video: "video",
	      WebSocket: "websocket",
	      Worker: "worker"
	    };
	  }
	  async reportAsNew(opener, error = void 0, contextEvent = import_browserContext.BrowserContext.Events.Page) {
	    if (opener) {
	      const openerPageOrError = await opener.waitForInitializedOrError();
	      if (openerPageOrError instanceof Page && !openerPageOrError.isClosed())
	        this._opener = openerPageOrError;
	    }
	    this._markInitialized(error, contextEvent);
	  }
	  _markInitialized(error = void 0, contextEvent = import_browserContext.BrowserContext.Events.Page) {
	    if (error) {
	      if (this._browserContext.isClosingOrClosed())
	        return;
	      this._frameManager.createDummyMainFrameIfNeeded();
	    }
	    this._initialized = error || this;
	    this.emitOnContext(contextEvent, this);
	    for (const { event, args } of this._eventsToEmitAfterInitialized)
	      this._browserContext.emit(event, ...args);
	    this._eventsToEmitAfterInitialized = [];
	    if (this.isClosed())
	      this.emit(Page.Events.Close);
	    else
	      this.instrumentation.onPageOpen(this);
	    this._initializedPromise.resolve(this._initialized);
	  }
	  initializedOrUndefined() {
	    return this._initialized ? this : void 0;
	  }
	  waitForInitializedOrError() {
	    return this._initializedPromise;
	  }
	  emitOnContext(event, ...args) {
	    if (this._isServerSideOnly)
	      return;
	    this._browserContext.emit(event, ...args);
	  }
	  emitOnContextOnceInitialized(event, ...args) {
	    if (this._isServerSideOnly)
	      return;
	    if (this._initialized)
	      this._browserContext.emit(event, ...args);
	    else
	      this._eventsToEmitAfterInitialized.push({ event, args });
	  }
	  async resetForReuse(metadata) {
	    this.setDefaultNavigationTimeout(void 0);
	    this.setDefaultTimeout(void 0);
	    this._locatorHandlers.clear();
	    await this._removeExposedBindings();
	    await this._removeInitScripts();
	    await this.setClientRequestInterceptor(void 0);
	    await this._setServerRequestInterceptor(void 0);
	    await this.setFileChooserIntercepted(false);
	    await this.mainFrame().goto(metadata, "about:blank");
	    this._emulatedSize = void 0;
	    this._emulatedMedia = {};
	    this._extraHTTPHeaders = void 0;
	    this._interceptFileChooser = false;
	    await Promise.all([
	      this._delegate.updateEmulatedViewportSize(),
	      this._delegate.updateEmulateMedia(),
	      this._delegate.updateFileChooserInterception()
	    ]);
	    await this._delegate.resetForReuse();
	  }
	  _didClose() {
	    this._frameManager.dispose();
	    this._frameThrottler.dispose();
	    (0, import_utils.assert)(this._closedState !== "closed", "Page closed twice");
	    this._closedState = "closed";
	    this.emit(Page.Events.Close);
	    this._closedPromise.resolve();
	    this.instrumentation.onPageClose(this);
	    this.openScope.close(new import_errors.TargetClosedError());
	  }
	  _didCrash() {
	    this._frameManager.dispose();
	    this._frameThrottler.dispose();
	    this.emit(Page.Events.Crash);
	    this._crashed = true;
	    this.instrumentation.onPageClose(this);
	    this.openScope.close(new Error("Page crashed"));
	  }
	  async _onFileChooserOpened(handle) {
	    let multiple;
	    try {
	      multiple = await handle.evaluate((element) => !!element.multiple);
	    } catch (e) {
	      return;
	    }
	    if (!this.listenerCount(Page.Events.FileChooser)) {
	      handle.dispose();
	      return;
	    }
	    const fileChooser = new import_fileChooser.FileChooser(this, handle, multiple);
	    this.emit(Page.Events.FileChooser, fileChooser);
	  }
	  context() {
	    return this._browserContext;
	  }
	  opener() {
	    return this._opener;
	  }
	  mainFrame() {
	    return this._frameManager.mainFrame();
	  }
	  frames() {
	    return this._frameManager.frames();
	  }
	  setDefaultNavigationTimeout(timeout) {
	    this._timeoutSettings.setDefaultNavigationTimeout(timeout);
	  }
	  setDefaultTimeout(timeout) {
	    this._timeoutSettings.setDefaultTimeout(timeout);
	  }
	  async exposeBinding(name, needsHandle, playwrightBinding) {
	    if (this._pageBindings.has(name))
	      throw new Error(`Function "${name}" has been already registered`);
	    if (this._browserContext._pageBindings.has(name))
	      throw new Error(`Function "${name}" has been already registered in the browser context`);
	    const binding = new PageBinding(name, playwrightBinding, needsHandle);
	    this._pageBindings.set(name, binding);
	    await this._delegate.addInitScript(binding.initScript);
	    await Promise.all(this.frames().map((frame) => frame.evaluateExpression(binding.initScript.source).catch((e) => {
	    })));
	  }
	  async _removeExposedBindings() {
	    for (const [key, binding] of this._pageBindings) {
	      if (!binding.internal)
	        this._pageBindings.delete(key);
	    }
	  }
	  setExtraHTTPHeaders(headers) {
	    this._extraHTTPHeaders = headers;
	    return this._delegate.updateExtraHTTPHeaders();
	  }
	  extraHTTPHeaders() {
	    return this._extraHTTPHeaders;
	  }
	  async _onBindingCalled(payload, context) {
	    if (this._closedState === "closed")
	      return;
	    await PageBinding.dispatch(this, payload, context);
	  }
	  _addConsoleMessage(type, args, location, text) {
	    const message = new import_console.ConsoleMessage(this, type, text, args, location);
	    const intercepted = this._frameManager.interceptConsoleMessage(message);
	    if (intercepted) {
	      args.forEach((arg) => arg.dispose());
	      return;
	    }
	    this.emitOnContextOnceInitialized(import_browserContext.BrowserContext.Events.Console, message);
	  }
	  async reload(metadata, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run((progress) => this.mainFrame().raceNavigationAction(progress, options, async () => {
	      const [response] = await Promise.all([
	        // Reload must be a new document, and should not be confused with a stray pushState.
	        this.mainFrame()._waitForNavigation(progress, true, options),
	        this._delegate.reload()
	      ]);
	      return response;
	    }), this._timeoutSettings.navigationTimeout(options));
	  }
	  async goBack(metadata, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run((progress) => this.mainFrame().raceNavigationAction(progress, options, async () => {
	      let error;
	      const waitPromise = this.mainFrame()._waitForNavigation(progress, false, options).catch((e) => {
	        error = e;
	        return null;
	      });
	      const result = await this._delegate.goBack();
	      if (!result)
	        return null;
	      const response = await waitPromise;
	      if (error)
	        throw error;
	      return response;
	    }), this._timeoutSettings.navigationTimeout(options));
	  }
	  async goForward(metadata, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run((progress) => this.mainFrame().raceNavigationAction(progress, options, async () => {
	      let error;
	      const waitPromise = this.mainFrame()._waitForNavigation(progress, false, options).catch((e) => {
	        error = e;
	        return null;
	      });
	      const result = await this._delegate.goForward();
	      if (!result)
	        return null;
	      const response = await waitPromise;
	      if (error)
	        throw error;
	      return response;
	    }), this._timeoutSettings.navigationTimeout(options));
	  }
	  requestGC() {
	    return this._delegate.requestGC();
	  }
	  registerLocatorHandler(selector, noWaitAfter) {
	    const uid = ++this._lastLocatorHandlerUid;
	    this._locatorHandlers.set(uid, { selector, noWaitAfter });
	    return uid;
	  }
	  resolveLocatorHandler(uid, remove) {
	    const handler = this._locatorHandlers.get(uid);
	    if (remove)
	      this._locatorHandlers.delete(uid);
	    if (handler) {
	      handler.resolved?.resolve();
	      handler.resolved = void 0;
	    }
	  }
	  unregisterLocatorHandler(uid) {
	    this._locatorHandlers.delete(uid);
	  }
	  async performActionPreChecks(progress) {
	    await this._performWaitForNavigationCheck(progress);
	    progress.throwIfAborted();
	    await this._performLocatorHandlersCheckpoint(progress);
	    progress.throwIfAborted();
	    await this._performWaitForNavigationCheck(progress);
	  }
	  async _performWaitForNavigationCheck(progress) {
	    if (process.env.PLAYWRIGHT_SKIP_NAVIGATION_CHECK)
	      return;
	    const mainFrame = this._frameManager.mainFrame();
	    if (!mainFrame || !mainFrame.pendingDocument())
	      return;
	    const url = mainFrame.pendingDocument()?.request?.url();
	    const toUrl = url ? `" ${(0, import_utils.trimStringWithEllipsis)(url, 200)}"` : "";
	    progress.log(`  waiting for${toUrl} navigation to finish...`);
	    await import_helper.helper.waitForEvent(progress, mainFrame, frames.Frame.Events.InternalNavigation, (e) => {
	      if (!e.isPublic)
	        return false;
	      if (!e.error)
	        progress.log(`  navigated to "${(0, import_utils.trimStringWithEllipsis)(mainFrame.url(), 200)}"`);
	      return true;
	    }).promise;
	  }
	  async _performLocatorHandlersCheckpoint(progress) {
	    if (this._locatorHandlerRunningCounter)
	      return;
	    for (const [uid, handler] of this._locatorHandlers) {
	      if (!handler.resolved) {
	        if (await this.mainFrame().isVisibleInternal(handler.selector, { strict: true })) {
	          handler.resolved = new import_manualPromise.ManualPromise();
	          this.emit(Page.Events.LocatorHandlerTriggered, uid);
	        }
	      }
	      if (handler.resolved) {
	        ++this._locatorHandlerRunningCounter;
	        progress.log(`  found ${(0, import_utils2.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)}, intercepting action to run the handler`);
	        const promise = handler.resolved.then(async () => {
	          progress.throwIfAborted();
	          if (!handler.noWaitAfter) {
	            progress.log(`  locator handler has finished, waiting for ${(0, import_utils2.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)} to be hidden`);
	            await this.mainFrame().waitForSelectorInternal(progress, handler.selector, false, { state: "hidden" });
	          } else {
	            progress.log(`  locator handler has finished`);
	          }
	        });
	        await this.openScope.race(promise).finally(() => --this._locatorHandlerRunningCounter);
	        progress.throwIfAborted();
	        progress.log(`  interception handler has finished, continuing`);
	      }
	    }
	  }
	  async emulateMedia(options) {
	    if (options.media !== void 0)
	      this._emulatedMedia.media = options.media;
	    if (options.colorScheme !== void 0)
	      this._emulatedMedia.colorScheme = options.colorScheme;
	    if (options.reducedMotion !== void 0)
	      this._emulatedMedia.reducedMotion = options.reducedMotion;
	    if (options.forcedColors !== void 0)
	      this._emulatedMedia.forcedColors = options.forcedColors;
	    if (options.contrast !== void 0)
	      this._emulatedMedia.contrast = options.contrast;
	    await this._delegate.updateEmulateMedia();
	  }
	  emulatedMedia() {
	    const contextOptions = this._browserContext._options;
	    return {
	      media: this._emulatedMedia.media || "no-override",
	      colorScheme: this._emulatedMedia.colorScheme !== void 0 ? this._emulatedMedia.colorScheme : contextOptions.colorScheme ?? "light",
	      reducedMotion: this._emulatedMedia.reducedMotion !== void 0 ? this._emulatedMedia.reducedMotion : contextOptions.reducedMotion ?? "no-preference",
	      forcedColors: this._emulatedMedia.forcedColors !== void 0 ? this._emulatedMedia.forcedColors : contextOptions.forcedColors ?? "none",
	      contrast: this._emulatedMedia.contrast !== void 0 ? this._emulatedMedia.contrast : contextOptions.contrast ?? "no-preference"
	    };
	  }
	  async setViewportSize(viewportSize) {
	    this._emulatedSize = { viewport: { ...viewportSize }, screen: { ...viewportSize } };
	    await this._delegate.updateEmulatedViewportSize();
	  }
	  viewportSize() {
	    return this.emulatedSize()?.viewport || null;
	  }
	  emulatedSize() {
	    if (this._emulatedSize)
	      return this._emulatedSize;
	    const contextOptions = this._browserContext._options;
	    return contextOptions.viewport ? { viewport: contextOptions.viewport, screen: contextOptions.screen || contextOptions.viewport } : null;
	  }
	  async bringToFront() {
	    await this._delegate.bringToFront();
	  }
	  async addInitScript(source, name) {
	    const initScript = new InitScript(source, false, name);
	    this.initScripts.push(initScript);
	    await this._delegate.addInitScript(initScript);
	  }
	  async _removeInitScripts() {
	    this.initScripts = this.initScripts.filter((script) => script.internal);
	    await this._delegate.removeNonInternalInitScripts();
	  }
	  needsRequestInterception() {
	    return !!this._clientRequestInterceptor || !!this._serverRequestInterceptor || !!this._browserContext._requestInterceptor;
	  }
	  async setClientRequestInterceptor(handler) {
	    this._clientRequestInterceptor = handler;
	    await this._delegate.updateRequestInterception();
	  }
	  async _setServerRequestInterceptor(handler) {
	    this._serverRequestInterceptor = handler;
	    await this._delegate.updateRequestInterception();
	  }
	  async expectScreenshot(metadata, options = {}) {
	    const locator = options.locator;
	    const rafrafScreenshot = locator ? async (progress, timeout) => {
	      return await locator.frame.rafrafTimeoutScreenshotElementWithProgress(progress, locator.selector, timeout, options || {});
	    } : async (progress, timeout) => {
	      await this.performActionPreChecks(progress);
	      await this.mainFrame().rafrafTimeout(timeout);
	      return await this._screenshotter.screenshotPage(progress, options || {});
	    };
	    const comparator = (0, import_comparators.getComparator)("image/png");
	    const controller = new import_progress.ProgressController(metadata, this);
	    if (!options.expected && options.isNot)
	      return { errorMessage: '"not" matcher requires expected result' };
	    try {
	      const format = (0, import_screenshotter.validateScreenshotOptions)(options || {});
	      if (format !== "png")
	        throw new Error("Only PNG screenshots are supported");
	    } catch (error) {
	      return { errorMessage: error.message };
	    }
	    let intermediateResult = void 0;
	    const areEqualScreenshots = (actual, expected, previous) => {
	      const comparatorResult = actual && expected ? comparator(actual, expected, options) : void 0;
	      if (comparatorResult !== void 0 && !!comparatorResult === !!options.isNot)
	        return true;
	      if (comparatorResult)
	        intermediateResult = { errorMessage: comparatorResult.errorMessage, diff: comparatorResult.diff, actual, previous };
	      return false;
	    };
	    const callTimeout = this._timeoutSettings.timeout(options);
	    return controller.run(async (progress) => {
	      let actual;
	      let previous;
	      const pollIntervals = [0, 100, 250, 500];
	      progress.log(`${metadata.apiName}${callTimeout ? ` with timeout ${callTimeout}ms` : ""}`);
	      if (options.expected)
	        progress.log(`  verifying given screenshot expectation`);
	      else
	        progress.log(`  generating new stable screenshot expectation`);
	      let isFirstIteration = true;
	      while (true) {
	        progress.throwIfAborted();
	        if (this.isClosed())
	          throw new Error("The page has closed");
	        const screenshotTimeout = pollIntervals.shift() ?? 1e3;
	        if (screenshotTimeout)
	          progress.log(`waiting ${screenshotTimeout}ms before taking screenshot`);
	        previous = actual;
	        actual = await rafrafScreenshot(progress, screenshotTimeout).catch((e) => {
	          progress.log(`failed to take screenshot - ` + e.message);
	          return void 0;
	        });
	        if (!actual)
	          continue;
	        const expectation = options.expected && isFirstIteration ? options.expected : previous;
	        if (areEqualScreenshots(actual, expectation, previous))
	          break;
	        if (intermediateResult)
	          progress.log(intermediateResult.errorMessage);
	        isFirstIteration = false;
	      }
	      if (!isFirstIteration)
	        progress.log(`captured a stable screenshot`);
	      if (!options.expected)
	        return { actual };
	      if (isFirstIteration) {
	        progress.log(`screenshot matched expectation`);
	        return {};
	      }
	      if (areEqualScreenshots(actual, options.expected, void 0)) {
	        progress.log(`screenshot matched expectation`);
	        return {};
	      }
	      throw new Error(intermediateResult.errorMessage);
	    }, callTimeout).catch((e) => {
	      if (js.isJavaScriptErrorInEvaluate(e) || (0, import_selectorParser.isInvalidSelectorError)(e))
	        throw e;
	      let errorMessage = e.message;
	      if (e instanceof import_errors.TimeoutError && intermediateResult?.previous)
	        errorMessage = `Failed to take two consecutive stable screenshots.`;
	      return {
	        log: (0, import_callLog.compressCallLog)(e.message ? [...metadata.log, e.message] : metadata.log),
	        ...intermediateResult,
	        errorMessage,
	        timedOut: e instanceof import_errors.TimeoutError
	      };
	    });
	  }
	  async screenshot(metadata, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(
	      (progress) => this._screenshotter.screenshotPage(progress, options),
	      this._timeoutSettings.timeout(options)
	    );
	  }
	  async close(metadata, options = {}) {
	    if (this._closedState === "closed")
	      return;
	    if (options.reason)
	      this._closeReason = options.reason;
	    const runBeforeUnload = !!options.runBeforeUnload;
	    if (this._closedState !== "closing") {
	      this._closedState = "closing";
	      await this._delegate.closePage(runBeforeUnload).catch((e) => import_debugLogger.debugLogger.log("error", e));
	    }
	    if (!runBeforeUnload)
	      await this._closedPromise;
	    if (this._ownedContext)
	      await this._ownedContext.close(options);
	  }
	  isClosed() {
	    return this._closedState === "closed";
	  }
	  hasCrashed() {
	    return this._crashed;
	  }
	  isClosedOrClosingOrCrashed() {
	    return this._closedState !== "open" || this._crashed;
	  }
	  _addWorker(workerId, worker) {
	    this._workers.set(workerId, worker);
	    this.emit(Page.Events.Worker, worker);
	  }
	  _removeWorker(workerId) {
	    const worker = this._workers.get(workerId);
	    if (!worker)
	      return;
	    worker.didClose();
	    this._workers.delete(workerId);
	  }
	  _clearWorkers() {
	    for (const [workerId, worker] of this._workers) {
	      worker.didClose();
	      this._workers.delete(workerId);
	    }
	  }
	  async setFileChooserIntercepted(enabled) {
	    this._interceptFileChooser = enabled;
	    await this._delegate.updateFileChooserInterception();
	  }
	  fileChooserIntercepted() {
	    return this._interceptFileChooser;
	  }
	  frameNavigatedToNewDocument(frame) {
	    this.emit(Page.Events.InternalFrameNavigatedToNewDocument, frame);
	    const origin = frame.origin();
	    if (origin)
	      this._browserContext.addVisitedOrigin(origin);
	  }
	  allInitScripts() {
	    const bindings = [...this._browserContext._pageBindings.values(), ...this._pageBindings.values()];
	    return [kBuiltinsScript, ...bindings.map((binding) => binding.initScript), ...this._browserContext.initScripts, ...this.initScripts];
	  }
	  getBinding(name) {
	    return this._pageBindings.get(name) || this._browserContext._pageBindings.get(name);
	  }
	  setScreencastOptions(options) {
	    this._delegate.setScreencastOptions(options).catch((e) => import_debugLogger.debugLogger.log("error", e));
	    this._frameThrottler.setThrottlingEnabled(!!options);
	  }
	  throttleScreencastFrameAck(ack) {
	    this._frameThrottler.ack(ack);
	  }
	  temporarilyDisableTracingScreencastThrottling() {
	    this._frameThrottler.recharge();
	  }
	  async safeNonStallingEvaluateInAllFrames(expression, world, options = {}) {
	    await Promise.all(this.frames().map(async (frame) => {
	      try {
	        await frame.nonStallingEvaluateInExistingContext(expression, world);
	      } catch (e) {
	        if (options.throwOnJSErrors && js.isJavaScriptErrorInEvaluate(e))
	          throw e;
	      }
	    }));
	  }
	  async hideHighlight() {
	    await Promise.all(this.frames().map((frame) => frame.hideHighlight().catch(() => {
	    })));
	  }
	  markAsServerSideOnly() {
	    this._isServerSideOnly = true;
	  }
	}
	class Worker extends import_instrumentation.SdkObject {
	  constructor(parent, url) {
	    super(parent, "worker");
	    this._existingExecutionContext = null;
	    this.openScope = new import_utils.LongStandingScope();
	    this._url = url;
	    this._executionContextCallback = () => {
	    };
	    this._executionContextPromise = new Promise((x) => this._executionContextCallback = x);
	  }
	  static {
	    this.Events = {
	      Close: "close"
	    };
	  }
	  _createExecutionContext(delegate) {
	    this._existingExecutionContext = new js.ExecutionContext(this, delegate, "worker");
	    this._executionContextCallback(this._existingExecutionContext);
	    return this._existingExecutionContext;
	  }
	  url() {
	    return this._url;
	  }
	  didClose() {
	    if (this._existingExecutionContext)
	      this._existingExecutionContext.contextDestroyed("Worker was closed");
	    this.emit(Worker.Events.Close, this);
	    this.openScope.close(new Error("Worker closed"));
	  }
	  async evaluateExpression(expression, isFunction, arg) {
	    return js.evaluateExpression(await this._executionContextPromise, expression, { returnByValue: true, isFunction }, arg);
	  }
	  async evaluateExpressionHandle(expression, isFunction, arg) {
	    return js.evaluateExpression(await this._executionContextPromise, expression, { returnByValue: false, isFunction }, arg);
	  }
	}
	class PageBinding {
	  static {
	    this.kPlaywrightBinding = "__playwright__binding__";
	  }
	  constructor(name, playwrightFunction, needsHandle) {
	    this.name = name;
	    this.playwrightFunction = playwrightFunction;
	    this.initScript = new InitScript(
	      (0, import_pageBinding.createPageBindingScript)(PageBinding.kPlaywrightBinding, name, needsHandle),
	      true
	      /* internal */
	    );
	    this.needsHandle = needsHandle;
	    this.internal = name.startsWith("__pw");
	  }
	  static async dispatch(page, payload, context) {
	    const { name, seq, serializedArgs } = JSON.parse(payload);
	    try {
	      (0, import_utils.assert)(context.world);
	      const binding = page.getBinding(name);
	      if (!binding)
	        throw new Error(`Function "${name}" is not exposed`);
	      let result;
	      if (binding.needsHandle) {
	        const handle = await context.evaluateHandle(import_pageBinding.takeBindingHandle, { name, seq }).catch((e) => null);
	        result = await binding.playwrightFunction({ frame: context.frame, page, context: page._browserContext }, handle);
	      } else {
	        if (!Array.isArray(serializedArgs))
	          throw new Error(`serializedArgs is not an array. This can happen when Array.prototype.toJSON is defined incorrectly`);
	        const args = serializedArgs.map((a) => js.parseEvaluationResultValue(a));
	        result = await binding.playwrightFunction({ frame: context.frame, page, context: page._browserContext }, ...args);
	      }
	      context.evaluate(import_pageBinding.deliverBindingResult, { name, seq, result }).catch((e) => import_debugLogger.debugLogger.log("error", e));
	    } catch (error) {
	      context.evaluate(import_pageBinding.deliverBindingResult, { name, seq, error }).catch((e) => import_debugLogger.debugLogger.log("error", e));
	    }
	  }
	}
	class InitScript {
	  constructor(source, internal, name) {
	    const guid = (0, import_crypto.createGuid)();
	    this.source = `(() => {
      globalThis.__pwInitScripts = globalThis.__pwInitScripts || {};
      const hasInitScript = globalThis.__pwInitScripts[${JSON.stringify(guid)}];
      if (hasInitScript)
        return;
      globalThis.__pwInitScripts[${JSON.stringify(guid)}] = true;
      ${source}
    })();`;
	    this.internal = !!internal;
	    this.name = name;
	  }
	}
	const kBuiltinsScript = new InitScript(
	  `(${import_builtins.builtins})()`,
	  true
	  /* internal */
	);
	class FrameThrottler {
	  constructor(nonThrottledFrames, defaultInterval, throttlingInterval) {
	    this._acks = [];
	    this._throttlingEnabled = false;
	    this._nonThrottledFrames = nonThrottledFrames;
	    this._budget = nonThrottledFrames;
	    this._defaultInterval = defaultInterval;
	    this._throttlingInterval = throttlingInterval;
	    this._tick();
	  }
	  dispose() {
	    if (this._timeoutId) {
	      clearTimeout(this._timeoutId);
	      this._timeoutId = void 0;
	    }
	  }
	  setThrottlingEnabled(enabled) {
	    this._throttlingEnabled = enabled;
	  }
	  recharge() {
	    for (const ack of this._acks)
	      ack();
	    this._acks = [];
	    this._budget = this._nonThrottledFrames;
	    if (this._timeoutId) {
	      clearTimeout(this._timeoutId);
	      this._tick();
	    }
	  }
	  ack(ack) {
	    if (!this._timeoutId) {
	      ack();
	      return;
	    }
	    this._acks.push(ack);
	  }
	  _tick() {
	    const ack = this._acks.shift();
	    if (ack) {
	      --this._budget;
	      ack();
	    }
	    if (this._throttlingEnabled && this._budget <= 0) {
	      this._timeoutId = setTimeout(() => this._tick(), this._throttlingInterval);
	    } else {
	      this._timeoutId = setTimeout(() => this._tick(), this._defaultInterval);
	    }
	  }
	}
	return page$1;
}

var types$1;
var hasRequiredTypes$1;

function requireTypes$1 () {
	if (hasRequiredTypes$1) return types$1;
	hasRequiredTypes$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var types_exports = {};
	__export(types_exports, {
	  kLifecycleEvents: () => kLifecycleEvents
	});
	types$1 = __toCommonJS(types_exports);
	const kLifecycleEvents = /* @__PURE__ */ new Set(["load", "domcontentloaded", "networkidle", "commit"]);
	return types$1;
}

var frames;
var hasRequiredFrames;

function requireFrames () {
	if (hasRequiredFrames) return frames;
	hasRequiredFrames = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var frames_exports = {};
	__export(frames_exports, {
	  Frame: () => Frame,
	  FrameManager: () => FrameManager,
	  NavigationAbortedError: () => NavigationAbortedError
	});
	frames = __toCommonJS(frames_exports);
	var import_browserContext = requireBrowserContext$1();
	var dom = __toESM(requireDom());
	var import_errors = requireErrors$1();
	var import_fileUploadUtils = requireFileUploadUtils();
	var import_frameSelectors = requireFrameSelectors();
	var import_helper = requireHelper();
	var import_instrumentation = requireInstrumentation();
	var js = __toESM(requireJavascript$1());
	var network = __toESM(requireNetwork$1());
	var import_page = requirePage$1();
	var import_progress = requireProgress();
	var types = __toESM(requireTypes$1());
	var import_utils = requireUtils();
	var import_protocolError = requireProtocolError();
	var import_debugLogger = requireDebugLogger();
	var import_eventsHelper = requireEventsHelper();
	var import_selectorParser = requireSelectorParser();
	var import_manualPromise = requireManualPromise();
	var import_callLog = requireCallLog();
	class NavigationAbortedError extends Error {
	  constructor(documentId, message) {
	    super(message);
	    this.documentId = documentId;
	  }
	}
	const kDummyFrameId = "<dummy>";
	class FrameManager {
	  constructor(page) {
	    this._frames = /* @__PURE__ */ new Map();
	    this._consoleMessageTags = /* @__PURE__ */ new Map();
	    this._signalBarriers = /* @__PURE__ */ new Set();
	    this._webSockets = /* @__PURE__ */ new Map();
	    this._openedDialogs = /* @__PURE__ */ new Set();
	    this._closeAllOpeningDialogs = false;
	    this._page = page;
	    this._mainFrame = void 0;
	  }
	  createDummyMainFrameIfNeeded() {
	    if (!this._mainFrame)
	      this.frameAttached(kDummyFrameId, null);
	  }
	  dispose() {
	    for (const frame of this._frames.values()) {
	      frame._stopNetworkIdleTimer();
	      frame._invalidateNonStallingEvaluations("Target crashed");
	    }
	  }
	  mainFrame() {
	    return this._mainFrame;
	  }
	  frames() {
	    const frames = [];
	    collect(this._mainFrame);
	    return frames;
	    function collect(frame) {
	      frames.push(frame);
	      for (const subframe of frame.childFrames())
	        collect(subframe);
	    }
	  }
	  frame(frameId) {
	    return this._frames.get(frameId) || null;
	  }
	  frameAttached(frameId, parentFrameId) {
	    const parentFrame = parentFrameId ? this._frames.get(parentFrameId) : null;
	    if (!parentFrame) {
	      if (this._mainFrame) {
	        this._frames.delete(this._mainFrame._id);
	        this._mainFrame._id = frameId;
	      } else {
	        (0, import_utils.assert)(!this._frames.has(frameId));
	        this._mainFrame = new Frame(this._page, frameId, parentFrame);
	      }
	      this._frames.set(frameId, this._mainFrame);
	      return this._mainFrame;
	    } else {
	      (0, import_utils.assert)(!this._frames.has(frameId));
	      const frame = new Frame(this._page, frameId, parentFrame);
	      this._frames.set(frameId, frame);
	      this._page.emit(import_page.Page.Events.FrameAttached, frame);
	      return frame;
	    }
	  }
	  async waitForSignalsCreatedBy(progress, waitAfter, action) {
	    if (!waitAfter)
	      return action();
	    const barrier = new SignalBarrier(progress);
	    this._signalBarriers.add(barrier);
	    if (progress)
	      progress.cleanupWhenAborted(() => this._signalBarriers.delete(barrier));
	    const result = await action();
	    await this._page._delegate.inputActionEpilogue();
	    await barrier.waitFor();
	    this._signalBarriers.delete(barrier);
	    await new Promise((0, import_utils.makeWaitForNextTask)());
	    return result;
	  }
	  frameWillPotentiallyRequestNavigation() {
	    for (const barrier of this._signalBarriers)
	      barrier.retain();
	  }
	  frameDidPotentiallyRequestNavigation() {
	    for (const barrier of this._signalBarriers)
	      barrier.release();
	  }
	  frameRequestedNavigation(frameId, documentId) {
	    const frame = this._frames.get(frameId);
	    if (!frame)
	      return;
	    for (const barrier of this._signalBarriers)
	      barrier.addFrameNavigation(frame);
	    if (frame.pendingDocument() && frame.pendingDocument().documentId === documentId) {
	      return;
	    }
	    const request = documentId ? Array.from(frame._inflightRequests).find((request2) => request2._documentId === documentId) : void 0;
	    frame.setPendingDocument({ documentId, request });
	  }
	  frameCommittedNewDocumentNavigation(frameId, url, name, documentId, initial) {
	    const frame = this._frames.get(frameId);
	    this.removeChildFramesRecursively(frame);
	    this.clearWebSockets(frame);
	    frame._url = url;
	    frame._name = name;
	    let keepPending;
	    const pendingDocument = frame.pendingDocument();
	    if (pendingDocument) {
	      if (pendingDocument.documentId === void 0) {
	        pendingDocument.documentId = documentId;
	      }
	      if (pendingDocument.documentId === documentId) {
	        frame._currentDocument = pendingDocument;
	      } else {
	        keepPending = pendingDocument;
	        frame._currentDocument = { documentId, request: void 0 };
	      }
	      frame.setPendingDocument(void 0);
	    } else {
	      frame._currentDocument = { documentId, request: void 0 };
	    }
	    frame._onClearLifecycle();
	    const navigationEvent = { url, name, newDocument: frame._currentDocument, isPublic: true };
	    this._fireInternalFrameNavigation(frame, navigationEvent);
	    if (!initial) {
	      import_debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
	      this._page.frameNavigatedToNewDocument(frame);
	    }
	    frame.setPendingDocument(keepPending);
	  }
	  frameCommittedSameDocumentNavigation(frameId, url) {
	    const frame = this._frames.get(frameId);
	    if (!frame)
	      return;
	    const pending = frame.pendingDocument();
	    if (pending && pending.documentId === void 0 && pending.request === void 0) {
	      frame.setPendingDocument(void 0);
	    }
	    frame._url = url;
	    const navigationEvent = { url, name: frame._name, isPublic: true };
	    this._fireInternalFrameNavigation(frame, navigationEvent);
	    import_debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
	  }
	  frameAbortedNavigation(frameId, errorText, documentId) {
	    const frame = this._frames.get(frameId);
	    if (!frame || !frame.pendingDocument())
	      return;
	    if (documentId !== void 0 && frame.pendingDocument().documentId !== documentId)
	      return;
	    const navigationEvent = {
	      url: frame._url,
	      name: frame._name,
	      newDocument: frame.pendingDocument(),
	      error: new NavigationAbortedError(documentId, errorText),
	      isPublic: !(documentId && frame._redirectedNavigations.has(documentId))
	    };
	    frame.setPendingDocument(void 0);
	    this._fireInternalFrameNavigation(frame, navigationEvent);
	  }
	  frameDetached(frameId) {
	    const frame = this._frames.get(frameId);
	    if (frame) {
	      this._removeFramesRecursively(frame);
	      this._page.mainFrame()._recalculateNetworkIdle();
	    }
	  }
	  frameLifecycleEvent(frameId, event) {
	    const frame = this._frames.get(frameId);
	    if (frame)
	      frame._onLifecycleEvent(event);
	  }
	  requestStarted(request, route) {
	    const frame = request.frame();
	    this._inflightRequestStarted(request);
	    if (request._documentId)
	      frame.setPendingDocument({ documentId: request._documentId, request });
	    if (request._isFavicon) {
	      route?.abort("aborted").catch(() => {
	      });
	      return;
	    }
	    this._page.emitOnContext(import_browserContext.BrowserContext.Events.Request, request);
	    if (route) {
	      const r = new network.Route(request, route);
	      if (this._page._serverRequestInterceptor?.(r, request))
	        return;
	      if (this._page._clientRequestInterceptor?.(r, request))
	        return;
	      if (this._page._browserContext._requestInterceptor?.(r, request))
	        return;
	      r.continue({ isFallback: true }).catch(() => {
	      });
	    }
	  }
	  requestReceivedResponse(response) {
	    if (response.request()._isFavicon)
	      return;
	    this._page.emitOnContext(import_browserContext.BrowserContext.Events.Response, response);
	  }
	  reportRequestFinished(request, response) {
	    this._inflightRequestFinished(request);
	    if (request._isFavicon)
	      return;
	    this._page.emitOnContext(import_browserContext.BrowserContext.Events.RequestFinished, { request, response });
	  }
	  requestFailed(request, canceled) {
	    const frame = request.frame();
	    this._inflightRequestFinished(request);
	    if (frame.pendingDocument() && frame.pendingDocument().request === request) {
	      let errorText = request.failure().errorText;
	      if (canceled)
	        errorText += "; maybe frame was detached?";
	      this.frameAbortedNavigation(frame._id, errorText, frame.pendingDocument().documentId);
	    }
	    if (request._isFavicon)
	      return;
	    this._page.emitOnContext(import_browserContext.BrowserContext.Events.RequestFailed, request);
	  }
	  dialogDidOpen(dialog) {
	    for (const frame of this._frames.values())
	      frame._invalidateNonStallingEvaluations("JavaScript dialog interrupted evaluation");
	    if (this._closeAllOpeningDialogs)
	      dialog.close().then(() => {
	      });
	    else
	      this._openedDialogs.add(dialog);
	  }
	  dialogWillClose(dialog) {
	    this._openedDialogs.delete(dialog);
	  }
	  async closeOpenDialogs() {
	    await Promise.all([...this._openedDialogs].map((dialog) => dialog.close())).catch(() => {
	    });
	    this._openedDialogs.clear();
	  }
	  setCloseAllOpeningDialogs(closeDialogs) {
	    this._closeAllOpeningDialogs = closeDialogs;
	  }
	  removeChildFramesRecursively(frame) {
	    for (const child of frame.childFrames())
	      this._removeFramesRecursively(child);
	  }
	  _removeFramesRecursively(frame) {
	    this.removeChildFramesRecursively(frame);
	    frame._onDetached();
	    this._frames.delete(frame._id);
	    if (!this._page.isClosed())
	      this._page.emit(import_page.Page.Events.FrameDetached, frame);
	  }
	  _inflightRequestFinished(request) {
	    const frame = request.frame();
	    if (request._isFavicon)
	      return;
	    if (!frame._inflightRequests.has(request))
	      return;
	    frame._inflightRequests.delete(request);
	    if (frame._inflightRequests.size === 0)
	      frame._startNetworkIdleTimer();
	  }
	  _inflightRequestStarted(request) {
	    const frame = request.frame();
	    if (request._isFavicon)
	      return;
	    frame._inflightRequests.add(request);
	    if (frame._inflightRequests.size === 1)
	      frame._stopNetworkIdleTimer();
	  }
	  interceptConsoleMessage(message) {
	    if (message.type() !== "debug")
	      return false;
	    const tag = message.text();
	    const handler = this._consoleMessageTags.get(tag);
	    if (!handler)
	      return false;
	    this._consoleMessageTags.delete(tag);
	    handler();
	    return true;
	  }
	  clearWebSockets(frame) {
	    if (frame.parentFrame())
	      return;
	    this._webSockets.clear();
	  }
	  onWebSocketCreated(requestId, url) {
	    const ws = new network.WebSocket(this._page, url);
	    this._webSockets.set(requestId, ws);
	  }
	  onWebSocketRequest(requestId) {
	    const ws = this._webSockets.get(requestId);
	    if (ws && ws.markAsNotified())
	      this._page.emit(import_page.Page.Events.WebSocket, ws);
	  }
	  onWebSocketResponse(requestId, status, statusText) {
	    const ws = this._webSockets.get(requestId);
	    if (status < 400)
	      return;
	    if (ws)
	      ws.error(`${statusText}: ${status}`);
	  }
	  onWebSocketFrameSent(requestId, opcode, data) {
	    const ws = this._webSockets.get(requestId);
	    if (ws)
	      ws.frameSent(opcode, data);
	  }
	  webSocketFrameReceived(requestId, opcode, data) {
	    const ws = this._webSockets.get(requestId);
	    if (ws)
	      ws.frameReceived(opcode, data);
	  }
	  webSocketClosed(requestId) {
	    const ws = this._webSockets.get(requestId);
	    if (ws)
	      ws.closed();
	    this._webSockets.delete(requestId);
	  }
	  webSocketError(requestId, errorMessage) {
	    const ws = this._webSockets.get(requestId);
	    if (ws)
	      ws.error(errorMessage);
	  }
	  _fireInternalFrameNavigation(frame, event) {
	    frame.emit(Frame.Events.InternalNavigation, event);
	  }
	}
	class Frame extends import_instrumentation.SdkObject {
	  constructor(page, id, parentFrame) {
	    super(page, "frame");
	    this._firedLifecycleEvents = /* @__PURE__ */ new Set();
	    this._firedNetworkIdleSelf = false;
	    this._url = "";
	    this._contextData = /* @__PURE__ */ new Map();
	    this._childFrames = /* @__PURE__ */ new Set();
	    this._name = "";
	    this._inflightRequests = /* @__PURE__ */ new Set();
	    this._setContentCounter = 0;
	    this._detachedScope = new import_utils.LongStandingScope();
	    this._raceAgainstEvaluationStallingEventsPromises = /* @__PURE__ */ new Set();
	    this._redirectedNavigations = /* @__PURE__ */ new Map();
	    this.attribution.frame = this;
	    this._id = id;
	    this._page = page;
	    this._parentFrame = parentFrame;
	    this._currentDocument = { documentId: void 0, request: void 0 };
	    this.selectors = new import_frameSelectors.FrameSelectors(this);
	    this._contextData.set("main", { contextPromise: new import_manualPromise.ManualPromise(), context: null });
	    this._contextData.set("utility", { contextPromise: new import_manualPromise.ManualPromise(), context: null });
	    this._setContext("main", null);
	    this._setContext("utility", null);
	    if (this._parentFrame)
	      this._parentFrame._childFrames.add(this);
	    this._firedLifecycleEvents.add("commit");
	    if (id !== kDummyFrameId)
	      this._startNetworkIdleTimer();
	  }
	  static {
	    this.Events = {
	      InternalNavigation: "internalnavigation",
	      AddLifecycle: "addlifecycle",
	      RemoveLifecycle: "removelifecycle"
	    };
	  }
	  isDetached() {
	    return this._detachedScope.isClosed();
	  }
	  _onLifecycleEvent(event) {
	    if (this._firedLifecycleEvents.has(event))
	      return;
	    this._firedLifecycleEvents.add(event);
	    this.emit(Frame.Events.AddLifecycle, event);
	    if (this === this._page.mainFrame() && this._url !== "about:blank")
	      import_debugLogger.debugLogger.log("api", `  "${event}" event fired`);
	    this._page.mainFrame()._recalculateNetworkIdle();
	  }
	  _onClearLifecycle() {
	    for (const event of this._firedLifecycleEvents)
	      this.emit(Frame.Events.RemoveLifecycle, event);
	    this._firedLifecycleEvents.clear();
	    this._inflightRequests = new Set(Array.from(this._inflightRequests).filter((request) => request === this._currentDocument.request));
	    this._stopNetworkIdleTimer();
	    if (this._inflightRequests.size === 0)
	      this._startNetworkIdleTimer();
	    this._page.mainFrame()._recalculateNetworkIdle(this);
	    this._onLifecycleEvent("commit");
	  }
	  setPendingDocument(documentInfo) {
	    this._pendingDocument = documentInfo;
	    if (documentInfo)
	      this._invalidateNonStallingEvaluations("Navigation interrupted the evaluation");
	  }
	  pendingDocument() {
	    return this._pendingDocument;
	  }
	  _invalidateNonStallingEvaluations(message) {
	    if (!this._raceAgainstEvaluationStallingEventsPromises.size)
	      return;
	    const error = new Error(message);
	    for (const promise of this._raceAgainstEvaluationStallingEventsPromises)
	      promise.reject(error);
	  }
	  async raceAgainstEvaluationStallingEvents(cb) {
	    if (this._pendingDocument)
	      throw new Error("Frame is currently attempting a navigation");
	    if (this._page._frameManager._openedDialogs.size)
	      throw new Error("Open JavaScript dialog prevents evaluation");
	    const promise = new import_manualPromise.ManualPromise();
	    this._raceAgainstEvaluationStallingEventsPromises.add(promise);
	    try {
	      return await Promise.race([
	        cb(),
	        promise
	      ]);
	    } finally {
	      this._raceAgainstEvaluationStallingEventsPromises.delete(promise);
	    }
	  }
	  nonStallingRawEvaluateInExistingMainContext(expression) {
	    return this.raceAgainstEvaluationStallingEvents(() => {
	      const context = this._existingMainContext();
	      if (!context)
	        throw new Error("Frame does not yet have a main execution context");
	      return context.rawEvaluateJSON(expression);
	    });
	  }
	  nonStallingEvaluateInExistingContext(expression, world) {
	    return this.raceAgainstEvaluationStallingEvents(() => {
	      const context = this._contextData.get(world)?.context;
	      if (!context)
	        throw new Error("Frame does not yet have the execution context");
	      return context.evaluateExpression(expression, { isFunction: false });
	    });
	  }
	  _recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle) {
	    let isNetworkIdle = this._firedNetworkIdleSelf;
	    for (const child of this._childFrames) {
	      child._recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle);
	      if (!child._firedLifecycleEvents.has("networkidle"))
	        isNetworkIdle = false;
	    }
	    if (isNetworkIdle && !this._firedLifecycleEvents.has("networkidle")) {
	      this._firedLifecycleEvents.add("networkidle");
	      this.emit(Frame.Events.AddLifecycle, "networkidle");
	      if (this === this._page.mainFrame() && this._url !== "about:blank")
	        import_debugLogger.debugLogger.log("api", `  "networkidle" event fired`);
	    }
	    if (frameThatAllowsRemovingNetworkIdle !== this && this._firedLifecycleEvents.has("networkidle") && !isNetworkIdle) {
	      this._firedLifecycleEvents.delete("networkidle");
	      this.emit(Frame.Events.RemoveLifecycle, "networkidle");
	    }
	  }
	  async raceNavigationAction(progress, options, action) {
	    return import_utils.LongStandingScope.raceMultiple([
	      this._detachedScope,
	      this._page.openScope
	    ], action().catch((e) => {
	      if (e instanceof NavigationAbortedError && e.documentId) {
	        const data = this._redirectedNavigations.get(e.documentId);
	        if (data) {
	          progress.log(`waiting for redirected navigation to "${data.url}"`);
	          return data.gotoPromise;
	        }
	      }
	      throw e;
	    }));
	  }
	  redirectNavigation(url, documentId, referer) {
	    const controller = new import_progress.ProgressController((0, import_instrumentation.serverSideCallMetadata)(), this);
	    const data = {
	      url,
	      gotoPromise: controller.run((progress) => this._gotoAction(progress, url, { referer }), 0)
	    };
	    this._redirectedNavigations.set(documentId, data);
	    data.gotoPromise.finally(() => this._redirectedNavigations.delete(documentId));
	  }
	  async goto(metadata, url, options = {}) {
	    const constructedNavigationURL = (0, import_utils.constructURLBasedOnBaseURL)(this._page._browserContext._options.baseURL, url);
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run((progress) => this._goto(progress, constructedNavigationURL, options), this._page._timeoutSettings.navigationTimeout(options));
	  }
	  async _goto(progress, url, options) {
	    return this.raceNavigationAction(progress, options, async () => this._gotoAction(progress, url, options));
	  }
	  async _gotoAction(progress, url, options) {
	    const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
	    progress.log(`navigating to "${url}", waiting until "${waitUntil}"`);
	    const headers = this._page.extraHTTPHeaders() || [];
	    const refererHeader = headers.find((h) => h.name.toLowerCase() === "referer");
	    let referer = refererHeader ? refererHeader.value : void 0;
	    if (options.referer !== void 0) {
	      if (referer !== void 0 && referer !== options.referer)
	        throw new Error('"referer" is already specified as extra HTTP header');
	      referer = options.referer;
	    }
	    url = import_helper.helper.completeUserURL(url);
	    const navigationEvents = [];
	    const collectNavigations = (arg) => navigationEvents.push(arg);
	    this.on(Frame.Events.InternalNavigation, collectNavigations);
	    const navigateResult = await this._page._delegate.navigateFrame(this, url, referer).finally(
	      () => this.off(Frame.Events.InternalNavigation, collectNavigations)
	    );
	    let event;
	    if (navigateResult.newDocumentId) {
	      const predicate = (event2) => {
	        return event2.newDocument && (event2.newDocument.documentId === navigateResult.newDocumentId || !event2.error);
	      };
	      const events = navigationEvents.filter(predicate);
	      if (events.length)
	        event = events[0];
	      else
	        event = await import_helper.helper.waitForEvent(progress, this, Frame.Events.InternalNavigation, predicate).promise;
	      if (event.newDocument.documentId !== navigateResult.newDocumentId) {
	        throw new NavigationAbortedError(navigateResult.newDocumentId, `Navigation to "${url}" is interrupted by another navigation to "${event.url}"`);
	      }
	      if (event.error)
	        throw event.error;
	    } else {
	      const predicate = (e) => !e.newDocument;
	      const events = navigationEvents.filter(predicate);
	      if (events.length)
	        event = events[0];
	      else
	        event = await import_helper.helper.waitForEvent(progress, this, Frame.Events.InternalNavigation, predicate).promise;
	    }
	    if (!this._firedLifecycleEvents.has(waitUntil))
	      await import_helper.helper.waitForEvent(progress, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
	    const request = event.newDocument ? event.newDocument.request : void 0;
	    const response = request ? request._finalRequest().response() : null;
	    return response;
	  }
	  async _waitForNavigation(progress, requiresNewDocument, options) {
	    const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
	    progress.log(`waiting for navigation until "${waitUntil}"`);
	    const navigationEvent = await import_helper.helper.waitForEvent(progress, this, Frame.Events.InternalNavigation, (event) => {
	      if (event.error)
	        return true;
	      if (requiresNewDocument && !event.newDocument)
	        return false;
	      progress.log(`  navigated to "${this._url}"`);
	      return true;
	    }).promise;
	    if (navigationEvent.error)
	      throw navigationEvent.error;
	    if (!this._firedLifecycleEvents.has(waitUntil))
	      await import_helper.helper.waitForEvent(progress, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
	    const request = navigationEvent.newDocument ? navigationEvent.newDocument.request : void 0;
	    return request ? request._finalRequest().response() : null;
	  }
	  async _waitForLoadState(progress, state) {
	    const waitUntil = verifyLifecycle("state", state);
	    if (!this._firedLifecycleEvents.has(waitUntil))
	      await import_helper.helper.waitForEvent(progress, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
	  }
	  async frameElement() {
	    return this._page._delegate.getFrameElement(this);
	  }
	  _context(world) {
	    return this._contextData.get(world).contextPromise.then((contextOrDestroyedReason) => {
	      if (contextOrDestroyedReason instanceof js.ExecutionContext)
	        return contextOrDestroyedReason;
	      throw new Error(contextOrDestroyedReason.destroyedReason);
	    });
	  }
	  _mainContext() {
	    return this._context("main");
	  }
	  _existingMainContext() {
	    return this._contextData.get("main")?.context || null;
	  }
	  _utilityContext() {
	    return this._context("utility");
	  }
	  async evaluateExpression(expression, options = {}, arg) {
	    const context = await this._context(options.world ?? "main");
	    const value = await context.evaluateExpression(expression, options, arg);
	    return value;
	  }
	  async evaluateExpressionHandle(expression, options = {}, arg) {
	    const context = await this._context(options.world ?? "main");
	    const value = await context.evaluateExpressionHandle(expression, options, arg);
	    return value;
	  }
	  async querySelector(selector, options) {
	    import_debugLogger.debugLogger.log("api", `    finding element using the selector "${selector}"`);
	    return this.selectors.query(selector, options);
	  }
	  async waitForSelector(metadata, selector, options, scope) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    if (options.visibility)
	      throw new Error("options.visibility is not supported, did you mean options.state?");
	    if (options.waitFor && options.waitFor !== "visible")
	      throw new Error("options.waitFor is not supported, did you mean options.state?");
	    const { state = "visible" } = options;
	    if (!["attached", "detached", "visible", "hidden"].includes(state))
	      throw new Error(`state: expected one of (attached|detached|visible|hidden)`);
	    return controller.run(async (progress) => {
	      progress.log(`waiting for ${this._asLocator(selector)}${state === "attached" ? "" : " to be " + state}`);
	      return await this.waitForSelectorInternal(progress, selector, true, options, scope);
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async waitForSelectorInternal(progress, selector, performActionPreChecks, options, scope) {
	    const { state = "visible" } = options;
	    const promise = this.retryWithProgressAndTimeouts(progress, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
	      if (performActionPreChecks)
	        await this._page.performActionPreChecks(progress);
	      const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
	      progress.throwIfAborted();
	      if (!resolved) {
	        if (state === "hidden" || state === "detached")
	          return null;
	        return continuePolling;
	      }
	      const result = await resolved.injected.evaluateHandle((injected, { info, root }) => {
	        if (root && !root.isConnected)
	          throw injected.createStacklessError("Element is not attached to the DOM");
	        const elements = injected.querySelectorAll(info.parsed, root || document);
	        const element2 = elements[0];
	        const visible2 = element2 ? injected.utils.isElementVisible(element2) : false;
	        let log2 = "";
	        if (elements.length > 1) {
	          if (info.strict)
	            throw injected.strictModeViolationError(info.parsed, elements);
	          log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
	        } else if (element2) {
	          log2 = `  locator resolved to ${visible2 ? "visible" : "hidden"} ${injected.previewNode(element2)}`;
	        }
	        return { log: log2, element: element2, visible: visible2, attached: !!element2 };
	      }, { info: resolved.info, root: resolved.frame === this ? scope : void 0 });
	      const { log, visible, attached } = await result.evaluate((r) => ({ log: r.log, visible: r.visible, attached: r.attached }));
	      if (log)
	        progress.log(log);
	      const success = { attached, detached: !attached, visible, hidden: !visible }[state];
	      if (!success) {
	        result.dispose();
	        return continuePolling;
	      }
	      if (options.omitReturnValue) {
	        result.dispose();
	        return null;
	      }
	      const element = state === "attached" || state === "visible" ? await result.evaluateHandle((r) => r.element) : null;
	      result.dispose();
	      if (!element)
	        return null;
	      if (options.__testHookBeforeAdoptNode)
	        await options.__testHookBeforeAdoptNode();
	      try {
	        return await element._adoptTo(await resolved.frame._mainContext());
	      } catch (e) {
	        return continuePolling;
	      }
	    });
	    return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
	  }
	  async dispatchEvent(metadata, selector, type, eventInit = {}, options = {}, scope) {
	    await this._callOnElementOnceMatches(metadata, selector, (injectedScript, element, data) => {
	      injectedScript.dispatchEvent(element, data.type, data.eventInit);
	    }, { type, eventInit }, { mainWorld: true, ...options }, scope);
	  }
	  async evalOnSelector(selector, strict, expression, isFunction, arg, scope) {
	    const handle = await this.selectors.query(selector, { strict }, scope);
	    if (!handle)
	      throw new Error(`Failed to find element matching selector "${selector}"`);
	    const result = await handle.evaluateExpression(expression, { isFunction }, arg);
	    handle.dispose();
	    return result;
	  }
	  async evalOnSelectorAll(selector, expression, isFunction, arg, scope) {
	    const arrayHandle = await this.selectors.queryArrayInMainWorld(selector, scope);
	    const result = await arrayHandle.evaluateExpression(expression, { isFunction }, arg);
	    arrayHandle.dispose();
	    return result;
	  }
	  async maskSelectors(selectors, color) {
	    const context = await this._utilityContext();
	    const injectedScript = await context.injectedScript();
	    await injectedScript.evaluate((injected, { parsed, color: color2 }) => {
	      injected.maskSelectors(parsed, color2);
	    }, { parsed: selectors, color });
	  }
	  async querySelectorAll(selector) {
	    return this.selectors.queryAll(selector);
	  }
	  async queryCount(selector) {
	    return await this.selectors.queryCount(selector);
	  }
	  async content() {
	    try {
	      const context = await this._utilityContext();
	      return await context.evaluate(() => {
	        let retVal = "";
	        if (document.doctype)
	          retVal = new XMLSerializer().serializeToString(document.doctype);
	        if (document.documentElement)
	          retVal += document.documentElement.outerHTML;
	        return retVal;
	      });
	    } catch (e) {
	      if (js.isJavaScriptErrorInEvaluate(e) || (0, import_protocolError.isSessionClosedError)(e))
	        throw e;
	      throw new Error(`Unable to retrieve content because the page is navigating and changing the content.`);
	    }
	  }
	  async setContent(metadata, html, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      await this.raceNavigationAction(progress, options, async () => {
	        const waitUntil = options.waitUntil === void 0 ? "load" : options.waitUntil;
	        progress.log(`setting frame content, waiting until "${waitUntil}"`);
	        const tag = `--playwright--set--content--${this._id}--${++this._setContentCounter}--`;
	        const context = await this._utilityContext();
	        const lifecyclePromise = new Promise((resolve, reject) => {
	          this._page._frameManager._consoleMessageTags.set(tag, () => {
	            this._onClearLifecycle();
	            this._waitForLoadState(progress, waitUntil).then(resolve).catch(reject);
	          });
	        });
	        const contentPromise = context.evaluate(({ html: html2, tag: tag2 }) => {
	          document.open();
	          console.debug(tag2);
	          document.write(html2);
	          document.close();
	        }, { html, tag });
	        await Promise.all([contentPromise, lifecyclePromise]);
	        return null;
	      });
	    }, this._page._timeoutSettings.navigationTimeout(options));
	  }
	  name() {
	    return this._name || "";
	  }
	  url() {
	    return this._url;
	  }
	  origin() {
	    if (!this._url.startsWith("http"))
	      return;
	    return network.parseURL(this._url)?.origin;
	  }
	  parentFrame() {
	    return this._parentFrame;
	  }
	  childFrames() {
	    return Array.from(this._childFrames);
	  }
	  async addScriptTag(params) {
	    const {
	      url = null,
	      content = null,
	      type = ""
	    } = params;
	    if (!url && !content)
	      throw new Error("Provide an object with a `url`, `path` or `content` property");
	    const context = await this._mainContext();
	    return this._raceWithCSPError(async () => {
	      if (url !== null)
	        return (await context.evaluateHandle(addScriptUrl, { url, type })).asElement();
	      const result = (await context.evaluateHandle(addScriptContent, { content, type })).asElement();
	      if (this._page._delegate.cspErrorsAsynchronousForInlineScripts)
	        await context.evaluate(() => true);
	      return result;
	    });
	    async function addScriptUrl(params2) {
	      const script = document.createElement("script");
	      script.src = params2.url;
	      if (params2.type)
	        script.type = params2.type;
	      const promise = new Promise((res, rej) => {
	        script.onload = res;
	        script.onerror = (e) => rej(typeof e === "string" ? new Error(e) : new Error(`Failed to load script at ${script.src}`));
	      });
	      document.head.appendChild(script);
	      await promise;
	      return script;
	    }
	    function addScriptContent(params2) {
	      const script = document.createElement("script");
	      script.type = params2.type || "text/javascript";
	      script.text = params2.content;
	      let error = null;
	      script.onerror = (e) => error = e;
	      document.head.appendChild(script);
	      if (error)
	        throw error;
	      return script;
	    }
	  }
	  async addStyleTag(params) {
	    const {
	      url = null,
	      content = null
	    } = params;
	    if (!url && !content)
	      throw new Error("Provide an object with a `url`, `path` or `content` property");
	    const context = await this._mainContext();
	    return this._raceWithCSPError(async () => {
	      if (url !== null)
	        return (await context.evaluateHandle(addStyleUrl, url)).asElement();
	      return (await context.evaluateHandle(addStyleContent, content)).asElement();
	    });
	    async function addStyleUrl(url2) {
	      const link = document.createElement("link");
	      link.rel = "stylesheet";
	      link.href = url2;
	      const promise = new Promise((res, rej) => {
	        link.onload = res;
	        link.onerror = rej;
	      });
	      document.head.appendChild(link);
	      await promise;
	      return link;
	    }
	    async function addStyleContent(content2) {
	      const style = document.createElement("style");
	      style.type = "text/css";
	      style.appendChild(document.createTextNode(content2));
	      const promise = new Promise((res, rej) => {
	        style.onload = res;
	        style.onerror = rej;
	      });
	      document.head.appendChild(style);
	      await promise;
	      return style;
	    }
	  }
	  async _raceWithCSPError(func) {
	    const listeners = [];
	    let result;
	    let error;
	    let cspMessage;
	    const actionPromise = func().then((r) => result = r).catch((e) => error = e);
	    const errorPromise = new Promise((resolve) => {
	      listeners.push(import_eventsHelper.eventsHelper.addEventListener(this._page._browserContext, import_browserContext.BrowserContext.Events.Console, (message) => {
	        if (message.page() !== this._page || message.type() !== "error")
	          return;
	        if (message.text().includes("Content-Security-Policy") || message.text().includes("Content Security Policy")) {
	          cspMessage = message;
	          resolve();
	        }
	      }));
	    });
	    await Promise.race([actionPromise, errorPromise]);
	    import_eventsHelper.eventsHelper.removeEventListeners(listeners);
	    if (cspMessage)
	      throw new Error(cspMessage.text());
	    if (error)
	      throw error;
	    return result;
	  }
	  async retryWithProgressAndTimeouts(progress, timeouts, action) {
	    const continuePolling = Symbol("continuePolling");
	    timeouts = [0, ...timeouts];
	    let timeoutIndex = 0;
	    while (progress.isRunning()) {
	      const timeout = timeouts[Math.min(timeoutIndex++, timeouts.length - 1)];
	      if (timeout) {
	        const actionPromise = new Promise((f) => setTimeout(f, timeout));
	        await import_utils.LongStandingScope.raceMultiple([
	          this._page.openScope,
	          this._detachedScope
	        ], actionPromise);
	      }
	      progress.throwIfAborted();
	      try {
	        const result = await action(continuePolling);
	        if (result === continuePolling)
	          continue;
	        return result;
	      } catch (e) {
	        if (this._isErrorThatCannotBeRetried(e))
	          throw e;
	        continue;
	      }
	    }
	    progress.throwIfAborted();
	    return void 0;
	  }
	  _isErrorThatCannotBeRetried(e) {
	    if (js.isJavaScriptErrorInEvaluate(e) || (0, import_protocolError.isSessionClosedError)(e))
	      return true;
	    if (dom.isNonRecoverableDOMError(e) || (0, import_selectorParser.isInvalidSelectorError)(e))
	      return true;
	    if (this.isDetached())
	      return true;
	    return false;
	  }
	  async _retryWithProgressIfNotConnected(progress, selector, strict, performActionPreChecks, action) {
	    progress.log(`waiting for ${this._asLocator(selector)}`);
	    return this.retryWithProgressAndTimeouts(progress, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
	      if (performActionPreChecks)
	        await this._page.performActionPreChecks(progress);
	      const resolved = await this.selectors.resolveInjectedForSelector(selector, { strict });
	      progress.throwIfAborted();
	      if (!resolved)
	        return continuePolling;
	      const result = await resolved.injected.evaluateHandle((injected, { info, callId }) => {
	        const elements = injected.querySelectorAll(info.parsed, document);
	        if (callId)
	          injected.markTargetElements(new Set(elements), callId);
	        const element2 = elements[0];
	        let log2 = "";
	        if (elements.length > 1) {
	          if (info.strict)
	            throw injected.strictModeViolationError(info.parsed, elements);
	          log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
	        } else if (element2) {
	          log2 = `  locator resolved to ${injected.previewNode(element2)}`;
	        }
	        return { log: log2, success: !!element2, element: element2 };
	      }, { info: resolved.info, callId: progress.metadata.id });
	      const { log, success } = await result.evaluate((r) => ({ log: r.log, success: r.success }));
	      if (log)
	        progress.log(log);
	      if (!success) {
	        result.dispose();
	        return continuePolling;
	      }
	      const element = await result.evaluateHandle((r) => r.element);
	      result.dispose();
	      try {
	        const result2 = await action(element);
	        if (result2 === "error:notconnected") {
	          progress.log("element was detached from the DOM, retrying");
	          return continuePolling;
	        }
	        return result2;
	      } finally {
	        element?.dispose();
	      }
	    });
	  }
	  async rafrafTimeoutScreenshotElementWithProgress(progress, selector, timeout, options) {
	    return await this._retryWithProgressIfNotConnected(progress, selector, true, true, async (handle) => {
	      await handle._frame.rafrafTimeout(timeout);
	      return await this._page._screenshotter.screenshotElement(progress, handle, options);
	    });
	  }
	  async click(metadata, selector, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, !options.force, (handle) => handle._click(progress, { ...options, waitAfter: !options.noWaitAfter })));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async dblclick(metadata, selector, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, !options.force, (handle) => handle._dblclick(progress, options)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async dragAndDrop(metadata, source, target, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    await controller.run(async (progress) => {
	      dom.assertDone(await this._retryWithProgressIfNotConnected(progress, source, options.strict, !options.force, async (handle) => {
	        return handle._retryPointerAction(progress, "move and down", false, async (point) => {
	          await this._page.mouse.move(point.x, point.y);
	          await this._page.mouse.down();
	        }, {
	          ...options,
	          waitAfter: "disabled",
	          position: options.sourcePosition,
	          timeout: progress.timeUntilDeadline()
	        });
	      }));
	      dom.assertDone(await this._retryWithProgressIfNotConnected(progress, target, options.strict, false, async (handle) => {
	        return handle._retryPointerAction(progress, "move and up", false, async (point) => {
	          await this._page.mouse.move(point.x, point.y);
	          await this._page.mouse.up();
	        }, {
	          ...options,
	          waitAfter: "disabled",
	          position: options.targetPosition,
	          timeout: progress.timeUntilDeadline()
	        });
	      }));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async tap(metadata, selector, options) {
	    if (!this._page._browserContext._options.hasTouch)
	      throw new Error("The page does not support tap. Use hasTouch context option to enable touch support.");
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, !options.force, (handle) => handle._tap(progress, options)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async fill(metadata, selector, value, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, !options.force, (handle) => handle._fill(progress, value, options)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async focus(metadata, selector, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    await controller.run(async (progress) => {
	      dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, true, (handle) => handle._focus(progress)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async blur(metadata, selector, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    await controller.run(async (progress) => {
	      dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, true, (handle) => handle._blur(progress)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async textContent(metadata, selector, options = {}, scope) {
	    return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.textContent, void 0, options, scope);
	  }
	  async innerText(metadata, selector, options = {}, scope) {
	    return this._callOnElementOnceMatches(metadata, selector, (injectedScript, element) => {
	      if (element.namespaceURI !== "http://www.w3.org/1999/xhtml")
	        throw injectedScript.createStacklessError("Node is not an HTMLElement");
	      return element.innerText;
	    }, void 0, options, scope);
	  }
	  async innerHTML(metadata, selector, options = {}, scope) {
	    return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.innerHTML, void 0, options, scope);
	  }
	  async getAttribute(metadata, selector, name, options = {}, scope) {
	    return this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => element.getAttribute(data.name), { name }, options, scope);
	  }
	  async inputValue(metadata, selector, options = {}, scope) {
	    return this._callOnElementOnceMatches(metadata, selector, (injectedScript, node) => {
	      const element = injectedScript.retarget(node, "follow-label");
	      if (!element || element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT")
	        throw injectedScript.createStacklessError("Node is not an <input>, <textarea> or <select> element");
	      return element.value;
	    }, void 0, options, scope);
	  }
	  async highlight(selector) {
	    const resolved = await this.selectors.resolveInjectedForSelector(selector);
	    if (!resolved)
	      return;
	    return await resolved.injected.evaluate((injected, { info }) => {
	      return injected.highlight(info.parsed);
	    }, { info: resolved.info });
	  }
	  async hideHighlight() {
	    return this.raceAgainstEvaluationStallingEvents(async () => {
	      const context = await this._utilityContext();
	      const injectedScript = await context.injectedScript();
	      return await injectedScript.evaluate((injected) => {
	        return injected.hideHighlight();
	      });
	    });
	  }
	  async _elementState(metadata, selector, state, options = {}, scope) {
	    const result = await this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => {
	      return injected.elementState(element, data.state);
	    }, { state }, options, scope);
	    if (result.received === "error:notconnected")
	      dom.throwElementIsNotAttached();
	    return result.matches;
	  }
	  async isVisible(metadata, selector, options = {}, scope) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      progress.log(`  checking visibility of ${this._asLocator(selector)}`);
	      return await this.isVisibleInternal(selector, options, scope);
	    }, this._page._timeoutSettings.timeout({}));
	  }
	  async isVisibleInternal(selector, options = {}, scope) {
	    try {
	      const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
	      if (!resolved)
	        return false;
	      return await resolved.injected.evaluate((injected, { info, root }) => {
	        const element = injected.querySelector(info.parsed, root || document, info.strict);
	        const state = element ? injected.elementState(element, "visible") : { matches: false, received: "error:notconnected" };
	        return state.matches;
	      }, { info: resolved.info, root: resolved.frame === this ? scope : void 0 });
	    } catch (e) {
	      if (js.isJavaScriptErrorInEvaluate(e) || (0, import_selectorParser.isInvalidSelectorError)(e) || (0, import_protocolError.isSessionClosedError)(e))
	        throw e;
	      return false;
	    }
	  }
	  async isHidden(metadata, selector, options = {}, scope) {
	    return !await this.isVisible(metadata, selector, options, scope);
	  }
	  async isDisabled(metadata, selector, options = {}, scope) {
	    return this._elementState(metadata, selector, "disabled", options, scope);
	  }
	  async isEnabled(metadata, selector, options = {}, scope) {
	    return this._elementState(metadata, selector, "enabled", options, scope);
	  }
	  async isEditable(metadata, selector, options = {}, scope) {
	    return this._elementState(metadata, selector, "editable", options, scope);
	  }
	  async isChecked(metadata, selector, options = {}, scope) {
	    return this._elementState(metadata, selector, "checked", options, scope);
	  }
	  async hover(metadata, selector, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, !options.force, (handle) => handle._hover(progress, options)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async selectOption(metadata, selector, elements, values, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return await this._retryWithProgressIfNotConnected(progress, selector, options.strict, !options.force, (handle) => handle._selectOption(progress, elements, values, options));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async setInputFiles(metadata, selector, params) {
	    const inputFileItems = await (0, import_fileUploadUtils.prepareFilesForUpload)(this, params);
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, params.strict, true, (handle) => handle._setInputFiles(progress, inputFileItems)));
	    }, this._page._timeoutSettings.timeout(params));
	  }
	  async type(metadata, selector, text, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, true, (handle) => handle._type(progress, text, options)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async press(metadata, selector, key, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, true, (handle) => handle._press(progress, key, options)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async check(metadata, selector, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, !options.force, (handle) => handle._setChecked(progress, true, options)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async uncheck(metadata, selector, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return dom.assertDone(await this._retryWithProgressIfNotConnected(progress, selector, options.strict, !options.force, (handle) => handle._setChecked(progress, false, options)));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async waitForTimeout(metadata, timeout) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async () => {
	      await new Promise((resolve) => setTimeout(resolve, timeout));
	    });
	  }
	  async ariaSnapshot(metadata, selector, options = {}) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      return await this._retryWithProgressIfNotConnected(progress, selector, true, true, (handle) => handle.ariaSnapshot(options));
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async expect(metadata, selector, options) {
	    const result = await this._expectImpl(metadata, selector, options);
	    if (result.matches === options.isNot)
	      metadata.error = { error: { name: "Expect", message: "Expect failed" } };
	    return result;
	  }
	  async _expectImpl(metadata, selector, options) {
	    const lastIntermediateResult = { isSet: false };
	    try {
	      let timeout = this._page._timeoutSettings.timeout(options);
	      const start = timeout > 0 ? (0, import_utils.monotonicTime)() : 0;
	      await new import_progress.ProgressController(metadata, this).run(async (progress) => {
	        progress.log(`${metadata.apiName}${timeout ? ` with timeout ${timeout}ms` : ""}`);
	        progress.log(`waiting for ${this._asLocator(selector)}`);
	        await this._page.performActionPreChecks(progress);
	      }, timeout);
	      try {
	        const resultOneShot = await new import_progress.ProgressController(metadata, this).run(async (progress) => {
	          return await this._expectInternal(progress, selector, options, lastIntermediateResult);
	        });
	        if (resultOneShot.matches !== options.isNot)
	          return resultOneShot;
	      } catch (e) {
	        if (js.isJavaScriptErrorInEvaluate(e) || (0, import_selectorParser.isInvalidSelectorError)(e))
	          throw e;
	      }
	      if (timeout > 0) {
	        const elapsed = (0, import_utils.monotonicTime)() - start;
	        timeout -= elapsed;
	      }
	      if (timeout < 0)
	        return { matches: options.isNot, log: (0, import_callLog.compressCallLog)(metadata.log), timedOut: true, received: lastIntermediateResult.received };
	      return await new import_progress.ProgressController(metadata, this).run(async (progress) => {
	        return await this.retryWithProgressAndTimeouts(progress, [100, 250, 500, 1e3], async (continuePolling) => {
	          await this._page.performActionPreChecks(progress);
	          const { matches, received } = await this._expectInternal(progress, selector, options, lastIntermediateResult);
	          if (matches === options.isNot) {
	            return continuePolling;
	          }
	          return { matches, received };
	        });
	      }, timeout);
	    } catch (e) {
	      if (js.isJavaScriptErrorInEvaluate(e) || (0, import_selectorParser.isInvalidSelectorError)(e))
	        throw e;
	      const result = { matches: options.isNot, log: (0, import_callLog.compressCallLog)(metadata.log) };
	      if (lastIntermediateResult.isSet)
	        result.received = lastIntermediateResult.received;
	      if (e instanceof import_errors.TimeoutError)
	        result.timedOut = true;
	      return result;
	    }
	  }
	  async _expectInternal(progress, selector, options, lastIntermediateResult) {
	    const selectorInFrame = await this.selectors.resolveFrameForSelector(selector, { strict: true });
	    progress.throwIfAborted();
	    const { frame, info } = selectorInFrame || { frame: this, info: void 0 };
	    const world = options.expression === "to.have.property" ? "main" : info?.world ?? "utility";
	    const context = await frame._context(world);
	    const injected = await context.injectedScript();
	    progress.throwIfAborted();
	    const { log, matches, received, missingReceived } = await injected.evaluate(async (injected2, { info: info2, options: options2, callId }) => {
	      const elements = info2 ? injected2.querySelectorAll(info2.parsed, document) : [];
	      if (callId)
	        injected2.markTargetElements(new Set(elements), callId);
	      const isArray = options2.expression === "to.have.count" || options2.expression.endsWith(".array");
	      let log2 = "";
	      if (isArray)
	        log2 = `  locator resolved to ${elements.length} element${elements.length === 1 ? "" : "s"}`;
	      else if (elements.length > 1)
	        throw injected2.strictModeViolationError(info2.parsed, elements);
	      else if (elements.length)
	        log2 = `  locator resolved to ${injected2.previewNode(elements[0])}`;
	      return { log: log2, ...await injected2.expect(elements[0], options2, elements) };
	    }, { info, options, callId: progress.metadata.id });
	    if (log)
	      progress.log(log);
	    if (matches === options.isNot) {
	      lastIntermediateResult.received = missingReceived ? "<element(s) not found>" : received;
	      lastIntermediateResult.isSet = true;
	      if (!missingReceived && !Array.isArray(received))
	        progress.log(`  unexpected value "${renderUnexpectedValue(options.expression, received)}"`);
	    }
	    return { matches, received };
	  }
	  async _waitForFunctionExpression(metadata, expression, isFunction, arg, options, world = "main") {
	    const controller = new import_progress.ProgressController(metadata, this);
	    if (typeof options.pollingInterval === "number")
	      (0, import_utils.assert)(options.pollingInterval > 0, "Cannot poll with non-positive interval: " + options.pollingInterval);
	    expression = js.normalizeEvaluationExpression(expression, isFunction);
	    return controller.run(async (progress) => {
	      return this.retryWithProgressAndTimeouts(progress, [100], async () => {
	        const context = world === "main" ? await this._mainContext() : await this._utilityContext();
	        const injectedScript = await context.injectedScript();
	        const handle = await injectedScript.evaluateHandle((injected, { expression: expression2, isFunction: isFunction2, polling, arg: arg2 }) => {
	          const predicate = () => {
	            let result2 = globalThis.eval(expression2);
	            if (isFunction2 === true) {
	              result2 = result2(arg2);
	            } else if (isFunction2 === false) {
	              result2 = result2;
	            } else {
	              if (typeof result2 === "function")
	                result2 = result2(arg2);
	            }
	            return result2;
	          };
	          let fulfill;
	          let reject;
	          let aborted = false;
	          const result = new Promise((f, r) => {
	            fulfill = f;
	            reject = r;
	          });
	          const next = () => {
	            if (aborted)
	              return;
	            try {
	              const success = predicate();
	              if (success) {
	                fulfill(success);
	                return;
	              }
	              if (typeof polling !== "number")
	                injected.utils.builtins.requestAnimationFrame(next);
	              else
	                injected.utils.builtins.setTimeout(next, polling);
	            } catch (e) {
	              reject(e);
	            }
	          };
	          next();
	          return { result, abort: () => aborted = true };
	        }, { expression, isFunction, polling: options.pollingInterval, arg });
	        progress.cleanupWhenAborted(() => handle.evaluate((h) => h.abort()).catch(() => {
	        }));
	        return handle.evaluateHandle((h) => h.result);
	      });
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  async waitForFunctionValueInUtility(progress, pageFunction) {
	    const expression = `() => {
      const result = (${pageFunction})();
      if (!result)
        return result;
      return JSON.stringify(result);
    }`;
	    const handle = await this._waitForFunctionExpression((0, import_instrumentation.serverSideCallMetadata)(), expression, true, void 0, { timeout: progress.timeUntilDeadline() }, "utility");
	    return JSON.parse(handle.rawValue());
	  }
	  async title() {
	    const context = await this._utilityContext();
	    return context.evaluate(() => document.title);
	  }
	  async rafrafTimeout(timeout) {
	    if (timeout === 0)
	      return;
	    const context = await this._utilityContext();
	    await Promise.all([
	      // wait for double raf
	      context.evaluate(() => new Promise((x) => {
	        requestAnimationFrame(() => {
	          requestAnimationFrame(x);
	        });
	      })),
	      new Promise((fulfill) => setTimeout(fulfill, timeout))
	    ]);
	  }
	  _onDetached() {
	    this._stopNetworkIdleTimer();
	    this._detachedScope.close(new Error("Frame was detached"));
	    for (const data of this._contextData.values()) {
	      if (data.context)
	        data.context.contextDestroyed("Frame was detached");
	      data.contextPromise.resolve({ destroyedReason: "Frame was detached" });
	    }
	    if (this._parentFrame)
	      this._parentFrame._childFrames.delete(this);
	    this._parentFrame = null;
	  }
	  async _callOnElementOnceMatches(metadata, selector, body, taskData, options = {}, scope) {
	    const callbackText = body.toString();
	    const controller = new import_progress.ProgressController(metadata, this);
	    return controller.run(async (progress) => {
	      progress.log(`waiting for ${this._asLocator(selector)}`);
	      const promise = this.retryWithProgressAndTimeouts(progress, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
	        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
	        progress.throwIfAborted();
	        if (!resolved)
	          return continuePolling;
	        const { log, success, value } = await resolved.injected.evaluate((injected, { info, callbackText: callbackText2, taskData: taskData2, callId, root }) => {
	          const callback = injected.eval(callbackText2);
	          const element = injected.querySelector(info.parsed, root || document, info.strict);
	          if (!element)
	            return { success: false };
	          const log2 = `  locator resolved to ${injected.previewNode(element)}`;
	          if (callId)
	            injected.markTargetElements(/* @__PURE__ */ new Set([element]), callId);
	          return { log: log2, success: true, value: callback(injected, element, taskData2) };
	        }, { info: resolved.info, callbackText, taskData, callId: progress.metadata.id, root: resolved.frame === this ? scope : void 0 });
	        if (log)
	          progress.log(log);
	        if (!success)
	          return continuePolling;
	        return value;
	      });
	      return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
	    }, this._page._timeoutSettings.timeout(options));
	  }
	  _setContext(world, context) {
	    const data = this._contextData.get(world);
	    data.context = context;
	    if (context)
	      data.contextPromise.resolve(context);
	    else
	      data.contextPromise = new import_manualPromise.ManualPromise();
	  }
	  _contextCreated(world, context) {
	    const data = this._contextData.get(world);
	    if (data.context) {
	      data.context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
	      this._setContext(world, null);
	    }
	    this._setContext(world, context);
	  }
	  _contextDestroyed(context) {
	    if (this._detachedScope.isClosed())
	      return;
	    context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
	    for (const [world, data] of this._contextData) {
	      if (data.context === context)
	        this._setContext(world, null);
	    }
	  }
	  _startNetworkIdleTimer() {
	    (0, import_utils.assert)(!this._networkIdleTimer);
	    if (this._firedLifecycleEvents.has("networkidle") || this._detachedScope.isClosed())
	      return;
	    this._networkIdleTimer = setTimeout(() => {
	      this._firedNetworkIdleSelf = true;
	      this._page.mainFrame()._recalculateNetworkIdle();
	    }, 500);
	  }
	  _stopNetworkIdleTimer() {
	    if (this._networkIdleTimer)
	      clearTimeout(this._networkIdleTimer);
	    this._networkIdleTimer = void 0;
	    this._firedNetworkIdleSelf = false;
	  }
	  async extendInjectedScript(source, arg) {
	    const context = await this._context("main");
	    const injectedScriptHandle = await context.injectedScript();
	    return injectedScriptHandle.evaluateHandle((injectedScript, { source: source2, arg: arg2 }) => {
	      return injectedScript.extend(source2, arg2);
	    }, { source, arg });
	  }
	  async resetStorageForCurrentOriginBestEffort(newStorage) {
	    const context = await this._utilityContext();
	    await context.evaluate(async ({ ls }) => {
	      sessionStorage.clear();
	      localStorage.clear();
	      for (const entry of ls || [])
	        localStorage[entry.name] = entry.value;
	      const registrations = navigator.serviceWorker ? await navigator.serviceWorker.getRegistrations() : [];
	      await Promise.all(registrations.map(async (r) => {
	        if (!r.installing && !r.waiting && !r.active)
	          r.unregister().catch(() => {
	          });
	        else
	          await r.unregister().catch(() => {
	          });
	      }));
	      for (const db of await indexedDB.databases?.() || []) {
	        if (db.name)
	          indexedDB.deleteDatabase(db.name);
	      }
	    }, { ls: newStorage?.localStorage }).catch(() => {
	    });
	  }
	  _asLocator(selector) {
	    return (0, import_utils.asLocator)(this._page.attribution.playwright.options.sdkLanguage, selector);
	  }
	}
	class SignalBarrier {
	  constructor(progress) {
	    this._protectCount = 0;
	    this._promise = new import_manualPromise.ManualPromise();
	    this._progress = progress;
	    this.retain();
	  }
	  waitFor() {
	    this.release();
	    return this._promise;
	  }
	  async addFrameNavigation(frame) {
	    if (frame.parentFrame())
	      return;
	    this.retain();
	    const waiter = import_helper.helper.waitForEvent(null, frame, Frame.Events.InternalNavigation, (e) => {
	      if (!e.isPublic)
	        return false;
	      if (!e.error && this._progress)
	        this._progress.log(`  navigated to "${frame._url}"`);
	      return true;
	    });
	    await import_utils.LongStandingScope.raceMultiple([
	      frame._page.openScope,
	      frame._detachedScope
	    ], waiter.promise).catch(() => {
	    });
	    waiter.dispose();
	    this.release();
	  }
	  retain() {
	    ++this._protectCount;
	  }
	  release() {
	    --this._protectCount;
	    if (!this._protectCount)
	      this._promise.resolve();
	  }
	}
	function verifyLifecycle(name, waitUntil) {
	  if (waitUntil === "networkidle0")
	    waitUntil = "networkidle";
	  if (!types.kLifecycleEvents.has(waitUntil))
	    throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
	  return waitUntil;
	}
	function renderUnexpectedValue(expression, received) {
	  if (expression === "to.match.aria")
	    return received ? received.raw : received;
	  return received;
	}
	return frames;
}

var harTracer;
var hasRequiredHarTracer;

function requireHarTracer () {
	if (hasRequiredHarTracer) return harTracer;
	hasRequiredHarTracer = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var harTracer_exports = {};
	__export(harTracer_exports, {
	  HarTracer: () => HarTracer
	});
	harTracer = __toCommonJS(harTracer_exports);
	var import_utils = requireUtils();
	var import_utils2 = requireUtils();
	var import_eventsHelper = requireEventsHelper();
	var import_manualPromise = requireManualPromise();
	var import_utilsBundle = requireUtilsBundle();
	var import_browserContext = requireBrowserContext$1();
	var import_fetch = requireFetch$1();
	var import_frames = requireFrames();
	var import_helper = requireHelper();
	var network = __toESM(requireNetwork$1());
	const FALLBACK_HTTP_VERSION = "HTTP/1.1";
	class HarTracer {
	  constructor(context, page, delegate, options) {
	    this._barrierPromises = /* @__PURE__ */ new Set();
	    this._pageEntries = /* @__PURE__ */ new Map();
	    this._eventListeners = [];
	    this._started = false;
	    this._context = context;
	    this._page = page;
	    this._delegate = delegate;
	    this._options = options;
	    if (options.slimMode) {
	      options.omitSecurityDetails = true;
	      options.omitCookies = true;
	      options.omitTiming = true;
	      options.omitServerIP = true;
	      options.omitSizes = true;
	      options.omitPages = true;
	    }
	    this._entrySymbol = Symbol("requestHarEntry");
	    this._baseURL = context instanceof import_fetch.APIRequestContext ? context._defaultOptions().baseURL : context._options.baseURL;
	  }
	  start(options) {
	    if (this._started)
	      return;
	    this._options.omitScripts = options.omitScripts;
	    this._started = true;
	    const apiRequest = this._context instanceof import_fetch.APIRequestContext ? this._context : this._context.fetchRequest;
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(apiRequest, import_fetch.APIRequestContext.Events.Request, (event) => this._onAPIRequest(event)),
	      import_eventsHelper.eventsHelper.addEventListener(apiRequest, import_fetch.APIRequestContext.Events.RequestFinished, (event) => this._onAPIRequestFinished(event))
	    ];
	    if (this._context instanceof import_browserContext.BrowserContext) {
	      this._eventListeners.push(
	        import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.Page, (page) => this._createPageEntryIfNeeded(page)),
	        import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.Request, (request) => this._onRequest(request)),
	        import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.RequestFinished, ({ request, response }) => this._onRequestFinished(request, response).catch(() => {
	        })),
	        import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.RequestFailed, (request) => this._onRequestFailed(request)),
	        import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.Response, (response) => this._onResponse(response)),
	        import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.RequestAborted, (request) => this._onRequestAborted(request)),
	        import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.RequestFulfilled, (request) => this._onRequestFulfilled(request)),
	        import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.RequestContinued, (request) => this._onRequestContinued(request))
	      );
	    }
	  }
	  _shouldIncludeEntryWithUrl(urlString) {
	    return !this._options.urlFilter || (0, import_utils2.urlMatches)(this._baseURL, urlString, this._options.urlFilter);
	  }
	  _entryForRequest(request) {
	    return request[this._entrySymbol];
	  }
	  _createPageEntryIfNeeded(page) {
	    if (!page)
	      return;
	    if (this._options.omitPages)
	      return;
	    if (this._page && page !== this._page)
	      return;
	    let pageEntry = this._pageEntries.get(page);
	    if (!pageEntry) {
	      const date = /* @__PURE__ */ new Date();
	      pageEntry = {
	        startedDateTime: date.toISOString(),
	        id: page.guid,
	        title: "",
	        pageTimings: this._options.omitTiming ? {} : {
	          onContentLoad: -1,
	          onLoad: -1
	        }
	      };
	      pageEntry[startedDateSymbol] = date;
	      page.mainFrame().on(import_frames.Frame.Events.AddLifecycle, (event) => {
	        if (event === "load")
	          this._onLoad(page, pageEntry);
	        if (event === "domcontentloaded")
	          this._onDOMContentLoaded(page, pageEntry);
	      });
	      this._pageEntries.set(page, pageEntry);
	    }
	    return pageEntry;
	  }
	  _onDOMContentLoaded(page, pageEntry) {
	    const promise = page.mainFrame().evaluateExpression(String(() => {
	      return {
	        title: document.title,
	        domContentLoaded: performance.timing.domContentLoadedEventStart
	      };
	    }), { isFunction: true, world: "utility" }).then((result) => {
	      pageEntry.title = result.title;
	      if (!this._options.omitTiming)
	        pageEntry.pageTimings.onContentLoad = result.domContentLoaded;
	    }).catch(() => {
	    });
	    this._addBarrier(page, promise);
	  }
	  _onLoad(page, pageEntry) {
	    const promise = page.mainFrame().evaluateExpression(String(() => {
	      return {
	        title: document.title,
	        loaded: performance.timing.loadEventStart
	      };
	    }), { isFunction: true, world: "utility" }).then((result) => {
	      pageEntry.title = result.title;
	      if (!this._options.omitTiming)
	        pageEntry.pageTimings.onLoad = result.loaded;
	    }).catch(() => {
	    });
	    this._addBarrier(page, promise);
	  }
	  _addBarrier(target, promise) {
	    if (!target)
	      return null;
	    if (!this._options.waitForContentOnStop)
	      return;
	    const race = target.openScope.safeRace(promise);
	    this._barrierPromises.add(race);
	    race.then(() => this._barrierPromises.delete(race));
	  }
	  _onAPIRequest(event) {
	    if (!this._shouldIncludeEntryWithUrl(event.url.toString()))
	      return;
	    const harEntry = createHarEntry(event.method, event.url, void 0, this._options);
	    harEntry._apiRequest = true;
	    if (!this._options.omitCookies)
	      harEntry.request.cookies = event.cookies;
	    harEntry.request.headers = Object.entries(event.headers).map(([name, value]) => ({ name, value }));
	    harEntry.request.postData = this._postDataForBuffer(event.postData || null, event.headers["content-type"], this._options.content);
	    if (!this._options.omitSizes)
	      harEntry.request.bodySize = event.postData?.length || 0;
	    event[this._entrySymbol] = harEntry;
	    if (this._started)
	      this._delegate.onEntryStarted(harEntry);
	  }
	  _onAPIRequestFinished(event) {
	    const harEntry = this._entryForRequest(event.requestEvent);
	    if (!harEntry)
	      return;
	    harEntry.response.status = event.statusCode;
	    harEntry.response.statusText = event.statusMessage;
	    harEntry.response.httpVersion = event.httpVersion;
	    harEntry.response.redirectURL = event.headers.location || "";
	    if (!this._options.omitServerIP) {
	      harEntry.serverIPAddress = event.serverIPAddress;
	      harEntry._serverPort = event.serverPort;
	    }
	    if (!this._options.omitTiming) {
	      harEntry.timings = event.timings;
	      this._computeHarEntryTotalTime(harEntry);
	    }
	    if (!this._options.omitSecurityDetails)
	      harEntry._securityDetails = event.securityDetails;
	    for (let i = 0; i < event.rawHeaders.length; i += 2) {
	      harEntry.response.headers.push({
	        name: event.rawHeaders[i],
	        value: event.rawHeaders[i + 1]
	      });
	    }
	    harEntry.response.cookies = this._options.omitCookies ? [] : event.cookies.map((c) => {
	      return {
	        ...c,
	        expires: c.expires === -1 ? void 0 : safeDateToISOString(c.expires)
	      };
	    });
	    const content = harEntry.response.content;
	    const contentType = event.headers["content-type"];
	    if (contentType)
	      content.mimeType = contentType;
	    this._storeResponseContent(event.body, content, "other");
	    if (!this._options.omitSizes)
	      harEntry.response.bodySize = event.body?.length ?? 0;
	    if (this._started)
	      this._delegate.onEntryFinished(harEntry);
	  }
	  _onRequest(request) {
	    if (!this._shouldIncludeEntryWithUrl(request.url()))
	      return;
	    const page = request.frame()?._page;
	    if (this._page && page !== this._page)
	      return;
	    const url = network.parseURL(request.url());
	    if (!url)
	      return;
	    const pageEntry = this._createPageEntryIfNeeded(page);
	    const harEntry = createHarEntry(request.method(), url, request.frame()?.guid, this._options);
	    if (pageEntry)
	      harEntry.pageref = pageEntry.id;
	    this._recordRequestHeadersAndCookies(harEntry, request.headers());
	    harEntry.request.postData = this._postDataForRequest(request, this._options.content);
	    if (!this._options.omitSizes)
	      harEntry.request.bodySize = request.bodySize();
	    if (request.redirectedFrom()) {
	      const fromEntry = this._entryForRequest(request.redirectedFrom());
	      if (fromEntry)
	        fromEntry.response.redirectURL = request.url();
	    }
	    request[this._entrySymbol] = harEntry;
	    (0, import_utils.assert)(this._started);
	    this._delegate.onEntryStarted(harEntry);
	  }
	  _recordRequestHeadersAndCookies(harEntry, headers) {
	    if (!this._options.omitCookies) {
	      harEntry.request.cookies = [];
	      for (const header of headers.filter((header2) => header2.name.toLowerCase() === "cookie"))
	        harEntry.request.cookies.push(...header.value.split(";").map(parseCookie));
	    }
	    harEntry.request.headers = headers;
	  }
	  _recordRequestOverrides(harEntry, request) {
	    if (!request._hasOverrides() || !this._options.recordRequestOverrides)
	      return;
	    harEntry.request.method = request.method();
	    harEntry.request.url = request.url();
	    harEntry.request.postData = this._postDataForRequest(request, this._options.content);
	    this._recordRequestHeadersAndCookies(harEntry, request.headers());
	  }
	  async _onRequestFinished(request, response) {
	    if (!response)
	      return;
	    const harEntry = this._entryForRequest(request);
	    if (!harEntry)
	      return;
	    const page = request.frame()?._page;
	    if (!this._options.omitServerIP) {
	      this._addBarrier(page || request.serviceWorker(), response.serverAddr().then((server) => {
	        if (server?.ipAddress)
	          harEntry.serverIPAddress = server.ipAddress;
	        if (server?.port)
	          harEntry._serverPort = server.port;
	      }));
	    }
	    if (!this._options.omitSecurityDetails) {
	      this._addBarrier(page || request.serviceWorker(), response.securityDetails().then((details) => {
	        if (details)
	          harEntry._securityDetails = details;
	      }));
	    }
	    const httpVersion = response.httpVersion();
	    harEntry.request.httpVersion = httpVersion;
	    harEntry.response.httpVersion = httpVersion;
	    const compressionCalculationBarrier = this._options.omitSizes ? void 0 : {
	      _encodedBodySize: -1,
	      _decodedBodySize: -1,
	      barrier: new import_manualPromise.ManualPromise(),
	      _check: function() {
	        if (this._encodedBodySize !== -1 && this._decodedBodySize !== -1) {
	          harEntry.response.content.compression = Math.max(0, this._decodedBodySize - this._encodedBodySize);
	          this.barrier.resolve();
	        }
	      },
	      setEncodedBodySize: function(encodedBodySize) {
	        this._encodedBodySize = encodedBodySize;
	        this._check();
	      },
	      setDecodedBodySize: function(decodedBodySize) {
	        this._decodedBodySize = decodedBodySize;
	        this._check();
	      }
	    };
	    if (compressionCalculationBarrier)
	      this._addBarrier(page || request.serviceWorker(), compressionCalculationBarrier.barrier);
	    const promise = response.body().then((buffer) => {
	      if (this._options.omitScripts && request.resourceType() === "script") {
	        compressionCalculationBarrier?.setDecodedBodySize(0);
	        return;
	      }
	      const content = harEntry.response.content;
	      compressionCalculationBarrier?.setDecodedBodySize(buffer.length);
	      this._storeResponseContent(buffer, content, request.resourceType());
	    }).catch(() => {
	      compressionCalculationBarrier?.setDecodedBodySize(0);
	    }).then(() => {
	      if (this._started)
	        this._delegate.onEntryFinished(harEntry);
	    });
	    this._addBarrier(page || request.serviceWorker(), promise);
	    const timing = response.timing();
	    harEntry.timings.receive = response.request()._responseEndTiming !== -1 ? import_helper.helper.millisToRoundishMillis(response.request()._responseEndTiming - timing.responseStart) : -1;
	    this._computeHarEntryTotalTime(harEntry);
	    if (!this._options.omitSizes) {
	      this._addBarrier(page || request.serviceWorker(), response.sizes().then((sizes) => {
	        harEntry.response.bodySize = sizes.responseBodySize;
	        harEntry.response.headersSize = sizes.responseHeadersSize;
	        harEntry.response._transferSize = sizes.transferSize;
	        harEntry.request.headersSize = sizes.requestHeadersSize;
	        compressionCalculationBarrier?.setEncodedBodySize(sizes.responseBodySize);
	      }));
	    }
	  }
	  async _onRequestFailed(request) {
	    const harEntry = this._entryForRequest(request);
	    if (!harEntry)
	      return;
	    if (request._failureText !== null)
	      harEntry.response._failureText = request._failureText;
	    this._recordRequestOverrides(harEntry, request);
	    if (this._started)
	      this._delegate.onEntryFinished(harEntry);
	  }
	  _onRequestAborted(request) {
	    const harEntry = this._entryForRequest(request);
	    if (harEntry)
	      harEntry._wasAborted = true;
	  }
	  _onRequestFulfilled(request) {
	    const harEntry = this._entryForRequest(request);
	    if (harEntry)
	      harEntry._wasFulfilled = true;
	  }
	  _onRequestContinued(request) {
	    const harEntry = this._entryForRequest(request);
	    if (harEntry)
	      harEntry._wasContinued = true;
	  }
	  _storeResponseContent(buffer, content, resourceType) {
	    if (!buffer) {
	      content.size = 0;
	      return;
	    }
	    if (!this._options.omitSizes)
	      content.size = buffer.length;
	    if (this._options.content === "embed") {
	      if ((0, import_utils2.isTextualMimeType)(content.mimeType) && resourceType !== "font") {
	        content.text = buffer.toString();
	      } else {
	        content.text = buffer.toString("base64");
	        content.encoding = "base64";
	      }
	    } else if (this._options.content === "attach") {
	      const sha1 = (0, import_utils.calculateSha1)(buffer) + "." + (import_utilsBundle.mime.getExtension(content.mimeType) || "dat");
	      if (this._options.includeTraceInfo)
	        content._sha1 = sha1;
	      else
	        content._file = sha1;
	      if (this._started)
	        this._delegate.onContentBlob(sha1, buffer);
	    }
	  }
	  _onResponse(response) {
	    const harEntry = this._entryForRequest(response.request());
	    if (!harEntry)
	      return;
	    const page = response.frame()?._page;
	    const pageEntry = this._createPageEntryIfNeeded(page);
	    const request = response.request();
	    harEntry.response = {
	      status: response.status(),
	      statusText: response.statusText(),
	      httpVersion: response.httpVersion(),
	      // These are bad values that will be overwritten bellow.
	      cookies: [],
	      headers: [],
	      content: {
	        size: -1,
	        mimeType: "x-unknown"
	      },
	      headersSize: -1,
	      bodySize: -1,
	      redirectURL: "",
	      _transferSize: this._options.omitSizes ? void 0 : -1
	    };
	    if (!this._options.omitTiming) {
	      const startDateTime = pageEntry ? pageEntry[startedDateSymbol].valueOf() : 0;
	      const timing = response.timing();
	      if (pageEntry && startDateTime > timing.startTime)
	        pageEntry.startedDateTime = new Date(timing.startTime).toISOString();
	      const dns = timing.domainLookupEnd !== -1 ? import_helper.helper.millisToRoundishMillis(timing.domainLookupEnd - timing.domainLookupStart) : -1;
	      const connect = timing.connectEnd !== -1 ? import_helper.helper.millisToRoundishMillis(timing.connectEnd - timing.connectStart) : -1;
	      const ssl = timing.connectEnd !== -1 ? import_helper.helper.millisToRoundishMillis(timing.connectEnd - timing.secureConnectionStart) : -1;
	      const wait = timing.responseStart !== -1 ? import_helper.helper.millisToRoundishMillis(timing.responseStart - timing.requestStart) : -1;
	      const receive = -1;
	      harEntry.timings = {
	        dns,
	        connect,
	        ssl,
	        send: 0,
	        wait,
	        receive
	      };
	      this._computeHarEntryTotalTime(harEntry);
	    }
	    this._recordRequestOverrides(harEntry, request);
	    this._addBarrier(page || request.serviceWorker(), request.rawRequestHeaders().then((headers) => {
	      this._recordRequestHeadersAndCookies(harEntry, headers);
	    }));
	    this._recordResponseHeaders(harEntry, response.headers());
	    this._addBarrier(page || request.serviceWorker(), response.rawResponseHeaders().then((headers) => {
	      this._recordResponseHeaders(harEntry, headers);
	    }));
	  }
	  _recordResponseHeaders(harEntry, headers) {
	    if (!this._options.omitCookies) {
	      harEntry.response.cookies = headers.filter((header) => header.name.toLowerCase() === "set-cookie").map((header) => parseCookie(header.value));
	    }
	    harEntry.response.headers = headers;
	    const contentType = headers.find((header) => header.name.toLowerCase() === "content-type");
	    if (contentType)
	      harEntry.response.content.mimeType = contentType.value;
	  }
	  _computeHarEntryTotalTime(harEntry) {
	    harEntry.time = [
	      harEntry.timings.dns,
	      harEntry.timings.connect,
	      harEntry.timings.ssl,
	      harEntry.timings.wait,
	      harEntry.timings.receive
	    ].reduce((pre, cur) => (cur || -1) > 0 ? cur + pre : pre, 0);
	  }
	  async flush() {
	    await Promise.all(this._barrierPromises);
	  }
	  stop() {
	    this._started = false;
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	    this._barrierPromises.clear();
	    const context = this._context instanceof import_browserContext.BrowserContext ? this._context : void 0;
	    const log = {
	      version: "1.2",
	      creator: {
	        name: "Playwright",
	        version: (0, import_utils2.getPlaywrightVersion)()
	      },
	      browser: {
	        name: context?._browser.options.name || "",
	        version: context?._browser.version() || ""
	      },
	      pages: this._pageEntries.size ? Array.from(this._pageEntries.values()) : void 0,
	      entries: []
	    };
	    if (!this._options.omitTiming) {
	      for (const pageEntry of log.pages || []) {
	        const startDateTime = pageEntry[startedDateSymbol].valueOf();
	        if (typeof pageEntry.pageTimings.onContentLoad === "number" && pageEntry.pageTimings.onContentLoad >= 0)
	          pageEntry.pageTimings.onContentLoad -= startDateTime;
	        else
	          pageEntry.pageTimings.onContentLoad = -1;
	        if (typeof pageEntry.pageTimings.onLoad === "number" && pageEntry.pageTimings.onLoad >= 0)
	          pageEntry.pageTimings.onLoad -= startDateTime;
	        else
	          pageEntry.pageTimings.onLoad = -1;
	      }
	    }
	    this._pageEntries.clear();
	    return log;
	  }
	  _postDataForRequest(request, content) {
	    const postData = request.postDataBuffer();
	    if (!postData)
	      return;
	    const contentType = request.headerValue("content-type");
	    return this._postDataForBuffer(postData, contentType, content);
	  }
	  _postDataForBuffer(postData, contentType, content) {
	    if (!postData)
	      return;
	    contentType ??= "application/octet-stream";
	    const result = {
	      mimeType: contentType,
	      text: "",
	      params: []
	    };
	    if (content === "embed" && contentType !== "application/octet-stream")
	      result.text = postData.toString();
	    if (content === "attach") {
	      const sha1 = (0, import_utils.calculateSha1)(postData) + "." + (import_utilsBundle.mime.getExtension(contentType) || "dat");
	      if (this._options.includeTraceInfo)
	        result._sha1 = sha1;
	      else
	        result._file = sha1;
	      this._delegate.onContentBlob(sha1, postData);
	    }
	    if (contentType === "application/x-www-form-urlencoded") {
	      const parsed = new URLSearchParams(postData.toString());
	      for (const [name, value] of parsed.entries())
	        result.params.push({ name, value });
	    }
	    return result;
	  }
	}
	function createHarEntry(method, url, frameref, options) {
	  const harEntry = {
	    _frameref: options.includeTraceInfo ? frameref : void 0,
	    _monotonicTime: options.includeTraceInfo ? (0, import_utils.monotonicTime)() : void 0,
	    startedDateTime: (/* @__PURE__ */ new Date()).toISOString(),
	    time: -1,
	    request: {
	      method,
	      url: url.toString(),
	      httpVersion: FALLBACK_HTTP_VERSION,
	      cookies: [],
	      headers: [],
	      queryString: [...url.searchParams].map((e) => ({ name: e[0], value: e[1] })),
	      headersSize: -1,
	      bodySize: -1
	    },
	    response: {
	      status: -1,
	      statusText: "",
	      httpVersion: FALLBACK_HTTP_VERSION,
	      cookies: [],
	      headers: [],
	      content: {
	        size: -1,
	        mimeType: "x-unknown"
	      },
	      headersSize: -1,
	      bodySize: -1,
	      redirectURL: "",
	      _transferSize: options.omitSizes ? void 0 : -1
	    },
	    cache: {},
	    timings: {
	      send: -1,
	      wait: -1,
	      receive: -1
	    }
	  };
	  return harEntry;
	}
	function parseCookie(c) {
	  const cookie = {
	    name: "",
	    value: ""
	  };
	  let first = true;
	  for (const pair of c.split(/; */)) {
	    const indexOfEquals = pair.indexOf("=");
	    const name = indexOfEquals !== -1 ? pair.substr(0, indexOfEquals).trim() : pair.trim();
	    const value = indexOfEquals !== -1 ? pair.substr(indexOfEquals + 1, pair.length).trim() : "";
	    if (first) {
	      first = false;
	      cookie.name = name;
	      cookie.value = value;
	      continue;
	    }
	    if (name === "Domain")
	      cookie.domain = value;
	    if (name === "Expires")
	      cookie.expires = safeDateToISOString(value);
	    if (name === "HttpOnly")
	      cookie.httpOnly = true;
	    if (name === "Max-Age")
	      cookie.expires = safeDateToISOString(Date.now() + +value * 1e3);
	    if (name === "Path")
	      cookie.path = value;
	    if (name === "SameSite")
	      cookie.sameSite = value;
	    if (name === "Secure")
	      cookie.secure = true;
	  }
	  return cookie;
	}
	function safeDateToISOString(value) {
	  try {
	    return new Date(value).toISOString();
	  } catch (e) {
	  }
	}
	const startedDateSymbol = Symbol("startedDate");
	return harTracer;
}

var harRecorder;
var hasRequiredHarRecorder;

function requireHarRecorder () {
	if (hasRequiredHarRecorder) return harRecorder;
	hasRequiredHarRecorder = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var harRecorder_exports = {};
	__export(harRecorder_exports, {
	  HarRecorder: () => HarRecorder
	});
	harRecorder = __toCommonJS(harRecorder_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_artifact = requireArtifact$1();
	var import_harTracer = requireHarTracer();
	var import_crypto = requireCrypto();
	var import_manualPromise = requireManualPromise();
	var import_zipBundle = requireZipBundle();
	class HarRecorder {
	  constructor(context, page, options) {
	    this._isFlushed = false;
	    this._entries = [];
	    this._zipFile = null;
	    this._writtenZipEntries = /* @__PURE__ */ new Set();
	    this._artifact = new import_artifact.Artifact(context, import_path.default.join(context._browser.options.artifactsDir, `${(0, import_crypto.createGuid)()}.har`));
	    const urlFilterRe = options.urlRegexSource !== void 0 && options.urlRegexFlags !== void 0 ? new RegExp(options.urlRegexSource, options.urlRegexFlags) : void 0;
	    const expectsZip = options.path.endsWith(".zip");
	    const content = options.content || (expectsZip ? "attach" : "embed");
	    this._tracer = new import_harTracer.HarTracer(context, page, this, {
	      content,
	      slimMode: options.mode === "minimal",
	      includeTraceInfo: false,
	      recordRequestOverrides: true,
	      waitForContentOnStop: true,
	      urlFilter: urlFilterRe ?? options.urlGlob
	    });
	    this._zipFile = content === "attach" || expectsZip ? new import_zipBundle.yazl.ZipFile() : null;
	    this._tracer.start({ omitScripts: false });
	  }
	  onEntryStarted(entry) {
	    this._entries.push(entry);
	  }
	  onEntryFinished(entry) {
	  }
	  onContentBlob(sha1, buffer) {
	    if (!this._zipFile || this._writtenZipEntries.has(sha1))
	      return;
	    this._writtenZipEntries.add(sha1);
	    this._zipFile.addBuffer(buffer, sha1);
	  }
	  async flush() {
	    if (this._isFlushed)
	      return;
	    this._isFlushed = true;
	    await this._tracer.flush();
	    const log = this._tracer.stop();
	    log.entries = this._entries;
	    const harFileContent = jsonStringify({ log });
	    if (this._zipFile) {
	      const result = new import_manualPromise.ManualPromise();
	      this._zipFile.on("error", (error) => result.reject(error));
	      this._zipFile.addBuffer(Buffer.from(harFileContent, "utf-8"), "har.har");
	      this._zipFile.end();
	      this._zipFile.outputStream.pipe(import_fs.default.createWriteStream(this._artifact.localPath())).on("close", () => {
	        result.resolve();
	      });
	      await result;
	    } else {
	      await import_fs.default.promises.writeFile(this._artifact.localPath(), harFileContent);
	    }
	  }
	  async export() {
	    await this.flush();
	    this._artifact.reportFinished();
	    return this._artifact;
	  }
	}
	function jsonStringify(object) {
	  const tokens = [];
	  innerJsonStringify(object, tokens, "", false, void 0);
	  return tokens.join("");
	}
	function innerJsonStringify(object, tokens, indent, flat, parentKey) {
	  if (typeof object !== "object" || object === null) {
	    tokens.push(JSON.stringify(object));
	    return;
	  }
	  const isArray = Array.isArray(object);
	  if (!isArray && object.constructor.name !== "Object") {
	    tokens.push(JSON.stringify(object));
	    return;
	  }
	  const entries = isArray ? object : Object.entries(object).filter((e) => e[1] !== void 0);
	  if (!entries.length) {
	    tokens.push(isArray ? `[]` : `{}`);
	    return;
	  }
	  const childIndent = `${indent}  `;
	  let brackets;
	  if (isArray)
	    brackets = flat ? { open: "[", close: "]" } : { open: `[
${childIndent}`, close: `
${indent}]` };
	  else
	    brackets = flat ? { open: "{ ", close: " }" } : { open: `{
${childIndent}`, close: `
${indent}}` };
	  tokens.push(brackets.open);
	  for (let i = 0; i < entries.length; ++i) {
	    const entry = entries[i];
	    if (i)
	      tokens.push(flat ? `, ` : `,
${childIndent}`);
	    if (!isArray)
	      tokens.push(`${JSON.stringify(entry[0])}: `);
	    const key = isArray ? void 0 : entry[0];
	    const flatten = flat || key === "timings" || parentKey === "headers";
	    innerJsonStringify(isArray ? entry : entry[1], tokens, childIndent, flatten, key);
	  }
	  tokens.push(brackets.close);
	}
	return harRecorder;
}

var consoleApiSource;
var hasRequiredConsoleApiSource;

function requireConsoleApiSource () {
	if (hasRequiredConsoleApiSource) return consoleApiSource;
	hasRequiredConsoleApiSource = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var consoleApiSource_exports = {};
	__export(consoleApiSource_exports, {
	  source: () => source
	});
	consoleApiSource = __toCommonJS(consoleApiSource_exports);
	const source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/injected/src/consoleApi.ts\nvar consoleApi_exports = {};\n__export(consoleApi_exports, {\n  default: () => consoleApi_default\n});\nmodule.exports = __toCommonJS(consoleApi_exports);\n\n// packages/playwright-core/src/utils/isomorphic/builtins.ts\nfunction builtins(global) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n  global = global != null ? global : globalThis;\n  if (!global["__playwright_builtins__"]) {\n    const builtins2 = {\n      setTimeout: (_a = global.setTimeout) == null ? void 0 : _a.bind(global),\n      clearTimeout: (_b = global.clearTimeout) == null ? void 0 : _b.bind(global),\n      setInterval: (_c = global.setInterval) == null ? void 0 : _c.bind(global),\n      clearInterval: (_d = global.clearInterval) == null ? void 0 : _d.bind(global),\n      requestAnimationFrame: (_e = global.requestAnimationFrame) == null ? void 0 : _e.bind(global),\n      cancelAnimationFrame: (_f = global.cancelAnimationFrame) == null ? void 0 : _f.bind(global),\n      requestIdleCallback: (_g = global.requestIdleCallback) == null ? void 0 : _g.bind(global),\n      cancelIdleCallback: (_h = global.cancelIdleCallback) == null ? void 0 : _h.bind(global),\n      performance: global.performance,\n      eval: (_i = global.eval) == null ? void 0 : _i.bind(global),\n      Intl: global.Intl,\n      Date: global.Date,\n      Map: global.Map,\n      Set: global.Set\n    };\n    Object.defineProperty(global, "__playwright_builtins__", { value: builtins2, configurable: false, enumerable: false, writable: false });\n  }\n  return global["__playwright_builtins__"];\n}\nvar instance = builtins();\nvar setTimeout = instance.setTimeout;\nvar clearTimeout = instance.clearTimeout;\nvar setInterval = instance.setInterval;\nvar clearInterval = instance.clearInterval;\nvar requestAnimationFrame = instance.requestAnimationFrame;\nvar cancelAnimationFrame = instance.cancelAnimationFrame;\nvar requestIdleCallback = instance.requestIdleCallback;\nvar cancelIdleCallback = instance.cancelIdleCallback;\nvar performance = instance.performance;\nvar Intl = instance.Intl;\nvar Date = instance.Date;\nvar Map = instance.Map;\nvar Set = instance.Set;\n\n// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts\nvar between = function(num, first, last) {\n  return num >= first && num <= last;\n};\nfunction digit(code) {\n  return between(code, 48, 57);\n}\nfunction hexdigit(code) {\n  return digit(code) || between(code, 65, 70) || between(code, 97, 102);\n}\nfunction uppercaseletter(code) {\n  return between(code, 65, 90);\n}\nfunction lowercaseletter(code) {\n  return between(code, 97, 122);\n}\nfunction letter(code) {\n  return uppercaseletter(code) || lowercaseletter(code);\n}\nfunction nonascii(code) {\n  return code >= 128;\n}\nfunction namestartchar(code) {\n  return letter(code) || nonascii(code) || code === 95;\n}\nfunction namechar(code) {\n  return namestartchar(code) || digit(code) || code === 45;\n}\nfunction nonprintable(code) {\n  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;\n}\nfunction newline(code) {\n  return code === 10;\n}\nfunction whitespace(code) {\n  return newline(code) || code === 9 || code === 32;\n}\nvar maximumallowedcodepoint = 1114111;\nvar InvalidCharacterError = class extends Error {\n  constructor(message) {\n    super(message);\n    this.name = "InvalidCharacterError";\n  }\n};\nfunction preprocess(str) {\n  const codepoints = [];\n  for (let i = 0; i < str.length; i++) {\n    let code = str.charCodeAt(i);\n    if (code === 13 && str.charCodeAt(i + 1) === 10) {\n      code = 10;\n      i++;\n    }\n    if (code === 13 || code === 12)\n      code = 10;\n    if (code === 0)\n      code = 65533;\n    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {\n      const lead = code - 55296;\n      const trail = str.charCodeAt(i + 1) - 56320;\n      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;\n      i++;\n    }\n    codepoints.push(code);\n  }\n  return codepoints;\n}\nfunction stringFromCode(code) {\n  if (code <= 65535)\n    return String.fromCharCode(code);\n  code -= Math.pow(2, 16);\n  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;\n  const trail = code % Math.pow(2, 10) + 56320;\n  return String.fromCharCode(lead) + String.fromCharCode(trail);\n}\nfunction tokenize(str1) {\n  const str = preprocess(str1);\n  let i = -1;\n  const tokens = [];\n  let code;\n  let line = 0;\n  let column = 0;\n  let lastLineLength = 0;\n  const incrLineno = function() {\n    line += 1;\n    lastLineLength = column;\n    column = 0;\n  };\n  const locStart = { line, column };\n  const codepoint = function(i2) {\n    if (i2 >= str.length)\n      return -1;\n    return str[i2];\n  };\n  const next = function(num) {\n    if (num === void 0)\n      num = 1;\n    if (num > 3)\n      throw "Spec Error: no more than three codepoints of lookahead.";\n    return codepoint(i + num);\n  };\n  const consume = function(num) {\n    if (num === void 0)\n      num = 1;\n    i += num;\n    code = codepoint(i);\n    if (newline(code))\n      incrLineno();\n    else\n      column += num;\n    return true;\n  };\n  const reconsume = function() {\n    i -= 1;\n    if (newline(code)) {\n      line -= 1;\n      column = lastLineLength;\n    } else {\n      column -= 1;\n    }\n    locStart.line = line;\n    locStart.column = column;\n    return true;\n  };\n  const eof = function(codepoint2) {\n    if (codepoint2 === void 0)\n      codepoint2 = code;\n    return codepoint2 === -1;\n  };\n  const donothing = function() {\n  };\n  const parseerror = function() {\n  };\n  const consumeAToken = function() {\n    consumeComments();\n    consume();\n    if (whitespace(code)) {\n      while (whitespace(next()))\n        consume();\n      return new WhitespaceToken();\n    } else if (code === 34) {\n      return consumeAStringToken();\n    } else if (code === 35) {\n      if (namechar(next()) || areAValidEscape(next(1), next(2))) {\n        const token = new HashToken("");\n        if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n          token.type = "id";\n        token.value = consumeAName();\n        return token;\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 36) {\n      if (next() === 61) {\n        consume();\n        return new SuffixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 39) {\n      return consumeAStringToken();\n    } else if (code === 40) {\n      return new OpenParenToken();\n    } else if (code === 41) {\n      return new CloseParenToken();\n    } else if (code === 42) {\n      if (next() === 61) {\n        consume();\n        return new SubstringMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 43) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 44) {\n      return new CommaToken();\n    } else if (code === 45) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else if (next(1) === 45 && next(2) === 62) {\n        consume(2);\n        return new CDCToken();\n      } else if (startsWithAnIdentifier()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 46) {\n      if (startsWithANumber()) {\n        reconsume();\n        return consumeANumericToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 58) {\n      return new ColonToken();\n    } else if (code === 59) {\n      return new SemicolonToken();\n    } else if (code === 60) {\n      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {\n        consume(3);\n        return new CDOToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 64) {\n      if (wouldStartAnIdentifier(next(1), next(2), next(3)))\n        return new AtKeywordToken(consumeAName());\n      else\n        return new DelimToken(code);\n    } else if (code === 91) {\n      return new OpenSquareToken();\n    } else if (code === 92) {\n      if (startsWithAValidEscape()) {\n        reconsume();\n        return consumeAnIdentlikeToken();\n      } else {\n        parseerror();\n        return new DelimToken(code);\n      }\n    } else if (code === 93) {\n      return new CloseSquareToken();\n    } else if (code === 94) {\n      if (next() === 61) {\n        consume();\n        return new PrefixMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 123) {\n      return new OpenCurlyToken();\n    } else if (code === 124) {\n      if (next() === 61) {\n        consume();\n        return new DashMatchToken();\n      } else if (next() === 124) {\n        consume();\n        return new ColumnToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (code === 125) {\n      return new CloseCurlyToken();\n    } else if (code === 126) {\n      if (next() === 61) {\n        consume();\n        return new IncludeMatchToken();\n      } else {\n        return new DelimToken(code);\n      }\n    } else if (digit(code)) {\n      reconsume();\n      return consumeANumericToken();\n    } else if (namestartchar(code)) {\n      reconsume();\n      return consumeAnIdentlikeToken();\n    } else if (eof()) {\n      return new EOFToken();\n    } else {\n      return new DelimToken(code);\n    }\n  };\n  const consumeComments = function() {\n    while (next(1) === 47 && next(2) === 42) {\n      consume(2);\n      while (true) {\n        consume();\n        if (code === 42 && next() === 47) {\n          consume();\n          break;\n        } else if (eof()) {\n          parseerror();\n          return;\n        }\n      }\n    }\n  };\n  const consumeANumericToken = function() {\n    const num = consumeANumber();\n    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {\n      const token = new DimensionToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      token.unit = consumeAName();\n      return token;\n    } else if (next() === 37) {\n      consume();\n      const token = new PercentageToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      return token;\n    } else {\n      const token = new NumberToken();\n      token.value = num.value;\n      token.repr = num.repr;\n      token.type = num.type;\n      return token;\n    }\n  };\n  const consumeAnIdentlikeToken = function() {\n    const str2 = consumeAName();\n    if (str2.toLowerCase() === "url" && next() === 40) {\n      consume();\n      while (whitespace(next(1)) && whitespace(next(2)))\n        consume();\n      if (next() === 34 || next() === 39)\n        return new FunctionToken(str2);\n      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))\n        return new FunctionToken(str2);\n      else\n        return consumeAURLToken();\n    } else if (next() === 40) {\n      consume();\n      return new FunctionToken(str2);\n    } else {\n      return new IdentToken(str2);\n    }\n  };\n  const consumeAStringToken = function(endingCodePoint) {\n    if (endingCodePoint === void 0)\n      endingCodePoint = code;\n    let string = "";\n    while (consume()) {\n      if (code === endingCodePoint || eof()) {\n        return new StringToken(string);\n      } else if (newline(code)) {\n        parseerror();\n        reconsume();\n        return new BadStringToken();\n      } else if (code === 92) {\n        if (eof(next()))\n          donothing();\n        else if (newline(next()))\n          consume();\n        else\n          string += stringFromCode(consumeEscape());\n      } else {\n        string += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeAURLToken = function() {\n    const token = new URLToken("");\n    while (whitespace(next()))\n      consume();\n    if (eof(next()))\n      return token;\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return token;\n      } else if (whitespace(code)) {\n        while (whitespace(next()))\n          consume();\n        if (next() === 41 || eof(next())) {\n          consume();\n          return token;\n        } else {\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {\n        parseerror();\n        consumeTheRemnantsOfABadURL();\n        return new BadURLToken();\n      } else if (code === 92) {\n        if (startsWithAValidEscape()) {\n          token.value += stringFromCode(consumeEscape());\n        } else {\n          parseerror();\n          consumeTheRemnantsOfABadURL();\n          return new BadURLToken();\n        }\n      } else {\n        token.value += stringFromCode(code);\n      }\n    }\n    throw new Error("Internal error");\n  };\n  const consumeEscape = function() {\n    consume();\n    if (hexdigit(code)) {\n      const digits = [code];\n      for (let total = 0; total < 5; total++) {\n        if (hexdigit(next())) {\n          consume();\n          digits.push(code);\n        } else {\n          break;\n        }\n      }\n      if (whitespace(next()))\n        consume();\n      let value = parseInt(digits.map(function(x) {\n        return String.fromCharCode(x);\n      }).join(""), 16);\n      if (value > maximumallowedcodepoint)\n        value = 65533;\n      return value;\n    } else if (eof()) {\n      return 65533;\n    } else {\n      return code;\n    }\n  };\n  const areAValidEscape = function(c1, c2) {\n    if (c1 !== 92)\n      return false;\n    if (newline(c2))\n      return false;\n    return true;\n  };\n  const startsWithAValidEscape = function() {\n    return areAValidEscape(code, next());\n  };\n  const wouldStartAnIdentifier = function(c1, c2, c3) {\n    if (c1 === 45)\n      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);\n    else if (namestartchar(c1))\n      return true;\n    else if (c1 === 92)\n      return areAValidEscape(c1, c2);\n    else\n      return false;\n  };\n  const startsWithAnIdentifier = function() {\n    return wouldStartAnIdentifier(code, next(1), next(2));\n  };\n  const wouldStartANumber = function(c1, c2, c3) {\n    if (c1 === 43 || c1 === 45) {\n      if (digit(c2))\n        return true;\n      if (c2 === 46 && digit(c3))\n        return true;\n      return false;\n    } else if (c1 === 46) {\n      if (digit(c2))\n        return true;\n      return false;\n    } else if (digit(c1)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const startsWithANumber = function() {\n    return wouldStartANumber(code, next(1), next(2));\n  };\n  const consumeAName = function() {\n    let result = "";\n    while (consume()) {\n      if (namechar(code)) {\n        result += stringFromCode(code);\n      } else if (startsWithAValidEscape()) {\n        result += stringFromCode(consumeEscape());\n      } else {\n        reconsume();\n        return result;\n      }\n    }\n    throw new Error("Internal parse error");\n  };\n  const consumeANumber = function() {\n    let repr = "";\n    let type = "integer";\n    if (next() === 43 || next() === 45) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    while (digit(next())) {\n      consume();\n      repr += stringFromCode(code);\n    }\n    if (next(1) === 46 && digit(next(2))) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const c1 = next(1), c2 = next(2), c3 = next(3);\n    if ((c1 === 69 || c1 === 101) && digit(c2)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      consume();\n      repr += stringFromCode(code);\n      type = "number";\n      while (digit(next())) {\n        consume();\n        repr += stringFromCode(code);\n      }\n    }\n    const value = convertAStringToANumber(repr);\n    return { type, value, repr };\n  };\n  const convertAStringToANumber = function(string) {\n    return +string;\n  };\n  const consumeTheRemnantsOfABadURL = function() {\n    while (consume()) {\n      if (code === 41 || eof()) {\n        return;\n      } else if (startsWithAValidEscape()) {\n        consumeEscape();\n        donothing();\n      } else {\n        donothing();\n      }\n    }\n  };\n  let iterationCount = 0;\n  while (!eof(next())) {\n    tokens.push(consumeAToken());\n    iterationCount++;\n    if (iterationCount > str.length * 2)\n      throw new Error("I\'m infinite-looping!");\n  }\n  return tokens;\n}\nvar CSSParserToken = class {\n  constructor() {\n    this.tokenType = "";\n  }\n  toJSON() {\n    return { token: this.tokenType };\n  }\n  toString() {\n    return this.tokenType;\n  }\n  toSource() {\n    return "" + this;\n  }\n};\nvar BadStringToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADSTRING";\n  }\n};\nvar BadURLToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "BADURL";\n  }\n};\nvar WhitespaceToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "WHITESPACE";\n  }\n  toString() {\n    return "WS";\n  }\n  toSource() {\n    return " ";\n  }\n};\nvar CDOToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDO";\n  }\n  toSource() {\n    return "<!--";\n  }\n};\nvar CDCToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "CDC";\n  }\n  toSource() {\n    return "-->";\n  }\n};\nvar ColonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ":";\n  }\n};\nvar SemicolonToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ";";\n  }\n};\nvar CommaToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = ",";\n  }\n};\nvar GroupingToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n    this.mirror = "";\n  }\n};\nvar OpenCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "{";\n    this.value = "{";\n    this.mirror = "}";\n  }\n};\nvar CloseCurlyToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "}";\n    this.value = "}";\n    this.mirror = "{";\n  }\n};\nvar OpenSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "[";\n    this.value = "[";\n    this.mirror = "]";\n  }\n};\nvar CloseSquareToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "]";\n    this.value = "]";\n    this.mirror = "[";\n  }\n};\nvar OpenParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = "(";\n    this.value = "(";\n    this.mirror = ")";\n  }\n};\nvar CloseParenToken = class extends GroupingToken {\n  constructor() {\n    super();\n    this.tokenType = ")";\n    this.value = ")";\n    this.mirror = "(";\n  }\n};\nvar IncludeMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "~=";\n  }\n};\nvar DashMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "|=";\n  }\n};\nvar PrefixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "^=";\n  }\n};\nvar SuffixMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "$=";\n  }\n};\nvar SubstringMatchToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "*=";\n  }\n};\nvar ColumnToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "||";\n  }\n};\nvar EOFToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.tokenType = "EOF";\n  }\n  toSource() {\n    return "";\n  }\n};\nvar DelimToken = class extends CSSParserToken {\n  constructor(code) {\n    super();\n    this.tokenType = "DELIM";\n    this.value = "";\n    this.value = stringFromCode(code);\n  }\n  toString() {\n    return "DELIM(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n  toSource() {\n    if (this.value === "\\\\")\n      return "\\\\\\n";\n    else\n      return this.value;\n  }\n};\nvar StringValuedToken = class extends CSSParserToken {\n  constructor() {\n    super(...arguments);\n    this.value = "";\n  }\n  ASCIIMatch(str) {\n    return this.value.toLowerCase() === str.toLowerCase();\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    return json;\n  }\n};\nvar IdentToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "IDENT";\n    this.value = val;\n  }\n  toString() {\n    return "IDENT(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value);\n  }\n};\nvar FunctionToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "FUNCTION";\n    this.value = val;\n    this.mirror = ")";\n  }\n  toString() {\n    return "FUNCTION(" + this.value + ")";\n  }\n  toSource() {\n    return escapeIdent(this.value) + "(";\n  }\n};\nvar AtKeywordToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "AT-KEYWORD";\n    this.value = val;\n  }\n  toString() {\n    return "AT(" + this.value + ")";\n  }\n  toSource() {\n    return "@" + escapeIdent(this.value);\n  }\n};\nvar HashToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "HASH";\n    this.value = val;\n    this.type = "unrestricted";\n  }\n  toString() {\n    return "HASH(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    return json;\n  }\n  toSource() {\n    if (this.type === "id")\n      return "#" + escapeIdent(this.value);\n    else\n      return "#" + escapeHash(this.value);\n  }\n};\nvar StringToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "STRING";\n    this.value = val;\n  }\n  toString() {\n    return \'"\' + escapeString(this.value) + \'"\';\n  }\n};\nvar URLToken = class extends StringValuedToken {\n  constructor(val) {\n    super();\n    this.tokenType = "URL";\n    this.value = val;\n  }\n  toString() {\n    return "URL(" + this.value + ")";\n  }\n  toSource() {\n    return \'url("\' + escapeString(this.value) + \'")\';\n  }\n};\nvar NumberToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "NUMBER";\n    this.type = "integer";\n    this.repr = "";\n  }\n  toString() {\n    if (this.type === "integer")\n      return "INT(" + this.value + ")";\n    return "NUMBER(" + this.value + ")";\n  }\n  toJSON() {\n    const json = super.toJSON();\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr;\n  }\n};\nvar PercentageToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "PERCENTAGE";\n    this.repr = "";\n  }\n  toString() {\n    return "PERCENTAGE(" + this.value + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.repr = this.repr;\n    return json;\n  }\n  toSource() {\n    return this.repr + "%";\n  }\n};\nvar DimensionToken = class extends CSSParserToken {\n  constructor() {\n    super();\n    this.tokenType = "DIMENSION";\n    this.type = "integer";\n    this.repr = "";\n    this.unit = "";\n  }\n  toString() {\n    return "DIM(" + this.value + "," + this.unit + ")";\n  }\n  toJSON() {\n    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);\n    json.value = this.value;\n    json.type = this.type;\n    json.repr = this.repr;\n    json.unit = this.unit;\n    return json;\n  }\n  toSource() {\n    const source = this.repr;\n    let unit = escapeIdent(this.unit);\n    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {\n      unit = "\\\\65 " + unit.slice(1, unit.length);\n    }\n    return source + unit;\n  }\n};\nfunction escapeIdent(string) {\n  string = "" + string;\n  let result = "";\n  const firstcode = string.charCodeAt(0);\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + string[i];\n  }\n  return result;\n}\nfunction escapeHash(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))\n      result += string[i];\n    else\n      result += "\\\\" + code.toString(16) + " ";\n  }\n  return result;\n}\nfunction escapeString(string) {\n  string = "" + string;\n  let result = "";\n  for (let i = 0; i < string.length; i++) {\n    const code = string.charCodeAt(i);\n    if (code === 0)\n      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");\n    if (between(code, 1, 31) || code === 127)\n      result += "\\\\" + code.toString(16) + " ";\n    else if (code === 34 || code === 92)\n      result += "\\\\" + string[i];\n    else\n      result += string[i];\n  }\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/cssParser.ts\nvar InvalidSelectorError = class extends Error {\n};\nfunction parseCSS(selector, customNames) {\n  let tokens;\n  try {\n    tokens = tokenize(selector);\n    if (!(tokens[tokens.length - 1] instanceof EOFToken))\n      tokens.push(new EOFToken());\n  } catch (e) {\n    const newMessage = e.message + ` while parsing css selector "${selector}". Did you mean to CSS.escape it?`;\n    const index = (e.stack || "").indexOf(e.message);\n    if (index !== -1)\n      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);\n    e.message = newMessage;\n    throw e;\n  }\n  const unsupportedToken = tokens.find((token) => {\n    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.\n    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }\n    // Or this way :xpath( {complex-xpath-goes-here("hello")} )\n    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?\n    token instanceof URLToken || token instanceof PercentageToken;\n  });\n  if (unsupportedToken)\n    throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  let pos = 0;\n  const names = new Set();\n  function unexpected() {\n    return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  }\n  function skipWhitespace() {\n    while (tokens[pos] instanceof WhitespaceToken)\n      pos++;\n  }\n  function isIdent(p = pos) {\n    return tokens[p] instanceof IdentToken;\n  }\n  function isString(p = pos) {\n    return tokens[p] instanceof StringToken;\n  }\n  function isNumber(p = pos) {\n    return tokens[p] instanceof NumberToken;\n  }\n  function isComma(p = pos) {\n    return tokens[p] instanceof CommaToken;\n  }\n  function isOpenParen(p = pos) {\n    return tokens[p] instanceof OpenParenToken;\n  }\n  function isCloseParen(p = pos) {\n    return tokens[p] instanceof CloseParenToken;\n  }\n  function isFunction(p = pos) {\n    return tokens[p] instanceof FunctionToken;\n  }\n  function isStar(p = pos) {\n    return tokens[p] instanceof DelimToken && tokens[p].value === "*";\n  }\n  function isEOF(p = pos) {\n    return tokens[p] instanceof EOFToken;\n  }\n  function isClauseCombinator(p = pos) {\n    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);\n  }\n  function isSelectorClauseEnd(p = pos) {\n    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;\n  }\n  function consumeFunctionArguments() {\n    const result2 = [consumeArgument()];\n    while (true) {\n      skipWhitespace();\n      if (!isComma())\n        break;\n      pos++;\n      result2.push(consumeArgument());\n    }\n    return result2;\n  }\n  function consumeArgument() {\n    skipWhitespace();\n    if (isNumber())\n      return tokens[pos++].value;\n    if (isString())\n      return tokens[pos++].value;\n    return consumeComplexSelector();\n  }\n  function consumeComplexSelector() {\n    const result2 = { simples: [] };\n    skipWhitespace();\n    if (isClauseCombinator()) {\n      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });\n    } else {\n      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });\n    }\n    while (true) {\n      skipWhitespace();\n      if (isClauseCombinator()) {\n        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;\n        skipWhitespace();\n      } else if (isSelectorClauseEnd()) {\n        break;\n      }\n      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });\n    }\n    return result2;\n  }\n  function consumeSimpleSelector() {\n    let rawCSSString = "";\n    const functions = [];\n    while (!isSelectorClauseEnd()) {\n      if (isIdent() || isStar()) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof HashToken) {\n        rawCSSString += tokens[pos++].toSource();\n      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {\n        pos++;\n        if (isIdent())\n          rawCSSString += "." + tokens[pos++].toSource();\n        else\n          throw unexpected();\n      } else if (tokens[pos] instanceof ColonToken) {\n        pos++;\n        if (isIdent()) {\n          if (!customNames.has(tokens[pos].value.toLowerCase())) {\n            rawCSSString += ":" + tokens[pos++].toSource();\n          } else {\n            const name = tokens[pos++].value.toLowerCase();\n            functions.push({ name, args: [] });\n            names.add(name);\n          }\n        } else if (isFunction()) {\n          const name = tokens[pos++].value.toLowerCase();\n          if (!customNames.has(name)) {\n            rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;\n          } else {\n            functions.push({ name, args: consumeFunctionArguments() });\n            names.add(name);\n          }\n          skipWhitespace();\n          if (!isCloseParen())\n            throw unexpected();\n          pos++;\n        } else {\n          throw unexpected();\n        }\n      } else if (tokens[pos] instanceof OpenSquareToken) {\n        rawCSSString += "[";\n        pos++;\n        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())\n          rawCSSString += tokens[pos++].toSource();\n        if (!(tokens[pos] instanceof CloseSquareToken))\n          throw unexpected();\n        rawCSSString += "]";\n        pos++;\n      } else {\n        throw unexpected();\n      }\n    }\n    if (!rawCSSString && !functions.length)\n      throw unexpected();\n    return { css: rawCSSString || void 0, functions };\n  }\n  function consumeBuiltinFunctionArguments() {\n    let s = "";\n    let balance = 1;\n    while (!isEOF()) {\n      if (isOpenParen() || isFunction())\n        balance++;\n      if (isCloseParen())\n        balance--;\n      if (!balance)\n        break;\n      s += tokens[pos++].toSource();\n    }\n    return s;\n  }\n  const result = consumeFunctionArguments();\n  if (!isEOF())\n    throw unexpected();\n  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))\n    throw new InvalidSelectorError(`Error while parsing css selector "${selector}". Did you mean to CSS.escape it?`);\n  return { selector: result, names: Array.from(names) };\n}\n\n// packages/playwright-core/src/utils/isomorphic/selectorParser.ts\nvar kNestedSelectorNames = new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);\nvar kNestedSelectorNamesWithDistance = new Set(["left-of", "right-of", "above", "below", "near"]);\nvar customCSSNames = new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);\nfunction parseSelector(selector) {\n  const parsedStrings = parseSelectorString(selector);\n  const parts = [];\n  for (const part of parsedStrings.parts) {\n    if (part.name === "css" || part.name === "css:light") {\n      if (part.name === "css:light")\n        part.body = ":light(" + part.body + ")";\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      parts.push({\n        name: "css",\n        body: parsedCSS.selector,\n        source: part.body\n      });\n      continue;\n    }\n    if (kNestedSelectorNames.has(part.name)) {\n      let innerSelector;\n      let distance;\n      try {\n        const unescaped = JSON.parse("[" + part.body + "]");\n        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")\n          throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n        innerSelector = unescaped[0];\n        if (unescaped.length === 2) {\n          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))\n            throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n          distance = unescaped[1];\n        }\n      } catch (e) {\n        throw new InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);\n      }\n      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };\n      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");\n      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;\n      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))\n        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);\n      parts.push(nested);\n      continue;\n    }\n    parts.push({ ...part, source: part.body });\n  }\n  if (kNestedSelectorNames.has(parts[0].name))\n    throw new InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);\n  return {\n    capture: parsedStrings.capture,\n    parts\n  };\n}\nfunction selectorPartsEqual(list1, list2) {\n  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });\n}\nfunction stringifySelector(selector, forceEngineName) {\n  if (typeof selector === "string")\n    return selector;\n  return selector.parts.map((p, i) => {\n    let includeEngine = true;\n    if (!forceEngineName && i !== selector.capture) {\n      if (p.name === "css")\n        includeEngine = false;\n      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))\n        includeEngine = false;\n    }\n    const prefix = includeEngine ? p.name + "=" : "";\n    return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;\n  }).join(" >> ");\n}\nfunction parseSelectorString(selector) {\n  let index = 0;\n  let quote;\n  let start = 0;\n  const result = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf("=");\n    let name;\n    let body;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === \'"\' && part[part.length - 1] === \'"\') {\n      name = "text";\n      body = part;\n    } else if (part.length > 1 && part[0] === "\'" && part[part.length - 1] === "\'") {\n      name = "text";\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith("..")) {\n      name = "xpath";\n      body = part;\n    } else {\n      name = "css";\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === "*") {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== void 0)\n        throw new InvalidSelectorError(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n  if (!selector.includes(">>")) {\n    index = selector.length;\n    append();\n    return result;\n  }\n  const shouldIgnoreTextSelectorQuote = () => {\n    const prefix = selector.substring(start, index);\n    const match = prefix.match(/^\\s*text\\s*=(.*)$/);\n    return !!match && !!match[1];\n  };\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === "\\\\" && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = void 0;\n      index++;\n    } else if (!quote && (c === \'"\' || c === "\'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {\n      quote = c;\n      index++;\n    } else if (!quote && c === ">" && selector[index + 1] === ">") {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\nfunction parseAttributeSelector(selector, allowUnquotedStrings) {\n  let wp = 0;\n  let EOL = selector.length === 0;\n  const next = () => selector[wp] || "";\n  const eat1 = () => {\n    const result2 = next();\n    ++wp;\n    EOL = wp >= selector.length;\n    return result2;\n  };\n  const syntaxError = (stage) => {\n    if (EOL)\n      throw new InvalidSelectorError(`Unexpected end of selector while parsing selector \\`${selector}\\``);\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));\n  };\n  function skipSpaces() {\n    while (!EOL && /\\s/.test(next()))\n      eat1();\n  }\n  function isCSSNameChar(char) {\n    return char >= "\\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";\n  }\n  function readIdentifier() {\n    let result2 = "";\n    skipSpaces();\n    while (!EOL && isCSSNameChar(next()))\n      result2 += eat1();\n    return result2;\n  }\n  function readQuotedString(quote) {\n    let result2 = eat1();\n    if (result2 !== quote)\n      syntaxError("parsing quoted string");\n    while (!EOL && next() !== quote) {\n      if (next() === "\\\\")\n        eat1();\n      result2 += eat1();\n    }\n    if (next() !== quote)\n      syntaxError("parsing quoted string");\n    result2 += eat1();\n    return result2;\n  }\n  function readRegularExpression() {\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let source = "";\n    let inClass = false;\n    while (!EOL) {\n      if (next() === "\\\\") {\n        source += eat1();\n        if (EOL)\n          syntaxError("parsing regular expression");\n      } else if (inClass && next() === "]") {\n        inClass = false;\n      } else if (!inClass && next() === "[") {\n        inClass = true;\n      } else if (!inClass && next() === "/") {\n        break;\n      }\n      source += eat1();\n    }\n    if (eat1() !== "/")\n      syntaxError("parsing regular expression");\n    let flags = "";\n    while (!EOL && next().match(/[dgimsuy]/))\n      flags += eat1();\n    try {\n      return new RegExp(source, flags);\n    } catch (e) {\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\`: ${e.message}`);\n    }\n  }\n  function readAttributeToken() {\n    let token = "";\n    skipSpaces();\n    if (next() === `\'` || next() === `"`)\n      token = readQuotedString(next()).slice(1, -1);\n    else\n      token = readIdentifier();\n    if (!token)\n      syntaxError("parsing property path");\n    return token;\n  }\n  function readOperator() {\n    skipSpaces();\n    let op = "";\n    if (!EOL)\n      op += eat1();\n    if (!EOL && op !== "=")\n      op += eat1();\n    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))\n      syntaxError("parsing operator");\n    return op;\n  }\n  function readAttribute() {\n    eat1();\n    const jsonPath = [];\n    jsonPath.push(readAttributeToken());\n    skipSpaces();\n    while (next() === ".") {\n      eat1();\n      jsonPath.push(readAttributeToken());\n      skipSpaces();\n    }\n    if (next() === "]") {\n      eat1();\n      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };\n    }\n    const operator = readOperator();\n    let value = void 0;\n    let caseSensitive = true;\n    skipSpaces();\n    if (next() === "/") {\n      if (operator !== "=")\n        throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with regular expression`);\n      value = readRegularExpression();\n    } else if (next() === `\'` || next() === `"`) {\n      value = readQuotedString(next()).slice(1, -1);\n      skipSpaces();\n      if (next() === "i" || next() === "I") {\n        caseSensitive = false;\n        eat1();\n      } else if (next() === "s" || next() === "S") {\n        caseSensitive = true;\n        eat1();\n      }\n    } else {\n      value = "";\n      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))\n        value += eat1();\n      if (value === "true") {\n        value = true;\n      } else if (value === "false") {\n        value = false;\n      } else {\n        if (!allowUnquotedStrings) {\n          value = +value;\n          if (Number.isNaN(value))\n            syntaxError("parsing attribute value");\n        }\n      }\n    }\n    skipSpaces();\n    if (next() !== "]")\n      syntaxError("parsing attribute value");\n    eat1();\n    if (operator !== "=" && typeof value !== "string")\n      throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);\n    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };\n  }\n  const result = {\n    name: "",\n    attributes: []\n  };\n  result.name = readIdentifier();\n  skipSpaces();\n  while (next() === "[") {\n    result.attributes.push(readAttribute());\n    skipSpaces();\n  }\n  if (!EOL)\n    syntaxError(void 0);\n  if (!result.name && !result.attributes.length)\n    throw new InvalidSelectorError(`Error while parsing selector \\`${selector}\\` - selector cannot be empty`);\n  return result;\n}\n\n// packages/playwright-core/src/utils/isomorphic/stringUtils.ts\nfunction escapeWithQuotes(text, char = "\'") {\n  const stringified = JSON.stringify(text);\n  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\"/g, \'"\');\n  if (char === "\'")\n    return char + escapedText.replace(/[\']/g, "\\\\\'") + char;\n  if (char === \'"\')\n    return char + escapedText.replace(/["]/g, \'\\\\"\') + char;\n  if (char === "`")\n    return char + escapedText.replace(/[`]/g, "`") + char;\n  throw new Error("Invalid escape char");\n}\nfunction toTitleCase(name) {\n  return name.charAt(0).toUpperCase() + name.substring(1);\n}\nfunction toSnakeCase(name) {\n  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();\n}\nfunction normalizeEscapedRegexQuotes(source) {\n  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\([\'"`])/g, "$1$2$3");\n}\nfunction escapeRegexForSelector(re) {\n  if (re.unicode || re.unicodeSets)\n    return String(re);\n  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*(["\'`])/g, "$1$2\\\\$3").replace(/>>/g, "\\\\>\\\\>");\n}\nfunction escapeForTextSelector(text, exact) {\n  if (typeof text !== "string")\n    return escapeRegexForSelector(text);\n  return `${JSON.stringify(text)}${exact ? "s" : "i"}`;\n}\nfunction escapeForAttributeSelector(value, exact) {\n  if (typeof value !== "string")\n    return escapeRegexForSelector(value);\n  return `"${value.replace(/\\\\/g, "\\\\\\\\").replace(/["]/g, \'\\\\"\')}"${exact ? "s" : "i"}`;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts\nfunction asLocator(lang, selector, isFrameLocator = false) {\n  return asLocators(lang, selector, isFrameLocator, 1)[0];\n}\nfunction asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {\n  try {\n    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);\n  } catch (e) {\n    return [selector];\n  }\n}\nfunction innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {\n  const parts = [...parsed.parts];\n  const tokens = [];\n  let nextBase = isFrameLocator ? "frame-locator" : "page";\n  for (let index = 0; index < parts.length; index++) {\n    const part = parts[index];\n    const base = nextBase;\n    nextBase = "locator";\n    if (part.name === "nth") {\n      if (part.body === "0")\n        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);\n      else if (part.body === "-1")\n        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);\n      else\n        tokens.push([factory.generateLocator(base, "nth", part.body)]);\n      continue;\n    }\n    if (part.name === "visible") {\n      tokens.push([factory.generateLocator(base, "visible", part.body), factory.generateLocator(base, "default", `visible=${part.body}`)]);\n      continue;\n    }\n    if (part.name === "internal:text") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "text", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:has-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has-not-text") {\n      const { exact, text } = detectExact(part.body);\n      if (!exact) {\n        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:has") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));\n      continue;\n    }\n    if (part.name === "internal:has-not") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));\n      continue;\n    }\n    if (part.name === "internal:and") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));\n      continue;\n    }\n    if (part.name === "internal:or") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));\n      continue;\n    }\n    if (part.name === "internal:chain") {\n      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);\n      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));\n      continue;\n    }\n    if (part.name === "internal:label") {\n      const { exact, text } = detectExact(part.body);\n      tokens.push([factory.generateLocator(base, "label", text, { exact })]);\n      continue;\n    }\n    if (part.name === "internal:role") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const options = { attrs: [] };\n      for (const attr of attrSelector.attributes) {\n        if (attr.name === "name") {\n          options.exact = attr.caseSensitive;\n          options.name = attr.value;\n        } else {\n          if (attr.name === "level" && typeof attr.value === "string")\n            attr.value = +attr.value;\n          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });\n        }\n      }\n      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);\n      continue;\n    }\n    if (part.name === "internal:testid") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { value } = attrSelector.attributes[0];\n      tokens.push([factory.generateLocator(base, "test-id", value)]);\n      continue;\n    }\n    if (part.name === "internal:attr") {\n      const attrSelector = parseAttributeSelector(part.body, true);\n      const { name, value, caseSensitive } = attrSelector.attributes[0];\n      const text = value;\n      const exact = !!caseSensitive;\n      if (name === "placeholder") {\n        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);\n        continue;\n      }\n      if (name === "alt") {\n        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);\n        continue;\n      }\n      if (name === "title") {\n        tokens.push([factory.generateLocator(base, "title", text, { exact })]);\n        continue;\n      }\n    }\n    if (part.name === "internal:control" && part.body === "enter-frame") {\n      const lastTokens = tokens[tokens.length - 1];\n      const lastPart = parts[index - 1];\n      const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));\n      if (["xpath", "css"].includes(lastPart.name)) {\n        transformed.push(\n          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] })),\n          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] }, true))\n        );\n      }\n      lastTokens.splice(0, lastTokens.length, ...transformed);\n      nextBase = "frame-locator";\n      continue;\n    }\n    const nextPart = parts[index + 1];\n    const selectorPart = stringifySelector({ parts: [part] });\n    const locatorPart = factory.generateLocator(base, "default", selectorPart);\n    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {\n      const { exact, text } = detectExact(nextPart.body);\n      if (!exact) {\n        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });\n        const options = {};\n        if (nextPart.name === "internal:has-text")\n          options.hasText = text;\n        else\n          options.hasNotText = text;\n        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);\n        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);\n        index++;\n        continue;\n      }\n    }\n    let locatorPartWithEngine;\n    if (["xpath", "css"].includes(part.name)) {\n      const selectorPart2 = stringifySelector(\n        { parts: [part] },\n        /* forceEngineName */\n        true\n      );\n      locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);\n    }\n    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));\n  }\n  return combineTokens(factory, tokens, maxOutputSize);\n}\nfunction combineTokens(factory, tokens, maxOutputSize) {\n  const currentTokens = tokens.map(() => "");\n  const result = [];\n  const visit = (index) => {\n    if (index === tokens.length) {\n      result.push(factory.chainLocators(currentTokens));\n      return result.length < maxOutputSize;\n    }\n    for (const taken of tokens[index]) {\n      currentTokens[index] = taken;\n      if (!visit(index + 1))\n        return false;\n    }\n    return true;\n  };\n  visit(0);\n  return result;\n}\nfunction detectExact(text) {\n  let exact = false;\n  const match = text.match(/^\\/(.*)\\/([igm]*)$/);\n  if (match)\n    return { text: new RegExp(match[1], match[2]) };\n  if (text.endsWith(\'"\')) {\n    text = JSON.parse(text);\n    exact = true;\n  } else if (text.endsWith(\'"s\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = true;\n  } else if (text.endsWith(\'"i\')) {\n    text = JSON.parse(text.substring(0, text.length - 1));\n    exact = false;\n  }\n  return { exact, text };\n}\nvar JavaScriptLocatorFactory = class {\n  constructor(preferredQuote) {\n    this.preferredQuote = preferredQuote;\n  }\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frameLocator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "visible":\n        return `filter({ visible: ${body === "true" ? "true" : "false"} })`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name: ${this.regexToSourceString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name: ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact: true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";\n        return `getByRole(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter({ hasText: ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `filter({ hasNotText: ${this.toHasText(body)} })`;\n      case "has":\n        return `filter({ has: ${body} })`;\n      case "hasNot":\n        return `filter({ hasNot: ${body} })`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToSourceString(re) {\n    return normalizeEscapedRegexQuotes(String(re));\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToSourceString(body)})`;\n    return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToSourceString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToSourceString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    var _a;\n    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : "\'");\n  }\n};\nvar PythonLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frame_locator(${this.quote(body)})`;\n      case "frame":\n        return `content_frame`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first`;\n      case "last":\n        return `last`;\n      case "visible":\n        return `filter(visible=${body === "true" ? "True" : "False"})`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`name=${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`name=${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`exact=True`);\n        }\n        for (const { name, value } of options.attrs) {\n          let valueString = typeof value === "string" ? this.quote(value) : value;\n          if (typeof value === "boolean")\n            valueString = value ? "True" : "False";\n          attrs.push(`${toSnakeCase(name)}=${valueString}`);\n        }\n        const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";\n        return `get_by_role(${this.quote(body)}${attrString})`;\n      case "has-text":\n        return `filter(has_text=${this.toHasText(body)})`;\n      case "has-not-text":\n        return `filter(has_not_text=${this.toHasText(body)})`;\n      case "has":\n        return `filter(has=${body})`;\n      case "hasNot":\n        return `filter(has_not=${body})`;\n      case "and":\n        return `and_(${body})`;\n      case "or":\n        return `or_(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `get_by_test_id(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("get_by_text", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("get_by_label", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("get_by_title", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";\n    return `re.compile(r"${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, "/").replace(/"/g, \'\\\\"\')}"${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, exact=True)`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return `${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JavaLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    let clazz;\n    switch (base) {\n      case "page":\n        clazz = "Page";\n        break;\n      case "frame-locator":\n        clazz = "FrameLocator";\n        break;\n      case "locator":\n        clazz = "Locator";\n        break;\n    }\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;\n        if (options.hasNotText !== void 0)\n          return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;\n        return `locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `frameLocator(${this.quote(body)})`;\n      case "frame":\n        return `contentFrame()`;\n      case "nth":\n        return `nth(${body})`;\n      case "first":\n        return `first()`;\n      case "last":\n        return `last()`;\n      case "visible":\n        return `filter(new ${clazz}.FilterOptions().setVisible(${body === "true" ? "true" : "false"}))`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`.setName(${this.regexToString(options.name)})`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`.setName(${this.quote(options.name)})`);\n          if (options.exact)\n            attrs.push(`.setExact(true)`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`.set${toTitleCase(name)}(${typeof value === "string" ? this.quote(value) : value})`);\n        const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";\n        return `getByRole(AriaRole.${toSnakeCase(body).toUpperCase()}${attrString})`;\n      case "has-text":\n        return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;\n      case "has-not-text":\n        return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;\n      case "has":\n        return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;\n      case "hasNot":\n        return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;\n      case "and":\n        return `and(${body})`;\n      case "or":\n        return `or(${body})`;\n      case "chain":\n        return `locator(${body})`;\n      case "test-id":\n        return `getByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";\n    return `Pattern.compile(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(clazz, method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new ${clazz}.${toTitleCase(method)}Options().setExact(true))`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return this.regexToString(body);\n    return this.quote(body);\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar CSharpLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    switch (kind) {\n      case "default":\n        if (options.hasText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;\n        if (options.hasNotText !== void 0)\n          return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;\n        return `Locator(${this.quote(body)})`;\n      case "frame-locator":\n        return `FrameLocator(${this.quote(body)})`;\n      case "frame":\n        return `ContentFrame`;\n      case "nth":\n        return `Nth(${body})`;\n      case "first":\n        return `First`;\n      case "last":\n        return `Last`;\n      case "visible":\n        return `Filter(new() { Visible = ${body === "true" ? "true" : "false"} })`;\n      case "role":\n        const attrs = [];\n        if (isRegExp(options.name)) {\n          attrs.push(`NameRegex = ${this.regexToString(options.name)}`);\n        } else if (typeof options.name === "string") {\n          attrs.push(`Name = ${this.quote(options.name)}`);\n          if (options.exact)\n            attrs.push(`Exact = true`);\n        }\n        for (const { name, value } of options.attrs)\n          attrs.push(`${toTitleCase(name)} = ${typeof value === "string" ? this.quote(value) : value}`);\n        const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";\n        return `GetByRole(AriaRole.${toTitleCase(body)}${attrString})`;\n      case "has-text":\n        return `Filter(new() { ${this.toHasText(body)} })`;\n      case "has-not-text":\n        return `Filter(new() { ${this.toHasNotText(body)} })`;\n      case "has":\n        return `Filter(new() { Has = ${body} })`;\n      case "hasNot":\n        return `Filter(new() { HasNot = ${body} })`;\n      case "and":\n        return `And(${body})`;\n      case "or":\n        return `Or(${body})`;\n      case "chain":\n        return `Locator(${body})`;\n      case "test-id":\n        return `GetByTestId(${this.toTestIdValue(body)})`;\n      case "text":\n        return this.toCallWithExact("GetByText", body, !!options.exact);\n      case "alt":\n        return this.toCallWithExact("GetByAltText", body, !!options.exact);\n      case "placeholder":\n        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);\n      case "label":\n        return this.toCallWithExact("GetByLabel", body, !!options.exact);\n      case "title":\n        return this.toCallWithExact("GetByTitle", body, !!options.exact);\n      default:\n        throw new Error("Unknown selector kind " + kind);\n    }\n  }\n  chainLocators(locators) {\n    return locators.join(".");\n  }\n  regexToString(body) {\n    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";\n    return `new Regex(${this.quote(normalizeEscapedRegexQuotes(body.source))}${suffix})`;\n  }\n  toCallWithExact(method, body, exact) {\n    if (isRegExp(body))\n      return `${method}(${this.regexToString(body)})`;\n    if (exact)\n      return `${method}(${this.quote(body)}, new() { Exact = true })`;\n    return `${method}(${this.quote(body)})`;\n  }\n  toHasText(body) {\n    if (isRegExp(body))\n      return `HasTextRegex = ${this.regexToString(body)}`;\n    return `HasText = ${this.quote(body)}`;\n  }\n  toTestIdValue(value) {\n    if (isRegExp(value))\n      return this.regexToString(value);\n    return this.quote(value);\n  }\n  toHasNotText(body) {\n    if (isRegExp(body))\n      return `HasNotTextRegex = ${this.regexToString(body)}`;\n    return `HasNotText = ${this.quote(body)}`;\n  }\n  quote(text) {\n    return escapeWithQuotes(text, \'"\');\n  }\n};\nvar JsonlLocatorFactory = class {\n  generateLocator(base, kind, body, options = {}) {\n    return JSON.stringify({\n      kind,\n      body,\n      options\n    });\n  }\n  chainLocators(locators) {\n    const objects = locators.map((l) => JSON.parse(l));\n    for (let i = 0; i < objects.length - 1; ++i)\n      objects[i].next = objects[i + 1];\n    return JSON.stringify(objects[0]);\n  }\n};\nvar generators = {\n  javascript: JavaScriptLocatorFactory,\n  python: PythonLocatorFactory,\n  java: JavaLocatorFactory,\n  csharp: CSharpLocatorFactory,\n  jsonl: JsonlLocatorFactory\n};\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\n// packages/playwright-core/src/utils/isomorphic/locatorUtils.ts\nfunction getByAttributeTextSelector(attrName, text, options) {\n  return `internal:attr=[${attrName}=${escapeForAttributeSelector(text, (options == null ? void 0 : options.exact) || false)}]`;\n}\nfunction getByTestIdSelector(testIdAttributeName, testId) {\n  return `internal:testid=[${testIdAttributeName}=${escapeForAttributeSelector(testId, true)}]`;\n}\nfunction getByLabelSelector(text, options) {\n  return "internal:label=" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByAltTextSelector(text, options) {\n  return getByAttributeTextSelector("alt", text, options);\n}\nfunction getByTitleSelector(text, options) {\n  return getByAttributeTextSelector("title", text, options);\n}\nfunction getByPlaceholderSelector(text, options) {\n  return getByAttributeTextSelector("placeholder", text, options);\n}\nfunction getByTextSelector(text, options) {\n  return "internal:text=" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));\n}\nfunction getByRoleSelector(role, options = {}) {\n  const props = [];\n  if (options.checked !== void 0)\n    props.push(["checked", String(options.checked)]);\n  if (options.disabled !== void 0)\n    props.push(["disabled", String(options.disabled)]);\n  if (options.selected !== void 0)\n    props.push(["selected", String(options.selected)]);\n  if (options.expanded !== void 0)\n    props.push(["expanded", String(options.expanded)]);\n  if (options.includeHidden !== void 0)\n    props.push(["include-hidden", String(options.includeHidden)]);\n  if (options.level !== void 0)\n    props.push(["level", String(options.level)]);\n  if (options.name !== void 0)\n    props.push(["name", escapeForAttributeSelector(options.name, !!options.exact)]);\n  if (options.pressed !== void 0)\n    props.push(["pressed", String(options.pressed)]);\n  return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join("")}`;\n}\n\n// packages/injected/src/consoleApi.ts\nvar selectorSymbol = Symbol("selector");\nselectorSymbol;\nvar _Locator = class _Locator {\n  constructor(injectedScript, selector, options) {\n    if (options == null ? void 0 : options.hasText)\n      selector += ` >> internal:has-text=${escapeForTextSelector(options.hasText, false)}`;\n    if (options == null ? void 0 : options.hasNotText)\n      selector += ` >> internal:has-not-text=${escapeForTextSelector(options.hasNotText, false)}`;\n    if (options == null ? void 0 : options.has)\n      selector += ` >> internal:has=` + JSON.stringify(options.has[selectorSymbol]);\n    if (options == null ? void 0 : options.hasNot)\n      selector += ` >> internal:has-not=` + JSON.stringify(options.hasNot[selectorSymbol]);\n    if ((options == null ? void 0 : options.visible) !== void 0)\n      selector += ` >> visible=${options.visible ? "true" : "false"}`;\n    this[selectorSymbol] = selector;\n    if (selector) {\n      const parsed = injectedScript.parseSelector(selector);\n      this.element = injectedScript.querySelector(parsed, injectedScript.document, false);\n      this.elements = injectedScript.querySelectorAll(parsed, injectedScript.document);\n    }\n    const selectorBase = selector;\n    const self = this;\n    self.locator = (selector2, options2) => {\n      return new _Locator(injectedScript, selectorBase ? selectorBase + " >> " + selector2 : selector2, options2);\n    };\n    self.getByTestId = (testId) => self.locator(getByTestIdSelector(injectedScript.testIdAttributeNameForStrictErrorAndConsoleCodegen(), testId));\n    self.getByAltText = (text, options2) => self.locator(getByAltTextSelector(text, options2));\n    self.getByLabel = (text, options2) => self.locator(getByLabelSelector(text, options2));\n    self.getByPlaceholder = (text, options2) => self.locator(getByPlaceholderSelector(text, options2));\n    self.getByText = (text, options2) => self.locator(getByTextSelector(text, options2));\n    self.getByTitle = (text, options2) => self.locator(getByTitleSelector(text, options2));\n    self.getByRole = (role, options2 = {}) => self.locator(getByRoleSelector(role, options2));\n    self.filter = (options2) => new _Locator(injectedScript, selector, options2);\n    self.first = () => self.locator("nth=0");\n    self.last = () => self.locator("nth=-1");\n    self.nth = (index) => self.locator(`nth=${index}`);\n    self.and = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:and=` + JSON.stringify(locator[selectorSymbol]));\n    self.or = (locator) => new _Locator(injectedScript, selectorBase + ` >> internal:or=` + JSON.stringify(locator[selectorSymbol]));\n  }\n};\nvar Locator = _Locator;\nvar ConsoleAPI = class {\n  constructor(injectedScript) {\n    this._injectedScript = injectedScript;\n    if (this._injectedScript.window.playwright)\n      return;\n    this._injectedScript.window.playwright = {\n      $: (selector, strict) => this._querySelector(selector, !!strict),\n      $$: (selector) => this._querySelectorAll(selector),\n      inspect: (selector) => this._inspect(selector),\n      selector: (element) => this._selector(element),\n      generateLocator: (element, language) => this._generateLocator(element, language),\n      ariaSnapshot: (element, options) => {\n        return this._injectedScript.ariaSnapshot(element || this._injectedScript.document.body, options);\n      },\n      resume: () => this._resume(),\n      ...new Locator(injectedScript, "")\n    };\n    delete this._injectedScript.window.playwright.filter;\n    delete this._injectedScript.window.playwright.first;\n    delete this._injectedScript.window.playwright.last;\n    delete this._injectedScript.window.playwright.nth;\n    delete this._injectedScript.window.playwright.and;\n    delete this._injectedScript.window.playwright.or;\n  }\n  _querySelector(selector, strict) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.query(\'Playwright >> selector\').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelector(parsed, this._injectedScript.document, strict);\n  }\n  _querySelectorAll(selector) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.$$(\'Playwright >> selector\').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelectorAll(parsed, this._injectedScript.document);\n  }\n  _inspect(selector) {\n    if (typeof selector !== "string")\n      throw new Error(`Usage: playwright.inspect(\'Playwright >> selector\').`);\n    this._injectedScript.window.inspect(this._querySelector(selector, false));\n  }\n  _selector(element) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.selector(element).`);\n    return this._injectedScript.generateSelectorSimple(element);\n  }\n  _generateLocator(element, language) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.locator(element).`);\n    const selector = this._injectedScript.generateSelectorSimple(element);\n    return asLocator(language || "javascript", selector);\n  }\n  _resume() {\n    this._injectedScript.window.__pw_resume().catch(() => {\n    });\n  }\n};\nvar consoleApi_default = ConsoleAPI;\n';
	return consoleApiSource;
}

var language;
var hasRequiredLanguage;

function requireLanguage () {
	if (hasRequiredLanguage) return language;
	hasRequiredLanguage = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var language_exports = {};
	__export(language_exports, {
	  fromKeyboardModifiers: () => fromKeyboardModifiers,
	  generateCode: () => generateCode,
	  sanitizeDeviceOptions: () => sanitizeDeviceOptions,
	  toClickOptionsForSourceCode: () => toClickOptionsForSourceCode,
	  toKeyboardModifiers: () => toKeyboardModifiers,
	  toSignalMap: () => toSignalMap
	});
	language = __toCommonJS(language_exports);
	function generateCode(actions, languageGenerator, options) {
	  const header = languageGenerator.generateHeader(options);
	  const footer = languageGenerator.generateFooter(options.saveStorage);
	  const actionTexts = actions.map((a) => languageGenerator.generateAction(a)).filter(Boolean);
	  const text = [header, ...actionTexts, footer].join("\n");
	  return { header, footer, actionTexts, text };
	}
	function sanitizeDeviceOptions(device, options) {
	  const cleanedOptions = {};
	  for (const property in options) {
	    if (JSON.stringify(device[property]) !== JSON.stringify(options[property]))
	      cleanedOptions[property] = options[property];
	  }
	  return cleanedOptions;
	}
	function toSignalMap(action) {
	  let popup;
	  let download;
	  let dialog;
	  for (const signal of action.signals) {
	    if (signal.name === "popup")
	      popup = signal;
	    else if (signal.name === "download")
	      download = signal;
	    else if (signal.name === "dialog")
	      dialog = signal;
	  }
	  return {
	    popup,
	    download,
	    dialog
	  };
	}
	function toKeyboardModifiers(modifiers) {
	  const result = [];
	  if (modifiers & 1)
	    result.push("Alt");
	  if (modifiers & 2)
	    result.push("ControlOrMeta");
	  if (modifiers & 4)
	    result.push("ControlOrMeta");
	  if (modifiers & 8)
	    result.push("Shift");
	  return result;
	}
	function fromKeyboardModifiers(modifiers) {
	  let result = 0;
	  if (!modifiers)
	    return result;
	  if (modifiers.includes("Alt"))
	    result |= 1;
	  if (modifiers.includes("Control"))
	    result |= 2;
	  if (modifiers.includes("ControlOrMeta"))
	    result |= 2;
	  if (modifiers.includes("Meta"))
	    result |= 4;
	  if (modifiers.includes("Shift"))
	    result |= 8;
	  return result;
	}
	function toClickOptionsForSourceCode(action) {
	  const modifiers = toKeyboardModifiers(action.modifiers);
	  const options = {};
	  if (action.button !== "left")
	    options.button = action.button;
	  if (modifiers.length)
	    options.modifiers = modifiers;
	  if (action.clickCount > 2)
	    options.clickCount = action.clickCount;
	  if (action.position)
	    options.position = action.position;
	  return options;
	}
	return language;
}

var recorderUtils;
var hasRequiredRecorderUtils;

function requireRecorderUtils () {
	if (hasRequiredRecorderUtils) return recorderUtils;
	hasRequiredRecorderUtils = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var recorderUtils_exports = {};
	__export(recorderUtils_exports, {
	  buildFullSelector: () => buildFullSelector,
	  collapseActions: () => collapseActions,
	  frameForAction: () => frameForAction,
	  mainFrameForAction: () => mainFrameForAction,
	  metadataToCallLog: () => metadataToCallLog
	});
	recorderUtils = __toCommonJS(recorderUtils_exports);
	function buildFullSelector(framePath, selector) {
	  return [...framePath, selector].join(" >> internal:control=enter-frame >> ");
	}
	function metadataToCallLog(metadata, status) {
	  let title = metadata.apiName || metadata.method;
	  if (metadata.method === "waitForEventInfo")
	    title += `(${metadata.params.info.event})`;
	  title = title.replace("object.expect", "expect");
	  if (metadata.error)
	    status = "error";
	  const params = {
	    url: metadata.params?.url,
	    selector: metadata.params?.selector
	  };
	  let duration = metadata.endTime ? metadata.endTime - metadata.startTime : void 0;
	  if (typeof duration === "number" && metadata.pauseStartTime && metadata.pauseEndTime) {
	    duration -= metadata.pauseEndTime - metadata.pauseStartTime;
	    duration = Math.max(duration, 0);
	  }
	  const callLog = {
	    id: metadata.id,
	    messages: metadata.log,
	    title,
	    status,
	    error: metadata.error?.error?.message,
	    params,
	    duration
	  };
	  return callLog;
	}
	function mainFrameForAction(pageAliases, actionInContext) {
	  const pageAlias = actionInContext.frame.pageAlias;
	  const page = [...pageAliases.entries()].find(([, alias]) => pageAlias === alias)?.[0];
	  if (!page)
	    throw new Error(`Internal error: page ${pageAlias} not found in [${[...pageAliases.values()]}]`);
	  return page.mainFrame();
	}
	async function frameForAction(pageAliases, actionInContext, action) {
	  const pageAlias = actionInContext.frame.pageAlias;
	  const page = [...pageAliases.entries()].find(([, alias]) => pageAlias === alias)?.[0];
	  if (!page)
	    throw new Error("Internal error: page not found");
	  const fullSelector = buildFullSelector(actionInContext.frame.framePath, action.selector);
	  const result = await page.mainFrame().selectors.resolveFrameForSelector(fullSelector);
	  if (!result)
	    throw new Error("Internal error: frame not found");
	  return result.frame;
	}
	function collapseActions(actions) {
	  const result = [];
	  for (const action of actions) {
	    const lastAction = result[result.length - 1];
	    const isSameAction = lastAction && lastAction.action.name === action.action.name && lastAction.frame.pageAlias === action.frame.pageAlias && lastAction.frame.framePath.join("|") === action.frame.framePath.join("|");
	    const isSameSelector = lastAction && "selector" in lastAction.action && "selector" in action.action && action.action.selector === lastAction.action.selector;
	    const shouldMerge = isSameAction && (action.action.name === "navigate" || action.action.name === "fill" && isSameSelector);
	    if (!shouldMerge) {
	      result.push(action);
	      continue;
	    }
	    const startTime = result[result.length - 1].startTime;
	    result[result.length - 1] = action;
	    result[result.length - 1].startTime = startTime;
	  }
	  return result;
	}
	return recorderUtils;
}

var recorderRunner;
var hasRequiredRecorderRunner;

function requireRecorderRunner () {
	if (hasRequiredRecorderRunner) return recorderRunner;
	hasRequiredRecorderRunner = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var recorderRunner_exports = {};
	__export(recorderRunner_exports, {
	  performAction: () => performAction,
	  toClickOptions: () => toClickOptions
	});
	recorderRunner = __toCommonJS(recorderRunner_exports);
	var import_utils = requireUtils();
	var import_language = requireLanguage();
	var import_instrumentation = requireInstrumentation();
	var import_recorderUtils = requireRecorderUtils();
	async function performAction(pageAliases, actionInContext) {
	  const callMetadata = (0, import_instrumentation.serverSideCallMetadata)();
	  const mainFrame = (0, import_recorderUtils.mainFrameForAction)(pageAliases, actionInContext);
	  const { action } = actionInContext;
	  const kActionTimeout = 5e3;
	  if (action.name === "navigate") {
	    await mainFrame.goto(callMetadata, action.url, { timeout: kActionTimeout });
	    return;
	  }
	  if (action.name === "openPage")
	    throw Error("Not reached");
	  if (action.name === "closePage") {
	    await mainFrame._page.close(callMetadata);
	    return;
	  }
	  const selector = (0, import_recorderUtils.buildFullSelector)(actionInContext.frame.framePath, action.selector);
	  if (action.name === "click") {
	    const options = toClickOptions(action);
	    await mainFrame.click(callMetadata, selector, { ...options, timeout: kActionTimeout, strict: true });
	    return;
	  }
	  if (action.name === "press") {
	    const modifiers = (0, import_language.toKeyboardModifiers)(action.modifiers);
	    const shortcut = [...modifiers, action.key].join("+");
	    await mainFrame.press(callMetadata, selector, shortcut, { timeout: kActionTimeout, strict: true });
	    return;
	  }
	  if (action.name === "fill") {
	    await mainFrame.fill(callMetadata, selector, action.text, { timeout: kActionTimeout, strict: true });
	    return;
	  }
	  if (action.name === "setInputFiles") {
	    await mainFrame.setInputFiles(callMetadata, selector, { selector, payloads: [], timeout: kActionTimeout, strict: true });
	    return;
	  }
	  if (action.name === "check") {
	    await mainFrame.check(callMetadata, selector, { timeout: kActionTimeout, strict: true });
	    return;
	  }
	  if (action.name === "uncheck") {
	    await mainFrame.uncheck(callMetadata, selector, { timeout: kActionTimeout, strict: true });
	    return;
	  }
	  if (action.name === "select") {
	    const values = action.options.map((value) => ({ value }));
	    await mainFrame.selectOption(callMetadata, selector, [], values, { timeout: kActionTimeout, strict: true });
	    return;
	  }
	  if (action.name === "assertChecked") {
	    await mainFrame.expect(callMetadata, selector, {
	      selector,
	      expression: "to.be.checked",
	      expectedValue: { checked: action.checked },
	      isNot: !action.checked,
	      timeout: kActionTimeout
	    });
	    return;
	  }
	  if (action.name === "assertText") {
	    await mainFrame.expect(callMetadata, selector, {
	      selector,
	      expression: "to.have.text",
	      expectedText: (0, import_utils.serializeExpectedTextValues)([action.text], { matchSubstring: true, normalizeWhiteSpace: true }),
	      isNot: false,
	      timeout: kActionTimeout
	    });
	    return;
	  }
	  if (action.name === "assertValue") {
	    await mainFrame.expect(callMetadata, selector, {
	      selector,
	      expression: "to.have.value",
	      expectedValue: action.value,
	      isNot: false,
	      timeout: kActionTimeout
	    });
	    return;
	  }
	  if (action.name === "assertVisible") {
	    await mainFrame.expect(callMetadata, selector, {
	      selector,
	      expression: "to.be.visible",
	      isNot: false,
	      timeout: kActionTimeout
	    });
	    return;
	  }
	  throw new Error("Internal error: unexpected action " + action.name);
	}
	function toClickOptions(action) {
	  const modifiers = (0, import_language.toKeyboardModifiers)(action.modifiers);
	  const options = {};
	  if (action.button !== "left")
	    options.button = action.button;
	  if (modifiers.length)
	    options.modifiers = modifiers;
	  if (action.clickCount > 1)
	    options.clickCount = action.clickCount;
	  if (action.position)
	    options.position = action.position;
	  return options;
	}
	return recorderRunner;
}

var recorderCollection;
var hasRequiredRecorderCollection;

function requireRecorderCollection () {
	if (hasRequiredRecorderCollection) return recorderCollection;
	hasRequiredRecorderCollection = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var recorderCollection_exports = {};
	__export(recorderCollection_exports, {
	  RecorderCollection: () => RecorderCollection
	});
	recorderCollection = __toCommonJS(recorderCollection_exports);
	var import_events = require$$0$5;
	var import_recorderRunner = requireRecorderRunner();
	var import_recorderUtils = requireRecorderUtils();
	var import_debug = requireDebug$1();
	var import_time = requireTime$1();
	class RecorderCollection extends import_events.EventEmitter {
	  constructor(pageAliases) {
	    super();
	    this._actions = [];
	    this._enabled = false;
	    this._pageAliases = pageAliases;
	  }
	  restart() {
	    this._actions = [];
	    this.emit("change", []);
	  }
	  setEnabled(enabled) {
	    this._enabled = enabled;
	  }
	  async performAction(actionInContext) {
	    await this._addAction(actionInContext, async () => {
	      await (0, import_recorderRunner.performAction)(this._pageAliases, actionInContext);
	    });
	  }
	  addRecordedAction(actionInContext) {
	    if (["openPage", "closePage"].includes(actionInContext.action.name)) {
	      this._actions.push(actionInContext);
	      this._fireChange();
	      return;
	    }
	    this._addAction(actionInContext).catch(() => {
	    });
	  }
	  async _addAction(actionInContext, callback) {
	    if (!this._enabled)
	      return;
	    if (actionInContext.action.name === "openPage" || actionInContext.action.name === "closePage") {
	      this._actions.push(actionInContext);
	      this._fireChange();
	      return;
	    }
	    this._actions.push(actionInContext);
	    this._fireChange();
	    await callback?.().catch();
	    actionInContext.endTime = (0, import_time.monotonicTime)();
	  }
	  signal(pageAlias, frame, signal) {
	    if (!this._enabled)
	      return;
	    if (signal.name === "navigation" && frame._page.mainFrame() === frame) {
	      const timestamp = (0, import_time.monotonicTime)();
	      const lastAction = this._actions[this._actions.length - 1];
	      const signalThreshold = (0, import_debug.isUnderTest)() ? 500 : 5e3;
	      let generateGoto = false;
	      if (!lastAction)
	        generateGoto = true;
	      else if (lastAction.action.name !== "click" && lastAction.action.name !== "press" && lastAction.action.name !== "fill")
	        generateGoto = true;
	      else if (timestamp - lastAction.startTime > signalThreshold)
	        generateGoto = true;
	      if (generateGoto) {
	        this.addRecordedAction({
	          frame: {
	            pageAlias,
	            framePath: []
	          },
	          action: {
	            name: "navigate",
	            url: frame.url(),
	            signals: []
	          },
	          startTime: timestamp,
	          endTime: timestamp
	        });
	      }
	      return;
	    }
	    if (this._actions.length) {
	      this._actions[this._actions.length - 1].action.signals.push(signal);
	      this._fireChange();
	      return;
	    }
	  }
	  _fireChange() {
	    if (!this._enabled)
	      return;
	    this.emit("change", (0, import_recorderUtils.collapseActions)(this._actions));
	  }
	}
	return recorderCollection;
}

var pollingRecorderSource;
var hasRequiredPollingRecorderSource;

function requirePollingRecorderSource () {
	if (hasRequiredPollingRecorderSource) return pollingRecorderSource;
	hasRequiredPollingRecorderSource = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var pollingRecorderSource_exports = {};
	__export(pollingRecorderSource_exports, {
	  source: () => source
	});
	pollingRecorderSource = __toCommonJS(pollingRecorderSource_exports);
	const source = '\nvar __commonJS = obj => {\n  let required = false;\n  let result;\n  return function __require() {\n    if (!required) {\n      required = true;\n      let fn;\n      for (const name in obj) { fn = obj[name]; break; }\n      const module = { exports: {} };\n      fn(module.exports, module);\n      result = module.exports;\n    }\n    return result;\n  }\n};\nvar __export = (target, all) => {for (var name in all) target[name] = all[name];};\nvar __toESM = mod => ({ ...mod, \'default\': mod });\nvar __toCommonJS = mod => ({ ...mod, __esModule: true });\n\n\n// packages/injected/src/recorder/pollingRecorder.ts\nvar pollingRecorder_exports = {};\n__export(pollingRecorder_exports, {\n  PollingRecorder: () => PollingRecorder,\n  default: () => pollingRecorder_default\n});\nmodule.exports = __toCommonJS(pollingRecorder_exports);\n\n// packages/injected/src/recorder/clipPaths.ts\nvar svgJson = { "tagName": "svg", "children": [{ "tagName": "defs", "children": [{ "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-gripper" }, "children": [{ "tagName": "path", "attrs": { "d": "M5 3h2v2H5zm0 4h2v2H5zm0 4h2v2H5zm4-8h2v2H9zm0 4h2v2H9zm0 4h2v2H9z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-circle-large-filled" }, "children": [{ "tagName": "path", "attrs": { "d": "M8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674 7.157 7.157 0 0 1-2.516 2.509 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-inspect" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M1 3l1-1h12l1 1v6h-1V3H2v8h5v1H2l-1-1V3zm14.707 9.707L9 6v9.414l2.707-2.707h4zM10 13V8.414l3.293 3.293h-2L10 13z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-whole-word" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M0 11H1V13H15V11H16V14H15H1H0V11Z" } }, { "tagName": "path", "attrs": { "d": "M6.84048 11H5.95963V10.1406H5.93814C5.555 10.7995 4.99104 11.1289 4.24625 11.1289C3.69839 11.1289 3.26871 10.9839 2.95718 10.6938C2.64924 10.4038 2.49527 10.0189 2.49527 9.53906C2.49527 8.51139 3.10041 7.91341 4.3107 7.74512L5.95963 7.51416C5.95963 6.57959 5.58186 6.1123 4.82632 6.1123C4.16389 6.1123 3.56591 6.33789 3.03238 6.78906V5.88672C3.57307 5.54297 4.19612 5.37109 4.90152 5.37109C6.19416 5.37109 6.84048 6.05501 6.84048 7.42285V11ZM5.95963 8.21777L4.63297 8.40039C4.22476 8.45768 3.91682 8.55973 3.70914 8.70654C3.50145 8.84977 3.39761 9.10579 3.39761 9.47461C3.39761 9.74316 3.4925 9.96338 3.68228 10.1353C3.87564 10.3035 4.13166 10.3877 4.45035 10.3877C4.8872 10.3877 5.24706 10.2355 5.52994 9.93115C5.8164 9.62321 5.95963 9.2347 5.95963 8.76562V8.21777Z" } }, { "tagName": "path", "attrs": { "d": "M9.3475 10.2051H9.32601V11H8.44515V2.85742H9.32601V6.4668H9.3475C9.78076 5.73633 10.4146 5.37109 11.2489 5.37109C11.9543 5.37109 12.5057 5.61816 12.9032 6.1123C13.3042 6.60286 13.5047 7.26172 13.5047 8.08887C13.5047 9.00911 13.2809 9.74674 12.8333 10.3018C12.3857 10.8532 11.7734 11.1289 10.9964 11.1289C10.2695 11.1289 9.71989 10.821 9.3475 10.2051ZM9.32601 7.98682V8.75488C9.32601 9.20964 9.47282 9.59635 9.76644 9.91504C10.0636 10.2301 10.4396 10.3877 10.8944 10.3877C11.4279 10.3877 11.8451 10.1836 12.1458 9.77539C12.4502 9.36719 12.6024 8.79964 12.6024 8.07275C12.6024 7.46045 12.4609 6.98063 12.1781 6.6333C11.8952 6.28597 11.512 6.1123 11.0286 6.1123C10.5166 6.1123 10.1048 6.29134 9.7933 6.64941C9.48177 7.00391 9.32601 7.44971 9.32601 7.98682Z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-eye" }, "children": [{ "tagName": "path", "attrs": { "d": "M7.99993 6.00316C9.47266 6.00316 10.6666 7.19708 10.6666 8.66981C10.6666 10.1426 9.47266 11.3365 7.99993 11.3365C6.52715 11.3365 5.33324 10.1426 5.33324 8.66981C5.33324 7.19708 6.52715 6.00316 7.99993 6.00316ZM7.99993 7.00315C7.07946 7.00315 6.33324 7.74935 6.33324 8.66981C6.33324 9.59028 7.07946 10.3365 7.99993 10.3365C8.9204 10.3365 9.6666 9.59028 9.6666 8.66981C9.6666 7.74935 8.9204 7.00315 7.99993 7.00315ZM7.99993 3.66675C11.0756 3.66675 13.7307 5.76675 14.4673 8.70968C14.5344 8.97755 14.3716 9.24908 14.1037 9.31615C13.8358 9.38315 13.5643 9.22041 13.4973 8.95248C12.8713 6.45205 10.6141 4.66675 7.99993 4.66675C5.38454 4.66675 3.12664 6.45359 2.50182 8.95555C2.43491 9.22341 2.16348 9.38635 1.89557 9.31948C1.62766 9.25255 1.46471 8.98115 1.53162 8.71321C2.26701 5.76856 4.9229 3.66675 7.99993 3.66675Z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-symbol-constant" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M4 6h8v1H4V6zm8 3H4v1h8V9z" } }, { "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M1 4l1-1h12l1 1v8l-1 1H2l-1-1V4zm1 0v8h12V4H2z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-check" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-close" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M8 8.707l3.646 3.647.708-.707L8.707 8l3.647-3.646-.707-.708L8 7.293 4.354 3.646l-.707.708L7.293 8l-3.646 3.646.707.708L8 8.707z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-pass" }, "children": [{ "tagName": "path", "attrs": { "d": "M6.27 10.87h.71l4.56-4.56-.71-.71-4.2 4.21-1.92-1.92L4 8.6l2.27 2.27z" } }, { "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-gist" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M10.57 1.14l3.28 3.3.15.36v9.7l-.5.5h-11l-.5-.5v-13l.5-.5h7.72l.35.14zM10 5h3l-3-3v3zM3 2v12h10V6H9.5L9 5.5V2H3zm2.062 7.533l1.817-1.828L6.17 7 4 9.179v.707l2.171 2.174.707-.707-1.816-1.82zM8.8 7.714l.7-.709 2.189 2.175v.709L9.5 12.062l-.705-.709 1.831-1.82L8.8 7.714z" } }] }] }] };\nvar clipPaths_default = svgJson;\n\n// packages/injected/src/recorder/recorder.ts\nvar HighlightColors = {\n  multiple: "#f6b26b7f",\n  single: "#6fa8dc7f",\n  assert: "#8acae480",\n  action: "#dc6f6f7f"\n};\nvar NoneTool = class {\n  cursor() {\n    return "default";\n  }\n};\nvar InspectTool = class {\n  constructor(recorder, assertVisibility) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._recorder = recorder;\n    this._assertVisibility = assertVisibility;\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n  }\n  onClick(event) {\n    var _a;\n    consumeEvent(event);\n    if (event.button !== 0)\n      return;\n    if ((_a = this._hoveredModel) == null ? void 0 : _a.selector)\n      this._commit(this._hoveredModel.selector, this._hoveredModel);\n  }\n  onPointerDown(event) {\n    consumeEvent(event);\n  }\n  onPointerUp(event) {\n    consumeEvent(event);\n  }\n  onMouseDown(event) {\n    consumeEvent(event);\n  }\n  onMouseUp(event) {\n    consumeEvent(event);\n  }\n  onMouseMove(event) {\n    var _a;\n    consumeEvent(event);\n    let target = this._recorder.deepEventTarget(event);\n    if (!target.isConnected)\n      target = null;\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    let model = null;\n    if (this._hoveredElement) {\n      const generated = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName, multiple: false });\n      model = {\n        selector: generated.selector,\n        elements: generated.elements,\n        tooltipText: this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, generated.selector),\n        color: this._assertVisibility ? HighlightColors.assert : HighlightColors.single\n      };\n    }\n    if (((_a = this._hoveredModel) == null ? void 0 : _a.selector) === (model == null ? void 0 : model.selector))\n      return;\n    this._hoveredModel = model;\n    this._recorder.updateHighlight(model, true);\n  }\n  onMouseEnter(event) {\n    consumeEvent(event);\n  }\n  onMouseLeave(event) {\n    consumeEvent(event);\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE)\n      this._reset(true);\n  }\n  onKeyDown(event) {\n    consumeEvent(event);\n    if (event.key === "Escape") {\n      if (this._assertVisibility)\n        this._recorder.setMode("recording");\n    }\n  }\n  onKeyUp(event) {\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._reset(false);\n  }\n  _commit(selector, model) {\n    var _a;\n    if (this._assertVisibility) {\n      this._recorder.recordAction({\n        name: "assertVisible",\n        selector,\n        signals: []\n      });\n      this._recorder.setMode("recording");\n      (_a = this._recorder.overlay) == null ? void 0 : _a.flashToolSucceeded("assertingVisibility");\n    } else {\n      this._recorder.elementPicked(selector, model);\n    }\n  }\n  _reset(userGesture) {\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._recorder.updateHighlight(null, userGesture);\n  }\n};\nvar RecordActionTool = class {\n  constructor(recorder) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n    this._recorder = recorder;\n    this._performingActions = new recorder.injectedScript.utils.builtins.Set();\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._activeModel = null;\n    this._expectProgrammaticKeyUp = false;\n  }\n  onClick(event) {\n    if (isRangeInput(this._hoveredElement))\n      return;\n    if (event.button === 2 && event.type === "auxclick")\n      return;\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n    if (checkbox) {\n      this._performAction({\n        name: checkbox.checked ? "check" : "uncheck",\n        selector: this._hoveredModel.selector,\n        signals: []\n      });\n      return;\n    }\n    this._cancelPendingClickAction();\n    if (event.detail === 1) {\n      this._pendingClickAction = {\n        action: {\n          name: "click",\n          selector: this._hoveredModel.selector,\n          position: positionForEvent(event),\n          signals: [],\n          button: buttonForEvent(event),\n          modifiers: modifiersForEvent(event),\n          clickCount: event.detail\n        },\n        timeout: this._recorder.injectedScript.utils.builtins.setTimeout(() => this._commitPendingClickAction(), 200)\n      };\n    }\n  }\n  onDblClick(event) {\n    if (isRangeInput(this._hoveredElement))\n      return;\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    this._cancelPendingClickAction();\n    this._performAction({\n      name: "click",\n      selector: this._hoveredModel.selector,\n      position: positionForEvent(event),\n      signals: [],\n      button: buttonForEvent(event),\n      modifiers: modifiersForEvent(event),\n      clickCount: event.detail\n    });\n  }\n  _commitPendingClickAction() {\n    if (this._pendingClickAction)\n      this._performAction(this._pendingClickAction.action);\n    this._cancelPendingClickAction();\n  }\n  _cancelPendingClickAction() {\n    if (this._pendingClickAction)\n      this._recorder.injectedScript.utils.builtins.clearTimeout(this._pendingClickAction.timeout);\n    this._pendingClickAction = void 0;\n  }\n  onContextMenu(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (this._actionInProgress(event))\n      return;\n    if (this._consumedDueToNoModel(event, this._hoveredModel))\n      return;\n    this._performAction({\n      name: "click",\n      selector: this._hoveredModel.selector,\n      position: positionForEvent(event),\n      signals: [],\n      button: "right",\n      modifiers: 0,\n      clickCount: 0\n    });\n  }\n  onPointerDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onPointerUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onMouseDown(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n    this._activeModel = this._hoveredModel;\n  }\n  onMouseUp(event) {\n    if (this._shouldIgnoreMouseEvent(event))\n      return;\n    if (!this._performingActions.size)\n      consumeEvent(event);\n  }\n  onMouseMove(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._hoveredElement === target)\n      return;\n    this._hoveredElement = target;\n    this._updateModelForHoveredElement();\n  }\n  onMouseLeave(event) {\n    const window = this._recorder.injectedScript.window;\n    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE) {\n      this._hoveredElement = null;\n      this._updateModelForHoveredElement();\n    }\n  }\n  onFocus(event) {\n    this._onFocus(true);\n  }\n  onInput(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (target.nodeName === "INPUT" && target.type.toLowerCase() === "file") {\n      this._recorder.recordAction({\n        name: "setInputFiles",\n        selector: this._activeModel.selector,\n        signals: [],\n        files: [...target.files || []].map((file) => file.name)\n      });\n      return;\n    }\n    if (isRangeInput(target)) {\n      this._recorder.recordAction({\n        name: "fill",\n        // must use hoveredModel instead of activeModel for it to work in webkit\n        selector: this._hoveredModel.selector,\n        signals: [],\n        text: target.value\n      });\n      return;\n    }\n    if (["INPUT", "TEXTAREA"].includes(target.nodeName) || target.isContentEditable) {\n      if (target.nodeName === "INPUT" && ["checkbox", "radio"].includes(target.type.toLowerCase())) {\n        return;\n      }\n      if (this._consumedDueWrongTarget(event))\n        return;\n      this._recorder.recordAction({\n        name: "fill",\n        selector: this._activeModel.selector,\n        signals: [],\n        text: target.isContentEditable ? target.innerText : target.value\n      });\n    }\n    if (target.nodeName === "SELECT") {\n      const selectElement = target;\n      if (this._actionInProgress(event))\n        return;\n      this._performAction({\n        name: "select",\n        selector: this._activeModel.selector,\n        options: [...selectElement.selectedOptions].map((option) => option.value),\n        signals: []\n      });\n    }\n  }\n  onKeyDown(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (this._actionInProgress(event)) {\n      this._expectProgrammaticKeyUp = true;\n      return;\n    }\n    if (this._consumedDueWrongTarget(event))\n      return;\n    if (event.key === " ") {\n      const checkbox = asCheckbox(this._recorder.deepEventTarget(event));\n      if (checkbox) {\n        this._performAction({\n          name: checkbox.checked ? "uncheck" : "check",\n          selector: this._activeModel.selector,\n          signals: []\n        });\n        return;\n      }\n    }\n    this._performAction({\n      name: "press",\n      selector: this._activeModel.selector,\n      signals: [],\n      key: event.key,\n      modifiers: modifiersForEvent(event)\n    });\n  }\n  onKeyUp(event) {\n    if (!this._shouldGenerateKeyPressFor(event))\n      return;\n    if (!this._expectProgrammaticKeyUp) {\n      consumeEvent(event);\n      return;\n    }\n    this._expectProgrammaticKeyUp = false;\n  }\n  onScroll(event) {\n    this._hoveredModel = null;\n    this._hoveredElement = null;\n    this._recorder.updateHighlight(null, false);\n  }\n  _onFocus(userGesture) {\n    const activeElement = deepActiveElement(this._recorder.document);\n    if (userGesture && activeElement === this._recorder.document.body)\n      return;\n    const result = activeElement ? this._recorder.injectedScript.generateSelector(activeElement, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;\n    this._activeModel = result && result.selector ? { ...result, color: HighlightColors.action } : null;\n    if (userGesture) {\n      this._hoveredElement = activeElement;\n      this._updateModelForHoveredElement();\n    }\n  }\n  _shouldIgnoreMouseEvent(event) {\n    const target = this._recorder.deepEventTarget(event);\n    const nodeName = target.nodeName;\n    if (nodeName === "SELECT" || nodeName === "OPTION")\n      return true;\n    if (nodeName === "INPUT" && ["date", "range"].includes(target.type))\n      return true;\n    return false;\n  }\n  _actionInProgress(event) {\n    const isKeyEvent = event instanceof KeyboardEvent;\n    const isMouseOrPointerEvent = event instanceof MouseEvent || event instanceof PointerEvent;\n    for (const action of this._performingActions) {\n      if (isKeyEvent && action.name === "press" && event.key === action.key)\n        return true;\n      if (isMouseOrPointerEvent && (action.name === "click" || action.name === "check" || action.name === "uncheck"))\n        return true;\n    }\n    consumeEvent(event);\n    return false;\n  }\n  _consumedDueToNoModel(event, model) {\n    if (model)\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  _consumedDueWrongTarget(event) {\n    if (this._activeModel && this._activeModel.elements[0] === this._recorder.deepEventTarget(event))\n      return false;\n    consumeEvent(event);\n    return true;\n  }\n  _performAction(action) {\n    this._hoveredElement = null;\n    this._hoveredModel = null;\n    this._activeModel = null;\n    this._recorder.updateHighlight(null, false);\n    this._performingActions.add(action);\n    void this._recorder.performAction(action).then(() => {\n      this._performingActions.delete(action);\n      this._onFocus(false);\n      if (this._recorder.injectedScript.isUnderTest) {\n        console.error("Action performed for test: " + JSON.stringify({\n          // eslint-disable-line no-console\n          hovered: this._hoveredModel ? this._hoveredModel.selector : null,\n          active: this._activeModel ? this._activeModel.selector : null\n        }));\n      }\n    });\n  }\n  _shouldGenerateKeyPressFor(event) {\n    if (event.key === "Enter" && (this._recorder.deepEventTarget(event).nodeName === "TEXTAREA" || this._recorder.deepEventTarget(event).isContentEditable))\n      return false;\n    if (["Backspace", "Delete", "AltGraph"].includes(event.key))\n      return false;\n    if (event.key === "@" && event.code === "KeyL")\n      return false;\n    if (navigator.platform.includes("Mac")) {\n      if (event.key === "v" && event.metaKey)\n        return false;\n    } else {\n      if (event.key === "v" && event.ctrlKey)\n        return false;\n      if (event.key === "Insert" && event.shiftKey)\n        return false;\n    }\n    if (["Shift", "Control", "Meta", "Alt", "Process"].includes(event.key))\n      return false;\n    const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n    if (event.key.length === 1 && !hasModifier)\n      return !!asCheckbox(this._recorder.deepEventTarget(event));\n    return true;\n  }\n  _updateModelForHoveredElement() {\n    if (this._performingActions.size)\n      return;\n    if (!this._hoveredElement || !this._hoveredElement.isConnected) {\n      this._hoveredModel = null;\n      this._hoveredElement = null;\n      this._recorder.updateHighlight(null, true);\n      return;\n    }\n    const { selector, elements } = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n    if (this._hoveredModel && this._hoveredModel.selector === selector)\n      return;\n    this._hoveredModel = selector ? { selector, elements, color: HighlightColors.action } : null;\n    this._recorder.updateHighlight(this._hoveredModel, true);\n  }\n};\nvar TextAssertionTool = class {\n  constructor(recorder, kind) {\n    this._hoverHighlight = null;\n    this._action = null;\n    this._recorder = recorder;\n    this._textCache = new recorder.injectedScript.utils.builtins.Map();\n    this._kind = kind;\n    this._dialog = new Dialog(recorder);\n  }\n  cursor() {\n    return "pointer";\n  }\n  cleanup() {\n    this._dialog.close();\n    this._hoverHighlight = null;\n  }\n  onClick(event) {\n    consumeEvent(event);\n    if (this._kind === "value") {\n      this._commitAssertValue();\n    } else {\n      if (!this._dialog.isShowing())\n        this._showDialog();\n    }\n  }\n  onMouseDown(event) {\n    const target = this._recorder.deepEventTarget(event);\n    if (this._elementHasValue(target))\n      event.preventDefault();\n  }\n  onPointerUp(event) {\n    var _a;\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (this._kind === "value" && target && (target.nodeName === "INPUT" || target.nodeName === "SELECT") && target.disabled) {\n      this._commitAssertValue();\n    }\n  }\n  onMouseMove(event) {\n    var _a;\n    if (this._dialog.isShowing())\n      return;\n    const target = this._recorder.deepEventTarget(event);\n    if (((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]) === target)\n      return;\n    if (this._kind === "text" || this._kind === "snapshot") {\n      this._hoverHighlight = this._recorder.injectedScript.utils.elementText(this._textCache, target).full ? { elements: [target], selector: "", color: HighlightColors.assert } : null;\n    } else if (this._elementHasValue(target)) {\n      const generated = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n      this._hoverHighlight = { selector: generated.selector, elements: generated.elements, color: HighlightColors.assert };\n    } else {\n      this._hoverHighlight = null;\n    }\n    this._recorder.updateHighlight(this._hoverHighlight, true);\n  }\n  onKeyDown(event) {\n    if (event.key === "Escape")\n      this._recorder.setMode("recording");\n    consumeEvent(event);\n  }\n  onScroll(event) {\n    this._recorder.updateHighlight(this._hoverHighlight, false);\n  }\n  _elementHasValue(element) {\n    return element.nodeName === "TEXTAREA" || element.nodeName === "SELECT" || element.nodeName === "INPUT" && !["button", "image", "reset", "submit"].includes(element.type);\n  }\n  _generateAction() {\n    var _a;\n    this._textCache.clear();\n    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n    if (!target)\n      return null;\n    if (this._kind === "value") {\n      if (!this._elementHasValue(target))\n        return null;\n      const { selector } = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName });\n      if (target.nodeName === "INPUT" && ["checkbox", "radio"].includes(target.type.toLowerCase())) {\n        return {\n          name: "assertChecked",\n          selector,\n          signals: [],\n          // Interestingly, inputElement.checked is reversed inside this event handler.\n          checked: !target.checked\n        };\n      } else {\n        return {\n          name: "assertValue",\n          selector,\n          signals: [],\n          value: target.value\n        };\n      }\n    } else if (this._kind === "snapshot") {\n      const generated = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });\n      this._hoverHighlight = { selector: generated.selector, elements: generated.elements, color: HighlightColors.assert };\n      this._recorder.updateHighlight(this._hoverHighlight, true);\n      return {\n        name: "assertSnapshot",\n        selector: this._hoverHighlight.selector,\n        signals: [],\n        snapshot: this._recorder.injectedScript.ariaSnapshot(target, { mode: "regex" })\n      };\n    } else {\n      const generated = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });\n      this._hoverHighlight = { selector: generated.selector, elements: generated.elements, color: HighlightColors.assert };\n      this._recorder.updateHighlight(this._hoverHighlight, true);\n      return {\n        name: "assertText",\n        selector: this._hoverHighlight.selector,\n        signals: [],\n        text: this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized,\n        substring: true\n      };\n    }\n  }\n  _renderValue(action) {\n    if ((action == null ? void 0 : action.name) === "assertText")\n      return this._recorder.injectedScript.utils.normalizeWhiteSpace(action.text);\n    if ((action == null ? void 0 : action.name) === "assertChecked")\n      return String(action.checked);\n    if ((action == null ? void 0 : action.name) === "assertValue")\n      return action.value;\n    if ((action == null ? void 0 : action.name) === "assertSnapshot")\n      return action.snapshot;\n    return "";\n  }\n  _commit() {\n    if (!this._action || !this._dialog.isShowing())\n      return;\n    this._dialog.close();\n    this._recorder.recordAction(this._action);\n    this._recorder.setMode("recording");\n  }\n  _showDialog() {\n    var _a, _b, _c, _d;\n    if (!((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]))\n      return;\n    this._action = this._generateAction();\n    if (((_b = this._action) == null ? void 0 : _b.name) === "assertText") {\n      this._showTextDialog(this._action);\n    } else if (((_c = this._action) == null ? void 0 : _c.name) === "assertSnapshot") {\n      this._recorder.recordAction(this._action);\n      this._recorder.setMode("recording");\n      (_d = this._recorder.overlay) == null ? void 0 : _d.flashToolSucceeded("assertingSnapshot");\n    }\n  }\n  _showTextDialog(action) {\n    const textElement = this._recorder.document.createElement("textarea");\n    textElement.setAttribute("spellcheck", "false");\n    textElement.value = this._renderValue(action);\n    textElement.classList.add("text-editor");\n    const updateAndValidate = () => {\n      var _a;\n      const newValue = this._recorder.injectedScript.utils.normalizeWhiteSpace(textElement.value);\n      const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];\n      if (!target)\n        return;\n      action.text = newValue;\n      const targetText = this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized;\n      const matches = newValue && targetText.includes(newValue);\n      textElement.classList.toggle("does-not-match", !matches);\n    };\n    textElement.addEventListener("input", updateAndValidate);\n    const label = "Assert that element contains text";\n    const dialogElement = this._dialog.show({\n      label,\n      body: textElement,\n      onCommit: () => this._commit()\n    });\n    const position = this._recorder.highlight.tooltipPosition(this._recorder.highlight.firstBox(), dialogElement);\n    this._dialog.moveTo(position.anchorTop, position.anchorLeft);\n    textElement.focus();\n  }\n  _commitAssertValue() {\n    var _a;\n    if (this._kind !== "value")\n      return;\n    const action = this._generateAction();\n    if (!action)\n      return;\n    this._recorder.recordAction(action);\n    this._recorder.setMode("recording");\n    (_a = this._recorder.overlay) == null ? void 0 : _a.flashToolSucceeded("assertingValue");\n  }\n};\nvar Overlay = class {\n  constructor(recorder) {\n    this._listeners = [];\n    this._offsetX = 0;\n    this._measure = { width: 0, height: 0 };\n    this._recorder = recorder;\n    const document = this._recorder.document;\n    this._overlayElement = document.createElement("x-pw-overlay");\n    const toolsListElement = document.createElement("x-pw-tools-list");\n    this._overlayElement.appendChild(toolsListElement);\n    this._dragHandle = document.createElement("x-pw-tool-gripper");\n    this._dragHandle.appendChild(document.createElement("x-div"));\n    toolsListElement.appendChild(this._dragHandle);\n    this._recordToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._recordToggle.title = "Record";\n    this._recordToggle.classList.add("record");\n    this._recordToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._recordToggle);\n    this._pickLocatorToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._pickLocatorToggle.title = "Pick locator";\n    this._pickLocatorToggle.classList.add("pick-locator");\n    this._pickLocatorToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._pickLocatorToggle);\n    this._assertVisibilityToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertVisibilityToggle.title = "Assert visibility";\n    this._assertVisibilityToggle.classList.add("visibility");\n    this._assertVisibilityToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertVisibilityToggle);\n    this._assertTextToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertTextToggle.title = "Assert text";\n    this._assertTextToggle.classList.add("text");\n    this._assertTextToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertTextToggle);\n    this._assertValuesToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertValuesToggle.title = "Assert value";\n    this._assertValuesToggle.classList.add("value");\n    this._assertValuesToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertValuesToggle);\n    this._assertSnapshotToggle = this._recorder.document.createElement("x-pw-tool-item");\n    this._assertSnapshotToggle.title = "Assert snapshot";\n    this._assertSnapshotToggle.classList.add("snapshot");\n    this._assertSnapshotToggle.appendChild(this._recorder.document.createElement("x-div"));\n    toolsListElement.appendChild(this._assertSnapshotToggle);\n    this._updateVisualPosition();\n    this._refreshListeners();\n  }\n  _refreshListeners() {\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this._dragHandle, "mousedown", (event) => {\n        this._dragState = { offsetX: this._offsetX, dragStart: { x: event.clientX, y: 0 } };\n      }),\n      addEventListener(this._recordToggle, "click", () => {\n        if (this._recordToggle.classList.contains("disabled"))\n          return;\n        this._recorder.setMode(this._recorder.state.mode === "none" || this._recorder.state.mode === "standby" || this._recorder.state.mode === "inspecting" ? "recording" : "standby");\n      }),\n      addEventListener(this._pickLocatorToggle, "click", () => {\n        if (this._pickLocatorToggle.classList.contains("disabled"))\n          return;\n        const newMode = {\n          "inspecting": "standby",\n          "none": "inspecting",\n          "standby": "inspecting",\n          "recording": "recording-inspecting",\n          "recording-inspecting": "recording",\n          "assertingText": "recording-inspecting",\n          "assertingVisibility": "recording-inspecting",\n          "assertingValue": "recording-inspecting",\n          "assertingSnapshot": "recording-inspecting"\n        };\n        this._recorder.setMode(newMode[this._recorder.state.mode]);\n      }),\n      addEventListener(this._assertVisibilityToggle, "click", () => {\n        if (!this._assertVisibilityToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingVisibility" ? "recording" : "assertingVisibility");\n      }),\n      addEventListener(this._assertTextToggle, "click", () => {\n        if (!this._assertTextToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingText" ? "recording" : "assertingText");\n      }),\n      addEventListener(this._assertValuesToggle, "click", () => {\n        if (!this._assertValuesToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingValue" ? "recording" : "assertingValue");\n      }),\n      addEventListener(this._assertSnapshotToggle, "click", () => {\n        if (!this._assertSnapshotToggle.classList.contains("disabled"))\n          this._recorder.setMode(this._recorder.state.mode === "assertingSnapshot" ? "recording" : "assertingSnapshot");\n      })\n    ];\n  }\n  install() {\n    this._recorder.highlight.appendChild(this._overlayElement);\n    this._refreshListeners();\n    this._updateVisualPosition();\n  }\n  contains(element) {\n    return this._recorder.injectedScript.utils.isInsideScope(this._overlayElement, element);\n  }\n  setUIState(state) {\n    this._recordToggle.classList.toggle("toggled", state.mode === "recording" || state.mode === "assertingText" || state.mode === "assertingVisibility" || state.mode === "assertingValue" || state.mode === "assertingSnapshot" || state.mode === "recording-inspecting");\n    this._pickLocatorToggle.classList.toggle("toggled", state.mode === "inspecting" || state.mode === "recording-inspecting");\n    this._assertVisibilityToggle.classList.toggle("toggled", state.mode === "assertingVisibility");\n    this._assertVisibilityToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    this._assertTextToggle.classList.toggle("toggled", state.mode === "assertingText");\n    this._assertTextToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    this._assertValuesToggle.classList.toggle("toggled", state.mode === "assertingValue");\n    this._assertValuesToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    this._assertSnapshotToggle.classList.toggle("toggled", state.mode === "assertingSnapshot");\n    this._assertSnapshotToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");\n    if (this._offsetX !== state.overlay.offsetX) {\n      this._offsetX = state.overlay.offsetX;\n      this._updateVisualPosition();\n    }\n    if (state.mode === "none")\n      this._hideOverlay();\n    else\n      this._showOverlay();\n  }\n  flashToolSucceeded(tool) {\n    let element;\n    if (tool === "assertingVisibility")\n      element = this._assertVisibilityToggle;\n    else if (tool === "assertingSnapshot")\n      element = this._assertSnapshotToggle;\n    else\n      element = this._assertValuesToggle;\n    element.classList.add("succeeded");\n    this._recorder.injectedScript.utils.builtins.setTimeout(() => element.classList.remove("succeeded"), 2e3);\n  }\n  _hideOverlay() {\n    this._overlayElement.setAttribute("hidden", "true");\n  }\n  _showOverlay() {\n    if (!this._overlayElement.hasAttribute("hidden"))\n      return;\n    this._overlayElement.removeAttribute("hidden");\n    this._updateVisualPosition();\n  }\n  _updateVisualPosition() {\n    this._measure = this._overlayElement.getBoundingClientRect();\n    this._overlayElement.style.left = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 + this._offsetX + "px";\n  }\n  onMouseMove(event) {\n    if (!event.buttons) {\n      this._dragState = void 0;\n      return false;\n    }\n    if (this._dragState) {\n      this._offsetX = this._dragState.offsetX + event.clientX - this._dragState.dragStart.x;\n      const halfGapSize = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 - 10;\n      this._offsetX = Math.max(-halfGapSize, Math.min(halfGapSize, this._offsetX));\n      this._updateVisualPosition();\n      this._recorder.setOverlayState({ offsetX: this._offsetX });\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onMouseUp(event) {\n    if (this._dragState) {\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onClick(event) {\n    if (this._dragState) {\n      this._dragState = void 0;\n      consumeEvent(event);\n      return true;\n    }\n    return false;\n  }\n  onDblClick(event) {\n    return false;\n  }\n};\nvar Recorder = class {\n  constructor(injectedScript) {\n    this._listeners = [];\n    this._lastHighlightedSelector = void 0;\n    this._lastHighlightedAriaTemplateJSON = "undefined";\n    this.state = {\n      mode: "none",\n      testIdAttributeName: "data-testid",\n      language: "javascript",\n      overlay: { offsetX: 0 }\n    };\n    this._delegate = {};\n    this.document = injectedScript.document;\n    this.injectedScript = injectedScript;\n    this.highlight = injectedScript.createHighlight();\n    this._tools = {\n      "none": new NoneTool(),\n      "standby": new NoneTool(),\n      "inspecting": new InspectTool(this, false),\n      "recording": new RecordActionTool(this),\n      "recording-inspecting": new InspectTool(this, false),\n      "assertingText": new TextAssertionTool(this, "text"),\n      "assertingVisibility": new InspectTool(this, true),\n      "assertingValue": new TextAssertionTool(this, "value"),\n      "assertingSnapshot": new TextAssertionTool(this, "snapshot")\n    };\n    this._currentTool = this._tools.none;\n    if (injectedScript.window.top === injectedScript.window) {\n      this.overlay = new Overlay(this);\n      this.overlay.setUIState(this.state);\n    }\n    this._stylesheet = new injectedScript.window.CSSStyleSheet();\n    this._stylesheet.replaceSync(`\n      body[data-pw-cursor=pointer] *, body[data-pw-cursor=pointer] *::after { cursor: pointer !important; }\n      body[data-pw-cursor=text] *, body[data-pw-cursor=text] *::after { cursor: text !important; }\n    `);\n    this.installListeners();\n    injectedScript.utils.cacheNormalizedWhitespaces();\n    if (injectedScript.isUnderTest)\n      console.error("Recorder script ready for test");\n  }\n  installListeners() {\n    var _a;\n    removeEventListeners(this._listeners);\n    this._listeners = [\n      addEventListener(this.document, "click", (event) => this._onClick(event), true),\n      addEventListener(this.document, "auxclick", (event) => this._onClick(event), true),\n      addEventListener(this.document, "dblclick", (event) => this._onDblClick(event), true),\n      addEventListener(this.document, "contextmenu", (event) => this._onContextMenu(event), true),\n      addEventListener(this.document, "dragstart", (event) => this._onDragStart(event), true),\n      addEventListener(this.document, "input", (event) => this._onInput(event), true),\n      addEventListener(this.document, "keydown", (event) => this._onKeyDown(event), true),\n      addEventListener(this.document, "keyup", (event) => this._onKeyUp(event), true),\n      addEventListener(this.document, "pointerdown", (event) => this._onPointerDown(event), true),\n      addEventListener(this.document, "pointerup", (event) => this._onPointerUp(event), true),\n      addEventListener(this.document, "mousedown", (event) => this._onMouseDown(event), true),\n      addEventListener(this.document, "mouseup", (event) => this._onMouseUp(event), true),\n      addEventListener(this.document, "mousemove", (event) => this._onMouseMove(event), true),\n      addEventListener(this.document, "mouseleave", (event) => this._onMouseLeave(event), true),\n      addEventListener(this.document, "mouseenter", (event) => this._onMouseEnter(event), true),\n      addEventListener(this.document, "focus", (event) => this._onFocus(event), true),\n      addEventListener(this.document, "scroll", (event) => this._onScroll(event), true)\n    ];\n    this.highlight.install();\n    let recreationInterval;\n    const recreate = () => {\n      this.highlight.install();\n      recreationInterval = this.injectedScript.utils.builtins.setTimeout(recreate, 500);\n    };\n    recreationInterval = this.injectedScript.utils.builtins.setTimeout(recreate, 500);\n    this._listeners.push(() => this.injectedScript.utils.builtins.clearTimeout(recreationInterval));\n    this.highlight.appendChild(createSvgElement(this.document, clipPaths_default));\n    (_a = this.overlay) == null ? void 0 : _a.install();\n    this.document.adoptedStyleSheets.push(this._stylesheet);\n  }\n  _switchCurrentTool() {\n    var _a, _b, _c;\n    const newTool = this._tools[this.state.mode];\n    if (newTool === this._currentTool)\n      return;\n    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);\n    this.clearHighlight();\n    this._currentTool = newTool;\n    (_c = this.injectedScript.document.body) == null ? void 0 : _c.setAttribute("data-pw-cursor", newTool.cursor());\n  }\n  setUIState(state, delegate) {\n    var _a;\n    this._delegate = delegate;\n    if (state.actionPoint && this.state.actionPoint && state.actionPoint.x === this.state.actionPoint.x && state.actionPoint.y === this.state.actionPoint.y) {\n    } else if (!state.actionPoint && !this.state.actionPoint) {\n    } else {\n      if (state.actionPoint)\n        this.highlight.showActionPoint(state.actionPoint.x, state.actionPoint.y);\n      else\n        this.highlight.hideActionPoint();\n    }\n    this.state = state;\n    this.highlight.setLanguage(state.language);\n    this._switchCurrentTool();\n    (_a = this.overlay) == null ? void 0 : _a.setUIState(state);\n    let highlight = "noop";\n    if (state.actionSelector !== this._lastHighlightedSelector) {\n      const entries = state.actionSelector ? entriesForSelectorHighlight(this.injectedScript, state.language, state.actionSelector, this.document) : null;\n      highlight = (entries == null ? void 0 : entries.length) ? entries : "clear";\n      this._lastHighlightedSelector = (entries == null ? void 0 : entries.length) ? state.actionSelector : void 0;\n    }\n    const ariaTemplateJSON = JSON.stringify(state.ariaTemplate);\n    if (this._lastHighlightedAriaTemplateJSON !== ariaTemplateJSON) {\n      const elements = state.ariaTemplate ? this.injectedScript.getAllByAria(this.document, state.ariaTemplate) : [];\n      if (elements.length) {\n        const color = elements.length > 1 ? HighlightColors.multiple : HighlightColors.single;\n        highlight = elements.map((element) => ({ element, color }));\n        this._lastHighlightedAriaTemplateJSON = ariaTemplateJSON;\n      } else {\n        if (!this._lastHighlightedSelector)\n          highlight = "clear";\n        this._lastHighlightedAriaTemplateJSON = "undefined";\n      }\n    }\n    if (highlight === "clear")\n      this.highlight.clearHighlight();\n    else if (highlight !== "noop")\n      this.highlight.updateHighlight(highlight);\n  }\n  clearHighlight() {\n    this.updateHighlight(null, false);\n  }\n  _onClick(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onClick(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onClick) == null ? void 0 : _c.call(_b, event);\n  }\n  _onDblClick(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onDblClick(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onDblClick) == null ? void 0 : _c.call(_b, event);\n  }\n  _onContextMenu(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onContextMenu) == null ? void 0 : _b.call(_a, event);\n  }\n  _onDragStart(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onDragStart) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onPointerUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onPointerUp) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseUp(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseUp(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseUp) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseMove(event) {\n    var _a, _b, _c;\n    if (!event.isTrusted)\n      return;\n    if ((_a = this.overlay) == null ? void 0 : _a.onMouseMove(event))\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_c = (_b = this._currentTool).onMouseMove) == null ? void 0 : _c.call(_b, event);\n  }\n  _onMouseEnter(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseEnter) == null ? void 0 : _b.call(_a, event);\n  }\n  _onMouseLeave(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onMouseLeave) == null ? void 0 : _b.call(_a, event);\n  }\n  _onFocus(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onFocus) == null ? void 0 : _b.call(_a, event);\n  }\n  _onScroll(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    this._lastHighlightedSelector = void 0;\n    this._lastHighlightedAriaTemplateJSON = "undefined";\n    this.highlight.hideActionPoint();\n    (_b = (_a = this._currentTool).onScroll) == null ? void 0 : _b.call(_a, event);\n  }\n  _onInput(event) {\n    var _a, _b;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onInput) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyDown(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyDown) == null ? void 0 : _b.call(_a, event);\n  }\n  _onKeyUp(event) {\n    var _a, _b;\n    if (!event.isTrusted)\n      return;\n    if (this._ignoreOverlayEvent(event))\n      return;\n    (_b = (_a = this._currentTool).onKeyUp) == null ? void 0 : _b.call(_a, event);\n  }\n  updateHighlight(model, userGesture) {\n    this._lastHighlightedSelector = void 0;\n    this._lastHighlightedAriaTemplateJSON = "undefined";\n    this._updateHighlight(model, userGesture);\n  }\n  _updateHighlight(model, userGesture) {\n    var _a, _b;\n    let tooltipText = model == null ? void 0 : model.tooltipText;\n    if (tooltipText === void 0 && (model == null ? void 0 : model.selector))\n      tooltipText = this.injectedScript.utils.asLocator(this.state.language, model.selector);\n    if (model)\n      this.highlight.updateHighlight(model.elements.map((element) => ({ element, color: model.color, tooltipText })));\n    else\n      this.highlight.clearHighlight();\n    if (userGesture)\n      (_b = (_a = this._delegate).highlightUpdated) == null ? void 0 : _b.call(_a);\n  }\n  _ignoreOverlayEvent(event) {\n    return event.composedPath().some((e) => {\n      const nodeName = e.nodeName || "";\n      return nodeName.toLowerCase() === "x-pw-glass";\n    });\n  }\n  deepEventTarget(event) {\n    var _a;\n    for (const element of event.composedPath()) {\n      if (!((_a = this.overlay) == null ? void 0 : _a.contains(element)))\n        return element;\n    }\n    return event.composedPath()[0];\n  }\n  setMode(mode) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).setMode) == null ? void 0 : _b.call(_a, mode));\n  }\n  async performAction(action) {\n    var _a, _b;\n    await ((_b = (_a = this._delegate).performAction) == null ? void 0 : _b.call(_a, action).catch(() => {\n    }));\n  }\n  recordAction(action) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).recordAction) == null ? void 0 : _b.call(_a, action));\n  }\n  setOverlayState(state) {\n    var _a, _b;\n    void ((_b = (_a = this._delegate).setOverlayState) == null ? void 0 : _b.call(_a, state));\n  }\n  elementPicked(selector, model) {\n    var _a, _b;\n    const ariaSnapshot = this.injectedScript.ariaSnapshot(model.elements[0]);\n    void ((_b = (_a = this._delegate).elementPicked) == null ? void 0 : _b.call(_a, { selector, ariaSnapshot }));\n  }\n};\nvar Dialog = class {\n  constructor(recorder) {\n    this._dialogElement = null;\n    this._recorder = recorder;\n  }\n  isShowing() {\n    return !!this._dialogElement;\n  }\n  show(options) {\n    const acceptButton = this._recorder.document.createElement("x-pw-tool-item");\n    acceptButton.title = "Accept";\n    acceptButton.classList.add("accept");\n    acceptButton.appendChild(this._recorder.document.createElement("x-div"));\n    acceptButton.addEventListener("click", () => options.onCommit());\n    const cancelButton = this._recorder.document.createElement("x-pw-tool-item");\n    cancelButton.title = "Close";\n    cancelButton.classList.add("cancel");\n    cancelButton.appendChild(this._recorder.document.createElement("x-div"));\n    cancelButton.addEventListener("click", () => {\n      var _a;\n      this.close();\n      (_a = options.onCancel) == null ? void 0 : _a.call(options);\n    });\n    this._dialogElement = this._recorder.document.createElement("x-pw-dialog");\n    this._keyboardListener = (event) => {\n      var _a;\n      if (event.key === "Escape") {\n        this.close();\n        (_a = options.onCancel) == null ? void 0 : _a.call(options);\n        return;\n      }\n      if (event.key === "Enter" && (event.ctrlKey || event.metaKey)) {\n        if (this._dialogElement)\n          options.onCommit();\n        return;\n      }\n    };\n    this._recorder.document.addEventListener("keydown", this._keyboardListener, true);\n    const toolbarElement = this._recorder.document.createElement("x-pw-tools-list");\n    const labelElement = this._recorder.document.createElement("label");\n    labelElement.textContent = options.label;\n    toolbarElement.appendChild(labelElement);\n    toolbarElement.appendChild(this._recorder.document.createElement("x-spacer"));\n    toolbarElement.appendChild(acceptButton);\n    toolbarElement.appendChild(cancelButton);\n    this._dialogElement.appendChild(toolbarElement);\n    const bodyElement = this._recorder.document.createElement("x-pw-dialog-body");\n    bodyElement.appendChild(options.body);\n    this._dialogElement.appendChild(bodyElement);\n    this._recorder.highlight.appendChild(this._dialogElement);\n    return this._dialogElement;\n  }\n  moveTo(top, left) {\n    if (!this._dialogElement)\n      return;\n    this._dialogElement.style.top = top + "px";\n    this._dialogElement.style.left = left + "px";\n  }\n  close() {\n    if (!this._dialogElement)\n      return;\n    this._dialogElement.remove();\n    this._recorder.document.removeEventListener("keydown", this._keyboardListener);\n    this._dialogElement = null;\n  }\n};\nfunction deepActiveElement(document) {\n  let activeElement = document.activeElement;\n  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement)\n    activeElement = activeElement.shadowRoot.activeElement;\n  return activeElement;\n}\nfunction modifiersForEvent(event) {\n  return (event.altKey ? 1 : 0) | (event.ctrlKey ? 2 : 0) | (event.metaKey ? 4 : 0) | (event.shiftKey ? 8 : 0);\n}\nfunction buttonForEvent(event) {\n  switch (event.which) {\n    case 1:\n      return "left";\n    case 2:\n      return "middle";\n    case 3:\n      return "right";\n  }\n  return "left";\n}\nfunction positionForEvent(event) {\n  const targetElement = event.target;\n  if (targetElement.nodeName !== "CANVAS")\n    return;\n  return {\n    x: event.offsetX,\n    y: event.offsetY\n  };\n}\nfunction consumeEvent(e) {\n  e.preventDefault();\n  e.stopPropagation();\n  e.stopImmediatePropagation();\n}\nfunction asCheckbox(node) {\n  if (!node || node.nodeName !== "INPUT")\n    return null;\n  const inputElement = node;\n  return ["checkbox", "radio"].includes(inputElement.type) ? inputElement : null;\n}\nfunction isRangeInput(node) {\n  if (!node || node.nodeName !== "INPUT")\n    return false;\n  const inputElement = node;\n  return inputElement.type.toLowerCase() === "range";\n}\nfunction addEventListener(target, eventName, listener, useCapture) {\n  target.addEventListener(eventName, listener, useCapture);\n  const remove = () => {\n    target.removeEventListener(eventName, listener, useCapture);\n  };\n  return remove;\n}\nfunction removeEventListeners(listeners) {\n  for (const listener of listeners)\n    listener();\n  listeners.splice(0, listeners.length);\n}\nfunction entriesForSelectorHighlight(injectedScript, language, selector, ownerDocument) {\n  try {\n    const parsedSelector = injectedScript.parseSelector(selector);\n    const elements = injectedScript.querySelectorAll(parsedSelector, ownerDocument);\n    const color = elements.length > 1 ? HighlightColors.multiple : HighlightColors.single;\n    const locator = injectedScript.utils.asLocator(language, selector);\n    return elements.map((element, index) => {\n      const suffix = elements.length > 1 ? ` [${index + 1} of ${elements.length}]` : "";\n      return { element, color, tooltipText: locator + suffix };\n    });\n  } catch (e) {\n    return [];\n  }\n}\nfunction createSvgElement(doc, { tagName, attrs, children }) {\n  const elem = doc.createElementNS("http://www.w3.org/2000/svg", tagName);\n  if (attrs) {\n    for (const [k, v] of Object.entries(attrs))\n      elem.setAttribute(k, v);\n  }\n  if (children) {\n    for (const c of children)\n      elem.appendChild(createSvgElement(doc, c));\n  }\n  return elem;\n}\n\n// packages/injected/src/recorder/pollingRecorder.ts\nvar PollingRecorder = class {\n  constructor(injectedScript) {\n    this._recorder = new Recorder(injectedScript);\n    this._embedder = injectedScript.window;\n    injectedScript.onGlobalListenersRemoved.add(() => this._recorder.installListeners());\n    const refreshOverlay = () => {\n      this._lastStateJSON = void 0;\n      this._pollRecorderMode().catch((e) => console.log(e));\n    };\n    this._embedder.__pw_refreshOverlay = refreshOverlay;\n    refreshOverlay();\n  }\n  async _pollRecorderMode() {\n    const pollPeriod = 1e3;\n    if (this._pollRecorderModeTimer)\n      this._recorder.injectedScript.utils.builtins.clearTimeout(this._pollRecorderModeTimer);\n    const state = await this._embedder.__pw_recorderState().catch(() => null);\n    if (!state) {\n      this._pollRecorderModeTimer = this._recorder.injectedScript.utils.builtins.setTimeout(() => this._pollRecorderMode(), pollPeriod);\n      return;\n    }\n    const stringifiedState = JSON.stringify(state);\n    if (this._lastStateJSON !== stringifiedState) {\n      this._lastStateJSON = stringifiedState;\n      const win = this._recorder.document.defaultView;\n      if (win.top !== win) {\n        state.actionPoint = void 0;\n      }\n      this._recorder.setUIState(state, this);\n    }\n    this._pollRecorderModeTimer = this._recorder.injectedScript.utils.builtins.setTimeout(() => this._pollRecorderMode(), pollPeriod);\n  }\n  async performAction(action) {\n    await this._embedder.__pw_recorderPerformAction(action);\n  }\n  async recordAction(action) {\n    await this._embedder.__pw_recorderRecordAction(action);\n  }\n  async elementPicked(elementInfo) {\n    await this._embedder.__pw_recorderElementPicked(elementInfo);\n  }\n  async setMode(mode) {\n    await this._embedder.__pw_recorderSetMode(mode);\n  }\n  async setOverlayState(state) {\n    await this._embedder.__pw_recorderSetOverlayState(state);\n  }\n};\nvar pollingRecorder_default = PollingRecorder;\n';
	return pollingRecorderSource;
}

var require$$0$1 = {
	"Blackberry PlayBook": {
	userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/18.4 Safari/536.2+",
	viewport: {
		width: 600,
		height: 1024
	},
	deviceScaleFactor: 1,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Blackberry PlayBook landscape": {
	userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/18.4 Safari/536.2+",
	viewport: {
		width: 1024,
		height: 600
	},
	deviceScaleFactor: 1,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"BlackBerry Z30": {
	userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/18.4 Mobile Safari/537.10+",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"BlackBerry Z30 landscape": {
	userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/18.4 Mobile Safari/537.10+",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Galaxy Note 3": {
	userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Galaxy Note 3 landscape": {
	userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Galaxy Note II": {
	userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Galaxy Note II landscape": {
	userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Galaxy S III": {
	userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Galaxy S III landscape": {
	userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.4 Mobile Safari/534.30",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Galaxy S5": {
	userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Galaxy S5 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Galaxy S8": {
	userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 360,
		height: 740
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Galaxy S8 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 740,
		height: 360
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Galaxy S9+": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 320,
		height: 658
	},
	deviceScaleFactor: 4.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Galaxy S9+ landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 658,
		height: 320
	},
	deviceScaleFactor: 4.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Galaxy Tab S4": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36",
	viewport: {
		width: 712,
		height: 1138
	},
	deviceScaleFactor: 2.25,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Galaxy Tab S4 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36",
	viewport: {
		width: 1138,
		height: 712
	},
	deviceScaleFactor: 2.25,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"iPad (gen 5)": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 768,
		height: 1024
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad (gen 5) landscape": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 1024,
		height: 768
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad (gen 6)": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 768,
		height: 1024
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad (gen 6) landscape": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 1024,
		height: 768
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad (gen 7)": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 810,
		height: 1080
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad (gen 7) landscape": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 1080,
		height: 810
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad Mini": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 768,
		height: 1024
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad Mini landscape": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 1024,
		height: 768
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad Pro 11": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 834,
		height: 1194
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPad Pro 11 landscape": {
	userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 1194,
		height: 834
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 6": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 375,
		height: 667
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 6 landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 667,
		height: 375
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 6 Plus": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 414,
		height: 736
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 6 Plus landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 736,
		height: 414
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 7": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 375,
		height: 667
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 7 landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 667,
		height: 375
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 7 Plus": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 414,
		height: 736
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 7 Plus landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 736,
		height: 414
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 8": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 375,
		height: 667
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 8 landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 667,
		height: 375
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 8 Plus": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 414,
		height: 736
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 8 Plus landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 736,
		height: 414
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone SE": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/18.4 Mobile/14E304 Safari/602.1",
	viewport: {
		width: 320,
		height: 568
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone SE landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/18.4 Mobile/14E304 Safari/602.1",
	viewport: {
		width: 568,
		height: 320
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone X": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 375,
		height: 812
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone X landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.4 Mobile/15A372 Safari/604.1",
	viewport: {
		width: 812,
		height: 375
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone XR": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 414,
		height: 896
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone XR landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	viewport: {
		width: 896,
		height: 414
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 11": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 414,
		height: 896
	},
	viewport: {
		width: 414,
		height: 715
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 11 landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 414,
		height: 896
	},
	viewport: {
		width: 800,
		height: 364
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 11 Pro": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 375,
		height: 812
	},
	viewport: {
		width: 375,
		height: 635
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 11 Pro landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 375,
		height: 812
	},
	viewport: {
		width: 724,
		height: 325
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 11 Pro Max": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 414,
		height: 896
	},
	viewport: {
		width: 414,
		height: 715
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 11 Pro Max landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 414,
		height: 896
	},
	viewport: {
		width: 808,
		height: 364
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 12": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 390,
		height: 664
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 12 landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 750,
		height: 340
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 12 Pro": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 390,
		height: 664
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 12 Pro landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 750,
		height: 340
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 12 Pro Max": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 428,
		height: 926
	},
	viewport: {
		width: 428,
		height: 746
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 12 Pro Max landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 428,
		height: 926
	},
	viewport: {
		width: 832,
		height: 378
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 12 Mini": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 375,
		height: 812
	},
	viewport: {
		width: 375,
		height: 629
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 12 Mini landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 375,
		height: 812
	},
	viewport: {
		width: 712,
		height: 325
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 13": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 390,
		height: 664
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 13 landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 750,
		height: 342
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 13 Pro": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 390,
		height: 664
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 13 Pro landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 750,
		height: 342
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 13 Pro Max": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 428,
		height: 926
	},
	viewport: {
		width: 428,
		height: 746
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 13 Pro Max landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 428,
		height: 926
	},
	viewport: {
		width: 832,
		height: 380
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 13 Mini": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 375,
		height: 812
	},
	viewport: {
		width: 375,
		height: 629
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 13 Mini landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 375,
		height: 812
	},
	viewport: {
		width: 712,
		height: 327
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 14": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 390,
		height: 664
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 14 landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 390,
		height: 844
	},
	viewport: {
		width: 750,
		height: 340
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 14 Plus": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 428,
		height: 926
	},
	viewport: {
		width: 428,
		height: 746
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 14 Plus landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 428,
		height: 926
	},
	viewport: {
		width: 832,
		height: 378
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 14 Pro": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 393,
		height: 852
	},
	viewport: {
		width: 393,
		height: 660
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 14 Pro landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 393,
		height: 852
	},
	viewport: {
		width: 734,
		height: 343
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 14 Pro Max": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 430,
		height: 932
	},
	viewport: {
		width: 430,
		height: 740
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 14 Pro Max landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 430,
		height: 932
	},
	viewport: {
		width: 814,
		height: 380
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 15": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 393,
		height: 852
	},
	viewport: {
		width: 393,
		height: 659
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 15 landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 393,
		height: 852
	},
	viewport: {
		width: 734,
		height: 343
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 15 Plus": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 430,
		height: 932
	},
	viewport: {
		width: 430,
		height: 739
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 15 Plus landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 430,
		height: 932
	},
	viewport: {
		width: 814,
		height: 380
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 15 Pro": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 393,
		height: 852
	},
	viewport: {
		width: 393,
		height: 659
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 15 Pro landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 393,
		height: 852
	},
	viewport: {
		width: 734,
		height: 343
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 15 Pro Max": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 430,
		height: 932
	},
	viewport: {
		width: 430,
		height: 739
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"iPhone 15 Pro Max landscape": {
	userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Mobile/15E148 Safari/604.1",
	screen: {
		width: 430,
		height: 932
	},
	viewport: {
		width: 814,
		height: 380
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Kindle Fire HDX": {
	userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
	viewport: {
		width: 800,
		height: 1280
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Kindle Fire HDX landscape": {
	userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
	viewport: {
		width: 1280,
		height: 800
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"LG Optimus L70": {
	userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 384,
		height: 640
	},
	deviceScaleFactor: 1.25,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"LG Optimus L70 landscape": {
	userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 640,
		height: 384
	},
	deviceScaleFactor: 1.25,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Microsoft Lumia 550": {
	userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36 Edge/14.14263",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Microsoft Lumia 550 landscape": {
	userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36 Edge/14.14263",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Microsoft Lumia 950": {
	userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36 Edge/14.14263",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 4,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Microsoft Lumia 950 landscape": {
	userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36 Edge/14.14263",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 4,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 10": {
	userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36",
	viewport: {
		width: 800,
		height: 1280
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 10 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36",
	viewport: {
		width: 1280,
		height: 800
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 4": {
	userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 384,
		height: 640
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 4 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 640,
		height: 384
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 5": {
	userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 5 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 5X": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 412,
		height: 732
	},
	deviceScaleFactor: 2.625,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 5X landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 732,
		height: 412
	},
	deviceScaleFactor: 2.625,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 6": {
	userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 412,
		height: 732
	},
	deviceScaleFactor: 3.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 6 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 732,
		height: 412
	},
	deviceScaleFactor: 3.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 6P": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 412,
		height: 732
	},
	deviceScaleFactor: 3.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 6P landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 732,
		height: 412
	},
	deviceScaleFactor: 3.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 7": {
	userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36",
	viewport: {
		width: 600,
		height: 960
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nexus 7 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36",
	viewport: {
		width: 960,
		height: 600
	},
	deviceScaleFactor: 2,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nokia Lumia 520": {
	userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
	viewport: {
		width: 320,
		height: 533
	},
	deviceScaleFactor: 1.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nokia Lumia 520 landscape": {
	userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
	viewport: {
		width: 533,
		height: 320
	},
	deviceScaleFactor: 1.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Nokia N9": {
	userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
	viewport: {
		width: 480,
		height: 854
	},
	deviceScaleFactor: 1,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Nokia N9 landscape": {
	userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
	viewport: {
		width: 854,
		height: 480
	},
	deviceScaleFactor: 1,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "webkit"
},
	"Pixel 2": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 411,
		height: 731
	},
	deviceScaleFactor: 2.625,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 2 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 731,
		height: 411
	},
	deviceScaleFactor: 2.625,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 2 XL": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 411,
		height: 823
	},
	deviceScaleFactor: 3.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 2 XL landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 823,
		height: 411
	},
	deviceScaleFactor: 3.5,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 3": {
	userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 393,
		height: 786
	},
	deviceScaleFactor: 2.75,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 3 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 786,
		height: 393
	},
	deviceScaleFactor: 2.75,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 4": {
	userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 353,
		height: 745
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 4 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 745,
		height: 353
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 4a (5G)": {
	userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	screen: {
		width: 412,
		height: 892
	},
	viewport: {
		width: 412,
		height: 765
	},
	deviceScaleFactor: 2.63,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 4a (5G) landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	screen: {
		height: 892,
		width: 412
	},
	viewport: {
		width: 840,
		height: 312
	},
	deviceScaleFactor: 2.63,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 5": {
	userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	screen: {
		width: 393,
		height: 851
	},
	viewport: {
		width: 393,
		height: 727
	},
	deviceScaleFactor: 2.75,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 5 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	screen: {
		width: 851,
		height: 393
	},
	viewport: {
		width: 802,
		height: 293
	},
	deviceScaleFactor: 2.75,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 7": {
	userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	screen: {
		width: 412,
		height: 915
	},
	viewport: {
		width: 412,
		height: 839
	},
	deviceScaleFactor: 2.625,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Pixel 7 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	screen: {
		width: 915,
		height: 412
	},
	viewport: {
		width: 863,
		height: 360
	},
	deviceScaleFactor: 2.625,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Moto G4": {
	userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 360,
		height: 640
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Moto G4 landscape": {
	userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Mobile Safari/537.36",
	viewport: {
		width: 640,
		height: 360
	},
	deviceScaleFactor: 3,
	isMobile: true,
	hasTouch: true,
	defaultBrowserType: "chromium"
},
	"Desktop Chrome HiDPI": {
	userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36",
	screen: {
		width: 1792,
		height: 1120
	},
	viewport: {
		width: 1280,
		height: 720
	},
	deviceScaleFactor: 2,
	isMobile: false,
	hasTouch: false,
	defaultBrowserType: "chromium"
},
	"Desktop Edge HiDPI": {
	userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36 Edg/136.0.7103.25",
	screen: {
		width: 1792,
		height: 1120
	},
	viewport: {
		width: 1280,
		height: 720
	},
	deviceScaleFactor: 2,
	isMobile: false,
	hasTouch: false,
	defaultBrowserType: "chromium"
},
	"Desktop Firefox HiDPI": {
	userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0",
	screen: {
		width: 1792,
		height: 1120
	},
	viewport: {
		width: 1280,
		height: 720
	},
	deviceScaleFactor: 2,
	isMobile: false,
	hasTouch: false,
	defaultBrowserType: "firefox"
},
	"Desktop Safari": {
	userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Safari/605.1.15",
	screen: {
		width: 1792,
		height: 1120
	},
	viewport: {
		width: 1280,
		height: 720
	},
	deviceScaleFactor: 2,
	isMobile: false,
	hasTouch: false,
	defaultBrowserType: "webkit"
},
	"Desktop Chrome": {
	userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36",
	screen: {
		width: 1920,
		height: 1080
	},
	viewport: {
		width: 1280,
		height: 720
	},
	deviceScaleFactor: 1,
	isMobile: false,
	hasTouch: false,
	defaultBrowserType: "chromium"
},
	"Desktop Edge": {
	userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.7103.25 Safari/537.36 Edg/136.0.7103.25",
	screen: {
		width: 1920,
		height: 1080
	},
	viewport: {
		width: 1280,
		height: 720
	},
	deviceScaleFactor: 1,
	isMobile: false,
	hasTouch: false,
	defaultBrowserType: "chromium"
},
	"Desktop Firefox": {
	userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0",
	screen: {
		width: 1920,
		height: 1080
	},
	viewport: {
		width: 1280,
		height: 720
	},
	deviceScaleFactor: 1,
	isMobile: false,
	hasTouch: false,
	defaultBrowserType: "firefox"
}
};

var deviceDescriptors_1;
var hasRequiredDeviceDescriptors;

function requireDeviceDescriptors () {
	if (hasRequiredDeviceDescriptors) return deviceDescriptors_1;
	hasRequiredDeviceDescriptors = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var deviceDescriptors_exports = {};
	__export(deviceDescriptors_exports, {
	  deviceDescriptors: () => deviceDescriptors
	});
	deviceDescriptors_1 = __toCommonJS(deviceDescriptors_exports);
	var import_deviceDescriptorsSource = __toESM(require$$0$1);
	const deviceDescriptors = import_deviceDescriptorsSource.default;
	return deviceDescriptors_1;
}

var csharp;
var hasRequiredCsharp;

function requireCsharp () {
	if (hasRequiredCsharp) return csharp;
	hasRequiredCsharp = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var csharp_exports = {};
	__export(csharp_exports, {
	  CSharpLanguageGenerator: () => CSharpLanguageGenerator
	});
	csharp = __toCommonJS(csharp_exports);
	var import_language = requireLanguage();
	var import_utils = requireUtils();
	var import_deviceDescriptors = requireDeviceDescriptors();
	class CSharpLanguageGenerator {
	  constructor(mode) {
	    this.groupName = ".NET C#";
	    this.highlighter = "csharp";
	    if (mode === "library") {
	      this.name = "Library";
	      this.id = "csharp";
	    } else if (mode === "mstest") {
	      this.name = "MSTest";
	      this.id = "csharp-mstest";
	    } else if (mode === "nunit") {
	      this.name = "NUnit";
	      this.id = "csharp-nunit";
	    } else {
	      throw new Error(`Unknown C# language mode: ${mode}`);
	    }
	    this._mode = mode;
	  }
	  generateAction(actionInContext) {
	    const action = this._generateActionInner(actionInContext);
	    if (action)
	      return action;
	    return "";
	  }
	  _generateActionInner(actionInContext) {
	    const action = actionInContext.action;
	    if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage"))
	      return "";
	    let pageAlias = actionInContext.frame.pageAlias;
	    if (this._mode !== "library")
	      pageAlias = pageAlias.replace("page", "Page");
	    const formatter = new CSharpFormatter(this._mode === "library" ? 0 : 8);
	    if (action.name === "openPage") {
	      formatter.add(`var ${pageAlias} = await context.NewPageAsync();`);
	      if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
	        formatter.add(`await ${pageAlias}.GotoAsync(${quote(action.url)});`);
	      return formatter.format();
	    }
	    const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.ContentFrame`);
	    const subject = `${pageAlias}${locators.join("")}`;
	    const signals = (0, import_language.toSignalMap)(action);
	    if (signals.dialog) {
	      formatter.add(`    void ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler(object sender, IDialog dialog)
      {
          Console.WriteLine($"Dialog message: {dialog.Message}");
          dialog.DismissAsync();
          ${pageAlias}.Dialog -= ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;
      }
      ${pageAlias}.Dialog += ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;`);
	    }
	    const lines = [];
	    lines.push(this._generateActionCall(subject, actionInContext));
	    if (signals.download) {
	      lines.unshift(`var download${signals.download.downloadAlias} = await ${pageAlias}.RunAndWaitForDownloadAsync(async () =>
{`);
	      lines.push(`});`);
	    }
	    if (signals.popup) {
	      lines.unshift(`var ${signals.popup.popupAlias} = await ${pageAlias}.RunAndWaitForPopupAsync(async () =>
{`);
	      lines.push(`});`);
	    }
	    for (const line of lines)
	      formatter.add(line);
	    return formatter.format();
	  }
	  _generateActionCall(subject, actionInContext) {
	    const action = actionInContext.action;
	    switch (action.name) {
	      case "openPage":
	        throw Error("Not reached");
	      case "closePage":
	        return `await ${subject}.CloseAsync();`;
	      case "click": {
	        let method = "Click";
	        if (action.clickCount === 2)
	          method = "DblClick";
	        const options = (0, import_language.toClickOptionsForSourceCode)(action);
	        if (!Object.entries(options).length)
	          return `await ${subject}.${this._asLocator(action.selector)}.${method}Async();`;
	        const optionsString = formatObject(options, "    ", "Locator" + method + "Options");
	        return `await ${subject}.${this._asLocator(action.selector)}.${method}Async(${optionsString});`;
	      }
	      case "check":
	        return `await ${subject}.${this._asLocator(action.selector)}.CheckAsync();`;
	      case "uncheck":
	        return `await ${subject}.${this._asLocator(action.selector)}.UncheckAsync();`;
	      case "fill":
	        return `await ${subject}.${this._asLocator(action.selector)}.FillAsync(${quote(action.text)});`;
	      case "setInputFiles":
	        return `await ${subject}.${this._asLocator(action.selector)}.SetInputFilesAsync(${formatObject(action.files)});`;
	      case "press": {
	        const modifiers = (0, import_language.toKeyboardModifiers)(action.modifiers);
	        const shortcut = [...modifiers, action.key].join("+");
	        return `await ${subject}.${this._asLocator(action.selector)}.PressAsync(${quote(shortcut)});`;
	      }
	      case "navigate":
	        return `await ${subject}.GotoAsync(${quote(action.url)});`;
	      case "select":
	        return `await ${subject}.${this._asLocator(action.selector)}.SelectOptionAsync(${formatObject(action.options)});`;
	      case "assertText":
	        return `await Expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "ToContainTextAsync" : "ToHaveTextAsync"}(${quote(action.text)});`;
	      case "assertChecked":
	        return `await Expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".Not"}.ToBeCheckedAsync();`;
	      case "assertVisible":
	        return `await Expect(${subject}.${this._asLocator(action.selector)}).ToBeVisibleAsync();`;
	      case "assertValue": {
	        const assertion = action.value ? `ToHaveValueAsync(${quote(action.value)})` : `ToBeEmptyAsync()`;
	        return `await Expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
	      }
	      case "assertSnapshot":
	        return `await Expect(${subject}.${this._asLocator(action.selector)}).ToMatchAriaSnapshotAsync(${quote(action.snapshot)});`;
	    }
	  }
	  _asLocator(selector) {
	    return (0, import_utils.asLocator)("csharp", selector);
	  }
	  generateHeader(options) {
	    if (this._mode === "library")
	      return this.generateStandaloneHeader(options);
	    return this.generateTestRunnerHeader(options);
	  }
	  generateStandaloneHeader(options) {
	    const formatter = new CSharpFormatter(0);
	    formatter.add(`
      using Microsoft.Playwright;
      using System;
      using System.Threading.Tasks;

      using var playwright = await Playwright.CreateAsync();
      await using var browser = await playwright.${toPascal(options.browserName)}.LaunchAsync(${formatObject(options.launchOptions, "    ", "BrowserTypeLaunchOptions")});
      var context = await browser.NewContextAsync(${formatContextOptions(options.contextOptions, options.deviceName)});`);
	    if (options.contextOptions.recordHar) {
	      const url = options.contextOptions.recordHar.urlFilter;
	      formatter.add(`      await context.RouteFromHARAsync(${quote(options.contextOptions.recordHar.path)}${url ? `, ${formatObject({ url }, "    ", "BrowserContextRouteFromHAROptions")}` : ""});`);
	    }
	    formatter.newLine();
	    return formatter.format();
	  }
	  generateTestRunnerHeader(options) {
	    const formatter = new CSharpFormatter(0);
	    formatter.add(`
      using Microsoft.Playwright.${this._mode === "nunit" ? "NUnit" : "MSTest"};
      using Microsoft.Playwright;

      ${this._mode === "nunit" ? `[Parallelizable(ParallelScope.Self)]
      [TestFixture]` : "[TestClass]"}
      public class Tests : PageTest
      {`);
	    const formattedContextOptions = formatContextOptions(options.contextOptions, options.deviceName);
	    if (formattedContextOptions) {
	      formatter.add(`public override BrowserNewContextOptions ContextOptions()
      {
          return ${formattedContextOptions};
      }`);
	      formatter.newLine();
	    }
	    formatter.add(`    [${this._mode === "nunit" ? "Test" : "TestMethod"}]
    public async Task MyTest()
    {`);
	    if (options.contextOptions.recordHar) {
	      const url = options.contextOptions.recordHar.urlFilter;
	      formatter.add(`    await Context.RouteFromHARAsync(${quote(options.contextOptions.recordHar.path)}${url ? `, ${formatObject({ url }, "    ", "BrowserContextRouteFromHAROptions")}` : ""});`);
	    }
	    return formatter.format();
	  }
	  generateFooter(saveStorage) {
	    const offset = this._mode === "library" ? "" : "        ";
	    let storageStateLine = saveStorage ? `
${offset}await context.StorageStateAsync(new BrowserContextStorageStateOptions
${offset}{
${offset}    Path = ${quote(saveStorage)}
${offset}});
` : "";
	    if (this._mode !== "library")
	      storageStateLine += `    }
}
`;
	    return storageStateLine;
	  }
	}
	function formatObject(value, indent = "    ", name = "") {
	  if (typeof value === "string") {
	    if (["permissions", "colorScheme", "modifiers", "button", "recordHarContent", "recordHarMode", "serviceWorkers"].includes(name))
	      return `${getClassName(name)}.${toPascal(value)}`;
	    return quote(value);
	  }
	  if (Array.isArray(value))
	    return `new[] { ${value.map((o) => formatObject(o, indent, name)).join(", ")} }`;
	  if (typeof value === "object") {
	    const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
	    if (!keys.length)
	      return name ? `new ${getClassName(name)}` : "";
	    const tokens = [];
	    for (const key of keys) {
	      const property = getPropertyName(key);
	      tokens.push(`${property} = ${formatObject(value[key], indent, key)},`);
	    }
	    if (name)
	      return `new ${getClassName(name)}
{
${indent}${tokens.join(`
${indent}`)}
${indent}}`;
	    return `{
${indent}${tokens.join(`
${indent}`)}
${indent}}`;
	  }
	  if (name === "latitude" || name === "longitude")
	    return String(value) + "m";
	  return String(value);
	}
	function getClassName(value) {
	  switch (value) {
	    case "viewport":
	      return "ViewportSize";
	    case "proxy":
	      return "ProxySettings";
	    case "permissions":
	      return "ContextPermission";
	    case "modifiers":
	      return "KeyboardModifier";
	    case "button":
	      return "MouseButton";
	    case "recordHarMode":
	      return "HarMode";
	    case "recordHarContent":
	      return "HarContentPolicy";
	    case "serviceWorkers":
	      return "ServiceWorkerPolicy";
	    default:
	      return toPascal(value);
	  }
	}
	function getPropertyName(key) {
	  switch (key) {
	    case "storageState":
	      return "StorageStatePath";
	    case "viewport":
	      return "ViewportSize";
	    default:
	      return toPascal(key);
	  }
	}
	function toPascal(value) {
	  return value[0].toUpperCase() + value.slice(1);
	}
	function formatContextOptions(contextOptions, deviceName) {
	  let options = { ...contextOptions };
	  delete options.recordHar;
	  const device = deviceName && import_deviceDescriptors.deviceDescriptors[deviceName];
	  if (!device) {
	    if (!Object.entries(options).length)
	      return "";
	    return formatObject(options, "    ", "BrowserNewContextOptions");
	  }
	  options = (0, import_language.sanitizeDeviceOptions)(device, options);
	  if (!Object.entries(options).length)
	    return `playwright.Devices[${quote(deviceName)}]`;
	  return formatObject(options, "    ", `BrowserNewContextOptions(playwright.Devices[${quote(deviceName)}])`);
	}
	class CSharpFormatter {
	  constructor(offset = 0) {
	    this._lines = [];
	    this._baseIndent = " ".repeat(4);
	    this._baseOffset = " ".repeat(offset);
	  }
	  prepend(text) {
	    this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
	  }
	  add(text) {
	    this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
	  }
	  newLine() {
	    this._lines.push("");
	  }
	  format() {
	    let spaces = "";
	    let previousLine = "";
	    return this._lines.map((line) => {
	      if (line === "")
	        return line;
	      if (line.startsWith("}") || line.startsWith("]") || line.includes("});") || line === ");")
	        spaces = spaces.substring(this._baseIndent.length);
	      const extraSpaces = /^(for|while|if).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
	      previousLine = line;
	      line = spaces + extraSpaces + line;
	      if (line.endsWith("{") || line.endsWith("[") || line.endsWith("("))
	        spaces += this._baseIndent;
	      if (line.endsWith("));"))
	        spaces = spaces.substring(this._baseIndent.length);
	      return this._baseOffset + line;
	    }).join("\n");
	  }
	}
	function quote(text) {
	  return (0, import_utils.escapeWithQuotes)(text, '"');
	}
	return csharp;
}

var javascript;
var hasRequiredJavascript;

function requireJavascript () {
	if (hasRequiredJavascript) return javascript;
	hasRequiredJavascript = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var javascript_exports = {};
	__export(javascript_exports, {
	  JavaScriptFormatter: () => JavaScriptFormatter,
	  JavaScriptLanguageGenerator: () => JavaScriptLanguageGenerator,
	  quoteMultiline: () => quoteMultiline
	});
	javascript = __toCommonJS(javascript_exports);
	var import_language = requireLanguage();
	var import_utils = requireUtils();
	var import_deviceDescriptors = requireDeviceDescriptors();
	class JavaScriptLanguageGenerator {
	  constructor(isTest) {
	    this.groupName = "Node.js";
	    this.highlighter = "javascript";
	    this.id = isTest ? "playwright-test" : "javascript";
	    this.name = isTest ? "Test Runner" : "Library";
	    this._isTest = isTest;
	  }
	  generateAction(actionInContext) {
	    const action = actionInContext.action;
	    if (this._isTest && (action.name === "openPage" || action.name === "closePage"))
	      return "";
	    const pageAlias = actionInContext.frame.pageAlias;
	    const formatter = new JavaScriptFormatter(2);
	    if (action.name === "openPage") {
	      formatter.add(`const ${pageAlias} = await context.newPage();`);
	      if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
	        formatter.add(`await ${pageAlias}.goto(${quote(action.url)});`);
	      return formatter.format();
	    }
	    const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.contentFrame()`);
	    const subject = `${pageAlias}${locators.join("")}`;
	    const signals = (0, import_language.toSignalMap)(action);
	    if (signals.dialog) {
	      formatter.add(`  ${pageAlias}.once('dialog', dialog => {
    console.log(\`Dialog message: \${dialog.message()}\`);
    dialog.dismiss().catch(() => {});
  });`);
	    }
	    if (signals.popup)
	      formatter.add(`const ${signals.popup.popupAlias}Promise = ${pageAlias}.waitForEvent('popup');`);
	    if (signals.download)
	      formatter.add(`const download${signals.download.downloadAlias}Promise = ${pageAlias}.waitForEvent('download');`);
	    formatter.add(wrapWithStep(actionInContext.description, this._generateActionCall(subject, actionInContext)));
	    if (signals.popup)
	      formatter.add(`const ${signals.popup.popupAlias} = await ${signals.popup.popupAlias}Promise;`);
	    if (signals.download)
	      formatter.add(`const download${signals.download.downloadAlias} = await download${signals.download.downloadAlias}Promise;`);
	    return formatter.format();
	  }
	  _generateActionCall(subject, actionInContext) {
	    const action = actionInContext.action;
	    switch (action.name) {
	      case "openPage":
	        throw Error("Not reached");
	      case "closePage":
	        return `await ${subject}.close();`;
	      case "click": {
	        let method = "click";
	        if (action.clickCount === 2)
	          method = "dblclick";
	        const options = (0, import_language.toClickOptionsForSourceCode)(action);
	        const optionsString = formatOptions(options);
	        return `await ${subject}.${this._asLocator(action.selector)}.${method}(${optionsString});`;
	      }
	      case "check":
	        return `await ${subject}.${this._asLocator(action.selector)}.check();`;
	      case "uncheck":
	        return `await ${subject}.${this._asLocator(action.selector)}.uncheck();`;
	      case "fill":
	        return `await ${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)});`;
	      case "setInputFiles":
	        return `await ${subject}.${this._asLocator(action.selector)}.setInputFiles(${formatObject(action.files.length === 1 ? action.files[0] : action.files)});`;
	      case "press": {
	        const modifiers = (0, import_language.toKeyboardModifiers)(action.modifiers);
	        const shortcut = [...modifiers, action.key].join("+");
	        return `await ${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)});`;
	      }
	      case "navigate":
	        return `await ${subject}.goto(${quote(action.url)});`;
	      case "select":
	        return `await ${subject}.${this._asLocator(action.selector)}.selectOption(${formatObject(action.options.length === 1 ? action.options[0] : action.options)});`;
	      case "assertText":
	        return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "toContainText" : "toHaveText"}(${quote(action.text)});`;
	      case "assertChecked":
	        return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".not"}.toBeChecked();`;
	      case "assertVisible":
	        return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).toBeVisible();`;
	      case "assertValue": {
	        const assertion = action.value ? `toHaveValue(${quote(action.value)})` : `toBeEmpty()`;
	        return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
	      }
	      case "assertSnapshot": {
	        const commentIfNeeded = this._isTest ? "" : "// ";
	        return `${commentIfNeeded}await expect(${subject}.${this._asLocator(action.selector)}).toMatchAriaSnapshot(${quoteMultiline(action.snapshot, `${commentIfNeeded}  `)});`;
	      }
	    }
	  }
	  _asLocator(selector) {
	    return (0, import_utils.asLocator)("javascript", selector);
	  }
	  generateHeader(options) {
	    if (this._isTest)
	      return this.generateTestHeader(options);
	    return this.generateStandaloneHeader(options);
	  }
	  generateFooter(saveStorage) {
	    if (this._isTest)
	      return this.generateTestFooter(saveStorage);
	    return this.generateStandaloneFooter(saveStorage);
	  }
	  generateTestHeader(options) {
	    const formatter = new JavaScriptFormatter();
	    const useText = formatContextOptions(options.contextOptions, options.deviceName, this._isTest);
	    formatter.add(`
      import { test, expect${options.deviceName ? ", devices" : ""} } from '@playwright/test';
${useText ? "\ntest.use(" + useText + ");\n" : ""}
      test('test', async ({ page }) => {`);
	    if (options.contextOptions.recordHar) {
	      const url = options.contextOptions.recordHar.urlFilter;
	      formatter.add(`  await page.routeFromHAR(${quote(options.contextOptions.recordHar.path)}${url ? `, ${formatOptions({ url })}` : ""});`);
	    }
	    return formatter.format();
	  }
	  generateTestFooter(saveStorage) {
	    return `});`;
	  }
	  generateStandaloneHeader(options) {
	    const formatter = new JavaScriptFormatter();
	    formatter.add(`
      const { ${options.browserName}${options.deviceName ? ", devices" : ""} } = require('playwright');

      (async () => {
        const browser = await ${options.browserName}.launch(${formatObjectOrVoid(options.launchOptions)});
        const context = await browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
	    if (options.contextOptions.recordHar)
	      formatter.add(`        await context.routeFromHAR(${quote(options.contextOptions.recordHar.path)});`);
	    return formatter.format();
	  }
	  generateStandaloneFooter(saveStorage) {
	    const storageStateLine = saveStorage ? `
  await context.storageState({ path: ${quote(saveStorage)} });` : "";
	    return `
  // ---------------------${storageStateLine}
  await context.close();
  await browser.close();
})();`;
	  }
	}
	function formatOptions(value, hasArguments) {
	  const keys = Object.keys(value);
	  if (!keys.length)
	    return "";
	  return ("") + formatObject(value);
	}
	function formatObject(value, indent = "  ") {
	  if (typeof value === "string")
	    return quote(value);
	  if (Array.isArray(value))
	    return `[${value.map((o) => formatObject(o)).join(", ")}]`;
	  if (typeof value === "object") {
	    const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
	    if (!keys.length)
	      return "{}";
	    const tokens = [];
	    for (const key of keys)
	      tokens.push(`${key}: ${formatObject(value[key])}`);
	    return `{
${indent}${tokens.join(`,
${indent}`)}
}`;
	  }
	  return String(value);
	}
	function formatObjectOrVoid(value, indent = "  ") {
	  const result = formatObject(value, indent);
	  return result === "{}" ? "" : result;
	}
	function formatContextOptions(options, deviceName, isTest) {
	  const device = deviceName && import_deviceDescriptors.deviceDescriptors[deviceName];
	  options = { ...options, recordHar: void 0 };
	  if (!device)
	    return formatObjectOrVoid(options);
	  let serializedObject = formatObjectOrVoid((0, import_language.sanitizeDeviceOptions)(device, options));
	  if (!serializedObject)
	    serializedObject = "{\n}";
	  const lines = serializedObject.split("\n");
	  lines.splice(1, 0, `...devices[${quote(deviceName)}],`);
	  return lines.join("\n");
	}
	class JavaScriptFormatter {
	  constructor(offset = 0) {
	    this._lines = [];
	    this._baseIndent = " ".repeat(2);
	    this._baseOffset = " ".repeat(offset);
	  }
	  prepend(text) {
	    const trim = isMultilineString(text) ? (line) => line : (line) => line.trim();
	    this._lines = text.trim().split("\n").map(trim).concat(this._lines);
	  }
	  add(text) {
	    const trim = isMultilineString(text) ? (line) => line : (line) => line.trim();
	    this._lines.push(...text.trim().split("\n").map(trim));
	  }
	  newLine() {
	    this._lines.push("");
	  }
	  format() {
	    let spaces = "";
	    let previousLine = "";
	    return this._lines.map((line) => {
	      if (line === "")
	        return line;
	      if (line.startsWith("}") || line.startsWith("]"))
	        spaces = spaces.substring(this._baseIndent.length);
	      const extraSpaces = /^(for|while|if|try).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
	      previousLine = line;
	      const callCarryOver = line.startsWith(".set");
	      line = spaces + extraSpaces + (callCarryOver ? this._baseIndent : "") + line;
	      if (line.endsWith("{") || line.endsWith("["))
	        spaces += this._baseIndent;
	      return this._baseOffset + line;
	    }).join("\n");
	  }
	}
	function quote(text) {
	  return (0, import_utils.escapeWithQuotes)(text, "'");
	}
	function wrapWithStep(description, body) {
	  return description ? `await test.step(\`${description}\`, async () => {
${body}
});` : body;
	}
	function quoteMultiline(text, indent = "  ") {
	  const escape = (text2) => text2.replace(/\\/g, "\\\\").replace(/`/g, "\\`").replace(/\$\{/g, "\\${");
	  const lines = text.split("\n");
	  if (lines.length === 1)
	    return "`" + escape(text) + "`";
	  return "`\n" + lines.map((line) => indent + escape(line).replace(/\${/g, "\\${")).join("\n") + `
${indent}\``;
	}
	function isMultilineString(text) {
	  return text.match(/`[\S\s]*`/)?.[0].includes("\n");
	}
	return javascript;
}

var java;
var hasRequiredJava;

function requireJava () {
	if (hasRequiredJava) return java;
	hasRequiredJava = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var java_exports = {};
	__export(java_exports, {
	  JavaLanguageGenerator: () => JavaLanguageGenerator
	});
	java = __toCommonJS(java_exports);
	var import_language = requireLanguage();
	var import_deviceDescriptors = requireDeviceDescriptors();
	var import_javascript = requireJavascript();
	var import_utils = requireUtils();
	class JavaLanguageGenerator {
	  constructor(mode) {
	    this.groupName = "Java";
	    this.highlighter = "java";
	    if (mode === "library") {
	      this.name = "Library";
	      this.id = "java";
	    } else if (mode === "junit") {
	      this.name = "JUnit";
	      this.id = "java-junit";
	    } else {
	      throw new Error(`Unknown Java language mode: ${mode}`);
	    }
	    this._mode = mode;
	  }
	  generateAction(actionInContext) {
	    const action = actionInContext.action;
	    const pageAlias = actionInContext.frame.pageAlias;
	    const offset = this._mode === "junit" ? 4 : 6;
	    const formatter = new import_javascript.JavaScriptFormatter(offset);
	    if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage"))
	      return "";
	    if (action.name === "openPage") {
	      formatter.add(`Page ${pageAlias} = context.newPage();`);
	      if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
	        formatter.add(`${pageAlias}.navigate(${quote(action.url)});`);
	      return formatter.format();
	    }
	    const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector, false)}.contentFrame()`);
	    const subject = `${pageAlias}${locators.join("")}`;
	    const signals = (0, import_language.toSignalMap)(action);
	    if (signals.dialog) {
	      formatter.add(`  ${pageAlias}.onceDialog(dialog -> {
        System.out.println(String.format("Dialog message: %s", dialog.message()));
        dialog.dismiss();
      });`);
	    }
	    let code = this._generateActionCall(subject, actionInContext, !!actionInContext.frame.framePath.length);
	    if (signals.popup) {
	      code = `Page ${signals.popup.popupAlias} = ${pageAlias}.waitForPopup(() -> {
        ${code}
      });`;
	    }
	    if (signals.download) {
	      code = `Download download${signals.download.downloadAlias} = ${pageAlias}.waitForDownload(() -> {
        ${code}
      });`;
	    }
	    formatter.add(code);
	    return formatter.format();
	  }
	  _generateActionCall(subject, actionInContext, inFrameLocator) {
	    const action = actionInContext.action;
	    switch (action.name) {
	      case "openPage":
	        throw Error("Not reached");
	      case "closePage":
	        return `${subject}.close();`;
	      case "click": {
	        let method = "click";
	        if (action.clickCount === 2)
	          method = "dblclick";
	        const options = (0, import_language.toClickOptionsForSourceCode)(action);
	        const optionsText = formatClickOptions(options);
	        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.${method}(${optionsText});`;
	      }
	      case "check":
	        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.check();`;
	      case "uncheck":
	        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.uncheck();`;
	      case "fill":
	        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.fill(${quote(action.text)});`;
	      case "setInputFiles":
	        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.setInputFiles(${formatPath(action.files.length === 1 ? action.files[0] : action.files)});`;
	      case "press": {
	        const modifiers = (0, import_language.toKeyboardModifiers)(action.modifiers);
	        const shortcut = [...modifiers, action.key].join("+");
	        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.press(${quote(shortcut)});`;
	      }
	      case "navigate":
	        return `${subject}.navigate(${quote(action.url)});`;
	      case "select":
	        return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.selectOption(${formatSelectOption(action.options.length === 1 ? action.options[0] : action.options)});`;
	      case "assertText":
	        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${action.substring ? "containsText" : "hasText"}(${quote(action.text)});`;
	      case "assertChecked":
	        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)})${action.checked ? "" : ".not()"}.isChecked();`;
	      case "assertVisible":
	        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).isVisible();`;
	      case "assertValue": {
	        const assertion = action.value ? `hasValue(${quote(action.value)})` : `isEmpty()`;
	        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${assertion};`;
	      }
	      case "assertSnapshot":
	        return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).matchesAriaSnapshot(${quote(action.snapshot)});`;
	    }
	  }
	  _asLocator(selector, inFrameLocator) {
	    return (0, import_utils.asLocator)("java", selector, inFrameLocator);
	  }
	  generateHeader(options) {
	    const formatter = new import_javascript.JavaScriptFormatter();
	    if (this._mode === "junit") {
	      formatter.add(`
      import com.microsoft.playwright.junit.UsePlaywright;
      import com.microsoft.playwright.Page;
      import com.microsoft.playwright.options.*;

      ${options.contextOptions.recordHar ? `import java.nio.file.Paths;
` : ""}import org.junit.jupiter.api.*;
      import static com.microsoft.playwright.assertions.PlaywrightAssertions.*;

      @UsePlaywright
      public class TestExample {
        @Test
        void test(Page page) {`);
	      if (options.contextOptions.recordHar) {
	        const url = options.contextOptions.recordHar.urlFilter;
	        const recordHarOptions = typeof url === "string" ? `, new Page.RouteFromHAROptions()
            .setUrl(${quote(url)})` : "";
	        formatter.add(`          page.routeFromHAR(Paths.get(${quote(options.contextOptions.recordHar.path)})${recordHarOptions});`);
	      }
	      return formatter.format();
	    }
	    formatter.add(`
    import com.microsoft.playwright.*;
    import com.microsoft.playwright.options.*;
    import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
    ${options.contextOptions.recordHar ? `import java.nio.file.Paths;
` : ""}import java.util.*;

    public class Example {
      public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
          Browser browser = playwright.${options.browserName}().launch(${formatLaunchOptions(options.launchOptions)});
          BrowserContext context = browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
	    if (options.contextOptions.recordHar) {
	      const url = options.contextOptions.recordHar.urlFilter;
	      const recordHarOptions = typeof url === "string" ? `, new BrowserContext.RouteFromHAROptions()
          .setUrl(${quote(url)})` : "";
	      formatter.add(`          context.routeFromHAR(Paths.get(${quote(options.contextOptions.recordHar.path)})${recordHarOptions});`);
	    }
	    return formatter.format();
	  }
	  generateFooter(saveStorage) {
	    const storageStateLine = saveStorage ? `
      context.storageState(new BrowserContext.StorageStateOptions().setPath(${quote(saveStorage)}));
` : "";
	    if (this._mode === "junit") {
	      return `${storageStateLine}  }
}`;
	    }
	    return `${storageStateLine}    }
  }
}`;
	  }
	}
	function formatPath(files) {
	  if (Array.isArray(files)) {
	    if (files.length === 0)
	      return "new Path[0]";
	    return `new Path[] {${files.map((s) => "Paths.get(" + quote(s) + ")").join(", ")}}`;
	  }
	  return `Paths.get(${quote(files)})`;
	}
	function formatSelectOption(options) {
	  if (Array.isArray(options)) {
	    if (options.length === 0)
	      return "new String[0]";
	    return `new String[] {${options.map((s) => quote(s)).join(", ")}}`;
	  }
	  return quote(options);
	}
	function formatLaunchOptions(options) {
	  const lines = [];
	  if (!Object.keys(options).filter((key) => options[key] !== void 0).length)
	    return "";
	  lines.push("new BrowserType.LaunchOptions()");
	  if (options.channel)
	    lines.push(`  .setChannel(${quote(options.channel)})`);
	  if (typeof options.headless === "boolean")
	    lines.push(`  .setHeadless(false)`);
	  return lines.join("\n");
	}
	function formatContextOptions(contextOptions, deviceName) {
	  const lines = [];
	  if (!Object.keys(contextOptions).length && !deviceName)
	    return "";
	  const device = deviceName ? import_deviceDescriptors.deviceDescriptors[deviceName] : {};
	  const options = { ...device, ...contextOptions };
	  lines.push("new Browser.NewContextOptions()");
	  if (options.acceptDownloads)
	    lines.push(`  .setAcceptDownloads(true)`);
	  if (options.bypassCSP)
	    lines.push(`  .setBypassCSP(true)`);
	  if (options.colorScheme)
	    lines.push(`  .setColorScheme(ColorScheme.${options.colorScheme.toUpperCase()})`);
	  if (options.deviceScaleFactor)
	    lines.push(`  .setDeviceScaleFactor(${options.deviceScaleFactor})`);
	  if (options.geolocation)
	    lines.push(`  .setGeolocation(${options.geolocation.latitude}, ${options.geolocation.longitude})`);
	  if (options.hasTouch)
	    lines.push(`  .setHasTouch(${options.hasTouch})`);
	  if (options.isMobile)
	    lines.push(`  .setIsMobile(${options.isMobile})`);
	  if (options.locale)
	    lines.push(`  .setLocale(${quote(options.locale)})`);
	  if (options.proxy)
	    lines.push(`  .setProxy(new Proxy(${quote(options.proxy.server)}))`);
	  if (options.serviceWorkers)
	    lines.push(`  .setServiceWorkers(ServiceWorkerPolicy.${options.serviceWorkers.toUpperCase()})`);
	  if (options.storageState)
	    lines.push(`  .setStorageStatePath(Paths.get(${quote(options.storageState)}))`);
	  if (options.timezoneId)
	    lines.push(`  .setTimezoneId(${quote(options.timezoneId)})`);
	  if (options.userAgent)
	    lines.push(`  .setUserAgent(${quote(options.userAgent)})`);
	  if (options.viewport)
	    lines.push(`  .setViewportSize(${options.viewport.width}, ${options.viewport.height})`);
	  return lines.join("\n");
	}
	function formatClickOptions(options) {
	  const lines = [];
	  if (options.button)
	    lines.push(`  .setButton(MouseButton.${options.button.toUpperCase()})`);
	  if (options.modifiers)
	    lines.push(`  .setModifiers(Arrays.asList(${options.modifiers.map((m) => `KeyboardModifier.${m.toUpperCase()}`).join(", ")}))`);
	  if (options.clickCount)
	    lines.push(`  .setClickCount(${options.clickCount})`);
	  if (options.position)
	    lines.push(`  .setPosition(${options.position.x}, ${options.position.y})`);
	  if (!lines.length)
	    return "";
	  lines.unshift(`new Locator.ClickOptions()`);
	  return lines.join("\n");
	}
	function quote(text) {
	  return (0, import_utils.escapeWithQuotes)(text, '"');
	}
	return java;
}

var jsonl;
var hasRequiredJsonl;

function requireJsonl () {
	if (hasRequiredJsonl) return jsonl;
	hasRequiredJsonl = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var jsonl_exports = {};
	__export(jsonl_exports, {
	  JsonlLanguageGenerator: () => JsonlLanguageGenerator
	});
	jsonl = __toCommonJS(jsonl_exports);
	var import_utils = requireUtils();
	class JsonlLanguageGenerator {
	  constructor() {
	    this.id = "jsonl";
	    this.groupName = "";
	    this.name = "JSONL";
	    this.highlighter = "javascript";
	  }
	  generateAction(actionInContext) {
	    const locator = actionInContext.action.selector ? JSON.parse((0, import_utils.asLocator)("jsonl", actionInContext.action.selector)) : void 0;
	    const entry = {
	      ...actionInContext.action,
	      ...actionInContext.frame,
	      locator
	    };
	    return JSON.stringify(entry);
	  }
	  generateHeader(options) {
	    return JSON.stringify(options);
	  }
	  generateFooter(saveStorage) {
	    return "";
	  }
	}
	return jsonl;
}

var python;
var hasRequiredPython;

function requirePython () {
	if (hasRequiredPython) return python;
	hasRequiredPython = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var python_exports = {};
	__export(python_exports, {
	  PythonLanguageGenerator: () => PythonLanguageGenerator
	});
	python = __toCommonJS(python_exports);
	var import_language = requireLanguage();
	var import_utils = requireUtils();
	var import_deviceDescriptors = requireDeviceDescriptors();
	class PythonLanguageGenerator {
	  constructor(isAsync, isPyTest) {
	    this.groupName = "Python";
	    this.highlighter = "python";
	    this.id = isPyTest ? "python-pytest" : isAsync ? "python-async" : "python";
	    this.name = isPyTest ? "Pytest" : isAsync ? "Library Async" : "Library";
	    this._isAsync = isAsync;
	    this._isPyTest = isPyTest;
	    this._awaitPrefix = isAsync ? "await " : "";
	    this._asyncPrefix = isAsync ? "async " : "";
	  }
	  generateAction(actionInContext) {
	    const action = actionInContext.action;
	    if (this._isPyTest && (action.name === "openPage" || action.name === "closePage"))
	      return "";
	    const pageAlias = actionInContext.frame.pageAlias;
	    const formatter = new PythonFormatter(4);
	    if (action.name === "openPage") {
	      formatter.add(`${pageAlias} = ${this._awaitPrefix}context.new_page()`);
	      if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
	        formatter.add(`${this._awaitPrefix}${pageAlias}.goto(${quote(action.url)})`);
	      return formatter.format();
	    }
	    const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.content_frame`);
	    const subject = `${pageAlias}${locators.join("")}`;
	    const signals = (0, import_language.toSignalMap)(action);
	    if (signals.dialog)
	      formatter.add(`  ${pageAlias}.once("dialog", lambda dialog: dialog.dismiss())`);
	    let code = `${this._awaitPrefix}${this._generateActionCall(subject, actionInContext)}`;
	    if (signals.popup) {
	      code = `${this._asyncPrefix}with ${pageAlias}.expect_popup() as ${signals.popup.popupAlias}_info {
        ${code}
      }
      ${signals.popup.popupAlias} = ${this._awaitPrefix}${signals.popup.popupAlias}_info.value`;
	    }
	    if (signals.download) {
	      code = `${this._asyncPrefix}with ${pageAlias}.expect_download() as download${signals.download.downloadAlias}_info {
        ${code}
      }
      download${signals.download.downloadAlias} = ${this._awaitPrefix}download${signals.download.downloadAlias}_info.value`;
	    }
	    formatter.add(code);
	    return formatter.format();
	  }
	  _generateActionCall(subject, actionInContext) {
	    const action = actionInContext.action;
	    switch (action.name) {
	      case "openPage":
	        throw Error("Not reached");
	      case "closePage":
	        return `${subject}.close()`;
	      case "click": {
	        let method = "click";
	        if (action.clickCount === 2)
	          method = "dblclick";
	        const options = (0, import_language.toClickOptionsForSourceCode)(action);
	        const optionsString = formatOptions(options, false);
	        return `${subject}.${this._asLocator(action.selector)}.${method}(${optionsString})`;
	      }
	      case "check":
	        return `${subject}.${this._asLocator(action.selector)}.check()`;
	      case "uncheck":
	        return `${subject}.${this._asLocator(action.selector)}.uncheck()`;
	      case "fill":
	        return `${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)})`;
	      case "setInputFiles":
	        return `${subject}.${this._asLocator(action.selector)}.set_input_files(${formatValue(action.files.length === 1 ? action.files[0] : action.files)})`;
	      case "press": {
	        const modifiers = (0, import_language.toKeyboardModifiers)(action.modifiers);
	        const shortcut = [...modifiers, action.key].join("+");
	        return `${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)})`;
	      }
	      case "navigate":
	        return `${subject}.goto(${quote(action.url)})`;
	      case "select":
	        return `${subject}.${this._asLocator(action.selector)}.select_option(${formatValue(action.options.length === 1 ? action.options[0] : action.options)})`;
	      case "assertText":
	        return `expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "to_contain_text" : "to_have_text"}(${quote(action.text)})`;
	      case "assertChecked":
	        return `expect(${subject}.${this._asLocator(action.selector)}).${action.checked ? "to_be_checked()" : "not_to_be_checked()"}`;
	      case "assertVisible":
	        return `expect(${subject}.${this._asLocator(action.selector)}).to_be_visible()`;
	      case "assertValue": {
	        const assertion = action.value ? `to_have_value(${quote(action.value)})` : `to_be_empty()`;
	        return `expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
	      }
	      case "assertSnapshot":
	        return `expect(${subject}.${this._asLocator(action.selector)}).to_match_aria_snapshot(${quote(action.snapshot)})`;
	    }
	  }
	  _asLocator(selector) {
	    return (0, import_utils.asLocator)("python", selector);
	  }
	  generateHeader(options) {
	    const formatter = new PythonFormatter();
	    const recordHar = options.contextOptions.recordHar;
	    if (this._isPyTest) {
	      const contextOptions = formatContextOptions(
	        options.contextOptions,
	        options.deviceName,
	        true
	        /* asDict */
	      );
	      const fixture = contextOptions ? `

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args, playwright) {
    return {${contextOptions}}
}
` : "";
	      formatter.add(`${options.deviceName || contextOptions ? "import pytest\n" : ""}import re
from playwright.sync_api import Page, expect
${fixture}

def test_example(page: Page) -> None {`);
	      if (recordHar)
	        formatter.add(`    page.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === "string" ? `, url=${quote(recordHar.urlFilter)}` : ""})`);
	    } else if (this._isAsync) {
	      formatter.add(`
import asyncio
import re
from playwright.async_api import Playwright, async_playwright, expect


async def run(playwright: Playwright) -> None {
    browser = await playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = await browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
	      if (recordHar)
	        formatter.add(`    await context.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === "string" ? `, url=${quote(recordHar.urlFilter)}` : ""})`);
	    } else {
	      formatter.add(`
import re
from playwright.sync_api import Playwright, sync_playwright, expect


def run(playwright: Playwright) -> None {
    browser = playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
	      if (recordHar)
	        formatter.add(`    context.route_from_har(${quote(recordHar.path)}${typeof recordHar.urlFilter === "string" ? `, url=${quote(recordHar.urlFilter)}` : ""})`);
	    }
	    return formatter.format();
	  }
	  generateFooter(saveStorage) {
	    if (this._isPyTest) {
	      return "";
	    } else if (this._isAsync) {
	      const storageStateLine = saveStorage ? `
    await context.storage_state(path=${quote(saveStorage)})` : "";
	      return `
    # ---------------------${storageStateLine}
    await context.close()
    await browser.close()


async def main() -> None:
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())
`;
	    } else {
	      const storageStateLine = saveStorage ? `
    context.storage_state(path=${quote(saveStorage)})` : "";
	      return `
    # ---------------------${storageStateLine}
    context.close()
    browser.close()


with sync_playwright() as playwright:
    run(playwright)
`;
	    }
	  }
	}
	function formatValue(value) {
	  if (value === false)
	    return "False";
	  if (value === true)
	    return "True";
	  if (value === void 0)
	    return "None";
	  if (Array.isArray(value))
	    return `[${value.map(formatValue).join(", ")}]`;
	  if (typeof value === "string")
	    return quote(value);
	  if (typeof value === "object")
	    return JSON.stringify(value);
	  return String(value);
	}
	function formatOptions(value, hasArguments, asDict) {
	  const keys = Object.keys(value).filter((key) => value[key] !== void 0).sort();
	  if (!keys.length)
	    return "";
	  return (hasArguments ? ", " : "") + keys.map((key) => {
	    if (asDict)
	      return `"${(0, import_utils.toSnakeCase)(key)}": ${formatValue(value[key])}`;
	    return `${(0, import_utils.toSnakeCase)(key)}=${formatValue(value[key])}`;
	  }).join(", ");
	}
	function formatContextOptions(options, deviceName, asDict) {
	  options = { ...options, recordHar: void 0 };
	  const device = deviceName && import_deviceDescriptors.deviceDescriptors[deviceName];
	  if (!device)
	    return formatOptions(options, false, asDict);
	  return `**playwright.devices[${quote(deviceName)}]` + formatOptions((0, import_language.sanitizeDeviceOptions)(device, options), true, asDict);
	}
	class PythonFormatter {
	  constructor(offset = 0) {
	    this._lines = [];
	    this._baseIndent = " ".repeat(4);
	    this._baseOffset = " ".repeat(offset);
	  }
	  prepend(text) {
	    this._lines = text.trim().split("\n").map((line) => line.trim()).concat(this._lines);
	  }
	  add(text) {
	    this._lines.push(...text.trim().split("\n").map((line) => line.trim()));
	  }
	  newLine() {
	    this._lines.push("");
	  }
	  format() {
	    let spaces = "";
	    const lines = [];
	    this._lines.forEach((line) => {
	      if (line === "")
	        return lines.push(line);
	      if (line === "}") {
	        spaces = spaces.substring(this._baseIndent.length);
	        return;
	      }
	      line = spaces + line;
	      if (line.endsWith("{")) {
	        spaces += this._baseIndent;
	        line = line.substring(0, line.length - 1).trimEnd() + ":";
	      }
	      return lines.push(this._baseOffset + line);
	    });
	    return lines.join("\n");
	  }
	}
	function quote(text) {
	  return (0, import_utils.escapeWithQuotes)(text, '"');
	}
	return python;
}

var languages;
var hasRequiredLanguages;

function requireLanguages () {
	if (hasRequiredLanguages) return languages;
	hasRequiredLanguages = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var languages_exports = {};
	__export(languages_exports, {
	  languageSet: () => languageSet
	});
	languages = __toCommonJS(languages_exports);
	var import_csharp = requireCsharp();
	var import_java = requireJava();
	var import_javascript = requireJavascript();
	var import_jsonl = requireJsonl();
	var import_python = requirePython();
	function languageSet() {
	  return /* @__PURE__ */ new Set([
	    new import_java.JavaLanguageGenerator("junit"),
	    new import_java.JavaLanguageGenerator("library"),
	    new import_javascript.JavaScriptLanguageGenerator(
	      /* isPlaywrightTest */
	      false
	    ),
	    new import_javascript.JavaScriptLanguageGenerator(
	      /* isPlaywrightTest */
	      true
	    ),
	    new import_python.PythonLanguageGenerator(
	      /* isAsync */
	      false,
	      /* isPytest */
	      true
	    ),
	    new import_python.PythonLanguageGenerator(
	      /* isAsync */
	      false,
	      /* isPytest */
	      false
	    ),
	    new import_python.PythonLanguageGenerator(
	      /* isAsync */
	      true,
	      /* isPytest */
	      false
	    ),
	    new import_csharp.CSharpLanguageGenerator("mstest"),
	    new import_csharp.CSharpLanguageGenerator("nunit"),
	    new import_csharp.CSharpLanguageGenerator("library"),
	    new import_jsonl.JsonlLanguageGenerator()
	  ]);
	}
	return languages;
}

var throttledFile;
var hasRequiredThrottledFile;

function requireThrottledFile () {
	if (hasRequiredThrottledFile) return throttledFile;
	hasRequiredThrottledFile = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var throttledFile_exports = {};
	__export(throttledFile_exports, {
	  ThrottledFile: () => ThrottledFile
	});
	throttledFile = __toCommonJS(throttledFile_exports);
	var import_fs = __toESM(require$$0$4);
	class ThrottledFile {
	  constructor(file) {
	    this._file = file;
	  }
	  setContent(text) {
	    this._text = text;
	    if (!this._timer)
	      this._timer = setTimeout(() => this.flush(), 250);
	  }
	  flush() {
	    if (this._timer) {
	      clearTimeout(this._timer);
	      this._timer = void 0;
	    }
	    if (this._text)
	      import_fs.default.writeFileSync(this._file, this._text);
	    this._text = void 0;
	  }
	}
	return throttledFile;
}

var contextRecorder;
var hasRequiredContextRecorder;

function requireContextRecorder () {
	if (hasRequiredContextRecorder) return contextRecorder;
	hasRequiredContextRecorder = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var contextRecorder_exports = {};
	__export(contextRecorder_exports, {
	  ContextRecorder: () => ContextRecorder,
	  generateFrameSelector: () => generateFrameSelector
	});
	contextRecorder = __toCommonJS(contextRecorder_exports);
	var import_events = require$$0$5;
	var import_recorderCollection = requireRecorderCollection();
	var recorderSource = __toESM(requirePollingRecorderSource());
	var import_utils = requireUtils();
	var import_timeoutRunner = requireTimeoutRunner();
	var import_browserContext = requireBrowserContext$1();
	var import_languages = requireLanguages();
	var import_frames = requireFrames();
	var import_page = requirePage$1();
	var import_throttledFile = requireThrottledFile();
	var import_language = requireLanguage();
	class ContextRecorder extends import_events.EventEmitter {
	  constructor(context, params, delegate) {
	    super();
	    this._pageAliases = /* @__PURE__ */ new Map();
	    this._lastPopupOrdinal = 0;
	    this._lastDialogOrdinal = -1;
	    this._lastDownloadOrdinal = -1;
	    this._throttledOutputFile = null;
	    this._orderedLanguages = [];
	    this._listeners = [];
	    this._context = context;
	    this._params = params;
	    this._delegate = delegate;
	    this._recorderSources = [];
	    const language = params.language || context.attribution.playwright.options.sdkLanguage;
	    this.setOutput(language, params.outputFile);
	    const languageGeneratorOptions = {
	      browserName: context._browser.options.name,
	      launchOptions: { headless: false, ...params.launchOptions, tracesDir: void 0 },
	      contextOptions: { ...params.contextOptions },
	      deviceName: params.device,
	      saveStorage: params.saveStorage
	    };
	    this._collection = new import_recorderCollection.RecorderCollection(this._pageAliases);
	    this._collection.on("change", (actions) => {
	      this._recorderSources = [];
	      for (const languageGenerator of this._orderedLanguages) {
	        const { header, footer, actionTexts, text } = (0, import_language.generateCode)(actions, languageGenerator, languageGeneratorOptions);
	        const source = {
	          isRecorded: true,
	          label: languageGenerator.name,
	          group: languageGenerator.groupName,
	          id: languageGenerator.id,
	          text,
	          header,
	          footer,
	          actions: actionTexts,
	          language: languageGenerator.highlighter,
	          highlight: []
	        };
	        source.revealLine = text.split("\n").length - 1;
	        this._recorderSources.push(source);
	        if (languageGenerator === this._orderedLanguages[0])
	          this._throttledOutputFile?.setContent(source.text);
	      }
	      this.emit(ContextRecorder.Events.Change, {
	        sources: this._recorderSources,
	        actions
	      });
	    });
	    context.on(import_browserContext.BrowserContext.Events.BeforeClose, () => {
	      this._throttledOutputFile?.flush();
	    });
	    this._listeners.push(import_utils.eventsHelper.addEventListener(process, "exit", () => {
	      this._throttledOutputFile?.flush();
	    }));
	    this.setEnabled(params.mode === "recording");
	  }
	  static {
	    this.Events = {
	      Change: "change"
	    };
	  }
	  setOutput(codegenId, outputFile) {
	    const languages = (0, import_languages.languageSet)();
	    const primaryLanguage = [...languages].find((l) => l.id === codegenId);
	    if (!primaryLanguage)
	      throw new Error(`
===============================
Unsupported language: '${codegenId}'
===============================
`);
	    languages.delete(primaryLanguage);
	    this._orderedLanguages = [primaryLanguage, ...languages];
	    this._throttledOutputFile = outputFile ? new import_throttledFile.ThrottledFile(outputFile) : null;
	    this._collection?.restart();
	  }
	  languageName(id) {
	    for (const lang of this._orderedLanguages) {
	      if (!id || lang.id === id)
	        return lang.highlighter;
	    }
	    return "javascript";
	  }
	  async install() {
	    this._context.on(import_browserContext.BrowserContext.Events.Page, (page) => this._onPage(page));
	    for (const page of this._context.pages())
	      this._onPage(page);
	    this._context.on(import_browserContext.BrowserContext.Events.Dialog, (dialog) => this._onDialog(dialog.page()));
	    await this._context.exposeBinding(
	      "__pw_recorderPerformAction",
	      false,
	      (source, action) => this._performAction(source.frame, action)
	    );
	    await this._context.exposeBinding(
	      "__pw_recorderRecordAction",
	      false,
	      (source, action) => this._recordAction(source.frame, action)
	    );
	    await this._context.extendInjectedScript(recorderSource.source);
	  }
	  setEnabled(enabled) {
	    this._collection.setEnabled(enabled);
	  }
	  dispose() {
	    import_utils.eventsHelper.removeEventListeners(this._listeners);
	  }
	  async _onPage(page) {
	    const frame = page.mainFrame();
	    page.on("close", () => {
	      this._collection.addRecordedAction({
	        frame: this._describeMainFrame(page),
	        action: {
	          name: "closePage",
	          signals: []
	        },
	        startTime: (0, import_utils.monotonicTime)()
	      });
	      this._pageAliases.delete(page);
	    });
	    frame.on(import_frames.Frame.Events.InternalNavigation, (event) => {
	      if (event.isPublic)
	        this._onFrameNavigated(frame, page);
	    });
	    page.on(import_page.Page.Events.Download, () => this._onDownload(page));
	    const suffix = this._pageAliases.size ? String(++this._lastPopupOrdinal) : "";
	    const pageAlias = "page" + suffix;
	    this._pageAliases.set(page, pageAlias);
	    if (page.opener()) {
	      this._onPopup(page.opener(), page);
	    } else {
	      this._collection.addRecordedAction({
	        frame: this._describeMainFrame(page),
	        action: {
	          name: "openPage",
	          url: page.mainFrame().url(),
	          signals: []
	        },
	        startTime: (0, import_utils.monotonicTime)()
	      });
	    }
	  }
	  clearScript() {
	    this._collection.restart();
	    if (this._params.mode === "recording") {
	      for (const page of this._context.pages())
	        this._onFrameNavigated(page.mainFrame(), page);
	    }
	  }
	  runTask(task) {
	  }
	  _describeMainFrame(page) {
	    return {
	      pageAlias: this._pageAliases.get(page),
	      framePath: []
	    };
	  }
	  async _describeFrame(frame) {
	    return {
	      pageAlias: this._pageAliases.get(frame._page),
	      framePath: await generateFrameSelector(frame)
	    };
	  }
	  testIdAttributeName() {
	    return this._params.testIdAttributeName || this._context.selectors().testIdAttributeName() || "data-testid";
	  }
	  async _createActionInContext(frame, action) {
	    const frameDescription = await this._describeFrame(frame);
	    const actionInContext = {
	      frame: frameDescription,
	      action,
	      description: void 0,
	      startTime: (0, import_utils.monotonicTime)()
	    };
	    await this._delegate.rewriteActionInContext?.(this._pageAliases, actionInContext);
	    return actionInContext;
	  }
	  async _performAction(frame, action) {
	    await this._collection.performAction(await this._createActionInContext(frame, action));
	  }
	  async _recordAction(frame, action) {
	    this._collection.addRecordedAction(await this._createActionInContext(frame, action));
	  }
	  _onFrameNavigated(frame, page) {
	    const pageAlias = this._pageAliases.get(page);
	    this._collection.signal(pageAlias, frame, { name: "navigation", url: frame.url() });
	  }
	  _onPopup(page, popup) {
	    const pageAlias = this._pageAliases.get(page);
	    const popupAlias = this._pageAliases.get(popup);
	    this._collection.signal(pageAlias, page.mainFrame(), { name: "popup", popupAlias });
	  }
	  _onDownload(page) {
	    const pageAlias = this._pageAliases.get(page);
	    ++this._lastDownloadOrdinal;
	    this._collection.signal(pageAlias, page.mainFrame(), { name: "download", downloadAlias: this._lastDownloadOrdinal ? String(this._lastDownloadOrdinal) : "" });
	  }
	  _onDialog(page) {
	    const pageAlias = this._pageAliases.get(page);
	    ++this._lastDialogOrdinal;
	    this._collection.signal(pageAlias, page.mainFrame(), { name: "dialog", dialogAlias: this._lastDialogOrdinal ? String(this._lastDialogOrdinal) : "" });
	  }
	}
	async function generateFrameSelector(frame) {
	  const selectorPromises = [];
	  while (frame) {
	    const parent = frame.parentFrame();
	    if (!parent)
	      break;
	    selectorPromises.push(generateFrameSelectorInParent(parent, frame));
	    frame = parent;
	  }
	  const result = await Promise.all(selectorPromises);
	  return result.reverse();
	}
	async function generateFrameSelectorInParent(parent, frame) {
	  const result = await (0, import_timeoutRunner.raceAgainstDeadline)(async () => {
	    try {
	      const frameElement = await frame.frameElement();
	      if (!frameElement || !parent)
	        return;
	      const utility = await parent._utilityContext();
	      const injected = await utility.injectedScript();
	      const selector = await injected.evaluate((injected2, element) => {
	        return injected2.generateSelectorSimple(element);
	      }, frameElement);
	      return selector;
	    } catch (e) {
	    }
	  }, (0, import_utils.monotonicTime)() + 2e3);
	  if (!result.timedOut && result.result)
	    return result.result;
	  if (frame.name())
	    return `iframe[name=${(0, import_utils.quoteCSSAttributeValue)(frame.name())}]`;
	  return `iframe[src=${(0, import_utils.quoteCSSAttributeValue)(frame.url())}]`;
	}
	return contextRecorder;
}

var locatorParser;
var hasRequiredLocatorParser;

function requireLocatorParser () {
	if (hasRequiredLocatorParser) return locatorParser;
	hasRequiredLocatorParser = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var locatorParser_exports = {};
	__export(locatorParser_exports, {
	  locatorOrSelectorAsSelector: () => locatorOrSelectorAsSelector,
	  unsafeLocatorOrSelectorAsSelector: () => unsafeLocatorOrSelectorAsSelector
	});
	locatorParser = __toCommonJS(locatorParser_exports);
	var import_locatorGenerators = requireLocatorGenerators();
	var import_selectorParser = requireSelectorParser();
	var import_stringUtils = requireStringUtils();
	function parseLocator(locator, testIdAttributeName) {
	  locator = locator.replace(/AriaRole\s*\.\s*([\w]+)/g, (_, group) => group.toLowerCase()).replace(/(get_by_role|getByRole)\s*\(\s*(?:["'`])([^'"`]+)['"`]/g, (_, group1, group2) => `${group1}(${group2.toLowerCase()}`);
	  const params = [];
	  let template = "";
	  for (let i = 0; i < locator.length; ++i) {
	    const quote = locator[i];
	    if (quote !== '"' && quote !== "'" && quote !== "`" && quote !== "/") {
	      template += quote;
	      continue;
	    }
	    const isRegexEscaping = locator[i - 1] === "r" || locator[i] === "/";
	    ++i;
	    let text = "";
	    while (i < locator.length) {
	      if (locator[i] === "\\") {
	        if (isRegexEscaping) {
	          if (locator[i + 1] !== quote)
	            text += locator[i];
	          ++i;
	          text += locator[i];
	        } else {
	          ++i;
	          if (locator[i] === "n")
	            text += "\n";
	          else if (locator[i] === "r")
	            text += "\r";
	          else if (locator[i] === "t")
	            text += "	";
	          else
	            text += locator[i];
	        }
	        ++i;
	        continue;
	      }
	      if (locator[i] !== quote) {
	        text += locator[i++];
	        continue;
	      }
	      break;
	    }
	    params.push({ quote, text });
	    template += (quote === "/" ? "r" : "") + "$" + params.length;
	  }
	  template = template.toLowerCase().replace(/get_by_alt_text/g, "getbyalttext").replace(/get_by_test_id/g, "getbytestid").replace(/get_by_([\w]+)/g, "getby$1").replace(/has_not_text/g, "hasnottext").replace(/has_text/g, "hastext").replace(/has_not/g, "hasnot").replace(/frame_locator/g, "framelocator").replace(/content_frame/g, "contentframe").replace(/[{}\s]/g, "").replace(/new\(\)/g, "").replace(/new[\w]+\.[\w]+options\(\)/g, "").replace(/\.set/g, ",set").replace(/\.or_\(/g, "or(").replace(/\.and_\(/g, "and(").replace(/:/g, "=").replace(/,re\.ignorecase/g, "i").replace(/,pattern.case_insensitive/g, "i").replace(/,regexoptions.ignorecase/g, "i").replace(/re.compile\(([^)]+)\)/g, "$1").replace(/pattern.compile\(([^)]+)\)/g, "r$1").replace(/newregex\(([^)]+)\)/g, "r$1").replace(/string=/g, "=").replace(/regex=/g, "=").replace(/,,/g, ",").replace(/,\)/g, ")");
	  const preferredQuote = params.map((p) => p.quote).filter((quote) => "'\"`".includes(quote))[0];
	  return { selector: transform(template, params, testIdAttributeName), preferredQuote };
	}
	function countParams(template) {
	  return [...template.matchAll(/\$\d+/g)].length;
	}
	function shiftParams(template, sub) {
	  return template.replace(/\$(\d+)/g, (_, ordinal) => `$${ordinal - sub}`);
	}
	function transform(template, params, testIdAttributeName) {
	  while (true) {
	    const hasMatch = template.match(/filter\(,?(has=|hasnot=|sethas\(|sethasnot\()/);
	    if (!hasMatch)
	      break;
	    const start = hasMatch.index + hasMatch[0].length;
	    let balance = 0;
	    let end = start;
	    for (; end < template.length; end++) {
	      if (template[end] === "(")
	        balance++;
	      else if (template[end] === ")")
	        balance--;
	      if (balance < 0)
	        break;
	    }
	    let prefix = template.substring(0, start);
	    let extraSymbol = 0;
	    if (["sethas(", "sethasnot("].includes(hasMatch[1])) {
	      extraSymbol = 1;
	      prefix = prefix.replace(/sethas\($/, "has=").replace(/sethasnot\($/, "hasnot=");
	    }
	    const paramsCountBeforeHas = countParams(template.substring(0, start));
	    const hasTemplate = shiftParams(template.substring(start, end), paramsCountBeforeHas);
	    const paramsCountInHas = countParams(hasTemplate);
	    const hasParams = params.slice(paramsCountBeforeHas, paramsCountBeforeHas + paramsCountInHas);
	    const hasSelector = JSON.stringify(transform(hasTemplate, hasParams, testIdAttributeName));
	    template = prefix.replace(/=$/, "2=") + `$${paramsCountBeforeHas + 1}` + shiftParams(template.substring(end + extraSymbol), paramsCountInHas - 1);
	    const paramsBeforeHas = params.slice(0, paramsCountBeforeHas);
	    const paramsAfterHas = params.slice(paramsCountBeforeHas + paramsCountInHas);
	    params = paramsBeforeHas.concat([{ quote: '"', text: hasSelector }]).concat(paramsAfterHas);
	  }
	  template = template.replace(/\,set([\w]+)\(([^)]+)\)/g, (_, group1, group2) => "," + group1.toLowerCase() + "=" + group2.toLowerCase()).replace(/framelocator\(([^)]+)\)/g, "$1.internal:control=enter-frame").replace(/contentframe(\(\))?/g, "internal:control=enter-frame").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+),hasnottext=([^),]+)\)/g, "locator($1).internal:has-not-text=$2").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+)\)/g, "$1").replace(/getbyrole\(([^)]+)\)/g, "internal:role=$1").replace(/getbytext\(([^)]+)\)/g, "internal:text=$1").replace(/getbylabel\(([^)]+)\)/g, "internal:label=$1").replace(/getbytestid\(([^)]+)\)/g, `internal:testid=[${testIdAttributeName}=$1]`).replace(/getby(placeholder|alt|title)(?:text)?\(([^)]+)\)/g, "internal:attr=[$1=$2]").replace(/first(\(\))?/g, "nth=0").replace(/last(\(\))?/g, "nth=-1").replace(/nth\(([^)]+)\)/g, "nth=$1").replace(/filter\(,?visible=true\)/g, "visible=true").replace(/filter\(,?visible=false\)/g, "visible=false").replace(/filter\(,?hastext=([^)]+)\)/g, "internal:has-text=$1").replace(/filter\(,?hasnottext=([^)]+)\)/g, "internal:has-not-text=$1").replace(/filter\(,?has2=([^)]+)\)/g, "internal:has=$1").replace(/filter\(,?hasnot2=([^)]+)\)/g, "internal:has-not=$1").replace(/,exact=false/g, "").replace(/,exact=true/g, "s").replace(/,includehidden=/g, ",include-hidden=").replace(/\,/g, "][");
	  const parts = template.split(".");
	  for (let index = 0; index < parts.length - 1; index++) {
	    if (parts[index] === "internal:control=enter-frame" && parts[index + 1].startsWith("nth=")) {
	      const [nth] = parts.splice(index, 1);
	      parts.splice(index + 1, 0, nth);
	    }
	  }
	  return parts.map((t) => {
	    if (!t.startsWith("internal:") || t === "internal:control")
	      return t.replace(/\$(\d+)/g, (_, ordinal) => {
	        const param = params[+ordinal - 1];
	        return param.text;
	      });
	    t = t.includes("[") ? t.replace(/\]/, "") + "]" : t;
	    t = t.replace(/(?:r)\$(\d+)(i)?/g, (_, ordinal, suffix) => {
	      const param = params[+ordinal - 1];
	      if (t.startsWith("internal:attr") || t.startsWith("internal:testid") || t.startsWith("internal:role"))
	        return (0, import_stringUtils.escapeForAttributeSelector)(new RegExp(param.text), false) + (suffix || "");
	      return (0, import_stringUtils.escapeForTextSelector)(new RegExp(param.text, suffix), false);
	    }).replace(/\$(\d+)(i|s)?/g, (_, ordinal, suffix) => {
	      const param = params[+ordinal - 1];
	      if (t.startsWith("internal:has=") || t.startsWith("internal:has-not="))
	        return param.text;
	      if (t.startsWith("internal:testid"))
	        return (0, import_stringUtils.escapeForAttributeSelector)(param.text, true);
	      if (t.startsWith("internal:attr") || t.startsWith("internal:role"))
	        return (0, import_stringUtils.escapeForAttributeSelector)(param.text, suffix === "s");
	      return (0, import_stringUtils.escapeForTextSelector)(param.text, suffix === "s");
	    });
	    return t;
	  }).join(" >> ");
	}
	function locatorOrSelectorAsSelector(language, locator, testIdAttributeName) {
	  try {
	    return unsafeLocatorOrSelectorAsSelector(language, locator, testIdAttributeName);
	  } catch (e) {
	    return "";
	  }
	}
	function unsafeLocatorOrSelectorAsSelector(language, locator, testIdAttributeName) {
	  try {
	    (0, import_selectorParser.parseSelector)(locator);
	    return locator;
	  } catch (e) {
	  }
	  const { selector, preferredQuote } = parseLocator(locator, testIdAttributeName);
	  const locators = (0, import_locatorGenerators.asLocators)(language, selector, void 0, void 0, preferredQuote);
	  const digest = digestForComparison(language, locator);
	  if (locators.some((candidate) => digestForComparison(language, candidate) === digest))
	    return selector;
	  return "";
	}
	function digestForComparison(language, locator) {
	  locator = locator.replace(/\s/g, "");
	  if (language === "javascript")
	    locator = locator.replace(/\\?["`]/g, "'").replace(/,{}/g, "");
	  return locator;
	}
	return locatorParser;
}

var recorder;
var hasRequiredRecorder;

function requireRecorder () {
	if (hasRequiredRecorder) return recorder;
	hasRequiredRecorder = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var recorder_exports = {};
	__export(recorder_exports, {
	  Recorder: () => Recorder
	});
	recorder = __toCommonJS(recorder_exports);
	var import_fs = __toESM(require$$0$4);
	var consoleApiSource = __toESM(requireConsoleApiSource());
	var import_utils = requireUtils();
	var import_browserContext = requireBrowserContext$1();
	var import_debugger = require_debugger();
	var import_contextRecorder = requireContextRecorder();
	var import_recorderUtils = requireRecorderUtils();
	var import_locatorParser = requireLocatorParser();
	var import_selectorParser = requireSelectorParser();
	const recorderSymbol = Symbol("recorderSymbol");
	class Recorder {
	  constructor(context, params) {
	    this._highlightedElement = {};
	    this._overlayState = { offsetX: 0 };
	    this._recorderApp = null;
	    this._currentCallsMetadata = /* @__PURE__ */ new Map();
	    this._recorderSources = [];
	    this._userSources = /* @__PURE__ */ new Map();
	    this._omitCallTracking = false;
	    this._mode = params.mode || "none";
	    this.handleSIGINT = params.handleSIGINT;
	    this._contextRecorder = new import_contextRecorder.ContextRecorder(context, params, {});
	    this._context = context;
	    this._omitCallTracking = !!params.omitCallTracking;
	    this._debugger = context.debugger();
	    context.instrumentation.addListener(this, context);
	    this._currentLanguage = this._contextRecorder.languageName();
	    if ((0, import_utils.isUnderTest)()) {
	      this._overlayState.offsetX = 200;
	    }
	  }
	  static async showInspector(context, params, recorderAppFactory) {
	    if ((0, import_utils.isUnderTest)())
	      params.language = process.env.TEST_INSPECTOR_LANGUAGE;
	    return await Recorder.show(context, recorderAppFactory, params);
	  }
	  static showInspectorNoReply(context, recorderAppFactory) {
	    Recorder.showInspector(context, {}, recorderAppFactory).catch(() => {
	    });
	  }
	  static show(context, recorderAppFactory, params) {
	    let recorderPromise = context[recorderSymbol];
	    if (!recorderPromise) {
	      recorderPromise = Recorder._create(context, recorderAppFactory, params);
	      context[recorderSymbol] = recorderPromise;
	    }
	    return recorderPromise;
	  }
	  static async _create(context, recorderAppFactory, params = {}) {
	    const recorder = new Recorder(context, params);
	    const recorderApp = await recorderAppFactory(recorder);
	    await recorder._install(recorderApp);
	    return recorder;
	  }
	  async _install(recorderApp) {
	    this._recorderApp = recorderApp;
	    recorderApp.once("close", () => {
	      this._debugger.resume(false);
	      this._recorderApp = null;
	    });
	    recorderApp.on("event", (data) => {
	      if (data.event === "setMode") {
	        this.setMode(data.params.mode);
	        return;
	      }
	      if (data.event === "highlightRequested") {
	        if (data.params.selector)
	          this.setHighlightedSelector(this._currentLanguage, data.params.selector);
	        if (data.params.ariaTemplate)
	          this.setHighlightedAriaTemplate(data.params.ariaTemplate);
	        return;
	      }
	      if (data.event === "step") {
	        this._debugger.resume(true);
	        return;
	      }
	      if (data.event === "fileChanged") {
	        this._currentLanguage = this._contextRecorder.languageName(data.params.file);
	        this._refreshOverlay();
	        return;
	      }
	      if (data.event === "resume") {
	        this._debugger.resume(false);
	        return;
	      }
	      if (data.event === "pause") {
	        this._debugger.pauseOnNextStatement();
	        return;
	      }
	      if (data.event === "clear") {
	        this._contextRecorder.clearScript();
	        return;
	      }
	      if (data.event === "runTask") {
	        this._contextRecorder.runTask(data.params.task);
	        return;
	      }
	    });
	    await Promise.all([
	      recorderApp.setMode(this._mode),
	      recorderApp.setPaused(this._debugger.isPaused()),
	      this._pushAllSources()
	    ]);
	    this._context.once(import_browserContext.BrowserContext.Events.Close, () => {
	      this._contextRecorder.dispose();
	      this._context.instrumentation.removeListener(this);
	      this._recorderApp?.close().catch(() => {
	      });
	    });
	    this._contextRecorder.on(import_contextRecorder.ContextRecorder.Events.Change, (data) => {
	      this._recorderSources = data.sources;
	      recorderApp.setActions(data.actions, data.sources);
	      recorderApp.setRunningFile(void 0);
	      this._pushAllSources();
	    });
	    await this._context.exposeBinding("__pw_recorderState", false, async (source) => {
	      let actionSelector;
	      let actionPoint;
	      const hasActiveScreenshotCommand = [...this._currentCallsMetadata.keys()].some(isScreenshotCommand);
	      if (!hasActiveScreenshotCommand) {
	        actionSelector = await this._scopeHighlightedSelectorToFrame(source.frame);
	        for (const [metadata, sdkObject] of this._currentCallsMetadata) {
	          if (source.page === sdkObject.attribution.page) {
	            actionPoint = metadata.point || actionPoint;
	            actionSelector = actionSelector || metadata.params.selector;
	          }
	        }
	      }
	      const uiState = {
	        mode: this._mode,
	        actionPoint,
	        actionSelector,
	        ariaTemplate: this._highlightedElement.ariaTemplate,
	        language: this._currentLanguage,
	        testIdAttributeName: this._contextRecorder.testIdAttributeName(),
	        overlay: this._overlayState
	      };
	      return uiState;
	    });
	    await this._context.exposeBinding("__pw_recorderElementPicked", false, async ({ frame }, elementInfo) => {
	      const selectorChain = await (0, import_contextRecorder.generateFrameSelector)(frame);
	      await this._recorderApp?.elementPicked({ selector: (0, import_recorderUtils.buildFullSelector)(selectorChain, elementInfo.selector), ariaSnapshot: elementInfo.ariaSnapshot }, true);
	    });
	    await this._context.exposeBinding("__pw_recorderSetMode", false, async ({ frame }, mode) => {
	      if (frame.parentFrame())
	        return;
	      this.setMode(mode);
	    });
	    await this._context.exposeBinding("__pw_recorderSetOverlayState", false, async ({ frame }, state) => {
	      if (frame.parentFrame())
	        return;
	      this._overlayState = state;
	    });
	    await this._context.exposeBinding("__pw_resume", false, () => {
	      this._debugger.resume(false);
	    });
	    await this._context.extendInjectedScript(consoleApiSource.source);
	    await this._contextRecorder.install();
	    if (this._debugger.isPaused())
	      this._pausedStateChanged();
	    this._debugger.on(import_debugger.Debugger.Events.PausedStateChanged, () => this._pausedStateChanged());
	    this._context.recorderAppForTest = this._recorderApp;
	  }
	  _pausedStateChanged() {
	    for (const { metadata, sdkObject } of this._debugger.pausedDetails()) {
	      if (!this._currentCallsMetadata.has(metadata))
	        this.onBeforeCall(sdkObject, metadata);
	    }
	    this._recorderApp?.setPaused(this._debugger.isPaused());
	    this._updateUserSources();
	    this.updateCallLog([...this._currentCallsMetadata.keys()]);
	  }
	  setMode(mode) {
	    if (this._mode === mode)
	      return;
	    this._highlightedElement = {};
	    this._mode = mode;
	    this._recorderApp?.setMode(this._mode);
	    this._contextRecorder.setEnabled(this._isRecording());
	    this._debugger.setMuted(this._isRecording());
	    if (this._mode !== "none" && this._mode !== "standby" && this._context.pages().length === 1)
	      this._context.pages()[0].bringToFront().catch(() => {
	      });
	    this._refreshOverlay();
	  }
	  resume() {
	    this._debugger.resume(false);
	  }
	  mode() {
	    return this._mode;
	  }
	  setHighlightedSelector(language, selector) {
	    this._highlightedElement = { selector: (0, import_locatorParser.locatorOrSelectorAsSelector)(language, selector, this._context.selectors().testIdAttributeName()) };
	    this._refreshOverlay();
	  }
	  setHighlightedAriaTemplate(ariaTemplate) {
	    this._highlightedElement = { ariaTemplate };
	    this._refreshOverlay();
	  }
	  hideHighlightedSelector() {
	    this._highlightedElement = {};
	    this._refreshOverlay();
	  }
	  async _scopeHighlightedSelectorToFrame(frame) {
	    if (!this._highlightedElement.selector)
	      return;
	    try {
	      const mainFrame = frame._page.mainFrame();
	      const resolved = await mainFrame.selectors.resolveFrameForSelector(this._highlightedElement.selector);
	      if (!resolved)
	        return "";
	      if (resolved?.frame === mainFrame)
	        return (0, import_selectorParser.stringifySelector)(resolved.info.parsed);
	      if (resolved?.frame === frame)
	        return (0, import_selectorParser.stringifySelector)(resolved.info.parsed);
	      return "";
	    } catch {
	      return "";
	    }
	  }
	  setOutput(codegenId, outputFile) {
	    this._contextRecorder.setOutput(codegenId, outputFile);
	  }
	  _refreshOverlay() {
	    for (const page of this._context.pages()) {
	      for (const frame of page.frames())
	        frame.evaluateExpression("window.__pw_refreshOverlay()").catch(() => {
	        });
	    }
	  }
	  async onBeforeCall(sdkObject, metadata) {
	    if (this._omitCallTracking || this._isRecording())
	      return;
	    this._currentCallsMetadata.set(metadata, sdkObject);
	    this._updateUserSources();
	    this.updateCallLog([metadata]);
	    if (isScreenshotCommand(metadata))
	      this.hideHighlightedSelector();
	    else if (metadata.params && metadata.params.selector)
	      this._highlightedElement = { selector: metadata.params.selector };
	  }
	  async onAfterCall(sdkObject, metadata) {
	    if (this._omitCallTracking || this._isRecording())
	      return;
	    if (!metadata.error)
	      this._currentCallsMetadata.delete(metadata);
	    this._updateUserSources();
	    this.updateCallLog([metadata]);
	  }
	  _updateUserSources() {
	    for (const source of this._userSources.values()) {
	      source.highlight = [];
	      source.revealLine = void 0;
	    }
	    let fileToSelect = void 0;
	    for (const metadata of this._currentCallsMetadata.keys()) {
	      if (!metadata.location)
	        continue;
	      const { file, line } = metadata.location;
	      let source = this._userSources.get(file);
	      if (!source) {
	        source = { isRecorded: false, label: file, id: file, text: this._readSource(file), highlight: [], language: languageForFile(file) };
	        this._userSources.set(file, source);
	      }
	      if (line) {
	        const paused = this._debugger.isPaused(metadata);
	        source.highlight.push({ line, type: metadata.error ? "error" : paused ? "paused" : "running" });
	        source.revealLine = line;
	        fileToSelect = source.id;
	      }
	    }
	    this._pushAllSources();
	    if (fileToSelect)
	      this._recorderApp?.setRunningFile(fileToSelect);
	  }
	  _pushAllSources() {
	    const primaryPage = this._context.pages()[0];
	    this._recorderApp?.setSources([...this._recorderSources, ...this._userSources.values()], primaryPage?.mainFrame().url());
	  }
	  async onBeforeInputAction(sdkObject, metadata) {
	  }
	  async onCallLog(sdkObject, metadata, logName, message) {
	    this.updateCallLog([metadata]);
	  }
	  updateCallLog(metadatas) {
	    if (this._isRecording())
	      return;
	    const logs = [];
	    for (const metadata of metadatas) {
	      if (!metadata.method || metadata.internal)
	        continue;
	      let status = "done";
	      if (this._currentCallsMetadata.has(metadata))
	        status = "in-progress";
	      if (this._debugger.isPaused(metadata))
	        status = "paused";
	      logs.push((0, import_recorderUtils.metadataToCallLog)(metadata, status));
	    }
	    this._recorderApp?.updateCallLogs(logs);
	  }
	  _isRecording() {
	    return ["recording", "assertingText", "assertingVisibility", "assertingValue", "assertingSnapshot"].includes(this._mode);
	  }
	  _readSource(fileName) {
	    try {
	      return import_fs.default.readFileSync(fileName, "utf-8");
	    } catch (e) {
	      return "// No source available";
	    }
	  }
	}
	function isScreenshotCommand(metadata) {
	  return metadata.method.toLowerCase().includes("screenshot");
	}
	function languageForFile(file) {
	  if (file.endsWith(".py"))
	    return "python";
	  if (file.endsWith(".java"))
	    return "java";
	  if (file.endsWith(".cs"))
	    return "csharp";
	  return "javascript";
	}
	return recorder;
}

var launchApp_1;
var hasRequiredLaunchApp;

function requireLaunchApp () {
	if (hasRequiredLaunchApp) return launchApp_1;
	hasRequiredLaunchApp = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var launchApp_exports = {};
	__export(launchApp_exports, {
	  launchApp: () => launchApp,
	  syncLocalStorageWithSettings: () => syncLocalStorageWithSettings
	});
	launchApp_1 = __toCommonJS(launchApp_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_utils = requireUtils();
	var import_instrumentation = requireInstrumentation();
	var import_registry = requireRegistry();
	var import_registry2 = requireRegistry();
	async function launchApp(browserType, options) {
	  const args = [...options.persistentContextOptions?.args ?? []];
	  let channel = options.persistentContextOptions?.channel;
	  if (browserType.name() === "chromium") {
	    args.push(
	      "--app=data:text/html,",
	      `--window-size=${options.windowSize.width},${options.windowSize.height}`,
	      ...options.windowPosition ? [`--window-position=${options.windowPosition.x},${options.windowPosition.y}`] : [],
	      "--test-type="
	    );
	    if (!channel && !options.persistentContextOptions?.executablePath)
	      channel = (0, import_registry.findChromiumChannel)(options.sdkLanguage);
	  }
	  const context = await browserType.launchPersistentContext((0, import_instrumentation.serverSideCallMetadata)(), "", {
	    ignoreDefaultArgs: ["--enable-automation"],
	    ...options?.persistentContextOptions,
	    channel,
	    noDefaultViewport: options.persistentContextOptions?.noDefaultViewport ?? true,
	    acceptDownloads: options?.persistentContextOptions?.acceptDownloads ?? ((0, import_utils.isUnderTest)() ? "accept" : "internal-browser-default"),
	    colorScheme: options?.persistentContextOptions?.colorScheme ?? "no-override",
	    args
	  });
	  const [page] = context.pages();
	  if (browserType.name() === "chromium" && process.platform === "darwin") {
	    context.on("page", async (newPage) => {
	      if (newPage.mainFrame().url() === "chrome://new-tab-page/") {
	        await page.bringToFront();
	        await newPage.close((0, import_instrumentation.serverSideCallMetadata)());
	      }
	    });
	  }
	  if (browserType.name() === "chromium")
	    await installAppIcon(page);
	  return { context, page };
	}
	async function installAppIcon(page) {
	  const icon = await import_fs.default.promises.readFile(require.resolve("./chromium/appIcon.png"));
	  const crPage = page._delegate;
	  await crPage._mainFrameSession._client.send("Browser.setDockTile", {
	    image: icon.toString("base64")
	  });
	}
	async function syncLocalStorageWithSettings(page, appName) {
	  if ((0, import_utils.isUnderTest)())
	    return;
	  const settingsFile = import_path.default.join(import_registry2.registryDirectory, ".settings", `${appName}.json`);
	  await page.exposeBinding("_saveSerializedSettings", false, (_, settings2) => {
	    import_fs.default.mkdirSync(import_path.default.dirname(settingsFile), { recursive: true });
	    import_fs.default.writeFileSync(settingsFile, settings2);
	  });
	  const settings = await import_fs.default.promises.readFile(settingsFile, "utf-8").catch(() => "{}");
	  await page.addInitScript(
	    `(${String((settings2) => {
	      if (location && location.protocol === "data:")
	        return;
	      if (window.top !== window)
	        return;
	      Object.entries(settings2).map(([k, v]) => localStorage[k] = v);
	      window.saveSettings = () => {
	        window._saveSerializedSettings(JSON.stringify({ ...localStorage }));
	      };
	    })})(${settings});
  `
	  );
	}
	return launchApp_1;
}

var pipeTransport$1;
var hasRequiredPipeTransport$1;

function requirePipeTransport$1 () {
	if (hasRequiredPipeTransport$1) return pipeTransport$1;
	hasRequiredPipeTransport$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var pipeTransport_exports = {};
	__export(pipeTransport_exports, {
	  PipeTransport: () => PipeTransport
	});
	pipeTransport$1 = __toCommonJS(pipeTransport_exports);
	var import_task = requireTask();
	class PipeTransport {
	  constructor(pipeWrite, pipeRead, closeable, endian = "le") {
	    this._data = Buffer.from([]);
	    this._waitForNextTask = (0, import_task.makeWaitForNextTask)();
	    this._closed = false;
	    this._bytesLeft = 0;
	    this._pipeWrite = pipeWrite;
	    this._endian = endian;
	    this._closeableStream = closeable;
	    pipeRead.on("data", (buffer) => this._dispatch(buffer));
	    pipeRead.on("close", () => {
	      this._closed = true;
	      if (this.onclose)
	        this.onclose();
	    });
	    this.onmessage = void 0;
	    this.onclose = void 0;
	  }
	  send(message) {
	    if (this._closed)
	      throw new Error("Pipe has been closed");
	    const data = Buffer.from(message, "utf-8");
	    const dataLength = Buffer.alloc(4);
	    if (this._endian === "be")
	      dataLength.writeUInt32BE(data.length, 0);
	    else
	      dataLength.writeUInt32LE(data.length, 0);
	    this._pipeWrite.write(dataLength);
	    this._pipeWrite.write(data);
	  }
	  close() {
	    this._closeableStream.close();
	  }
	  _dispatch(buffer) {
	    this._data = Buffer.concat([this._data, buffer]);
	    while (true) {
	      if (!this._bytesLeft && this._data.length < 4) {
	        break;
	      }
	      if (!this._bytesLeft) {
	        this._bytesLeft = this._endian === "be" ? this._data.readUInt32BE(0) : this._data.readUInt32LE(0);
	        this._data = this._data.slice(4);
	      }
	      if (!this._bytesLeft || this._data.length < this._bytesLeft) {
	        break;
	      }
	      const message = this._data.slice(0, this._bytesLeft);
	      this._data = this._data.slice(this._bytesLeft);
	      this._bytesLeft = 0;
	      this._waitForNextTask(() => {
	        if (this.onmessage)
	          this.onmessage(message.toString("utf-8"));
	      });
	    }
	  }
	}
	return pipeTransport$1;
}

var chromiumSwitches_1;
var hasRequiredChromiumSwitches;

function requireChromiumSwitches () {
	if (hasRequiredChromiumSwitches) return chromiumSwitches_1;
	hasRequiredChromiumSwitches = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var chromiumSwitches_exports = {};
	__export(chromiumSwitches_exports, {
	  chromiumSwitches: () => chromiumSwitches
	});
	chromiumSwitches_1 = __toCommonJS(chromiumSwitches_exports);
	const disabledFeatures = [
	  // See https://github.com/microsoft/playwright/pull/10380
	  "AcceptCHFrame",
	  // See https://github.com/microsoft/playwright/pull/10679
	  "AutoExpandDetailsElement",
	  // See https://github.com/microsoft/playwright/issues/14047
	  "AvoidUnnecessaryBeforeUnloadCheckSync",
	  // See https://github.com/microsoft/playwright/pull/12992
	  "CertificateTransparencyComponentUpdater",
	  // This makes Page.frameScheduledNavigation arrive much later after a click,
	  // making our navigation auto-wait after click not working.
	  // Can be removed once we deperecate noWaitAfter.
	  // See https://github.com/microsoft/playwright/pull/34372.
	  "DeferRendererTasksAfterInput",
	  "DestroyProfileOnBrowserClose",
	  // See https://github.com/microsoft/playwright/pull/13854
	  "DialMediaRouteProvider",
	  // Chromium is disabling manifest version 2. Allow testing it as long as Chromium can actually run it.
	  // Disabled in https://chromium-review.googlesource.com/c/chromium/src/+/6265903.
	  "ExtensionManifestV2Disabled",
	  "GlobalMediaControls",
	  // See https://github.com/microsoft/playwright/pull/27605
	  "HttpsUpgrades",
	  "ImprovedCookieControls",
	  "LazyFrameLoading",
	  // Hides the Lens feature in the URL address bar. Its not working in unofficial builds.
	  "LensOverlay",
	  // See https://github.com/microsoft/playwright/pull/8162
	  "MediaRouter",
	  // See https://github.com/microsoft/playwright/issues/28023
	  "PaintHolding",
	  // See https://github.com/microsoft/playwright/issues/32230
	  "ThirdPartyStoragePartitioning",
	  // See https://github.com/microsoft/playwright/issues/16126
	  "Translate"
	];
	const chromiumSwitches = [
	  "--disable-field-trial-config",
	  // https://source.chromium.org/chromium/chromium/src/+/main:testing/variations/README.md
	  "--disable-background-networking",
	  "--disable-background-timer-throttling",
	  "--disable-backgrounding-occluded-windows",
	  "--disable-back-forward-cache",
	  // Avoids surprises like main request not being intercepted during page.goBack().
	  "--disable-breakpad",
	  "--disable-client-side-phishing-detection",
	  "--disable-component-extensions-with-background-pages",
	  "--disable-component-update",
	  // Avoids unneeded network activity after startup.
	  "--no-default-browser-check",
	  "--disable-default-apps",
	  "--disable-dev-shm-usage",
	  "--disable-extensions",
	  "--disable-features=" + disabledFeatures.join(","),
	  "--allow-pre-commit-input",
	  "--disable-hang-monitor",
	  "--disable-ipc-flooding-protection",
	  "--disable-popup-blocking",
	  "--disable-prompt-on-repost",
	  "--disable-renderer-backgrounding",
	  "--force-color-profile=srgb",
	  "--metrics-recording-only",
	  "--no-first-run",
	  "--enable-automation",
	  "--password-store=basic",
	  "--use-mock-keychain",
	  // See https://chromium-review.googlesource.com/c/chromium/src/+/2436773
	  "--no-service-autorun",
	  "--export-tagged-pdf",
	  // https://chromium-review.googlesource.com/c/chromium/src/+/4853540
	  "--disable-search-engine-choice-screen",
	  // https://issues.chromium.org/41491762
	  "--unsafely-disable-devtools-self-xss-warnings"
	];
	return chromiumSwitches_1;
}

var download$1;
var hasRequiredDownload$1;

function requireDownload$1 () {
	if (hasRequiredDownload$1) return download$1;
	hasRequiredDownload$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var download_exports = {};
	__export(download_exports, {
	  Download: () => Download
	});
	download$1 = __toCommonJS(download_exports);
	var import_path = __toESM(require$$1$1);
	var import_page = requirePage$1();
	var import_utils = requireUtils();
	var import_artifact = requireArtifact$1();
	class Download {
	  constructor(page, downloadsPath, uuid, url, suggestedFilename) {
	    const unaccessibleErrorMessage = page._browserContext._options.acceptDownloads === "deny" ? "Pass { acceptDownloads: true } when you are creating your browser context." : void 0;
	    this.artifact = new import_artifact.Artifact(page, import_path.default.join(downloadsPath, uuid), unaccessibleErrorMessage, () => {
	      return this._page._browserContext.cancelDownload(uuid);
	    });
	    this._page = page;
	    this.url = url;
	    this._suggestedFilename = suggestedFilename;
	    page._browserContext._downloads.add(this);
	    if (suggestedFilename !== void 0)
	      this._fireDownloadEvent();
	  }
	  page() {
	    return this._page;
	  }
	  _filenameSuggested(suggestedFilename) {
	    (0, import_utils.assert)(this._suggestedFilename === void 0);
	    this._suggestedFilename = suggestedFilename;
	    this._fireDownloadEvent();
	  }
	  suggestedFilename() {
	    return this._suggestedFilename;
	  }
	  _fireDownloadEvent() {
	    this._page.instrumentation.onDownload(this._page, this);
	    this._page.emit(import_page.Page.Events.Download, this);
	  }
	}
	return download$1;
}

var socksClientCertificatesInterceptor;
var hasRequiredSocksClientCertificatesInterceptor;

function requireSocksClientCertificatesInterceptor () {
	if (hasRequiredSocksClientCertificatesInterceptor) return socksClientCertificatesInterceptor;
	hasRequiredSocksClientCertificatesInterceptor = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var socksClientCertificatesInterceptor_exports = {};
	__export(socksClientCertificatesInterceptor_exports, {
	  ClientCertificatesProxy: () => ClientCertificatesProxy,
	  getMatchingTLSOptionsForOrigin: () => getMatchingTLSOptionsForOrigin,
	  rewriteOpenSSLErrorIfNeeded: () => rewriteOpenSSLErrorIfNeeded
	});
	socksClientCertificatesInterceptor = __toCommonJS(socksClientCertificatesInterceptor_exports);
	var import_events = require$$0$5;
	var import_http2 = __toESM(require$$1$2);
	var import_net = __toESM(require$$8);
	var import_stream = __toESM(require$$12);
	var import_tls = __toESM(require$$9);
	var import_socksProxy = requireSocksProxy();
	var import_utils = requireUtils();
	var import_browserContext = requireBrowserContext$1();
	var import_network = requireNetwork$2();
	var import_debugLogger = requireDebugLogger();
	var import_happyEyeballs = requireHappyEyeballs();
	let dummyServerTlsOptions = void 0;
	function loadDummyServerCertsIfNeeded() {
	  if (dummyServerTlsOptions)
	    return;
	  const { cert, key } = (0, import_utils.generateSelfSignedCertificate)();
	  dummyServerTlsOptions = { key, cert };
	}
	class ALPNCache {
	  constructor() {
	    this._cache = /* @__PURE__ */ new Map();
	  }
	  get(host, port, success) {
	    const cacheKey = `${host}:${port}`;
	    {
	      const result2 = this._cache.get(cacheKey);
	      if (result2) {
	        result2.then(success);
	        return;
	      }
	    }
	    const result = new import_utils.ManualPromise();
	    this._cache.set(cacheKey, result);
	    result.then(success);
	    (0, import_happyEyeballs.createTLSSocket)({
	      host,
	      port,
	      servername: import_net.default.isIP(host) ? void 0 : host,
	      ALPNProtocols: ["h2", "http/1.1"],
	      rejectUnauthorized: false
	    }).then((socket) => {
	      result.resolve(socket.alpnProtocol || "http/1.1");
	      socket.end();
	    }).catch((error) => {
	      import_debugLogger.debugLogger.log("client-certificates", `ALPN error: ${error.message}`);
	      result.resolve("http/1.1");
	    });
	  }
	}
	class SocksProxyConnection {
	  constructor(socksProxy, uid, host, port) {
	    this.firstPackageReceived = false;
	    this._closed = false;
	    this.socksProxy = socksProxy;
	    this.uid = uid;
	    this.host = host;
	    this.port = port;
	    this._targetCloseEventListener = () => {
	      this.socksProxy._socksProxy.sendSocketEnd({ uid: this.uid });
	      this.internalTLS?.destroy();
	      this._dummyServer?.close();
	    };
	  }
	  async connect() {
	    if (this.socksProxy.proxyAgentFromOptions)
	      this.target = await this.socksProxy.proxyAgentFromOptions.callback(new import_events.EventEmitter(), { host: rewriteToLocalhostIfNeeded(this.host), port: this.port, secureEndpoint: false });
	    else
	      this.target = await (0, import_happyEyeballs.createSocket)(rewriteToLocalhostIfNeeded(this.host), this.port);
	    this.target.once("close", this._targetCloseEventListener);
	    this.target.once("error", (error) => this.socksProxy._socksProxy.sendSocketError({ uid: this.uid, error: error.message }));
	    if (this._closed) {
	      this.target.destroy();
	      return;
	    }
	    this.socksProxy._socksProxy.socketConnected({
	      uid: this.uid,
	      host: this.target.localAddress,
	      port: this.target.localPort
	    });
	  }
	  onClose() {
	    this.target.destroy();
	    this.internalTLS?.destroy();
	    this._dummyServer?.close();
	    this._closed = true;
	  }
	  onData(data) {
	    if (!this.firstPackageReceived) {
	      this.firstPackageReceived = true;
	      if (data[0] === 22)
	        this._attachTLSListeners();
	      else
	        this.target.on("data", (data2) => this.socksProxy._socksProxy.sendSocketData({ uid: this.uid, data: data2 }));
	    }
	    if (this.internal)
	      this.internal.push(data);
	    else
	      this.target.write(data);
	  }
	  _attachTLSListeners() {
	    this.internal = new import_stream.default.Duplex({
	      read: () => {
	      },
	      write: (data, encoding, callback) => {
	        this.socksProxy._socksProxy.sendSocketData({ uid: this.uid, data });
	        callback();
	      }
	    });
	    this.socksProxy.alpnCache.get(rewriteToLocalhostIfNeeded(this.host), this.port, (alpnProtocolChosenByServer) => {
	      import_debugLogger.debugLogger.log("client-certificates", `Proxy->Target ${this.host}:${this.port} chooses ALPN ${alpnProtocolChosenByServer}`);
	      if (this._closed)
	        return;
	      this._dummyServer = import_tls.default.createServer({
	        ...dummyServerTlsOptions,
	        ALPNProtocols: alpnProtocolChosenByServer === "h2" ? ["h2", "http/1.1"] : ["http/1.1"]
	      });
	      this._dummyServer.emit("connection", this.internal);
	      this._dummyServer.once("secureConnection", (internalTLS) => {
	        this.internalTLS = internalTLS;
	        import_debugLogger.debugLogger.log("client-certificates", `Browser->Proxy ${this.host}:${this.port} chooses ALPN ${internalTLS.alpnProtocol}`);
	        let targetTLS = void 0;
	        const handleError = (error) => {
	          import_debugLogger.debugLogger.log("client-certificates", `error when connecting to target: ${error.message.replaceAll("\n", " ")}`);
	          const responseBody = (0, import_utils.escapeHTML)("Playwright client-certificate error: " + error.message).replaceAll("\n", " <br>");
	          if (internalTLS?.alpnProtocol === "h2") {
	            if ("performServerHandshake" in import_http2.default) {
	              this.target.removeListener("close", this._targetCloseEventListener);
	              const session = import_http2.default.performServerHandshake(internalTLS);
	              session.on("error", () => {
	                this.target.destroy();
	                this._targetCloseEventListener();
	              });
	              session.once("stream", (stream2) => {
	                stream2.respond({
	                  "content-type": "text/html",
	                  [import_http2.default.constants.HTTP2_HEADER_STATUS]: 503
	                });
	                const cleanup = () => {
	                  session.close();
	                  this.target.destroy();
	                  this._targetCloseEventListener();
	                };
	                stream2.end(responseBody, cleanup);
	                stream2.once("error", cleanup);
	              });
	            } else {
	              this.target.destroy();
	            }
	          } else {
	            internalTLS.end([
	              "HTTP/1.1 503 Internal Server Error",
	              "Content-Type: text/html; charset=utf-8",
	              "Content-Length: " + Buffer.byteLength(responseBody),
	              "",
	              responseBody
	            ].join("\r\n"));
	            this.target.destroy();
	          }
	        };
	        if (this._closed) {
	          internalTLS.destroy();
	          return;
	        }
	        targetTLS = import_tls.default.connect({
	          socket: this.target,
	          host: this.host,
	          port: this.port,
	          rejectUnauthorized: !this.socksProxy.ignoreHTTPSErrors,
	          ALPNProtocols: [internalTLS.alpnProtocol || "http/1.1"],
	          servername: !import_net.default.isIP(this.host) ? this.host : void 0,
	          secureContext: this.socksProxy.secureContextMap.get(new URL(`https://${this.host}:${this.port}`).origin)
	        });
	        targetTLS.once("secureConnect", () => {
	          internalTLS.pipe(targetTLS);
	          targetTLS.pipe(internalTLS);
	        });
	        internalTLS.once("error", () => this.target.destroy());
	        targetTLS.once("error", handleError);
	      });
	    });
	  }
	}
	class ClientCertificatesProxy {
	  constructor(contextOptions) {
	    this._connections = /* @__PURE__ */ new Map();
	    this.secureContextMap = /* @__PURE__ */ new Map();
	    (0, import_browserContext.verifyClientCertificates)(contextOptions.clientCertificates);
	    this.alpnCache = new ALPNCache();
	    this.ignoreHTTPSErrors = contextOptions.ignoreHTTPSErrors;
	    this.proxyAgentFromOptions = (0, import_network.createProxyAgent)(contextOptions.proxy);
	    this._initSecureContexts(contextOptions.clientCertificates);
	    this._socksProxy = new import_socksProxy.SocksProxy();
	    this._socksProxy.setPattern("*");
	    this._socksProxy.addListener(import_socksProxy.SocksProxy.Events.SocksRequested, async (payload) => {
	      try {
	        const connection = new SocksProxyConnection(this, payload.uid, payload.host, payload.port);
	        await connection.connect();
	        this._connections.set(payload.uid, connection);
	      } catch (error) {
	        this._socksProxy.socketFailed({ uid: payload.uid, errorCode: error.code });
	      }
	    });
	    this._socksProxy.addListener(import_socksProxy.SocksProxy.Events.SocksData, async (payload) => {
	      this._connections.get(payload.uid)?.onData(payload.data);
	    });
	    this._socksProxy.addListener(import_socksProxy.SocksProxy.Events.SocksClosed, (payload) => {
	      this._connections.get(payload.uid)?.onClose();
	      this._connections.delete(payload.uid);
	    });
	    loadDummyServerCertsIfNeeded();
	  }
	  _initSecureContexts(clientCertificates) {
	    const origin2certs = /* @__PURE__ */ new Map();
	    for (const cert of clientCertificates || []) {
	      const origin = normalizeOrigin(cert.origin);
	      const certs = origin2certs.get(origin) || [];
	      certs.push(cert);
	      origin2certs.set(origin, certs);
	    }
	    for (const [origin, certs] of origin2certs) {
	      try {
	        this.secureContextMap.set(origin, import_tls.default.createSecureContext(convertClientCertificatesToTLSOptions(certs)));
	      } catch (error) {
	        error = rewriteOpenSSLErrorIfNeeded(error);
	        throw (0, import_utils.rewriteErrorMessage)(error, `Failed to load client certificate: ${error.message}`);
	      }
	    }
	  }
	  async listen() {
	    const port = await this._socksProxy.listen(0, "127.0.0.1");
	    return { server: `socks5://127.0.0.1:${port}` };
	  }
	  async close() {
	    await this._socksProxy.close();
	  }
	}
	function normalizeOrigin(origin) {
	  try {
	    return new URL(origin).origin;
	  } catch (error) {
	    return origin;
	  }
	}
	function convertClientCertificatesToTLSOptions(clientCertificates) {
	  if (!clientCertificates || !clientCertificates.length)
	    return;
	  const tlsOptions = {
	    pfx: [],
	    key: [],
	    cert: []
	  };
	  for (const cert of clientCertificates) {
	    if (cert.cert)
	      tlsOptions.cert.push(cert.cert);
	    if (cert.key)
	      tlsOptions.key.push({ pem: cert.key, passphrase: cert.passphrase });
	    if (cert.pfx)
	      tlsOptions.pfx.push({ buf: cert.pfx, passphrase: cert.passphrase });
	  }
	  return tlsOptions;
	}
	function getMatchingTLSOptionsForOrigin(clientCertificates, origin) {
	  const matchingCerts = clientCertificates?.filter(
	    (c) => normalizeOrigin(c.origin) === origin
	  );
	  return convertClientCertificatesToTLSOptions(matchingCerts);
	}
	function rewriteToLocalhostIfNeeded(host) {
	  return host === "local.playwright" ? "localhost" : host;
	}
	function rewriteOpenSSLErrorIfNeeded(error) {
	  if (error.message !== "unsupported" && error.code !== "ERR_CRYPTO_UNSUPPORTED_OPERATION")
	    return error;
	  return (0, import_utils.rewriteErrorMessage)(error, [
	    "Unsupported TLS certificate.",
	    "Most likely, the security algorithm of the given certificate was deprecated by OpenSSL.",
	    "For more details, see https://github.com/openssl/openssl/blob/master/README-PROVIDERS.md#the-legacy-provider",
	    "You could probably modernize the certificate by following the steps at https://github.com/nodejs/node/issues/40672#issuecomment-1243648223"
	  ].join("\n"));
	}
	return socksClientCertificatesInterceptor;
}

var browser$1;
var hasRequiredBrowser$1;

function requireBrowser$1 () {
	if (hasRequiredBrowser$1) return browser$1;
	hasRequiredBrowser$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browser_exports = {};
	__export(browser_exports, {
	  Browser: () => Browser
	});
	browser$1 = __toCommonJS(browser_exports);
	var import_artifact = requireArtifact$1();
	var import_browserContext = requireBrowserContext$1();
	var import_download = requireDownload$1();
	var import_instrumentation = requireInstrumentation();
	var import_page = requirePage$1();
	var import_socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
	class Browser extends import_instrumentation.SdkObject {
	  constructor(parent, options) {
	    super(parent, "browser");
	    this._downloads = /* @__PURE__ */ new Map();
	    this._defaultContext = null;
	    this._startedClosing = false;
	    this._idToVideo = /* @__PURE__ */ new Map();
	    this._isCollocatedWithServer = true;
	    this.attribution.browser = this;
	    this.options = options;
	    this.instrumentation.onBrowserOpen(this);
	  }
	  static {
	    this.Events = {
	      Disconnected: "disconnected"
	    };
	  }
	  async newContext(metadata, options) {
	    (0, import_browserContext.validateBrowserContextOptions)(options, this.options);
	    let clientCertificatesProxy;
	    if (options.clientCertificates?.length) {
	      clientCertificatesProxy = new import_socksClientCertificatesInterceptor.ClientCertificatesProxy(options);
	      options = { ...options };
	      options.proxyOverride = await clientCertificatesProxy.listen();
	      options.internalIgnoreHTTPSErrors = true;
	    }
	    let context;
	    try {
	      context = await this.doCreateNewContext(options);
	    } catch (error) {
	      await clientCertificatesProxy?.close();
	      throw error;
	    }
	    context._clientCertificatesProxy = clientCertificatesProxy;
	    if (options.storageState)
	      await context.setStorageState(metadata, options.storageState);
	    return context;
	  }
	  async newContextForReuse(params, metadata) {
	    const hash = import_browserContext.BrowserContext.reusableContextHash(params);
	    if (!this._contextForReuse || hash !== this._contextForReuse.hash || !this._contextForReuse.context.canResetForReuse()) {
	      if (this._contextForReuse)
	        await this._contextForReuse.context.close({ reason: "Context reused" });
	      this._contextForReuse = { context: await this.newContext(metadata, params), hash };
	      return { context: this._contextForReuse.context, needsReset: false };
	    }
	    await this._contextForReuse.context.stopPendingOperations("Context recreated");
	    return { context: this._contextForReuse.context, needsReset: true };
	  }
	  async stopPendingOperations(reason) {
	    await this._contextForReuse?.context?.stopPendingOperations(reason);
	  }
	  _downloadCreated(page, uuid, url, suggestedFilename) {
	    const download = new import_download.Download(page, this.options.downloadsPath || "", uuid, url, suggestedFilename);
	    this._downloads.set(uuid, download);
	  }
	  _downloadFilenameSuggested(uuid, suggestedFilename) {
	    const download = this._downloads.get(uuid);
	    if (!download)
	      return;
	    download._filenameSuggested(suggestedFilename);
	  }
	  _downloadFinished(uuid, error) {
	    const download = this._downloads.get(uuid);
	    if (!download)
	      return;
	    download.artifact.reportFinished(error ? new Error(error) : void 0);
	    this._downloads.delete(uuid);
	  }
	  _videoStarted(context, videoId, path, pageOrError) {
	    const artifact = new import_artifact.Artifact(context, path);
	    this._idToVideo.set(videoId, { context, artifact });
	    pageOrError.then((page) => {
	      if (page instanceof import_page.Page) {
	        page._video = artifact;
	        page.emitOnContext(import_browserContext.BrowserContext.Events.VideoStarted, artifact);
	        page.emit(import_page.Page.Events.Video, artifact);
	      }
	    });
	  }
	  _takeVideo(videoId) {
	    const video = this._idToVideo.get(videoId);
	    this._idToVideo.delete(videoId);
	    return video?.artifact;
	  }
	  _didClose() {
	    for (const context of this.contexts())
	      context._browserClosed();
	    if (this._defaultContext)
	      this._defaultContext._browserClosed();
	    this.emit(Browser.Events.Disconnected);
	    this.instrumentation.onBrowserClose(this);
	  }
	  async close(options) {
	    if (!this._startedClosing) {
	      if (options.reason)
	        this._closeReason = options.reason;
	      this._startedClosing = true;
	      await this.options.browserProcess.close();
	    }
	    if (this.isConnected())
	      await new Promise((x) => this.once(Browser.Events.Disconnected, x));
	  }
	  async killForTests() {
	    await this.options.browserProcess.kill();
	  }
	}
	return browser$1;
}

var crConnection;
var hasRequiredCrConnection;

function requireCrConnection () {
	if (hasRequiredCrConnection) return crConnection;
	hasRequiredCrConnection = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crConnection_exports = {};
	__export(crConnection_exports, {
	  CDPSession: () => CDPSession,
	  CRConnection: () => CRConnection,
	  CRSession: () => CRSession,
	  ConnectionEvents: () => ConnectionEvents,
	  kBrowserCloseMessageId: () => kBrowserCloseMessageId
	});
	crConnection = __toCommonJS(crConnection_exports);
	var import_events = require$$0$5;
	var import_utils = requireUtils();
	var import_debugLogger = requireDebugLogger();
	var import_helper = requireHelper();
	var import_protocolError = requireProtocolError();
	const ConnectionEvents = {
	  Disconnected: Symbol("ConnectionEvents.Disconnected")
	};
	const kBrowserCloseMessageId = -9999;
	class CRConnection extends import_events.EventEmitter {
	  constructor(transport, protocolLogger, browserLogsCollector) {
	    super();
	    this._lastId = 0;
	    this._sessions = /* @__PURE__ */ new Map();
	    this._closed = false;
	    this.setMaxListeners(0);
	    this._transport = transport;
	    this._protocolLogger = protocolLogger;
	    this._browserLogsCollector = browserLogsCollector;
	    this.rootSession = new CRSession(this, null, "");
	    this._sessions.set("", this.rootSession);
	    this._transport.onmessage = this._onMessage.bind(this);
	    this._transport.onclose = this._onClose.bind(this);
	  }
	  _rawSend(sessionId, method, params) {
	    const id = ++this._lastId;
	    const message = { id, method, params };
	    if (sessionId)
	      message.sessionId = sessionId;
	    this._protocolLogger("send", message);
	    this._transport.send(message);
	    return id;
	  }
	  async _onMessage(message) {
	    this._protocolLogger("receive", message);
	    if (message.id === kBrowserCloseMessageId)
	      return;
	    const session = this._sessions.get(message.sessionId || "");
	    if (session)
	      session._onMessage(message);
	  }
	  _onClose(reason) {
	    this._closed = true;
	    this._transport.onmessage = void 0;
	    this._transport.onclose = void 0;
	    this._browserDisconnectedLogs = import_helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
	    this.rootSession.dispose();
	    Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
	  }
	  close() {
	    if (!this._closed)
	      this._transport.close();
	  }
	  async createBrowserSession() {
	    const { sessionId } = await this.rootSession.send("Target.attachToBrowserTarget");
	    return new CDPSession(this.rootSession, sessionId);
	  }
	}
	class CRSession extends import_events.EventEmitter {
	  constructor(connection, parentSession, sessionId, eventListener) {
	    super();
	    this._callbacks = /* @__PURE__ */ new Map();
	    this._crashed = false;
	    this._closed = false;
	    this.setMaxListeners(0);
	    this._connection = connection;
	    this._parentSession = parentSession;
	    this._sessionId = sessionId;
	    this._eventListener = eventListener;
	    this.on = super.on;
	    this.addListener = super.addListener;
	    this.off = super.removeListener;
	    this.removeListener = super.removeListener;
	    this.once = super.once;
	  }
	  _markAsCrashed() {
	    this._crashed = true;
	  }
	  createChildSession(sessionId, eventListener) {
	    const session = new CRSession(this._connection, this, sessionId, eventListener);
	    this._connection._sessions.set(sessionId, session);
	    return session;
	  }
	  async send(method, params) {
	    if (this._crashed || this._closed || this._connection._closed || this._connection._browserDisconnectedLogs)
	      throw new import_protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this._connection._browserDisconnectedLogs);
	    const id = this._connection._rawSend(this._sessionId, method, params);
	    return new Promise((resolve, reject) => {
	      this._callbacks.set(id, { resolve, reject, error: new import_protocolError.ProtocolError("error", method) });
	    });
	  }
	  _sendMayFail(method, params) {
	    return this.send(method, params).catch((error) => import_debugLogger.debugLogger.log("error", error));
	  }
	  _onMessage(object) {
	    if (object.id && this._callbacks.has(object.id)) {
	      const callback = this._callbacks.get(object.id);
	      this._callbacks.delete(object.id);
	      if (object.error) {
	        callback.error.setMessage(object.error.message);
	        callback.reject(callback.error);
	      } else {
	        callback.resolve(object.result);
	      }
	    } else if (object.id && object.error?.code === -32001) ; else {
	      (0, import_utils.assert)(!object.id, object?.error?.message || void 0);
	      Promise.resolve().then(() => {
	        if (this._eventListener)
	          this._eventListener(object.method, object.params);
	        this.emit(object.method, object.params);
	      });
	    }
	  }
	  async detach() {
	    if (this._closed)
	      throw new Error(`Session already detached. Most likely the page has been closed.`);
	    if (!this._parentSession)
	      throw new Error("Root session cannot be closed");
	    await this._sendMayFail("Runtime.runIfWaitingForDebugger");
	    await this._parentSession.send("Target.detachFromTarget", { sessionId: this._sessionId });
	    this.dispose();
	  }
	  dispose() {
	    this._closed = true;
	    this._connection._sessions.delete(this._sessionId);
	    for (const callback of this._callbacks.values()) {
	      callback.error.setMessage(`Internal server error, session closed.`);
	      callback.error.type = this._crashed ? "crashed" : "closed";
	      callback.error.logs = this._connection._browserDisconnectedLogs;
	      callback.reject(callback.error);
	    }
	    this._callbacks.clear();
	  }
	}
	class CDPSession extends import_events.EventEmitter {
	  constructor(parentSession, sessionId) {
	    super();
	    this._listeners = [];
	    this.guid = `cdp-session@${sessionId}`;
	    this._session = parentSession.createChildSession(sessionId, (method, params) => this.emit(CDPSession.Events.Event, { method, params }));
	    this._listeners = [import_utils.eventsHelper.addEventListener(parentSession, "Target.detachedFromTarget", (event) => {
	      if (event.sessionId === sessionId)
	        this._onClose();
	    })];
	  }
	  static {
	    this.Events = {
	      Event: "event",
	      Closed: "close"
	    };
	  }
	  async send(method, params) {
	    return await this._session.send(method, params);
	  }
	  async detach() {
	    return await this._session.detach();
	  }
	  async attachToTarget(targetId) {
	    const { sessionId } = await this.send("Target.attachToTarget", { targetId, flatten: true });
	    return new CDPSession(this._session, sessionId);
	  }
	  _onClose() {
	    import_utils.eventsHelper.removeEventListeners(this._listeners);
	    this._session.dispose();
	    this.emit(CDPSession.Events.Closed);
	  }
	}
	return crConnection;
}

var dialog$1;
var hasRequiredDialog$1;

function requireDialog$1 () {
	if (hasRequiredDialog$1) return dialog$1;
	hasRequiredDialog$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var dialog_exports = {};
	__export(dialog_exports, {
	  Dialog: () => Dialog
	});
	dialog$1 = __toCommonJS(dialog_exports);
	var import_utils = requireUtils();
	var import_instrumentation = requireInstrumentation();
	class Dialog extends import_instrumentation.SdkObject {
	  constructor(page, type, message, onHandle, defaultValue) {
	    super(page, "dialog");
	    this._handled = false;
	    this._page = page;
	    this._type = type;
	    this._message = message;
	    this._onHandle = onHandle;
	    this._defaultValue = defaultValue || "";
	    this._page._frameManager.dialogDidOpen(this);
	    this.instrumentation.onDialog(this);
	  }
	  page() {
	    return this._page;
	  }
	  type() {
	    return this._type;
	  }
	  message() {
	    return this._message;
	  }
	  defaultValue() {
	    return this._defaultValue;
	  }
	  async accept(promptText) {
	    (0, import_utils.assert)(!this._handled, "Cannot accept dialog which is already handled!");
	    this._handled = true;
	    this._page._frameManager.dialogWillClose(this);
	    await this._onHandle(true, promptText);
	  }
	  async dismiss() {
	    (0, import_utils.assert)(!this._handled, "Cannot dismiss dialog which is already handled!");
	    this._handled = true;
	    this._page._frameManager.dialogWillClose(this);
	    await this._onHandle(false);
	  }
	  async close() {
	    if (this._type === "beforeunload")
	      await this.accept();
	    else
	      await this.dismiss();
	  }
	}
	return dialog$1;
}

var crAccessibility;
var hasRequiredCrAccessibility;

function requireCrAccessibility () {
	if (hasRequiredCrAccessibility) return crAccessibility;
	hasRequiredCrAccessibility = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crAccessibility_exports = {};
	__export(crAccessibility_exports, {
	  getAccessibilityTree: () => getAccessibilityTree
	});
	crAccessibility = __toCommonJS(crAccessibility_exports);
	async function getAccessibilityTree(client, needle) {
	  const { nodes } = await client.send("Accessibility.getFullAXTree");
	  const tree = CRAXNode.createTree(client, nodes);
	  return {
	    tree,
	    needle: needle ? await tree._findElement(needle) : null
	  };
	}
	class CRAXNode {
	  constructor(client, payload) {
	    this._children = [];
	    this._richlyEditable = false;
	    this._editable = false;
	    this._focusable = false;
	    this._expanded = false;
	    this._hidden = false;
	    this._client = client;
	    this._payload = payload;
	    this._name = this._payload.name ? this._payload.name.value : "";
	    this._role = this._payload.role ? this._payload.role.value : "Unknown";
	    for (const property of this._payload.properties || []) {
	      if (property.name === "editable") {
	        this._richlyEditable = property.value.value === "richtext";
	        this._editable = true;
	      }
	      if (property.name === "focusable")
	        this._focusable = property.value.value;
	      if (property.name === "expanded")
	        this._expanded = property.value.value;
	      if (property.name === "hidden")
	        this._hidden = property.value.value;
	    }
	  }
	  _isPlainTextField() {
	    if (this._richlyEditable)
	      return false;
	    if (this._editable)
	      return true;
	    return this._role === "textbox" || this._role === "ComboBox" || this._role === "searchbox";
	  }
	  _isTextOnlyObject() {
	    const role = this._role;
	    return role === "LineBreak" || role === "text" || role === "InlineTextBox" || role === "StaticText";
	  }
	  _hasFocusableChild() {
	    if (this._cachedHasFocusableChild === void 0) {
	      this._cachedHasFocusableChild = false;
	      for (const child of this._children) {
	        if (child._focusable || child._hasFocusableChild()) {
	          this._cachedHasFocusableChild = true;
	          break;
	        }
	      }
	    }
	    return this._cachedHasFocusableChild;
	  }
	  children() {
	    return this._children;
	  }
	  async _findElement(element) {
	    const objectId = element._objectId;
	    const { node: { backendNodeId } } = await this._client.send("DOM.describeNode", { objectId });
	    const needle = this.find((node) => node._payload.backendDOMNodeId === backendNodeId);
	    return needle || null;
	  }
	  find(predicate) {
	    if (predicate(this))
	      return this;
	    for (const child of this._children) {
	      const result = child.find(predicate);
	      if (result)
	        return result;
	    }
	    return null;
	  }
	  isLeafNode() {
	    if (!this._children.length)
	      return true;
	    if (this._isPlainTextField() || this._isTextOnlyObject())
	      return true;
	    switch (this._role) {
	      case "doc-cover":
	      case "graphics-symbol":
	      case "img":
	      case "Meter":
	      case "scrollbar":
	      case "slider":
	      case "separator":
	      case "progressbar":
	        return true;
	    }
	    if (this._hasFocusableChild())
	      return false;
	    if (this._focusable && this._role !== "WebArea" && this._role !== "RootWebArea" && this._name)
	      return true;
	    if (this._role === "heading" && this._name)
	      return true;
	    return false;
	  }
	  isControl() {
	    switch (this._role) {
	      case "button":
	      case "checkbox":
	      case "ColorWell":
	      case "combobox":
	      case "DisclosureTriangle":
	      case "listbox":
	      case "menu":
	      case "menubar":
	      case "menuitem":
	      case "menuitemcheckbox":
	      case "menuitemradio":
	      case "radio":
	      case "scrollbar":
	      case "searchbox":
	      case "slider":
	      case "spinbutton":
	      case "switch":
	      case "tab":
	      case "textbox":
	      case "tree":
	        return true;
	      default:
	        return false;
	    }
	  }
	  isInteresting(insideControl) {
	    const role = this._role;
	    if (role === "Ignored" || this._hidden)
	      return false;
	    if (this._focusable || this._richlyEditable)
	      return true;
	    if (this.isControl())
	      return true;
	    if (insideControl)
	      return false;
	    return this.isLeafNode() && !!this._name;
	  }
	  normalizedRole() {
	    switch (this._role) {
	      case "RootWebArea":
	        return "WebArea";
	      case "StaticText":
	        return "text";
	      default:
	        return this._role;
	    }
	  }
	  serialize() {
	    const properties = /* @__PURE__ */ new Map();
	    for (const property of this._payload.properties || [])
	      properties.set(property.name.toLowerCase(), property.value.value);
	    if (this._payload.description)
	      properties.set("description", this._payload.description.value);
	    const node = {
	      role: this.normalizedRole(),
	      name: this._payload.name ? this._payload.name.value || "" : ""
	    };
	    const userStringProperties = [
	      "description",
	      "keyshortcuts",
	      "roledescription",
	      "valuetext"
	    ];
	    for (const userStringProperty of userStringProperties) {
	      if (!properties.has(userStringProperty))
	        continue;
	      node[userStringProperty] = properties.get(userStringProperty);
	    }
	    const booleanProperties = [
	      "disabled",
	      "expanded",
	      "focused",
	      "modal",
	      "multiline",
	      "multiselectable",
	      "readonly",
	      "required",
	      "selected"
	    ];
	    for (const booleanProperty of booleanProperties) {
	      if (booleanProperty === "focused" && (this._role === "WebArea" || this._role === "RootWebArea"))
	        continue;
	      const value = properties.get(booleanProperty);
	      if (!value)
	        continue;
	      node[booleanProperty] = value;
	    }
	    const numericalProperties = [
	      "level",
	      "valuemax",
	      "valuemin"
	    ];
	    for (const numericalProperty of numericalProperties) {
	      if (!properties.has(numericalProperty))
	        continue;
	      node[numericalProperty] = properties.get(numericalProperty);
	    }
	    const tokenProperties = [
	      "autocomplete",
	      "haspopup",
	      "invalid",
	      "orientation"
	    ];
	    for (const tokenProperty of tokenProperties) {
	      const value = properties.get(tokenProperty);
	      if (!value || value === "false")
	        continue;
	      node[tokenProperty] = value;
	    }
	    const axNode = node;
	    if (this._payload.value) {
	      if (typeof this._payload.value.value === "string")
	        axNode.valueString = this._payload.value.value;
	      if (typeof this._payload.value.value === "number")
	        axNode.valueNumber = this._payload.value.value;
	    }
	    if (properties.has("checked"))
	      axNode.checked = properties.get("checked") === "true" ? "checked" : properties.get("checked") === "false" ? "unchecked" : "mixed";
	    if (properties.has("pressed"))
	      axNode.pressed = properties.get("pressed") === "true" ? "pressed" : properties.get("pressed") === "false" ? "released" : "mixed";
	    return axNode;
	  }
	  static createTree(client, payloads) {
	    const nodeById = /* @__PURE__ */ new Map();
	    for (const payload of payloads)
	      nodeById.set(payload.nodeId, new CRAXNode(client, payload));
	    for (const node of nodeById.values()) {
	      for (const childId of node._payload.childIds || [])
	        node._children.push(nodeById.get(childId));
	    }
	    return nodeById.values().next().value;
	  }
	}
	return crAccessibility;
}

var crCoverage;
var hasRequiredCrCoverage;

function requireCrCoverage () {
	if (hasRequiredCrCoverage) return crCoverage;
	hasRequiredCrCoverage = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crCoverage_exports = {};
	__export(crCoverage_exports, {
	  CRCoverage: () => CRCoverage
	});
	crCoverage = __toCommonJS(crCoverage_exports);
	var import_utils = requireUtils();
	var import_eventsHelper = requireEventsHelper();
	class CRCoverage {
	  constructor(client) {
	    this._jsCoverage = new JSCoverage(client);
	    this._cssCoverage = new CSSCoverage(client);
	  }
	  async startJSCoverage(options) {
	    return await this._jsCoverage.start(options);
	  }
	  async stopJSCoverage() {
	    return await this._jsCoverage.stop();
	  }
	  async startCSSCoverage(options) {
	    return await this._cssCoverage.start(options);
	  }
	  async stopCSSCoverage() {
	    return await this._cssCoverage.stop();
	  }
	}
	class JSCoverage {
	  constructor(client) {
	    this._reportAnonymousScripts = false;
	    this._client = client;
	    this._enabled = false;
	    this._scriptIds = /* @__PURE__ */ new Set();
	    this._scriptSources = /* @__PURE__ */ new Map();
	    this._eventListeners = [];
	    this._resetOnNavigation = false;
	  }
	  async start(options) {
	    (0, import_utils.assert)(!this._enabled, "JSCoverage is already enabled");
	    const {
	      resetOnNavigation = true,
	      reportAnonymousScripts = false
	    } = options;
	    this._resetOnNavigation = resetOnNavigation;
	    this._reportAnonymousScripts = reportAnonymousScripts;
	    this._enabled = true;
	    this._scriptIds.clear();
	    this._scriptSources.clear();
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.scriptParsed", this._onScriptParsed.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.paused", this._onDebuggerPaused.bind(this))
	    ];
	    await Promise.all([
	      this._client.send("Profiler.enable"),
	      this._client.send("Profiler.startPreciseCoverage", { callCount: true, detailed: true }),
	      this._client.send("Debugger.enable"),
	      this._client.send("Debugger.setSkipAllPauses", { skip: true })
	    ]);
	  }
	  _onDebuggerPaused() {
	    this._client.send("Debugger.resume");
	  }
	  _onExecutionContextsCleared() {
	    if (!this._resetOnNavigation)
	      return;
	    this._scriptIds.clear();
	    this._scriptSources.clear();
	  }
	  async _onScriptParsed(event) {
	    this._scriptIds.add(event.scriptId);
	    if (!event.url && !this._reportAnonymousScripts)
	      return;
	    const response = await this._client._sendMayFail("Debugger.getScriptSource", { scriptId: event.scriptId });
	    if (response)
	      this._scriptSources.set(event.scriptId, response.scriptSource);
	  }
	  async stop() {
	    (0, import_utils.assert)(this._enabled, "JSCoverage is not enabled");
	    this._enabled = false;
	    const [profileResponse] = await Promise.all([
	      this._client.send("Profiler.takePreciseCoverage"),
	      this._client.send("Profiler.stopPreciseCoverage"),
	      this._client.send("Profiler.disable"),
	      this._client.send("Debugger.disable")
	    ]);
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	    const coverage = { entries: [] };
	    for (const entry of profileResponse.result) {
	      if (!this._scriptIds.has(entry.scriptId))
	        continue;
	      if (!entry.url && !this._reportAnonymousScripts)
	        continue;
	      const source = this._scriptSources.get(entry.scriptId);
	      if (source)
	        coverage.entries.push({ ...entry, source });
	      else
	        coverage.entries.push(entry);
	    }
	    return coverage;
	  }
	}
	class CSSCoverage {
	  constructor(client) {
	    this._client = client;
	    this._enabled = false;
	    this._stylesheetURLs = /* @__PURE__ */ new Map();
	    this._stylesheetSources = /* @__PURE__ */ new Map();
	    this._eventListeners = [];
	    this._resetOnNavigation = false;
	  }
	  async start(options) {
	    (0, import_utils.assert)(!this._enabled, "CSSCoverage is already enabled");
	    const { resetOnNavigation = true } = options;
	    this._resetOnNavigation = resetOnNavigation;
	    this._enabled = true;
	    this._stylesheetURLs.clear();
	    this._stylesheetSources.clear();
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "CSS.styleSheetAdded", this._onStyleSheet.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this))
	    ];
	    await Promise.all([
	      this._client.send("DOM.enable"),
	      this._client.send("CSS.enable"),
	      this._client.send("CSS.startRuleUsageTracking")
	    ]);
	  }
	  _onExecutionContextsCleared() {
	    if (!this._resetOnNavigation)
	      return;
	    this._stylesheetURLs.clear();
	    this._stylesheetSources.clear();
	  }
	  async _onStyleSheet(event) {
	    const header = event.header;
	    if (!header.sourceURL)
	      return;
	    const response = await this._client._sendMayFail("CSS.getStyleSheetText", { styleSheetId: header.styleSheetId });
	    if (response) {
	      this._stylesheetURLs.set(header.styleSheetId, header.sourceURL);
	      this._stylesheetSources.set(header.styleSheetId, response.text);
	    }
	  }
	  async stop() {
	    (0, import_utils.assert)(this._enabled, "CSSCoverage is not enabled");
	    this._enabled = false;
	    const ruleTrackingResponse = await this._client.send("CSS.stopRuleUsageTracking");
	    await Promise.all([
	      this._client.send("CSS.disable"),
	      this._client.send("DOM.disable")
	    ]);
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	    const styleSheetIdToCoverage = /* @__PURE__ */ new Map();
	    for (const entry of ruleTrackingResponse.ruleUsage) {
	      let ranges = styleSheetIdToCoverage.get(entry.styleSheetId);
	      if (!ranges) {
	        ranges = [];
	        styleSheetIdToCoverage.set(entry.styleSheetId, ranges);
	      }
	      ranges.push({
	        startOffset: entry.startOffset,
	        endOffset: entry.endOffset,
	        count: entry.used ? 1 : 0
	      });
	    }
	    const coverage = { entries: [] };
	    for (const styleSheetId of this._stylesheetURLs.keys()) {
	      const url = this._stylesheetURLs.get(styleSheetId);
	      const text = this._stylesheetSources.get(styleSheetId);
	      const ranges = convertToDisjointRanges(styleSheetIdToCoverage.get(styleSheetId) || []);
	      coverage.entries.push({ url, ranges, text });
	    }
	    return coverage;
	  }
	}
	function convertToDisjointRanges(nestedRanges) {
	  const points = [];
	  for (const range of nestedRanges) {
	    points.push({ offset: range.startOffset, type: 0, range });
	    points.push({ offset: range.endOffset, type: 1, range });
	  }
	  points.sort((a, b) => {
	    if (a.offset !== b.offset)
	      return a.offset - b.offset;
	    if (a.type !== b.type)
	      return b.type - a.type;
	    const aLength = a.range.endOffset - a.range.startOffset;
	    const bLength = b.range.endOffset - b.range.startOffset;
	    if (a.type === 0)
	      return bLength - aLength;
	    return aLength - bLength;
	  });
	  const hitCountStack = [];
	  const results = [];
	  let lastOffset = 0;
	  for (const point of points) {
	    if (hitCountStack.length && lastOffset < point.offset && hitCountStack[hitCountStack.length - 1] > 0) {
	      const lastResult = results.length ? results[results.length - 1] : null;
	      if (lastResult && lastResult.end === lastOffset)
	        lastResult.end = point.offset;
	      else
	        results.push({ start: lastOffset, end: point.offset });
	    }
	    lastOffset = point.offset;
	    if (point.type === 0)
	      hitCountStack.push(point.range.count);
	    else
	      hitCountStack.pop();
	  }
	  return results.filter((range) => range.end - range.start > 1);
	}
	return crCoverage;
}

var crProtocolHelper;
var hasRequiredCrProtocolHelper;

function requireCrProtocolHelper () {
	if (hasRequiredCrProtocolHelper) return crProtocolHelper;
	hasRequiredCrProtocolHelper = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crProtocolHelper_exports = {};
	__export(crProtocolHelper_exports, {
	  exceptionToError: () => exceptionToError,
	  getExceptionMessage: () => getExceptionMessage,
	  readProtocolStream: () => readProtocolStream,
	  releaseObject: () => releaseObject,
	  saveProtocolStream: () => saveProtocolStream,
	  toButtonsMask: () => toButtonsMask,
	  toConsoleMessageLocation: () => toConsoleMessageLocation,
	  toModifiersMask: () => toModifiersMask
	});
	crProtocolHelper = __toCommonJS(crProtocolHelper_exports);
	var import_fs = __toESM(require$$0$4);
	var import_stackTrace = requireStackTrace();
	var import_fileUtils = requireFileUtils$1();
	function getExceptionMessage(exceptionDetails) {
	  if (exceptionDetails.exception)
	    return exceptionDetails.exception.description || String(exceptionDetails.exception.value);
	  let message = exceptionDetails.text;
	  if (exceptionDetails.stackTrace) {
	    for (const callframe of exceptionDetails.stackTrace.callFrames) {
	      const location = callframe.url + ":" + callframe.lineNumber + ":" + callframe.columnNumber;
	      const functionName = callframe.functionName || "<anonymous>";
	      message += `
    at ${functionName} (${location})`;
	    }
	  }
	  return message;
	}
	async function releaseObject(client, objectId) {
	  await client.send("Runtime.releaseObject", { objectId }).catch((error) => {
	  });
	}
	async function saveProtocolStream(client, handle, path) {
	  let eof = false;
	  await (0, import_fileUtils.mkdirIfNeeded)(path);
	  const fd = await import_fs.default.promises.open(path, "w");
	  while (!eof) {
	    const response = await client.send("IO.read", { handle });
	    eof = response.eof;
	    const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : void 0);
	    await fd.write(buf);
	  }
	  await fd.close();
	  await client.send("IO.close", { handle });
	}
	async function readProtocolStream(client, handle) {
	  let eof = false;
	  const chunks = [];
	  while (!eof) {
	    const response = await client.send("IO.read", { handle });
	    eof = response.eof;
	    const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : void 0);
	    chunks.push(buf);
	  }
	  await client.send("IO.close", { handle });
	  return Buffer.concat(chunks);
	}
	function toConsoleMessageLocation(stackTrace) {
	  return stackTrace && stackTrace.callFrames.length ? {
	    url: stackTrace.callFrames[0].url,
	    lineNumber: stackTrace.callFrames[0].lineNumber,
	    columnNumber: stackTrace.callFrames[0].columnNumber
	  } : { url: "", lineNumber: 0, columnNumber: 0 };
	}
	function exceptionToError(exceptionDetails) {
	  const messageWithStack = getExceptionMessage(exceptionDetails);
	  const lines = messageWithStack.split("\n");
	  const firstStackTraceLine = lines.findIndex((line) => line.startsWith("    at"));
	  let messageWithName = "";
	  let stack = "";
	  if (firstStackTraceLine === -1) {
	    messageWithName = messageWithStack;
	  } else {
	    messageWithName = lines.slice(0, firstStackTraceLine).join("\n");
	    stack = messageWithStack;
	  }
	  const { name, message } = (0, import_stackTrace.splitErrorMessage)(messageWithName);
	  const err = new Error(message);
	  err.stack = stack;
	  const nameOverride = exceptionDetails.exception?.preview?.properties.find((o) => o.name === "name");
	  err.name = nameOverride ? nameOverride.value ?? "Error" : name;
	  return err;
	}
	function toModifiersMask(modifiers) {
	  let mask = 0;
	  if (modifiers.has("Alt"))
	    mask |= 1;
	  if (modifiers.has("Control"))
	    mask |= 2;
	  if (modifiers.has("Meta"))
	    mask |= 4;
	  if (modifiers.has("Shift"))
	    mask |= 8;
	  return mask;
	}
	function toButtonsMask(buttons) {
	  let mask = 0;
	  if (buttons.has("left"))
	    mask |= 1;
	  if (buttons.has("right"))
	    mask |= 2;
	  if (buttons.has("middle"))
	    mask |= 4;
	  return mask;
	}
	return crProtocolHelper;
}

var crDragDrop;
var hasRequiredCrDragDrop;

function requireCrDragDrop () {
	if (hasRequiredCrDragDrop) return crDragDrop;
	hasRequiredCrDragDrop = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crDragDrop_exports = {};
	__export(crDragDrop_exports, {
	  DragManager: () => DragManager
	});
	crDragDrop = __toCommonJS(crDragDrop_exports);
	var import_crProtocolHelper = requireCrProtocolHelper();
	var import_utils = requireUtils();
	class DragManager {
	  constructor(page) {
	    this._dragState = null;
	    this._lastPosition = { x: 0, y: 0 };
	    this._crPage = page;
	  }
	  async cancelDrag() {
	    if (!this._dragState)
	      return false;
	    await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
	      type: "dragCancel",
	      x: this._lastPosition.x,
	      y: this._lastPosition.y,
	      data: {
	        items: [],
	        dragOperationsMask: 65535
	      }
	    });
	    this._dragState = null;
	    return true;
	  }
	  async interceptDragCausedByMove(x, y, button, buttons, modifiers, moveCallback) {
	    this._lastPosition = { x, y };
	    if (this._dragState) {
	      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
	        type: "dragOver",
	        x,
	        y,
	        data: this._dragState,
	        modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers)
	      });
	      return;
	    }
	    if (button !== "left")
	      return moveCallback();
	    const client = this._crPage._mainFrameSession._client;
	    let onDragIntercepted;
	    const dragInterceptedPromise = new Promise((x2) => onDragIntercepted = x2);
	    function setupDragListeners() {
	      let didStartDrag = Promise.resolve(false);
	      let dragEvent = null;
	      const dragListener = (event) => dragEvent = event;
	      const mouseListener = () => {
	        didStartDrag = new Promise((callback) => {
	          window.addEventListener("dragstart", dragListener, { once: true, capture: true });
	          setTimeout(() => callback(dragEvent ? !dragEvent.defaultPrevented : false), 0);
	        });
	      };
	      window.addEventListener("mousemove", mouseListener, { once: true, capture: true });
	      window.__cleanupDrag = async () => {
	        const val = await didStartDrag;
	        window.removeEventListener("mousemove", mouseListener, { capture: true });
	        window.removeEventListener("dragstart", dragListener, { capture: true });
	        delete window.__cleanupDrag;
	        return val;
	      };
	    }
	    await this._crPage._page.safeNonStallingEvaluateInAllFrames(`(${setupDragListeners.toString()})()`, "utility");
	    client.on("Input.dragIntercepted", onDragIntercepted);
	    try {
	      await client.send("Input.setInterceptDrags", { enabled: true });
	    } catch {
	      client.off("Input.dragIntercepted", onDragIntercepted);
	      return moveCallback();
	    }
	    await moveCallback();
	    const expectingDrag = (await Promise.all(this._crPage._page.frames().map(async (frame) => {
	      return frame.nonStallingEvaluateInExistingContext("window.__cleanupDrag && window.__cleanupDrag()", "utility").catch(() => false);
	    }))).some((x2) => x2);
	    this._dragState = expectingDrag ? (await dragInterceptedPromise).data : null;
	    client.off("Input.dragIntercepted", onDragIntercepted);
	    await client.send("Input.setInterceptDrags", { enabled: false });
	    if (this._dragState) {
	      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
	        type: "dragEnter",
	        x,
	        y,
	        data: this._dragState,
	        modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers)
	      });
	    }
	  }
	  isDragging() {
	    return !!this._dragState;
	  }
	  async drop(x, y, modifiers) {
	    (0, import_utils.assert)(this._dragState, "missing drag state");
	    await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
	      type: "drop",
	      x,
	      y,
	      data: this._dragState,
	      modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers)
	    });
	    this._dragState = null;
	  }
	}
	return crDragDrop;
}

var crExecutionContext;
var hasRequiredCrExecutionContext;

function requireCrExecutionContext () {
	if (hasRequiredCrExecutionContext) return crExecutionContext;
	hasRequiredCrExecutionContext = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crExecutionContext_exports = {};
	__export(crExecutionContext_exports, {
	  CRExecutionContext: () => CRExecutionContext,
	  createHandle: () => createHandle
	});
	crExecutionContext = __toCommonJS(crExecutionContext_exports);
	var import_assert = requireAssert$1();
	var import_crProtocolHelper = requireCrProtocolHelper();
	var import_stackTrace = requireStackTrace();
	var js = __toESM(requireJavascript$1());
	var dom = __toESM(requireDom());
	var import_protocolError = requireProtocolError();
	class CRExecutionContext {
	  constructor(client, contextPayload) {
	    this._client = client;
	    this._contextId = contextPayload.id;
	  }
	  async rawEvaluateJSON(expression) {
	    const { exceptionDetails, result: remoteObject } = await this._client.send("Runtime.evaluate", {
	      expression,
	      contextId: this._contextId,
	      returnByValue: true
	    }).catch(rewriteError);
	    if (exceptionDetails)
	      throw new js.JavaScriptErrorInEvaluate((0, import_crProtocolHelper.getExceptionMessage)(exceptionDetails));
	    return remoteObject.value;
	  }
	  async rawEvaluateHandle(context, expression) {
	    const { exceptionDetails, result: remoteObject } = await this._client.send("Runtime.evaluate", {
	      expression,
	      contextId: this._contextId
	    }).catch(rewriteError);
	    if (exceptionDetails)
	      throw new js.JavaScriptErrorInEvaluate((0, import_crProtocolHelper.getExceptionMessage)(exceptionDetails));
	    return createHandle(context, remoteObject);
	  }
	  async evaluateWithArguments(expression, returnByValue, utilityScript, values, handles) {
	    const { exceptionDetails, result: remoteObject } = await this._client.send("Runtime.callFunctionOn", {
	      functionDeclaration: expression,
	      objectId: utilityScript._objectId,
	      arguments: [
	        { objectId: utilityScript._objectId },
	        ...values.map((value) => ({ value })),
	        ...handles.map((handle) => ({ objectId: handle._objectId }))
	      ],
	      returnByValue,
	      awaitPromise: true,
	      userGesture: true
	    }).catch(rewriteError);
	    if (exceptionDetails)
	      throw new js.JavaScriptErrorInEvaluate((0, import_crProtocolHelper.getExceptionMessage)(exceptionDetails));
	    return returnByValue ? js.parseEvaluationResultValue(remoteObject.value) : createHandle(utilityScript._context, remoteObject);
	  }
	  async getProperties(object) {
	    const response = await this._client.send("Runtime.getProperties", {
	      objectId: object._objectId,
	      ownProperties: true
	    });
	    const result = /* @__PURE__ */ new Map();
	    for (const property of response.result) {
	      if (!property.enumerable || !property.value)
	        continue;
	      result.set(property.name, createHandle(object._context, property.value));
	    }
	    return result;
	  }
	  async releaseHandle(handle) {
	    if (!handle._objectId)
	      return;
	    await (0, import_crProtocolHelper.releaseObject)(this._client, handle._objectId);
	  }
	}
	function rewriteError(error) {
	  if (error.message.includes("Object reference chain is too long"))
	    throw new Error("Cannot serialize result: object reference chain is too long.");
	  if (error.message.includes("Object couldn't be returned by value"))
	    return { result: { type: "undefined" } };
	  if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON"))
	    (0, import_stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
	  if (!js.isJavaScriptErrorInEvaluate(error) && !(0, import_protocolError.isSessionClosedError)(error))
	    throw new Error("Execution context was destroyed, most likely because of a navigation.");
	  throw error;
	}
	function potentiallyUnserializableValue(remoteObject) {
	  const value = remoteObject.value;
	  const unserializableValue = remoteObject.unserializableValue;
	  return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
	}
	function renderPreview(object) {
	  if (object.type === "undefined")
	    return "undefined";
	  if ("value" in object)
	    return String(object.value);
	  if (object.unserializableValue)
	    return String(object.unserializableValue);
	  if (object.description === "Object" && object.preview) {
	    const tokens = [];
	    for (const { name, value } of object.preview.properties)
	      tokens.push(`${name}: ${value}`);
	    return `{${tokens.join(", ")}}`;
	  }
	  if (object.subtype === "array" && object.preview)
	    return js.sparseArrayToString(object.preview.properties);
	  return object.description;
	}
	function createHandle(context, remoteObject) {
	  if (remoteObject.subtype === "node") {
	    (0, import_assert.assert)(context instanceof dom.FrameExecutionContext);
	    return new dom.ElementHandle(context, remoteObject.objectId);
	  }
	  return new js.JSHandle(context, remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
	}
	return crExecutionContext;
}

var macEditingCommands_1;
var hasRequiredMacEditingCommands;

function requireMacEditingCommands () {
	if (hasRequiredMacEditingCommands) return macEditingCommands_1;
	hasRequiredMacEditingCommands = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var macEditingCommands_exports = {};
	__export(macEditingCommands_exports, {
	  macEditingCommands: () => macEditingCommands
	});
	macEditingCommands_1 = __toCommonJS(macEditingCommands_exports);
	const macEditingCommands = {
	  "Backspace": "deleteBackward:",
	  "Enter": "insertNewline:",
	  "NumpadEnter": "insertNewline:",
	  "Escape": "cancelOperation:",
	  "ArrowUp": "moveUp:",
	  "ArrowDown": "moveDown:",
	  "ArrowLeft": "moveLeft:",
	  "ArrowRight": "moveRight:",
	  "F5": "complete:",
	  "Delete": "deleteForward:",
	  "Home": "scrollToBeginningOfDocument:",
	  "End": "scrollToEndOfDocument:",
	  "PageUp": "scrollPageUp:",
	  "PageDown": "scrollPageDown:",
	  "Shift+Backspace": "deleteBackward:",
	  "Shift+Enter": "insertNewline:",
	  "Shift+NumpadEnter": "insertNewline:",
	  "Shift+Escape": "cancelOperation:",
	  "Shift+ArrowUp": "moveUpAndModifySelection:",
	  "Shift+ArrowDown": "moveDownAndModifySelection:",
	  "Shift+ArrowLeft": "moveLeftAndModifySelection:",
	  "Shift+ArrowRight": "moveRightAndModifySelection:",
	  "Shift+F5": "complete:",
	  "Shift+Delete": "deleteForward:",
	  "Shift+Home": "moveToBeginningOfDocumentAndModifySelection:",
	  "Shift+End": "moveToEndOfDocumentAndModifySelection:",
	  "Shift+PageUp": "pageUpAndModifySelection:",
	  "Shift+PageDown": "pageDownAndModifySelection:",
	  "Shift+Numpad5": "delete:",
	  "Control+Tab": "selectNextKeyView:",
	  "Control+Enter": "insertLineBreak:",
	  "Control+NumpadEnter": "insertLineBreak:",
	  "Control+Quote": "insertSingleQuoteIgnoringSubstitution:",
	  "Control+KeyA": "moveToBeginningOfParagraph:",
	  "Control+KeyB": "moveBackward:",
	  "Control+KeyD": "deleteForward:",
	  "Control+KeyE": "moveToEndOfParagraph:",
	  "Control+KeyF": "moveForward:",
	  "Control+KeyH": "deleteBackward:",
	  "Control+KeyK": "deleteToEndOfParagraph:",
	  "Control+KeyL": "centerSelectionInVisibleArea:",
	  "Control+KeyN": "moveDown:",
	  "Control+KeyO": ["insertNewlineIgnoringFieldEditor:", "moveBackward:"],
	  "Control+KeyP": "moveUp:",
	  "Control+KeyT": "transpose:",
	  "Control+KeyV": "pageDown:",
	  "Control+KeyY": "yank:",
	  "Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
	  "Control+ArrowUp": "scrollPageUp:",
	  "Control+ArrowDown": "scrollPageDown:",
	  "Control+ArrowLeft": "moveToLeftEndOfLine:",
	  "Control+ArrowRight": "moveToRightEndOfLine:",
	  "Shift+Control+Enter": "insertLineBreak:",
	  "Shift+Control+NumpadEnter": "insertLineBreak:",
	  "Shift+Control+Tab": "selectPreviousKeyView:",
	  "Shift+Control+Quote": "insertDoubleQuoteIgnoringSubstitution:",
	  "Shift+Control+KeyA": "moveToBeginningOfParagraphAndModifySelection:",
	  "Shift+Control+KeyB": "moveBackwardAndModifySelection:",
	  "Shift+Control+KeyE": "moveToEndOfParagraphAndModifySelection:",
	  "Shift+Control+KeyF": "moveForwardAndModifySelection:",
	  "Shift+Control+KeyN": "moveDownAndModifySelection:",
	  "Shift+Control+KeyP": "moveUpAndModifySelection:",
	  "Shift+Control+KeyV": "pageDownAndModifySelection:",
	  "Shift+Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
	  "Shift+Control+ArrowUp": "scrollPageUp:",
	  "Shift+Control+ArrowDown": "scrollPageDown:",
	  "Shift+Control+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
	  "Shift+Control+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
	  "Alt+Backspace": "deleteWordBackward:",
	  "Alt+Enter": "insertNewlineIgnoringFieldEditor:",
	  "Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
	  "Alt+Escape": "complete:",
	  "Alt+ArrowUp": ["moveBackward:", "moveToBeginningOfParagraph:"],
	  "Alt+ArrowDown": ["moveForward:", "moveToEndOfParagraph:"],
	  "Alt+ArrowLeft": "moveWordLeft:",
	  "Alt+ArrowRight": "moveWordRight:",
	  "Alt+Delete": "deleteWordForward:",
	  "Alt+PageUp": "pageUp:",
	  "Alt+PageDown": "pageDown:",
	  "Shift+Alt+Backspace": "deleteWordBackward:",
	  "Shift+Alt+Enter": "insertNewlineIgnoringFieldEditor:",
	  "Shift+Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
	  "Shift+Alt+Escape": "complete:",
	  "Shift+Alt+ArrowUp": "moveParagraphBackwardAndModifySelection:",
	  "Shift+Alt+ArrowDown": "moveParagraphForwardAndModifySelection:",
	  "Shift+Alt+ArrowLeft": "moveWordLeftAndModifySelection:",
	  "Shift+Alt+ArrowRight": "moveWordRightAndModifySelection:",
	  "Shift+Alt+Delete": "deleteWordForward:",
	  "Shift+Alt+PageUp": "pageUp:",
	  "Shift+Alt+PageDown": "pageDown:",
	  "Control+Alt+KeyB": "moveWordBackward:",
	  "Control+Alt+KeyF": "moveWordForward:",
	  "Control+Alt+Backspace": "deleteWordBackward:",
	  "Shift+Control+Alt+KeyB": "moveWordBackwardAndModifySelection:",
	  "Shift+Control+Alt+KeyF": "moveWordForwardAndModifySelection:",
	  "Shift+Control+Alt+Backspace": "deleteWordBackward:",
	  "Meta+NumpadSubtract": "cancel:",
	  "Meta+Backspace": "deleteToBeginningOfLine:",
	  "Meta+ArrowUp": "moveToBeginningOfDocument:",
	  "Meta+ArrowDown": "moveToEndOfDocument:",
	  "Meta+ArrowLeft": "moveToLeftEndOfLine:",
	  "Meta+ArrowRight": "moveToRightEndOfLine:",
	  "Shift+Meta+NumpadSubtract": "cancel:",
	  "Shift+Meta+Backspace": "deleteToBeginningOfLine:",
	  "Shift+Meta+ArrowUp": "moveToBeginningOfDocumentAndModifySelection:",
	  "Shift+Meta+ArrowDown": "moveToEndOfDocumentAndModifySelection:",
	  "Shift+Meta+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
	  "Shift+Meta+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
	  "Meta+KeyA": "selectAll:",
	  "Meta+KeyC": "copy:",
	  "Meta+KeyX": "cut:",
	  "Meta+KeyV": "paste:",
	  "Meta+KeyZ": "undo:",
	  "Shift+Meta+KeyZ": "redo:"
	};
	return macEditingCommands_1;
}

var crInput;
var hasRequiredCrInput;

function requireCrInput () {
	if (hasRequiredCrInput) return crInput;
	hasRequiredCrInput = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crInput_exports = {};
	__export(crInput_exports, {
	  RawKeyboardImpl: () => RawKeyboardImpl,
	  RawMouseImpl: () => RawMouseImpl,
	  RawTouchscreenImpl: () => RawTouchscreenImpl
	});
	crInput = __toCommonJS(crInput_exports);
	var import_utils = requireUtils();
	var input = __toESM(requireInput$1());
	var import_macEditingCommands = requireMacEditingCommands();
	var import_crProtocolHelper = requireCrProtocolHelper();
	class RawKeyboardImpl {
	  constructor(_client, _isMac, _dragManger) {
	    this._client = _client;
	    this._isMac = _isMac;
	    this._dragManger = _dragManger;
	  }
	  _commandsForCode(code, modifiers) {
	    if (!this._isMac)
	      return [];
	    const parts = [];
	    for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
	      if (modifiers.has(modifier))
	        parts.push(modifier);
	    }
	    parts.push(code);
	    const shortcut = parts.join("+");
	    let commands = import_macEditingCommands.macEditingCommands[shortcut] || [];
	    if ((0, import_utils.isString)(commands))
	      commands = [commands];
	    commands = commands.filter((x) => !x.startsWith("insert"));
	    return commands.map((c) => c.substring(0, c.length - 1));
	  }
	  async keydown(modifiers, keyName, description, autoRepeat) {
	    const { code, key, location, text } = description;
	    if (code === "Escape" && await this._dragManger.cancelDrag())
	      return;
	    const commands = this._commandsForCode(code, modifiers);
	    await this._client.send("Input.dispatchKeyEvent", {
	      type: text ? "keyDown" : "rawKeyDown",
	      modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers),
	      windowsVirtualKeyCode: description.keyCodeWithoutLocation,
	      code,
	      commands,
	      key,
	      text,
	      unmodifiedText: text,
	      autoRepeat,
	      location,
	      isKeypad: location === input.keypadLocation
	    });
	  }
	  async keyup(modifiers, keyName, description) {
	    const { code, key, location } = description;
	    await this._client.send("Input.dispatchKeyEvent", {
	      type: "keyUp",
	      modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers),
	      key,
	      windowsVirtualKeyCode: description.keyCodeWithoutLocation,
	      code,
	      location
	    });
	  }
	  async sendText(text) {
	    await this._client.send("Input.insertText", { text });
	  }
	}
	class RawMouseImpl {
	  constructor(page, client, dragManager) {
	    this._page = page;
	    this._client = client;
	    this._dragManager = dragManager;
	  }
	  async move(x, y, button, buttons, modifiers, forClick) {
	    const actualMove = async () => {
	      await this._client.send("Input.dispatchMouseEvent", {
	        type: "mouseMoved",
	        button,
	        buttons: (0, import_crProtocolHelper.toButtonsMask)(buttons),
	        x,
	        y,
	        modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers)
	      });
	    };
	    if (forClick) {
	      return actualMove();
	    }
	    await this._dragManager.interceptDragCausedByMove(x, y, button, buttons, modifiers, actualMove);
	  }
	  async down(x, y, button, buttons, modifiers, clickCount) {
	    if (this._dragManager.isDragging())
	      return;
	    await this._client.send("Input.dispatchMouseEvent", {
	      type: "mousePressed",
	      button,
	      buttons: (0, import_crProtocolHelper.toButtonsMask)(buttons),
	      x,
	      y,
	      modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers),
	      clickCount
	    });
	  }
	  async up(x, y, button, buttons, modifiers, clickCount) {
	    if (this._dragManager.isDragging()) {
	      await this._dragManager.drop(x, y, modifiers);
	      return;
	    }
	    await this._client.send("Input.dispatchMouseEvent", {
	      type: "mouseReleased",
	      button,
	      buttons: (0, import_crProtocolHelper.toButtonsMask)(buttons),
	      x,
	      y,
	      modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers),
	      clickCount
	    });
	  }
	  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
	    await this._client.send("Input.dispatchMouseEvent", {
	      type: "mouseWheel",
	      x,
	      y,
	      modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers),
	      deltaX,
	      deltaY
	    });
	  }
	}
	class RawTouchscreenImpl {
	  constructor(client) {
	    this._client = client;
	  }
	  async tap(x, y, modifiers) {
	    await Promise.all([
	      this._client.send("Input.dispatchTouchEvent", {
	        type: "touchStart",
	        modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers),
	        touchPoints: [{
	          x,
	          y
	        }]
	      }),
	      this._client.send("Input.dispatchTouchEvent", {
	        type: "touchEnd",
	        modifiers: (0, import_crProtocolHelper.toModifiersMask)(modifiers),
	        touchPoints: []
	      })
	    ]);
	  }
	}
	return crInput;
}

var crNetworkManager;
var hasRequiredCrNetworkManager;

function requireCrNetworkManager () {
	if (hasRequiredCrNetworkManager) return crNetworkManager;
	hasRequiredCrNetworkManager = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crNetworkManager_exports = {};
	__export(crNetworkManager_exports, {
	  CRNetworkManager: () => CRNetworkManager
	});
	crNetworkManager = __toCommonJS(crNetworkManager_exports);
	var import_utils = requireUtils();
	var import_eventsHelper = requireEventsHelper();
	var import_helper = requireHelper();
	var network = __toESM(requireNetwork$1());
	var import_protocolError = requireProtocolError();
	class CRNetworkManager {
	  constructor(page, serviceWorker) {
	    this._requestIdToRequest = /* @__PURE__ */ new Map();
	    this._requestIdToRequestWillBeSentEvent = /* @__PURE__ */ new Map();
	    this._credentials = null;
	    this._attemptedAuthentications = /* @__PURE__ */ new Set();
	    this._userRequestInterceptionEnabled = false;
	    this._protocolRequestInterceptionEnabled = false;
	    this._offline = false;
	    this._extraHTTPHeaders = [];
	    this._requestIdToRequestPausedEvent = /* @__PURE__ */ new Map();
	    this._responseExtraInfoTracker = new ResponseExtraInfoTracker();
	    this._sessions = /* @__PURE__ */ new Map();
	    this._page = page;
	    this._serviceWorker = serviceWorker;
	  }
	  async addSession(session, workerFrame, isMain) {
	    const sessionInfo = { session, isMain, workerFrame, eventListeners: [] };
	    sessionInfo.eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(session, "Fetch.requestPaused", this._onRequestPaused.bind(this, sessionInfo)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Fetch.authRequired", this._onAuthRequired.bind(this, sessionInfo)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this, sessionInfo)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSentExtraInfo", this._onRequestWillBeSentExtraInfo.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.requestServedFromCache", this._onRequestServedFromCache.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this, sessionInfo)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceivedExtraInfo", this._onResponseReceivedExtraInfo.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", this._onLoadingFinished.bind(this, sessionInfo)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", this._onLoadingFailed.bind(this, sessionInfo))
	    ];
	    if (this._page) {
	      sessionInfo.eventListeners.push(...[
	        import_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)),
	        import_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)),
	        import_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)),
	        import_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)),
	        import_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)),
	        import_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)),
	        import_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))
	      ]);
	    }
	    this._sessions.set(session, sessionInfo);
	    await Promise.all([
	      session.send("Network.enable"),
	      this._updateProtocolRequestInterceptionForSession(
	        sessionInfo,
	        true
	        /* initial */
	      ),
	      this._setOfflineForSession(
	        sessionInfo,
	        true
	        /* initial */
	      ),
	      this._setExtraHTTPHeadersForSession(
	        sessionInfo,
	        true
	        /* initial */
	      )
	    ]);
	  }
	  removeSession(session) {
	    const info = this._sessions.get(session);
	    if (info)
	      import_eventsHelper.eventsHelper.removeEventListeners(info.eventListeners);
	    this._sessions.delete(session);
	  }
	  async _forEachSession(cb) {
	    await Promise.all([...this._sessions.values()].map((info) => {
	      if (info.isMain)
	        return cb(info);
	      return cb(info).catch((e) => {
	        if ((0, import_protocolError.isSessionClosedError)(e))
	          return;
	        throw e;
	      });
	    }));
	  }
	  async authenticate(credentials) {
	    this._credentials = credentials;
	    await this._updateProtocolRequestInterception();
	  }
	  async setOffline(offline) {
	    if (offline === this._offline)
	      return;
	    this._offline = offline;
	    await this._forEachSession((info) => this._setOfflineForSession(info));
	  }
	  async _setOfflineForSession(info, initial) {
	    if (initial && !this._offline)
	      return;
	    if (info.workerFrame)
	      return;
	    await info.session.send("Network.emulateNetworkConditions", {
	      offline: this._offline,
	      // values of 0 remove any active throttling. crbug.com/456324#c9
	      latency: 0,
	      downloadThroughput: -1,
	      uploadThroughput: -1
	    });
	  }
	  async setRequestInterception(value) {
	    this._userRequestInterceptionEnabled = value;
	    await this._updateProtocolRequestInterception();
	  }
	  async _updateProtocolRequestInterception() {
	    const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
	    if (enabled === this._protocolRequestInterceptionEnabled)
	      return;
	    this._protocolRequestInterceptionEnabled = enabled;
	    await this._forEachSession((info) => this._updateProtocolRequestInterceptionForSession(info));
	  }
	  async _updateProtocolRequestInterceptionForSession(info, initial) {
	    const enabled = this._protocolRequestInterceptionEnabled;
	    if (initial && !enabled)
	      return;
	    const cachePromise = info.session.send("Network.setCacheDisabled", { cacheDisabled: enabled });
	    let fetchPromise = Promise.resolve(void 0);
	    if (!info.workerFrame) {
	      if (enabled)
	        fetchPromise = info.session.send("Fetch.enable", { handleAuthRequests: true, patterns: [{ urlPattern: "*", requestStage: "Request" }] });
	      else
	        fetchPromise = info.session.send("Fetch.disable");
	    }
	    await Promise.all([cachePromise, fetchPromise]);
	  }
	  async setExtraHTTPHeaders(extraHTTPHeaders) {
	    if (!this._extraHTTPHeaders.length && !extraHTTPHeaders.length)
	      return;
	    this._extraHTTPHeaders = extraHTTPHeaders;
	    await this._forEachSession((info) => this._setExtraHTTPHeadersForSession(info));
	  }
	  async _setExtraHTTPHeadersForSession(info, initial) {
	    if (initial && !this._extraHTTPHeaders.length)
	      return;
	    await info.session.send("Network.setExtraHTTPHeaders", { headers: (0, import_utils.headersArrayToObject)(
	      this._extraHTTPHeaders,
	      false
	      /* lowerCase */
	    ) });
	  }
	  async clearCache() {
	    await this._forEachSession(async (info) => {
	      await info.session.send("Network.setCacheDisabled", { cacheDisabled: true });
	      if (!this._protocolRequestInterceptionEnabled)
	        await info.session.send("Network.setCacheDisabled", { cacheDisabled: false });
	      if (!info.workerFrame)
	        await info.session.send("Network.clearBrowserCache");
	    });
	  }
	  _onRequestWillBeSent(sessionInfo, event) {
	    if (this._protocolRequestInterceptionEnabled && !event.request.url.startsWith("data:")) {
	      const requestId = event.requestId;
	      const requestPausedEvent = this._requestIdToRequestPausedEvent.get(requestId);
	      if (requestPausedEvent) {
	        this._onRequest(sessionInfo, event, requestPausedEvent.sessionInfo, requestPausedEvent.event);
	        this._requestIdToRequestPausedEvent.delete(requestId);
	      } else {
	        this._requestIdToRequestWillBeSentEvent.set(event.requestId, { sessionInfo, event });
	      }
	    } else {
	      this._onRequest(sessionInfo, event, void 0, void 0);
	    }
	  }
	  _onRequestServedFromCache(event) {
	    this._responseExtraInfoTracker.requestServedFromCache(event);
	  }
	  _onRequestWillBeSentExtraInfo(event) {
	    this._responseExtraInfoTracker.requestWillBeSentExtraInfo(event);
	  }
	  _onAuthRequired(sessionInfo, event) {
	    let response = "Default";
	    const shouldProvideCredentials = this._shouldProvideCredentials(event.request.url);
	    if (this._attemptedAuthentications.has(event.requestId)) {
	      response = "CancelAuth";
	    } else if (shouldProvideCredentials) {
	      response = "ProvideCredentials";
	      this._attemptedAuthentications.add(event.requestId);
	    }
	    const { username, password } = shouldProvideCredentials && this._credentials ? this._credentials : { username: void 0, password: void 0 };
	    sessionInfo.session._sendMayFail("Fetch.continueWithAuth", {
	      requestId: event.requestId,
	      authChallengeResponse: { response, username, password }
	    });
	  }
	  _shouldProvideCredentials(url) {
	    if (!this._credentials)
	      return false;
	    return !this._credentials.origin || new URL(url).origin.toLowerCase() === this._credentials.origin.toLowerCase();
	  }
	  _onRequestPaused(sessionInfo, event) {
	    if (!event.networkId) {
	      sessionInfo.session._sendMayFail("Fetch.continueRequest", { requestId: event.requestId });
	      return;
	    }
	    if (event.request.url.startsWith("data:"))
	      return;
	    const requestId = event.networkId;
	    const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(requestId);
	    if (requestWillBeSentEvent) {
	      this._onRequest(requestWillBeSentEvent.sessionInfo, requestWillBeSentEvent.event, sessionInfo, event);
	      this._requestIdToRequestWillBeSentEvent.delete(requestId);
	    } else {
	      const existingRequest = this._requestIdToRequest.get(requestId);
	      const alreadyContinuedParams = existingRequest?._route?._alreadyContinuedParams;
	      if (alreadyContinuedParams && !event.redirectedRequestId) {
	        sessionInfo.session._sendMayFail("Fetch.continueRequest", {
	          ...alreadyContinuedParams,
	          requestId: event.requestId
	        });
	        return;
	      }
	      this._requestIdToRequestPausedEvent.set(requestId, { sessionInfo, event });
	    }
	  }
	  _onRequest(requestWillBeSentSessionInfo, requestWillBeSentEvent, requestPausedSessionInfo, requestPausedEvent) {
	    if (requestWillBeSentEvent.request.url.startsWith("data:"))
	      return;
	    let redirectedFrom = null;
	    if (requestWillBeSentEvent.redirectResponse) {
	      const request2 = this._requestIdToRequest.get(requestWillBeSentEvent.requestId);
	      if (request2) {
	        this._handleRequestRedirect(request2, requestWillBeSentEvent.redirectResponse, requestWillBeSentEvent.timestamp, requestWillBeSentEvent.redirectHasExtraInfo);
	        redirectedFrom = request2;
	      }
	    }
	    let frame = requestWillBeSentEvent.frameId ? this._page?._frameManager.frame(requestWillBeSentEvent.frameId) : requestWillBeSentSessionInfo.workerFrame;
	    if (!frame && this._page && requestPausedEvent && requestPausedEvent.frameId)
	      frame = this._page._frameManager.frame(requestPausedEvent.frameId);
	    if (!frame && this._page && requestWillBeSentEvent.frameId === (this._page?._delegate)._targetId) {
	      frame = this._page._frameManager.frameAttached(requestWillBeSentEvent.frameId, null);
	    }
	    const isInterceptedOptionsPreflight = !!requestPausedEvent && requestPausedEvent.request.method === "OPTIONS" && requestWillBeSentEvent.initiator.type === "preflight";
	    if (isInterceptedOptionsPreflight && (this._page || this._serviceWorker).needsRequestInterception()) {
	      const requestHeaders = requestPausedEvent.request.headers;
	      const responseHeaders = [
	        { name: "Access-Control-Allow-Origin", value: requestHeaders["Origin"] || "*" },
	        { name: "Access-Control-Allow-Methods", value: requestHeaders["Access-Control-Request-Method"] || "GET, POST, OPTIONS, DELETE" },
	        { name: "Access-Control-Allow-Credentials", value: "true" }
	      ];
	      if (requestHeaders["Access-Control-Request-Headers"])
	        responseHeaders.push({ name: "Access-Control-Allow-Headers", value: requestHeaders["Access-Control-Request-Headers"] });
	      requestPausedSessionInfo.session._sendMayFail("Fetch.fulfillRequest", {
	        requestId: requestPausedEvent.requestId,
	        responseCode: 204,
	        responsePhrase: network.statusText(204),
	        responseHeaders,
	        body: ""
	      });
	      return;
	    }
	    if (!frame && !this._serviceWorker) {
	      if (requestPausedEvent)
	        requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", { requestId: requestPausedEvent.requestId });
	      return;
	    }
	    let route = null;
	    let headersOverride;
	    if (requestPausedEvent) {
	      if (redirectedFrom || !this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {
	        headersOverride = redirectedFrom?._originalRequestRoute?._alreadyContinuedParams?.headers;
	        requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", { requestId: requestPausedEvent.requestId, headers: headersOverride });
	      } else {
	        route = new RouteImpl(requestPausedSessionInfo.session, requestPausedEvent.requestId);
	      }
	    }
	    const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === "Document";
	    const documentId = isNavigationRequest ? requestWillBeSentEvent.loaderId : void 0;
	    const request = new InterceptableRequest({
	      session: requestWillBeSentSessionInfo.session,
	      context: (this._page || this._serviceWorker)._browserContext,
	      frame: frame || null,
	      serviceWorker: this._serviceWorker || null,
	      documentId,
	      route,
	      requestWillBeSentEvent,
	      requestPausedEvent,
	      redirectedFrom,
	      headersOverride: headersOverride || null
	    });
	    this._requestIdToRequest.set(requestWillBeSentEvent.requestId, request);
	    if (route) {
	      request.request.setRawRequestHeaders((0, import_utils.headersObjectToArray)(requestPausedEvent.request.headers, "\n"));
	    }
	    (this._page?._frameManager || this._serviceWorker).requestStarted(request.request, route || void 0);
	  }
	  _createResponse(request, responsePayload, hasExtraInfo) {
	    const getResponseBody = async () => {
	      const contentLengthHeader = Object.entries(responsePayload.headers).find((header) => header[0].toLowerCase() === "content-length");
	      const expectedLength = contentLengthHeader ? +contentLengthHeader[1] : void 0;
	      const session = request.session;
	      const response2 = await session.send("Network.getResponseBody", { requestId: request._requestId });
	      if (response2.body || !expectedLength)
	        return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
	      if (request._route?._fulfilled)
	        return Buffer.from("");
	      const resource = await session.send("Network.loadNetworkResource", { url: request.request.url(), frameId: this._serviceWorker ? void 0 : request.request.frame()._id, options: { disableCache: false, includeCredentials: true } });
	      const chunks = [];
	      while (resource.resource.stream) {
	        const chunk = await session.send("IO.read", { handle: resource.resource.stream });
	        chunks.push(Buffer.from(chunk.data, chunk.base64Encoded ? "base64" : "utf-8"));
	        if (chunk.eof) {
	          await session.send("IO.close", { handle: resource.resource.stream });
	          break;
	        }
	      }
	      return Buffer.concat(chunks);
	    };
	    const timingPayload = responsePayload.timing;
	    let timing;
	    if (timingPayload && !this._responseExtraInfoTracker.servedFromCache(request._requestId)) {
	      timing = {
	        startTime: (timingPayload.requestTime - request._timestamp + request._wallTime) * 1e3,
	        domainLookupStart: timingPayload.dnsStart,
	        domainLookupEnd: timingPayload.dnsEnd,
	        connectStart: timingPayload.connectStart,
	        secureConnectionStart: timingPayload.sslStart,
	        connectEnd: timingPayload.connectEnd,
	        requestStart: timingPayload.sendStart,
	        responseStart: timingPayload.receiveHeadersEnd
	      };
	    } else {
	      timing = {
	        startTime: request._wallTime * 1e3,
	        domainLookupStart: -1,
	        domainLookupEnd: -1,
	        connectStart: -1,
	        secureConnectionStart: -1,
	        connectEnd: -1,
	        requestStart: -1,
	        responseStart: -1
	      };
	    }
	    const response = new network.Response(request.request, responsePayload.status, responsePayload.statusText, (0, import_utils.headersObjectToArray)(responsePayload.headers), timing, getResponseBody, !!responsePayload.fromServiceWorker, responsePayload.protocol);
	    if (responsePayload?.remoteIPAddress && typeof responsePayload?.remotePort === "number") {
	      response._serverAddrFinished({
	        ipAddress: responsePayload.remoteIPAddress,
	        port: responsePayload.remotePort
	      });
	    } else {
	      response._serverAddrFinished();
	    }
	    response._securityDetailsFinished({
	      protocol: responsePayload?.securityDetails?.protocol,
	      subjectName: responsePayload?.securityDetails?.subjectName,
	      issuer: responsePayload?.securityDetails?.issuer,
	      validFrom: responsePayload?.securityDetails?.validFrom,
	      validTo: responsePayload?.securityDetails?.validTo
	    });
	    this._responseExtraInfoTracker.processResponse(request._requestId, response, hasExtraInfo);
	    return response;
	  }
	  _deleteRequest(request) {
	    this._requestIdToRequest.delete(request._requestId);
	    if (request._interceptionId)
	      this._attemptedAuthentications.delete(request._interceptionId);
	  }
	  _handleRequestRedirect(request, responsePayload, timestamp, hasExtraInfo) {
	    const response = this._createResponse(request, responsePayload, hasExtraInfo);
	    response.setTransferSize(null);
	    response.setEncodedBodySize(null);
	    response._requestFinished((timestamp - request._timestamp) * 1e3);
	    this._deleteRequest(request);
	    (this._page?._frameManager || this._serviceWorker).requestReceivedResponse(response);
	    (this._page?._frameManager || this._serviceWorker).reportRequestFinished(request.request, response);
	  }
	  _onResponseReceivedExtraInfo(event) {
	    this._responseExtraInfoTracker.responseReceivedExtraInfo(event);
	  }
	  _onResponseReceived(sessionInfo, event) {
	    let request = this._requestIdToRequest.get(event.requestId);
	    if (!request && event.response.fromServiceWorker) {
	      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
	      if (requestWillBeSentEvent) {
	        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
	        this._onRequest(sessionInfo, requestWillBeSentEvent.event, void 0, void 0);
	        request = this._requestIdToRequest.get(event.requestId);
	      }
	    }
	    if (!request)
	      return;
	    const response = this._createResponse(request, event.response, event.hasExtraInfo);
	    (this._page?._frameManager || this._serviceWorker).requestReceivedResponse(response);
	  }
	  _onLoadingFinished(sessionInfo, event) {
	    this._responseExtraInfoTracker.loadingFinished(event);
	    const request = this._requestIdToRequest.get(event.requestId);
	    if (!request)
	      return;
	    this._maybeUpdateOOPIFMainRequest(sessionInfo, request);
	    const response = request.request._existingResponse();
	    if (response) {
	      response.setTransferSize(event.encodedDataLength);
	      response.responseHeadersSize().then((size) => response.setEncodedBodySize(event.encodedDataLength - size));
	      response._requestFinished(import_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
	    }
	    this._deleteRequest(request);
	    (this._page?._frameManager || this._serviceWorker).reportRequestFinished(request.request, response);
	  }
	  _onLoadingFailed(sessionInfo, event) {
	    this._responseExtraInfoTracker.loadingFailed(event);
	    let request = this._requestIdToRequest.get(event.requestId);
	    if (!request) {
	      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
	      if (requestWillBeSentEvent) {
	        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
	        this._onRequest(sessionInfo, requestWillBeSentEvent.event, void 0, void 0);
	        request = this._requestIdToRequest.get(event.requestId);
	      }
	    }
	    if (!request)
	      return;
	    this._maybeUpdateOOPIFMainRequest(sessionInfo, request);
	    const response = request.request._existingResponse();
	    if (response) {
	      response.setTransferSize(null);
	      response.setEncodedBodySize(null);
	      response._requestFinished(import_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
	    } else {
	      request.request.setRawRequestHeaders(null);
	    }
	    this._deleteRequest(request);
	    request.request._setFailureText(event.errorText || event.blockedReason || "");
	    (this._page?._frameManager || this._serviceWorker).requestFailed(request.request, !!event.canceled);
	  }
	  _maybeUpdateOOPIFMainRequest(sessionInfo, request) {
	    if (request.session !== sessionInfo.session && !sessionInfo.isMain && request._documentId === request._requestId)
	      request.session = sessionInfo.session;
	  }
	}
	class InterceptableRequest {
	  constructor(options) {
	    const { session, context, frame, documentId, route, requestWillBeSentEvent, requestPausedEvent, redirectedFrom, serviceWorker, headersOverride } = options;
	    this.session = session;
	    this._timestamp = requestWillBeSentEvent.timestamp;
	    this._wallTime = requestWillBeSentEvent.wallTime;
	    this._requestId = requestWillBeSentEvent.requestId;
	    this._interceptionId = requestPausedEvent && requestPausedEvent.requestId;
	    this._documentId = documentId;
	    this._route = route;
	    this._originalRequestRoute = route ?? redirectedFrom?._originalRequestRoute;
	    const {
	      headers,
	      method,
	      url,
	      postDataEntries = null
	    } = requestPausedEvent ? requestPausedEvent.request : requestWillBeSentEvent.request;
	    const type = (requestWillBeSentEvent.type || "").toLowerCase();
	    let postDataBuffer = null;
	    const entries = postDataEntries?.filter((entry) => entry.bytes);
	    if (entries && entries.length)
	      postDataBuffer = Buffer.concat(entries.map((entry) => Buffer.from(entry.bytes, "base64")));
	    this.request = new network.Request(context, frame, serviceWorker, redirectedFrom?.request || null, documentId, url, type, method, postDataBuffer, headersOverride || (0, import_utils.headersObjectToArray)(headers));
	  }
	}
	class RouteImpl {
	  constructor(session, interceptionId) {
	    this._fulfilled = false;
	    this._session = session;
	    this._interceptionId = interceptionId;
	  }
	  async continue(overrides) {
	    this._alreadyContinuedParams = {
	      requestId: this._interceptionId,
	      url: overrides.url,
	      headers: overrides.headers,
	      method: overrides.method,
	      postData: overrides.postData ? overrides.postData.toString("base64") : void 0
	    };
	    await catchDisallowedErrors(async () => {
	      await this._session.send("Fetch.continueRequest", this._alreadyContinuedParams);
	    });
	  }
	  async fulfill(response) {
	    this._fulfilled = true;
	    const body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
	    const responseHeaders = splitSetCookieHeader(response.headers);
	    await catchDisallowedErrors(async () => {
	      await this._session.send("Fetch.fulfillRequest", {
	        requestId: this._interceptionId,
	        responseCode: response.status,
	        responsePhrase: network.statusText(response.status),
	        responseHeaders,
	        body
	      });
	    });
	  }
	  async abort(errorCode = "failed") {
	    const errorReason = errorReasons[errorCode];
	    (0, import_utils.assert)(errorReason, "Unknown error code: " + errorCode);
	    await catchDisallowedErrors(async () => {
	      await this._session.send("Fetch.failRequest", {
	        requestId: this._interceptionId,
	        errorReason
	      });
	    });
	  }
	}
	async function catchDisallowedErrors(callback) {
	  try {
	    return await callback();
	  } catch (e) {
	    if ((0, import_protocolError.isProtocolError)(e) && e.message.includes("Invalid http status code or phrase"))
	      throw e;
	    if ((0, import_protocolError.isProtocolError)(e) && e.message.includes("Unsafe header"))
	      throw e;
	  }
	}
	function splitSetCookieHeader(headers) {
	  const index = headers.findIndex(({ name }) => name.toLowerCase() === "set-cookie");
	  if (index === -1)
	    return headers;
	  const header = headers[index];
	  const values = header.value.split("\n");
	  if (values.length === 1)
	    return headers;
	  const result = headers.slice();
	  result.splice(index, 1, ...values.map((value) => ({ name: header.name, value })));
	  return result;
	}
	const errorReasons = {
	  "aborted": "Aborted",
	  "accessdenied": "AccessDenied",
	  "addressunreachable": "AddressUnreachable",
	  "blockedbyclient": "BlockedByClient",
	  "blockedbyresponse": "BlockedByResponse",
	  "connectionaborted": "ConnectionAborted",
	  "connectionclosed": "ConnectionClosed",
	  "connectionfailed": "ConnectionFailed",
	  "connectionrefused": "ConnectionRefused",
	  "connectionreset": "ConnectionReset",
	  "internetdisconnected": "InternetDisconnected",
	  "namenotresolved": "NameNotResolved",
	  "timedout": "TimedOut",
	  "failed": "Failed"
	};
	class ResponseExtraInfoTracker {
	  constructor() {
	    this._requests = /* @__PURE__ */ new Map();
	  }
	  requestWillBeSentExtraInfo(event) {
	    const info = this._getOrCreateEntry(event.requestId);
	    info.requestWillBeSentExtraInfo.push(event);
	    this._patchHeaders(info, info.requestWillBeSentExtraInfo.length - 1);
	    this._checkFinished(info);
	  }
	  requestServedFromCache(event) {
	    const info = this._getOrCreateEntry(event.requestId);
	    info.servedFromCache = true;
	  }
	  servedFromCache(requestId) {
	    const info = this._requests.get(requestId);
	    return !!info?.servedFromCache;
	  }
	  responseReceivedExtraInfo(event) {
	    const info = this._getOrCreateEntry(event.requestId);
	    info.responseReceivedExtraInfo.push(event);
	    this._patchHeaders(info, info.responseReceivedExtraInfo.length - 1);
	    this._checkFinished(info);
	  }
	  processResponse(requestId, response, hasExtraInfo) {
	    let info = this._requests.get(requestId);
	    if (!hasExtraInfo || info?.servedFromCache) {
	      response.request().setRawRequestHeaders(null);
	      response.setResponseHeadersSize(null);
	      response.setRawResponseHeaders(null);
	      return;
	    }
	    info = this._getOrCreateEntry(requestId);
	    info.responses.push(response);
	    this._patchHeaders(info, info.responses.length - 1);
	  }
	  loadingFinished(event) {
	    const info = this._requests.get(event.requestId);
	    if (!info)
	      return;
	    info.loadingFinished = event;
	    this._checkFinished(info);
	  }
	  loadingFailed(event) {
	    const info = this._requests.get(event.requestId);
	    if (!info)
	      return;
	    info.loadingFailed = event;
	    this._checkFinished(info);
	  }
	  _getOrCreateEntry(requestId) {
	    let info = this._requests.get(requestId);
	    if (!info) {
	      info = {
	        requestId,
	        requestWillBeSentExtraInfo: [],
	        responseReceivedExtraInfo: [],
	        responses: []
	      };
	      this._requests.set(requestId, info);
	    }
	    return info;
	  }
	  _patchHeaders(info, index) {
	    const response = info.responses[index];
	    const requestExtraInfo = info.requestWillBeSentExtraInfo[index];
	    if (response && requestExtraInfo) {
	      response.request().setRawRequestHeaders((0, import_utils.headersObjectToArray)(requestExtraInfo.headers, "\n"));
	      info.requestWillBeSentExtraInfo[index] = void 0;
	    }
	    const responseExtraInfo = info.responseReceivedExtraInfo[index];
	    if (response && responseExtraInfo) {
	      response.setResponseHeadersSize(responseExtraInfo.headersText?.length || 0);
	      response.setRawResponseHeaders((0, import_utils.headersObjectToArray)(responseExtraInfo.headers, "\n"));
	      info.responseReceivedExtraInfo[index] = void 0;
	    }
	  }
	  _checkFinished(info) {
	    if (!info.loadingFinished && !info.loadingFailed)
	      return;
	    if (info.responses.length <= info.responseReceivedExtraInfo.length) {
	      this._stopTracking(info.requestId);
	      return;
	    }
	  }
	  _stopTracking(requestId) {
	    this._requests.delete(requestId);
	  }
	}
	return crNetworkManager;
}

var crPdf;
var hasRequiredCrPdf;

function requireCrPdf () {
	if (hasRequiredCrPdf) return crPdf;
	hasRequiredCrPdf = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crPdf_exports = {};
	__export(crPdf_exports, {
	  CRPDF: () => CRPDF
	});
	crPdf = __toCommonJS(crPdf_exports);
	var import_crProtocolHelper = requireCrProtocolHelper();
	var import_utils = requireUtils();
	const PagePaperFormats = {
	  letter: { width: 8.5, height: 11 },
	  legal: { width: 8.5, height: 14 },
	  tabloid: { width: 11, height: 17 },
	  ledger: { width: 17, height: 11 },
	  a0: { width: 33.1, height: 46.8 },
	  a1: { width: 23.4, height: 33.1 },
	  a2: { width: 16.54, height: 23.4 },
	  a3: { width: 11.7, height: 16.54 },
	  a4: { width: 8.27, height: 11.7 },
	  a5: { width: 5.83, height: 8.27 },
	  a6: { width: 4.13, height: 5.83 }
	};
	const unitToPixels = {
	  "px": 1,
	  "in": 96,
	  "cm": 37.8,
	  "mm": 3.78
	};
	function convertPrintParameterToInches(text) {
	  if (text === void 0)
	    return void 0;
	  let unit = text.substring(text.length - 2).toLowerCase();
	  let valueText = "";
	  if (unitToPixels.hasOwnProperty(unit)) {
	    valueText = text.substring(0, text.length - 2);
	  } else {
	    unit = "px";
	    valueText = text;
	  }
	  const value = Number(valueText);
	  (0, import_utils.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
	  const pixels = value * unitToPixels[unit];
	  return pixels / 96;
	}
	class CRPDF {
	  constructor(client) {
	    this._client = client;
	  }
	  async generate(options) {
	    const {
	      scale = 1,
	      displayHeaderFooter = false,
	      headerTemplate = "",
	      footerTemplate = "",
	      printBackground = false,
	      landscape = false,
	      pageRanges = "",
	      preferCSSPageSize = false,
	      margin = {},
	      tagged = false,
	      outline = false
	    } = options;
	    let paperWidth = 8.5;
	    let paperHeight = 11;
	    if (options.format) {
	      const format = PagePaperFormats[options.format.toLowerCase()];
	      (0, import_utils.assert)(format, "Unknown paper format: " + options.format);
	      paperWidth = format.width;
	      paperHeight = format.height;
	    } else {
	      paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
	      paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
	    }
	    const marginTop = convertPrintParameterToInches(margin.top) || 0;
	    const marginLeft = convertPrintParameterToInches(margin.left) || 0;
	    const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;
	    const marginRight = convertPrintParameterToInches(margin.right) || 0;
	    const generateDocumentOutline = outline;
	    const generateTaggedPDF = tagged;
	    const result = await this._client.send("Page.printToPDF", {
	      transferMode: "ReturnAsStream",
	      landscape,
	      displayHeaderFooter,
	      headerTemplate,
	      footerTemplate,
	      printBackground,
	      scale,
	      paperWidth,
	      paperHeight,
	      marginTop,
	      marginBottom,
	      marginLeft,
	      marginRight,
	      pageRanges,
	      preferCSSPageSize,
	      generateTaggedPDF,
	      generateDocumentOutline
	    });
	    return await (0, import_crProtocolHelper.readProtocolStream)(this._client, result.stream);
	  }
	}
	return crPdf;
}

var defaultFontFamilies;
var hasRequiredDefaultFontFamilies;

function requireDefaultFontFamilies () {
	if (hasRequiredDefaultFontFamilies) return defaultFontFamilies;
	hasRequiredDefaultFontFamilies = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var defaultFontFamilies_exports = {};
	__export(defaultFontFamilies_exports, {
	  platformToFontFamilies: () => platformToFontFamilies
	});
	defaultFontFamilies = __toCommonJS(defaultFontFamilies_exports);
	const platformToFontFamilies = {
	  "linux": {
	    "fontFamilies": {
	      "standard": "Times New Roman",
	      "fixed": "Monospace",
	      "serif": "Times New Roman",
	      "sansSerif": "Arial",
	      "cursive": "Comic Sans MS",
	      "fantasy": "Impact"
	    }
	  },
	  "mac": {
	    "fontFamilies": {
	      "standard": "Times",
	      "fixed": "Courier",
	      "serif": "Times",
	      "sansSerif": "Helvetica",
	      "cursive": "Apple Chancery",
	      "fantasy": "Papyrus"
	    },
	    "forScripts": [
	      {
	        "script": "jpan",
	        "fontFamilies": {
	          "standard": "Hiragino Kaku Gothic ProN",
	          "fixed": "Osaka-Mono",
	          "serif": "Hiragino Mincho ProN",
	          "sansSerif": "Hiragino Kaku Gothic ProN"
	        }
	      },
	      {
	        "script": "hang",
	        "fontFamilies": {
	          "standard": "Apple SD Gothic Neo",
	          "serif": "AppleMyungjo",
	          "sansSerif": "Apple SD Gothic Neo"
	        }
	      },
	      {
	        "script": "hans",
	        "fontFamilies": {
	          "standard": ",PingFang SC,STHeiti",
	          "serif": "Songti SC",
	          "sansSerif": ",PingFang SC,STHeiti",
	          "cursive": "Kaiti SC"
	        }
	      },
	      {
	        "script": "hant",
	        "fontFamilies": {
	          "standard": ",PingFang TC,Heiti TC",
	          "serif": "Songti TC",
	          "sansSerif": ",PingFang TC,Heiti TC",
	          "cursive": "Kaiti TC"
	        }
	      }
	    ]
	  },
	  "win": {
	    "fontFamilies": {
	      "standard": "Times New Roman",
	      "fixed": "Consolas",
	      "serif": "Times New Roman",
	      "sansSerif": "Arial",
	      "cursive": "Comic Sans MS",
	      "fantasy": "Impact"
	    },
	    "forScripts": [
	      {
	        "script": "cyrl",
	        "fontFamilies": {
	          "standard": "Times New Roman",
	          "fixed": "Courier New",
	          "serif": "Times New Roman",
	          "sansSerif": "Arial"
	        }
	      },
	      {
	        "script": "arab",
	        "fontFamilies": {
	          "fixed": "Courier New",
	          "sansSerif": "Segoe UI"
	        }
	      },
	      {
	        "script": "grek",
	        "fontFamilies": {
	          "standard": "Times New Roman",
	          "fixed": "Courier New",
	          "serif": "Times New Roman",
	          "sansSerif": "Arial"
	        }
	      },
	      {
	        "script": "jpan",
	        "fontFamilies": {
	          "standard": ",Meiryo,Yu Gothic",
	          "fixed": "MS Gothic",
	          "serif": ",Yu Mincho,MS PMincho",
	          "sansSerif": ",Meiryo,Yu Gothic"
	        }
	      },
	      {
	        "script": "hang",
	        "fontFamilies": {
	          "standard": "Malgun Gothic",
	          "fixed": "Gulimche",
	          "serif": "Batang",
	          "sansSerif": "Malgun Gothic",
	          "cursive": "Gungsuh"
	        }
	      },
	      {
	        "script": "hans",
	        "fontFamilies": {
	          "standard": "Microsoft YaHei",
	          "fixed": "NSimsun",
	          "serif": "Simsun",
	          "sansSerif": "Microsoft YaHei",
	          "cursive": "KaiTi"
	        }
	      },
	      {
	        "script": "hant",
	        "fontFamilies": {
	          "standard": "Microsoft JhengHei",
	          "fixed": "MingLiU",
	          "serif": "PMingLiU",
	          "sansSerif": "Microsoft JhengHei",
	          "cursive": "DFKai-SB"
	        }
	      }
	    ]
	  }
	};
	return defaultFontFamilies;
}

var videoRecorder;
var hasRequiredVideoRecorder;

function requireVideoRecorder () {
	if (hasRequiredVideoRecorder) return videoRecorder;
	hasRequiredVideoRecorder = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var videoRecorder_exports = {};
	__export(videoRecorder_exports, {
	  VideoRecorder: () => VideoRecorder
	});
	videoRecorder = __toCommonJS(videoRecorder_exports);
	var import_utils = requireUtils();
	var import_instrumentation = requireInstrumentation();
	var import_page = requirePage$1();
	var import_processLauncher = requireProcessLauncher();
	var import_progress = requireProgress();
	const fps = 25;
	class VideoRecorder {
	  constructor(page, ffmpegPath, progress) {
	    this._process = null;
	    this._gracefullyClose = null;
	    this._lastWritePromise = Promise.resolve();
	    this._lastFrameTimestamp = 0;
	    this._lastFrameBuffer = null;
	    this._lastWriteTimestamp = 0;
	    this._frameQueue = [];
	    this._isStopped = false;
	    this._progress = progress;
	    this._ffmpegPath = ffmpegPath;
	    page.on(import_page.Page.Events.ScreencastFrame, (frame) => this.writeFrame(frame.buffer, frame.frameSwapWallTime / 1e3));
	  }
	  static async launch(page, ffmpegPath, options) {
	    if (!options.outputFile.endsWith(".webm"))
	      throw new Error("File must have .webm extension");
	    const controller = new import_progress.ProgressController((0, import_instrumentation.serverSideCallMetadata)(), page);
	    controller.setLogName("browser");
	    return await controller.run(async (progress) => {
	      const recorder = new VideoRecorder(page, ffmpegPath, progress);
	      await recorder._launch(options);
	      return recorder;
	    });
	  }
	  async _launch(options) {
	    const w = options.width;
	    const h = options.height;
	    const args = `-loglevel error -f image2pipe -avioflags direct -fpsprobesize 0 -probesize 32 -analyzeduration 0 -c:v mjpeg -i pipe:0 -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -speed 8 -b:v 1M -threads 1 -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(" ");
	    args.push(options.outputFile);
	    const progress = this._progress;
	    const { launchedProcess, gracefullyClose } = await (0, import_processLauncher.launchProcess)({
	      command: this._ffmpegPath,
	      args,
	      stdio: "stdin",
	      log: (message) => progress.log(message),
	      tempDirectories: [],
	      attemptToGracefullyClose: async () => {
	        progress.log("Closing stdin...");
	        launchedProcess.stdin.end();
	      },
	      onExit: (exitCode, signal) => {
	        progress.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);
	      }
	    });
	    launchedProcess.stdin.on("finish", () => {
	      progress.log("ffmpeg finished input.");
	    });
	    launchedProcess.stdin.on("error", () => {
	      progress.log("ffmpeg error.");
	    });
	    this._process = launchedProcess;
	    this._gracefullyClose = gracefullyClose;
	  }
	  writeFrame(frame, timestamp) {
	    (0, import_utils.assert)(this._process);
	    if (this._isStopped)
	      return;
	    if (this._lastFrameBuffer) {
	      const durationSec = timestamp - this._lastFrameTimestamp;
	      const repeatCount = Math.max(1, Math.round(fps * durationSec));
	      for (let i = 0; i < repeatCount; ++i)
	        this._frameQueue.push(this._lastFrameBuffer);
	      this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());
	    }
	    this._lastFrameBuffer = frame;
	    this._lastFrameTimestamp = timestamp;
	    this._lastWriteTimestamp = (0, import_utils.monotonicTime)();
	  }
	  async _sendFrames() {
	    while (this._frameQueue.length)
	      await this._sendFrame(this._frameQueue.shift());
	  }
	  async _sendFrame(frame) {
	    return new Promise((f) => this._process.stdin.write(frame, f)).then((error) => {
	      if (error)
	        this._progress.log(`ffmpeg failed to write: ${String(error)}`);
	    });
	  }
	  async stop() {
	    if (this._isStopped)
	      return;
	    this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + ((0, import_utils.monotonicTime)() - this._lastWriteTimestamp) / 1e3);
	    this._isStopped = true;
	    await this._lastWritePromise;
	    await this._gracefullyClose();
	  }
	}
	return videoRecorder;
}

var crPage;
var hasRequiredCrPage;

function requireCrPage () {
	if (hasRequiredCrPage) return crPage;
	hasRequiredCrPage = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crPage_exports = {};
	__export(crPage_exports, {
	  CRPage: () => CRPage
	});
	crPage = __toCommonJS(crPage_exports);
	var import_path = __toESM(require$$1$1);
	var import_assert = requireAssert$1();
	var import_crypto = requireCrypto();
	var import_eventsHelper = requireEventsHelper();
	var import_stackTrace = requireStackTrace();
	var dialog = __toESM(requireDialog$1());
	var dom = __toESM(requireDom());
	var frames = __toESM(requireFrames());
	var import_helper = requireHelper();
	var network = __toESM(requireNetwork$1());
	var import_page = requirePage$1();
	var import_page2 = requirePage$1();
	var import_registry = requireRegistry();
	var import_crAccessibility = requireCrAccessibility();
	var import_crBrowser = requireCrBrowser();
	var import_crCoverage = requireCrCoverage();
	var import_crDragDrop = requireCrDragDrop();
	var import_crExecutionContext = requireCrExecutionContext();
	var import_crInput = requireCrInput();
	var import_crNetworkManager = requireCrNetworkManager();
	var import_crPdf = requireCrPdf();
	var import_crProtocolHelper = requireCrProtocolHelper();
	var import_defaultFontFamilies = requireDefaultFontFamilies();
	var import_videoRecorder = requireVideoRecorder();
	var import_browserContext = requireBrowserContext$1();
	var import_errors = requireErrors$1();
	var import_protocolError = requireProtocolError();
	const UTILITY_WORLD_NAME = "__playwright_utility_world__";
	class CRPage {
	  constructor(client, targetId, browserContext, opener, bits) {
	    this._sessions = /* @__PURE__ */ new Map();
	    // Holds window features for the next popup being opened via window.open,
	    // until the popup target arrives. This could be racy if two oopifs
	    // simultaneously call window.open with window features: the order
	    // of their Page.windowOpen events is not guaranteed to match the order
	    // of new popup targets.
	    this._nextWindowOpenPopupFeatures = [];
	    this._targetId = targetId;
	    this._opener = opener;
	    this._isBackgroundPage = bits.isBackgroundPage;
	    const dragManager = new import_crDragDrop.DragManager(this);
	    this.rawKeyboard = new import_crInput.RawKeyboardImpl(client, browserContext._browser._platform() === "mac", dragManager);
	    this.rawMouse = new import_crInput.RawMouseImpl(this, client, dragManager);
	    this.rawTouchscreen = new import_crInput.RawTouchscreenImpl(client);
	    this._pdf = new import_crPdf.CRPDF(client);
	    this._coverage = new import_crCoverage.CRCoverage(client);
	    this._browserContext = browserContext;
	    this._page = new import_page2.Page(this, browserContext);
	    this._networkManager = new import_crNetworkManager.CRNetworkManager(this._page, null);
	    this.updateOffline();
	    this.updateExtraHTTPHeaders();
	    this.updateHttpCredentials();
	    this.updateRequestInterception();
	    this._mainFrameSession = new FrameSession(this, client, targetId, null);
	    this._sessions.set(targetId, this._mainFrameSession);
	    if (opener && !browserContext._options.noDefaultViewport) {
	      const features = opener._nextWindowOpenPopupFeatures.shift() || [];
	      const viewportSize = import_helper.helper.getViewportSizeFromWindowFeatures(features);
	      if (viewportSize)
	        this._page._emulatedSize = { viewport: viewportSize, screen: viewportSize };
	    }
	    const createdEvent = this._isBackgroundPage ? import_crBrowser.CRBrowserContext.CREvents.BackgroundPage : import_browserContext.BrowserContext.Events.Page;
	    this._mainFrameSession._initialize(bits.hasUIWindow).then(
	      () => this._page.reportAsNew(this._opener?._page, void 0, createdEvent),
	      (error) => this._page.reportAsNew(this._opener?._page, error, createdEvent)
	    );
	  }
	  static mainFrameSession(page) {
	    const crPage = page._delegate;
	    return crPage._mainFrameSession;
	  }
	  async _forAllFrameSessions(cb) {
	    const frameSessions = Array.from(this._sessions.values());
	    await Promise.all(frameSessions.map((frameSession) => {
	      if (frameSession._isMainFrame())
	        return cb(frameSession);
	      return cb(frameSession).catch((e) => {
	        if ((0, import_protocolError.isSessionClosedError)(e))
	          return;
	        throw e;
	      });
	    }));
	  }
	  _sessionForFrame(frame) {
	    while (!this._sessions.has(frame._id)) {
	      const parent = frame.parentFrame();
	      if (!parent)
	        throw new Error(`Frame has been detached.`);
	      frame = parent;
	    }
	    return this._sessions.get(frame._id);
	  }
	  _sessionForHandle(handle) {
	    const frame = handle._context.frame;
	    return this._sessionForFrame(frame);
	  }
	  willBeginDownload() {
	    this._mainFrameSession._willBeginDownload();
	  }
	  didClose() {
	    for (const session of this._sessions.values())
	      session.dispose();
	    this._page._didClose();
	  }
	  async navigateFrame(frame, url, referrer) {
	    return this._sessionForFrame(frame)._navigate(frame, url, referrer);
	  }
	  async updateExtraHTTPHeaders() {
	    const headers = network.mergeHeaders([
	      this._browserContext._options.extraHTTPHeaders,
	      this._page.extraHTTPHeaders()
	    ]);
	    await this._networkManager.setExtraHTTPHeaders(headers);
	  }
	  async updateGeolocation() {
	    await this._forAllFrameSessions((frame) => frame._updateGeolocation(false));
	  }
	  async updateOffline() {
	    await this._networkManager.setOffline(!!this._browserContext._options.offline);
	  }
	  async updateHttpCredentials() {
	    await this._networkManager.authenticate(this._browserContext._options.httpCredentials || null);
	  }
	  async updateEmulatedViewportSize(preserveWindowBoundaries) {
	    await this._mainFrameSession._updateViewport(preserveWindowBoundaries);
	  }
	  async bringToFront() {
	    await this._mainFrameSession._client.send("Page.bringToFront");
	  }
	  async updateEmulateMedia() {
	    await this._forAllFrameSessions((frame) => frame._updateEmulateMedia());
	  }
	  async updateUserAgent() {
	    await this._forAllFrameSessions((frame) => frame._updateUserAgent());
	  }
	  async updateRequestInterception() {
	    await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
	  }
	  async updateFileChooserInterception() {
	    await this._forAllFrameSessions((frame) => frame._updateFileChooserInterception(false));
	  }
	  async reload() {
	    await this._mainFrameSession._client.send("Page.reload");
	  }
	  async _go(delta) {
	    const history = await this._mainFrameSession._client.send("Page.getNavigationHistory");
	    const entry = history.entries[history.currentIndex + delta];
	    if (!entry)
	      return false;
	    await this._mainFrameSession._client.send("Page.navigateToHistoryEntry", { entryId: entry.id });
	    return true;
	  }
	  goBack() {
	    return this._go(-1);
	  }
	  goForward() {
	    return this._go(1);
	  }
	  async requestGC() {
	    await this._mainFrameSession._client.send("HeapProfiler.collectGarbage");
	  }
	  async addInitScript(initScript, world = "main") {
	    await this._forAllFrameSessions((frame) => frame._evaluateOnNewDocument(initScript, world));
	  }
	  async removeNonInternalInitScripts() {
	    await this._forAllFrameSessions((frame) => frame._removeEvaluatesOnNewDocument());
	  }
	  async closePage(runBeforeUnload) {
	    if (runBeforeUnload)
	      await this._mainFrameSession._client.send("Page.close");
	    else
	      await this._browserContext._browser._closePage(this);
	  }
	  async setBackgroundColor(color) {
	    await this._mainFrameSession._client.send("Emulation.setDefaultBackgroundColorOverride", { color });
	  }
	  async takeScreenshot(progress, format, documentRect, viewportRect, quality, fitsViewport, scale) {
	    const { visualViewport } = await this._mainFrameSession._client.send("Page.getLayoutMetrics");
	    if (!documentRect) {
	      documentRect = {
	        x: visualViewport.pageX + viewportRect.x,
	        y: visualViewport.pageY + viewportRect.y,
	        ...import_helper.helper.enclosingIntSize({
	          width: viewportRect.width / visualViewport.scale,
	          height: viewportRect.height / visualViewport.scale
	        })
	      };
	    }
	    const clip = { ...documentRect, scale: viewportRect ? visualViewport.scale : 1 };
	    if (scale === "css") {
	      const deviceScaleFactor = this._browserContext._options.deviceScaleFactor || 1;
	      clip.scale /= deviceScaleFactor;
	    }
	    progress.throwIfAborted();
	    const result = await this._mainFrameSession._client.send("Page.captureScreenshot", { format, quality, clip, captureBeyondViewport: !fitsViewport });
	    return Buffer.from(result.data, "base64");
	  }
	  async getContentFrame(handle) {
	    return this._sessionForHandle(handle)._getContentFrame(handle);
	  }
	  async getOwnerFrame(handle) {
	    return this._sessionForHandle(handle)._getOwnerFrame(handle);
	  }
	  async getBoundingBox(handle) {
	    return this._sessionForHandle(handle)._getBoundingBox(handle);
	  }
	  async scrollRectIntoViewIfNeeded(handle, rect) {
	    return this._sessionForHandle(handle)._scrollRectIntoViewIfNeeded(handle, rect);
	  }
	  async setScreencastOptions(options) {
	    if (options) {
	      await this._mainFrameSession._startScreencast(this, {
	        format: "jpeg",
	        quality: options.quality,
	        maxWidth: options.width,
	        maxHeight: options.height
	      });
	    } else {
	      await this._mainFrameSession._stopScreencast(this);
	    }
	  }
	  rafCountForStablePosition() {
	    return 1;
	  }
	  async getContentQuads(handle) {
	    return this._sessionForHandle(handle)._getContentQuads(handle);
	  }
	  async setInputFilePaths(handle, files) {
	    const frame = await handle.ownerFrame();
	    if (!frame)
	      throw new Error("Cannot set input files to detached input element");
	    const parentSession = this._sessionForFrame(frame);
	    await parentSession._client.send("DOM.setFileInputFiles", {
	      objectId: handle._objectId,
	      files
	    });
	  }
	  async adoptElementHandle(handle, to) {
	    return this._sessionForHandle(handle)._adoptElementHandle(handle, to);
	  }
	  async getAccessibilityTree(needle) {
	    return (0, import_crAccessibility.getAccessibilityTree)(this._mainFrameSession._client, needle);
	  }
	  async inputActionEpilogue() {
	    await this._mainFrameSession._client.send("Page.enable").catch((e) => {
	    });
	  }
	  async resetForReuse() {
	    await this.rawMouse.move(-1, -1, "none", /* @__PURE__ */ new Set(), /* @__PURE__ */ new Set(), true);
	  }
	  async pdf(options) {
	    return this._pdf.generate(options);
	  }
	  coverage() {
	    return this._coverage;
	  }
	  async getFrameElement(frame) {
	    let parent = frame.parentFrame();
	    if (!parent)
	      throw new Error("Frame has been detached.");
	    const parentSession = this._sessionForFrame(parent);
	    const { backendNodeId } = await parentSession._client.send("DOM.getFrameOwner", { frameId: frame._id }).catch((e) => {
	      if (e instanceof Error && e.message.includes("Frame with the given id was not found."))
	        (0, import_stackTrace.rewriteErrorMessage)(e, "Frame has been detached.");
	      throw e;
	    });
	    parent = frame.parentFrame();
	    if (!parent)
	      throw new Error("Frame has been detached.");
	    return parentSession._adoptBackendNodeId(backendNodeId, await parent._mainContext());
	  }
	  shouldToggleStyleSheetToSyncAnimations() {
	    return false;
	  }
	}
	class FrameSession {
	  constructor(crPage, client, targetId, parentSession) {
	    this._childSessions = /* @__PURE__ */ new Set();
	    this._contextIdToContext = /* @__PURE__ */ new Map();
	    this._eventListeners = [];
	    this._firstNonInitialNavigationCommittedFulfill = () => {
	    };
	    this._firstNonInitialNavigationCommittedReject = (e) => {
	    };
	    // Marks the oopif session that remote -> local transition has happened in the parent.
	    // See Target.detachedFromTarget handler for details.
	    this._swappedIn = false;
	    this._videoRecorder = null;
	    this._screencastId = null;
	    this._screencastClients = /* @__PURE__ */ new Set();
	    this._evaluateOnNewDocumentIdentifiers = [];
	    this._workerSessions = /* @__PURE__ */ new Map();
	    this._client = client;
	    this._crPage = crPage;
	    this._page = crPage._page;
	    this._targetId = targetId;
	    this._parentSession = parentSession;
	    if (parentSession)
	      parentSession._childSessions.add(this);
	    this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
	      this._firstNonInitialNavigationCommittedFulfill = f;
	      this._firstNonInitialNavigationCommittedReject = r;
	    });
	    this._firstNonInitialNavigationCommittedPromise.catch(() => {
	    });
	  }
	  _isMainFrame() {
	    return this._targetId === this._crPage._targetId;
	  }
	  _addRendererListeners() {
	    this._eventListeners.push(...[
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Log.entryAdded", (event) => this._onLogEntryAdded(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId, event.reason)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameRequestedNavigation", (event) => this._onFrameRequestedNavigation(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.javascriptDialogOpening", (event) => this._onDialog(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.bindingCalled", (event) => this._onBindingCalled(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.exceptionThrown", (exception) => this._handleException(exception.exceptionDetails)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextDestroyed", (event) => this._onExecutionContextDestroyed(event.executionContextId)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", (event) => this._onExecutionContextsCleared()),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Target.attachedToTarget", (event) => this._onAttachedToTarget(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Target.detachedFromTarget", (event) => this._onDetachedFromTarget(event))
	    ]);
	  }
	  _addBrowserListeners() {
	    this._eventListeners.push(...[
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Inspector.targetCrashed", (event) => this._onTargetCrashed()),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.screencastFrame", (event) => this._onScreencastFrame(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.windowOpen", (event) => this._onWindowOpen(event))
	    ]);
	  }
	  async _initialize(hasUIWindow) {
	    const isSettingStorageState = this._page._browserContext.isSettingStorageState();
	    if (!isSettingStorageState && hasUIWindow && !this._crPage._browserContext._browser.isClank() && !this._crPage._browserContext._options.noDefaultViewport) {
	      const { windowId } = await this._client.send("Browser.getWindowForTarget");
	      this._windowId = windowId;
	    }
	    let screencastOptions;
	    if (!isSettingStorageState && this._isMainFrame() && this._crPage._browserContext._options.recordVideo && hasUIWindow) {
	      const screencastId = (0, import_crypto.createGuid)();
	      const outputFile = import_path.default.join(this._crPage._browserContext._options.recordVideo.dir, screencastId + ".webm");
	      screencastOptions = {
	        // validateBrowserContextOptions ensures correct video size.
	        ...this._crPage._browserContext._options.recordVideo.size,
	        outputFile
	      };
	      await this._crPage._browserContext._ensureVideosPath();
	      await this._createVideoRecorder(screencastId, screencastOptions);
	      this._crPage._page.waitForInitializedOrError().then((p) => {
	        if (p instanceof Error)
	          this._stopVideoRecording().catch(() => {
	          });
	      });
	    }
	    let lifecycleEventsEnabled;
	    if (!this._isMainFrame())
	      this._addRendererListeners();
	    this._addBrowserListeners();
	    const promises = [
	      this._client.send("Page.enable"),
	      this._client.send("Page.getFrameTree").then(({ frameTree }) => {
	        if (this._isMainFrame()) {
	          this._handleFrameTree(frameTree);
	          this._addRendererListeners();
	        }
	        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)];
	        for (const frame of localFrames) {
	          this._client._sendMayFail("Page.createIsolatedWorld", {
	            frameId: frame._id,
	            grantUniveralAccess: true,
	            worldName: UTILITY_WORLD_NAME
	          });
	          for (const initScript of this._crPage._page.allInitScripts())
	            frame.evaluateExpression(initScript.source).catch((e) => {
	            });
	        }
	        const isInitialEmptyPage = this._isMainFrame() && this._page.mainFrame().url() === ":";
	        if (isInitialEmptyPage) {
	          lifecycleEventsEnabled.catch((e) => {
	          }).then(() => {
	            this._eventListeners.push(import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
	          });
	        } else {
	          this._firstNonInitialNavigationCommittedFulfill();
	          this._eventListeners.push(import_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
	        }
	      }),
	      this._client.send("Log.enable", {}),
	      lifecycleEventsEnabled = this._client.send("Page.setLifecycleEventsEnabled", { enabled: true }),
	      this._client.send("Runtime.enable", {}),
	      this._client.send("Runtime.addBinding", { name: import_page.PageBinding.kPlaywrightBinding }),
	      this._client.send("Page.addScriptToEvaluateOnNewDocument", {
	        source: "",
	        worldName: UTILITY_WORLD_NAME
	      }),
	      this._crPage._networkManager.addSession(this._client, void 0, this._isMainFrame()),
	      this._client.send("Target.setAutoAttach", { autoAttach: true, waitForDebuggerOnStart: true, flatten: true })
	    ];
	    if (!isSettingStorageState) {
	      if (this._isMainFrame())
	        promises.push(this._client.send("Emulation.setFocusEmulationEnabled", { enabled: true }));
	      const options = this._crPage._browserContext._options;
	      if (options.bypassCSP)
	        promises.push(this._client.send("Page.setBypassCSP", { enabled: true }));
	      if (options.ignoreHTTPSErrors || options.internalIgnoreHTTPSErrors)
	        promises.push(this._client.send("Security.setIgnoreCertificateErrors", { ignore: true }));
	      if (this._isMainFrame())
	        promises.push(this._updateViewport());
	      if (options.hasTouch)
	        promises.push(this._client.send("Emulation.setTouchEmulationEnabled", { enabled: true }));
	      if (options.javaScriptEnabled === false)
	        promises.push(this._client.send("Emulation.setScriptExecutionDisabled", { value: true }));
	      if (options.userAgent || options.locale)
	        promises.push(this._updateUserAgent());
	      if (options.locale)
	        promises.push(emulateLocale(this._client, options.locale));
	      if (options.timezoneId)
	        promises.push(emulateTimezone(this._client, options.timezoneId));
	      if (!this._crPage._browserContext._browser.options.headful)
	        promises.push(this._setDefaultFontFamilies(this._client));
	      promises.push(this._updateGeolocation(true));
	      promises.push(this._updateEmulateMedia());
	      promises.push(this._updateFileChooserInterception(true));
	      for (const initScript of this._crPage._page.allInitScripts())
	        promises.push(this._evaluateOnNewDocument(initScript, "main"));
	      if (screencastOptions)
	        promises.push(this._startVideoRecording(screencastOptions));
	    }
	    promises.push(this._client.send("Runtime.runIfWaitingForDebugger"));
	    promises.push(this._firstNonInitialNavigationCommittedPromise);
	    await Promise.all(promises);
	  }
	  dispose() {
	    this._firstNonInitialNavigationCommittedReject(new import_errors.TargetClosedError());
	    for (const childSession of this._childSessions)
	      childSession.dispose();
	    if (this._parentSession)
	      this._parentSession._childSessions.delete(this);
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	    this._crPage._networkManager.removeSession(this._client);
	    this._crPage._sessions.delete(this._targetId);
	    this._client.dispose();
	  }
	  async _navigate(frame, url, referrer) {
	    const response = await this._client.send("Page.navigate", { url, referrer, frameId: frame._id, referrerPolicy: "unsafeUrl" });
	    if (response.errorText)
	      throw new frames.NavigationAbortedError(response.loaderId, `${response.errorText} at ${url}`);
	    return { newDocumentId: response.loaderId };
	  }
	  _onLifecycleEvent(event) {
	    if (this._eventBelongsToStaleFrame(event.frameId))
	      return;
	    if (event.name === "load")
	      this._page._frameManager.frameLifecycleEvent(event.frameId, "load");
	    else if (event.name === "DOMContentLoaded")
	      this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded");
	  }
	  _handleFrameTree(frameTree) {
	    this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
	    this._onFrameNavigated(frameTree.frame, true);
	    if (!frameTree.childFrames)
	      return;
	    for (const child of frameTree.childFrames)
	      this._handleFrameTree(child);
	  }
	  _eventBelongsToStaleFrame(frameId) {
	    const frame = this._page._frameManager.frame(frameId);
	    if (!frame)
	      return true;
	    const session = this._crPage._sessionForFrame(frame);
	    return session && session !== this && !session._swappedIn;
	  }
	  _onFrameAttached(frameId, parentFrameId) {
	    const frameSession = this._crPage._sessions.get(frameId);
	    if (frameSession && frameId !== this._targetId) {
	      frameSession._swappedIn = true;
	      const frame = this._page._frameManager.frame(frameId);
	      if (frame)
	        this._page._frameManager.removeChildFramesRecursively(frame);
	      return;
	    }
	    if (parentFrameId && !this._page._frameManager.frame(parentFrameId)) {
	      return;
	    }
	    this._page._frameManager.frameAttached(frameId, parentFrameId);
	  }
	  _onFrameNavigated(framePayload, initial) {
	    if (this._eventBelongsToStaleFrame(framePayload.id))
	      return;
	    this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url + (framePayload.urlFragment || ""), framePayload.name || "", framePayload.loaderId, initial);
	    if (!initial)
	      this._firstNonInitialNavigationCommittedFulfill();
	  }
	  _onFrameRequestedNavigation(payload) {
	    if (this._eventBelongsToStaleFrame(payload.frameId))
	      return;
	    if (payload.disposition === "currentTab")
	      this._page._frameManager.frameRequestedNavigation(payload.frameId);
	  }
	  _onFrameNavigatedWithinDocument(frameId, url) {
	    if (this._eventBelongsToStaleFrame(frameId))
	      return;
	    this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
	  }
	  _onFrameDetached(frameId, reason) {
	    if (this._crPage._sessions.has(frameId)) {
	      return;
	    }
	    if (reason === "swap") {
	      const frame = this._page._frameManager.frame(frameId);
	      if (frame)
	        this._page._frameManager.removeChildFramesRecursively(frame);
	      return;
	    }
	    this._page._frameManager.frameDetached(frameId);
	  }
	  _onExecutionContextCreated(contextPayload) {
	    const frame = contextPayload.auxData ? this._page._frameManager.frame(contextPayload.auxData.frameId) : null;
	    if (!frame || this._eventBelongsToStaleFrame(frame._id))
	      return;
	    const delegate = new import_crExecutionContext.CRExecutionContext(this._client, contextPayload);
	    let worldName = null;
	    if (contextPayload.auxData && !!contextPayload.auxData.isDefault)
	      worldName = "main";
	    else if (contextPayload.name === UTILITY_WORLD_NAME)
	      worldName = "utility";
	    const context = new dom.FrameExecutionContext(delegate, frame, worldName);
	    if (worldName)
	      frame._contextCreated(worldName, context);
	    this._contextIdToContext.set(contextPayload.id, context);
	  }
	  _onExecutionContextDestroyed(executionContextId) {
	    const context = this._contextIdToContext.get(executionContextId);
	    if (!context)
	      return;
	    this._contextIdToContext.delete(executionContextId);
	    context.frame._contextDestroyed(context);
	  }
	  _onExecutionContextsCleared() {
	    for (const contextId of Array.from(this._contextIdToContext.keys()))
	      this._onExecutionContextDestroyed(contextId);
	  }
	  _onAttachedToTarget(event) {
	    const session = this._client.createChildSession(event.sessionId);
	    if (event.targetInfo.type === "iframe") {
	      const targetId = event.targetInfo.targetId;
	      const frame = this._page._frameManager.frame(targetId);
	      if (!frame)
	        return;
	      this._page._frameManager.removeChildFramesRecursively(frame);
	      for (const [contextId, context] of this._contextIdToContext) {
	        if (context.frame === frame)
	          this._onExecutionContextDestroyed(contextId);
	      }
	      const frameSession = new FrameSession(this._crPage, session, targetId, this);
	      this._crPage._sessions.set(targetId, frameSession);
	      frameSession._initialize(false).catch((e) => e);
	      return;
	    }
	    if (event.targetInfo.type !== "worker") {
	      session.detach().catch(() => {
	      });
	      return;
	    }
	    const url = event.targetInfo.url;
	    const worker = new import_page2.Worker(this._page, url);
	    this._page._addWorker(event.sessionId, worker);
	    this._workerSessions.set(event.sessionId, session);
	    session.once("Runtime.executionContextCreated", async (event2) => {
	      worker._createExecutionContext(new import_crExecutionContext.CRExecutionContext(session, event2.context));
	    });
	    session._sendMayFail("Runtime.enable");
	    this._crPage._networkManager.addSession(session, this._page._frameManager.frame(this._targetId) ?? void 0).catch(() => {
	    });
	    session._sendMayFail("Runtime.runIfWaitingForDebugger");
	    session._sendMayFail("Target.setAutoAttach", { autoAttach: true, waitForDebuggerOnStart: true, flatten: true });
	    session.on("Target.attachedToTarget", (event2) => this._onAttachedToTarget(event2));
	    session.on("Target.detachedFromTarget", (event2) => this._onDetachedFromTarget(event2));
	    session.on("Runtime.consoleAPICalled", (event2) => {
	      const args = event2.args.map((o) => (0, import_crExecutionContext.createHandle)(worker._existingExecutionContext, o));
	      this._page._addConsoleMessage(event2.type, args, (0, import_crProtocolHelper.toConsoleMessageLocation)(event2.stackTrace));
	    });
	    session.on("Runtime.exceptionThrown", (exception) => this._page.emitOnContextOnceInitialized(import_browserContext.BrowserContext.Events.PageError, (0, import_crProtocolHelper.exceptionToError)(exception.exceptionDetails), this._page));
	  }
	  _onDetachedFromTarget(event) {
	    const workerSession = this._workerSessions.get(event.sessionId);
	    if (workerSession) {
	      workerSession.dispose();
	      this._page._removeWorker(event.sessionId);
	      return;
	    }
	    const childFrameSession = this._crPage._sessions.get(event.targetId);
	    if (!childFrameSession)
	      return;
	    if (childFrameSession._swappedIn) {
	      childFrameSession.dispose();
	      return;
	    }
	    this._client.send("Page.enable").catch((e) => null).then(() => {
	      if (!childFrameSession._swappedIn)
	        this._page._frameManager.frameDetached(event.targetId);
	      childFrameSession.dispose();
	    });
	  }
	  _onWindowOpen(event) {
	    this._crPage._nextWindowOpenPopupFeatures.push(event.windowFeatures);
	  }
	  async _onConsoleAPI(event) {
	    if (event.executionContextId === 0) {
	      return;
	    }
	    const context = this._contextIdToContext.get(event.executionContextId);
	    if (!context)
	      return;
	    const values = event.args.map((arg) => (0, import_crExecutionContext.createHandle)(context, arg));
	    this._page._addConsoleMessage(event.type, values, (0, import_crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
	  }
	  async _onBindingCalled(event) {
	    const pageOrError = await this._crPage._page.waitForInitializedOrError();
	    if (!(pageOrError instanceof Error)) {
	      const context = this._contextIdToContext.get(event.executionContextId);
	      if (context)
	        await this._page._onBindingCalled(event.payload, context);
	    }
	  }
	  _onDialog(event) {
	    if (!this._page._frameManager.frame(this._targetId))
	      return;
	    this._page.emitOnContext(import_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(
	      this._page,
	      event.type,
	      event.message,
	      async (accept, promptText) => {
	        if (this._isMainFrame() && event.type === "beforeunload" && !accept)
	          this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, "navigation cancelled by beforeunload dialog");
	        await this._client.send("Page.handleJavaScriptDialog", { accept, promptText });
	      },
	      event.defaultPrompt
	    ));
	  }
	  _handleException(exceptionDetails) {
	    this._page.emitOnContextOnceInitialized(import_browserContext.BrowserContext.Events.PageError, (0, import_crProtocolHelper.exceptionToError)(exceptionDetails), this._page);
	  }
	  async _onTargetCrashed() {
	    this._client._markAsCrashed();
	    this._page._didCrash();
	  }
	  _onLogEntryAdded(event) {
	    const { level, text, args, source, url, lineNumber } = event.entry;
	    if (args)
	      args.map((arg) => (0, import_crProtocolHelper.releaseObject)(this._client, arg.objectId));
	    if (source !== "worker") {
	      const location = {
	        url: url || "",
	        lineNumber: lineNumber || 0,
	        columnNumber: 0
	      };
	      this._page._addConsoleMessage(level, [], location, text);
	    }
	  }
	  async _onFileChooserOpened(event) {
	    if (!event.backendNodeId)
	      return;
	    const frame = this._page._frameManager.frame(event.frameId);
	    if (!frame)
	      return;
	    let handle;
	    try {
	      const utilityContext = await frame._utilityContext();
	      handle = await this._adoptBackendNodeId(event.backendNodeId, utilityContext);
	    } catch (e) {
	      return;
	    }
	    await this._page._onFileChooserOpened(handle);
	  }
	  _willBeginDownload() {
	    if (!this._crPage._page.initializedOrUndefined()) {
	      this._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
	    }
	  }
	  _onScreencastFrame(payload) {
	    this._page.throttleScreencastFrameAck(() => {
	      this._client.send("Page.screencastFrameAck", { sessionId: payload.sessionId }).catch(() => {
	      });
	    });
	    const buffer = Buffer.from(payload.data, "base64");
	    this._page.emit(import_page2.Page.Events.ScreencastFrame, {
	      buffer,
	      frameSwapWallTime: payload.metadata.timestamp ? payload.metadata.timestamp * 1e3 : void 0,
	      width: payload.metadata.deviceWidth,
	      height: payload.metadata.deviceHeight
	    });
	  }
	  async _createVideoRecorder(screencastId, options) {
	    (0, import_assert.assert)(!this._screencastId);
	    const ffmpegPath = import_registry.registry.findExecutable("ffmpeg").executablePathOrDie(this._page.attribution.playwright.options.sdkLanguage);
	    this._videoRecorder = await import_videoRecorder.VideoRecorder.launch(this._crPage._page, ffmpegPath, options);
	    this._screencastId = screencastId;
	  }
	  async _startVideoRecording(options) {
	    const screencastId = this._screencastId;
	    (0, import_assert.assert)(screencastId);
	    this._page.once(import_page2.Page.Events.Close, () => this._stopVideoRecording().catch(() => {
	    }));
	    const gotFirstFrame = new Promise((f) => this._client.once("Page.screencastFrame", f));
	    await this._startScreencast(this._videoRecorder, {
	      format: "jpeg",
	      quality: 90,
	      maxWidth: options.width,
	      maxHeight: options.height
	    });
	    gotFirstFrame.then(() => {
	      this._crPage._browserContext._browser._videoStarted(this._crPage._browserContext, screencastId, options.outputFile, this._crPage._page.waitForInitializedOrError());
	    });
	  }
	  async _stopVideoRecording() {
	    if (!this._screencastId)
	      return;
	    const screencastId = this._screencastId;
	    this._screencastId = null;
	    const recorder = this._videoRecorder;
	    this._videoRecorder = null;
	    await this._stopScreencast(recorder);
	    await recorder.stop().catch(() => {
	    });
	    const video = this._crPage._browserContext._browser._takeVideo(screencastId);
	    video?.reportFinished();
	  }
	  async _startScreencast(client, options = {}) {
	    this._screencastClients.add(client);
	    if (this._screencastClients.size === 1)
	      await this._client.send("Page.startScreencast", options);
	  }
	  async _stopScreencast(client) {
	    this._screencastClients.delete(client);
	    if (!this._screencastClients.size)
	      await this._client._sendMayFail("Page.stopScreencast");
	  }
	  async _updateGeolocation(initial) {
	    const geolocation = this._crPage._browserContext._options.geolocation;
	    if (!initial || geolocation)
	      await this._client.send("Emulation.setGeolocationOverride", geolocation || {});
	  }
	  async _updateViewport(preserveWindowBoundaries) {
	    if (this._crPage._browserContext._browser.isClank())
	      return;
	    (0, import_assert.assert)(this._isMainFrame());
	    const options = this._crPage._browserContext._options;
	    const emulatedSize = this._page.emulatedSize();
	    if (emulatedSize === null)
	      return;
	    const viewportSize = emulatedSize.viewport;
	    const screenSize = emulatedSize.screen;
	    const isLandscape = screenSize.width > screenSize.height;
	    const metricsOverride = {
	      mobile: !!options.isMobile,
	      width: viewportSize.width,
	      height: viewportSize.height,
	      screenWidth: screenSize.width,
	      screenHeight: screenSize.height,
	      deviceScaleFactor: options.deviceScaleFactor || 1,
	      screenOrientation: !!options.isMobile ? isLandscape ? { angle: 90, type: "landscapePrimary" } : { angle: 0, type: "portraitPrimary" } : { angle: 0, type: "landscapePrimary" },
	      dontSetVisibleSize: preserveWindowBoundaries
	    };
	    if (JSON.stringify(this._metricsOverride) === JSON.stringify(metricsOverride))
	      return;
	    const promises = [
	      this._client.send("Emulation.setDeviceMetricsOverride", metricsOverride)
	    ];
	    if (!preserveWindowBoundaries && this._windowId) {
	      let insets = { width: 0, height: 0 };
	      if (this._crPage._browserContext._browser.options.headful) {
	        insets = { width: 24, height: 88 };
	        if (process.platform === "win32")
	          insets = { width: 16, height: 88 };
	        else if (process.platform === "linux")
	          insets = { width: 8, height: 85 };
	        else if (process.platform === "darwin")
	          insets = { width: 2, height: 80 };
	        if (this._crPage._browserContext.isPersistentContext()) {
	          insets.height += 46;
	        }
	      }
	      promises.push(this.setWindowBounds({
	        width: viewportSize.width + insets.width,
	        height: viewportSize.height + insets.height
	      }));
	    }
	    await Promise.all(promises);
	    this._metricsOverride = metricsOverride;
	  }
	  async windowBounds() {
	    const { bounds } = await this._client.send("Browser.getWindowBounds", {
	      windowId: this._windowId
	    });
	    return bounds;
	  }
	  async setWindowBounds(bounds) {
	    return await this._client.send("Browser.setWindowBounds", {
	      windowId: this._windowId,
	      bounds
	    });
	  }
	  async _updateEmulateMedia() {
	    const emulatedMedia = this._page.emulatedMedia();
	    const media = emulatedMedia.media === "no-override" ? "" : emulatedMedia.media;
	    const colorScheme = emulatedMedia.colorScheme === "no-override" ? "" : emulatedMedia.colorScheme;
	    const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? "" : emulatedMedia.reducedMotion;
	    const forcedColors = emulatedMedia.forcedColors === "no-override" ? "" : emulatedMedia.forcedColors;
	    const contrast = emulatedMedia.contrast === "no-override" ? "" : emulatedMedia.contrast;
	    const features = [
	      { name: "prefers-color-scheme", value: colorScheme },
	      { name: "prefers-reduced-motion", value: reducedMotion },
	      { name: "forced-colors", value: forcedColors },
	      { name: "prefers-contrast", value: contrast }
	    ];
	    await this._client.send("Emulation.setEmulatedMedia", { media, features });
	  }
	  async _updateUserAgent() {
	    const options = this._crPage._browserContext._options;
	    await this._client.send("Emulation.setUserAgentOverride", {
	      userAgent: options.userAgent || "",
	      acceptLanguage: options.locale,
	      userAgentMetadata: calculateUserAgentMetadata(options)
	    });
	  }
	  async _setDefaultFontFamilies(session) {
	    const fontFamilies = import_defaultFontFamilies.platformToFontFamilies[this._crPage._browserContext._browser._platform()];
	    await session.send("Page.setFontFamilies", fontFamilies);
	  }
	  async _updateFileChooserInterception(initial) {
	    const enabled = this._page.fileChooserIntercepted();
	    if (initial && !enabled)
	      return;
	    await this._client.send("Page.setInterceptFileChooserDialog", { enabled }).catch(() => {
	    });
	  }
	  async _evaluateOnNewDocument(initScript, world) {
	    const worldName = world === "utility" ? UTILITY_WORLD_NAME : void 0;
	    const { identifier } = await this._client.send("Page.addScriptToEvaluateOnNewDocument", { source: initScript.source, worldName });
	    if (!initScript.internal)
	      this._evaluateOnNewDocumentIdentifiers.push(identifier);
	  }
	  async _removeEvaluatesOnNewDocument() {
	    const identifiers = this._evaluateOnNewDocumentIdentifiers;
	    this._evaluateOnNewDocumentIdentifiers = [];
	    await Promise.all(identifiers.map((identifier) => this._client.send("Page.removeScriptToEvaluateOnNewDocument", { identifier })));
	  }
	  async _getContentFrame(handle) {
	    const nodeInfo = await this._client.send("DOM.describeNode", {
	      objectId: handle._objectId
	    });
	    if (!nodeInfo || typeof nodeInfo.node.frameId !== "string")
	      return null;
	    return this._page._frameManager.frame(nodeInfo.node.frameId);
	  }
	  async _getOwnerFrame(handle) {
	    const documentElement = await handle.evaluateHandle((node) => {
	      const doc = node;
	      if (doc.documentElement && doc.documentElement.ownerDocument === doc)
	        return doc.documentElement;
	      return node.ownerDocument ? node.ownerDocument.documentElement : null;
	    });
	    if (!documentElement)
	      return null;
	    if (!documentElement._objectId)
	      return null;
	    const nodeInfo = await this._client.send("DOM.describeNode", {
	      objectId: documentElement._objectId
	    });
	    const frameId = nodeInfo && typeof nodeInfo.node.frameId === "string" ? nodeInfo.node.frameId : null;
	    documentElement.dispose();
	    return frameId;
	  }
	  async _getBoundingBox(handle) {
	    const result = await this._client._sendMayFail("DOM.getBoxModel", {
	      objectId: handle._objectId
	    });
	    if (!result)
	      return null;
	    const quad = result.model.border;
	    const x = Math.min(quad[0], quad[2], quad[4], quad[6]);
	    const y = Math.min(quad[1], quad[3], quad[5], quad[7]);
	    const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;
	    const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;
	    const position = await this._framePosition();
	    if (!position)
	      return null;
	    return { x: x + position.x, y: y + position.y, width, height };
	  }
	  async _framePosition() {
	    const frame = this._page._frameManager.frame(this._targetId);
	    if (!frame)
	      return null;
	    if (frame === this._page.mainFrame())
	      return { x: 0, y: 0 };
	    const element = await frame.frameElement();
	    const box = await element.boundingBox();
	    return box;
	  }
	  async _scrollRectIntoViewIfNeeded(handle, rect) {
	    return await this._client.send("DOM.scrollIntoViewIfNeeded", {
	      objectId: handle._objectId,
	      rect
	    }).then(() => "done").catch((e) => {
	      if (e instanceof Error && e.message.includes("Node does not have a layout object"))
	        return "error:notvisible";
	      if (e instanceof Error && e.message.includes("Node is detached from document"))
	        return "error:notconnected";
	      throw e;
	    });
	  }
	  async _getContentQuads(handle) {
	    const result = await this._client._sendMayFail("DOM.getContentQuads", {
	      objectId: handle._objectId
	    });
	    if (!result)
	      return null;
	    const position = await this._framePosition();
	    if (!position)
	      return null;
	    return result.quads.map((quad) => [
	      { x: quad[0] + position.x, y: quad[1] + position.y },
	      { x: quad[2] + position.x, y: quad[3] + position.y },
	      { x: quad[4] + position.x, y: quad[5] + position.y },
	      { x: quad[6] + position.x, y: quad[7] + position.y }
	    ]);
	  }
	  async _adoptElementHandle(handle, to) {
	    const nodeInfo = await this._client.send("DOM.describeNode", {
	      objectId: handle._objectId
	    });
	    return this._adoptBackendNodeId(nodeInfo.node.backendNodeId, to);
	  }
	  async _adoptBackendNodeId(backendNodeId, to) {
	    const result = await this._client._sendMayFail("DOM.resolveNode", {
	      backendNodeId,
	      executionContextId: to.delegate._contextId
	    });
	    if (!result || result.object.subtype === "null")
	      throw new Error(dom.kUnableToAdoptErrorMessage);
	    return (0, import_crExecutionContext.createHandle)(to, result.object).asElement();
	  }
	}
	async function emulateLocale(session, locale) {
	  try {
	    await session.send("Emulation.setLocaleOverride", { locale });
	  } catch (exception) {
	    if (exception.message.includes("Another locale override is already in effect"))
	      return;
	    throw exception;
	  }
	}
	async function emulateTimezone(session, timezoneId) {
	  try {
	    await session.send("Emulation.setTimezoneOverride", { timezoneId });
	  } catch (exception) {
	    if (exception.message.includes("Timezone override is already in effect"))
	      return;
	    if (exception.message.includes("Invalid timezone"))
	      throw new Error(`Invalid timezone ID: ${timezoneId}`);
	    throw exception;
	  }
	}
	function calculateUserAgentMetadata(options) {
	  const ua = options.userAgent;
	  if (!ua)
	    return void 0;
	  const metadata = {
	    mobile: !!options.isMobile,
	    model: "",
	    architecture: "x64",
	    platform: "Windows",
	    platformVersion: ""
	  };
	  const androidMatch = ua.match(/Android (\d+(\.\d+)?(\.\d+)?)/);
	  const iPhoneMatch = ua.match(/iPhone OS (\d+(_\d+)?)/);
	  const iPadMatch = ua.match(/iPad; CPU OS (\d+(_\d+)?)/);
	  const macOSMatch = ua.match(/Mac OS X (\d+(_\d+)?(_\d+)?)/);
	  const windowsMatch = ua.match(/Windows\D+(\d+(\.\d+)?(\.\d+)?)/);
	  if (androidMatch) {
	    metadata.platform = "Android";
	    metadata.platformVersion = androidMatch[1];
	    metadata.architecture = "arm";
	  } else if (iPhoneMatch) {
	    metadata.platform = "iOS";
	    metadata.platformVersion = iPhoneMatch[1];
	    metadata.architecture = "arm";
	  } else if (iPadMatch) {
	    metadata.platform = "iOS";
	    metadata.platformVersion = iPadMatch[1];
	    metadata.architecture = "arm";
	  } else if (macOSMatch) {
	    metadata.platform = "macOS";
	    metadata.platformVersion = macOSMatch[1];
	    if (!ua.includes("Intel"))
	      metadata.architecture = "arm";
	  } else if (windowsMatch) {
	    metadata.platform = "Windows";
	    metadata.platformVersion = windowsMatch[1];
	  } else if (ua.toLowerCase().includes("linux")) {
	    metadata.platform = "Linux";
	  }
	  if (ua.includes("ARM"))
	    metadata.architecture = "arm";
	  return metadata;
	}
	return crPage;
}

var crServiceWorker;
var hasRequiredCrServiceWorker;

function requireCrServiceWorker () {
	if (hasRequiredCrServiceWorker) return crServiceWorker;
	hasRequiredCrServiceWorker = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crServiceWorker_exports = {};
	__export(crServiceWorker_exports, {
	  CRServiceWorker: () => CRServiceWorker
	});
	crServiceWorker = __toCommonJS(crServiceWorker_exports);
	var import_page = requirePage$1();
	var import_crExecutionContext = requireCrExecutionContext();
	var import_crNetworkManager = requireCrNetworkManager();
	var import_browserContext = requireBrowserContext$1();
	var network = __toESM(requireNetwork$1());
	class CRServiceWorker extends import_page.Worker {
	  constructor(browserContext, session, url) {
	    super(browserContext, url);
	    this._session = session;
	    this._browserContext = browserContext;
	    if (!!process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS)
	      this._networkManager = new import_crNetworkManager.CRNetworkManager(null, this);
	    session.once("Runtime.executionContextCreated", (event) => {
	      this._createExecutionContext(new import_crExecutionContext.CRExecutionContext(session, event.context));
	    });
	    if (this._networkManager && this._isNetworkInspectionEnabled()) {
	      this.updateRequestInterception();
	      this.updateExtraHTTPHeaders();
	      this.updateHttpCredentials();
	      this.updateOffline();
	      this._networkManager.addSession(
	        session,
	        void 0,
	        true
	        /* isMain */
	      ).catch(() => {
	      });
	    }
	    session.send("Runtime.enable", {}).catch((e) => {
	    });
	    session.send("Runtime.runIfWaitingForDebugger").catch((e) => {
	    });
	    session.on("Inspector.targetReloadedAfterCrash", () => {
	      session._sendMayFail("Runtime.runIfWaitingForDebugger", {});
	    });
	  }
	  didClose() {
	    this._networkManager?.removeSession(this._session);
	    this._session.dispose();
	    super.didClose();
	  }
	  async updateOffline() {
	    if (!this._isNetworkInspectionEnabled())
	      return;
	    await this._networkManager?.setOffline(!!this._browserContext._options.offline).catch(() => {
	    });
	  }
	  async updateHttpCredentials() {
	    if (!this._isNetworkInspectionEnabled())
	      return;
	    await this._networkManager?.authenticate(this._browserContext._options.httpCredentials || null).catch(() => {
	    });
	  }
	  async updateExtraHTTPHeaders() {
	    if (!this._isNetworkInspectionEnabled())
	      return;
	    await this._networkManager?.setExtraHTTPHeaders(this._browserContext._options.extraHTTPHeaders || []).catch(() => {
	    });
	  }
	  async updateRequestInterception() {
	    if (!this._isNetworkInspectionEnabled())
	      return;
	    await this._networkManager?.setRequestInterception(this.needsRequestInterception()).catch(() => {
	    });
	  }
	  needsRequestInterception() {
	    return this._isNetworkInspectionEnabled() && !!this._browserContext._requestInterceptor;
	  }
	  reportRequestFinished(request, response) {
	    this._browserContext.emit(import_browserContext.BrowserContext.Events.RequestFinished, { request, response });
	  }
	  requestFailed(request, _canceled) {
	    this._browserContext.emit(import_browserContext.BrowserContext.Events.RequestFailed, request);
	  }
	  requestReceivedResponse(response) {
	    this._browserContext.emit(import_browserContext.BrowserContext.Events.Response, response);
	  }
	  requestStarted(request, route) {
	    this._browserContext.emit(import_browserContext.BrowserContext.Events.Request, request);
	    if (route) {
	      const r = new network.Route(request, route);
	      if (this._browserContext._requestInterceptor?.(r, request))
	        return;
	      r.continue({ isFallback: true }).catch(() => {
	      });
	    }
	  }
	  _isNetworkInspectionEnabled() {
	    return this._browserContext._options.serviceWorkers !== "block";
	  }
	}
	return crServiceWorker;
}

var crBrowser;
var hasRequiredCrBrowser;

function requireCrBrowser () {
	if (hasRequiredCrBrowser) return crBrowser;
	hasRequiredCrBrowser = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crBrowser_exports = {};
	__export(crBrowser_exports, {
	  CRBrowser: () => CRBrowser,
	  CRBrowserContext: () => CRBrowserContext
	});
	crBrowser = __toCommonJS(crBrowser_exports);
	var import_path = __toESM(require$$1$1);
	var import_assert = requireAssert$1();
	var import_crypto = requireCrypto();
	var import_artifact = requireArtifact$1();
	var import_browser = requireBrowser$1();
	var import_browserContext = requireBrowserContext$1();
	var import_frames = requireFrames();
	var network = __toESM(requireNetwork$1());
	var import_page = requirePage$1();
	var import_crConnection = requireCrConnection();
	var import_crPage = requireCrPage();
	var import_crProtocolHelper = requireCrProtocolHelper();
	var import_crServiceWorker = requireCrServiceWorker();
	class CRBrowser extends import_browser.Browser {
	  constructor(parent, connection, options) {
	    super(parent, options);
	    this._clientRootSessionPromise = null;
	    this._contexts = /* @__PURE__ */ new Map();
	    this._crPages = /* @__PURE__ */ new Map();
	    this._backgroundPages = /* @__PURE__ */ new Map();
	    this._serviceWorkers = /* @__PURE__ */ new Map();
	    this._version = "";
	    this._tracingRecording = false;
	    this._userAgent = "";
	    this._connection = connection;
	    this._session = this._connection.rootSession;
	    this._connection.on(import_crConnection.ConnectionEvents.Disconnected, () => this._didDisconnect());
	    this._session.on("Target.attachedToTarget", this._onAttachedToTarget.bind(this));
	    this._session.on("Target.detachedFromTarget", this._onDetachedFromTarget.bind(this));
	    this._session.on("Browser.downloadWillBegin", this._onDownloadWillBegin.bind(this));
	    this._session.on("Browser.downloadProgress", this._onDownloadProgress.bind(this));
	  }
	  static async connect(parent, transport, options, devtools) {
	    options = { ...options };
	    const connection = new import_crConnection.CRConnection(transport, options.protocolLogger, options.browserLogsCollector);
	    const browser = new CRBrowser(parent, connection, options);
	    browser._devtools = devtools;
	    if (browser.isClank())
	      browser._isCollocatedWithServer = false;
	    const session = connection.rootSession;
	    if (options.__testHookOnConnectToBrowser)
	      await options.__testHookOnConnectToBrowser();
	    const version = await session.send("Browser.getVersion");
	    browser._version = version.product.substring(version.product.indexOf("/") + 1);
	    browser._userAgent = version.userAgent;
	    browser.options.headful = !version.userAgent.includes("Headless");
	    if (!options.persistent) {
	      await session.send("Target.setAutoAttach", { autoAttach: true, waitForDebuggerOnStart: true, flatten: true });
	      return browser;
	    }
	    browser._defaultContext = new CRBrowserContext(browser, void 0, options.persistent);
	    await Promise.all([
	      session.send("Target.setAutoAttach", { autoAttach: true, waitForDebuggerOnStart: true, flatten: true }).then(async () => {
	        await session.send("Target.getTargetInfo");
	      }),
	      browser._defaultContext._initialize()
	    ]);
	    await browser._waitForAllPagesToBeInitialized();
	    return browser;
	  }
	  async doCreateNewContext(options) {
	    const proxy = options.proxyOverride || options.proxy;
	    let proxyBypassList = void 0;
	    if (proxy) {
	      if (process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK)
	        proxyBypassList = proxy.bypass;
	      else
	        proxyBypassList = "<-loopback>" + (proxy.bypass ? `,${proxy.bypass}` : "");
	    }
	    const { browserContextId } = await this._session.send("Target.createBrowserContext", {
	      disposeOnDetach: true,
	      proxyServer: proxy ? proxy.server : void 0,
	      proxyBypassList
	    });
	    const context = new CRBrowserContext(this, browserContextId, options);
	    await context._initialize();
	    this._contexts.set(browserContextId, context);
	    return context;
	  }
	  contexts() {
	    return Array.from(this._contexts.values());
	  }
	  version() {
	    return this._version;
	  }
	  userAgent() {
	    return this._userAgent;
	  }
	  _platform() {
	    if (this._userAgent.includes("Windows"))
	      return "win";
	    if (this._userAgent.includes("Macintosh"))
	      return "mac";
	    return "linux";
	  }
	  isClank() {
	    return this.options.name === "clank";
	  }
	  async _waitForAllPagesToBeInitialized() {
	    await Promise.all([...this._crPages.values()].map((crPage) => crPage._page.waitForInitializedOrError()));
	  }
	  _onAttachedToTarget({ targetInfo, sessionId, waitingForDebugger }) {
	    if (targetInfo.type === "browser")
	      return;
	    const session = this._session.createChildSession(sessionId);
	    (0, import_assert.assert)(targetInfo.browserContextId, "targetInfo: " + JSON.stringify(targetInfo, null, 2));
	    let context = this._contexts.get(targetInfo.browserContextId) || null;
	    if (!context) {
	      context = this._defaultContext;
	    }
	    if (targetInfo.type === "other" && targetInfo.url.startsWith("devtools://devtools") && this._devtools) {
	      this._devtools.install(session);
	      return;
	    }
	    const treatOtherAsPage = targetInfo.type === "other" && process.env.PW_CHROMIUM_ATTACH_TO_OTHER;
	    if (!context || targetInfo.type === "other" && !treatOtherAsPage) {
	      session.detach().catch(() => {
	      });
	      return;
	    }
	    (0, import_assert.assert)(!this._crPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
	    (0, import_assert.assert)(!this._backgroundPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
	    (0, import_assert.assert)(!this._serviceWorkers.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
	    if (targetInfo.type === "background_page") {
	      const backgroundPage = new import_crPage.CRPage(session, targetInfo.targetId, context, null, { hasUIWindow: false, isBackgroundPage: true });
	      this._backgroundPages.set(targetInfo.targetId, backgroundPage);
	      return;
	    }
	    if (targetInfo.type === "page" || treatOtherAsPage) {
	      const opener = targetInfo.openerId ? this._crPages.get(targetInfo.openerId) || null : null;
	      const crPage = new import_crPage.CRPage(session, targetInfo.targetId, context, opener, { hasUIWindow: targetInfo.type === "page", isBackgroundPage: false });
	      this._crPages.set(targetInfo.targetId, crPage);
	      return;
	    }
	    if (targetInfo.type === "service_worker") {
	      const serviceWorker = new import_crServiceWorker.CRServiceWorker(context, session, targetInfo.url);
	      this._serviceWorkers.set(targetInfo.targetId, serviceWorker);
	      context.emit(CRBrowserContext.CREvents.ServiceWorker, serviceWorker);
	      return;
	    }
	    session.detach().catch(() => {
	    });
	  }
	  _onDetachedFromTarget(payload) {
	    const targetId = payload.targetId;
	    const crPage = this._crPages.get(targetId);
	    if (crPage) {
	      this._crPages.delete(targetId);
	      crPage.didClose();
	      return;
	    }
	    const backgroundPage = this._backgroundPages.get(targetId);
	    if (backgroundPage) {
	      this._backgroundPages.delete(targetId);
	      backgroundPage.didClose();
	      return;
	    }
	    const serviceWorker = this._serviceWorkers.get(targetId);
	    if (serviceWorker) {
	      this._serviceWorkers.delete(targetId);
	      serviceWorker.didClose();
	      return;
	    }
	  }
	  _didDisconnect() {
	    for (const crPage of this._crPages.values())
	      crPage.didClose();
	    this._crPages.clear();
	    for (const backgroundPage of this._backgroundPages.values())
	      backgroundPage.didClose();
	    this._backgroundPages.clear();
	    for (const serviceWorker of this._serviceWorkers.values())
	      serviceWorker.didClose();
	    this._serviceWorkers.clear();
	    this._didClose();
	  }
	  _findOwningPage(frameId) {
	    for (const crPage of this._crPages.values()) {
	      const frame = crPage._page._frameManager.frame(frameId);
	      if (frame)
	        return crPage;
	    }
	    return null;
	  }
	  _onDownloadWillBegin(payload) {
	    const page = this._findOwningPage(payload.frameId);
	    if (!page) {
	      return;
	    }
	    page.willBeginDownload();
	    let originPage = page._page.initializedOrUndefined();
	    if (!originPage && page._opener)
	      originPage = page._opener._page.initializedOrUndefined();
	    if (!originPage)
	      return;
	    this._downloadCreated(originPage, payload.guid, payload.url, payload.suggestedFilename);
	  }
	  _onDownloadProgress(payload) {
	    if (payload.state === "completed")
	      this._downloadFinished(payload.guid, "");
	    if (payload.state === "canceled")
	      this._downloadFinished(payload.guid, this._closeReason || "canceled");
	  }
	  async _closePage(crPage) {
	    await this._session.send("Target.closeTarget", { targetId: crPage._targetId });
	  }
	  async newBrowserCDPSession() {
	    return await this._connection.createBrowserSession();
	  }
	  async startTracing(page, options = {}) {
	    (0, import_assert.assert)(!this._tracingRecording, "Cannot start recording trace while already recording trace.");
	    this._tracingClient = page ? page._delegate._mainFrameSession._client : this._session;
	    const defaultCategories = [
	      "-*",
	      "devtools.timeline",
	      "v8.execute",
	      "disabled-by-default-devtools.timeline",
	      "disabled-by-default-devtools.timeline.frame",
	      "toplevel",
	      "blink.console",
	      "blink.user_timing",
	      "latencyInfo",
	      "disabled-by-default-devtools.timeline.stack",
	      "disabled-by-default-v8.cpu_profiler",
	      "disabled-by-default-v8.cpu_profiler.hires"
	    ];
	    const {
	      screenshots = false,
	      categories = defaultCategories
	    } = options;
	    if (screenshots)
	      categories.push("disabled-by-default-devtools.screenshot");
	    this._tracingRecording = true;
	    await this._tracingClient.send("Tracing.start", {
	      transferMode: "ReturnAsStream",
	      categories: categories.join(",")
	    });
	  }
	  async stopTracing() {
	    (0, import_assert.assert)(this._tracingClient, "Tracing was not started.");
	    const [event] = await Promise.all([
	      new Promise((f) => this._tracingClient.once("Tracing.tracingComplete", f)),
	      this._tracingClient.send("Tracing.end")
	    ]);
	    const tracingPath = import_path.default.join(this.options.artifactsDir, (0, import_crypto.createGuid)() + ".crtrace");
	    await (0, import_crProtocolHelper.saveProtocolStream)(this._tracingClient, event.stream, tracingPath);
	    this._tracingRecording = false;
	    const artifact = new import_artifact.Artifact(this, tracingPath);
	    artifact.reportFinished();
	    return artifact;
	  }
	  isConnected() {
	    return !this._connection._closed;
	  }
	  async _clientRootSession() {
	    if (!this._clientRootSessionPromise)
	      this._clientRootSessionPromise = this._connection.createBrowserSession();
	    return this._clientRootSessionPromise;
	  }
	}
	class CRBrowserContext extends import_browserContext.BrowserContext {
	  static {
	    this.CREvents = {
	      BackgroundPage: "backgroundpage",
	      ServiceWorker: "serviceworker"
	    };
	  }
	  constructor(browser, browserContextId, options) {
	    super(browser, options, browserContextId);
	    this._authenticateProxyViaCredentials();
	  }
	  async _initialize() {
	    (0, import_assert.assert)(!Array.from(this._browser._crPages.values()).some((page) => page._browserContext === this));
	    const promises = [super._initialize()];
	    if (this._browser.options.name !== "clank" && this._options.acceptDownloads !== "internal-browser-default") {
	      promises.push(this._browser._session.send("Browser.setDownloadBehavior", {
	        behavior: this._options.acceptDownloads === "accept" ? "allowAndName" : "deny",
	        browserContextId: this._browserContextId,
	        downloadPath: this._browser.options.downloadsPath,
	        eventsEnabled: true
	      }));
	    }
	    await Promise.all(promises);
	  }
	  _crPages() {
	    return [...this._browser._crPages.values()].filter((crPage) => crPage._browserContext === this);
	  }
	  possiblyUninitializedPages() {
	    return this._crPages().map((crPage) => crPage._page);
	  }
	  async doCreateNewPage() {
	    (0, import_browserContext.assertBrowserContextIsNotOwned)(this);
	    const { targetId } = await this._browser._session.send("Target.createTarget", { url: "about:blank", browserContextId: this._browserContextId });
	    return this._browser._crPages.get(targetId)._page;
	  }
	  async doGetCookies(urls) {
	    const { cookies } = await this._browser._session.send("Storage.getCookies", { browserContextId: this._browserContextId });
	    return network.filterCookies(cookies.map((c) => {
	      const copy = { sameSite: "Lax", ...c };
	      delete copy.size;
	      delete copy.priority;
	      delete copy.session;
	      delete copy.sameParty;
	      delete copy.sourceScheme;
	      delete copy.sourcePort;
	      return copy;
	    }), urls);
	  }
	  async addCookies(cookies) {
	    await this._browser._session.send("Storage.setCookies", { cookies: network.rewriteCookies(cookies), browserContextId: this._browserContextId });
	  }
	  async doClearCookies() {
	    await this._browser._session.send("Storage.clearCookies", { browserContextId: this._browserContextId });
	  }
	  async doGrantPermissions(origin, permissions) {
	    const webPermissionToProtocol = /* @__PURE__ */ new Map([
	      ["geolocation", "geolocation"],
	      ["midi", "midi"],
	      ["notifications", "notifications"],
	      ["camera", "videoCapture"],
	      ["microphone", "audioCapture"],
	      ["background-sync", "backgroundSync"],
	      ["ambient-light-sensor", "sensors"],
	      ["accelerometer", "sensors"],
	      ["gyroscope", "sensors"],
	      ["magnetometer", "sensors"],
	      ["clipboard-read", "clipboardReadWrite"],
	      ["clipboard-write", "clipboardSanitizedWrite"],
	      ["payment-handler", "paymentHandler"],
	      // chrome-specific permissions we have.
	      ["midi-sysex", "midiSysex"],
	      ["storage-access", "storageAccess"]
	    ]);
	    const filtered = permissions.map((permission) => {
	      const protocolPermission = webPermissionToProtocol.get(permission);
	      if (!protocolPermission)
	        throw new Error("Unknown permission: " + permission);
	      return protocolPermission;
	    });
	    await this._browser._session.send("Browser.grantPermissions", { origin: origin === "*" ? void 0 : origin, browserContextId: this._browserContextId, permissions: filtered });
	  }
	  async doClearPermissions() {
	    await this._browser._session.send("Browser.resetPermissions", { browserContextId: this._browserContextId });
	  }
	  async setGeolocation(geolocation) {
	    (0, import_browserContext.verifyGeolocation)(geolocation);
	    this._options.geolocation = geolocation;
	    for (const page of this.pages())
	      await page._delegate.updateGeolocation();
	  }
	  async setExtraHTTPHeaders(headers) {
	    this._options.extraHTTPHeaders = headers;
	    for (const page of this.pages())
	      await page._delegate.updateExtraHTTPHeaders();
	    for (const sw of this.serviceWorkers())
	      await sw.updateExtraHTTPHeaders();
	  }
	  async setUserAgent(userAgent) {
	    this._options.userAgent = userAgent;
	    for (const page of this.pages())
	      await page._delegate.updateUserAgent();
	  }
	  async setOffline(offline) {
	    this._options.offline = offline;
	    for (const page of this.pages())
	      await page._delegate.updateOffline();
	    for (const sw of this.serviceWorkers())
	      await sw.updateOffline();
	  }
	  async doSetHTTPCredentials(httpCredentials) {
	    this._options.httpCredentials = httpCredentials;
	    for (const page of this.pages())
	      await page._delegate.updateHttpCredentials();
	    for (const sw of this.serviceWorkers())
	      await sw.updateHttpCredentials();
	  }
	  async doAddInitScript(initScript) {
	    for (const page of this.pages())
	      await page._delegate.addInitScript(initScript);
	  }
	  async doRemoveNonInternalInitScripts() {
	    for (const page of this.pages())
	      await page._delegate.removeNonInternalInitScripts();
	  }
	  async doUpdateRequestInterception() {
	    for (const page of this.pages())
	      await page._delegate.updateRequestInterception();
	    for (const sw of this.serviceWorkers())
	      await sw.updateRequestInterception();
	  }
	  async doClose(reason) {
	    const openedBeforeUnloadDialogs = [];
	    for (const crPage of this._crPages()) {
	      const dialogs = [...crPage._page._frameManager._openedDialogs].filter((dialog) => dialog.type() === "beforeunload");
	      openedBeforeUnloadDialogs.push(...dialogs);
	    }
	    await Promise.all(openedBeforeUnloadDialogs.map((dialog) => dialog.dismiss()));
	    if (!this._browserContextId) {
	      await this.stopVideoRecording();
	      await this._browser.close({ reason });
	      return;
	    }
	    await this._browser._session.send("Target.disposeBrowserContext", { browserContextId: this._browserContextId });
	    this._browser._contexts.delete(this._browserContextId);
	    for (const [targetId, serviceWorker] of this._browser._serviceWorkers) {
	      if (serviceWorker._browserContext !== this)
	        continue;
	      serviceWorker.didClose();
	      this._browser._serviceWorkers.delete(targetId);
	    }
	  }
	  async stopVideoRecording() {
	    await Promise.all(this._crPages().map((crPage) => crPage._mainFrameSession._stopVideoRecording()));
	  }
	  onClosePersistent() {
	    for (const [targetId, backgroundPage] of this._browser._backgroundPages.entries()) {
	      if (backgroundPage._browserContext === this && backgroundPage._page.initializedOrUndefined()) {
	        backgroundPage.didClose();
	        this._browser._backgroundPages.delete(targetId);
	      }
	    }
	  }
	  async clearCache() {
	    for (const page of this._crPages())
	      await page._networkManager.clearCache();
	  }
	  async cancelDownload(guid) {
	    await this._browser._session.send("Browser.cancelDownload", {
	      guid,
	      browserContextId: this._browserContextId
	    });
	  }
	  backgroundPages() {
	    const result = [];
	    for (const backgroundPage of this._browser._backgroundPages.values()) {
	      if (backgroundPage._browserContext === this && backgroundPage._page.initializedOrUndefined())
	        result.push(backgroundPage._page);
	    }
	    return result;
	  }
	  serviceWorkers() {
	    return Array.from(this._browser._serviceWorkers.values()).filter((serviceWorker) => serviceWorker._browserContext === this);
	  }
	  async newCDPSession(page) {
	    let targetId = null;
	    if (page instanceof import_page.Page) {
	      targetId = page._delegate._targetId;
	    } else if (page instanceof import_frames.Frame) {
	      const session = page._page._delegate._sessions.get(page._id);
	      if (!session)
	        throw new Error(`This frame does not have a separate CDP session, it is a part of the parent frame's session`);
	      targetId = session._targetId;
	    } else {
	      throw new Error("page: expected Page or Frame");
	    }
	    const rootSession = await this._browser._clientRootSession();
	    return rootSession.attachToTarget(targetId);
	  }
	}
	return crBrowser;
}

var android$1;
var hasRequiredAndroid$1;

function requireAndroid$1 () {
	if (hasRequiredAndroid$1) return android$1;
	hasRequiredAndroid$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var android_exports = {};
	__export(android_exports, {
	  Android: () => Android,
	  AndroidDevice: () => AndroidDevice
	});
	android$1 = __toCommonJS(android_exports);
	var import_events = require$$0$5;
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_timeoutSettings = requireTimeoutSettings$1();
	var import_pipeTransport = requirePipeTransport$1();
	var import_crypto = requireCrypto();
	var import_debug = requireDebug$1();
	var import_env = requireEnv();
	var import_task = requireTask();
	var import_debugLogger = requireDebugLogger();
	var import_utilsBundle = requireUtilsBundle();
	var import_utilsBundle2 = requireUtilsBundle();
	var import_browserContext = requireBrowserContext$1();
	var import_chromiumSwitches = requireChromiumSwitches();
	var import_crBrowser = requireCrBrowser();
	var import_fileUtils = requireFileUtils$1();
	var import_helper = requireHelper();
	var import_instrumentation = requireInstrumentation();
	var import_processLauncher = requireProcessLauncher();
	var import_progress = requireProgress();
	var import_registry = requireRegistry();
	const ARTIFACTS_FOLDER = import_path.default.join(import_os.default.tmpdir(), "playwright-artifacts-");
	class Android extends import_instrumentation.SdkObject {
	  constructor(parent, backend) {
	    super(parent, "android");
	    this._devices = /* @__PURE__ */ new Map();
	    this._backend = backend;
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings();
	  }
	  setDefaultTimeout(timeout) {
	    this._timeoutSettings.setDefaultTimeout(timeout);
	  }
	  async devices(options) {
	    const devices = (await this._backend.devices(options)).filter((d) => d.status === "device");
	    const newSerials = /* @__PURE__ */ new Set();
	    for (const d of devices) {
	      newSerials.add(d.serial);
	      if (this._devices.has(d.serial))
	        continue;
	      const device = await AndroidDevice.create(this, d, options);
	      this._devices.set(d.serial, device);
	    }
	    for (const d of this._devices.keys()) {
	      if (!newSerials.has(d))
	        this._devices.delete(d);
	    }
	    return [...this._devices.values()];
	  }
	  _deviceClosed(device) {
	    this._devices.delete(device.serial);
	  }
	}
	class AndroidDevice extends import_instrumentation.SdkObject {
	  constructor(android, backend, model, options) {
	    super(android, "android-device");
	    this._lastId = 0;
	    this._callbacks = /* @__PURE__ */ new Map();
	    this._webViews = /* @__PURE__ */ new Map();
	    this._browserConnections = /* @__PURE__ */ new Set();
	    this._isClosed = false;
	    this._android = android;
	    this._backend = backend;
	    this.model = model;
	    this.serial = backend.serial;
	    this._options = options;
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings(android._timeoutSettings);
	  }
	  static {
	    this.Events = {
	      WebViewAdded: "webViewAdded",
	      WebViewRemoved: "webViewRemoved",
	      Close: "close"
	    };
	  }
	  static async create(android, backend, options) {
	    await backend.init();
	    const model = await backend.runCommand("shell:getprop ro.product.model");
	    const device = new AndroidDevice(android, backend, model.toString().trim(), options);
	    await device._init();
	    return device;
	  }
	  async _init() {
	    await this._refreshWebViews();
	    const poll = () => {
	      this._pollingWebViews = setTimeout(() => this._refreshWebViews().then(poll).catch(() => {
	        this.close().catch(() => {
	        });
	      }), 500);
	    };
	    poll();
	  }
	  setDefaultTimeout(timeout) {
	    this._timeoutSettings.setDefaultTimeout(timeout);
	  }
	  async shell(command) {
	    const result = await this._backend.runCommand(`shell:${command}`);
	    await this._refreshWebViews();
	    return result;
	  }
	  async open(command) {
	    return await this._backend.open(`${command}`);
	  }
	  async screenshot() {
	    return await this._backend.runCommand(`shell:screencap -p`);
	  }
	  async _driver() {
	    if (this._isClosed)
	      return;
	    if (!this._driverPromise)
	      this._driverPromise = this._installDriver();
	    return this._driverPromise;
	  }
	  async _installDriver() {
	    (0, import_utilsBundle.debug)("pw:android")("Stopping the old driver");
	    await this.shell(`am force-stop com.microsoft.playwright.androiddriver`);
	    if (!this._options.omitDriverInstall) {
	      (0, import_utilsBundle.debug)("pw:android")("Uninstalling the old driver");
	      await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver`);
	      await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver.test`);
	      (0, import_utilsBundle.debug)("pw:android")("Installing the new driver");
	      const executable = import_registry.registry.findExecutable("android");
	      const packageManagerCommand = (0, import_env.getPackageManagerExecCommand)();
	      for (const file of ["android-driver.apk", "android-driver-target.apk"]) {
	        const fullName = import_path.default.join(executable.directory, file);
	        if (!import_fs.default.existsSync(fullName))
	          throw new Error(`Please install Android driver apk using '${packageManagerCommand} playwright install android'`);
	        await this.installApk(await import_fs.default.promises.readFile(fullName));
	      }
	    } else {
	      (0, import_utilsBundle.debug)("pw:android")("Skipping the driver installation");
	    }
	    (0, import_utilsBundle.debug)("pw:android")("Starting the new driver");
	    this.shell("am instrument -w com.microsoft.playwright.androiddriver.test/androidx.test.runner.AndroidJUnitRunner").catch((e) => (0, import_utilsBundle.debug)("pw:android")(e));
	    const socket = await this._waitForLocalAbstract("playwright_android_driver_socket");
	    const transport = new import_pipeTransport.PipeTransport(socket, socket, socket, "be");
	    transport.onmessage = (message) => {
	      const response = JSON.parse(message);
	      const { id, result, error } = response;
	      const callback = this._callbacks.get(id);
	      if (!callback)
	        return;
	      if (error)
	        callback.reject(new Error(error));
	      else
	        callback.fulfill(result);
	      this._callbacks.delete(id);
	    };
	    return transport;
	  }
	  async _waitForLocalAbstract(socketName) {
	    let socket;
	    (0, import_utilsBundle.debug)("pw:android")(`Polling the socket localabstract:${socketName}`);
	    while (!socket) {
	      try {
	        socket = await this._backend.open(`localabstract:${socketName}`);
	      } catch (e) {
	        await new Promise((f) => setTimeout(f, 250));
	      }
	    }
	    (0, import_utilsBundle.debug)("pw:android")(`Connected to localabstract:${socketName}`);
	    return socket;
	  }
	  async send(method, params = {}) {
	    params.timeout = this._timeoutSettings.timeout(params);
	    const driver = await this._driver();
	    if (!driver)
	      throw new Error("Device is closed");
	    const id = ++this._lastId;
	    const result = new Promise((fulfill, reject) => this._callbacks.set(id, { fulfill, reject }));
	    driver.send(JSON.stringify({ id, method, params }));
	    return result;
	  }
	  async close() {
	    if (this._isClosed)
	      return;
	    this._isClosed = true;
	    if (this._pollingWebViews)
	      clearTimeout(this._pollingWebViews);
	    for (const connection of this._browserConnections)
	      await connection.close();
	    if (this._driverPromise) {
	      const driver = await this._driver();
	      driver?.close();
	    }
	    await this._backend.close();
	    this._android._deviceClosed(this);
	    this.emit(AndroidDevice.Events.Close);
	  }
	  async launchBrowser(pkg = "com.android.chrome", options) {
	    (0, import_utilsBundle.debug)("pw:android")("Force-stopping", pkg);
	    await this._backend.runCommand(`shell:am force-stop ${pkg}`);
	    const socketName = (0, import_debug.isUnderTest)() ? "webview_devtools_remote_playwright_test" : "playwright_" + (0, import_crypto.createGuid)() + "_devtools_remote";
	    const commandLine = this._defaultArgs(options, socketName).join(" ");
	    (0, import_utilsBundle.debug)("pw:android")("Starting", pkg, commandLine);
	    await this._backend.runCommand(`shell:echo "${Buffer.from(commandLine).toString("base64")}" | base64 -d > /data/local/tmp/chrome-command-line`);
	    await this._backend.runCommand(`shell:am start -a android.intent.action.VIEW -d about:blank ${pkg}`);
	    const browserContext = await this._connectToBrowser(socketName, options);
	    await this._backend.runCommand(`shell:rm /data/local/tmp/chrome-command-line`);
	    return browserContext;
	  }
	  _defaultArgs(options, socketName) {
	    const chromeArguments = [
	      "_",
	      "--disable-fre",
	      "--no-default-browser-check",
	      `--remote-debugging-socket-name=${socketName}`,
	      ...import_chromiumSwitches.chromiumSwitches,
	      ...this._innerDefaultArgs(options)
	    ];
	    return chromeArguments;
	  }
	  _innerDefaultArgs(options) {
	    const { args = [], proxy } = options;
	    const chromeArguments = [];
	    if (proxy) {
	      chromeArguments.push(`--proxy-server=${proxy.server}`);
	      const proxyBypassRules = [];
	      if (proxy.bypass)
	        proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
	      if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
	        proxyBypassRules.push("<-loopback>");
	      if (proxyBypassRules.length > 0)
	        chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
	    }
	    chromeArguments.push(...args);
	    return chromeArguments;
	  }
	  async connectToWebView(socketName) {
	    const webView = this._webViews.get(socketName);
	    if (!webView)
	      throw new Error("WebView has been closed");
	    return await this._connectToBrowser(socketName);
	  }
	  async _connectToBrowser(socketName, options = {}) {
	    const socket = await this._waitForLocalAbstract(socketName);
	    const androidBrowser = new AndroidBrowser(this, socket);
	    await androidBrowser._init();
	    this._browserConnections.add(androidBrowser);
	    const artifactsDir = await import_fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
	    const cleanupArtifactsDir = async () => {
	      const errors = (await (0, import_fileUtils.removeFolders)([artifactsDir])).filter(Boolean);
	      for (let i = 0; i < (errors || []).length; ++i)
	        (0, import_utilsBundle.debug)("pw:android")(`exception while removing ${artifactsDir}: ${errors[i]}`);
	    };
	    import_processLauncher.gracefullyCloseSet.add(cleanupArtifactsDir);
	    socket.on("close", async () => {
	      import_processLauncher.gracefullyCloseSet.delete(cleanupArtifactsDir);
	      cleanupArtifactsDir().catch((e) => (0, import_utilsBundle.debug)("pw:android")(`could not cleanup artifacts dir: ${e}`));
	    });
	    const browserOptions = {
	      name: "clank",
	      isChromium: true,
	      slowMo: 0,
	      persistent: { ...options, noDefaultViewport: true },
	      artifactsDir,
	      downloadsPath: artifactsDir,
	      tracesDir: artifactsDir,
	      browserProcess: new ClankBrowserProcess(androidBrowser),
	      proxy: options.proxy,
	      protocolLogger: import_helper.helper.debugProtocolLogger(),
	      browserLogsCollector: new import_debugLogger.RecentLogsCollector(),
	      originalLaunchOptions: {}
	    };
	    (0, import_browserContext.validateBrowserContextOptions)(options, browserOptions);
	    const browser = await import_crBrowser.CRBrowser.connect(this.attribution.playwright, androidBrowser, browserOptions);
	    const controller = new import_progress.ProgressController((0, import_instrumentation.serverSideCallMetadata)(), this);
	    const defaultContext = browser._defaultContext;
	    await controller.run(async (progress) => {
	      await defaultContext._loadDefaultContextAsIs(progress);
	    });
	    return defaultContext;
	  }
	  webViews() {
	    return [...this._webViews.values()];
	  }
	  async installApk(content, options) {
	    const args = options && options.args ? options.args : ["-r", "-t", "-S"];
	    (0, import_utilsBundle.debug)("pw:android")("Opening install socket");
	    const installSocket = await this._backend.open(`shell:cmd package install ${args.join(" ")} ${content.length}`);
	    (0, import_utilsBundle.debug)("pw:android")("Writing driver bytes: " + content.length);
	    await installSocket.write(content);
	    const success = await new Promise((f) => installSocket.on("data", f));
	    (0, import_utilsBundle.debug)("pw:android")("Written driver bytes: " + success);
	    installSocket.close();
	  }
	  async push(content, path2, mode = 420) {
	    const socket = await this._backend.open(`sync:`);
	    const sendHeader = async (command, length) => {
	      const buffer = Buffer.alloc(command.length + 4);
	      buffer.write(command, 0);
	      buffer.writeUInt32LE(length, command.length);
	      await socket.write(buffer);
	    };
	    const send = async (command, data) => {
	      await sendHeader(command, data.length);
	      await socket.write(data);
	    };
	    await send("SEND", Buffer.from(`${path2},${mode}`));
	    const maxChunk = 65535;
	    for (let i = 0; i < content.length; i += maxChunk)
	      await send("DATA", content.slice(i, i + maxChunk));
	    await sendHeader("DONE", Date.now() / 1e3 | 0);
	    const result = await new Promise((f) => socket.once("data", f));
	    const code = result.slice(0, 4).toString();
	    if (code !== "OKAY")
	      throw new Error("Could not push: " + code);
	    socket.close();
	  }
	  async _refreshWebViews() {
	    const sockets = (await this._backend.runCommand(`shell:cat /proc/net/unix | grep webview_devtools_remote`)).toString().split("\n");
	    if (this._isClosed)
	      return;
	    const socketNames = /* @__PURE__ */ new Set();
	    for (const line of sockets) {
	      const matchSocketName = line.match(/[^@]+@(.*?webview_devtools_remote_?.*)/);
	      if (!matchSocketName)
	        continue;
	      const socketName = matchSocketName[1];
	      socketNames.add(socketName);
	      if (this._webViews.has(socketName))
	        continue;
	      const match = line.match(/[^@]+@.*?webview_devtools_remote_?(\d*)/);
	      let pid = -1;
	      if (match && match[1])
	        pid = +match[1];
	      const pkg = await this._extractPkg(pid);
	      if (this._isClosed)
	        return;
	      const webView = { pid, pkg, socketName };
	      this._webViews.set(socketName, webView);
	      this.emit(AndroidDevice.Events.WebViewAdded, webView);
	    }
	    for (const p of this._webViews.keys()) {
	      if (!socketNames.has(p)) {
	        this._webViews.delete(p);
	        this.emit(AndroidDevice.Events.WebViewRemoved, p);
	      }
	    }
	  }
	  async _extractPkg(pid) {
	    let pkg = "";
	    if (pid === -1)
	      return pkg;
	    const procs = (await this._backend.runCommand(`shell:ps -A | grep ${pid}`)).toString().split("\n");
	    for (const proc of procs) {
	      const match = proc.match(/[^\s]+\s+(\d+).*$/);
	      if (!match)
	        continue;
	      pkg = proc.substring(proc.lastIndexOf(" ") + 1);
	    }
	    return pkg;
	  }
	}
	class AndroidBrowser extends import_events.EventEmitter {
	  constructor(device, socket) {
	    super();
	    this._waitForNextTask = (0, import_task.makeWaitForNextTask)();
	    this.setMaxListeners(0);
	    this.device = device;
	    this._socket = socket;
	    this._socket.on("close", () => {
	      this._waitForNextTask(() => {
	        if (this.onclose)
	          this.onclose();
	      });
	    });
	    this._receiver = new import_utilsBundle2.wsReceiver();
	    this._receiver.on("message", (message) => {
	      this._waitForNextTask(() => {
	        if (this.onmessage)
	          this.onmessage(JSON.parse(message));
	      });
	    });
	  }
	  async _init() {
	    await this._socket.write(Buffer.from(`GET /devtools/browser HTTP/1.1\r
Upgrade: WebSocket\r
Connection: Upgrade\r
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r
Sec-WebSocket-Version: 13\r
\r
`));
	    await new Promise((f) => this._socket.once("data", f));
	    this._socket.on("data", (data) => this._receiver._write(data, "binary", () => {
	    }));
	  }
	  async send(s) {
	    await this._socket.write(encodeWebFrame(JSON.stringify(s)));
	  }
	  async close() {
	    this._socket.close();
	  }
	}
	function encodeWebFrame(data) {
	  return import_utilsBundle2.wsSender.frame(Buffer.from(data), {
	    opcode: 1,
	    mask: true,
	    fin: true,
	    readOnly: true
	  })[0];
	}
	class ClankBrowserProcess {
	  constructor(browser) {
	    this._browser = browser;
	  }
	  async kill() {
	  }
	  async close() {
	    await this._browser.close();
	  }
	}
	return android$1;
}

var backendAdb;
var hasRequiredBackendAdb;

function requireBackendAdb () {
	if (hasRequiredBackendAdb) return backendAdb;
	hasRequiredBackendAdb = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var backendAdb_exports = {};
	__export(backendAdb_exports, {
	  AdbBackend: () => AdbBackend
	});
	backendAdb = __toCommonJS(backendAdb_exports);
	var import_events = require$$0$5;
	var import_net = __toESM(require$$8);
	var import_assert = requireAssert$1();
	var import_crypto = requireCrypto();
	var import_utilsBundle = requireUtilsBundle();
	class AdbBackend {
	  async devices(options = {}) {
	    const result = await runCommand("host:devices", options.host, options.port);
	    const lines = result.toString().trim().split("\n");
	    return lines.map((line) => {
	      const [serial, status] = line.trim().split("	");
	      return new AdbDevice(serial, status, options.host, options.port);
	    });
	  }
	}
	class AdbDevice {
	  constructor(serial, status, host, port) {
	    this._closed = false;
	    this.serial = serial;
	    this.status = status;
	    this.host = host;
	    this.port = port;
	  }
	  async init() {
	  }
	  async close() {
	    this._closed = true;
	  }
	  runCommand(command) {
	    if (this._closed)
	      throw new Error("Device is closed");
	    return runCommand(command, this.host, this.port, this.serial);
	  }
	  async open(command) {
	    if (this._closed)
	      throw new Error("Device is closed");
	    const result = await open(command, this.host, this.port, this.serial);
	    result.becomeSocket();
	    return result;
	  }
	}
	async function runCommand(command, host = "127.0.0.1", port = 5037, serial) {
	  (0, import_utilsBundle.debug)("pw:adb:runCommand")(command, serial);
	  const socket = new BufferedSocketWrapper(command, import_net.default.createConnection({ host, port }));
	  try {
	    if (serial) {
	      await socket.write(encodeMessage(`host:transport:${serial}`));
	      const status2 = await socket.read(4);
	      (0, import_assert.assert)(status2.toString() === "OKAY", status2.toString());
	    }
	    await socket.write(encodeMessage(command));
	    const status = await socket.read(4);
	    (0, import_assert.assert)(status.toString() === "OKAY", status.toString());
	    let commandOutput;
	    if (!command.startsWith("shell:")) {
	      const remainingLength = parseInt((await socket.read(4)).toString(), 16);
	      commandOutput = await socket.read(remainingLength);
	    } else {
	      commandOutput = await socket.readAll();
	    }
	    return commandOutput;
	  } finally {
	    socket.close();
	  }
	}
	async function open(command, host = "127.0.0.1", port = 5037, serial) {
	  const socket = new BufferedSocketWrapper(command, import_net.default.createConnection({ host, port }));
	  if (serial) {
	    await socket.write(encodeMessage(`host:transport:${serial}`));
	    const status2 = await socket.read(4);
	    (0, import_assert.assert)(status2.toString() === "OKAY", status2.toString());
	  }
	  await socket.write(encodeMessage(command));
	  const status = await socket.read(4);
	  (0, import_assert.assert)(status.toString() === "OKAY", status.toString());
	  return socket;
	}
	function encodeMessage(message) {
	  let lenHex = message.length.toString(16);
	  lenHex = "0".repeat(4 - lenHex.length) + lenHex;
	  return Buffer.from(lenHex + message);
	}
	class BufferedSocketWrapper extends import_events.EventEmitter {
	  constructor(command, socket) {
	    super();
	    this.guid = (0, import_crypto.createGuid)();
	    this._buffer = Buffer.from([]);
	    this._isSocket = false;
	    this._isClosed = false;
	    this._command = command;
	    this._socket = socket;
	    this._connectPromise = new Promise((f) => this._socket.on("connect", f));
	    this._socket.on("data", (data) => {
	      (0, import_utilsBundle.debug)("pw:adb:data")(data.toString());
	      if (this._isSocket) {
	        this.emit("data", data);
	        return;
	      }
	      this._buffer = Buffer.concat([this._buffer, data]);
	      if (this._notifyReader)
	        this._notifyReader();
	    });
	    this._socket.on("close", () => {
	      this._isClosed = true;
	      if (this._notifyReader)
	        this._notifyReader();
	      this.close();
	      this.emit("close");
	    });
	    this._socket.on("error", (error) => this.emit("error", error));
	  }
	  async write(data) {
	    (0, import_utilsBundle.debug)("pw:adb:send")(data.toString().substring(0, 100) + "...");
	    await this._connectPromise;
	    await new Promise((f) => this._socket.write(data, f));
	  }
	  close() {
	    if (this._isClosed)
	      return;
	    (0, import_utilsBundle.debug)("pw:adb")("Close " + this._command);
	    this._socket.destroy();
	  }
	  async read(length) {
	    await this._connectPromise;
	    (0, import_assert.assert)(!this._isSocket, "Can not read by length in socket mode");
	    while (this._buffer.length < length)
	      await new Promise((f) => this._notifyReader = f);
	    const result = this._buffer.slice(0, length);
	    this._buffer = this._buffer.slice(length);
	    (0, import_utilsBundle.debug)("pw:adb:recv")(result.toString().substring(0, 100) + "...");
	    return result;
	  }
	  async readAll() {
	    while (!this._isClosed)
	      await new Promise((f) => this._notifyReader = f);
	    return this._buffer;
	  }
	  becomeSocket() {
	    (0, import_assert.assert)(!this._buffer.length);
	    this._isSocket = true;
	  }
	}
	return backendAdb;
}

var pipeTransport;
var hasRequiredPipeTransport;

function requirePipeTransport () {
	if (hasRequiredPipeTransport) return pipeTransport;
	hasRequiredPipeTransport = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var pipeTransport_exports = {};
	__export(pipeTransport_exports, {
	  PipeTransport: () => PipeTransport
	});
	pipeTransport = __toCommonJS(pipeTransport_exports);
	var import_utils = requireUtils();
	var import_debugLogger = requireDebugLogger();
	class PipeTransport {
	  constructor(pipeWrite, pipeRead) {
	    this._pendingBuffers = [];
	    this._waitForNextTask = (0, import_utils.makeWaitForNextTask)();
	    this._closed = false;
	    this._pipeRead = pipeRead;
	    this._pipeWrite = pipeWrite;
	    pipeRead.on("data", (buffer) => this._dispatch(buffer));
	    pipeRead.on("close", () => {
	      this._closed = true;
	      if (this._onclose)
	        this._onclose.call(null);
	    });
	    pipeRead.on("error", (e) => import_debugLogger.debugLogger.log("error", e));
	    pipeWrite.on("error", (e) => import_debugLogger.debugLogger.log("error", e));
	    this.onmessage = void 0;
	  }
	  get onclose() {
	    return this._onclose;
	  }
	  set onclose(onclose) {
	    this._onclose = onclose;
	    if (onclose && !this._pipeRead.readable)
	      onclose();
	  }
	  send(message) {
	    if (this._closed)
	      throw new Error("Pipe has been closed");
	    this._pipeWrite.write(JSON.stringify(message));
	    this._pipeWrite.write("\0");
	  }
	  close() {
	    throw new Error("unimplemented");
	  }
	  _dispatch(buffer) {
	    let end = buffer.indexOf("\0");
	    if (end === -1) {
	      this._pendingBuffers.push(buffer);
	      return;
	    }
	    this._pendingBuffers.push(buffer.slice(0, end));
	    const message = Buffer.concat(this._pendingBuffers).toString();
	    this._waitForNextTask(() => {
	      if (this.onmessage)
	        this.onmessage.call(null, JSON.parse(message));
	    });
	    let start = end + 1;
	    end = buffer.indexOf("\0", start);
	    while (end !== -1) {
	      const message2 = buffer.toString(void 0, start, end);
	      this._waitForNextTask(() => {
	        if (this.onmessage)
	          this.onmessage.call(null, JSON.parse(message2));
	      });
	      start = end + 1;
	      end = buffer.indexOf("\0", start);
	    }
	    this._pendingBuffers = [buffer.slice(start)];
	  }
	}
	return pipeTransport;
}

var transport;
var hasRequiredTransport;

function requireTransport () {
	if (hasRequiredTransport) return transport;
	hasRequiredTransport = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var transport_exports = {};
	__export(transport_exports, {
	  WebSocketTransport: () => WebSocketTransport,
	  perMessageDeflate: () => perMessageDeflate
	});
	transport = __toCommonJS(transport_exports);
	var import_utils = requireUtils();
	var import_happyEyeballs = requireHappyEyeballs();
	var import_utilsBundle = requireUtilsBundle();
	const perMessageDeflate = {
	  clientNoContextTakeover: true,
	  zlibDeflateOptions: {
	    level: 3
	  },
	  zlibInflateOptions: {
	    chunkSize: 10 * 1024
	  },
	  threshold: 10 * 1024
	};
	class WebSocketTransport {
	  constructor(progress, url, logUrl, options) {
	    this.headers = [];
	    this.wsEndpoint = url;
	    this._logUrl = logUrl;
	    this._ws = new import_utilsBundle.ws(url, [], {
	      maxPayload: 256 * 1024 * 1024,
	      // 256Mb,
	      // Prevent internal http client error when passing negative timeout.
	      handshakeTimeout: Math.max(progress?.timeUntilDeadline() ?? 3e4, 1),
	      headers: options.headers,
	      followRedirects: options.followRedirects,
	      agent: /^(https|wss):\/\//.test(url) ? import_happyEyeballs.httpsHappyEyeballsAgent : import_happyEyeballs.httpHappyEyeballsAgent,
	      perMessageDeflate
	    });
	    this._ws.on("upgrade", (response) => {
	      for (let i = 0; i < response.rawHeaders.length; i += 2) {
	        this.headers.push({ name: response.rawHeaders[i], value: response.rawHeaders[i + 1] });
	        if (options.debugLogHeader && response.rawHeaders[i] === options.debugLogHeader)
	          progress?.log(response.rawHeaders[i + 1]);
	      }
	    });
	    this._progress = progress;
	    const messageWrap = (0, import_utils.makeWaitForNextTask)();
	    this._ws.addEventListener("message", (event) => {
	      messageWrap(() => {
	        const eventData = event.data;
	        let parsedJson;
	        try {
	          parsedJson = JSON.parse(eventData);
	        } catch (e) {
	          this._progress?.log(`<closing ws> Closing websocket due to malformed JSON. eventData=${eventData} e=${e?.message}`);
	          this._ws.close();
	          return;
	        }
	        try {
	          if (this.onmessage)
	            this.onmessage.call(null, parsedJson);
	        } catch (e) {
	          this._progress?.log(`<closing ws> Closing websocket due to failed onmessage callback. eventData=${eventData} e=${e?.message}`);
	          this._ws.close();
	        }
	      });
	    });
	    this._ws.addEventListener("close", (event) => {
	      this._progress?.log(`<ws disconnected> ${logUrl} code=${event.code} reason=${event.reason}`);
	      if (this.onclose)
	        this.onclose.call(null, event.reason);
	    });
	    this._ws.addEventListener("error", (error) => this._progress?.log(`<ws error> ${logUrl} ${error.type} ${error.message}`));
	  }
	  static async connect(progress, url, options = {}) {
	    return await WebSocketTransport._connect(
	      progress,
	      url,
	      options,
	      false
	      /* hadRedirects */
	    );
	  }
	  static async _connect(progress, url, options, hadRedirects) {
	    const logUrl = stripQueryParams(url);
	    progress?.log(`<ws connecting> ${logUrl}`);
	    const transport = new WebSocketTransport(progress, url, logUrl, { ...options, followRedirects: !!options.followRedirects && hadRedirects });
	    let success = false;
	    progress?.cleanupWhenAborted(async () => {
	      if (!success)
	        await transport.closeAndWait().catch((e) => null);
	    });
	    const result = await new Promise((fulfill, reject) => {
	      transport._ws.on("open", async () => {
	        progress?.log(`<ws connected> ${logUrl}`);
	        fulfill({ transport });
	      });
	      transport._ws.on("error", (event) => {
	        progress?.log(`<ws connect error> ${logUrl} ${event.message}`);
	        reject(new Error("WebSocket error: " + event.message));
	        transport._ws.close();
	      });
	      transport._ws.on("unexpected-response", (request, response) => {
	        if (options.followRedirects && !hadRedirects && (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 307 || response.statusCode === 308)) {
	          fulfill({ redirect: response });
	          transport._ws.close();
	          return;
	        }
	        for (let i = 0; i < response.rawHeaders.length; i += 2) {
	          if (options.debugLogHeader && response.rawHeaders[i] === options.debugLogHeader)
	            progress?.log(response.rawHeaders[i + 1]);
	        }
	        const chunks = [];
	        const errorPrefix = `${logUrl} ${response.statusCode} ${response.statusMessage}`;
	        response.on("data", (chunk) => chunks.push(chunk));
	        response.on("close", () => {
	          const error = chunks.length ? `${errorPrefix}
${Buffer.concat(chunks)}` : errorPrefix;
	          progress?.log(`<ws unexpected response> ${error}`);
	          reject(new Error("WebSocket error: " + error));
	          transport._ws.close();
	        });
	      });
	    });
	    if (result.redirect) {
	      const newHeaders = Object.fromEntries(Object.entries(options.headers || {}).filter(([name]) => {
	        return !name.includes("access-key") && name.toLowerCase() !== "authorization";
	      }));
	      return WebSocketTransport._connect(
	        progress,
	        result.redirect.headers.location,
	        { ...options, headers: newHeaders },
	        true
	        /* hadRedirects */
	      );
	    }
	    success = true;
	    return transport;
	  }
	  send(message) {
	    this._ws.send(JSON.stringify(message));
	  }
	  close() {
	    this._progress?.log(`<ws disconnecting> ${this._logUrl}`);
	    this._ws.close();
	  }
	  async closeAndWait() {
	    if (this._ws.readyState === import_utilsBundle.ws.CLOSED)
	      return;
	    const promise = new Promise((f) => this._ws.once("close", f));
	    this.close();
	    await promise;
	  }
	}
	function stripQueryParams(url) {
	  try {
	    const u = new URL(url);
	    u.search = "";
	    u.hash = "";
	    return u.toString();
	  } catch {
	    return url;
	  }
	}
	return transport;
}

var browserType$1;
var hasRequiredBrowserType$1;

function requireBrowserType$1 () {
	if (hasRequiredBrowserType$1) return browserType$1;
	hasRequiredBrowserType$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserType_exports = {};
	__export(browserType_exports, {
	  BrowserReadyState: () => BrowserReadyState,
	  BrowserType: () => BrowserType,
	  kNoXServerRunningError: () => kNoXServerRunningError
	});
	browserType$1 = __toCommonJS(browserType_exports);
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_browserContext = requireBrowserContext$1();
	var import_timeoutSettings = requireTimeoutSettings$1();
	var import_debug = requireDebug$1();
	var import_assert = requireAssert$1();
	var import_manualPromise = requireManualPromise();
	var import_fileUtils = requireFileUtils$1();
	var import_helper = requireHelper();
	var import_instrumentation = requireInstrumentation();
	var import_pipeTransport = requirePipeTransport();
	var import_processLauncher = requireProcessLauncher();
	var import_progress = requireProgress();
	var import_protocolError = requireProtocolError();
	var import_registry = requireRegistry();
	var import_socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
	var import_transport = requireTransport();
	var import_debugLogger = requireDebugLogger();
	const kNoXServerRunningError = "Looks like you launched a headed browser without having a XServer running.\nSet either 'headless: true' or use 'xvfb-run <your-playwright-app>' before running Playwright.\n\n<3 Playwright Team";
	class BrowserReadyState {
	  constructor() {
	    this._wsEndpoint = new import_manualPromise.ManualPromise();
	  }
	  onBrowserExit() {
	    this._wsEndpoint.resolve(void 0);
	  }
	  async waitUntilReady() {
	    const wsEndpoint = await this._wsEndpoint;
	    return { wsEndpoint };
	  }
	}
	class BrowserType extends import_instrumentation.SdkObject {
	  constructor(parent, browserName) {
	    super(parent, "browser-type");
	    this._useBidi = false;
	    this.attribution.browserType = this;
	    this._name = browserName;
	  }
	  executablePath() {
	    return import_registry.registry.findExecutable(this._name).executablePath(this.attribution.playwright.options.sdkLanguage) || "";
	  }
	  name() {
	    return this._name;
	  }
	  async launch(metadata, options, protocolLogger) {
	    options = this._validateLaunchOptions(options);
	    if (this._useBidi)
	      options.useWebSocket = true;
	    const controller = new import_progress.ProgressController(metadata, this);
	    controller.setLogName("browser");
	    const browser = await controller.run((progress) => {
	      const seleniumHubUrl = options.__testHookSeleniumRemoteURL || process.env.SELENIUM_REMOTE_URL;
	      if (seleniumHubUrl)
	        return this._launchWithSeleniumHub(progress, seleniumHubUrl, options);
	      return this._innerLaunchWithRetries(progress, options, void 0, import_helper.helper.debugProtocolLogger(protocolLogger)).catch((e) => {
	        throw this._rewriteStartupLog(e);
	      });
	    }, import_timeoutSettings.TimeoutSettings.launchTimeout(options));
	    return browser;
	  }
	  async launchPersistentContext(metadata, userDataDir, options) {
	    const launchOptions = this._validateLaunchOptions(options);
	    if (this._useBidi)
	      launchOptions.useWebSocket = true;
	    const controller = new import_progress.ProgressController(metadata, this);
	    controller.setLogName("browser");
	    const browser = await controller.run(async (progress) => {
	      let clientCertificatesProxy;
	      if (options.clientCertificates?.length) {
	        clientCertificatesProxy = new import_socksClientCertificatesInterceptor.ClientCertificatesProxy(options);
	        launchOptions.proxyOverride = await clientCertificatesProxy?.listen();
	        options = { ...options };
	        options.internalIgnoreHTTPSErrors = true;
	      }
	      progress.cleanupWhenAborted(() => clientCertificatesProxy?.close());
	      const browser2 = await this._innerLaunchWithRetries(progress, launchOptions, options, import_helper.helper.debugProtocolLogger(), userDataDir).catch((e) => {
	        throw this._rewriteStartupLog(e);
	      });
	      browser2._defaultContext._clientCertificatesProxy = clientCertificatesProxy;
	      return browser2;
	    }, import_timeoutSettings.TimeoutSettings.launchTimeout(launchOptions));
	    return browser._defaultContext;
	  }
	  async _innerLaunchWithRetries(progress, options, persistent, protocolLogger, userDataDir) {
	    try {
	      return await this._innerLaunch(progress, options, persistent, protocolLogger, userDataDir);
	    } catch (error) {
	      const errorMessage = typeof error === "object" && typeof error.message === "string" ? error.message : "";
	      if (errorMessage.includes("Inconsistency detected by ld.so")) {
	        progress.log(`<restarting browser due to hitting race condition in glibc>`);
	        return this._innerLaunch(progress, options, persistent, protocolLogger, userDataDir);
	      }
	      throw error;
	    }
	  }
	  async _innerLaunch(progress, options, persistent, protocolLogger, maybeUserDataDir) {
	    options.proxy = options.proxy ? (0, import_browserContext.normalizeProxySettings)(options.proxy) : void 0;
	    const browserLogsCollector = new import_debugLogger.RecentLogsCollector();
	    const { browserProcess, userDataDir, artifactsDir, transport } = await this._launchProcess(progress, options, !!persistent, browserLogsCollector, maybeUserDataDir);
	    if (options.__testHookBeforeCreateBrowser)
	      await options.__testHookBeforeCreateBrowser();
	    const browserOptions = {
	      name: this._name,
	      isChromium: this._name === "chromium",
	      channel: options.channel,
	      slowMo: options.slowMo,
	      persistent,
	      headful: !options.headless,
	      artifactsDir,
	      downloadsPath: options.downloadsPath || artifactsDir,
	      tracesDir: options.tracesDir || artifactsDir,
	      browserProcess,
	      customExecutablePath: options.executablePath,
	      proxy: options.proxy,
	      protocolLogger,
	      browserLogsCollector,
	      wsEndpoint: options.useWebSocket ? transport.wsEndpoint : void 0,
	      originalLaunchOptions: options
	    };
	    if (persistent)
	      (0, import_browserContext.validateBrowserContextOptions)(persistent, browserOptions);
	    copyTestHooks(options, browserOptions);
	    const browser = await this.connectToTransport(transport, browserOptions);
	    browser._userDataDirForTest = userDataDir;
	    if (persistent && !options.ignoreAllDefaultArgs)
	      await browser._defaultContext._loadDefaultContext(progress);
	    return browser;
	  }
	  async _launchProcess(progress, options, isPersistent, browserLogsCollector, userDataDir) {
	    const {
	      ignoreDefaultArgs,
	      ignoreAllDefaultArgs,
	      args = [],
	      executablePath = null,
	      handleSIGINT = true,
	      handleSIGTERM = true,
	      handleSIGHUP = true
	    } = options;
	    const env = options.env ? (0, import_processLauncher.envArrayToObject)(options.env) : process.env;
	    await this._createArtifactDirs(options);
	    const tempDirectories = [];
	    const artifactsDir = await import_fs.default.promises.mkdtemp(import_path.default.join(import_os.default.tmpdir(), "playwright-artifacts-"));
	    tempDirectories.push(artifactsDir);
	    if (userDataDir) {
	      (0, import_assert.assert)(import_path.default.isAbsolute(userDataDir), "userDataDir must be an absolute path");
	      if (!await (0, import_fileUtils.existsAsync)(userDataDir))
	        await import_fs.default.promises.mkdir(userDataDir, { recursive: true, mode: 448 });
	    } else {
	      userDataDir = await import_fs.default.promises.mkdtemp(import_path.default.join(import_os.default.tmpdir(), `playwright_${this._name}dev_profile-`));
	      tempDirectories.push(userDataDir);
	    }
	    await this.prepareUserDataDir(options, userDataDir);
	    const browserArguments = [];
	    if (ignoreAllDefaultArgs)
	      browserArguments.push(...args);
	    else if (ignoreDefaultArgs)
	      browserArguments.push(...this.defaultArgs(options, isPersistent, userDataDir).filter((arg) => ignoreDefaultArgs.indexOf(arg) === -1));
	    else
	      browserArguments.push(...this.defaultArgs(options, isPersistent, userDataDir));
	    let executable;
	    if (executablePath) {
	      if (!await (0, import_fileUtils.existsAsync)(executablePath))
	        throw new Error(`Failed to launch ${this._name} because executable doesn't exist at ${executablePath}`);
	      executable = executablePath;
	    } else {
	      const registryExecutable = import_registry.registry.findExecutable(this.getExecutableName(options));
	      if (!registryExecutable || registryExecutable.browserName !== this._name)
	        throw new Error(`Unsupported ${this._name} channel "${options.channel}"`);
	      executable = registryExecutable.executablePathOrDie(this.attribution.playwright.options.sdkLanguage);
	      await import_registry.registry.validateHostRequirementsForExecutablesIfNeeded([registryExecutable], this.attribution.playwright.options.sdkLanguage);
	    }
	    const readyState = this.readyState(options);
	    let transport = void 0;
	    let browserProcess = void 0;
	    const { launchedProcess, gracefullyClose, kill } = await (0, import_processLauncher.launchProcess)({
	      command: executable,
	      args: browserArguments,
	      env: this.amendEnvironment(env, userDataDir, executable, browserArguments),
	      handleSIGINT,
	      handleSIGTERM,
	      handleSIGHUP,
	      log: (message) => {
	        readyState?.onBrowserOutput(message);
	        progress.log(message);
	        browserLogsCollector.log(message);
	      },
	      stdio: "pipe",
	      tempDirectories,
	      attemptToGracefullyClose: async () => {
	        if (options.__testHookGracefullyClose)
	          await options.__testHookGracefullyClose();
	        this.attemptToGracefullyCloseBrowser(transport);
	      },
	      onExit: (exitCode, signal) => {
	        readyState?.onBrowserExit();
	        if (browserProcess && browserProcess.onclose)
	          browserProcess.onclose(exitCode, signal);
	      }
	    });
	    async function closeOrKill(timeout) {
	      let timer;
	      try {
	        await Promise.race([
	          gracefullyClose(),
	          new Promise((resolve, reject) => timer = setTimeout(reject, timeout))
	        ]);
	      } catch (ignored) {
	        await kill().catch((ignored2) => {
	        });
	      } finally {
	        clearTimeout(timer);
	      }
	    }
	    browserProcess = {
	      onclose: void 0,
	      process: launchedProcess,
	      close: () => closeOrKill(options.__testHookBrowserCloseTimeout || import_timeoutSettings.DEFAULT_TIMEOUT),
	      kill
	    };
	    progress.cleanupWhenAborted(() => closeOrKill(progress.timeUntilDeadline()));
	    const wsEndpoint = (await readyState?.waitUntilReady())?.wsEndpoint;
	    if (options.useWebSocket) {
	      transport = await import_transport.WebSocketTransport.connect(progress, wsEndpoint);
	    } else {
	      const stdio = launchedProcess.stdio;
	      transport = new import_pipeTransport.PipeTransport(stdio[3], stdio[4]);
	    }
	    return { browserProcess, artifactsDir, userDataDir, transport };
	  }
	  async _createArtifactDirs(options) {
	    if (options.downloadsPath)
	      await import_fs.default.promises.mkdir(options.downloadsPath, { recursive: true });
	    if (options.tracesDir)
	      await import_fs.default.promises.mkdir(options.tracesDir, { recursive: true });
	  }
	  async connectOverCDP(metadata, endpointURL, options) {
	    throw new Error("CDP connections are only supported by Chromium");
	  }
	  async _launchWithSeleniumHub(progress, hubUrl, options) {
	    throw new Error("Connecting to SELENIUM_REMOTE_URL is only supported by Chromium");
	  }
	  _validateLaunchOptions(options) {
	    const { devtools = false } = options;
	    let { headless = !devtools, downloadsPath, proxy } = options;
	    if ((0, import_debug.debugMode)())
	      headless = false;
	    if (downloadsPath && !import_path.default.isAbsolute(downloadsPath))
	      downloadsPath = import_path.default.join(process.cwd(), downloadsPath);
	    if (this.attribution.playwright.options.socksProxyPort)
	      proxy = { server: `socks5://127.0.0.1:${this.attribution.playwright.options.socksProxyPort}` };
	    return { ...options, devtools, headless, downloadsPath, proxy };
	  }
	  _createUserDataDirArgMisuseError(userDataDirArg) {
	    switch (this.attribution.playwright.options.sdkLanguage) {
	      case "java":
	        return new Error(`Pass userDataDir parameter to 'BrowserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
	      case "python":
	        return new Error(`Pass user_data_dir parameter to 'browser_type.launch_persistent_context(user_data_dir, **kwargs)' instead of specifying '${userDataDirArg}' argument`);
	      case "csharp":
	        return new Error(`Pass userDataDir parameter to 'BrowserType.LaunchPersistentContextAsync(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
	      default:
	        return new Error(`Pass userDataDir parameter to 'browserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
	    }
	  }
	  _rewriteStartupLog(error) {
	    if (!(0, import_protocolError.isProtocolError)(error))
	      return error;
	    return this.doRewriteStartupLog(error);
	  }
	  readyState(options) {
	    return void 0;
	  }
	  async prepareUserDataDir(options, userDataDir) {
	  }
	  getExecutableName(options) {
	    return options.channel || this._name;
	  }
	}
	function copyTestHooks(from, to) {
	  for (const [key, value] of Object.entries(from)) {
	    if (key.startsWith("__testHook"))
	      to[key] = value;
	  }
	}
	return browserType$1;
}

var bidiConnection;
var hasRequiredBidiConnection;

function requireBidiConnection () {
	if (hasRequiredBidiConnection) return bidiConnection;
	hasRequiredBidiConnection = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiConnection_exports = {};
	__export(bidiConnection_exports, {
	  BidiConnection: () => BidiConnection,
	  BidiSession: () => BidiSession,
	  kBrowserCloseMessageId: () => kBrowserCloseMessageId
	});
	bidiConnection = __toCommonJS(bidiConnection_exports);
	var import_events = require$$0$5;
	var import_debugLogger = requireDebugLogger();
	var import_helper = requireHelper();
	var import_protocolError = requireProtocolError();
	const kBrowserCloseMessageId = 0;
	class BidiConnection {
	  constructor(transport, onDisconnect, protocolLogger, browserLogsCollector) {
	    this._lastId = 0;
	    this._closed = false;
	    this._browsingContextToSession = /* @__PURE__ */ new Map();
	    this._transport = transport;
	    this._onDisconnect = onDisconnect;
	    this._protocolLogger = protocolLogger;
	    this._browserLogsCollector = browserLogsCollector;
	    this.browserSession = new BidiSession(this, "", (message) => {
	      this.rawSend(message);
	    });
	    this._transport.onmessage = this._dispatchMessage.bind(this);
	    this._transport.onclose = this._onClose.bind(this);
	  }
	  nextMessageId() {
	    return ++this._lastId;
	  }
	  rawSend(message) {
	    this._protocolLogger("send", message);
	    this._transport.send(message);
	  }
	  _dispatchMessage(message) {
	    this._protocolLogger("receive", message);
	    const object = message;
	    if (object.type === "event") {
	      let context;
	      if ("context" in object.params)
	        context = object.params.context;
	      else if (object.method === "log.entryAdded" || object.method === "script.message")
	        context = object.params.source?.context;
	      if (context) {
	        const session = this._browsingContextToSession.get(context);
	        if (session) {
	          session.dispatchMessage(message);
	          return;
	        }
	      }
	    } else if (message.id) {
	      for (const session of this._browsingContextToSession.values()) {
	        if (session.hasCallback(message.id)) {
	          session.dispatchMessage(message);
	          return;
	        }
	      }
	    }
	    this.browserSession.dispatchMessage(message);
	  }
	  _onClose(reason) {
	    this._closed = true;
	    this._transport.onmessage = void 0;
	    this._transport.onclose = void 0;
	    this._browserDisconnectedLogs = import_helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
	    this.browserSession.dispose();
	    this._onDisconnect();
	  }
	  isClosed() {
	    return this._closed;
	  }
	  close() {
	    if (!this._closed)
	      this._transport.close();
	  }
	  createMainFrameBrowsingContextSession(bowsingContextId) {
	    const result = new BidiSession(this, bowsingContextId, (message) => this.rawSend(message));
	    this._browsingContextToSession.set(bowsingContextId, result);
	    return result;
	  }
	}
	class BidiSession extends import_events.EventEmitter {
	  constructor(connection, sessionId, rawSend) {
	    super();
	    this._disposed = false;
	    this._callbacks = /* @__PURE__ */ new Map();
	    this._crashed = false;
	    this._browsingContexts = /* @__PURE__ */ new Set();
	    this.setMaxListeners(0);
	    this.connection = connection;
	    this.sessionId = sessionId;
	    this._rawSend = rawSend;
	    this.on = super.on;
	    this.off = super.removeListener;
	    this.addListener = super.addListener;
	    this.removeListener = super.removeListener;
	    this.once = super.once;
	  }
	  addFrameBrowsingContext(context) {
	    this._browsingContexts.add(context);
	    this.connection._browsingContextToSession.set(context, this);
	  }
	  removeFrameBrowsingContext(context) {
	    this._browsingContexts.delete(context);
	    this.connection._browsingContextToSession.delete(context);
	  }
	  async send(method, params) {
	    if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs)
	      throw new import_protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this.connection._browserDisconnectedLogs);
	    const id = this.connection.nextMessageId();
	    const messageObj = { id, method, params };
	    this._rawSend(messageObj);
	    return new Promise((resolve, reject) => {
	      this._callbacks.set(id, { resolve, reject, error: new import_protocolError.ProtocolError("error", method) });
	    });
	  }
	  sendMayFail(method, params) {
	    return this.send(method, params).catch((error) => import_debugLogger.debugLogger.log("error", error));
	  }
	  markAsCrashed() {
	    this._crashed = true;
	  }
	  isDisposed() {
	    return this._disposed;
	  }
	  dispose() {
	    this._disposed = true;
	    this.connection._browsingContextToSession.delete(this.sessionId);
	    for (const context of this._browsingContexts)
	      this.connection._browsingContextToSession.delete(context);
	    this._browsingContexts.clear();
	    for (const callback of this._callbacks.values()) {
	      callback.error.type = this._crashed ? "crashed" : "closed";
	      callback.error.logs = this.connection._browserDisconnectedLogs;
	      callback.reject(callback.error);
	    }
	    this._callbacks.clear();
	  }
	  hasCallback(id) {
	    return this._callbacks.has(id);
	  }
	  dispatchMessage(message) {
	    const object = message;
	    if (object.id === kBrowserCloseMessageId)
	      return;
	    if (object.id && this._callbacks.has(object.id)) {
	      const callback = this._callbacks.get(object.id);
	      this._callbacks.delete(object.id);
	      if (object.type === "error") {
	        callback.error.setMessage(object.error + "\nMessage: " + object.message);
	        callback.reject(callback.error);
	      } else if (object.type === "success") {
	        callback.resolve(object.result);
	      } else {
	        callback.error.setMessage("Internal error, unexpected response type: " + JSON.stringify(object));
	        callback.reject(callback.error);
	      }
	    } else if (object.id) ; else {
	      Promise.resolve().then(() => this.emit(object.method, object.params));
	    }
	  }
	}
	return bidiConnection;
}

var cookieStore;
var hasRequiredCookieStore;

function requireCookieStore () {
	if (hasRequiredCookieStore) return cookieStore;
	hasRequiredCookieStore = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var cookieStore_exports = {};
	__export(cookieStore_exports, {
	  CookieStore: () => CookieStore,
	  domainMatches: () => domainMatches,
	  parseRawCookie: () => parseRawCookie
	});
	cookieStore = __toCommonJS(cookieStore_exports);
	var import_network = requireNetwork$1();
	class Cookie {
	  constructor(data) {
	    this._raw = data;
	  }
	  name() {
	    return this._raw.name;
	  }
	  // https://datatracker.ietf.org/doc/html/rfc6265#section-5.4
	  matches(url) {
	    if (this._raw.secure && (url.protocol !== "https:" && url.hostname !== "localhost"))
	      return false;
	    if (!domainMatches(url.hostname, this._raw.domain))
	      return false;
	    if (!pathMatches(url.pathname, this._raw.path))
	      return false;
	    return true;
	  }
	  equals(other) {
	    return this._raw.name === other._raw.name && this._raw.domain === other._raw.domain && this._raw.path === other._raw.path;
	  }
	  networkCookie() {
	    return this._raw;
	  }
	  updateExpiresFrom(other) {
	    this._raw.expires = other._raw.expires;
	  }
	  expired() {
	    if (this._raw.expires === -1)
	      return false;
	    return this._raw.expires * 1e3 < Date.now();
	  }
	}
	class CookieStore {
	  constructor() {
	    this._nameToCookies = /* @__PURE__ */ new Map();
	  }
	  addCookies(cookies) {
	    for (const cookie of cookies)
	      this._addCookie(new Cookie(cookie));
	  }
	  cookies(url) {
	    const result = [];
	    for (const cookie of this._cookiesIterator()) {
	      if (cookie.matches(url))
	        result.push(cookie.networkCookie());
	    }
	    return result;
	  }
	  allCookies() {
	    const result = [];
	    for (const cookie of this._cookiesIterator())
	      result.push(cookie.networkCookie());
	    return result;
	  }
	  _addCookie(cookie) {
	    let set = this._nameToCookies.get(cookie.name());
	    if (!set) {
	      set = /* @__PURE__ */ new Set();
	      this._nameToCookies.set(cookie.name(), set);
	    }
	    for (const other of set) {
	      if (other.equals(cookie))
	        set.delete(other);
	    }
	    set.add(cookie);
	    CookieStore.pruneExpired(set);
	  }
	  *_cookiesIterator() {
	    for (const [name, cookies] of this._nameToCookies) {
	      CookieStore.pruneExpired(cookies);
	      for (const cookie of cookies)
	        yield cookie;
	      if (cookies.size === 0)
	        this._nameToCookies.delete(name);
	    }
	  }
	  static pruneExpired(cookies) {
	    for (const cookie of cookies) {
	      if (cookie.expired())
	        cookies.delete(cookie);
	    }
	  }
	}
	function parseRawCookie(header) {
	  const pairs = header.split(";").filter((s) => s.trim().length > 0).map((p) => {
	    let key = "";
	    let value2 = "";
	    const separatorPos = p.indexOf("=");
	    if (separatorPos === -1) {
	      key = p.trim();
	    } else {
	      key = p.slice(0, separatorPos).trim();
	      value2 = p.slice(separatorPos + 1).trim();
	    }
	    return [key, value2];
	  });
	  if (!pairs.length)
	    return null;
	  const [name, value] = pairs[0];
	  const cookie = {
	    name,
	    value
	  };
	  for (let i = 1; i < pairs.length; i++) {
	    const [name2, value2] = pairs[i];
	    switch (name2.toLowerCase()) {
	      case "expires":
	        const expiresMs = +new Date(value2);
	        if (isFinite(expiresMs)) {
	          if (expiresMs <= 0)
	            cookie.expires = 0;
	          else
	            cookie.expires = Math.min(expiresMs / 1e3, import_network.kMaxCookieExpiresDateInSeconds);
	        }
	        break;
	      case "max-age":
	        const maxAgeSec = parseInt(value2, 10);
	        if (isFinite(maxAgeSec)) {
	          if (maxAgeSec <= 0)
	            cookie.expires = 0;
	          else
	            cookie.expires = Math.min(Date.now() / 1e3 + maxAgeSec, import_network.kMaxCookieExpiresDateInSeconds);
	        }
	        break;
	      case "domain":
	        cookie.domain = value2.toLocaleLowerCase() || "";
	        if (cookie.domain && !cookie.domain.startsWith(".") && cookie.domain.includes("."))
	          cookie.domain = "." + cookie.domain;
	        break;
	      case "path":
	        cookie.path = value2 || "";
	        break;
	      case "secure":
	        cookie.secure = true;
	        break;
	      case "httponly":
	        cookie.httpOnly = true;
	        break;
	      case "samesite":
	        switch (value2.toLowerCase()) {
	          case "none":
	            cookie.sameSite = "None";
	            break;
	          case "lax":
	            cookie.sameSite = "Lax";
	            break;
	          case "strict":
	            cookie.sameSite = "Strict";
	            break;
	        }
	        break;
	    }
	  }
	  return cookie;
	}
	function domainMatches(value, domain) {
	  if (value === domain)
	    return true;
	  if (!domain.startsWith("."))
	    return false;
	  value = "." + value;
	  return value.endsWith(domain);
	}
	function pathMatches(value, path) {
	  if (value === path)
	    return true;
	  if (!value.endsWith("/"))
	    value = value + "/";
	  if (!path.endsWith("/"))
	    path = path + "/";
	  return value.startsWith(path);
	}
	return cookieStore;
}

var bidiProtocol;
var hasRequiredBidiProtocol;

function requireBidiProtocol () {
	if (hasRequiredBidiProtocol) return bidiProtocol;
	hasRequiredBidiProtocol = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiProtocol_exports = {};
	__export(bidiProtocol_exports, {
	  BrowsingContext: () => BrowsingContext,
	  ErrorCode: () => ErrorCode,
	  Input: () => Input,
	  Log: () => Log,
	  Network: () => Network,
	  Script: () => Script,
	  Session: () => Session
	});
	bidiProtocol = __toCommonJS(bidiProtocol_exports);
	/**
	 * @license
	 * Copyright 2024 Google Inc.
	 * Modifications copyright (c) Microsoft Corporation.
	 * SPDX-License-Identifier: Apache-2.0
	 */
	var ErrorCode = /* @__PURE__ */ ((ErrorCode2) => {
	  ErrorCode2["InvalidArgument"] = "invalid argument";
	  ErrorCode2["InvalidSelector"] = "invalid selector";
	  ErrorCode2["InvalidSessionId"] = "invalid session id";
	  ErrorCode2["InvalidWebExtension"] = "invalid web extension";
	  ErrorCode2["MoveTargetOutOfBounds"] = "move target out of bounds";
	  ErrorCode2["NoSuchAlert"] = "no such alert";
	  ErrorCode2["NoSuchElement"] = "no such element";
	  ErrorCode2["NoSuchFrame"] = "no such frame";
	  ErrorCode2["NoSuchHandle"] = "no such handle";
	  ErrorCode2["NoSuchHistoryEntry"] = "no such history entry";
	  ErrorCode2["NoSuchIntercept"] = "no such intercept";
	  ErrorCode2["NoSuchNode"] = "no such node";
	  ErrorCode2["NoSuchRequest"] = "no such request";
	  ErrorCode2["NoSuchScript"] = "no such script";
	  ErrorCode2["NoSuchStoragePartition"] = "no such storage partition";
	  ErrorCode2["NoSuchUserContext"] = "no such user context";
	  ErrorCode2["NoSuchWebExtension"] = "no such web extension";
	  ErrorCode2["SessionNotCreated"] = "session not created";
	  ErrorCode2["UnableToCaptureScreen"] = "unable to capture screen";
	  ErrorCode2["UnableToCloseBrowser"] = "unable to close browser";
	  ErrorCode2["UnableToSetCookie"] = "unable to set cookie";
	  ErrorCode2["UnableToSetFileInput"] = "unable to set file input";
	  ErrorCode2["UnderspecifiedStoragePartition"] = "underspecified storage partition";
	  ErrorCode2["UnknownCommand"] = "unknown command";
	  ErrorCode2["UnknownError"] = "unknown error";
	  ErrorCode2["UnsupportedOperation"] = "unsupported operation";
	  return ErrorCode2;
	})(ErrorCode || {});
	var Session;
	((Session2) => {
	  ((UserPromptHandlerType2) => {
	    UserPromptHandlerType2["Accept"] = "accept";
	    UserPromptHandlerType2["Dismiss"] = "dismiss";
	    UserPromptHandlerType2["Ignore"] = "ignore";
	  })(Session2.UserPromptHandlerType || (Session2.UserPromptHandlerType = {}));
	})(Session || (Session = {}));
	var BrowsingContext;
	((BrowsingContext2) => {
	  ((ReadinessState2) => {
	    ReadinessState2["None"] = "none";
	    ReadinessState2["Interactive"] = "interactive";
	    ReadinessState2["Complete"] = "complete";
	  })(BrowsingContext2.ReadinessState || (BrowsingContext2.ReadinessState = {}));
	})(BrowsingContext || (BrowsingContext = {}));
	((BrowsingContext2) => {
	  ((UserPromptType2) => {
	    UserPromptType2["Alert"] = "alert";
	    UserPromptType2["Beforeunload"] = "beforeunload";
	    UserPromptType2["Confirm"] = "confirm";
	    UserPromptType2["Prompt"] = "prompt";
	  })(BrowsingContext2.UserPromptType || (BrowsingContext2.UserPromptType = {}));
	})(BrowsingContext || (BrowsingContext = {}));
	((BrowsingContext2) => {
	  ((CreateType2) => {
	    CreateType2["Tab"] = "tab";
	    CreateType2["Window"] = "window";
	  })(BrowsingContext2.CreateType || (BrowsingContext2.CreateType = {}));
	})(BrowsingContext || (BrowsingContext = {}));
	var Network;
	((Network2) => {
	  ((SameSite2) => {
	    SameSite2["Strict"] = "strict";
	    SameSite2["Lax"] = "lax";
	    SameSite2["None"] = "none";
	  })(Network2.SameSite || (Network2.SameSite = {}));
	})(Network || (Network = {}));
	((Network2) => {
	  ((InterceptPhase2) => {
	    InterceptPhase2["BeforeRequestSent"] = "beforeRequestSent";
	    InterceptPhase2["ResponseStarted"] = "responseStarted";
	    InterceptPhase2["AuthRequired"] = "authRequired";
	  })(Network2.InterceptPhase || (Network2.InterceptPhase = {}));
	})(Network || (Network = {}));
	var Script;
	((Script2) => {
	  ((ResultOwnership2) => {
	    ResultOwnership2["Root"] = "root";
	    ResultOwnership2["None"] = "none";
	  })(Script2.ResultOwnership || (Script2.ResultOwnership = {}));
	})(Script || (Script = {}));
	var Log;
	((Log2) => {
	  ((Level2) => {
	    Level2["Debug"] = "debug";
	    Level2["Info"] = "info";
	    Level2["Warn"] = "warn";
	    Level2["Error"] = "error";
	  })(Log2.Level || (Log2.Level = {}));
	})(Log || (Log = {}));
	var Input;
	((Input2) => {
	  ((PointerType2) => {
	    PointerType2["Mouse"] = "mouse";
	    PointerType2["Pen"] = "pen";
	    PointerType2["Touch"] = "touch";
	  })(Input2.PointerType || (Input2.PointerType = {}));
	})(Input || (Input = {}));
	return bidiProtocol;
}

var bidiNetworkManager;
var hasRequiredBidiNetworkManager;

function requireBidiNetworkManager () {
	if (hasRequiredBidiNetworkManager) return bidiNetworkManager;
	hasRequiredBidiNetworkManager = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiNetworkManager_exports = {};
	__export(bidiNetworkManager_exports, {
	  BidiNetworkManager: () => BidiNetworkManager,
	  bidiBytesValueToString: () => bidiBytesValueToString
	});
	bidiNetworkManager = __toCommonJS(bidiNetworkManager_exports);
	var import_eventsHelper = requireEventsHelper();
	var import_cookieStore = requireCookieStore();
	var network = __toESM(requireNetwork$1());
	var bidi = __toESM(requireBidiProtocol());
	class BidiNetworkManager {
	  constructor(bidiSession, page, onNavigationResponseStarted) {
	    this._userRequestInterceptionEnabled = false;
	    this._protocolRequestInterceptionEnabled = false;
	    this._session = bidiSession;
	    this._requests = /* @__PURE__ */ new Map();
	    this._page = page;
	    this._onNavigationResponseStarted = onNavigationResponseStarted;
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "network.beforeRequestSent", this._onBeforeRequestSent.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "network.responseStarted", this._onResponseStarted.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "network.responseCompleted", this._onResponseCompleted.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "network.fetchError", this._onFetchError.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "network.authRequired", this._onAuthRequired.bind(this))
	    ];
	  }
	  dispose() {
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	  }
	  _onBeforeRequestSent(param) {
	    if (param.request.url.startsWith("data:"))
	      return;
	    const redirectedFrom = param.redirectCount ? this._requests.get(param.request.request) || null : null;
	    const frame = redirectedFrom ? redirectedFrom.request.frame() : param.context ? this._page._frameManager.frame(param.context) : null;
	    if (!frame)
	      return;
	    if (redirectedFrom)
	      this._requests.delete(redirectedFrom._id);
	    let route;
	    if (param.intercepts) {
	      if (redirectedFrom) {
	        let params = {};
	        if (redirectedFrom._originalRequestRoute?._alreadyContinuedHeaders)
	          params = toBidiRequestHeaders(redirectedFrom._originalRequestRoute._alreadyContinuedHeaders ?? []);
	        this._session.sendMayFail("network.continueRequest", {
	          request: param.request.request,
	          ...params
	        });
	      } else {
	        route = new BidiRouteImpl(this._session, param.request.request);
	      }
	    }
	    const request = new BidiRequest(frame, redirectedFrom, param, route);
	    this._requests.set(request._id, request);
	    this._page._frameManager.requestStarted(request.request, route);
	  }
	  _onResponseStarted(params) {
	    const request = this._requests.get(params.request.request);
	    if (!request)
	      return;
	    const getResponseBody = async () => {
	      throw new Error(`Response body is not available for requests in Bidi`);
	    };
	    const timings = params.request.timings;
	    const startTime = timings.requestTime;
	    function relativeToStart(time) {
	      if (!time)
	        return -1;
	      return time - startTime;
	    }
	    const timing = {
	      startTime,
	      requestStart: relativeToStart(timings.requestStart),
	      responseStart: relativeToStart(timings.responseStart),
	      domainLookupStart: relativeToStart(timings.dnsStart),
	      domainLookupEnd: relativeToStart(timings.dnsEnd),
	      connectStart: relativeToStart(timings.connectStart),
	      secureConnectionStart: relativeToStart(timings.tlsStart),
	      connectEnd: relativeToStart(timings.connectEnd)
	    };
	    const response = new network.Response(request.request, params.response.status, params.response.statusText, fromBidiHeaders(params.response.headers), timing, getResponseBody, false);
	    response._serverAddrFinished();
	    response._securityDetailsFinished();
	    response.setRawResponseHeaders(null);
	    response.setResponseHeadersSize(params.response.headersSize);
	    this._page._frameManager.requestReceivedResponse(response);
	    if (params.navigation)
	      this._onNavigationResponseStarted(params);
	  }
	  _onResponseCompleted(params) {
	    const request = this._requests.get(params.request.request);
	    if (!request)
	      return;
	    const response = request.request._existingResponse();
	    response.setTransferSize(params.response.bodySize);
	    response.setEncodedBodySize(params.response.bodySize);
	    const isRedirected = response.status() >= 300 && response.status() <= 399;
	    const responseEndTime = params.request.timings.responseEnd - response.timing().startTime;
	    if (isRedirected) {
	      response._requestFinished(responseEndTime);
	    } else {
	      this._requests.delete(request._id);
	      response._requestFinished(responseEndTime);
	    }
	    response._setHttpVersion(params.response.protocol);
	    this._page._frameManager.reportRequestFinished(request.request, response);
	  }
	  _onFetchError(params) {
	    const request = this._requests.get(params.request.request);
	    if (!request)
	      return;
	    this._requests.delete(request._id);
	    const response = request.request._existingResponse();
	    if (response) {
	      response.setTransferSize(null);
	      response.setEncodedBodySize(null);
	      response._requestFinished(-1);
	    }
	    request.request._setFailureText(params.errorText);
	    this._page._frameManager.requestFailed(request.request, params.errorText === "NS_BINDING_ABORTED");
	  }
	  _onAuthRequired(params) {
	    const isBasic = params.response.authChallenges?.some((challenge) => challenge.scheme.startsWith("Basic"));
	    const credentials = this._page._browserContext._options.httpCredentials;
	    if (isBasic && credentials) {
	      this._session.sendMayFail("network.continueWithAuth", {
	        request: params.request.request,
	        action: "provideCredentials",
	        credentials: {
	          type: "password",
	          username: credentials.username,
	          password: credentials.password
	        }
	      });
	    } else {
	      this._session.sendMayFail("network.continueWithAuth", {
	        request: params.request.request,
	        action: "default"
	      });
	    }
	  }
	  async setRequestInterception(value) {
	    this._userRequestInterceptionEnabled = value;
	    await this._updateProtocolRequestInterception();
	  }
	  async setCredentials(credentials) {
	    this._credentials = credentials;
	    await this._updateProtocolRequestInterception();
	  }
	  async _updateProtocolRequestInterception(initial) {
	    const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
	    if (enabled === this._protocolRequestInterceptionEnabled)
	      return;
	    this._protocolRequestInterceptionEnabled = enabled;
	    if (initial && !enabled)
	      return;
	    const cachePromise = this._session.send("network.setCacheBehavior", { cacheBehavior: enabled ? "bypass" : "default" });
	    let interceptPromise = Promise.resolve(void 0);
	    if (enabled) {
	      interceptPromise = this._session.send("network.addIntercept", {
	        phases: [bidi.Network.InterceptPhase.AuthRequired, bidi.Network.InterceptPhase.BeforeRequestSent],
	        urlPatterns: [{ type: "pattern" }]
	        // urlPatterns: [{ type: 'string', pattern: '*' }],
	      }).then((r) => {
	        this._intercepId = r.intercept;
	      });
	    } else if (this._intercepId) {
	      interceptPromise = this._session.send("network.removeIntercept", { intercept: this._intercepId });
	      this._intercepId = void 0;
	    }
	    await Promise.all([cachePromise, interceptPromise]);
	  }
	}
	class BidiRequest {
	  constructor(frame, redirectedFrom, payload, route) {
	    this._id = payload.request.request;
	    if (redirectedFrom)
	      redirectedFrom._redirectedTo = this;
	    const postDataBuffer = null;
	    this.request = new network.Request(
	      frame._page._browserContext,
	      frame,
	      null,
	      redirectedFrom ? redirectedFrom.request : null,
	      payload.navigation ?? void 0,
	      payload.request.url,
	      "other",
	      payload.request.method,
	      postDataBuffer,
	      fromBidiHeaders(payload.request.headers)
	    );
	    this.request.setRawRequestHeaders(null);
	    this.request._setBodySize(payload.request.bodySize || 0);
	    this._originalRequestRoute = route ?? redirectedFrom?._originalRequestRoute;
	    route?._setRequest(this.request);
	  }
	  _finalRequest() {
	    let request = this;
	    while (request._redirectedTo)
	      request = request._redirectedTo;
	    return request;
	  }
	}
	class BidiRouteImpl {
	  constructor(session, requestId) {
	    this._session = session;
	    this._requestId = requestId;
	  }
	  _setRequest(request) {
	    this._request = request;
	  }
	  async continue(overrides) {
	    let headers = overrides.headers || this._request.headers();
	    if (overrides.postData && headers) {
	      headers = headers.map((header) => {
	        if (header.name.toLowerCase() === "content-length")
	          return { name: header.name, value: overrides.postData.byteLength.toString() };
	        return header;
	      });
	    }
	    this._alreadyContinuedHeaders = headers;
	    await this._session.sendMayFail("network.continueRequest", {
	      request: this._requestId,
	      url: overrides.url,
	      method: overrides.method,
	      ...toBidiRequestHeaders(this._alreadyContinuedHeaders),
	      body: overrides.postData ? { type: "base64", value: Buffer.from(overrides.postData).toString("base64") } : void 0
	    });
	  }
	  async fulfill(response) {
	    const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
	    await this._session.sendMayFail("network.provideResponse", {
	      request: this._requestId,
	      statusCode: response.status,
	      reasonPhrase: network.statusText(response.status),
	      ...toBidiResponseHeaders(response.headers),
	      body: { type: "base64", value: base64body }
	    });
	  }
	  async abort(errorCode) {
	    await this._session.sendMayFail("network.failRequest", {
	      request: this._requestId
	    });
	  }
	}
	function fromBidiHeaders(bidiHeaders) {
	  const result = [];
	  for (const { name, value } of bidiHeaders)
	    result.push({ name, value: bidiBytesValueToString(value) });
	  return result;
	}
	function toBidiRequestHeaders(allHeaders) {
	  const bidiHeaders = toBidiHeaders(allHeaders);
	  return { headers: bidiHeaders };
	}
	function toBidiResponseHeaders(headers) {
	  const setCookieHeaders = headers.filter((h) => h.name.toLowerCase() === "set-cookie");
	  const otherHeaders = headers.filter((h) => h.name.toLowerCase() !== "set-cookie");
	  const rawCookies = setCookieHeaders.map((h) => (0, import_cookieStore.parseRawCookie)(h.value));
	  const cookies = rawCookies.filter(Boolean).map((c) => {
	    return {
	      ...c,
	      value: { type: "string", value: c.value },
	      sameSite: toBidiSameSite(c.sameSite)
	    };
	  });
	  return { cookies, headers: toBidiHeaders(otherHeaders) };
	}
	function toBidiHeaders(headers) {
	  return headers.map(({ name, value }) => ({ name, value: { type: "string", value } }));
	}
	function bidiBytesValueToString(value) {
	  if (value.type === "string")
	    return value.value;
	  if (value.type === "base64")
	    return Buffer.from(value.type, "base64").toString("binary");
	  return "unknown value type: " + value.type;
	}
	function toBidiSameSite(sameSite) {
	  if (!sameSite)
	    return void 0;
	  if (sameSite === "Strict")
	    return bidi.Network.SameSite.Strict;
	  if (sameSite === "Lax")
	    return bidi.Network.SameSite.Lax;
	  return bidi.Network.SameSite.None;
	}
	return bidiNetworkManager;
}

var bidiDeserializer;
var hasRequiredBidiDeserializer;

function requireBidiDeserializer () {
	if (hasRequiredBidiDeserializer) return bidiDeserializer;
	hasRequiredBidiDeserializer = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiDeserializer_exports = {};
	__export(bidiDeserializer_exports, {
	  BidiDeserializer: () => BidiDeserializer
	});
	bidiDeserializer = __toCommonJS(bidiDeserializer_exports);
	/**
	 * @license
	 * Copyright 2024 Google Inc.
	 * Modifications copyright (c) Microsoft Corporation.
	 * SPDX-License-Identifier: Apache-2.0
	 */
	class BidiDeserializer {
	  static deserialize(result) {
	    if (!result)
	      return void 0;
	    switch (result.type) {
	      case "array":
	        return result.value?.map((value) => {
	          return BidiDeserializer.deserialize(value);
	        });
	      case "set":
	        return result.value?.reduce((acc, value) => {
	          return acc.add(BidiDeserializer.deserialize(value));
	        }, /* @__PURE__ */ new Set());
	      case "object":
	        return result.value?.reduce((acc, tuple) => {
	          const { key, value } = BidiDeserializer._deserializeTuple(tuple);
	          acc[key] = value;
	          return acc;
	        }, {});
	      case "map":
	        return result.value?.reduce((acc, tuple) => {
	          const { key, value } = BidiDeserializer._deserializeTuple(tuple);
	          return acc.set(key, value);
	        }, /* @__PURE__ */ new Map());
	      case "promise":
	        return {};
	      case "regexp":
	        return new RegExp(result.value.pattern, result.value.flags);
	      case "date":
	        return new Date(result.value);
	      case "undefined":
	        return void 0;
	      case "null":
	        return null;
	      case "number":
	        return BidiDeserializer._deserializeNumber(result.value);
	      case "bigint":
	        return BigInt(result.value);
	      case "boolean":
	        return Boolean(result.value);
	      case "string":
	        return result.value;
	    }
	    throw new Error(`Deserialization of type ${result.type} not supported.`);
	  }
	  static _deserializeNumber(value) {
	    switch (value) {
	      case "-0":
	        return -0;
	      case "NaN":
	        return NaN;
	      case "Infinity":
	        return Infinity;
	      case "-Infinity":
	        return -Infinity;
	      default:
	        return value;
	    }
	  }
	  static _deserializeTuple([serializedKey, serializedValue]) {
	    const key = typeof serializedKey === "string" ? serializedKey : BidiDeserializer.deserialize(serializedKey);
	    const value = BidiDeserializer.deserialize(serializedValue);
	    return { key, value };
	  }
	}
	return bidiDeserializer;
}

var bidiSerializer;
var hasRequiredBidiSerializer;

function requireBidiSerializer () {
	if (hasRequiredBidiSerializer) return bidiSerializer;
	hasRequiredBidiSerializer = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiSerializer_exports = {};
	__export(bidiSerializer_exports, {
	  BidiSerializer: () => BidiSerializer,
	  isDate: () => isDate,
	  isPlainObject: () => isPlainObject,
	  isRegExp: () => isRegExp
	});
	bidiSerializer = __toCommonJS(bidiSerializer_exports);
	/**
	 * @license
	 * Copyright 2024 Google Inc.
	 * Modifications copyright (c) Microsoft Corporation.
	 * SPDX-License-Identifier: Apache-2.0
	 */
	class UnserializableError extends Error {
	}
	class BidiSerializer {
	  static serialize(arg) {
	    switch (typeof arg) {
	      case "symbol":
	      case "function":
	        throw new UnserializableError(`Unable to serializable ${typeof arg}`);
	      case "object":
	        return BidiSerializer._serializeObject(arg);
	      case "undefined":
	        return {
	          type: "undefined"
	        };
	      case "number":
	        return BidiSerializer._serializeNumber(arg);
	      case "bigint":
	        return {
	          type: "bigint",
	          value: arg.toString()
	        };
	      case "string":
	        return {
	          type: "string",
	          value: arg
	        };
	      case "boolean":
	        return {
	          type: "boolean",
	          value: arg
	        };
	    }
	  }
	  static _serializeNumber(arg) {
	    let value;
	    if (Object.is(arg, -0)) {
	      value = "-0";
	    } else if (Object.is(arg, Infinity)) {
	      value = "Infinity";
	    } else if (Object.is(arg, -Infinity)) {
	      value = "-Infinity";
	    } else if (Object.is(arg, NaN)) {
	      value = "NaN";
	    } else {
	      value = arg;
	    }
	    return {
	      type: "number",
	      value
	    };
	  }
	  static _serializeObject(arg) {
	    if (arg === null) {
	      return {
	        type: "null"
	      };
	    } else if (Array.isArray(arg)) {
	      const parsedArray = arg.map((subArg) => {
	        return BidiSerializer.serialize(subArg);
	      });
	      return {
	        type: "array",
	        value: parsedArray
	      };
	    } else if (isPlainObject(arg)) {
	      try {
	        JSON.stringify(arg);
	      } catch (error) {
	        if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) {
	          error.message += " Recursive objects are not allowed.";
	        }
	        throw error;
	      }
	      const parsedObject = [];
	      for (const key in arg) {
	        parsedObject.push([BidiSerializer.serialize(key), BidiSerializer.serialize(arg[key])]);
	      }
	      return {
	        type: "object",
	        value: parsedObject
	      };
	    } else if (isRegExp(arg)) {
	      return {
	        type: "regexp",
	        value: {
	          pattern: arg.source,
	          flags: arg.flags
	        }
	      };
	    } else if (isDate(arg)) {
	      return {
	        type: "date",
	        value: arg.toISOString()
	      };
	    }
	    throw new UnserializableError(
	      "Custom object serialization not possible. Use plain objects instead."
	    );
	  }
	}
	const isPlainObject = (obj) => {
	  return typeof obj === "object" && obj?.constructor === Object;
	};
	const isRegExp = (obj) => {
	  return typeof obj === "object" && obj?.constructor === RegExp;
	};
	const isDate = (obj) => {
	  return typeof obj === "object" && obj?.constructor === Date;
	};
	return bidiSerializer;
}

var bidiExecutionContext;
var hasRequiredBidiExecutionContext;

function requireBidiExecutionContext () {
	if (hasRequiredBidiExecutionContext) return bidiExecutionContext;
	hasRequiredBidiExecutionContext = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiExecutionContext_exports = {};
	__export(bidiExecutionContext_exports, {
	  BidiExecutionContext: () => BidiExecutionContext,
	  createHandle: () => createHandle
	});
	bidiExecutionContext = __toCommonJS(bidiExecutionContext_exports);
	var import_utils = requireUtils();
	var js = __toESM(requireJavascript$1());
	var dom = __toESM(requireDom());
	var import_bidiDeserializer = requireBidiDeserializer();
	var bidi = __toESM(requireBidiProtocol());
	var import_bidiSerializer = requireBidiSerializer();
	class BidiExecutionContext {
	  constructor(session, realmInfo) {
	    this._session = session;
	    if (realmInfo.type === "window") {
	      this._target = {
	        context: realmInfo.context,
	        sandbox: realmInfo.sandbox
	      };
	    } else {
	      this._target = {
	        realm: realmInfo.realm
	      };
	    }
	  }
	  async rawEvaluateJSON(expression) {
	    const response = await this._session.send("script.evaluate", {
	      expression,
	      target: this._target,
	      serializationOptions: {
	        maxObjectDepth: 10,
	        maxDomDepth: 10
	      },
	      awaitPromise: true,
	      userActivation: true
	    });
	    if (response.type === "success")
	      return import_bidiDeserializer.BidiDeserializer.deserialize(response.result);
	    if (response.type === "exception")
	      throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
	    throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
	  }
	  async rawEvaluateHandle(context, expression) {
	    const response = await this._session.send("script.evaluate", {
	      expression,
	      target: this._target,
	      resultOwnership: bidi.Script.ResultOwnership.Root,
	      // Necessary for the handle to be returned.
	      serializationOptions: { maxObjectDepth: 0, maxDomDepth: 0 },
	      awaitPromise: true,
	      userActivation: true
	    });
	    if (response.type === "success") {
	      if ("handle" in response.result)
	        return createHandle(context, response.result);
	      throw new js.JavaScriptErrorInEvaluate("Cannot get handle: " + JSON.stringify(response.result));
	    }
	    if (response.type === "exception")
	      throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
	    throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
	  }
	  async evaluateWithArguments(functionDeclaration, returnByValue, utilityScript, values, handles) {
	    const response = await this._session.send("script.callFunction", {
	      functionDeclaration,
	      target: this._target,
	      arguments: [
	        { handle: utilityScript._objectId },
	        ...values.map(import_bidiSerializer.BidiSerializer.serialize),
	        ...handles.map((handle) => ({ handle: handle._objectId }))
	      ],
	      resultOwnership: returnByValue ? void 0 : bidi.Script.ResultOwnership.Root,
	      // Necessary for the handle to be returned.
	      serializationOptions: returnByValue ? {} : { maxObjectDepth: 0, maxDomDepth: 0 },
	      awaitPromise: true,
	      userActivation: true
	    });
	    if (response.type === "exception")
	      throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
	    if (response.type === "success") {
	      if (returnByValue)
	        return js.parseEvaluationResultValue(import_bidiDeserializer.BidiDeserializer.deserialize(response.result));
	      return createHandle(utilityScript._context, response.result);
	    }
	    throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
	  }
	  async getProperties(handle) {
	    const names = await handle.evaluate((object) => {
	      const names2 = [];
	      const descriptors = Object.getOwnPropertyDescriptors(object);
	      for (const name in descriptors) {
	        if (descriptors[name]?.enumerable)
	          names2.push(name);
	      }
	      return names2;
	    });
	    const values = await Promise.all(names.map((name) => handle.evaluateHandle((object, name2) => object[name2], name)));
	    const map = /* @__PURE__ */ new Map();
	    for (let i = 0; i < names.length; i++)
	      map.set(names[i], values[i]);
	    return map;
	  }
	  async releaseHandle(handle) {
	    if (!handle._objectId)
	      return;
	    await this._session.send("script.disown", {
	      target: this._target,
	      handles: [handle._objectId]
	    });
	  }
	  async nodeIdForElementHandle(handle) {
	    const shared = await this._remoteValueForReference({ handle: handle._objectId });
	    if (!("sharedId" in shared))
	      throw new Error("Element is not a node");
	    return {
	      sharedId: shared.sharedId
	    };
	  }
	  async remoteObjectForNodeId(context, nodeId) {
	    const result = await this._remoteValueForReference(nodeId, true);
	    if (!("handle" in result))
	      throw new Error("Can't get remote object for nodeId");
	    return createHandle(context, result);
	  }
	  async contentFrameIdForFrame(handle) {
	    const contentWindow = await this._rawCallFunction("e => e.contentWindow", { handle: handle._objectId });
	    if (contentWindow?.type === "window")
	      return contentWindow.value.context;
	    return null;
	  }
	  async frameIdForWindowHandle(handle) {
	    if (!handle._objectId)
	      throw new Error("JSHandle is not a DOM node handle");
	    const contentWindow = await this._remoteValueForReference({ handle: handle._objectId });
	    if (contentWindow.type === "window")
	      return contentWindow.value.context;
	    return null;
	  }
	  async _remoteValueForReference(reference, createHandle2) {
	    return await this._rawCallFunction("e => e", reference, createHandle2);
	  }
	  async _rawCallFunction(functionDeclaration, arg, createHandle2) {
	    const response = await this._session.send("script.callFunction", {
	      functionDeclaration,
	      target: this._target,
	      arguments: [arg],
	      // "Root" is necessary for the handle to be returned.
	      resultOwnership: createHandle2 ? bidi.Script.ResultOwnership.Root : bidi.Script.ResultOwnership.None,
	      serializationOptions: { maxObjectDepth: 0, maxDomDepth: 0 },
	      awaitPromise: true,
	      userActivation: true
	    });
	    if (response.type === "exception")
	      throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + "\nFull val: " + JSON.stringify(response.exceptionDetails));
	    if (response.type === "success")
	      return response.result;
	    throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
	  }
	}
	function renderPreview(remoteObject) {
	  if (remoteObject.type === "undefined")
	    return "undefined";
	  if (remoteObject.type === "null")
	    return "null";
	  if ("value" in remoteObject)
	    return String(remoteObject.value);
	  return `<${remoteObject.type}>`;
	}
	function remoteObjectValue(remoteObject) {
	  if (remoteObject.type === "undefined")
	    return void 0;
	  if (remoteObject.type === "null")
	    return null;
	  if (remoteObject.type === "number" && typeof remoteObject.value === "string")
	    return js.parseUnserializableValue(remoteObject.value);
	  if ("value" in remoteObject)
	    return remoteObject.value;
	  return void 0;
	}
	function createHandle(context, remoteObject) {
	  if (remoteObject.type === "node") {
	    (0, import_utils.assert)(context instanceof dom.FrameExecutionContext);
	    return new dom.ElementHandle(context, remoteObject.handle);
	  }
	  const objectId = "handle" in remoteObject ? remoteObject.handle : void 0;
	  return new js.JSHandle(context, remoteObject.type, renderPreview(remoteObject), objectId, remoteObjectValue(remoteObject));
	}
	return bidiExecutionContext;
}

var bidiKeyboard;
var hasRequiredBidiKeyboard;

function requireBidiKeyboard () {
	if (hasRequiredBidiKeyboard) return bidiKeyboard;
	hasRequiredBidiKeyboard = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiKeyboard_exports = {};
	__export(bidiKeyboard_exports, {
	  getBidiKeyValue: () => getBidiKeyValue
	});
	bidiKeyboard = __toCommonJS(bidiKeyboard_exports);
	/**
	 * @license
	 * Copyright 2024 Google Inc.
	 * Modifications copyright (c) Microsoft Corporation.
	 * SPDX-License-Identifier: Apache-2.0
	 */
	const getBidiKeyValue = (keyName) => {
	  switch (keyName) {
	    case "\r":
	    case "\n":
	      keyName = "Enter";
	      break;
	  }
	  if ([...keyName].length === 1) {
	    return keyName;
	  }
	  switch (keyName) {
	    case "Cancel":
	      return "\uE001";
	    case "Help":
	      return "\uE002";
	    case "Backspace":
	      return "\uE003";
	    case "Tab":
	      return "\uE004";
	    case "Clear":
	      return "\uE005";
	    case "Enter":
	      return "\uE007";
	    case "Shift":
	    case "ShiftLeft":
	      return "\uE008";
	    case "Control":
	    case "ControlLeft":
	      return "\uE009";
	    case "Alt":
	    case "AltLeft":
	      return "\uE00A";
	    case "Pause":
	      return "\uE00B";
	    case "Escape":
	      return "\uE00C";
	    case "PageUp":
	      return "\uE00E";
	    case "PageDown":
	      return "\uE00F";
	    case "End":
	      return "\uE010";
	    case "Home":
	      return "\uE011";
	    case "ArrowLeft":
	      return "\uE012";
	    case "ArrowUp":
	      return "\uE013";
	    case "ArrowRight":
	      return "\uE014";
	    case "ArrowDown":
	      return "\uE015";
	    case "Insert":
	      return "\uE016";
	    case "Delete":
	      return "\uE017";
	    case "NumpadEqual":
	      return "\uE019";
	    case "Numpad0":
	      return "\uE01A";
	    case "Numpad1":
	      return "\uE01B";
	    case "Numpad2":
	      return "\uE01C";
	    case "Numpad3":
	      return "\uE01D";
	    case "Numpad4":
	      return "\uE01E";
	    case "Numpad5":
	      return "\uE01F";
	    case "Numpad6":
	      return "\uE020";
	    case "Numpad7":
	      return "\uE021";
	    case "Numpad8":
	      return "\uE022";
	    case "Numpad9":
	      return "\uE023";
	    case "NumpadMultiply":
	      return "\uE024";
	    case "NumpadAdd":
	      return "\uE025";
	    case "NumpadSubtract":
	      return "\uE027";
	    case "NumpadDecimal":
	      return "\uE028";
	    case "NumpadDivide":
	      return "\uE029";
	    case "F1":
	      return "\uE031";
	    case "F2":
	      return "\uE032";
	    case "F3":
	      return "\uE033";
	    case "F4":
	      return "\uE034";
	    case "F5":
	      return "\uE035";
	    case "F6":
	      return "\uE036";
	    case "F7":
	      return "\uE037";
	    case "F8":
	      return "\uE038";
	    case "F9":
	      return "\uE039";
	    case "F10":
	      return "\uE03A";
	    case "F11":
	      return "\uE03B";
	    case "F12":
	      return "\uE03C";
	    case "Meta":
	    case "MetaLeft":
	      return "\uE03D";
	    case "ShiftRight":
	      return "\uE050";
	    case "ControlRight":
	      return "\uE051";
	    case "AltRight":
	      return "\uE052";
	    case "MetaRight":
	      return "\uE053";
	    case "Space":
	      return " ";
	    case "Digit0":
	      return "0";
	    case "Digit1":
	      return "1";
	    case "Digit2":
	      return "2";
	    case "Digit3":
	      return "3";
	    case "Digit4":
	      return "4";
	    case "Digit5":
	      return "5";
	    case "Digit6":
	      return "6";
	    case "Digit7":
	      return "7";
	    case "Digit8":
	      return "8";
	    case "Digit9":
	      return "9";
	    case "KeyA":
	      return "a";
	    case "KeyB":
	      return "b";
	    case "KeyC":
	      return "c";
	    case "KeyD":
	      return "d";
	    case "KeyE":
	      return "e";
	    case "KeyF":
	      return "f";
	    case "KeyG":
	      return "g";
	    case "KeyH":
	      return "h";
	    case "KeyI":
	      return "i";
	    case "KeyJ":
	      return "j";
	    case "KeyK":
	      return "k";
	    case "KeyL":
	      return "l";
	    case "KeyM":
	      return "m";
	    case "KeyN":
	      return "n";
	    case "KeyO":
	      return "o";
	    case "KeyP":
	      return "p";
	    case "KeyQ":
	      return "q";
	    case "KeyR":
	      return "r";
	    case "KeyS":
	      return "s";
	    case "KeyT":
	      return "t";
	    case "KeyU":
	      return "u";
	    case "KeyV":
	      return "v";
	    case "KeyW":
	      return "w";
	    case "KeyX":
	      return "x";
	    case "KeyY":
	      return "y";
	    case "KeyZ":
	      return "z";
	    case "Semicolon":
	      return ";";
	    case "Equal":
	      return "=";
	    case "Comma":
	      return ",";
	    case "Minus":
	      return "-";
	    case "Period":
	      return ".";
	    case "Slash":
	      return "/";
	    case "Backquote":
	      return "`";
	    case "BracketLeft":
	      return "[";
	    case "Backslash":
	      return "\\";
	    case "BracketRight":
	      return "]";
	    case "Quote":
	      return '"';
	    default:
	      throw new Error(`Unknown key: "${keyName}"`);
	  }
	};
	return bidiKeyboard;
}

var bidiInput;
var hasRequiredBidiInput;

function requireBidiInput () {
	if (hasRequiredBidiInput) return bidiInput;
	hasRequiredBidiInput = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiInput_exports = {};
	__export(bidiInput_exports, {
	  RawKeyboardImpl: () => RawKeyboardImpl,
	  RawMouseImpl: () => RawMouseImpl,
	  RawTouchscreenImpl: () => RawTouchscreenImpl
	});
	bidiInput = __toCommonJS(bidiInput_exports);
	var import_input = requireInput$1();
	var import_bidiKeyboard = requireBidiKeyboard();
	var bidi = __toESM(requireBidiProtocol());
	class RawKeyboardImpl {
	  constructor(session) {
	    this._session = session;
	  }
	  setSession(session) {
	    this._session = session;
	  }
	  async keydown(modifiers, keyName, description, autoRepeat) {
	    keyName = (0, import_input.resolveSmartModifierString)(keyName);
	    const actions = [];
	    actions.push({ type: "keyDown", value: (0, import_bidiKeyboard.getBidiKeyValue)(keyName) });
	    await this._performActions(actions);
	  }
	  async keyup(modifiers, keyName, description) {
	    keyName = (0, import_input.resolveSmartModifierString)(keyName);
	    const actions = [];
	    actions.push({ type: "keyUp", value: (0, import_bidiKeyboard.getBidiKeyValue)(keyName) });
	    await this._performActions(actions);
	  }
	  async sendText(text) {
	    const actions = [];
	    for (const char of text) {
	      const value = (0, import_bidiKeyboard.getBidiKeyValue)(char);
	      actions.push({ type: "keyDown", value });
	      actions.push({ type: "keyUp", value });
	    }
	    await this._performActions(actions);
	  }
	  async _performActions(actions) {
	    await this._session.send("input.performActions", {
	      context: this._session.sessionId,
	      actions: [
	        {
	          type: "key",
	          id: "pw_keyboard",
	          actions
	        }
	      ]
	    });
	  }
	}
	class RawMouseImpl {
	  constructor(session) {
	    this._session = session;
	  }
	  async move(x, y, button, buttons, modifiers, forClick) {
	    await this._performActions([{ type: "pointerMove", x, y }]);
	  }
	  async down(x, y, button, buttons, modifiers, clickCount) {
	    await this._performActions([{ type: "pointerDown", button: toBidiButton(button) }]);
	  }
	  async up(x, y, button, buttons, modifiers, clickCount) {
	    await this._performActions([{ type: "pointerUp", button: toBidiButton(button) }]);
	  }
	  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
	    x = Math.floor(x);
	    y = Math.floor(y);
	    await this._session.send("input.performActions", {
	      context: this._session.sessionId,
	      actions: [
	        {
	          type: "wheel",
	          id: "pw_mouse_wheel",
	          actions: [{ type: "scroll", x, y, deltaX, deltaY }]
	        }
	      ]
	    });
	  }
	  async _performActions(actions) {
	    await this._session.send("input.performActions", {
	      context: this._session.sessionId,
	      actions: [
	        {
	          type: "pointer",
	          id: "pw_mouse",
	          parameters: {
	            pointerType: bidi.Input.PointerType.Mouse
	          },
	          actions
	        }
	      ]
	    });
	  }
	}
	class RawTouchscreenImpl {
	  constructor(session) {
	    this._session = session;
	  }
	  async tap(x, y, modifiers) {
	  }
	}
	function toBidiButton(button) {
	  switch (button) {
	    case "left":
	      return 0;
	    case "right":
	      return 2;
	    case "middle":
	      return 1;
	  }
	  throw new Error("Unknown button: " + button);
	}
	return bidiInput;
}

var bidiPdf;
var hasRequiredBidiPdf;

function requireBidiPdf () {
	if (hasRequiredBidiPdf) return bidiPdf;
	hasRequiredBidiPdf = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiPdf_exports = {};
	__export(bidiPdf_exports, {
	  BidiPDF: () => BidiPDF
	});
	bidiPdf = __toCommonJS(bidiPdf_exports);
	var import_utils = requireUtils();
	const PagePaperFormats = {
	  letter: { width: 8.5, height: 11 },
	  legal: { width: 8.5, height: 14 },
	  tabloid: { width: 11, height: 17 },
	  ledger: { width: 17, height: 11 },
	  a0: { width: 33.1, height: 46.8 },
	  a1: { width: 23.4, height: 33.1 },
	  a2: { width: 16.54, height: 23.4 },
	  a3: { width: 11.7, height: 16.54 },
	  a4: { width: 8.27, height: 11.7 },
	  a5: { width: 5.83, height: 8.27 },
	  a6: { width: 4.13, height: 5.83 }
	};
	const unitToPixels = {
	  "px": 1,
	  "in": 96,
	  "cm": 37.8,
	  "mm": 3.78
	};
	function convertPrintParameterToInches(text) {
	  if (text === void 0)
	    return void 0;
	  let unit = text.substring(text.length - 2).toLowerCase();
	  let valueText = "";
	  if (unitToPixels.hasOwnProperty(unit)) {
	    valueText = text.substring(0, text.length - 2);
	  } else {
	    unit = "px";
	    valueText = text;
	  }
	  const value = Number(valueText);
	  (0, import_utils.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
	  const pixels = value * unitToPixels[unit];
	  return pixels / 96;
	}
	class BidiPDF {
	  constructor(session) {
	    this._session = session;
	  }
	  async generate(options) {
	    const {
	      scale = 1,
	      printBackground = false,
	      landscape = false,
	      pageRanges = "",
	      margin = {}
	    } = options;
	    let paperWidth = 8.5;
	    let paperHeight = 11;
	    if (options.format) {
	      const format = PagePaperFormats[options.format.toLowerCase()];
	      (0, import_utils.assert)(format, "Unknown paper format: " + options.format);
	      paperWidth = format.width;
	      paperHeight = format.height;
	    } else {
	      paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
	      paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
	    }
	    const { data } = await this._session.send("browsingContext.print", {
	      context: this._session.sessionId,
	      background: printBackground,
	      margin: {
	        bottom: convertPrintParameterToInches(margin.bottom) || 0,
	        left: convertPrintParameterToInches(margin.left) || 0,
	        right: convertPrintParameterToInches(margin.right) || 0,
	        top: convertPrintParameterToInches(margin.top) || 0
	      },
	      orientation: landscape ? "landscape" : "portrait",
	      page: {
	        width: paperWidth,
	        height: paperHeight
	      },
	      pageRanges: pageRanges ? pageRanges.split(",").map((r) => r.trim()) : void 0,
	      scale
	    });
	    return Buffer.from(data, "base64");
	  }
	}
	return bidiPdf;
}

var bidiPage;
var hasRequiredBidiPage;

function requireBidiPage () {
	if (hasRequiredBidiPage) return bidiPage;
	hasRequiredBidiPage = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiPage_exports = {};
	__export(bidiPage_exports, {
	  BidiPage: () => BidiPage,
	  addMainBinding: () => addMainBinding,
	  kPlaywrightBindingChannel: () => kPlaywrightBindingChannel
	});
	bidiPage = __toCommonJS(bidiPage_exports);
	var import_utils = requireUtils();
	var import_eventsHelper = requireEventsHelper();
	var import_browserContext = requireBrowserContext$1();
	var dialog = __toESM(requireDialog$1());
	var dom = __toESM(requireDom());
	var import_page = requirePage$1();
	var import_bidiExecutionContext = requireBidiExecutionContext();
	var import_bidiInput = requireBidiInput();
	var import_bidiNetworkManager = requireBidiNetworkManager();
	var import_bidiPdf = requireBidiPdf();
	var bidi = __toESM(requireBidiProtocol());
	const UTILITY_WORLD_NAME = "__playwright_utility_world__";
	const kPlaywrightBindingChannel = "playwrightChannel";
	class BidiPage {
	  constructor(browserContext, bidiSession, opener) {
	    this._sessionListeners = [];
	    this._initScriptIds = [];
	    this._session = bidiSession;
	    this._opener = opener;
	    this.rawKeyboard = new import_bidiInput.RawKeyboardImpl(bidiSession);
	    this.rawMouse = new import_bidiInput.RawMouseImpl(bidiSession);
	    this.rawTouchscreen = new import_bidiInput.RawTouchscreenImpl(bidiSession);
	    this._realmToContext = /* @__PURE__ */ new Map();
	    this._page = new import_page.Page(this, browserContext);
	    this._browserContext = browserContext;
	    this._networkManager = new import_bidiNetworkManager.BidiNetworkManager(this._session, this._page, this._onNavigationResponseStarted.bind(this));
	    this._pdf = new import_bidiPdf.BidiPDF(this._session);
	    this._page.on(import_page.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame, false));
	    this._sessionListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "script.realmCreated", this._onRealmCreated.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "script.message", this._onScriptMessage.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.contextDestroyed", this._onBrowsingContextDestroyed.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationStarted", this._onNavigationStarted.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationAborted", this._onNavigationAborted.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationFailed", this._onNavigationFailed.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.fragmentNavigated", this._onFragmentNavigated.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.domContentLoaded", this._onDomContentLoaded.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.load", this._onLoad.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.userPromptOpened", this._onUserPromptOpened.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(bidiSession, "log.entryAdded", this._onLogEntryAdded.bind(this))
	    ];
	    this._initialize().then(
	      () => this._page.reportAsNew(this._opener?._page),
	      (error) => this._page.reportAsNew(this._opener?._page, error)
	    );
	  }
	  async _initialize() {
	    this._onFrameAttached(this._session.sessionId, null);
	    await Promise.all([
	      this.updateHttpCredentials(),
	      this.updateRequestInterception(),
	      this._installMainBinding(),
	      this._addAllInitScripts()
	    ]);
	  }
	  async _addAllInitScripts() {
	    return Promise.all(this._page.allInitScripts().map((initScript) => this.addInitScript(initScript)));
	  }
	  didClose() {
	    this._session.dispose();
	    import_eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
	    this._page._didClose();
	  }
	  _onFrameAttached(frameId, parentFrameId) {
	    return this._page._frameManager.frameAttached(frameId, parentFrameId);
	  }
	  _removeContextsForFrame(frame, notifyFrame) {
	    for (const [contextId, context] of this._realmToContext) {
	      if (context.frame === frame) {
	        this._realmToContext.delete(contextId);
	        if (notifyFrame)
	          frame._contextDestroyed(context);
	      }
	    }
	  }
	  _onRealmCreated(realmInfo) {
	    if (this._realmToContext.has(realmInfo.realm))
	      return;
	    if (realmInfo.type !== "window")
	      return;
	    const frame = this._page._frameManager.frame(realmInfo.context);
	    if (!frame)
	      return;
	    let worldName;
	    if (!realmInfo.sandbox) {
	      worldName = "main";
	      this._touchUtilityWorld(realmInfo.context);
	    } else if (realmInfo.sandbox === UTILITY_WORLD_NAME) {
	      worldName = "utility";
	    } else {
	      return;
	    }
	    const delegate = new import_bidiExecutionContext.BidiExecutionContext(this._session, realmInfo);
	    const context = new dom.FrameExecutionContext(delegate, frame, worldName);
	    frame._contextCreated(worldName, context);
	    this._realmToContext.set(realmInfo.realm, context);
	  }
	  async _touchUtilityWorld(context) {
	    await this._session.sendMayFail("script.evaluate", {
	      expression: "1 + 1",
	      target: {
	        context,
	        sandbox: UTILITY_WORLD_NAME
	      },
	      serializationOptions: {
	        maxObjectDepth: 10,
	        maxDomDepth: 10
	      },
	      awaitPromise: true,
	      userActivation: true
	    });
	  }
	  _onRealmDestroyed(params) {
	    const context = this._realmToContext.get(params.realm);
	    if (!context)
	      return false;
	    this._realmToContext.delete(params.realm);
	    context.frame._contextDestroyed(context);
	    return true;
	  }
	  // TODO: route the message directly to the browser
	  _onBrowsingContextDestroyed(params) {
	    this._browserContext._browser._onBrowsingContextDestroyed(params);
	  }
	  _onNavigationStarted(params) {
	    const frameId = params.context;
	    this._page._frameManager.frameRequestedNavigation(frameId, params.navigation);
	    const url = params.url.toLowerCase();
	    if (url.startsWith("file:") || url.startsWith("data:") || url === "about:blank") {
	      const frame = this._page._frameManager.frame(frameId);
	      if (frame)
	        this._page._frameManager.frameCommittedNewDocumentNavigation(
	          frameId,
	          params.url,
	          "",
	          params.navigation,
	          /* initial */
	          false
	        );
	    }
	  }
	  // TODO: there is no separate event for committed navigation, so we approximate it with responseStarted.
	  _onNavigationResponseStarted(params) {
	    const frameId = params.context;
	    const frame = this._page._frameManager.frame(frameId);
	    (0, import_utils.assert)(frame);
	    this._page._frameManager.frameCommittedNewDocumentNavigation(
	      frameId,
	      params.response.url,
	      "",
	      params.navigation,
	      /* initial */
	      false
	    );
	  }
	  _onDomContentLoaded(params) {
	    const frameId = params.context;
	    this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
	  }
	  _onLoad(params) {
	    this._page._frameManager.frameLifecycleEvent(params.context, "load");
	  }
	  _onNavigationAborted(params) {
	    this._page._frameManager.frameAbortedNavigation(params.context, "Navigation aborted", params.navigation || void 0);
	  }
	  _onNavigationFailed(params) {
	    this._page._frameManager.frameAbortedNavigation(params.context, "Navigation failed", params.navigation || void 0);
	  }
	  _onFragmentNavigated(params) {
	    this._page._frameManager.frameCommittedSameDocumentNavigation(params.context, params.url);
	  }
	  _onUserPromptOpened(event) {
	    this._page.emitOnContext(import_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(
	      this._page,
	      event.type,
	      event.message,
	      async (accept, userText) => {
	        await this._session.send("browsingContext.handleUserPrompt", { context: event.context, accept, userText });
	      },
	      event.defaultValue
	    ));
	  }
	  _onLogEntryAdded(params) {
	    if (params.type !== "console")
	      return;
	    const entry = params;
	    const context = this._realmToContext.get(params.source.realm);
	    if (!context)
	      return;
	    const callFrame = params.stackTrace?.callFrames[0];
	    const location = callFrame ?? { url: "", lineNumber: 1, columnNumber: 1 };
	    this._page._addConsoleMessage(entry.method, entry.args.map((arg) => (0, import_bidiExecutionContext.createHandle)(context, arg)), location, params.text || void 0);
	  }
	  async navigateFrame(frame, url, referrer) {
	    const { navigation } = await this._session.send("browsingContext.navigate", {
	      context: frame._id,
	      url
	    });
	    return { newDocumentId: navigation || void 0 };
	  }
	  async updateExtraHTTPHeaders() {
	  }
	  async updateEmulateMedia() {
	  }
	  async updateUserAgent() {
	  }
	  async bringToFront() {
	    await this._session.send("browsingContext.activate", {
	      context: this._session.sessionId
	    });
	  }
	  async updateEmulatedViewportSize() {
	    const options = this._browserContext._options;
	    const deviceSize = this._page.emulatedSize();
	    if (deviceSize === null)
	      return;
	    const viewportSize = deviceSize.viewport;
	    await this._session.send("browsingContext.setViewport", {
	      context: this._session.sessionId,
	      viewport: {
	        width: viewportSize.width,
	        height: viewportSize.height
	      },
	      devicePixelRatio: options.deviceScaleFactor || 1
	    });
	  }
	  async updateRequestInterception() {
	    await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
	  }
	  async updateOffline() {
	  }
	  async updateHttpCredentials() {
	    await this._networkManager.setCredentials(this._browserContext._options.httpCredentials);
	  }
	  async updateFileChooserInterception() {
	  }
	  async reload() {
	    await this._session.send("browsingContext.reload", {
	      context: this._session.sessionId,
	      // ignoreCache: true,
	      wait: bidi.BrowsingContext.ReadinessState.Interactive
	    });
	  }
	  async goBack() {
	    return await this._session.send("browsingContext.traverseHistory", {
	      context: this._session.sessionId,
	      delta: -1
	    }).then(() => true).catch(() => false);
	  }
	  async goForward() {
	    return await this._session.send("browsingContext.traverseHistory", {
	      context: this._session.sessionId,
	      delta: 1
	    }).then(() => true).catch(() => false);
	  }
	  async requestGC() {
	    throw new Error("Method not implemented.");
	  }
	  // TODO: consider calling this only when bindings are added.
	  // TODO: delete this method once we can add preload script for persistent context.
	  async _installMainBinding() {
	    if (this._browserContext._browserContextId)
	      return;
	    const functionDeclaration = addMainBinding.toString();
	    const args = [{
	      type: "channel",
	      value: {
	        channel: kPlaywrightBindingChannel,
	        ownership: bidi.Script.ResultOwnership.Root
	      }
	    }];
	    const promises = [];
	    promises.push(this._session.send("script.addPreloadScript", {
	      functionDeclaration,
	      arguments: args
	    }));
	    promises.push(this._session.send("script.callFunction", {
	      functionDeclaration,
	      arguments: args,
	      target: toBidiExecutionContext(await this._page.mainFrame()._mainContext())._target,
	      awaitPromise: false,
	      userActivation: false
	    }));
	    await Promise.all(promises);
	  }
	  async _onScriptMessage(event) {
	    if (event.channel !== kPlaywrightBindingChannel)
	      return;
	    const pageOrError = await this._page.waitForInitializedOrError();
	    if (pageOrError instanceof Error)
	      return;
	    const context = this._realmToContext.get(event.source.realm);
	    if (!context)
	      return;
	    if (event.data.type !== "string")
	      return;
	    await this._page._onBindingCalled(event.data.value, context);
	  }
	  async addInitScript(initScript) {
	    const { script } = await this._session.send("script.addPreloadScript", {
	      // TODO: remove function call from the source.
	      functionDeclaration: `() => { return ${initScript.source} }`,
	      // TODO: push to iframes?
	      contexts: [this._session.sessionId]
	    });
	    if (!initScript.internal)
	      this._initScriptIds.push(script);
	  }
	  async removeNonInternalInitScripts() {
	    const promises = this._initScriptIds.map((script) => this._session.send("script.removePreloadScript", { script }));
	    this._initScriptIds = [];
	    await Promise.all(promises);
	  }
	  async closePage(runBeforeUnload) {
	    await this._session.send("browsingContext.close", {
	      context: this._session.sessionId,
	      promptUnload: runBeforeUnload
	    });
	  }
	  async setBackgroundColor(color) {
	  }
	  async takeScreenshot(progress, format, documentRect, viewportRect, quality, fitsViewport, scale) {
	    const rect = documentRect || viewportRect;
	    const { data } = await this._session.send("browsingContext.captureScreenshot", {
	      context: this._session.sessionId,
	      format: {
	        type: `image/${format === "png" ? "png" : "jpeg"}`,
	        quality: quality ? quality / 100 : 0.8
	      },
	      origin: documentRect ? "document" : "viewport",
	      clip: {
	        type: "box",
	        ...rect
	      }
	    });
	    return Buffer.from(data, "base64");
	  }
	  async getContentFrame(handle) {
	    const executionContext = toBidiExecutionContext(handle._context);
	    const frameId = await executionContext.contentFrameIdForFrame(handle);
	    if (!frameId)
	      return null;
	    return this._page._frameManager.frame(frameId);
	  }
	  async getOwnerFrame(handle) {
	    const windowHandle = await handle.evaluateHandle((node) => {
	      const doc = node.ownerDocument ?? node;
	      return doc.defaultView;
	    });
	    if (!windowHandle)
	      return null;
	    const executionContext = toBidiExecutionContext(handle._context);
	    return executionContext.frameIdForWindowHandle(windowHandle);
	  }
	  async getBoundingBox(handle) {
	    const box = await handle.evaluate((element) => {
	      if (!(element instanceof Element))
	        return null;
	      const rect = element.getBoundingClientRect();
	      return { x: rect.x, y: rect.y, width: rect.width, height: rect.height };
	    });
	    if (!box)
	      return null;
	    const position = await this._framePosition(handle._frame);
	    if (!position)
	      return null;
	    box.x += position.x;
	    box.y += position.y;
	    return box;
	  }
	  // TODO: move to Frame.
	  async _framePosition(frame) {
	    if (frame === this._page.mainFrame())
	      return { x: 0, y: 0 };
	    const element = await frame.frameElement();
	    const box = await element.boundingBox();
	    if (!box)
	      return null;
	    const style = await element.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e) => "error:notconnected");
	    if (style === "error:notconnected" || style === "transformed")
	      return null;
	    box.x += style.left;
	    box.y += style.top;
	    return box;
	  }
	  async scrollRectIntoViewIfNeeded(handle, rect) {
	    return await handle.evaluateInUtility(([injected, node]) => {
	      node.scrollIntoView({
	        block: "center",
	        inline: "center",
	        behavior: "instant"
	      });
	    }, null).then(() => "done").catch((e) => {
	      if (e instanceof Error && e.message.includes("Node is detached from document"))
	        return "error:notconnected";
	      if (e instanceof Error && e.message.includes("Node does not have a layout object"))
	        return "error:notvisible";
	      throw e;
	    });
	  }
	  async setScreencastOptions(options) {
	  }
	  rafCountForStablePosition() {
	    return 1;
	  }
	  async getContentQuads(handle) {
	    const quads = await handle.evaluateInUtility(([injected, node]) => {
	      if (!node.isConnected)
	        return "error:notconnected";
	      const rects = node.getClientRects();
	      if (!rects)
	        return null;
	      return [...rects].map((rect) => [
	        { x: rect.left, y: rect.top },
	        { x: rect.right, y: rect.top },
	        { x: rect.right, y: rect.bottom },
	        { x: rect.left, y: rect.bottom }
	      ]);
	    }, null);
	    if (!quads || quads === "error:notconnected")
	      return quads;
	    const position = await this._framePosition(handle._frame);
	    if (!position)
	      return null;
	    quads.forEach((quad) => quad.forEach((point) => {
	      point.x += position.x;
	      point.y += position.y;
	    }));
	    return quads;
	  }
	  async setInputFilePaths(handle, paths) {
	    const fromContext = toBidiExecutionContext(handle._context);
	    await this._session.send("input.setFiles", {
	      context: this._session.sessionId,
	      element: await fromContext.nodeIdForElementHandle(handle),
	      files: paths
	    });
	  }
	  async adoptElementHandle(handle, to) {
	    const fromContext = toBidiExecutionContext(handle._context);
	    const nodeId = await fromContext.nodeIdForElementHandle(handle);
	    const executionContext = toBidiExecutionContext(to);
	    return await executionContext.remoteObjectForNodeId(to, nodeId);
	  }
	  async getAccessibilityTree(needle) {
	    throw new Error("Method not implemented.");
	  }
	  async inputActionEpilogue() {
	  }
	  async resetForReuse() {
	  }
	  async pdf(options) {
	    return this._pdf.generate(options);
	  }
	  async getFrameElement(frame) {
	    const parent = frame.parentFrame();
	    if (!parent)
	      throw new Error("Frame has been detached.");
	    const parentContext = await parent._mainContext();
	    const list = await parentContext.evaluateHandle(() => {
	      return [...document.querySelectorAll("iframe,frame")];
	    });
	    const length = await list.evaluate((list2) => list2.length);
	    let foundElement = null;
	    for (let i = 0; i < length; i++) {
	      const element = await list.evaluateHandle((list2, i2) => list2[i2], i);
	      const candidate = await element.contentFrame();
	      if (frame === candidate) {
	        foundElement = element;
	        break;
	      } else {
	        element.dispose();
	      }
	    }
	    list.dispose();
	    if (!foundElement)
	      throw new Error("Frame has been detached.");
	    return foundElement;
	  }
	  shouldToggleStyleSheetToSyncAnimations() {
	    return true;
	  }
	}
	function addMainBinding(callback) {
	  globalThis["__playwright__binding__"] = callback;
	}
	function toBidiExecutionContext(executionContext) {
	  return executionContext.delegate;
	}
	return bidiPage;
}

var bidiBrowser;
var hasRequiredBidiBrowser;

function requireBidiBrowser () {
	if (hasRequiredBidiBrowser) return bidiBrowser;
	hasRequiredBidiBrowser = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiBrowser_exports = {};
	__export(bidiBrowser_exports, {
	  BidiBrowser: () => BidiBrowser,
	  BidiBrowserContext: () => BidiBrowserContext,
	  Network: () => Network
	});
	bidiBrowser = __toCommonJS(bidiBrowser_exports);
	var import_eventsHelper = requireEventsHelper();
	var import_browser = requireBrowser$1();
	var import_browserContext = requireBrowserContext$1();
	var network = __toESM(requireNetwork$1());
	var import_bidiConnection = requireBidiConnection();
	var import_bidiNetworkManager = requireBidiNetworkManager();
	var import_bidiPage = requireBidiPage();
	var bidi = __toESM(requireBidiProtocol());
	class BidiBrowser extends import_browser.Browser {
	  constructor(parent, transport, options) {
	    super(parent, options);
	    this._contexts = /* @__PURE__ */ new Map();
	    this._bidiPages = /* @__PURE__ */ new Map();
	    this._connection = new import_bidiConnection.BidiConnection(transport, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
	    this._browserSession = this._connection.browserSession;
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(this._browserSession, "browsingContext.contextCreated", this._onBrowsingContextCreated.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._browserSession, "script.realmDestroyed", this._onScriptRealmDestroyed.bind(this))
	    ];
	  }
	  static async connect(parent, transport, options) {
	    const browser = new BidiBrowser(parent, transport, options);
	    if (options.__testHookOnConnectToBrowser)
	      await options.__testHookOnConnectToBrowser();
	    let proxy;
	    if (options.proxy) {
	      proxy = {
	        proxyType: "manual"
	      };
	      const url = new URL(options.proxy.server);
	      switch (url.protocol) {
	        case "http:":
	          proxy.httpProxy = url.host;
	          break;
	        case "https:":
	          proxy.httpsProxy = url.host;
	          break;
	        case "socks4:":
	          proxy.socksProxy = url.host;
	          proxy.socksVersion = 4;
	          break;
	        case "socks5:":
	          proxy.socksProxy = url.host;
	          proxy.socksVersion = 5;
	          break;
	        default:
	          throw new Error("Invalid proxy server protocol: " + options.proxy.server);
	      }
	      if (options.proxy.bypass)
	        proxy.noProxy = options.proxy.bypass.split(",");
	    }
	    browser._bidiSessionInfo = await browser._browserSession.send("session.new", {
	      capabilities: {
	        alwaysMatch: {
	          acceptInsecureCerts: false,
	          proxy,
	          unhandledPromptBehavior: {
	            default: bidi.Session.UserPromptHandlerType.Ignore
	          },
	          webSocketUrl: true
	        }
	      }
	    });
	    await browser._browserSession.send("session.subscribe", {
	      events: [
	        "browsingContext",
	        "network",
	        "log",
	        "script"
	      ]
	    });
	    if (options.persistent) {
	      const context = new BidiBrowserContext(browser, void 0, options.persistent);
	      browser._defaultContext = context;
	      await context._initialize();
	      const page = await browser._defaultContext.doCreateNewPage();
	      await page.waitForInitializedOrError();
	    }
	    return browser;
	  }
	  _onDisconnect() {
	    this._didClose();
	  }
	  async doCreateNewContext(options) {
	    const { userContext } = await this._browserSession.send("browser.createUserContext", {});
	    const context = new BidiBrowserContext(this, userContext, options);
	    await context._initialize();
	    this._contexts.set(userContext, context);
	    return context;
	  }
	  contexts() {
	    return Array.from(this._contexts.values());
	  }
	  version() {
	    return this._bidiSessionInfo.capabilities.browserVersion;
	  }
	  userAgent() {
	    return this._bidiSessionInfo.capabilities.userAgent;
	  }
	  isConnected() {
	    return !this._connection.isClosed();
	  }
	  _onBrowsingContextCreated(event) {
	    if (event.parent) {
	      const parentFrameId = event.parent;
	      for (const page2 of this._bidiPages.values()) {
	        const parentFrame = page2._page._frameManager.frame(parentFrameId);
	        if (!parentFrame)
	          continue;
	        page2._session.addFrameBrowsingContext(event.context);
	        page2._page._frameManager.frameAttached(event.context, parentFrameId);
	        const frame = page2._page._frameManager.frame(event.context);
	        if (frame)
	          frame._url = event.url;
	        return;
	      }
	      return;
	    }
	    let context = this._contexts.get(event.userContext);
	    if (!context)
	      context = this._defaultContext;
	    if (!context)
	      return;
	    const session = this._connection.createMainFrameBrowsingContextSession(event.context);
	    const opener = event.originalOpener && this._bidiPages.get(event.originalOpener);
	    const page = new import_bidiPage.BidiPage(context, session, opener || null);
	    page._page.mainFrame()._url = event.url;
	    this._bidiPages.set(event.context, page);
	  }
	  _onBrowsingContextDestroyed(event) {
	    if (event.parent) {
	      this._browserSession.removeFrameBrowsingContext(event.context);
	      const parentFrameId = event.parent;
	      for (const page of this._bidiPages.values()) {
	        const parentFrame = page._page._frameManager.frame(parentFrameId);
	        if (!parentFrame)
	          continue;
	        page._page._frameManager.frameDetached(event.context);
	        return;
	      }
	      return;
	    }
	    const bidiPage = this._bidiPages.get(event.context);
	    if (!bidiPage)
	      return;
	    bidiPage.didClose();
	    this._bidiPages.delete(event.context);
	  }
	  _onScriptRealmDestroyed(event) {
	    for (const page of this._bidiPages.values()) {
	      if (page._onRealmDestroyed(event))
	        return;
	    }
	  }
	}
	class BidiBrowserContext extends import_browserContext.BrowserContext {
	  constructor(browser, browserContextId, options) {
	    super(browser, options, browserContextId);
	    this._initScriptIds = [];
	    this._authenticateProxyViaHeader();
	  }
	  _bidiPages() {
	    return [...this._browser._bidiPages.values()].filter((bidiPage) => bidiPage._browserContext === this);
	  }
	  async _initialize() {
	    const promises = [
	      super._initialize(),
	      this._installMainBinding()
	    ];
	    if (this._options.viewport) {
	      promises.push(this._browser._browserSession.send("browsingContext.setViewport", {
	        viewport: {
	          width: this._options.viewport.width,
	          height: this._options.viewport.height
	        },
	        devicePixelRatio: this._options.deviceScaleFactor || 1,
	        userContexts: [this._userContextId()]
	      }));
	    }
	    await Promise.all(promises);
	  }
	  // TODO: consider calling this only when bindings are added.
	  async _installMainBinding() {
	    const functionDeclaration = import_bidiPage.addMainBinding.toString();
	    const args = [{
	      type: "channel",
	      value: {
	        channel: import_bidiPage.kPlaywrightBindingChannel,
	        ownership: bidi.Script.ResultOwnership.Root
	      }
	    }];
	    await this._browser._browserSession.send("script.addPreloadScript", {
	      functionDeclaration,
	      arguments: args,
	      userContexts: [this._userContextId()]
	    });
	  }
	  possiblyUninitializedPages() {
	    return this._bidiPages().map((bidiPage) => bidiPage._page);
	  }
	  async doCreateNewPage() {
	    (0, import_browserContext.assertBrowserContextIsNotOwned)(this);
	    const { context } = await this._browser._browserSession.send("browsingContext.create", {
	      type: bidi.BrowsingContext.CreateType.Window,
	      userContext: this._browserContextId
	    });
	    return this._browser._bidiPages.get(context)._page;
	  }
	  async doGetCookies(urls) {
	    const { cookies } = await this._browser._browserSession.send(
	      "storage.getCookies",
	      { partition: { type: "storageKey", userContext: this._browserContextId } }
	    );
	    return network.filterCookies(cookies.map((c) => {
	      const copy = {
	        name: c.name,
	        value: (0, import_bidiNetworkManager.bidiBytesValueToString)(c.value),
	        domain: c.domain,
	        path: c.path,
	        httpOnly: c.httpOnly,
	        secure: c.secure,
	        expires: c.expiry ?? -1,
	        sameSite: c.sameSite ? fromBidiSameSite(c.sameSite) : "None"
	      };
	      return copy;
	    }), urls);
	  }
	  async addCookies(cookies) {
	    cookies = network.rewriteCookies(cookies);
	    const promises = cookies.map((c) => {
	      const cookie = {
	        name: c.name,
	        value: { type: "string", value: c.value },
	        domain: c.domain,
	        path: c.path,
	        httpOnly: c.httpOnly,
	        secure: c.secure,
	        sameSite: c.sameSite && toBidiSameSite(c.sameSite),
	        expiry: c.expires === -1 || c.expires === void 0 ? void 0 : Math.round(c.expires)
	      };
	      return this._browser._browserSession.send(
	        "storage.setCookie",
	        { cookie, partition: { type: "storageKey", userContext: this._browserContextId } }
	      );
	    });
	    await Promise.all(promises);
	  }
	  async doClearCookies() {
	    await this._browser._browserSession.send(
	      "storage.deleteCookies",
	      { partition: { type: "storageKey", userContext: this._browserContextId } }
	    );
	  }
	  async doGrantPermissions(origin, permissions) {
	  }
	  async doClearPermissions() {
	  }
	  async setGeolocation(geolocation) {
	  }
	  async setExtraHTTPHeaders(headers) {
	  }
	  async setUserAgent(userAgent) {
	  }
	  async setOffline(offline) {
	  }
	  async doSetHTTPCredentials(httpCredentials) {
	    this._options.httpCredentials = httpCredentials;
	    for (const page of this.pages())
	      await page._delegate.updateHttpCredentials();
	  }
	  async doAddInitScript(initScript) {
	    const { script } = await this._browser._browserSession.send("script.addPreloadScript", {
	      // TODO: remove function call from the source.
	      functionDeclaration: `() => { return ${initScript.source} }`,
	      userContexts: [this._browserContextId || "default"]
	    });
	    if (!initScript.internal)
	      this._initScriptIds.push(script);
	  }
	  async doRemoveNonInternalInitScripts() {
	    const promise = Promise.all(this._initScriptIds.map((script) => this._browser._browserSession.send("script.removePreloadScript", { script })));
	    this._initScriptIds = [];
	    await promise;
	  }
	  async doUpdateRequestInterception() {
	  }
	  onClosePersistent() {
	  }
	  async clearCache() {
	  }
	  async doClose(reason) {
	    if (!this._browserContextId) {
	      await this._browser.close({ reason });
	      return;
	    }
	    await this._browser._browserSession.send("browser.removeUserContext", {
	      userContext: this._browserContextId
	    });
	    this._browser._contexts.delete(this._browserContextId);
	  }
	  async cancelDownload(uuid) {
	  }
	  _userContextId() {
	    if (this._browserContextId)
	      return this._browserContextId;
	    return "default";
	  }
	}
	function fromBidiSameSite(sameSite) {
	  switch (sameSite) {
	    case "strict":
	      return "Strict";
	    case "lax":
	      return "Lax";
	    case "none":
	      return "None";
	  }
	  return "None";
	}
	function toBidiSameSite(sameSite) {
	  switch (sameSite) {
	    case "Strict":
	      return bidi.Network.SameSite.Strict;
	    case "Lax":
	      return bidi.Network.SameSite.Lax;
	    case "None":
	      return bidi.Network.SameSite.None;
	  }
	  return bidi.Network.SameSite.None;
	}
	var Network;
	((Network2) => {
	  ((SameSite2) => {
	    SameSite2["Strict"] = "strict";
	    SameSite2["Lax"] = "lax";
	    SameSite2["None"] = "none";
	  })(Network2.SameSite || (Network2.SameSite = {}));
	})(Network || (Network = {}));
	return bidiBrowser;
}

var BidiMapper = {};

var BidiServer = {};

var EventEmitter = {};

function mitt(n){return {all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e]);},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]));},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e);}),(i=n.get("*"))&&i.slice().map(function(n){n(t,e);});}}}

var mitt$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: mitt
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(mitt$1);

var hasRequiredEventEmitter$1;

function requireEventEmitter$1 () {
	if (hasRequiredEventEmitter$1) return EventEmitter;
	hasRequiredEventEmitter$1 = 1;
	var __importDefault = (EventEmitter && EventEmitter.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(EventEmitter, "__esModule", { value: true });
	EventEmitter.EventEmitter = void 0;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const mitt_1 = __importDefault(require$$0);
	let EventEmitter$1 = class EventEmitter {
	    #emitter = (0, mitt_1.default)();
	    on(type, handler) {
	        this.#emitter.on(type, handler);
	        return this;
	    }
	    /**
	     * Like `on` but the listener will only be fired once and then it will be removed.
	     * @param event The event you'd like to listen to
	     * @param handler The handler function to run when the event occurs
	     * @return `this` to enable chaining method calls.
	     */
	    once(event, handler) {
	        const onceHandler = (eventData) => {
	            handler(eventData);
	            this.off(event, onceHandler);
	        };
	        return this.on(event, onceHandler);
	    }
	    off(type, handler) {
	        this.#emitter.off(type, handler);
	        return this;
	    }
	    /**
	     * Emits an event and call any associated listeners.
	     *
	     * @param event The event to emit.
	     * @param eventData Any data to emit with the event.
	     * @return `true` if there are any listeners, `false` otherwise.
	     */
	    emit(event, eventData) {
	        this.#emitter.emit(event, eventData);
	    }
	    /**
	     * Removes all listeners. If given an event argument, it will remove only
	     * listeners for that event.
	     * @param event - the event to remove listeners for.
	     * @returns `this` to enable you to chain method calls.
	     */
	    removeAllListeners(event) {
	        if (event) {
	            this.#emitter.all.delete(event);
	        }
	        else {
	            this.#emitter.all.clear();
	        }
	        return this;
	    }
	};
	EventEmitter.EventEmitter = EventEmitter$1;
	
	return EventEmitter;
}

var log = {};

var hasRequiredLog;

function requireLog () {
	if (hasRequiredLog) return log;
	hasRequiredLog = 1;
	/**
	 * Copyright 2021 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(log, "__esModule", { value: true });
	log.LogType = void 0;
	var LogType;
	(function (LogType) {
	    // keep-sorted start
	    LogType["bidi"] = "bidi";
	    LogType["cdp"] = "cdp";
	    LogType["debug"] = "debug";
	    LogType["debugError"] = "debug:error";
	    LogType["debugInfo"] = "debug:info";
	    // keep-sorted end
	})(LogType || (log.LogType = LogType = {}));
	
	return log;
}

var ProcessingQueue = {};

var hasRequiredProcessingQueue;

function requireProcessingQueue () {
	if (hasRequiredProcessingQueue) return ProcessingQueue;
	hasRequiredProcessingQueue = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a;
	Object.defineProperty(ProcessingQueue, "__esModule", { value: true });
	ProcessingQueue.ProcessingQueue = void 0;
	const log_js_1 = requireLog();
	let ProcessingQueue$1 = class ProcessingQueue {
	    static LOGGER_PREFIX = `${log_js_1.LogType.debug}:queue`;
	    #logger;
	    #processor;
	    #queue = [];
	    // Flag to keep only 1 active processor.
	    #isProcessing = false;
	    constructor(processor, logger) {
	        this.#processor = processor;
	        this.#logger = logger;
	    }
	    add(entry, name) {
	        this.#queue.push([entry, name]);
	        // No need in waiting. Just initialize processor if needed.
	        void this.#processIfNeeded();
	    }
	    async #processIfNeeded() {
	        if (this.#isProcessing) {
	            return;
	        }
	        this.#isProcessing = true;
	        while (this.#queue.length > 0) {
	            const arrayEntry = this.#queue.shift();
	            if (!arrayEntry) {
	                continue;
	            }
	            const [entryPromise, name] = arrayEntry;
	            this.#logger?.(_a.LOGGER_PREFIX, 'Processing event:', name);
	            await entryPromise
	                .then((entry) => {
	                if (entry.kind === 'error') {
	                    this.#logger?.(log_js_1.LogType.debugError, 'Event threw before sending:', entry.error.message, entry.error.stack);
	                    return;
	                }
	                return this.#processor(entry.value);
	            })
	                .catch((error) => {
	                this.#logger?.(log_js_1.LogType.debugError, 'Event was not processed:', error?.message);
	            });
	        }
	        this.#isProcessing = false;
	    }
	};
	ProcessingQueue.ProcessingQueue = ProcessingQueue$1;
	_a = ProcessingQueue$1;
	
	return ProcessingQueue;
}

var CommandProcessor = {};

var protocol = {};

var cdp = {};

var hasRequiredCdp;

function requireCdp () {
	if (hasRequiredCdp) return cdp;
	hasRequiredCdp = 1;
	Object.defineProperty(cdp, "__esModule", { value: true });
	
	return cdp;
}

var chromiumBidi = {};

var hasRequiredChromiumBidi;

function requireChromiumBidi () {
	if (hasRequiredChromiumBidi) return chromiumBidi;
	hasRequiredChromiumBidi = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(chromiumBidi, "__esModule", { value: true });
	chromiumBidi.EVENT_NAMES = chromiumBidi.Bluetooth = chromiumBidi.Network = chromiumBidi.BrowsingContext = chromiumBidi.Log = chromiumBidi.Script = chromiumBidi.BiDiModule = void 0;
	// keep-sorted end
	var BiDiModule;
	(function (BiDiModule) {
	    // keep-sorted start
	    BiDiModule["Bluetooth"] = "bluetooth";
	    BiDiModule["Browser"] = "browser";
	    BiDiModule["BrowsingContext"] = "browsingContext";
	    BiDiModule["Cdp"] = "goog:cdp";
	    BiDiModule["DeprecatedCdp"] = "cdp";
	    BiDiModule["Input"] = "input";
	    BiDiModule["Log"] = "log";
	    BiDiModule["Network"] = "network";
	    BiDiModule["Script"] = "script";
	    BiDiModule["Session"] = "session";
	    // keep-sorted end
	})(BiDiModule || (chromiumBidi.BiDiModule = BiDiModule = {}));
	var Script;
	(function (Script) {
	    (function (EventNames) {
	        // keep-sorted start
	        EventNames["Message"] = "script.message";
	        EventNames["RealmCreated"] = "script.realmCreated";
	        EventNames["RealmDestroyed"] = "script.realmDestroyed";
	        // keep-sorted end
	    })(Script.EventNames || (Script.EventNames = {}));
	})(Script || (chromiumBidi.Script = Script = {}));
	var Log;
	(function (Log) {
	    (function (EventNames) {
	        EventNames["LogEntryAdded"] = "log.entryAdded";
	    })(Log.EventNames || (Log.EventNames = {}));
	})(Log || (chromiumBidi.Log = Log = {}));
	var BrowsingContext;
	(function (BrowsingContext) {
	    (function (EventNames) {
	        // keep-sorted start
	        EventNames["ContextCreated"] = "browsingContext.contextCreated";
	        EventNames["ContextDestroyed"] = "browsingContext.contextDestroyed";
	        EventNames["DomContentLoaded"] = "browsingContext.domContentLoaded";
	        EventNames["DownloadWillBegin"] = "browsingContext.downloadWillBegin";
	        EventNames["FragmentNavigated"] = "browsingContext.fragmentNavigated";
	        EventNames["HistoryUpdated"] = "browsingContext.historyUpdated";
	        EventNames["Load"] = "browsingContext.load";
	        EventNames["NavigationAborted"] = "browsingContext.navigationAborted";
	        EventNames["NavigationFailed"] = "browsingContext.navigationFailed";
	        EventNames["NavigationStarted"] = "browsingContext.navigationStarted";
	        EventNames["UserPromptClosed"] = "browsingContext.userPromptClosed";
	        EventNames["UserPromptOpened"] = "browsingContext.userPromptOpened";
	        // keep-sorted end
	    })(BrowsingContext.EventNames || (BrowsingContext.EventNames = {}));
	})(BrowsingContext || (chromiumBidi.BrowsingContext = BrowsingContext = {}));
	var Network;
	(function (Network) {
	    (function (EventNames) {
	        // keep-sorted start
	        EventNames["AuthRequired"] = "network.authRequired";
	        EventNames["BeforeRequestSent"] = "network.beforeRequestSent";
	        EventNames["FetchError"] = "network.fetchError";
	        EventNames["ResponseCompleted"] = "network.responseCompleted";
	        EventNames["ResponseStarted"] = "network.responseStarted";
	        // keep-sorted end
	    })(Network.EventNames || (Network.EventNames = {}));
	})(Network || (chromiumBidi.Network = Network = {}));
	var Bluetooth;
	(function (Bluetooth) {
	    (function (EventNames) {
	        EventNames["RequestDevicePromptUpdated"] = "bluetooth.requestDevicePromptUpdated";
	    })(Bluetooth.EventNames || (Bluetooth.EventNames = {}));
	})(Bluetooth || (chromiumBidi.Bluetooth = Bluetooth = {}));
	chromiumBidi.EVENT_NAMES = new Set([
	    // keep-sorted start
	    ...Object.values(BiDiModule),
	    ...Object.values(BrowsingContext.EventNames),
	    ...Object.values(Log.EventNames),
	    ...Object.values(Network.EventNames),
	    ...Object.values(Script.EventNames),
	    // keep-sorted end
	]);
	
	return chromiumBidi;
}

var webdriverBidi = {};

var hasRequiredWebdriverBidi;

function requireWebdriverBidi () {
	if (hasRequiredWebdriverBidi) return webdriverBidi;
	hasRequiredWebdriverBidi = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(webdriverBidi, "__esModule", { value: true });
	
	return webdriverBidi;
}

var ErrorResponse = {};

var hasRequiredErrorResponse;

function requireErrorResponse () {
	if (hasRequiredErrorResponse) return ErrorResponse;
	hasRequiredErrorResponse = 1;
	Object.defineProperty(ErrorResponse, "__esModule", { value: true });
	ErrorResponse.NoSuchWebExtensionException = ErrorResponse.InvalidWebExtensionException = ErrorResponse.UnderspecifiedStoragePartitionException = ErrorResponse.UnableToSetFileInputException = ErrorResponse.UnableToSetCookieException = ErrorResponse.NoSuchStoragePartitionException = ErrorResponse.UnsupportedOperationException = ErrorResponse.UnableToCloseBrowserException = ErrorResponse.UnableToCaptureScreenException = ErrorResponse.UnknownErrorException = ErrorResponse.UnknownCommandException = ErrorResponse.SessionNotCreatedException = ErrorResponse.NoSuchUserContextException = ErrorResponse.NoSuchScriptException = ErrorResponse.NoSuchRequestException = ErrorResponse.NoSuchNodeException = ErrorResponse.NoSuchInterceptException = ErrorResponse.NoSuchHistoryEntryException = ErrorResponse.NoSuchHandleException = ErrorResponse.NoSuchFrameException = ErrorResponse.NoSuchElementException = ErrorResponse.NoSuchAlertException = ErrorResponse.MoveTargetOutOfBoundsException = ErrorResponse.InvalidSessionIdException = ErrorResponse.InvalidSelectorException = ErrorResponse.InvalidArgumentException = ErrorResponse.Exception = void 0;
	class Exception extends Error {
	    error;
	    message;
	    stacktrace;
	    constructor(error, message, stacktrace) {
	        super();
	        this.error = error;
	        this.message = message;
	        this.stacktrace = stacktrace;
	    }
	    toErrorResponse(commandId) {
	        return {
	            type: 'error',
	            id: commandId,
	            error: this.error,
	            message: this.message,
	            stacktrace: this.stacktrace,
	        };
	    }
	}
	ErrorResponse.Exception = Exception;
	class InvalidArgumentException extends Exception {
	    constructor(message, stacktrace) {
	        super("invalid argument" /* ErrorCode.InvalidArgument */, message, stacktrace);
	    }
	}
	ErrorResponse.InvalidArgumentException = InvalidArgumentException;
	class InvalidSelectorException extends Exception {
	    constructor(message, stacktrace) {
	        super("invalid selector" /* ErrorCode.InvalidSelector */, message, stacktrace);
	    }
	}
	ErrorResponse.InvalidSelectorException = InvalidSelectorException;
	class InvalidSessionIdException extends Exception {
	    constructor(message, stacktrace) {
	        super("invalid session id" /* ErrorCode.InvalidSessionId */, message, stacktrace);
	    }
	}
	ErrorResponse.InvalidSessionIdException = InvalidSessionIdException;
	class MoveTargetOutOfBoundsException extends Exception {
	    constructor(message, stacktrace) {
	        super("move target out of bounds" /* ErrorCode.MoveTargetOutOfBounds */, message, stacktrace);
	    }
	}
	ErrorResponse.MoveTargetOutOfBoundsException = MoveTargetOutOfBoundsException;
	class NoSuchAlertException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such alert" /* ErrorCode.NoSuchAlert */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchAlertException = NoSuchAlertException;
	class NoSuchElementException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such element" /* ErrorCode.NoSuchElement */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchElementException = NoSuchElementException;
	class NoSuchFrameException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such frame" /* ErrorCode.NoSuchFrame */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchFrameException = NoSuchFrameException;
	class NoSuchHandleException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such handle" /* ErrorCode.NoSuchHandle */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchHandleException = NoSuchHandleException;
	class NoSuchHistoryEntryException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such history entry" /* ErrorCode.NoSuchHistoryEntry */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchHistoryEntryException = NoSuchHistoryEntryException;
	class NoSuchInterceptException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such intercept" /* ErrorCode.NoSuchIntercept */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchInterceptException = NoSuchInterceptException;
	class NoSuchNodeException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such node" /* ErrorCode.NoSuchNode */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchNodeException = NoSuchNodeException;
	class NoSuchRequestException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such request" /* ErrorCode.NoSuchRequest */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchRequestException = NoSuchRequestException;
	class NoSuchScriptException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such script" /* ErrorCode.NoSuchScript */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchScriptException = NoSuchScriptException;
	class NoSuchUserContextException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such user context" /* ErrorCode.NoSuchUserContext */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchUserContextException = NoSuchUserContextException;
	class SessionNotCreatedException extends Exception {
	    constructor(message, stacktrace) {
	        super("session not created" /* ErrorCode.SessionNotCreated */, message, stacktrace);
	    }
	}
	ErrorResponse.SessionNotCreatedException = SessionNotCreatedException;
	class UnknownCommandException extends Exception {
	    constructor(message, stacktrace) {
	        super("unknown command" /* ErrorCode.UnknownCommand */, message, stacktrace);
	    }
	}
	ErrorResponse.UnknownCommandException = UnknownCommandException;
	class UnknownErrorException extends Exception {
	    constructor(message, stacktrace = new Error().stack) {
	        super("unknown error" /* ErrorCode.UnknownError */, message, stacktrace);
	    }
	}
	ErrorResponse.UnknownErrorException = UnknownErrorException;
	class UnableToCaptureScreenException extends Exception {
	    constructor(message, stacktrace) {
	        super("unable to capture screen" /* ErrorCode.UnableToCaptureScreen */, message, stacktrace);
	    }
	}
	ErrorResponse.UnableToCaptureScreenException = UnableToCaptureScreenException;
	class UnableToCloseBrowserException extends Exception {
	    constructor(message, stacktrace) {
	        super("unable to close browser" /* ErrorCode.UnableToCloseBrowser */, message, stacktrace);
	    }
	}
	ErrorResponse.UnableToCloseBrowserException = UnableToCloseBrowserException;
	class UnsupportedOperationException extends Exception {
	    constructor(message, stacktrace) {
	        super("unsupported operation" /* ErrorCode.UnsupportedOperation */, message, stacktrace);
	    }
	}
	ErrorResponse.UnsupportedOperationException = UnsupportedOperationException;
	class NoSuchStoragePartitionException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such storage partition" /* ErrorCode.NoSuchStoragePartition */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchStoragePartitionException = NoSuchStoragePartitionException;
	class UnableToSetCookieException extends Exception {
	    constructor(message, stacktrace) {
	        super("unable to set cookie" /* ErrorCode.UnableToSetCookie */, message, stacktrace);
	    }
	}
	ErrorResponse.UnableToSetCookieException = UnableToSetCookieException;
	class UnableToSetFileInputException extends Exception {
	    constructor(message, stacktrace) {
	        super("unable to set file input" /* ErrorCode.UnableToSetFileInput */, message, stacktrace);
	    }
	}
	ErrorResponse.UnableToSetFileInputException = UnableToSetFileInputException;
	class UnderspecifiedStoragePartitionException extends Exception {
	    constructor(message, stacktrace) {
	        super("underspecified storage partition" /* ErrorCode.UnderspecifiedStoragePartition */, message, stacktrace);
	    }
	}
	ErrorResponse.UnderspecifiedStoragePartitionException = UnderspecifiedStoragePartitionException;
	class InvalidWebExtensionException extends Exception {
	    constructor(message, stacktrace) {
	        super("invalid web extension" /* ErrorCode.InvalidWebExtension */, message, stacktrace);
	    }
	}
	ErrorResponse.InvalidWebExtensionException = InvalidWebExtensionException;
	class NoSuchWebExtensionException extends Exception {
	    constructor(message, stacktrace) {
	        super("no such web extension" /* ErrorCode.NoSuchWebExtension */, message, stacktrace);
	    }
	}
	ErrorResponse.NoSuchWebExtensionException = NoSuchWebExtensionException;
	
	return ErrorResponse;
}

var webdriverBidiPermissions = {};

var hasRequiredWebdriverBidiPermissions;

function requireWebdriverBidiPermissions () {
	if (hasRequiredWebdriverBidiPermissions) return webdriverBidiPermissions;
	hasRequiredWebdriverBidiPermissions = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(webdriverBidiPermissions, "__esModule", { value: true });
	
	return webdriverBidiPermissions;
}

var webdriverBidiBluetooth = {};

var hasRequiredWebdriverBidiBluetooth;

function requireWebdriverBidiBluetooth () {
	if (hasRequiredWebdriverBidiBluetooth) return webdriverBidiBluetooth;
	hasRequiredWebdriverBidiBluetooth = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(webdriverBidiBluetooth, "__esModule", { value: true });
	
	return webdriverBidiBluetooth;
}

var hasRequiredProtocol;

function requireProtocol () {
	if (hasRequiredProtocol) return protocol;
	hasRequiredProtocol = 1;
	(function (exports) {
		var __createBinding = (protocol && protocol.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __setModuleDefault = (protocol && protocol.__setModuleDefault) || (Object.create ? (function(o, v) {
		    Object.defineProperty(o, "default", { enumerable: true, value: v });
		}) : function(o, v) {
		    o["default"] = v;
		});
		var __importStar = (protocol && protocol.__importStar) || (function () {
		    var ownKeys = function(o) {
		        ownKeys = Object.getOwnPropertyNames || function (o) {
		            var ar = [];
		            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
		            return ar;
		        };
		        return ownKeys(o);
		    };
		    return function (mod) {
		        if (mod && mod.__esModule) return mod;
		        var result = {};
		        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
		        __setModuleDefault(result, mod);
		        return result;
		    };
		})();
		var __exportStar = (protocol && protocol.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ChromiumBidi = exports.Cdp = void 0;
		/**
		 * Copyright 2023 Google LLC.
		 * Copyright (c) Microsoft Corporation.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 *     http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */
		exports.Cdp = __importStar(requireCdp());
		exports.ChromiumBidi = __importStar(requireChromiumBidi());
		__exportStar(requireWebdriverBidi(), exports);
		__exportStar(requireErrorResponse(), exports);
		__exportStar(requireWebdriverBidiPermissions(), exports);
		__exportStar(requireWebdriverBidiBluetooth(), exports);
		
	} (protocol));
	return protocol;
}

var BidiNoOpParser = {};

var hasRequiredBidiNoOpParser;

function requireBidiNoOpParser () {
	if (hasRequiredBidiNoOpParser) return BidiNoOpParser;
	hasRequiredBidiNoOpParser = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(BidiNoOpParser, "__esModule", { value: true });
	BidiNoOpParser.BidiNoOpParser = void 0;
	let BidiNoOpParser$1 = class BidiNoOpParser {
	    // Bluetooth module
	    // keep-sorted start block=yes
	    parseHandleRequestDevicePromptParams(params) {
	        return params;
	    }
	    parseSimulateAdapterParameters(params) {
	        return params;
	    }
	    parseSimulateAdvertisementParameters(params) {
	        return params;
	    }
	    parseSimulatePreconnectedPeripheralParameters(params) {
	        return params;
	    }
	    // keep-sorted end
	    // Browser module
	    // keep-sorted start block=yes
	    parseRemoveUserContextParams(params) {
	        return params;
	    }
	    // keep-sorted end
	    // Browsing Context module
	    // keep-sorted start block=yes
	    parseActivateParams(params) {
	        return params;
	    }
	    parseCaptureScreenshotParams(params) {
	        return params;
	    }
	    parseCloseParams(params) {
	        return params;
	    }
	    parseCreateParams(params) {
	        return params;
	    }
	    parseGetTreeParams(params) {
	        return params;
	    }
	    parseHandleUserPromptParams(params) {
	        return params;
	    }
	    parseLocateNodesParams(params) {
	        return params;
	    }
	    parseNavigateParams(params) {
	        return params;
	    }
	    parsePrintParams(params) {
	        return params;
	    }
	    parseReloadParams(params) {
	        return params;
	    }
	    parseSetViewportParams(params) {
	        return params;
	    }
	    parseTraverseHistoryParams(params) {
	        return params;
	    }
	    // keep-sorted end
	    // CDP module
	    // keep-sorted start block=yes
	    parseGetSessionParams(params) {
	        return params;
	    }
	    parseResolveRealmParams(params) {
	        return params;
	    }
	    parseSendCommandParams(params) {
	        return params;
	    }
	    // keep-sorted end
	    // Script module
	    // keep-sorted start block=yes
	    parseAddPreloadScriptParams(params) {
	        return params;
	    }
	    parseCallFunctionParams(params) {
	        return params;
	    }
	    parseDisownParams(params) {
	        return params;
	    }
	    parseEvaluateParams(params) {
	        return params;
	    }
	    parseGetRealmsParams(params) {
	        return params;
	    }
	    parseRemovePreloadScriptParams(params) {
	        return params;
	    }
	    // keep-sorted end
	    // Input module
	    // keep-sorted start block=yes
	    parsePerformActionsParams(params) {
	        return params;
	    }
	    parseReleaseActionsParams(params) {
	        return params;
	    }
	    parseSetFilesParams(params) {
	        return params;
	    }
	    // keep-sorted end
	    // Network module
	    // keep-sorted start block=yes
	    parseAddInterceptParams(params) {
	        return params;
	    }
	    parseContinueRequestParams(params) {
	        return params;
	    }
	    parseContinueResponseParams(params) {
	        return params;
	    }
	    parseContinueWithAuthParams(params) {
	        return params;
	    }
	    parseFailRequestParams(params) {
	        return params;
	    }
	    parseProvideResponseParams(params) {
	        return params;
	    }
	    parseRemoveInterceptParams(params) {
	        return params;
	    }
	    parseSetCacheBehavior(params) {
	        return params;
	    }
	    // keep-sorted end
	    // Permissions module
	    // keep-sorted start block=yes
	    parseSetPermissionsParams(params) {
	        return params;
	    }
	    // keep-sorted end
	    // Session module
	    // keep-sorted start block=yes
	    parseSubscribeParams(params) {
	        return params;
	    }
	    // keep-sorted end
	    // Storage module
	    // keep-sorted start block=yes
	    parseDeleteCookiesParams(params) {
	        return params;
	    }
	    parseGetCookiesParams(params) {
	        return params;
	    }
	    parseSetCookieParams(params) {
	        return params;
	    }
	};
	BidiNoOpParser.BidiNoOpParser = BidiNoOpParser$1;
	
	return BidiNoOpParser;
}

var BrowserProcessor = {};

var hasRequiredBrowserProcessor;

function requireBrowserProcessor () {
	if (hasRequiredBrowserProcessor) return BrowserProcessor;
	hasRequiredBrowserProcessor = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(BrowserProcessor, "__esModule", { value: true });
	BrowserProcessor.BrowserProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	let BrowserProcessor$1 = class BrowserProcessor {
	    #browserCdpClient;
	    #browsingContextStorage;
	    constructor(browserCdpClient, browsingContextStorage) {
	        this.#browserCdpClient = browserCdpClient;
	        this.#browsingContextStorage = browsingContextStorage;
	    }
	    close() {
	        // Ensure that it is put at the end of the event loop.
	        // This way we send back the response before closing the tab.
	        setTimeout(() => this.#browserCdpClient.sendCommand('Browser.close'), 0);
	        return {};
	    }
	    async createUserContext(params) {
	        const request = {
	            proxyServer: params['goog:proxyServer'] ?? undefined,
	        };
	        const proxyBypassList = params['goog:proxyBypassList'] ?? undefined;
	        if (proxyBypassList) {
	            request.proxyBypassList = proxyBypassList.join(',');
	        }
	        const context = await this.#browserCdpClient.sendCommand('Target.createBrowserContext', request);
	        return {
	            userContext: context.browserContextId,
	        };
	    }
	    async removeUserContext(params) {
	        const userContext = params.userContext;
	        if (userContext === 'default') {
	            throw new protocol_js_1.InvalidArgumentException('`default` user context cannot be removed');
	        }
	        try {
	            await this.#browserCdpClient.sendCommand('Target.disposeBrowserContext', {
	                browserContextId: userContext,
	            });
	        }
	        catch (err) {
	            // https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/protocol/target_handler.cc;l=1424;drc=c686e8f4fd379312469fe018f5c390e9c8f20d0d
	            if (err.message.startsWith('Failed to find context with id')) {
	                throw new protocol_js_1.NoSuchUserContextException(err.message);
	            }
	            throw err;
	        }
	        return {};
	    }
	    async getUserContexts() {
	        const result = await this.#browserCdpClient.sendCommand('Target.getBrowserContexts');
	        return {
	            userContexts: [
	                {
	                    userContext: 'default',
	                },
	                ...result.browserContextIds.map((id) => {
	                    return {
	                        userContext: id,
	                    };
	                }),
	            ],
	        };
	    }
	    async #getWindowInfo(targetId) {
	        const windowInfo = await this.#browserCdpClient.sendCommand('Browser.getWindowForTarget', { targetId });
	        return {
	            // `active` is not supported in CDP yet.
	            active: false,
	            clientWindow: `${windowInfo.windowId}`,
	            state: windowInfo.bounds.windowState ?? 'normal',
	            height: windowInfo.bounds.height ?? 0,
	            width: windowInfo.bounds.width ?? 0,
	            x: windowInfo.bounds.left ?? 0,
	            y: windowInfo.bounds.top ?? 0,
	        };
	    }
	    async getClientWindows() {
	        const topLevelTargetIds = this.#browsingContextStorage
	            .getTopLevelContexts()
	            .map((b) => b.cdpTarget.id);
	        const clientWindows = await Promise.all(topLevelTargetIds.map(async (targetId) => await this.#getWindowInfo(targetId)));
	        const uniqueClientWindowIds = new Set();
	        const uniqueClientWindows = new Array();
	        // Filter out duplicated client windows.
	        for (const window of clientWindows) {
	            if (!uniqueClientWindowIds.has(window.clientWindow)) {
	                uniqueClientWindowIds.add(window.clientWindow);
	                uniqueClientWindows.push(window);
	            }
	        }
	        return { clientWindows: uniqueClientWindows };
	    }
	};
	BrowserProcessor.BrowserProcessor = BrowserProcessor$1;
	
	return BrowserProcessor;
}

var CdpProcessor = {};

var hasRequiredCdpProcessor;

function requireCdpProcessor () {
	if (hasRequiredCdpProcessor) return CdpProcessor;
	hasRequiredCdpProcessor = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(CdpProcessor, "__esModule", { value: true });
	CdpProcessor.CdpProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	let CdpProcessor$1 = class CdpProcessor {
	    #browsingContextStorage;
	    #realmStorage;
	    #cdpConnection;
	    #browserCdpClient;
	    constructor(browsingContextStorage, realmStorage, cdpConnection, browserCdpClient) {
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#realmStorage = realmStorage;
	        this.#cdpConnection = cdpConnection;
	        this.#browserCdpClient = browserCdpClient;
	    }
	    getSession(params) {
	        const context = params.context;
	        const sessionId = this.#browsingContextStorage.getContext(context).cdpTarget.cdpSessionId;
	        if (sessionId === undefined) {
	            return {};
	        }
	        return { session: sessionId };
	    }
	    resolveRealm(params) {
	        const context = params.realm;
	        const realm = this.#realmStorage.getRealm({ realmId: context });
	        if (realm === undefined) {
	            throw new protocol_js_1.UnknownErrorException(`Could not find realm ${params.realm}`);
	        }
	        return { executionContextId: realm.executionContextId };
	    }
	    async sendCommand(params) {
	        const client = params.session
	            ? this.#cdpConnection.getCdpClient(params.session)
	            : this.#browserCdpClient;
	        const result = await client.sendCommand(params.method, params.params);
	        return {
	            result,
	            session: params.session,
	        };
	    }
	};
	CdpProcessor.CdpProcessor = CdpProcessor$1;
	
	return CdpProcessor;
}

var BrowsingContextProcessor = {};

var hasRequiredBrowsingContextProcessor;

function requireBrowsingContextProcessor () {
	if (hasRequiredBrowsingContextProcessor) return BrowsingContextProcessor;
	hasRequiredBrowsingContextProcessor = 1;
	Object.defineProperty(BrowsingContextProcessor, "__esModule", { value: true });
	BrowsingContextProcessor.BrowsingContextProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	let BrowsingContextProcessor$1 = class BrowsingContextProcessor {
	    #browserCdpClient;
	    #browsingContextStorage;
	    #eventManager;
	    constructor(browserCdpClient, browsingContextStorage, eventManager) {
	        this.#browserCdpClient = browserCdpClient;
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#eventManager = eventManager;
	        this.#eventManager.addSubscribeHook(protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated, this.#onContextCreatedSubscribeHook.bind(this));
	    }
	    getTree(params) {
	        const resultContexts = params.root === undefined
	            ? this.#browsingContextStorage.getTopLevelContexts()
	            : [this.#browsingContextStorage.getContext(params.root)];
	        return {
	            contexts: resultContexts.map((c) => c.serializeToBidiValue(params.maxDepth ?? Number.MAX_VALUE)),
	        };
	    }
	    async create(params) {
	        let referenceContext;
	        let userContext = 'default';
	        if (params.referenceContext !== undefined) {
	            referenceContext = this.#browsingContextStorage.getContext(params.referenceContext);
	            if (!referenceContext.isTopLevelContext()) {
	                throw new protocol_js_1.InvalidArgumentException(`referenceContext should be a top-level context`);
	            }
	            userContext = referenceContext.userContext;
	        }
	        if (params.userContext !== undefined) {
	            userContext = params.userContext;
	        }
	        const existingContexts = this.#browsingContextStorage
	            .getAllContexts()
	            .filter((context) => context.userContext === userContext);
	        let newWindow = false;
	        switch (params.type) {
	            case "tab" /* BrowsingContext.CreateType.Tab */:
	                newWindow = false;
	                break;
	            case "window" /* BrowsingContext.CreateType.Window */:
	                newWindow = true;
	                break;
	        }
	        if (!existingContexts.length) {
	            // If there are no contexts in the given user context, we need to set
	            // newWindow to true as newWindow=false will be rejected.
	            newWindow = true;
	        }
	        let result;
	        try {
	            result = await this.#browserCdpClient.sendCommand('Target.createTarget', {
	                url: 'about:blank',
	                newWindow,
	                browserContextId: userContext === 'default' ? undefined : userContext,
	                background: params.background === true,
	            });
	        }
	        catch (err) {
	            if (
	            // See https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/devtools/protocol/target_handler.cc;l=90;drc=e80392ac11e48a691f4309964cab83a3a59e01c8
	            err.message.startsWith('Failed to find browser context with id') ||
	                // See https://source.chromium.org/chromium/chromium/src/+/main:headless/lib/browser/protocol/target_handler.cc;l=49;drc=e80392ac11e48a691f4309964cab83a3a59e01c8
	                err.message === 'browserContextId') {
	                throw new protocol_js_1.NoSuchUserContextException(`The context ${userContext} was not found`);
	            }
	            throw err;
	        }
	        // Wait for the new target to be attached and to be added to the browsing context
	        // storage.
	        const context = await this.#browsingContextStorage.waitForContext(result.targetId);
	        // Wait for the new tab to be loaded to avoid race conditions in the
	        // `browsingContext` events, when the `browsingContext.domContentLoaded` and
	        // `browsingContext.load` events from the initial `about:blank` navigation
	        // are emitted after the next navigation is started.
	        // Details: https://github.com/web-platform-tests/wpt/issues/35846
	        await context.lifecycleLoaded();
	        return { context: context.id };
	    }
	    navigate(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        return context.navigate(params.url, params.wait ?? "none" /* BrowsingContext.ReadinessState.None */);
	    }
	    reload(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        return context.reload(params.ignoreCache ?? false, params.wait ?? "none" /* BrowsingContext.ReadinessState.None */);
	    }
	    async activate(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        if (!context.isTopLevelContext()) {
	            throw new protocol_js_1.InvalidArgumentException('Activation is only supported on the top-level context');
	        }
	        await context.activate();
	        return {};
	    }
	    async captureScreenshot(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        return await context.captureScreenshot(params);
	    }
	    async print(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        return await context.print(params);
	    }
	    async setViewport(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        if (!context.isTopLevelContext()) {
	            throw new protocol_js_1.InvalidArgumentException('Emulating viewport is only supported on the top-level context');
	        }
	        await context.setViewport(params.viewport, params.devicePixelRatio);
	        return {};
	    }
	    async traverseHistory(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        if (!context) {
	            throw new protocol_js_1.InvalidArgumentException(`No browsing context with id ${params.context}`);
	        }
	        if (!context.isTopLevelContext()) {
	            throw new protocol_js_1.InvalidArgumentException('Traversing history is only supported on the top-level context');
	        }
	        await context.traverseHistory(params.delta);
	        return {};
	    }
	    async handleUserPrompt(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        try {
	            await context.handleUserPrompt(params.accept, params.userText);
	        }
	        catch (error) {
	            // Heuristically determine the error
	            // https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/protocol/page_handler.cc;l=1085?q=%22No%20dialog%20is%20showing%22&ss=chromium
	            if (error.message?.includes('No dialog is showing')) {
	                throw new protocol_js_1.NoSuchAlertException('No dialog is showing');
	            }
	            throw error;
	        }
	        return {};
	    }
	    async close(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        if (!context.isTopLevelContext()) {
	            throw new protocol_js_1.InvalidArgumentException(`Non top-level browsing context ${context.id} cannot be closed.`);
	        }
	        // Parent session of a page target session can be a `browser` or a `tab` session.
	        const parentCdpClient = context.cdpTarget.parentCdpClient;
	        try {
	            const detachedFromTargetPromise = new Promise((resolve) => {
	                const onContextDestroyed = (event) => {
	                    if (event.targetId === params.context) {
	                        parentCdpClient.off('Target.detachedFromTarget', onContextDestroyed);
	                        resolve();
	                    }
	                };
	                parentCdpClient.on('Target.detachedFromTarget', onContextDestroyed);
	            });
	            try {
	                if (params.promptUnload) {
	                    await context.close();
	                }
	                else {
	                    await parentCdpClient.sendCommand('Target.closeTarget', {
	                        targetId: params.context,
	                    });
	                }
	            }
	            catch (error) {
	                // Swallow error that arise from the session being destroyed. Rely on the
	                // `detachedFromTargetPromise` event to be resolved.
	                if (!parentCdpClient.isCloseError(error)) {
	                    throw error;
	                }
	            }
	            // Sometimes CDP command finishes before `detachedFromTarget` event,
	            // sometimes after. Wait for the CDP command to be finished, and then wait
	            // for `detachedFromTarget` if it hasn't emitted.
	            await detachedFromTargetPromise;
	        }
	        catch (error) {
	            // Swallow error that arise from the page being destroyed
	            // Example is navigating to faulty SSL certificate
	            if (!(error.code === -32e3 /* CdpErrorConstants.GENERIC_ERROR */ &&
	                error.message === 'Not attached to an active page')) {
	                throw error;
	            }
	        }
	        return {};
	    }
	    async locateNodes(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        return await context.locateNodes(params);
	    }
	    #onContextCreatedSubscribeHook(contextId) {
	        const context = this.#browsingContextStorage.getContext(contextId);
	        const contextsToReport = [
	            context,
	            ...this.#browsingContextStorage.getContext(contextId).allChildren,
	        ];
	        contextsToReport.forEach((context) => {
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated,
	                params: context.serializeToBidiValue(),
	            }, context.id);
	        });
	        return Promise.resolve();
	    }
	};
	BrowsingContextProcessor.BrowsingContextProcessor = BrowsingContextProcessor$1;
	
	return BrowsingContextProcessor;
}

var InputProcessor = {};

var assert = {};

var hasRequiredAssert;

function requireAssert () {
	if (hasRequiredAssert) return assert;
	hasRequiredAssert = 1;
	Object.defineProperty(assert, "__esModule", { value: true });
	assert.assert = assert$1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	function assert$1(predicate, message) {
	    if (!predicate) {
	        throw new Error(message ?? 'Internal assertion failed.');
	    }
	}
	
	return assert;
}

var ActionDispatcher = {};

var GraphemeTools = {};

var hasRequiredGraphemeTools;

function requireGraphemeTools () {
	if (hasRequiredGraphemeTools) return GraphemeTools;
	hasRequiredGraphemeTools = 1;
	/*
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(GraphemeTools, "__esModule", { value: true });
	GraphemeTools.isSingleComplexGrapheme = isSingleComplexGrapheme;
	GraphemeTools.isSingleGrapheme = isSingleGrapheme;
	/**
	 * Check if the given string is a single complex grapheme. A complex grapheme is one that
	 * is made up of multiple characters.
	 */
	function isSingleComplexGrapheme(value) {
	    return isSingleGrapheme(value) && value.length > 1;
	}
	/**
	 * Check if the given string is a single grapheme.
	 */
	function isSingleGrapheme(value) {
	    // Theoretically there can be some strings considered a grapheme in some locales, like
	    // slovak "ch" digraph. Use english locale for consistency.
	    // https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries
	    const segmenter = new Intl.Segmenter('en', { granularity: 'grapheme' });
	    return [...segmenter.segment(value)].length === 1;
	}
	
	return GraphemeTools;
}

var InputSource = {};

var hasRequiredInputSource;

function requireInputSource () {
	if (hasRequiredInputSource) return InputSource;
	hasRequiredInputSource = 1;
	Object.defineProperty(InputSource, "__esModule", { value: true });
	InputSource.WheelSource = InputSource.PointerSource = InputSource.KeySource = InputSource.NoneSource = void 0;
	class NoneSource {
	    type = "none" /* SourceType.None */;
	}
	InputSource.NoneSource = NoneSource;
	class KeySource {
	    type = "key" /* SourceType.Key */;
	    pressed = new Set();
	    // This is a bitfield that matches the modifiers parameter of
	    // https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchKeyEvent
	    #modifiers = 0;
	    get modifiers() {
	        return this.#modifiers;
	    }
	    get alt() {
	        return (this.#modifiers & 1) === 1;
	    }
	    set alt(value) {
	        this.#setModifier(value, 1);
	    }
	    get ctrl() {
	        return (this.#modifiers & 2) === 2;
	    }
	    set ctrl(value) {
	        this.#setModifier(value, 2);
	    }
	    get meta() {
	        return (this.#modifiers & 4) === 4;
	    }
	    set meta(value) {
	        this.#setModifier(value, 4);
	    }
	    get shift() {
	        return (this.#modifiers & 8) === 8;
	    }
	    set shift(value) {
	        this.#setModifier(value, 8);
	    }
	    #setModifier(value, bit) {
	        if (value) {
	            this.#modifiers |= bit;
	        }
	        else {
	            this.#modifiers &= ~bit;
	        }
	    }
	}
	InputSource.KeySource = KeySource;
	class PointerSource {
	    type = "pointer" /* SourceType.Pointer */;
	    subtype;
	    pointerId;
	    pressed = new Set();
	    x = 0;
	    y = 0;
	    radiusX;
	    radiusY;
	    force;
	    constructor(id, subtype) {
	        this.pointerId = id;
	        this.subtype = subtype;
	    }
	    // This is a bitfield that matches the buttons parameter of
	    // https://chromedevtools.github.io/devtools-protocol/tot/Input/#method-dispatchMouseEvent
	    get buttons() {
	        let buttons = 0;
	        for (const button of this.pressed) {
	            switch (button) {
	                case 0:
	                    buttons |= 1;
	                    break;
	                case 1:
	                    buttons |= 4;
	                    break;
	                case 2:
	                    buttons |= 2;
	                    break;
	                case 3:
	                    buttons |= 8;
	                    break;
	                case 4:
	                    buttons |= 16;
	                    break;
	            }
	        }
	        return buttons;
	    }
	    // --- Platform-specific code starts here ---
	    // Input.dispatchMouseEvent doesn't know the concept of double click, so we
	    // need to create the logic, similar to how it's done for OSes:
	    // https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:ui/events/event.cc;l=479
	    static ClickContext = class ClickContext {
	        static #DOUBLE_CLICK_TIME_MS = 500;
	        static #MAX_DOUBLE_CLICK_RADIUS = 2;
	        count = 0;
	        #x;
	        #y;
	        #time;
	        constructor(x, y, time) {
	            this.#x = x;
	            this.#y = y;
	            this.#time = time;
	        }
	        compare(context) {
	            return (
	            // The click needs to be within a certain amount of ms.
	            context.#time - this.#time > ClickContext.#DOUBLE_CLICK_TIME_MS ||
	                // The click needs to be within a certain square radius.
	                Math.abs(context.#x - this.#x) >
	                    ClickContext.#MAX_DOUBLE_CLICK_RADIUS ||
	                Math.abs(context.#y - this.#y) > ClickContext.#MAX_DOUBLE_CLICK_RADIUS);
	        }
	    };
	    #clickContexts = new Map();
	    setClickCount(button, context) {
	        let storedContext = this.#clickContexts.get(button);
	        if (!storedContext || storedContext.compare(context)) {
	            storedContext = context;
	        }
	        ++storedContext.count;
	        this.#clickContexts.set(button, storedContext);
	        return storedContext.count;
	    }
	    getClickCount(button) {
	        return this.#clickContexts.get(button)?.count ?? 0;
	    }
	}
	InputSource.PointerSource = PointerSource;
	class WheelSource {
	    type = "wheel" /* SourceType.Wheel */;
	}
	InputSource.WheelSource = WheelSource;
	
	return InputSource;
}

var keyUtils = {};

var hasRequiredKeyUtils;

function requireKeyUtils () {
	if (hasRequiredKeyUtils) return keyUtils;
	hasRequiredKeyUtils = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(keyUtils, "__esModule", { value: true });
	keyUtils.getNormalizedKey = getNormalizedKey;
	keyUtils.getKeyCode = getKeyCode;
	keyUtils.getKeyLocation = getKeyLocation;
	/**
	 * Returns the normalized key value for a given key according to the table:
	 * https://w3c.github.io/webdriver/#dfn-normalized-key-value
	 */
	function getNormalizedKey(value) {
	    switch (value) {
	        case '\uE000':
	            return 'Unidentified';
	        case '\uE001':
	            return 'Cancel';
	        case '\uE002':
	            return 'Help';
	        case '\uE003':
	            return 'Backspace';
	        case '\uE004':
	            return 'Tab';
	        case '\uE005':
	            return 'Clear';
	        // Specification declares the '\uE006' to be `Return`, but it is not supported by
	        // Chrome, so fall back to `Enter`, which aligns with WPT.
	        case '\uE006':
	        case '\uE007':
	            return 'Enter';
	        case '\uE008':
	            return 'Shift';
	        case '\uE009':
	            return 'Control';
	        case '\uE00A':
	            return 'Alt';
	        case '\uE00B':
	            return 'Pause';
	        case '\uE00C':
	            return 'Escape';
	        case '\uE00D':
	            return ' ';
	        case '\uE00E':
	            return 'PageUp';
	        case '\uE00F':
	            return 'PageDown';
	        case '\uE010':
	            return 'End';
	        case '\uE011':
	            return 'Home';
	        case '\uE012':
	            return 'ArrowLeft';
	        case '\uE013':
	            return 'ArrowUp';
	        case '\uE014':
	            return 'ArrowRight';
	        case '\uE015':
	            return 'ArrowDown';
	        case '\uE016':
	            return 'Insert';
	        case '\uE017':
	            return 'Delete';
	        case '\uE018':
	            return ';';
	        case '\uE019':
	            return '=';
	        case '\uE01A':
	            return '0';
	        case '\uE01B':
	            return '1';
	        case '\uE01C':
	            return '2';
	        case '\uE01D':
	            return '3';
	        case '\uE01E':
	            return '4';
	        case '\uE01F':
	            return '5';
	        case '\uE020':
	            return '6';
	        case '\uE021':
	            return '7';
	        case '\uE022':
	            return '8';
	        case '\uE023':
	            return '9';
	        case '\uE024':
	            return '*';
	        case '\uE025':
	            return '+';
	        case '\uE026':
	            return ',';
	        case '\uE027':
	            return '-';
	        case '\uE028':
	            return '.';
	        case '\uE029':
	            return '/';
	        case '\uE031':
	            return 'F1';
	        case '\uE032':
	            return 'F2';
	        case '\uE033':
	            return 'F3';
	        case '\uE034':
	            return 'F4';
	        case '\uE035':
	            return 'F5';
	        case '\uE036':
	            return 'F6';
	        case '\uE037':
	            return 'F7';
	        case '\uE038':
	            return 'F8';
	        case '\uE039':
	            return 'F9';
	        case '\uE03A':
	            return 'F10';
	        case '\uE03B':
	            return 'F11';
	        case '\uE03C':
	            return 'F12';
	        case '\uE03D':
	            return 'Meta';
	        case '\uE040':
	            return 'ZenkakuHankaku';
	        case '\uE050':
	            return 'Shift';
	        case '\uE051':
	            return 'Control';
	        case '\uE052':
	            return 'Alt';
	        case '\uE053':
	            return 'Meta';
	        case '\uE054':
	            return 'PageUp';
	        case '\uE055':
	            return 'PageDown';
	        case '\uE056':
	            return 'End';
	        case '\uE057':
	            return 'Home';
	        case '\uE058':
	            return 'ArrowLeft';
	        case '\uE059':
	            return 'ArrowUp';
	        case '\uE05A':
	            return 'ArrowRight';
	        case '\uE05B':
	            return 'ArrowDown';
	        case '\uE05C':
	            return 'Insert';
	        case '\uE05D':
	            return 'Delete';
	        default:
	            return value;
	    }
	}
	/**
	 * Returns the key code for a given key according to the table:
	 * https://w3c.github.io/webdriver/#dfn-shifted-character
	 */
	function getKeyCode(key) {
	    switch (key) {
	        case '`':
	        case '~':
	            return 'Backquote';
	        case '\\':
	        case '|':
	            return 'Backslash';
	        case '\uE003':
	            return 'Backspace';
	        case '[':
	        case '{':
	            return 'BracketLeft';
	        case ']':
	        case '}':
	            return 'BracketRight';
	        case ',':
	        case '<':
	            return 'Comma';
	        case '0':
	        case ')':
	            return 'Digit0';
	        case '1':
	        case '!':
	            return 'Digit1';
	        case '2':
	        case '@':
	            return 'Digit2';
	        case '3':
	        case '#':
	            return 'Digit3';
	        case '4':
	        case '$':
	            return 'Digit4';
	        case '5':
	        case '%':
	            return 'Digit5';
	        case '6':
	        case '^':
	            return 'Digit6';
	        case '7':
	        case '&':
	            return 'Digit7';
	        case '8':
	        case '*':
	            return 'Digit8';
	        case '9':
	        case '(':
	            return 'Digit9';
	        case '=':
	        case '+':
	            return 'Equal';
	        // The spec declares the '<' to be `IntlBackslash` as well, but it is already covered
	        // in the `Comma` above.
	        case '>':
	            return 'IntlBackslash';
	        case 'a':
	        case 'A':
	            return 'KeyA';
	        case 'b':
	        case 'B':
	            return 'KeyB';
	        case 'c':
	        case 'C':
	            return 'KeyC';
	        case 'd':
	        case 'D':
	            return 'KeyD';
	        case 'e':
	        case 'E':
	            return 'KeyE';
	        case 'f':
	        case 'F':
	            return 'KeyF';
	        case 'g':
	        case 'G':
	            return 'KeyG';
	        case 'h':
	        case 'H':
	            return 'KeyH';
	        case 'i':
	        case 'I':
	            return 'KeyI';
	        case 'j':
	        case 'J':
	            return 'KeyJ';
	        case 'k':
	        case 'K':
	            return 'KeyK';
	        case 'l':
	        case 'L':
	            return 'KeyL';
	        case 'm':
	        case 'M':
	            return 'KeyM';
	        case 'n':
	        case 'N':
	            return 'KeyN';
	        case 'o':
	        case 'O':
	            return 'KeyO';
	        case 'p':
	        case 'P':
	            return 'KeyP';
	        case 'q':
	        case 'Q':
	            return 'KeyQ';
	        case 'r':
	        case 'R':
	            return 'KeyR';
	        case 's':
	        case 'S':
	            return 'KeyS';
	        case 't':
	        case 'T':
	            return 'KeyT';
	        case 'u':
	        case 'U':
	            return 'KeyU';
	        case 'v':
	        case 'V':
	            return 'KeyV';
	        case 'w':
	        case 'W':
	            return 'KeyW';
	        case 'x':
	        case 'X':
	            return 'KeyX';
	        case 'y':
	        case 'Y':
	            return 'KeyY';
	        case 'z':
	        case 'Z':
	            return 'KeyZ';
	        case '-':
	        case '_':
	            return 'Minus';
	        case '.':
	            return 'Period';
	        case "'":
	        case '"':
	            return 'Quote';
	        case ';':
	        case ':':
	            return 'Semicolon';
	        case '/':
	        case '?':
	            return 'Slash';
	        case '\uE00A':
	            return 'AltLeft';
	        case '\uE052':
	            return 'AltRight';
	        case '\uE009':
	            return 'ControlLeft';
	        case '\uE051':
	            return 'ControlRight';
	        case '\uE006':
	            return 'Enter';
	        case '\uE00B':
	            return 'Pause';
	        case '\uE03D':
	            return 'MetaLeft';
	        case '\uE053':
	            return 'MetaRight';
	        case '\uE008':
	            return 'ShiftLeft';
	        case '\uE050':
	            return 'ShiftRight';
	        case ' ':
	        case '\uE00D':
	            return 'Space';
	        case '\uE004':
	            return 'Tab';
	        case '\uE017':
	            return 'Delete';
	        case '\uE010':
	            return 'End';
	        case '\uE002':
	            return 'Help';
	        case '\uE011':
	            return 'Home';
	        case '\uE016':
	            return 'Insert';
	        case '\uE00F':
	            return 'PageDown';
	        case '\uE00E':
	            return 'PageUp';
	        case '\uE015':
	            return 'ArrowDown';
	        case '\uE012':
	            return 'ArrowLeft';
	        case '\uE014':
	            return 'ArrowRight';
	        case '\uE013':
	            return 'ArrowUp';
	        case '\uE00C':
	            return 'Escape';
	        case '\uE031':
	            return 'F1';
	        case '\uE032':
	            return 'F2';
	        case '\uE033':
	            return 'F3';
	        case '\uE034':
	            return 'F4';
	        case '\uE035':
	            return 'F5';
	        case '\uE036':
	            return 'F6';
	        case '\uE037':
	            return 'F7';
	        case '\uE038':
	            return 'F8';
	        case '\uE039':
	            return 'F9';
	        case '\uE03A':
	            return 'F10';
	        case '\uE03B':
	            return 'F11';
	        case '\uE03C':
	            return 'F12';
	        case '\uE019':
	            return 'NumpadEqual';
	        case '\uE01A':
	        case '\uE05C':
	            return 'Numpad0';
	        case '\uE01B':
	        case '\uE056':
	            return 'Numpad1';
	        case '\uE01C':
	        case '\uE05B':
	            return 'Numpad2';
	        case '\uE01D':
	        case '\uE055':
	            return 'Numpad3';
	        case '\uE01E':
	        case '\uE058':
	            return 'Numpad4';
	        case '\uE01F':
	            return 'Numpad5';
	        case '\uE020':
	        case '\uE05A':
	            return 'Numpad6';
	        case '\uE021':
	        case '\uE057':
	            return 'Numpad7';
	        case '\uE022':
	        case '\uE059':
	            return 'Numpad8';
	        case '\uE023':
	        case '\uE054':
	            return 'Numpad9';
	        case '\uE025':
	            return 'NumpadAdd';
	        case '\uE026':
	            return 'NumpadComma';
	        case '\uE028':
	        case '\uE05D':
	            return 'NumpadDecimal';
	        case '\uE029':
	            return 'NumpadDivide';
	        case '\uE007':
	            return 'NumpadEnter';
	        case '\uE024':
	            return 'NumpadMultiply';
	        case '\uE027':
	            return 'NumpadSubtract';
	        default:
	            return;
	    }
	}
	/**
	 * Returns the location of the key according to the table:
	 * https://w3c.github.io/webdriver/#dfn-key-location
	 */
	function getKeyLocation(key) {
	    switch (key) {
	        case '\uE007':
	        case '\uE008':
	        case '\uE009':
	        case '\uE00A':
	        case '\uE03D':
	            return 1;
	        case '\uE019':
	        case '\uE01A':
	        case '\uE01B':
	        case '\uE01C':
	        case '\uE01D':
	        case '\uE01E':
	        case '\uE01F':
	        case '\uE020':
	        case '\uE021':
	        case '\uE022':
	        case '\uE023':
	        case '\uE024':
	        case '\uE025':
	        case '\uE026':
	        case '\uE027':
	        case '\uE028':
	        case '\uE029':
	        case '\uE054':
	        case '\uE055':
	        case '\uE056':
	        case '\uE057':
	        case '\uE058':
	        case '\uE059':
	        case '\uE05A':
	        case '\uE05B':
	        case '\uE05C':
	        case '\uE05D':
	            return 3;
	        case '\uE050':
	        case '\uE051':
	        case '\uE052':
	        case '\uE053':
	            return 2;
	        default:
	            return 0;
	    }
	}
	
	return keyUtils;
}

var USKeyboardLayout = {};

var hasRequiredUSKeyboardLayout;

function requireUSKeyboardLayout () {
	if (hasRequiredUSKeyboardLayout) return USKeyboardLayout;
	hasRequiredUSKeyboardLayout = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(USKeyboardLayout, "__esModule", { value: true });
	USKeyboardLayout.KeyToKeyCode = void 0;
	// TODO: Remove this once https://crrev.com/c/4548290 is stably in Chromium.
	// `Input.dispatchKeyboardEvent` will automatically handle these conversions.
	USKeyboardLayout.KeyToKeyCode = {
	    '0': 48,
	    '1': 49,
	    '2': 50,
	    '3': 51,
	    '4': 52,
	    '5': 53,
	    '6': 54,
	    '7': 55,
	    '8': 56,
	    '9': 57,
	    Abort: 3,
	    Help: 6,
	    Backspace: 8,
	    Tab: 9,
	    Numpad5: 12,
	    NumpadEnter: 13,
	    Enter: 13,
	    '\\r': 13,
	    '\\n': 13,
	    ShiftLeft: 16,
	    ShiftRight: 16,
	    ControlLeft: 17,
	    ControlRight: 17,
	    AltLeft: 18,
	    AltRight: 18,
	    Pause: 19,
	    CapsLock: 20,
	    Escape: 27,
	    Convert: 28,
	    NonConvert: 29,
	    Space: 32,
	    Numpad9: 33,
	    PageUp: 33,
	    Numpad3: 34,
	    PageDown: 34,
	    End: 35,
	    Numpad1: 35,
	    Home: 36,
	    Numpad7: 36,
	    ArrowLeft: 37,
	    Numpad4: 37,
	    Numpad8: 38,
	    ArrowUp: 38,
	    ArrowRight: 39,
	    Numpad6: 39,
	    Numpad2: 40,
	    ArrowDown: 40,
	    Select: 41,
	    Open: 43,
	    PrintScreen: 44,
	    Insert: 45,
	    Numpad0: 45,
	    Delete: 46,
	    NumpadDecimal: 46,
	    Digit0: 48,
	    Digit1: 49,
	    Digit2: 50,
	    Digit3: 51,
	    Digit4: 52,
	    Digit5: 53,
	    Digit6: 54,
	    Digit7: 55,
	    Digit8: 56,
	    Digit9: 57,
	    KeyA: 65,
	    KeyB: 66,
	    KeyC: 67,
	    KeyD: 68,
	    KeyE: 69,
	    KeyF: 70,
	    KeyG: 71,
	    KeyH: 72,
	    KeyI: 73,
	    KeyJ: 74,
	    KeyK: 75,
	    KeyL: 76,
	    KeyM: 77,
	    KeyN: 78,
	    KeyO: 79,
	    KeyP: 80,
	    KeyQ: 81,
	    KeyR: 82,
	    KeyS: 83,
	    KeyT: 84,
	    KeyU: 85,
	    KeyV: 86,
	    KeyW: 87,
	    KeyX: 88,
	    KeyY: 89,
	    KeyZ: 90,
	    MetaLeft: 91,
	    MetaRight: 92,
	    ContextMenu: 93,
	    NumpadMultiply: 106,
	    NumpadAdd: 107,
	    NumpadSubtract: 109,
	    NumpadDivide: 111,
	    F1: 112,
	    F2: 113,
	    F3: 114,
	    F4: 115,
	    F5: 116,
	    F6: 117,
	    F7: 118,
	    F8: 119,
	    F9: 120,
	    F10: 121,
	    F11: 122,
	    F12: 123,
	    F13: 124,
	    F14: 125,
	    F15: 126,
	    F16: 127,
	    F17: 128,
	    F18: 129,
	    F19: 130,
	    F20: 131,
	    F21: 132,
	    F22: 133,
	    F23: 134,
	    F24: 135,
	    NumLock: 144,
	    ScrollLock: 145,
	    AudioVolumeMute: 173,
	    AudioVolumeDown: 174,
	    AudioVolumeUp: 175,
	    MediaTrackNext: 176,
	    MediaTrackPrevious: 177,
	    MediaStop: 178,
	    MediaPlayPause: 179,
	    Semicolon: 186,
	    Equal: 187,
	    NumpadEqual: 187,
	    Comma: 188,
	    Minus: 189,
	    Period: 190,
	    Slash: 191,
	    Backquote: 192,
	    BracketLeft: 219,
	    Backslash: 220,
	    BracketRight: 221,
	    Quote: 222,
	    AltGraph: 225,
	    Props: 247,
	    Cancel: 3,
	    Clear: 12,
	    Shift: 16,
	    Control: 17,
	    Alt: 18,
	    Accept: 30,
	    ModeChange: 31,
	    ' ': 32,
	    Print: 42,
	    Execute: 43,
	    '\\u0000': 46,
	    a: 65,
	    b: 66,
	    c: 67,
	    d: 68,
	    e: 69,
	    f: 70,
	    g: 71,
	    h: 72,
	    i: 73,
	    j: 74,
	    k: 75,
	    l: 76,
	    m: 77,
	    n: 78,
	    o: 79,
	    p: 80,
	    q: 81,
	    r: 82,
	    s: 83,
	    t: 84,
	    u: 85,
	    v: 86,
	    w: 87,
	    x: 88,
	    y: 89,
	    z: 90,
	    Meta: 91,
	    '*': 106,
	    '+': 107,
	    '-': 109,
	    '/': 111,
	    ';': 186,
	    '=': 187,
	    ',': 188,
	    '.': 190,
	    '`': 192,
	    '[': 219,
	    '\\\\': 220,
	    ']': 221,
	    "'": 222,
	    Attn: 246,
	    CrSel: 247,
	    ExSel: 248,
	    EraseEof: 249,
	    Play: 250,
	    ZoomOut: 251,
	    ')': 48,
	    '!': 49,
	    '@': 50,
	    '#': 51,
	    $: 52,
	    '%': 53,
	    '^': 54,
	    '&': 55,
	    '(': 57,
	    A: 65,
	    B: 66,
	    C: 67,
	    D: 68,
	    E: 69,
	    F: 70,
	    G: 71,
	    H: 72,
	    I: 73,
	    J: 74,
	    K: 75,
	    L: 76,
	    M: 77,
	    N: 78,
	    O: 79,
	    P: 80,
	    Q: 81,
	    R: 82,
	    S: 83,
	    T: 84,
	    U: 85,
	    V: 86,
	    W: 87,
	    X: 88,
	    Y: 89,
	    Z: 90,
	    ':': 186,
	    '<': 188,
	    _: 189,
	    '>': 190,
	    '?': 191,
	    '~': 192,
	    '{': 219,
	    '|': 220,
	    '}': 221,
	    '"': 222,
	    Camera: 44,
	    EndCall: 95,
	    VolumeDown: 182,
	    VolumeUp: 183,
	};
	
	return USKeyboardLayout;
}

var hasRequiredActionDispatcher;

function requireActionDispatcher () {
	if (hasRequiredActionDispatcher) return ActionDispatcher;
	hasRequiredActionDispatcher = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(ActionDispatcher, "__esModule", { value: true });
	ActionDispatcher.ActionDispatcher = void 0;
	const protocol_js_1 = requireProtocol();
	const assert_js_1 = requireAssert();
	const GraphemeTools_js_1 = requireGraphemeTools();
	const InputSource_js_1 = requireInputSource();
	const keyUtils_js_1 = requireKeyUtils();
	const USKeyboardLayout_js_1 = requireUSKeyboardLayout();
	/** https://w3c.github.io/webdriver/#dfn-center-point */
	const CALCULATE_IN_VIEW_CENTER_PT_DECL = ((i) => {
	    const t = i.getClientRects()[0], e = Math.max(0, Math.min(t.x, t.x + t.width)), n = Math.min(window.innerWidth, Math.max(t.x, t.x + t.width)), h = Math.max(0, Math.min(t.y, t.y + t.height)), m = Math.min(window.innerHeight, Math.max(t.y, t.y + t.height));
	    return [e + ((n - e) >> 1), h + ((m - h) >> 1)];
	}).toString();
	const IS_MAC_DECL = (() => {
	    return navigator.platform.toLowerCase().includes('mac');
	}).toString();
	async function getElementCenter(context, element) {
	    const sandbox = await context.getOrCreateSandbox(undefined);
	    const result = await sandbox.callFunction(CALCULATE_IN_VIEW_CENTER_PT_DECL, false, { type: 'undefined' }, [element]);
	    if (result.type === 'exception') {
	        throw new protocol_js_1.NoSuchElementException(`Origin element ${element.sharedId} was not found`);
	    }
	    (0, assert_js_1.assert)(result.result.type === 'array');
	    (0, assert_js_1.assert)(result.result.value?.[0]?.type === 'number');
	    (0, assert_js_1.assert)(result.result.value?.[1]?.type === 'number');
	    const { result: { value: [{ value: x }, { value: y }], }, } = result;
	    return { x: x, y: y };
	}
	let ActionDispatcher$1 = class ActionDispatcher {
	    static isMacOS = async (context) => {
	        const result = await (await context.getOrCreateSandbox(undefined)).callFunction(IS_MAC_DECL, false);
	        (0, assert_js_1.assert)(result.type !== 'exception');
	        (0, assert_js_1.assert)(result.result.type === 'boolean');
	        return result.result.value;
	    };
	    #browsingContextStorage;
	    #tickStart = 0;
	    #tickDuration = 0;
	    #inputState;
	    #contextId;
	    #isMacOS;
	    constructor(inputState, browsingContextStorage, contextId, isMacOS) {
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#inputState = inputState;
	        this.#contextId = contextId;
	        this.#isMacOS = isMacOS;
	    }
	    /**
	     * The context can be disposed between action ticks, so need to get it each time.
	     */
	    get #context() {
	        return this.#browsingContextStorage.getContext(this.#contextId);
	    }
	    async dispatchActions(optionsByTick) {
	        await this.#inputState.queue.run(async () => {
	            for (const options of optionsByTick) {
	                await this.dispatchTickActions(options);
	            }
	        });
	    }
	    async dispatchTickActions(options) {
	        this.#tickStart = performance.now();
	        this.#tickDuration = 0;
	        for (const { action } of options) {
	            if ('duration' in action && action.duration !== undefined) {
	                this.#tickDuration = Math.max(this.#tickDuration, action.duration);
	            }
	        }
	        const promises = [
	            new Promise((resolve) => setTimeout(resolve, this.#tickDuration)),
	        ];
	        for (const option of options) {
	            // In theory we have to wait for each action to happen, but CDP is serial,
	            // so as an optimization, we queue all CDP commands at once and await all
	            // of them.
	            promises.push(this.#dispatchAction(option));
	        }
	        await Promise.all(promises);
	    }
	    async #dispatchAction({ id, action }) {
	        const source = this.#inputState.get(id);
	        const keyState = this.#inputState.getGlobalKeyState();
	        switch (action.type) {
	            case 'keyDown': {
	                // SAFETY: The source is validated before.
	                await this.#dispatchKeyDownAction(source, action);
	                this.#inputState.cancelList.push({
	                    id,
	                    action: {
	                        ...action,
	                        type: 'keyUp',
	                    },
	                });
	                break;
	            }
	            case 'keyUp': {
	                // SAFETY: The source is validated before.
	                await this.#dispatchKeyUpAction(source, action);
	                break;
	            }
	            case 'pause': {
	                // TODO: Implement waiting on the input source.
	                break;
	            }
	            case 'pointerDown': {
	                // SAFETY: The source is validated before.
	                await this.#dispatchPointerDownAction(source, keyState, action);
	                this.#inputState.cancelList.push({
	                    id,
	                    action: {
	                        ...action,
	                        type: 'pointerUp',
	                    },
	                });
	                break;
	            }
	            case 'pointerMove': {
	                // SAFETY: The source is validated before.
	                await this.#dispatchPointerMoveAction(source, keyState, action);
	                break;
	            }
	            case 'pointerUp': {
	                // SAFETY: The source is validated before.
	                await this.#dispatchPointerUpAction(source, keyState, action);
	                break;
	            }
	            case 'scroll': {
	                // SAFETY: The source is validated before.
	                await this.#dispatchScrollAction(source, keyState, action);
	                break;
	            }
	        }
	    }
	    async #dispatchPointerDownAction(source, keyState, action) {
	        const { button } = action;
	        if (source.pressed.has(button)) {
	            return;
	        }
	        source.pressed.add(button);
	        const { x, y, subtype: pointerType } = source;
	        const { width, height, pressure, twist, tangentialPressure } = action;
	        const { tiltX, tiltY } = getTilt(action);
	        // --- Platform-specific code begins here ---
	        const { modifiers } = keyState;
	        const { radiusX, radiusY } = getRadii(width ?? 1, height ?? 1);
	        switch (pointerType) {
	            case "mouse" /* Input.PointerType.Mouse */:
	            case "pen" /* Input.PointerType.Pen */:
	                // TODO: Implement width and height when available.
	                await this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchMouseEvent', {
	                    type: 'mousePressed',
	                    x,
	                    y,
	                    modifiers,
	                    button: getCdpButton(button),
	                    buttons: source.buttons,
	                    clickCount: source.setClickCount(button, new InputSource_js_1.PointerSource.ClickContext(x, y, performance.now())),
	                    pointerType,
	                    tangentialPressure,
	                    tiltX,
	                    tiltY,
	                    twist,
	                    force: pressure,
	                });
	                break;
	            case "touch" /* Input.PointerType.Touch */:
	                await this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchTouchEvent', {
	                    type: 'touchStart',
	                    touchPoints: [
	                        {
	                            x,
	                            y,
	                            radiusX,
	                            radiusY,
	                            tangentialPressure,
	                            tiltX,
	                            tiltY,
	                            twist,
	                            force: pressure,
	                            id: source.pointerId,
	                        },
	                    ],
	                    modifiers,
	                });
	                break;
	        }
	        source.radiusX = radiusX;
	        source.radiusY = radiusY;
	        source.force = pressure;
	        // --- Platform-specific code ends here ---
	    }
	    #dispatchPointerUpAction(source, keyState, action) {
	        const { button } = action;
	        if (!source.pressed.has(button)) {
	            return;
	        }
	        source.pressed.delete(button);
	        const { x, y, force, radiusX, radiusY, subtype: pointerType } = source;
	        // --- Platform-specific code begins here ---
	        const { modifiers } = keyState;
	        switch (pointerType) {
	            case "mouse" /* Input.PointerType.Mouse */:
	            case "pen" /* Input.PointerType.Pen */:
	                // TODO: Implement width and height when available.
	                return this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchMouseEvent', {
	                    type: 'mouseReleased',
	                    x,
	                    y,
	                    modifiers,
	                    button: getCdpButton(button),
	                    buttons: source.buttons,
	                    clickCount: source.getClickCount(button),
	                    pointerType,
	                });
	            case "touch" /* Input.PointerType.Touch */:
	                return this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchTouchEvent', {
	                    type: 'touchEnd',
	                    touchPoints: [
	                        {
	                            x,
	                            y,
	                            id: source.pointerId,
	                            force,
	                            radiusX,
	                            radiusY,
	                        },
	                    ],
	                    modifiers,
	                });
	        }
	        // --- Platform-specific code ends here ---
	    }
	    async #dispatchPointerMoveAction(source, keyState, action) {
	        const { x: startX, y: startY, subtype: pointerType } = source;
	        const { width, height, pressure, twist, tangentialPressure, x: offsetX, y: offsetY, origin = 'viewport', duration = this.#tickDuration, } = action;
	        const { tiltX, tiltY } = getTilt(action);
	        const { radiusX, radiusY } = getRadii(width ?? 1, height ?? 1);
	        const { targetX, targetY } = await this.#getCoordinateFromOrigin(origin, offsetX, offsetY, startX, startY);
	        if (targetX < 0 || targetY < 0) {
	            throw new protocol_js_1.MoveTargetOutOfBoundsException(`Cannot move beyond viewport (x: ${targetX}, y: ${targetY})`);
	        }
	        let last;
	        do {
	            const ratio = duration > 0 ? (performance.now() - this.#tickStart) / duration : 1;
	            last = ratio >= 1;
	            let x;
	            let y;
	            if (last) {
	                x = targetX;
	                y = targetY;
	            }
	            else {
	                x = Math.round(ratio * (targetX - startX) + startX);
	                y = Math.round(ratio * (targetY - startY) + startY);
	            }
	            if (source.x !== x || source.y !== y) {
	                // --- Platform-specific code begins here ---
	                const { modifiers } = keyState;
	                switch (pointerType) {
	                    case "mouse" /* Input.PointerType.Mouse */:
	                        // TODO: Implement width and height when available.
	                        await this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchMouseEvent', {
	                            type: 'mouseMoved',
	                            x,
	                            y,
	                            modifiers,
	                            clickCount: 0,
	                            button: getCdpButton(source.pressed.values().next().value ?? 5),
	                            buttons: source.buttons,
	                            pointerType,
	                            tangentialPressure,
	                            tiltX,
	                            tiltY,
	                            twist,
	                            force: pressure,
	                        });
	                        break;
	                    case "pen" /* Input.PointerType.Pen */:
	                        if (source.pressed.size !== 0) {
	                            // Empty `source.pressed.size` means the pen is not detected by digitizer.
	                            // Dispatch a mouse event for the pen only if either:
	                            // 1. the pen is hovering over the digitizer (0);
	                            // 2. the pen is in contact with the digitizer (1);
	                            // 3. the pen has at least one button pressed (2, 4, etc).
	                            // https://www.w3.org/TR/pointerevents/#the-buttons-property
	                            // TODO: Implement width and height when available.
	                            await this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchMouseEvent', {
	                                type: 'mouseMoved',
	                                x,
	                                y,
	                                modifiers,
	                                clickCount: 0,
	                                button: getCdpButton(source.pressed.values().next().value ?? 5),
	                                buttons: source.buttons,
	                                pointerType,
	                                tangentialPressure,
	                                tiltX,
	                                tiltY,
	                                twist,
	                                force: pressure ?? 0.5,
	                            });
	                        }
	                        break;
	                    case "touch" /* Input.PointerType.Touch */:
	                        if (source.pressed.size !== 0) {
	                            await this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchTouchEvent', {
	                                type: 'touchMove',
	                                touchPoints: [
	                                    {
	                                        x,
	                                        y,
	                                        radiusX,
	                                        radiusY,
	                                        tangentialPressure,
	                                        tiltX,
	                                        tiltY,
	                                        twist,
	                                        force: pressure,
	                                        id: source.pointerId,
	                                    },
	                                ],
	                                modifiers,
	                            });
	                        }
	                        break;
	                }
	                // --- Platform-specific code ends here ---
	                source.x = x;
	                source.y = y;
	                source.radiusX = radiusX;
	                source.radiusY = radiusY;
	                source.force = pressure;
	            }
	        } while (!last);
	    }
	    async #getFrameOffset() {
	        if (this.#context.id === this.#context.cdpTarget.id) {
	            return { x: 0, y: 0 };
	        }
	        // https://github.com/w3c/webdriver/pull/1847 proposes dispatching events from
	        // the top-level browsing context. This implementation dispatches it on the top-most
	        // same-target frame, which is not top-level one in case of OOPiF.
	        // TODO: switch to the top-level browsing context.
	        const { backendNodeId } = await this.#context.cdpTarget.cdpClient.sendCommand('DOM.getFrameOwner', { frameId: this.#context.id });
	        const { model: frameBoxModel } = await this.#context.cdpTarget.cdpClient.sendCommand('DOM.getBoxModel', {
	            backendNodeId,
	        });
	        return { x: frameBoxModel.content[0], y: frameBoxModel.content[1] };
	    }
	    async #getCoordinateFromOrigin(origin, offsetX, offsetY, startX, startY) {
	        let targetX;
	        let targetY;
	        const frameOffset = await this.#getFrameOffset();
	        switch (origin) {
	            case 'viewport':
	                targetX = offsetX + frameOffset.x;
	                targetY = offsetY + frameOffset.y;
	                break;
	            case 'pointer':
	                targetX = startX + offsetX + frameOffset.x;
	                targetY = startY + offsetY + frameOffset.y;
	                break;
	            default: {
	                const { x: posX, y: posY } = await getElementCenter(this.#context, origin.element);
	                // SAFETY: These can never be special numbers.
	                targetX = posX + offsetX + frameOffset.x;
	                targetY = posY + offsetY + frameOffset.y;
	                break;
	            }
	        }
	        return { targetX, targetY };
	    }
	    async #dispatchScrollAction(_source, keyState, action) {
	        const { deltaX: targetDeltaX, deltaY: targetDeltaY, x: offsetX, y: offsetY, origin = 'viewport', duration = this.#tickDuration, } = action;
	        if (origin === 'pointer') {
	            throw new protocol_js_1.InvalidArgumentException('"pointer" origin is invalid for scrolling.');
	        }
	        const { targetX, targetY } = await this.#getCoordinateFromOrigin(origin, offsetX, offsetY, 0, 0);
	        if (targetX < 0 || targetY < 0) {
	            throw new protocol_js_1.MoveTargetOutOfBoundsException(`Cannot move beyond viewport (x: ${targetX}, y: ${targetY})`);
	        }
	        let currentDeltaX = 0;
	        let currentDeltaY = 0;
	        let last;
	        do {
	            const ratio = duration > 0 ? (performance.now() - this.#tickStart) / duration : 1;
	            last = ratio >= 1;
	            let deltaX;
	            let deltaY;
	            if (last) {
	                deltaX = targetDeltaX - currentDeltaX;
	                deltaY = targetDeltaY - currentDeltaY;
	            }
	            else {
	                deltaX = Math.round(ratio * targetDeltaX - currentDeltaX);
	                deltaY = Math.round(ratio * targetDeltaY - currentDeltaY);
	            }
	            if (deltaX !== 0 || deltaY !== 0) {
	                // --- Platform-specific code begins here ---
	                const { modifiers } = keyState;
	                await this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchMouseEvent', {
	                    type: 'mouseWheel',
	                    deltaX,
	                    deltaY,
	                    x: targetX,
	                    y: targetY,
	                    modifiers,
	                });
	                // --- Platform-specific code ends here ---
	                currentDeltaX += deltaX;
	                currentDeltaY += deltaY;
	            }
	        } while (!last);
	    }
	    async #dispatchKeyDownAction(source, action) {
	        const rawKey = action.value;
	        if (!(0, GraphemeTools_js_1.isSingleGrapheme)(rawKey)) {
	            // https://w3c.github.io/webdriver/#dfn-process-a-key-action
	            // WebDriver spec allows a grapheme to be used.
	            throw new protocol_js_1.InvalidArgumentException(`Invalid key value: ${rawKey}`);
	        }
	        const isGrapheme = (0, GraphemeTools_js_1.isSingleComplexGrapheme)(rawKey);
	        const key = (0, keyUtils_js_1.getNormalizedKey)(rawKey);
	        const repeat = source.pressed.has(key);
	        const code = (0, keyUtils_js_1.getKeyCode)(rawKey);
	        const location = (0, keyUtils_js_1.getKeyLocation)(rawKey);
	        switch (key) {
	            case 'Alt':
	                source.alt = true;
	                break;
	            case 'Shift':
	                source.shift = true;
	                break;
	            case 'Control':
	                source.ctrl = true;
	                break;
	            case 'Meta':
	                source.meta = true;
	                break;
	        }
	        source.pressed.add(key);
	        const { modifiers } = source;
	        // --- Platform-specific code begins here ---
	        // The spread is a little hack so JS gives us an array of unicode characters
	        // to measure.
	        const unmodifiedText = getKeyEventUnmodifiedText(key, source, isGrapheme);
	        const text = getKeyEventText(code ?? '', source) ?? unmodifiedText;
	        let command;
	        // The following commands need to be declared because Chromium doesn't
	        // handle them. See
	        // https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:third_party/blink/renderer/core/editing/editing_behavior.cc;l=169;drc=b8143cf1dfd24842890fcd831c4f5d909bef4fc4;bpv=0;bpt=1.
	        if (this.#isMacOS && source.meta) {
	            switch (code) {
	                case 'KeyA':
	                    command = 'SelectAll';
	                    break;
	                case 'KeyC':
	                    command = 'Copy';
	                    break;
	                case 'KeyV':
	                    command = source.shift ? 'PasteAndMatchStyle' : 'Paste';
	                    break;
	                case 'KeyX':
	                    command = 'Cut';
	                    break;
	                case 'KeyZ':
	                    command = source.shift ? 'Redo' : 'Undo';
	                    break;
	                // Intentionally empty.
	            }
	        }
	        const promises = [
	            this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchKeyEvent', {
	                type: text ? 'keyDown' : 'rawKeyDown',
	                windowsVirtualKeyCode: USKeyboardLayout_js_1.KeyToKeyCode[key],
	                key,
	                code,
	                text,
	                unmodifiedText,
	                autoRepeat: repeat,
	                isSystemKey: source.alt || undefined,
	                location: location < 3 ? location : undefined,
	                isKeypad: location === 3,
	                modifiers,
	                commands: command ? [command] : undefined,
	            }),
	        ];
	        // Drag cancelling happens on escape.
	        if (key === 'Escape') {
	            if (!source.alt &&
	                ((this.#isMacOS && !source.ctrl && !source.meta) || !this.#isMacOS)) {
	                promises.push(this.#context.cdpTarget.cdpClient.sendCommand('Input.cancelDragging'));
	            }
	        }
	        await Promise.all(promises);
	        // --- Platform-specific code ends here ---
	    }
	    #dispatchKeyUpAction(source, action) {
	        const rawKey = action.value;
	        if (!(0, GraphemeTools_js_1.isSingleGrapheme)(rawKey)) {
	            // https://w3c.github.io/webdriver/#dfn-process-a-key-action
	            // WebDriver spec allows a grapheme to be used.
	            throw new protocol_js_1.InvalidArgumentException(`Invalid key value: ${rawKey}`);
	        }
	        const isGrapheme = (0, GraphemeTools_js_1.isSingleComplexGrapheme)(rawKey);
	        const key = (0, keyUtils_js_1.getNormalizedKey)(rawKey);
	        if (!source.pressed.has(key)) {
	            return;
	        }
	        const code = (0, keyUtils_js_1.getKeyCode)(rawKey);
	        const location = (0, keyUtils_js_1.getKeyLocation)(rawKey);
	        switch (key) {
	            case 'Alt':
	                source.alt = false;
	                break;
	            case 'Shift':
	                source.shift = false;
	                break;
	            case 'Control':
	                source.ctrl = false;
	                break;
	            case 'Meta':
	                source.meta = false;
	                break;
	        }
	        source.pressed.delete(key);
	        const { modifiers } = source;
	        // --- Platform-specific code begins here ---
	        // The spread is a little hack so JS gives us an array of unicode characters
	        // to measure.
	        const unmodifiedText = getKeyEventUnmodifiedText(key, source, isGrapheme);
	        const text = getKeyEventText(code ?? '', source) ?? unmodifiedText;
	        return this.#context.cdpTarget.cdpClient.sendCommand('Input.dispatchKeyEvent', {
	            type: 'keyUp',
	            windowsVirtualKeyCode: USKeyboardLayout_js_1.KeyToKeyCode[key],
	            key,
	            code,
	            text,
	            unmodifiedText,
	            location: location < 3 ? location : undefined,
	            isSystemKey: source.alt || undefined,
	            isKeypad: location === 3,
	            modifiers,
	        });
	        // --- Platform-specific code ends here ---
	    }
	};
	ActionDispatcher.ActionDispatcher = ActionDispatcher$1;
	/**
	 * Translates a non-grapheme key to either an `undefined` for a special keys, or a single
	 * character modified by shift if needed.
	 */
	const getKeyEventUnmodifiedText = (key, source, isGrapheme) => {
	    if (isGrapheme) {
	        // Graphemes should be presented as text in the CDP command.
	        return key;
	    }
	    if (key === 'Enter') {
	        return '\r';
	    }
	    // If key is not a single character, it is a normalized key value, and should be
	    // presented as key, not text in the CDP command.
	    return [...key].length === 1
	        ? source.shift
	            ? key.toLocaleUpperCase('en-US')
	            : key
	        : undefined;
	};
	const getKeyEventText = (code, source) => {
	    if (source.ctrl) {
	        switch (code) {
	            case 'Digit2':
	                if (source.shift) {
	                    return '\x00';
	                }
	                break;
	            case 'KeyA':
	                return '\x01';
	            case 'KeyB':
	                return '\x02';
	            case 'KeyC':
	                return '\x03';
	            case 'KeyD':
	                return '\x04';
	            case 'KeyE':
	                return '\x05';
	            case 'KeyF':
	                return '\x06';
	            case 'KeyG':
	                return '\x07';
	            case 'KeyH':
	                return '\x08';
	            case 'KeyI':
	                return '\x09';
	            case 'KeyJ':
	                return '\x0A';
	            case 'KeyK':
	                return '\x0B';
	            case 'KeyL':
	                return '\x0C';
	            case 'KeyM':
	                return '\x0D';
	            case 'KeyN':
	                return '\x0E';
	            case 'KeyO':
	                return '\x0F';
	            case 'KeyP':
	                return '\x10';
	            case 'KeyQ':
	                return '\x11';
	            case 'KeyR':
	                return '\x12';
	            case 'KeyS':
	                return '\x13';
	            case 'KeyT':
	                return '\x14';
	            case 'KeyU':
	                return '\x15';
	            case 'KeyV':
	                return '\x16';
	            case 'KeyW':
	                return '\x17';
	            case 'KeyX':
	                return '\x18';
	            case 'KeyY':
	                return '\x19';
	            case 'KeyZ':
	                return '\x1A';
	            case 'BracketLeft':
	                return '\x1B';
	            case 'Backslash':
	                return '\x1C';
	            case 'BracketRight':
	                return '\x1D';
	            case 'Digit6':
	                if (source.shift) {
	                    return '\x1E';
	                }
	                break;
	            case 'Minus':
	                return '\x1F';
	        }
	        return '';
	    }
	    if (source.alt) {
	        return '';
	    }
	    return;
	};
	function getCdpButton(button) {
	    // https://www.w3.org/TR/pointerevents/#the-button-property
	    switch (button) {
	        case 0:
	            return 'left';
	        case 1:
	            return 'middle';
	        case 2:
	            return 'right';
	        case 3:
	            return 'back';
	        case 4:
	            return 'forward';
	        default:
	            return 'none';
	    }
	}
	function getTilt(action) {
	    // https://w3c.github.io/pointerevents/#converting-between-tiltx-tilty-and-altitudeangle-azimuthangle
	    const altitudeAngle = action.altitudeAngle ?? Math.PI / 2;
	    const azimuthAngle = action.azimuthAngle ?? 0;
	    let tiltXRadians = 0;
	    let tiltYRadians = 0;
	    if (altitudeAngle === 0) {
	        // the pen is in the X-Y plane
	        if (azimuthAngle === 0 || azimuthAngle === 2 * Math.PI) {
	            // pen is on positive X axis
	            tiltXRadians = Math.PI / 2;
	        }
	        if (azimuthAngle === Math.PI / 2) {
	            // pen is on positive Y axis
	            tiltYRadians = Math.PI / 2;
	        }
	        if (azimuthAngle === Math.PI) {
	            // pen is on negative X axis
	            tiltXRadians = -Math.PI / 2;
	        }
	        if (azimuthAngle === (3 * Math.PI) / 2) {
	            // pen is on negative Y axis
	            tiltYRadians = -Math.PI / 2;
	        }
	        if (azimuthAngle > 0 && azimuthAngle < Math.PI / 2) {
	            tiltXRadians = Math.PI / 2;
	            tiltYRadians = Math.PI / 2;
	        }
	        if (azimuthAngle > Math.PI / 2 && azimuthAngle < Math.PI) {
	            tiltXRadians = -Math.PI / 2;
	            tiltYRadians = Math.PI / 2;
	        }
	        if (azimuthAngle > Math.PI && azimuthAngle < (3 * Math.PI) / 2) {
	            tiltXRadians = -Math.PI / 2;
	            tiltYRadians = -Math.PI / 2;
	        }
	        if (azimuthAngle > (3 * Math.PI) / 2 && azimuthAngle < 2 * Math.PI) {
	            tiltXRadians = Math.PI / 2;
	            tiltYRadians = -Math.PI / 2;
	        }
	    }
	    if (altitudeAngle !== 0) {
	        const tanAlt = Math.tan(altitudeAngle);
	        tiltXRadians = Math.atan(Math.cos(azimuthAngle) / tanAlt);
	        tiltYRadians = Math.atan(Math.sin(azimuthAngle) / tanAlt);
	    }
	    const factor = 180 / Math.PI;
	    return {
	        tiltX: Math.round(tiltXRadians * factor),
	        tiltY: Math.round(tiltYRadians * factor),
	    };
	}
	function getRadii(width, height) {
	    return {
	        radiusX: width ? width / 2 : 0.5,
	        radiusY: height ? height / 2 : 0.5,
	    };
	}
	
	return ActionDispatcher;
}

var InputStateManager = {};

var InputState = {};

var Mutex = {};

var hasRequiredMutex;

function requireMutex () {
	if (hasRequiredMutex) return Mutex;
	hasRequiredMutex = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 * Copyright 2022 The Chromium Authors.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(Mutex, "__esModule", { value: true });
	Mutex.Mutex = void 0;
	/**
	 * Use Mutex class to coordinate local concurrent operations.
	 * Once `acquire` promise resolves, you hold the lock and must
	 * call `release` function returned by `acquire` to release the
	 * lock. Failing to `release` the lock may lead to deadlocks.
	 */
	let Mutex$1 = class Mutex {
	    #locked = false;
	    #acquirers = [];
	    // This is FIFO.
	    acquire() {
	        const state = { resolved: false };
	        if (this.#locked) {
	            return new Promise((resolve) => {
	                this.#acquirers.push(() => resolve(this.#release.bind(this, state)));
	            });
	        }
	        this.#locked = true;
	        return Promise.resolve(this.#release.bind(this, state));
	    }
	    #release(state) {
	        if (state.resolved) {
	            throw new Error('Cannot release more than once.');
	        }
	        state.resolved = true;
	        const resolve = this.#acquirers.shift();
	        if (!resolve) {
	            this.#locked = false;
	            return;
	        }
	        resolve();
	    }
	    async run(action) {
	        const release = await this.acquire();
	        try {
	            // Note we need to await here because we want the await to release AFTER
	            // that await happens. Returning action() will trigger the release
	            // immediately which is counter to what we want.
	            const result = await action();
	            return result;
	        }
	        finally {
	            release();
	        }
	    }
	};
	Mutex.Mutex = Mutex$1;
	
	return Mutex;
}

var hasRequiredInputState;

function requireInputState () {
	if (hasRequiredInputState) return InputState;
	hasRequiredInputState = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(InputState, "__esModule", { value: true });
	InputState.InputState = void 0;
	const protocol_js_1 = requireProtocol();
	const Mutex_js_1 = requireMutex();
	const InputSource_js_1 = requireInputSource();
	let InputState$1 = class InputState {
	    cancelList = [];
	    #sources = new Map();
	    #mutex = new Mutex_js_1.Mutex();
	    getOrCreate(id, type, subtype) {
	        let source = this.#sources.get(id);
	        if (!source) {
	            switch (type) {
	                case "none" /* SourceType.None */:
	                    source = new InputSource_js_1.NoneSource();
	                    break;
	                case "key" /* SourceType.Key */:
	                    source = new InputSource_js_1.KeySource();
	                    break;
	                case "pointer" /* SourceType.Pointer */: {
	                    let pointerId = subtype === "mouse" /* Input.PointerType.Mouse */ ? 0 : 2;
	                    const pointerIds = new Set();
	                    for (const [, source] of this.#sources) {
	                        if (source.type === "pointer" /* SourceType.Pointer */) {
	                            pointerIds.add(source.pointerId);
	                        }
	                    }
	                    while (pointerIds.has(pointerId)) {
	                        ++pointerId;
	                    }
	                    source = new InputSource_js_1.PointerSource(pointerId, subtype);
	                    break;
	                }
	                case "wheel" /* SourceType.Wheel */:
	                    source = new InputSource_js_1.WheelSource();
	                    break;
	                default:
	                    throw new protocol_js_1.InvalidArgumentException(`Expected "${"none" /* SourceType.None */}", "${"key" /* SourceType.Key */}", "${"pointer" /* SourceType.Pointer */}", or "${"wheel" /* SourceType.Wheel */}". Found unknown source type ${type}.`);
	            }
	            this.#sources.set(id, source);
	            return source;
	        }
	        if (source.type !== type) {
	            throw new protocol_js_1.InvalidArgumentException(`Input source type of ${id} is ${source.type}, but received ${type}.`);
	        }
	        return source;
	    }
	    get(id) {
	        const source = this.#sources.get(id);
	        if (!source) {
	            throw new protocol_js_1.UnknownErrorException(`Internal error.`);
	        }
	        return source;
	    }
	    getGlobalKeyState() {
	        const state = new InputSource_js_1.KeySource();
	        for (const [, source] of this.#sources) {
	            if (source.type !== "key" /* SourceType.Key */) {
	                continue;
	            }
	            for (const pressed of source.pressed) {
	                state.pressed.add(pressed);
	            }
	            state.alt ||= source.alt;
	            state.ctrl ||= source.ctrl;
	            state.meta ||= source.meta;
	            state.shift ||= source.shift;
	        }
	        return state;
	    }
	    get queue() {
	        return this.#mutex;
	    }
	};
	InputState.InputState = InputState$1;
	
	return InputState;
}

var hasRequiredInputStateManager;

function requireInputStateManager () {
	if (hasRequiredInputStateManager) return InputStateManager;
	hasRequiredInputStateManager = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(InputStateManager, "__esModule", { value: true });
	InputStateManager.InputStateManager = void 0;
	const assert_js_1 = requireAssert();
	const InputState_js_1 = requireInputState();
	// We use a weak map here as specified here:
	// https://www.w3.org/TR/webdriver/#dfn-browsing-context-input-state-map
	let InputStateManager$1 = class InputStateManager extends WeakMap {
	    get(context) {
	        (0, assert_js_1.assert)(context.isTopLevelContext());
	        if (!this.has(context)) {
	            this.set(context, new InputState_js_1.InputState());
	        }
	        return super.get(context);
	    }
	};
	InputStateManager.InputStateManager = InputStateManager$1;
	
	return InputStateManager;
}

var hasRequiredInputProcessor;

function requireInputProcessor () {
	if (hasRequiredInputProcessor) return InputProcessor;
	hasRequiredInputProcessor = 1;
	Object.defineProperty(InputProcessor, "__esModule", { value: true });
	InputProcessor.InputProcessor = void 0;
	/*
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const protocol_js_1 = requireProtocol();
	const assert_js_1 = requireAssert();
	const ActionDispatcher_js_1 = requireActionDispatcher();
	const InputStateManager_js_1 = requireInputStateManager();
	let InputProcessor$1 = class InputProcessor {
	    #browsingContextStorage;
	    #inputStateManager = new InputStateManager_js_1.InputStateManager();
	    constructor(browsingContextStorage) {
	        this.#browsingContextStorage = browsingContextStorage;
	    }
	    async performActions(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        const inputState = this.#inputStateManager.get(context.top);
	        const actionsByTick = this.#getActionsByTick(params, inputState);
	        const dispatcher = new ActionDispatcher_js_1.ActionDispatcher(inputState, this.#browsingContextStorage, params.context, await ActionDispatcher_js_1.ActionDispatcher.isMacOS(context).catch(() => false));
	        await dispatcher.dispatchActions(actionsByTick);
	        return {};
	    }
	    async releaseActions(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        const topContext = context.top;
	        const inputState = this.#inputStateManager.get(topContext);
	        const dispatcher = new ActionDispatcher_js_1.ActionDispatcher(inputState, this.#browsingContextStorage, params.context, await ActionDispatcher_js_1.ActionDispatcher.isMacOS(context).catch(() => false));
	        await dispatcher.dispatchTickActions(inputState.cancelList.reverse());
	        this.#inputStateManager.delete(topContext);
	        return {};
	    }
	    async setFiles(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        const realm = await context.getOrCreateSandbox(undefined);
	        let result;
	        try {
	            result = await realm.callFunction(String(function getFiles(fileListLength) {
	                if (!(this instanceof HTMLInputElement)) {
	                    if (this instanceof Element) {
	                        return 1 /* ErrorCode.Element */;
	                    }
	                    return 0 /* ErrorCode.Node */;
	                }
	                if (this.type !== 'file') {
	                    return 2 /* ErrorCode.Type */;
	                }
	                if (this.disabled) {
	                    return 3 /* ErrorCode.Disabled */;
	                }
	                if (fileListLength > 1 && !this.multiple) {
	                    return 4 /* ErrorCode.Multiple */;
	                }
	                return;
	            }), false, params.element, [{ type: 'number', value: params.files.length }]);
	        }
	        catch {
	            throw new protocol_js_1.NoSuchNodeException(`Could not find element ${params.element.sharedId}`);
	        }
	        (0, assert_js_1.assert)(result.type === 'success');
	        if (result.result.type === 'number') {
	            switch (result.result.value) {
	                case 0 /* ErrorCode.Node */: {
	                    throw new protocol_js_1.NoSuchElementException(`Could not find element ${params.element.sharedId}`);
	                }
	                case 1 /* ErrorCode.Element */: {
	                    throw new protocol_js_1.UnableToSetFileInputException(`Element ${params.element.sharedId} is not a input`);
	                }
	                case 2 /* ErrorCode.Type */: {
	                    throw new protocol_js_1.UnableToSetFileInputException(`Input element ${params.element.sharedId} is not a file type`);
	                }
	                case 3 /* ErrorCode.Disabled */: {
	                    throw new protocol_js_1.UnableToSetFileInputException(`Input element ${params.element.sharedId} is disabled`);
	                }
	                case 4 /* ErrorCode.Multiple */: {
	                    throw new protocol_js_1.UnableToSetFileInputException(`Cannot set multiple files on a non-multiple input element`);
	                }
	            }
	        }
	        /**
	         * The zero-length array is a special case, it seems that
	         * DOM.setFileInputFiles does not actually update the files in that case, so
	         * the solution is to eval the element value to a new FileList directly.
	         */
	        if (params.files.length === 0) {
	            // XXX: These events should converted to trusted events. Perhaps do this
	            // in `DOM.setFileInputFiles`?
	            await realm.callFunction(String(function dispatchEvent() {
	                if (this.files?.length === 0) {
	                    this.dispatchEvent(new Event('cancel', {
	                        bubbles: true,
	                    }));
	                    return;
	                }
	                this.files = new DataTransfer().files;
	                // Dispatch events for this case because it should behave akin to a user action.
	                this.dispatchEvent(new Event('input', { bubbles: true, composed: true }));
	                this.dispatchEvent(new Event('change', { bubbles: true }));
	            }), false, params.element);
	            return {};
	        }
	        // Our goal here is to iterate over the input element files and get their
	        // file paths.
	        const paths = [];
	        for (let i = 0; i < params.files.length; ++i) {
	            const result = await realm.callFunction(String(function getFiles(index) {
	                return this.files?.item(index);
	            }), false, params.element, [{ type: 'number', value: 0 }], "root" /* Script.ResultOwnership.Root */);
	            (0, assert_js_1.assert)(result.type === 'success');
	            if (result.result.type !== 'object') {
	                break;
	            }
	            const { handle } = result.result;
	            (0, assert_js_1.assert)(handle !== undefined);
	            const { path } = await realm.cdpClient.sendCommand('DOM.getFileInfo', {
	                objectId: handle,
	            });
	            paths.push(path);
	            // Cleanup the handle.
	            void realm.disown(handle).catch(undefined);
	        }
	        paths.sort();
	        // We create a new array so we preserve the order of the original files.
	        const sortedFiles = [...params.files].sort();
	        if (paths.length !== params.files.length ||
	            sortedFiles.some((path, index) => {
	                return paths[index] !== path;
	            })) {
	            const { objectId } = await realm.deserializeForCdp(params.element);
	            // This cannot throw since this was just used in `callFunction` above.
	            (0, assert_js_1.assert)(objectId !== undefined);
	            await realm.cdpClient.sendCommand('DOM.setFileInputFiles', {
	                files: params.files,
	                objectId,
	            });
	        }
	        else {
	            // XXX: We should dispatch a trusted event.
	            await realm.callFunction(String(function dispatchEvent() {
	                this.dispatchEvent(new Event('cancel', {
	                    bubbles: true,
	                }));
	            }), false, params.element);
	        }
	        return {};
	    }
	    #getActionsByTick(params, inputState) {
	        const actionsByTick = [];
	        for (const action of params.actions) {
	            switch (action.type) {
	                case "pointer" /* SourceType.Pointer */: {
	                    action.parameters ??= { pointerType: "mouse" /* Input.PointerType.Mouse */ };
	                    action.parameters.pointerType ??= "mouse" /* Input.PointerType.Mouse */;
	                    const source = inputState.getOrCreate(action.id, "pointer" /* SourceType.Pointer */, action.parameters.pointerType);
	                    if (source.subtype !== action.parameters.pointerType) {
	                        throw new protocol_js_1.InvalidArgumentException(`Expected input source ${action.id} to be ${source.subtype}; got ${action.parameters.pointerType}.`);
	                    }
	                    break;
	                }
	                default:
	                    inputState.getOrCreate(action.id, action.type);
	            }
	            const actions = action.actions.map((item) => ({
	                id: action.id,
	                action: item,
	            }));
	            for (let i = 0; i < actions.length; i++) {
	                if (actionsByTick.length === i) {
	                    actionsByTick.push([]);
	                }
	                actionsByTick[i].push(actions[i]);
	            }
	        }
	        return actionsByTick;
	    }
	};
	InputProcessor.InputProcessor = InputProcessor$1;
	
	return InputProcessor;
}

var NetworkProcessor = {};

var NetworkUtils = {};

var Base64 = {};

var hasRequiredBase64;

function requireBase64 () {
	if (hasRequiredBase64) return Base64;
	hasRequiredBase64 = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(Base64, "__esModule", { value: true });
	Base64.base64ToString = base64ToString;
	/**
	 * Encodes a string to base64.
	 *
	 * Uses the native Web API if available, otherwise falls back to a NodeJS Buffer.
	 * @param {string} base64Str
	 * @return {string}
	 */
	function base64ToString(base64Str) {
	    // Available only if run in a browser context.
	    if ('atob' in globalThis) {
	        return globalThis.atob(base64Str);
	    }
	    // Available only if run in a NodeJS context.
	    return Buffer.from(base64Str, 'base64').toString('ascii');
	}
	
	return Base64;
}

var hasRequiredNetworkUtils;

function requireNetworkUtils () {
	if (hasRequiredNetworkUtils) return NetworkUtils;
	hasRequiredNetworkUtils = 1;
	/*
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(NetworkUtils, "__esModule", { value: true });
	NetworkUtils.computeHeadersSize = computeHeadersSize;
	NetworkUtils.bidiNetworkHeadersFromCdpNetworkHeaders = bidiNetworkHeadersFromCdpNetworkHeaders;
	NetworkUtils.bidiNetworkHeadersFromCdpNetworkHeadersEntries = bidiNetworkHeadersFromCdpNetworkHeadersEntries;
	NetworkUtils.cdpNetworkHeadersFromBidiNetworkHeaders = cdpNetworkHeadersFromBidiNetworkHeaders;
	NetworkUtils.bidiNetworkHeadersFromCdpFetchHeaders = bidiNetworkHeadersFromCdpFetchHeaders;
	NetworkUtils.cdpFetchHeadersFromBidiNetworkHeaders = cdpFetchHeadersFromBidiNetworkHeaders;
	NetworkUtils.networkHeaderFromCookieHeaders = networkHeaderFromCookieHeaders;
	NetworkUtils.cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction = cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction;
	NetworkUtils.cdpToBiDiCookie = cdpToBiDiCookie;
	NetworkUtils.deserializeByteValue = deserializeByteValue;
	NetworkUtils.bidiToCdpCookie = bidiToCdpCookie;
	NetworkUtils.sameSiteBiDiToCdp = sameSiteBiDiToCdp;
	NetworkUtils.isSpecialScheme = isSpecialScheme;
	NetworkUtils.matchUrlPattern = matchUrlPattern;
	NetworkUtils.bidiBodySizeFromCdpPostDataEntries = bidiBodySizeFromCdpPostDataEntries;
	NetworkUtils.getTiming = getTiming;
	const ErrorResponse_js_1 = requireErrorResponse();
	const Base64_js_1 = requireBase64();
	function computeHeadersSize(headers) {
	    const requestHeaders = headers.reduce((acc, header) => {
	        return `${acc}${header.name}: ${header.value.value}\r\n`;
	    }, '');
	    return new TextEncoder().encode(requestHeaders).length;
	}
	/** Converts from CDP Network domain headers to BiDi network headers. */
	function bidiNetworkHeadersFromCdpNetworkHeaders(headers) {
	    if (!headers) {
	        return [];
	    }
	    return Object.entries(headers).map(([name, value]) => ({
	        name,
	        value: {
	            type: 'string',
	            value,
	        },
	    }));
	}
	/** Converts from CDP Fetch domain headers to BiDi network headers. */
	function bidiNetworkHeadersFromCdpNetworkHeadersEntries(headers) {
	    if (!headers) {
	        return [];
	    }
	    return headers.map(({ name, value }) => ({
	        name,
	        value: {
	            type: 'string',
	            value,
	        },
	    }));
	}
	/** Converts from Bidi network headers to CDP Network domain headers. */
	function cdpNetworkHeadersFromBidiNetworkHeaders(headers) {
	    if (headers === undefined) {
	        return undefined;
	    }
	    return headers.reduce((result, header) => {
	        // TODO: Distinguish between string and bytes?
	        result[header.name] = header.value.value;
	        return result;
	    }, {});
	}
	/** Converts from CDP Fetch domain header entries to Bidi network headers. */
	function bidiNetworkHeadersFromCdpFetchHeaders(headers) {
	    if (!headers) {
	        return [];
	    }
	    return headers.map(({ name, value }) => ({
	        name,
	        value: {
	            type: 'string',
	            value,
	        },
	    }));
	}
	/** Converts from Bidi network headers to CDP Fetch domain header entries. */
	function cdpFetchHeadersFromBidiNetworkHeaders(headers) {
	    if (headers === undefined) {
	        return undefined;
	    }
	    return headers.map(({ name, value }) => ({
	        name,
	        value: value.value,
	    }));
	}
	function networkHeaderFromCookieHeaders(headers) {
	    if (headers === undefined) {
	        return undefined;
	    }
	    const value = headers.reduce((acc, value, index) => {
	        if (index > 0) {
	            acc += ';';
	        }
	        const cookieValue = value.value.type === 'base64'
	            ? btoa(value.value.value)
	            : value.value.value;
	        acc += `${value.name}=${cookieValue}`;
	        return acc;
	    }, '');
	    return {
	        name: 'Cookie',
	        value: {
	            type: 'string',
	            value,
	        },
	    };
	}
	/** Converts from Bidi auth action to CDP auth challenge response. */
	function cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction(action) {
	    switch (action) {
	        case 'default':
	            return 'Default';
	        case 'cancel':
	            return 'CancelAuth';
	        case 'provideCredentials':
	            return 'ProvideCredentials';
	    }
	}
	/**
	 * Converts from CDP Network domain cookie to BiDi network cookie.
	 * * https://chromedevtools.github.io/devtools-protocol/tot/Network/#type-Cookie
	 * * https://w3c.github.io/webdriver-bidi/#type-network-Cookie
	 */
	function cdpToBiDiCookie(cookie) {
	    const result = {
	        name: cookie.name,
	        value: { type: 'string', value: cookie.value },
	        domain: cookie.domain,
	        path: cookie.path,
	        size: cookie.size,
	        httpOnly: cookie.httpOnly,
	        secure: cookie.secure,
	        sameSite: cookie.sameSite === undefined
	            ? "none" /* Network.SameSite.None */
	            : sameSiteCdpToBiDi(cookie.sameSite),
	        ...(cookie.expires >= 0 ? { expiry: cookie.expires } : undefined),
	    };
	    // Extending with CDP-specific properties with `goog:` prefix.
	    result[`goog:session`] = cookie.session;
	    result[`goog:priority`] = cookie.priority;
	    result[`goog:sameParty`] = cookie.sameParty;
	    result[`goog:sourceScheme`] = cookie.sourceScheme;
	    result[`goog:sourcePort`] = cookie.sourcePort;
	    if (cookie.partitionKey !== undefined) {
	        result[`goog:partitionKey`] = cookie.partitionKey;
	    }
	    if (cookie.partitionKeyOpaque !== undefined) {
	        result[`goog:partitionKeyOpaque`] = cookie.partitionKeyOpaque;
	    }
	    return result;
	}
	/**
	 * Decodes a byte value to a string.
	 * @param {Network.BytesValue} value
	 * @return {string}
	 */
	function deserializeByteValue(value) {
	    if (value.type === 'base64') {
	        return (0, Base64_js_1.base64ToString)(value.value);
	    }
	    return value.value;
	}
	/**
	 * Converts from BiDi set network cookie params to CDP Network domain cookie.
	 * * https://w3c.github.io/webdriver-bidi/#type-network-Cookie
	 * * https://chromedevtools.github.io/devtools-protocol/tot/Network/#type-CookieParam
	 */
	function bidiToCdpCookie(params, partitionKey) {
	    const deserializedValue = deserializeByteValue(params.cookie.value);
	    const result = {
	        name: params.cookie.name,
	        value: deserializedValue,
	        domain: params.cookie.domain,
	        path: params.cookie.path ?? '/',
	        secure: params.cookie.secure ?? false,
	        httpOnly: params.cookie.httpOnly ?? false,
	        ...(partitionKey.sourceOrigin !== undefined && {
	            partitionKey: {
	                hasCrossSiteAncestor: false,
	                // CDP's `partitionKey.topLevelSite` is the BiDi's `partition.sourceOrigin`.
	                topLevelSite: partitionKey.sourceOrigin,
	            },
	        }),
	        ...(params.cookie.expiry !== undefined && {
	            expires: params.cookie.expiry,
	        }),
	        ...(params.cookie.sameSite !== undefined && {
	            sameSite: sameSiteBiDiToCdp(params.cookie.sameSite),
	        }),
	    };
	    // Extending with CDP-specific properties with `goog:` prefix.
	    if (params.cookie[`goog:url`] !== undefined) {
	        result.url = params.cookie[`goog:url`];
	    }
	    if (params.cookie[`goog:priority`] !== undefined) {
	        result.priority = params.cookie[`goog:priority`];
	    }
	    if (params.cookie[`goog:sameParty`] !== undefined) {
	        result.sameParty = params.cookie[`goog:sameParty`];
	    }
	    if (params.cookie[`goog:sourceScheme`] !== undefined) {
	        result.sourceScheme = params.cookie[`goog:sourceScheme`];
	    }
	    if (params.cookie[`goog:sourcePort`] !== undefined) {
	        result.sourcePort = params.cookie[`goog:sourcePort`];
	    }
	    return result;
	}
	function sameSiteCdpToBiDi(sameSite) {
	    switch (sameSite) {
	        case 'Strict':
	            return "strict" /* Network.SameSite.Strict */;
	        case 'None':
	            return "none" /* Network.SameSite.None */;
	        case 'Lax':
	            return "lax" /* Network.SameSite.Lax */;
	        default:
	            // Defaults to `Lax`:
	            // https://web.dev/articles/samesite-cookies-explained#samesitelax_by_default
	            return "lax" /* Network.SameSite.Lax */;
	    }
	}
	function sameSiteBiDiToCdp(sameSite) {
	    switch (sameSite) {
	        case "strict" /* Network.SameSite.Strict */:
	            return 'Strict';
	        case "lax" /* Network.SameSite.Lax */:
	            return 'Lax';
	        case "none" /* Network.SameSite.None */:
	            return 'None';
	    }
	    throw new ErrorResponse_js_1.InvalidArgumentException(`Unknown 'sameSite' value ${sameSite}`);
	}
	/**
	 * Returns true if the given protocol is special.
	 * Special protocols are those that have a default port.
	 *
	 * Example inputs: 'http', 'http:'
	 *
	 * @see https://url.spec.whatwg.org/#special-scheme
	 */
	function isSpecialScheme(protocol) {
	    return ['ftp', 'file', 'http', 'https', 'ws', 'wss'].includes(protocol.replace(/:$/, ''));
	}
	function getScheme(url) {
	    return url.protocol.replace(/:$/, '');
	}
	/** Matches the given URLPattern against the given URL. */
	function matchUrlPattern(pattern, url) {
	    // Roughly https://w3c.github.io/webdriver-bidi/#match-url-pattern
	    // plus some differences based on the URL parsing methods.
	    const parsedUrl = new URL(url);
	    if (pattern.protocol !== undefined &&
	        pattern.protocol !== getScheme(parsedUrl)) {
	        return false;
	    }
	    if (pattern.hostname !== undefined &&
	        pattern.hostname !== parsedUrl.hostname) {
	        return false;
	    }
	    if (pattern.port !== undefined && pattern.port !== parsedUrl.port) {
	        return false;
	    }
	    if (pattern.pathname !== undefined &&
	        pattern.pathname !== parsedUrl.pathname) {
	        return false;
	    }
	    if (pattern.search !== undefined && pattern.search !== parsedUrl.search) {
	        return false;
	    }
	    return true;
	}
	function bidiBodySizeFromCdpPostDataEntries(entries) {
	    let size = 0;
	    for (const entry of entries) {
	        size += atob(entry.bytes ?? '').length;
	    }
	    return size;
	}
	function getTiming(timing, offset = 0) {
	    if (!timing) {
	        return 0;
	    }
	    if (timing <= 0 || timing + offset <= 0) {
	        return 0;
	    }
	    return timing + offset;
	}
	
	return NetworkUtils;
}

var hasRequiredNetworkProcessor;

function requireNetworkProcessor () {
	if (hasRequiredNetworkProcessor) return NetworkProcessor;
	hasRequiredNetworkProcessor = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(NetworkProcessor, "__esModule", { value: true });
	NetworkProcessor.NetworkProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	const NetworkUtils_js_1 = requireNetworkUtils();
	/** Dispatches Network module commands. */
	let NetworkProcessor$1 = class NetworkProcessor {
	    #browsingContextStorage;
	    #networkStorage;
	    constructor(browsingContextStorage, networkStorage) {
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#networkStorage = networkStorage;
	    }
	    async addIntercept(params) {
	        this.#browsingContextStorage.verifyTopLevelContextsList(params.contexts);
	        const urlPatterns = params.urlPatterns ?? [];
	        const parsedUrlPatterns = NetworkProcessor.parseUrlPatterns(urlPatterns);
	        const intercept = this.#networkStorage.addIntercept({
	            urlPatterns: parsedUrlPatterns,
	            phases: params.phases,
	            contexts: params.contexts,
	        });
	        await Promise.all(this.#browsingContextStorage.getAllContexts().map((context) => {
	            return context.cdpTarget.toggleNetwork();
	        }));
	        return {
	            intercept,
	        };
	    }
	    async continueRequest(params) {
	        if (params.url !== undefined) {
	            NetworkProcessor.parseUrlString(params.url);
	        }
	        if (params.method !== undefined) {
	            if (!NetworkProcessor.isMethodValid(params.method)) {
	                throw new protocol_js_1.InvalidArgumentException(`Method '${params.method}' is invalid.`);
	            }
	        }
	        if (params.headers) {
	            NetworkProcessor.validateHeaders(params.headers);
	        }
	        const request = this.#getBlockedRequestOrFail(params.request, [
	            "beforeRequestSent" /* Network.InterceptPhase.BeforeRequestSent */,
	        ]);
	        try {
	            await request.continueRequest(params);
	        }
	        catch (error) {
	            throw NetworkProcessor.wrapInterceptionError(error);
	        }
	        return {};
	    }
	    async continueResponse(params) {
	        if (params.headers) {
	            NetworkProcessor.validateHeaders(params.headers);
	        }
	        const request = this.#getBlockedRequestOrFail(params.request, [
	            "authRequired" /* Network.InterceptPhase.AuthRequired */,
	            "responseStarted" /* Network.InterceptPhase.ResponseStarted */,
	        ]);
	        try {
	            await request.continueResponse(params);
	        }
	        catch (error) {
	            throw NetworkProcessor.wrapInterceptionError(error);
	        }
	        return {};
	    }
	    async continueWithAuth(params) {
	        const networkId = params.request;
	        const request = this.#getBlockedRequestOrFail(networkId, [
	            "authRequired" /* Network.InterceptPhase.AuthRequired */,
	        ]);
	        await request.continueWithAuth(params);
	        return {};
	    }
	    async failRequest({ request: networkId, }) {
	        const request = this.#getRequestOrFail(networkId);
	        if (request.interceptPhase === "authRequired" /* Network.InterceptPhase.AuthRequired */) {
	            throw new protocol_js_1.InvalidArgumentException(`Request '${networkId}' in 'authRequired' phase cannot be failed`);
	        }
	        if (!request.interceptPhase) {
	            throw new protocol_js_1.NoSuchRequestException(`No blocked request found for network id '${networkId}'`);
	        }
	        await request.failRequest('Failed');
	        return {};
	    }
	    async provideResponse(params) {
	        if (params.headers) {
	            NetworkProcessor.validateHeaders(params.headers);
	        }
	        const request = this.#getBlockedRequestOrFail(params.request, [
	            "beforeRequestSent" /* Network.InterceptPhase.BeforeRequestSent */,
	            "responseStarted" /* Network.InterceptPhase.ResponseStarted */,
	            "authRequired" /* Network.InterceptPhase.AuthRequired */,
	        ]);
	        try {
	            await request.provideResponse(params);
	        }
	        catch (error) {
	            throw NetworkProcessor.wrapInterceptionError(error);
	        }
	        return {};
	    }
	    async removeIntercept(params) {
	        this.#networkStorage.removeIntercept(params.intercept);
	        await Promise.all(this.#browsingContextStorage.getAllContexts().map((context) => {
	            return context.cdpTarget.toggleNetwork();
	        }));
	        return {};
	    }
	    async setCacheBehavior(params) {
	        const contexts = this.#browsingContextStorage.verifyTopLevelContextsList(params.contexts);
	        // Change all targets
	        if (contexts.size === 0) {
	            this.#networkStorage.defaultCacheBehavior = params.cacheBehavior;
	            await Promise.all(this.#browsingContextStorage.getAllContexts().map((context) => {
	                return context.cdpTarget.toggleSetCacheDisabled();
	            }));
	            return {};
	        }
	        const cacheDisabled = params.cacheBehavior === 'bypass';
	        await Promise.all([...contexts.values()].map((context) => {
	            return context.cdpTarget.toggleSetCacheDisabled(cacheDisabled);
	        }));
	        return {};
	    }
	    #getRequestOrFail(id) {
	        const request = this.#networkStorage.getRequestById(id);
	        if (!request) {
	            throw new protocol_js_1.NoSuchRequestException(`Network request with ID '${id}' doesn't exist`);
	        }
	        return request;
	    }
	    #getBlockedRequestOrFail(id, phases) {
	        const request = this.#getRequestOrFail(id);
	        if (!request.interceptPhase) {
	            throw new protocol_js_1.NoSuchRequestException(`No blocked request found for network id '${id}'`);
	        }
	        if (request.interceptPhase && !phases.includes(request.interceptPhase)) {
	            throw new protocol_js_1.InvalidArgumentException(`Blocked request for network id '${id}' is in '${request.interceptPhase}' phase`);
	        }
	        return request;
	    }
	    /**
	     * Validate https://fetch.spec.whatwg.org/#header-value
	     */
	    static validateHeaders(headers) {
	        for (const header of headers) {
	            let headerValue;
	            if (header.value.type === 'string') {
	                headerValue = header.value.value;
	            }
	            else {
	                headerValue = atob(header.value.value);
	            }
	            if (headerValue !== headerValue.trim() ||
	                headerValue.includes('\n') ||
	                headerValue.includes('\0')) {
	                throw new protocol_js_1.InvalidArgumentException(`Header value '${headerValue}' is not acceptable value`);
	            }
	        }
	    }
	    static isMethodValid(method) {
	        // https://httpwg.org/specs/rfc9110.html#method.overview
	        return /^[!#$%&'*+\-.^_`|~a-zA-Z\d]+$/.test(method);
	    }
	    /**
	     * Attempts to parse the given url.
	     * Throws an InvalidArgumentException if the url is invalid.
	     */
	    static parseUrlString(url) {
	        try {
	            return new URL(url);
	        }
	        catch (error) {
	            throw new protocol_js_1.InvalidArgumentException(`Invalid URL '${url}': ${error}`);
	        }
	    }
	    static parseUrlPatterns(urlPatterns) {
	        return urlPatterns.map((urlPattern) => {
	            let patternUrl = '';
	            let hasProtocol = true;
	            let hasHostname = true;
	            let hasPort = true;
	            let hasPathname = true;
	            let hasSearch = true;
	            switch (urlPattern.type) {
	                case 'string': {
	                    patternUrl = unescapeURLPattern(urlPattern.pattern);
	                    break;
	                }
	                case 'pattern': {
	                    if (urlPattern.protocol === undefined) {
	                        hasProtocol = false;
	                        patternUrl += 'http';
	                    }
	                    else {
	                        if (urlPattern.protocol === '') {
	                            throw new protocol_js_1.InvalidArgumentException('URL pattern must specify a protocol');
	                        }
	                        urlPattern.protocol = unescapeURLPattern(urlPattern.protocol);
	                        if (!urlPattern.protocol.match(/^[a-zA-Z+-.]+$/)) {
	                            throw new protocol_js_1.InvalidArgumentException('Forbidden characters');
	                        }
	                        patternUrl += urlPattern.protocol;
	                    }
	                    const scheme = patternUrl.toLocaleLowerCase();
	                    patternUrl += ':';
	                    if ((0, NetworkUtils_js_1.isSpecialScheme)(scheme)) {
	                        patternUrl += '//';
	                    }
	                    if (urlPattern.hostname === undefined) {
	                        if (scheme !== 'file') {
	                            patternUrl += 'placeholder';
	                        }
	                        hasHostname = false;
	                    }
	                    else {
	                        if (urlPattern.hostname === '') {
	                            throw new protocol_js_1.InvalidArgumentException('URL pattern must specify a hostname');
	                        }
	                        if (urlPattern.protocol === 'file') {
	                            throw new protocol_js_1.InvalidArgumentException(`URL pattern protocol cannot be 'file'`);
	                        }
	                        urlPattern.hostname = unescapeURLPattern(urlPattern.hostname);
	                        let insideBrackets = false;
	                        for (const c of urlPattern.hostname) {
	                            if (c === '/' || c === '?' || c === '#') {
	                                throw new protocol_js_1.InvalidArgumentException(`'/', '?', '#' are forbidden in hostname`);
	                            }
	                            if (!insideBrackets && c === ':') {
	                                throw new protocol_js_1.InvalidArgumentException(`':' is only allowed inside brackets in hostname`);
	                            }
	                            if (c === '[') {
	                                insideBrackets = true;
	                            }
	                            if (c === ']') {
	                                insideBrackets = false;
	                            }
	                        }
	                        patternUrl += urlPattern.hostname;
	                    }
	                    if (urlPattern.port === undefined) {
	                        hasPort = false;
	                    }
	                    else {
	                        if (urlPattern.port === '') {
	                            throw new protocol_js_1.InvalidArgumentException(`URL pattern must specify a port`);
	                        }
	                        urlPattern.port = unescapeURLPattern(urlPattern.port);
	                        patternUrl += ':';
	                        if (!urlPattern.port.match(/^\d+$/)) {
	                            throw new protocol_js_1.InvalidArgumentException('Forbidden characters');
	                        }
	                        patternUrl += urlPattern.port;
	                    }
	                    if (urlPattern.pathname === undefined) {
	                        hasPathname = false;
	                    }
	                    else {
	                        urlPattern.pathname = unescapeURLPattern(urlPattern.pathname);
	                        if (urlPattern.pathname[0] !== '/') {
	                            patternUrl += '/';
	                        }
	                        if (urlPattern.pathname.includes('#') ||
	                            urlPattern.pathname.includes('?')) {
	                            throw new protocol_js_1.InvalidArgumentException('Forbidden characters');
	                        }
	                        patternUrl += urlPattern.pathname;
	                    }
	                    if (urlPattern.search === undefined) {
	                        hasSearch = false;
	                    }
	                    else {
	                        urlPattern.search = unescapeURLPattern(urlPattern.search);
	                        if (urlPattern.search[0] !== '?') {
	                            patternUrl += '?';
	                        }
	                        if (urlPattern.search.includes('#')) {
	                            throw new protocol_js_1.InvalidArgumentException('Forbidden characters');
	                        }
	                        patternUrl += urlPattern.search;
	                    }
	                    break;
	                }
	            }
	            const serializePort = (url) => {
	                const defaultPorts = {
	                    'ftp:': 21,
	                    'file:': null,
	                    'http:': 80,
	                    'https:': 443,
	                    'ws:': 80,
	                    'wss:': 443,
	                };
	                if ((0, NetworkUtils_js_1.isSpecialScheme)(url.protocol) &&
	                    defaultPorts[url.protocol] !== null &&
	                    (!url.port || String(defaultPorts[url.protocol]) === url.port)) {
	                    return '';
	                }
	                else if (url.port) {
	                    return url.port;
	                }
	                return undefined;
	            };
	            try {
	                const url = new URL(patternUrl);
	                return {
	                    protocol: hasProtocol ? url.protocol.replace(/:$/, '') : undefined,
	                    hostname: hasHostname ? url.hostname : undefined,
	                    port: hasPort ? serializePort(url) : undefined,
	                    pathname: hasPathname && url.pathname ? url.pathname : undefined,
	                    search: hasSearch ? url.search : undefined,
	                };
	            }
	            catch (err) {
	                throw new protocol_js_1.InvalidArgumentException(`${err.message} '${patternUrl}'`);
	            }
	        });
	    }
	    static wrapInterceptionError(error) {
	        // https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/protocol/fetch_handler.cc;l=169
	        if (error?.message.includes('Invalid header')) {
	            return new protocol_js_1.InvalidArgumentException('Invalid header');
	        }
	        return error;
	    }
	};
	NetworkProcessor.NetworkProcessor = NetworkProcessor$1;
	/**
	 * See https://w3c.github.io/webdriver-bidi/#unescape-url-pattern
	 */
	function unescapeURLPattern(pattern) {
	    const forbidden = new Set(['(', ')', '*', '{', '}']);
	    let result = '';
	    let isEscaped = false;
	    for (const c of pattern) {
	        if (!isEscaped) {
	            if (forbidden.has(c)) {
	                throw new protocol_js_1.InvalidArgumentException('Forbidden characters');
	            }
	            if (c === '\\') {
	                isEscaped = true;
	                continue;
	            }
	        }
	        result += c;
	        isEscaped = false;
	    }
	    return result;
	}
	
	return NetworkProcessor;
}

var PermissionsProcessor = {};

var hasRequiredPermissionsProcessor;

function requirePermissionsProcessor () {
	if (hasRequiredPermissionsProcessor) return PermissionsProcessor;
	hasRequiredPermissionsProcessor = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(PermissionsProcessor, "__esModule", { value: true });
	PermissionsProcessor.PermissionsProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	let PermissionsProcessor$1 = class PermissionsProcessor {
	    #browserCdpClient;
	    constructor(browserCdpClient) {
	        this.#browserCdpClient = browserCdpClient;
	    }
	    async setPermissions(params) {
	        try {
	            const userContextId = params['goog:userContext'] ||
	                params.userContext;
	            await this.#browserCdpClient.sendCommand('Browser.setPermission', {
	                origin: params.origin,
	                browserContextId: userContextId && userContextId !== 'default'
	                    ? userContextId
	                    : undefined,
	                permission: {
	                    name: params.descriptor.name,
	                },
	                setting: params.state,
	            });
	        }
	        catch (err) {
	            if (err.message ===
	                `Permission can't be granted to opaque origins.`) {
	                // Return success if the origin is not valid (does not match any
	                // existing origins).
	                return {};
	            }
	            throw new protocol_js_1.InvalidArgumentException(err.message);
	        }
	        return {};
	    }
	};
	PermissionsProcessor.PermissionsProcessor = PermissionsProcessor$1;
	
	return PermissionsProcessor;
}

var ScriptProcessor = {};

var PreloadScript = {};

var uuid = {};

var hasRequiredUuid;

function requireUuid () {
	if (hasRequiredUuid) return uuid;
	hasRequiredUuid = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(uuid, "__esModule", { value: true });
	uuid.uuidv4 = uuidv4;
	function bytesToHex(bytes) {
	    return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');
	}
	/**
	 * Generates a random v4 UUID, as specified in RFC4122.
	 *
	 * Uses the native Web Crypto API if available, otherwise falls back to a
	 * polyfill.
	 *
	 * Example: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
	 */
	function uuidv4() {
	    // Available only in secure contexts
	    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API
	    if ('crypto' in globalThis && 'randomUUID' in globalThis.crypto) {
	        // Node with
	        // https://nodejs.org/dist/latest-v20.x/docs/api/globals.html#crypto_1 or
	        // secure browser context.
	        return globalThis.crypto.randomUUID();
	    }
	    const randomValues = new Uint8Array(16);
	    if ('crypto' in globalThis && 'getRandomValues' in globalThis.crypto) {
	        // Node (>=18) with
	        // https://nodejs.org/dist/latest-v20.x/docs/api/globals.html#crypto_1 or
	        // browser.
	        globalThis.crypto.getRandomValues(randomValues);
	    }
	    else {
	        // Node (<=16) without
	        // https://nodejs.org/dist/latest-v20.x/docs/api/globals.html#crypto_1.
	        // eslint-disable-next-line @typescript-eslint/no-require-imports
	        require$$5.webcrypto.getRandomValues(randomValues);
	    }
	    // Set version (4) and variant (RFC4122) bits.
	    randomValues[6] = (randomValues[6] & 0x0f) | 0x40;
	    randomValues[8] = (randomValues[8] & 0x3f) | 0x80;
	    return [
	        bytesToHex(randomValues.subarray(0, 4)),
	        bytesToHex(randomValues.subarray(4, 6)),
	        bytesToHex(randomValues.subarray(6, 8)),
	        bytesToHex(randomValues.subarray(8, 10)),
	        bytesToHex(randomValues.subarray(10, 16)),
	    ].join('-');
	}
	
	return uuid;
}

var ChannelProxy = {};

var hasRequiredChannelProxy;

function requireChannelProxy () {
	if (hasRequiredChannelProxy) return ChannelProxy;
	hasRequiredChannelProxy = 1;
	/*
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(ChannelProxy, "__esModule", { value: true });
	ChannelProxy.ChannelProxy = void 0;
	const protocol_js_1 = requireProtocol();
	const log_js_1 = requireLog();
	const uuid_js_1 = requireUuid();
	/**
	 * Used to send messages from realm to BiDi user.
	 */
	let ChannelProxy$1 = class ChannelProxy {
	    #properties;
	    #id = (0, uuid_js_1.uuidv4)();
	    #logger;
	    constructor(channel, logger) {
	        this.#properties = channel;
	        this.#logger = logger;
	    }
	    /**
	     * Creates a channel proxy in the given realm, initialises listener and
	     * returns a handle to `sendMessage` delegate.
	     */
	    async init(realm, eventManager) {
	        const channelHandle = await ChannelProxy.#createAndGetHandleInRealm(realm);
	        const sendMessageHandle = await ChannelProxy.#createSendMessageHandle(realm, channelHandle);
	        void this.#startListener(realm, channelHandle, eventManager);
	        return sendMessageHandle;
	    }
	    /** Gets a ChannelProxy from window and returns its handle. */
	    async startListenerFromWindow(realm, eventManager) {
	        try {
	            const channelHandle = await this.#getHandleFromWindow(realm);
	            void this.#startListener(realm, channelHandle, eventManager);
	        }
	        catch (error) {
	            this.#logger?.(log_js_1.LogType.debugError, error);
	        }
	    }
	    /**
	     * Evaluation string which creates a ChannelProxy object on the client side.
	     */
	    static #createChannelProxyEvalStr() {
	        const functionStr = String(() => {
	            const queue = [];
	            let queueNonEmptyResolver = null;
	            return {
	                /**
	                 * Gets a promise, which is resolved as soon as a message occurs
	                 * in the queue.
	                 */
	                async getMessage() {
	                    const onMessage = queue.length > 0
	                        ? Promise.resolve()
	                        : new Promise((resolve) => {
	                            queueNonEmptyResolver = resolve;
	                        });
	                    await onMessage;
	                    return queue.shift();
	                },
	                /**
	                 * Adds a message to the queue.
	                 * Resolves the pending promise if needed.
	                 */
	                sendMessage(message) {
	                    queue.push(message);
	                    if (queueNonEmptyResolver !== null) {
	                        queueNonEmptyResolver();
	                        queueNonEmptyResolver = null;
	                    }
	                },
	            };
	        });
	        return `(${functionStr})()`;
	    }
	    /** Creates a ChannelProxy in the given realm. */
	    static async #createAndGetHandleInRealm(realm) {
	        const createChannelHandleResult = await realm.cdpClient.sendCommand('Runtime.evaluate', {
	            expression: this.#createChannelProxyEvalStr(),
	            contextId: realm.executionContextId,
	            serializationOptions: {
	                serialization: "idOnly" /* Protocol.Runtime.SerializationOptionsSerialization.IdOnly */,
	            },
	        });
	        if (createChannelHandleResult.exceptionDetails ||
	            createChannelHandleResult.result.objectId === undefined) {
	            throw new Error(`Cannot create channel`);
	        }
	        return createChannelHandleResult.result.objectId;
	    }
	    /** Gets a handle to `sendMessage` delegate from the ChannelProxy handle. */
	    static async #createSendMessageHandle(realm, channelHandle) {
	        const sendMessageArgResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {
	            functionDeclaration: String((channelHandle) => {
	                return channelHandle.sendMessage;
	            }),
	            arguments: [{ objectId: channelHandle }],
	            executionContextId: realm.executionContextId,
	            serializationOptions: {
	                serialization: "idOnly" /* Protocol.Runtime.SerializationOptionsSerialization.IdOnly */,
	            },
	        });
	        // TODO: check for exceptionDetails.
	        return sendMessageArgResult.result.objectId;
	    }
	    /** Starts listening for the channel events of the provided ChannelProxy. */
	    async #startListener(realm, channelHandle, eventManager) {
	        // noinspection InfiniteLoopJS
	        for (;;) {
	            try {
	                const message = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {
	                    functionDeclaration: String(async (channelHandle) => await channelHandle.getMessage()),
	                    arguments: [
	                        {
	                            objectId: channelHandle,
	                        },
	                    ],
	                    awaitPromise: true,
	                    executionContextId: realm.executionContextId,
	                    serializationOptions: {
	                        serialization: "deep" /* Protocol.Runtime.SerializationOptionsSerialization.Deep */,
	                        maxDepth: this.#properties.serializationOptions?.maxObjectDepth ??
	                            undefined,
	                    },
	                });
	                if (message.exceptionDetails) {
	                    throw new Error('Runtime.callFunctionOn in ChannelProxy', {
	                        cause: message.exceptionDetails,
	                    });
	                }
	                for (const browsingContext of realm.associatedBrowsingContexts) {
	                    eventManager.registerEvent({
	                        type: 'event',
	                        method: protocol_js_1.ChromiumBidi.Script.EventNames.Message,
	                        params: {
	                            channel: this.#properties.channel,
	                            data: realm.cdpToBidiValue(message, this.#properties.ownership ?? "none" /* Script.ResultOwnership.None */),
	                            source: realm.source,
	                        },
	                    }, browsingContext.id);
	                }
	            }
	            catch (error) {
	                // If an error is thrown, then the channel is permanently broken, so we
	                // exit the loop.
	                this.#logger?.(log_js_1.LogType.debugError, error);
	                break;
	            }
	        }
	    }
	    /**
	     * Returns a handle of ChannelProxy from window's property which was set there
	     * by `getEvalInWindowStr`. If window property is not set yet, sets a promise
	     * resolver to the window property, so that `getEvalInWindowStr` can resolve
	     * the promise later on with the channel.
	     * This is needed because `getEvalInWindowStr` can be called before or
	     * after this method.
	     */
	    async #getHandleFromWindow(realm) {
	        const channelHandleResult = await realm.cdpClient.sendCommand('Runtime.callFunctionOn', {
	            functionDeclaration: String((id) => {
	                const w = window;
	                if (w[id] === undefined) {
	                    // The channelProxy is not created yet. Create a promise, put the
	                    // resolver to window property and return the promise.
	                    // `getEvalInWindowStr` will resolve the promise later.
	                    return new Promise((resolve) => (w[id] = resolve));
	                }
	                // The channelProxy is already created by `getEvalInWindowStr` and
	                // is set into window property. Return it.
	                const channelProxy = w[id];
	                delete w[id];
	                return channelProxy;
	            }),
	            arguments: [{ value: this.#id }],
	            executionContextId: realm.executionContextId,
	            awaitPromise: true,
	            serializationOptions: {
	                serialization: "idOnly" /* Protocol.Runtime.SerializationOptionsSerialization.IdOnly */,
	            },
	        });
	        if (channelHandleResult.exceptionDetails !== undefined ||
	            channelHandleResult.result.objectId === undefined) {
	            throw new Error(`ChannelHandle not found in window["${this.#id}"]`);
	        }
	        return channelHandleResult.result.objectId;
	    }
	    /**
	     * String to be evaluated to create a ProxyChannel and put it to window.
	     * Returns the delegate `sendMessage`. Used to provide an argument for preload
	     * script. Does the following:
	     * 1. Creates a ChannelProxy.
	     * 2. Puts the ChannelProxy to window['${this.#id}'] or resolves the promise
	     *    by calling delegate stored in window['${this.#id}'].
	     *    This is needed because `#getHandleFromWindow` can be called before or
	     *    after this method.
	     * 3. Returns the delegate `sendMessage` of the created ChannelProxy.
	     */
	    getEvalInWindowStr() {
	        const delegate = String((id, channelProxy) => {
	            const w = window;
	            if (w[id] === undefined) {
	                // `#getHandleFromWindow` is not initialized yet, and will get the
	                // channelProxy later.
	                w[id] = channelProxy;
	            }
	            else {
	                // `#getHandleFromWindow` is already set a delegate to window property
	                // and is waiting for it to be called with the channelProxy.
	                w[id](channelProxy);
	                delete w[id];
	            }
	            return channelProxy.sendMessage;
	        });
	        const channelProxyEval = ChannelProxy.#createChannelProxyEvalStr();
	        return `(${delegate})('${this.#id}',${channelProxyEval})`;
	    }
	};
	ChannelProxy.ChannelProxy = ChannelProxy$1;
	
	return ChannelProxy;
}

var hasRequiredPreloadScript;

function requirePreloadScript () {
	if (hasRequiredPreloadScript) return PreloadScript;
	hasRequiredPreloadScript = 1;
	/*
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	Object.defineProperty(PreloadScript, "__esModule", { value: true });
	PreloadScript.PreloadScript = void 0;
	const uuid_js_1 = requireUuid();
	const ChannelProxy_js_1 = requireChannelProxy();
	/**
	 * BiDi IDs are generated by the server and are unique within contexts.
	 *
	 * CDP preload script IDs are generated by the client and are unique
	 * within sessions.
	 *
	 * The mapping between BiDi and CDP preload script IDs is 1:many.
	 * BiDi IDs are needed by the mapper to keep track of potential multiple CDP IDs
	 * in the client.
	 */
	let PreloadScript$1 = class PreloadScript {
	    /** BiDi ID, an automatically generated UUID. */
	    #id = (0, uuid_js_1.uuidv4)();
	    /** CDP preload scripts. */
	    #cdpPreloadScripts = [];
	    /** The script itself, in a format expected by the spec i.e. a function. */
	    #functionDeclaration;
	    /** Targets, in which the preload script is initialized. */
	    #targetIds = new Set();
	    /** Channels to be added as arguments to functionDeclaration. */
	    #channels;
	    /** The script sandbox / world name. */
	    #sandbox;
	    /** The browsing contexts to execute the preload scripts in, if any. */
	    #contexts;
	    get id() {
	        return this.#id;
	    }
	    get targetIds() {
	        return this.#targetIds;
	    }
	    constructor(params, logger) {
	        this.#channels =
	            params.arguments?.map((a) => new ChannelProxy_js_1.ChannelProxy(a.value, logger)) ?? [];
	        this.#functionDeclaration = params.functionDeclaration;
	        this.#sandbox = params.sandbox;
	        this.#contexts = params.contexts;
	    }
	    /** Channels of the preload script. */
	    get channels() {
	        return this.#channels;
	    }
	    /** Contexts of the preload script, if any */
	    get contexts() {
	        return this.#contexts;
	    }
	    /**
	     * String to be evaluated. Wraps user-provided function so that the following
	     * steps are run:
	     * 1. Create channels.
	     * 2. Store the created channels in window.
	     * 3. Call the user-provided function with channels as arguments.
	     */
	    #getEvaluateString() {
	        const channelsArgStr = `[${this.channels
	            .map((c) => c.getEvalInWindowStr())
	            .join(', ')}]`;
	        return `(()=>{(${this.#functionDeclaration})(...${channelsArgStr})})()`;
	    }
	    /**
	     * Adds the script to the given CDP targets by calling the
	     * `Page.addScriptToEvaluateOnNewDocument` command.
	     */
	    async initInTargets(cdpTargets, runImmediately) {
	        await Promise.all(Array.from(cdpTargets).map((cdpTarget) => this.initInTarget(cdpTarget, runImmediately)));
	    }
	    /**
	     * Adds the script to the given CDP target by calling the
	     * `Page.addScriptToEvaluateOnNewDocument` command.
	     */
	    async initInTarget(cdpTarget, runImmediately) {
	        const addCdpPreloadScriptResult = await cdpTarget.cdpClient.sendCommand('Page.addScriptToEvaluateOnNewDocument', {
	            source: this.#getEvaluateString(),
	            worldName: this.#sandbox,
	            runImmediately,
	        });
	        this.#cdpPreloadScripts.push({
	            target: cdpTarget,
	            preloadScriptId: addCdpPreloadScriptResult.identifier,
	        });
	        this.#targetIds.add(cdpTarget.id);
	    }
	    /**
	     * Removes this script from all CDP targets.
	     */
	    async remove() {
	        await Promise.all([
	            this.#cdpPreloadScripts.map(async (cdpPreloadScript) => {
	                const cdpTarget = cdpPreloadScript.target;
	                const cdpPreloadScriptId = cdpPreloadScript.preloadScriptId;
	                return await cdpTarget.cdpClient.sendCommand('Page.removeScriptToEvaluateOnNewDocument', {
	                    identifier: cdpPreloadScriptId,
	                });
	            }),
	        ]);
	    }
	    /** Removes the provided cdp target from the list of cdp preload scripts. */
	    dispose(cdpTargetId) {
	        this.#cdpPreloadScripts = this.#cdpPreloadScripts.filter((cdpPreloadScript) => cdpPreloadScript.target?.id !== cdpTargetId);
	        this.#targetIds.delete(cdpTargetId);
	    }
	};
	PreloadScript.PreloadScript = PreloadScript$1;
	
	return PreloadScript;
}

var hasRequiredScriptProcessor;

function requireScriptProcessor () {
	if (hasRequiredScriptProcessor) return ScriptProcessor;
	hasRequiredScriptProcessor = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(ScriptProcessor, "__esModule", { value: true });
	ScriptProcessor.ScriptProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	const PreloadScript_js_1 = requirePreloadScript();
	let ScriptProcessor$1 = class ScriptProcessor {
	    #eventManager;
	    #browsingContextStorage;
	    #realmStorage;
	    #preloadScriptStorage;
	    #logger;
	    constructor(eventManager, browsingContextStorage, realmStorage, preloadScriptStorage, logger) {
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#realmStorage = realmStorage;
	        this.#preloadScriptStorage = preloadScriptStorage;
	        this.#logger = logger;
	        this.#eventManager = eventManager;
	        this.#eventManager.addSubscribeHook(protocol_js_1.ChromiumBidi.Script.EventNames.RealmCreated, this.#onRealmCreatedSubscribeHook.bind(this));
	    }
	    #onRealmCreatedSubscribeHook(contextId) {
	        const context = this.#browsingContextStorage.getContext(contextId);
	        const contextsToReport = [
	            context,
	            ...this.#browsingContextStorage.getContext(contextId).allChildren,
	        ];
	        const realms = new Set();
	        for (const reportContext of contextsToReport) {
	            const realmsForContext = this.#realmStorage.findRealms({
	                browsingContextId: reportContext.id,
	            });
	            for (const realm of realmsForContext) {
	                realms.add(realm);
	            }
	        }
	        for (const realm of realms) {
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmCreated,
	                params: realm.realmInfo,
	            }, context.id);
	        }
	        return Promise.resolve();
	    }
	    async addPreloadScript(params) {
	        const contexts = this.#browsingContextStorage.verifyTopLevelContextsList(params.contexts);
	        const preloadScript = new PreloadScript_js_1.PreloadScript(params, this.#logger);
	        this.#preloadScriptStorage.add(preloadScript);
	        const cdpTargets = contexts.size === 0
	            ? new Set(this.#browsingContextStorage
	                .getTopLevelContexts()
	                .map((context) => context.cdpTarget))
	            : new Set([...contexts.values()].map((context) => context.cdpTarget));
	        await preloadScript.initInTargets(cdpTargets, false);
	        return {
	            script: preloadScript.id,
	        };
	    }
	    async removePreloadScript(params) {
	        const { script: id } = params;
	        const scripts = this.#preloadScriptStorage.find({ id });
	        if (scripts.length === 0) {
	            throw new protocol_js_1.NoSuchScriptException(`No preload script with id '${id}'`);
	        }
	        await Promise.all(scripts.map((script) => script.remove()));
	        this.#preloadScriptStorage.remove({ id });
	        return {};
	    }
	    async callFunction(params) {
	        const realm = await this.#getRealm(params.target);
	        return await realm.callFunction(params.functionDeclaration, params.awaitPromise, params.this, params.arguments, params.resultOwnership, params.serializationOptions, params.userActivation);
	    }
	    async evaluate(params) {
	        const realm = await this.#getRealm(params.target);
	        return await realm.evaluate(params.expression, params.awaitPromise, params.resultOwnership, params.serializationOptions, params.userActivation);
	    }
	    async disown(params) {
	        const realm = await this.#getRealm(params.target);
	        await Promise.all(params.handles.map(async (handle) => await realm.disown(handle)));
	        return {};
	    }
	    getRealms(params) {
	        if (params.context !== undefined) {
	            // Make sure the context is known.
	            this.#browsingContextStorage.getContext(params.context);
	        }
	        const realms = this.#realmStorage
	            .findRealms({
	            browsingContextId: params.context,
	            type: params.type,
	        })
	            .map((realm) => realm.realmInfo);
	        return { realms };
	    }
	    async #getRealm(target) {
	        if ('context' in target) {
	            const context = this.#browsingContextStorage.getContext(target.context);
	            return await context.getOrCreateSandbox(target.sandbox);
	        }
	        return this.#realmStorage.getRealm({
	            realmId: target.realm,
	        });
	    }
	};
	ScriptProcessor.ScriptProcessor = ScriptProcessor$1;
	
	return ScriptProcessor;
}

var SessionProcessor = {};

var hasRequiredSessionProcessor;

function requireSessionProcessor () {
	if (hasRequiredSessionProcessor) return SessionProcessor;
	hasRequiredSessionProcessor = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(SessionProcessor, "__esModule", { value: true });
	SessionProcessor.SessionProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	let SessionProcessor$1 = class SessionProcessor {
	    #eventManager;
	    #browserCdpClient;
	    #initConnection;
	    #created = false;
	    constructor(eventManager, browserCdpClient, initConnection) {
	        this.#eventManager = eventManager;
	        this.#browserCdpClient = browserCdpClient;
	        this.#initConnection = initConnection;
	    }
	    status() {
	        return { ready: false, message: 'already connected' };
	    }
	    #mergeCapabilities(capabilitiesRequest) {
	        // Roughly following https://www.w3.org/TR/webdriver2/#dfn-capabilities-processing.
	        // Validations should already be done by the parser.
	        const mergedCapabilities = [];
	        for (const first of capabilitiesRequest.firstMatch ?? [{}]) {
	            const result = {
	                ...capabilitiesRequest.alwaysMatch,
	            };
	            for (const key of Object.keys(first)) {
	                if (result[key] !== undefined) {
	                    throw new protocol_js_1.InvalidArgumentException(`Capability ${key} in firstMatch is already defined in alwaysMatch`);
	                }
	                result[key] = first[key];
	            }
	            mergedCapabilities.push(result);
	        }
	        const match = mergedCapabilities.find((c) => c.browserName === 'chrome') ??
	            mergedCapabilities[0] ??
	            {};
	        match.unhandledPromptBehavior = this.#getUnhandledPromptBehavior(match.unhandledPromptBehavior);
	        return match;
	    }
	    #getUnhandledPromptBehavior(capabilityValue) {
	        if (capabilityValue === undefined) {
	            return undefined;
	        }
	        if (typeof capabilityValue === 'object') {
	            // Do not validate capabilities. Incorrect ones will be ignored by Mapper.
	            return capabilityValue;
	        }
	        if (typeof capabilityValue !== 'string') {
	            throw new protocol_js_1.InvalidArgumentException(`Unexpected 'unhandledPromptBehavior' type: ${typeof capabilityValue}`);
	        }
	        switch (capabilityValue) {
	            case 'accept':
	            case 'accept and notify':
	                return { default: "accept" /* Session.UserPromptHandlerType.Accept */ };
	            case 'dismiss':
	            case 'dismiss and notify':
	                return { default: "dismiss" /* Session.UserPromptHandlerType.Dismiss */ };
	            case 'ignore':
	                return { default: "ignore" /* Session.UserPromptHandlerType.Ignore */ };
	            default:
	                throw new protocol_js_1.InvalidArgumentException(`Unexpected 'unhandledPromptBehavior' value: ${capabilityValue}`);
	        }
	    }
	    async new(params) {
	        if (this.#created) {
	            throw new Error('Session has been already created.');
	        }
	        this.#created = true;
	        const matchedCapabitlites = this.#mergeCapabilities(params.capabilities);
	        await this.#initConnection(matchedCapabitlites);
	        const version = await this.#browserCdpClient.sendCommand('Browser.getVersion');
	        return {
	            sessionId: 'unknown',
	            capabilities: {
	                ...matchedCapabitlites,
	                acceptInsecureCerts: matchedCapabitlites.acceptInsecureCerts ?? false,
	                browserName: version.product,
	                browserVersion: version.revision,
	                platformName: '',
	                setWindowRect: false,
	                webSocketUrl: '',
	                userAgent: version.userAgent,
	            },
	        };
	    }
	    async subscribe(params, channel = null) {
	        await this.#eventManager.subscribe(params.events, params.contexts ?? [null], channel);
	        return {};
	    }
	    async unsubscribe(params, channel = null) {
	        await this.#eventManager.unsubscribe(params.events, params.contexts ?? [null], channel);
	        return {};
	    }
	};
	SessionProcessor.SessionProcessor = SessionProcessor$1;
	
	return SessionProcessor;
}

var StorageProcessor = {};

var hasRequiredStorageProcessor;

function requireStorageProcessor () {
	if (hasRequiredStorageProcessor) return StorageProcessor;
	hasRequiredStorageProcessor = 1;
	Object.defineProperty(StorageProcessor, "__esModule", { value: true });
	StorageProcessor.StorageProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	const assert_js_1 = requireAssert();
	const log_js_1 = requireLog();
	const NetworkProcessor_js_1 = requireNetworkProcessor();
	const NetworkUtils_js_1 = requireNetworkUtils();
	/**
	 * Responsible for handling the `storage` module.
	 */
	let StorageProcessor$1 = class StorageProcessor {
	    #browserCdpClient;
	    #browsingContextStorage;
	    #logger;
	    constructor(browserCdpClient, browsingContextStorage, logger) {
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#browserCdpClient = browserCdpClient;
	        this.#logger = logger;
	    }
	    async deleteCookies(params) {
	        const partitionKey = this.#expandStoragePartitionSpec(params.partition);
	        let cdpResponse;
	        try {
	            cdpResponse = await this.#browserCdpClient.sendCommand('Storage.getCookies', {
	                browserContextId: this.#getCdpBrowserContextId(partitionKey),
	            });
	        }
	        catch (err) {
	            if (this.#isNoSuchUserContextError(err)) {
	                // If the user context is not found, special error is thrown.
	                throw new protocol_js_1.NoSuchUserContextException(err.message);
	            }
	            throw err;
	        }
	        const cdpCookiesToDelete = cdpResponse.cookies
	            .filter(
	        // CDP's partition key is the source origin. If the request specifies the
	        // `sourceOrigin` partition key, only cookies with the requested source origin
	        // are returned.
	        (c) => partitionKey.sourceOrigin === undefined ||
	            c.partitionKey?.topLevelSite === partitionKey.sourceOrigin)
	            .filter((cdpCookie) => {
	            const bidiCookie = (0, NetworkUtils_js_1.cdpToBiDiCookie)(cdpCookie);
	            return this.#matchCookie(bidiCookie, params.filter);
	        })
	            .map((cookie) => ({
	            ...cookie,
	            // Set expiry to pass date to delete the cookie.
	            expires: 1,
	        }));
	        await this.#browserCdpClient.sendCommand('Storage.setCookies', {
	            cookies: cdpCookiesToDelete,
	            browserContextId: this.#getCdpBrowserContextId(partitionKey),
	        });
	        return {
	            partitionKey,
	        };
	    }
	    async getCookies(params) {
	        const partitionKey = this.#expandStoragePartitionSpec(params.partition);
	        let cdpResponse;
	        try {
	            cdpResponse = await this.#browserCdpClient.sendCommand('Storage.getCookies', {
	                browserContextId: this.#getCdpBrowserContextId(partitionKey),
	            });
	        }
	        catch (err) {
	            if (this.#isNoSuchUserContextError(err)) {
	                // If the user context is not found, special error is thrown.
	                throw new protocol_js_1.NoSuchUserContextException(err.message);
	            }
	            throw err;
	        }
	        const filteredBiDiCookies = cdpResponse.cookies
	            .filter(
	        // CDP's partition key is the source origin. If the request specifies the
	        // `sourceOrigin` partition key, only cookies with the requested source origin
	        // are returned.
	        (c) => partitionKey.sourceOrigin === undefined ||
	            c.partitionKey?.topLevelSite === partitionKey.sourceOrigin)
	            .map((c) => (0, NetworkUtils_js_1.cdpToBiDiCookie)(c))
	            .filter((c) => this.#matchCookie(c, params.filter));
	        return {
	            cookies: filteredBiDiCookies,
	            partitionKey,
	        };
	    }
	    async setCookie(params) {
	        const partitionKey = this.#expandStoragePartitionSpec(params.partition);
	        const cdpCookie = (0, NetworkUtils_js_1.bidiToCdpCookie)(params, partitionKey);
	        try {
	            await this.#browserCdpClient.sendCommand('Storage.setCookies', {
	                cookies: [cdpCookie],
	                browserContextId: this.#getCdpBrowserContextId(partitionKey),
	            });
	        }
	        catch (err) {
	            if (this.#isNoSuchUserContextError(err)) {
	                // If the user context is not found, special error is thrown.
	                throw new protocol_js_1.NoSuchUserContextException(err.message);
	            }
	            this.#logger?.(log_js_1.LogType.debugError, err);
	            throw new protocol_js_1.UnableToSetCookieException(err.toString());
	        }
	        return {
	            partitionKey,
	        };
	    }
	    #isNoSuchUserContextError(err) {
	        // Heuristic to detect if the user context is not found.
	        // See https://source.chromium.org/chromium/chromium/src/+/main:content/browser/devtools/protocol/browser_handler.cc;drc=a56154dd81e4679712422ac6eed2c9581cb51ab0;l=314
	        return err.message?.startsWith('Failed to find browser context for id');
	    }
	    #getCdpBrowserContextId(partitionKey) {
	        return partitionKey.userContext === 'default'
	            ? undefined
	            : partitionKey.userContext;
	    }
	    #expandStoragePartitionSpecByBrowsingContext(descriptor) {
	        const browsingContextId = descriptor.context;
	        const browsingContext = this.#browsingContextStorage.getContext(browsingContextId);
	        // https://w3c.github.io/webdriver-bidi/#associated-storage-partition.
	        // Each browsing context also has an associated storage partition, which is the
	        // storage partition it uses to persist data. In Chromium it's a `BrowserContext`
	        // which maps to BiDi `UserContext`.
	        return {
	            userContext: browsingContext.userContext,
	        };
	    }
	    #expandStoragePartitionSpecByStorageKey(descriptor) {
	        const unsupportedPartitionKeys = new Map();
	        let sourceOrigin = descriptor.sourceOrigin;
	        if (sourceOrigin !== undefined) {
	            const url = NetworkProcessor_js_1.NetworkProcessor.parseUrlString(sourceOrigin);
	            if (url.origin === 'null') {
	                // Origin `null` is a special case for local pages.
	                sourceOrigin = url.origin;
	            }
	            else {
	                // Port is not supported in CDP Cookie's `partitionKey`, so it should be stripped
	                // from the requested source origin.
	                sourceOrigin = `${url.protocol}//${url.hostname}`;
	            }
	        }
	        for (const [key, value] of Object.entries(descriptor)) {
	            if (key !== undefined &&
	                value !== undefined &&
	                !['type', 'sourceOrigin', 'userContext'].includes(key)) {
	                unsupportedPartitionKeys.set(key, value);
	            }
	        }
	        if (unsupportedPartitionKeys.size > 0) {
	            this.#logger?.(log_js_1.LogType.debugInfo, `Unsupported partition keys: ${JSON.stringify(Object.fromEntries(unsupportedPartitionKeys))}`);
	        }
	        // Set `userContext` to `default` if not provided, as it's required in Chromium.
	        const userContext = descriptor.userContext ?? 'default';
	        return {
	            userContext,
	            ...(sourceOrigin === undefined ? {} : { sourceOrigin }),
	        };
	    }
	    #expandStoragePartitionSpec(partitionSpec) {
	        if (partitionSpec === undefined) {
	            // `userContext` is required in Chromium.
	            return { userContext: 'default' };
	        }
	        if (partitionSpec.type === 'context') {
	            return this.#expandStoragePartitionSpecByBrowsingContext(partitionSpec);
	        }
	        (0, assert_js_1.assert)(partitionSpec.type === 'storageKey', 'Unknown partition type');
	        // Partition spec is a storage partition.
	        // Let partition key be partition spec.
	        return this.#expandStoragePartitionSpecByStorageKey(partitionSpec);
	    }
	    #matchCookie(cookie, filter) {
	        if (filter === undefined) {
	            return true;
	        }
	        return ((filter.domain === undefined || filter.domain === cookie.domain) &&
	            (filter.name === undefined || filter.name === cookie.name) &&
	            // `value` contains fields `type` and `value`.
	            (filter.value === undefined ||
	                (0, NetworkUtils_js_1.deserializeByteValue)(filter.value) ===
	                    (0, NetworkUtils_js_1.deserializeByteValue)(cookie.value)) &&
	            (filter.path === undefined || filter.path === cookie.path) &&
	            (filter.size === undefined || filter.size === cookie.size) &&
	            (filter.httpOnly === undefined || filter.httpOnly === cookie.httpOnly) &&
	            (filter.secure === undefined || filter.secure === cookie.secure) &&
	            (filter.sameSite === undefined || filter.sameSite === cookie.sameSite) &&
	            (filter.expiry === undefined || filter.expiry === cookie.expiry));
	    }
	};
	StorageProcessor.StorageProcessor = StorageProcessor$1;
	
	return StorageProcessor;
}

var OutgoingMessage = {};

var hasRequiredOutgoingMessage;

function requireOutgoingMessage () {
	if (hasRequiredOutgoingMessage) return OutgoingMessage;
	hasRequiredOutgoingMessage = 1;
	/**
	 * Copyright 2021 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(OutgoingMessage, "__esModule", { value: true });
	OutgoingMessage.OutgoingMessage = void 0;
	let OutgoingMessage$1 = class OutgoingMessage {
	    #message;
	    #channel;
	    constructor(message, channel = null) {
	        this.#message = message;
	        this.#channel = channel;
	    }
	    static createFromPromise(messagePromise, channel) {
	        return messagePromise.then((message) => {
	            if (message.kind === 'success') {
	                return {
	                    kind: 'success',
	                    value: new OutgoingMessage(message.value, channel),
	                };
	            }
	            return message;
	        });
	    }
	    static createResolved(message, channel) {
	        return Promise.resolve({
	            kind: 'success',
	            value: new OutgoingMessage(message, channel),
	        });
	    }
	    get message() {
	        return this.#message;
	    }
	    get channel() {
	        return this.#channel;
	    }
	};
	OutgoingMessage.OutgoingMessage = OutgoingMessage$1;
	
	return OutgoingMessage;
}

var hasRequiredCommandProcessor;

function requireCommandProcessor () {
	if (hasRequiredCommandProcessor) return CommandProcessor;
	hasRequiredCommandProcessor = 1;
	/**
	 * Copyright 2021 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(CommandProcessor, "__esModule", { value: true });
	CommandProcessor.CommandProcessor = void 0;
	const protocol_js_1 = requireProtocol();
	const EventEmitter_js_1 = requireEventEmitter$1();
	const log_js_1 = requireLog();
	const BidiNoOpParser_js_1 = requireBidiNoOpParser();
	const BrowserProcessor_js_1 = requireBrowserProcessor();
	const CdpProcessor_js_1 = requireCdpProcessor();
	const BrowsingContextProcessor_js_1 = requireBrowsingContextProcessor();
	const InputProcessor_js_1 = requireInputProcessor();
	const NetworkProcessor_js_1 = requireNetworkProcessor();
	const PermissionsProcessor_js_1 = requirePermissionsProcessor();
	const ScriptProcessor_js_1 = requireScriptProcessor();
	const SessionProcessor_js_1 = requireSessionProcessor();
	const StorageProcessor_js_1 = requireStorageProcessor();
	const OutgoingMessage_js_1 = requireOutgoingMessage();
	let CommandProcessor$1 = class CommandProcessor extends EventEmitter_js_1.EventEmitter {
	    // keep-sorted start
	    #bluetoothProcessor;
	    #browserProcessor;
	    #browsingContextProcessor;
	    #cdpProcessor;
	    #inputProcessor;
	    #networkProcessor;
	    #permissionsProcessor;
	    #scriptProcessor;
	    #sessionProcessor;
	    #storageProcessor;
	    // keep-sorted end
	    #parser;
	    #logger;
	    constructor(cdpConnection, browserCdpClient, eventManager, browsingContextStorage, realmStorage, preloadScriptStorage, networkStorage, bluetoothProcessor, parser = new BidiNoOpParser_js_1.BidiNoOpParser(), initConnection, logger) {
	        super();
	        this.#parser = parser;
	        this.#logger = logger;
	        this.#bluetoothProcessor = bluetoothProcessor;
	        // keep-sorted start block=yes
	        this.#browserProcessor = new BrowserProcessor_js_1.BrowserProcessor(browserCdpClient, browsingContextStorage);
	        this.#browsingContextProcessor = new BrowsingContextProcessor_js_1.BrowsingContextProcessor(browserCdpClient, browsingContextStorage, eventManager);
	        this.#cdpProcessor = new CdpProcessor_js_1.CdpProcessor(browsingContextStorage, realmStorage, cdpConnection, browserCdpClient);
	        this.#inputProcessor = new InputProcessor_js_1.InputProcessor(browsingContextStorage);
	        this.#networkProcessor = new NetworkProcessor_js_1.NetworkProcessor(browsingContextStorage, networkStorage);
	        this.#permissionsProcessor = new PermissionsProcessor_js_1.PermissionsProcessor(browserCdpClient);
	        this.#scriptProcessor = new ScriptProcessor_js_1.ScriptProcessor(eventManager, browsingContextStorage, realmStorage, preloadScriptStorage, logger);
	        this.#sessionProcessor = new SessionProcessor_js_1.SessionProcessor(eventManager, browserCdpClient, initConnection);
	        this.#storageProcessor = new StorageProcessor_js_1.StorageProcessor(browserCdpClient, browsingContextStorage, logger);
	        // keep-sorted end
	    }
	    async #processCommand(command) {
	        switch (command.method) {
	            // Bluetooth module
	            // keep-sorted start block=yes
	            case 'bluetooth.handleRequestDevicePrompt':
	                return await this.#bluetoothProcessor.handleRequestDevicePrompt(this.#parser.parseHandleRequestDevicePromptParams(command.params));
	            case 'bluetooth.simulateAdapter':
	                return await this.#bluetoothProcessor.simulateAdapter(this.#parser.parseSimulateAdapterParameters(command.params));
	            case 'bluetooth.simulateAdvertisement':
	                return await this.#bluetoothProcessor.simulateAdvertisement(this.#parser.parseSimulateAdvertisementParameters(command.params));
	            case 'bluetooth.simulatePreconnectedPeripheral':
	                return await this.#bluetoothProcessor.simulatePreconnectedPeripheral(this.#parser.parseSimulatePreconnectedPeripheralParameters(command.params));
	            // keep-sorted end
	            // Browser module
	            // keep-sorted start block=yes
	            case 'browser.close':
	                return this.#browserProcessor.close();
	            case 'browser.createUserContext':
	                return await this.#browserProcessor.createUserContext(command.params);
	            case 'browser.getClientWindows':
	                return await this.#browserProcessor.getClientWindows();
	            case 'browser.getUserContexts':
	                return await this.#browserProcessor.getUserContexts();
	            case 'browser.removeUserContext':
	                return await this.#browserProcessor.removeUserContext(this.#parser.parseRemoveUserContextParams(command.params));
	            case 'browser.setClientWindowState':
	                throw new protocol_js_1.UnknownErrorException(`Method ${command.method} is not implemented.`);
	            // keep-sorted end
	            // Browsing Context module
	            // keep-sorted start block=yes
	            case 'browsingContext.activate':
	                return await this.#browsingContextProcessor.activate(this.#parser.parseActivateParams(command.params));
	            case 'browsingContext.captureScreenshot':
	                return await this.#browsingContextProcessor.captureScreenshot(this.#parser.parseCaptureScreenshotParams(command.params));
	            case 'browsingContext.close':
	                return await this.#browsingContextProcessor.close(this.#parser.parseCloseParams(command.params));
	            case 'browsingContext.create':
	                return await this.#browsingContextProcessor.create(this.#parser.parseCreateParams(command.params));
	            case 'browsingContext.getTree':
	                return this.#browsingContextProcessor.getTree(this.#parser.parseGetTreeParams(command.params));
	            case 'browsingContext.handleUserPrompt':
	                return await this.#browsingContextProcessor.handleUserPrompt(this.#parser.parseHandleUserPromptParams(command.params));
	            case 'browsingContext.locateNodes':
	                return await this.#browsingContextProcessor.locateNodes(this.#parser.parseLocateNodesParams(command.params));
	            case 'browsingContext.navigate':
	                return await this.#browsingContextProcessor.navigate(this.#parser.parseNavigateParams(command.params));
	            case 'browsingContext.print':
	                return await this.#browsingContextProcessor.print(this.#parser.parsePrintParams(command.params));
	            case 'browsingContext.reload':
	                return await this.#browsingContextProcessor.reload(this.#parser.parseReloadParams(command.params));
	            case 'browsingContext.setViewport':
	                return await this.#browsingContextProcessor.setViewport(this.#parser.parseSetViewportParams(command.params));
	            case 'browsingContext.traverseHistory':
	                return await this.#browsingContextProcessor.traverseHistory(this.#parser.parseTraverseHistoryParams(command.params));
	            // keep-sorted end
	            // CDP module
	            // keep-sorted start block=yes
	            case 'goog:cdp.getSession':
	                return this.#cdpProcessor.getSession(this.#parser.parseGetSessionParams(command.params));
	            case 'goog:cdp.resolveRealm':
	                return this.#cdpProcessor.resolveRealm(this.#parser.parseResolveRealmParams(command.params));
	            case 'goog:cdp.sendCommand':
	                return await this.#cdpProcessor.sendCommand(this.#parser.parseSendCommandParams(command.params));
	            // keep-sorted end
	            // CDP deprecated domain.
	            // https://github.com/GoogleChromeLabs/chromium-bidi/issues/2844
	            // keep-sorted start block=yes
	            case 'cdp.getSession':
	                return this.#cdpProcessor.getSession(this.#parser.parseGetSessionParams(command.params));
	            case 'cdp.resolveRealm':
	                return this.#cdpProcessor.resolveRealm(this.#parser.parseResolveRealmParams(command.params));
	            case 'cdp.sendCommand':
	                return await this.#cdpProcessor.sendCommand(this.#parser.parseSendCommandParams(command.params));
	            // keep-sorted end
	            // Input module
	            // keep-sorted start block=yes
	            case 'input.performActions':
	                return await this.#inputProcessor.performActions(this.#parser.parsePerformActionsParams(command.params));
	            case 'input.releaseActions':
	                return await this.#inputProcessor.releaseActions(this.#parser.parseReleaseActionsParams(command.params));
	            case 'input.setFiles':
	                return await this.#inputProcessor.setFiles(this.#parser.parseSetFilesParams(command.params));
	            // keep-sorted end
	            // Network module
	            // keep-sorted start block=yes
	            case 'network.addIntercept':
	                return await this.#networkProcessor.addIntercept(this.#parser.parseAddInterceptParams(command.params));
	            case 'network.continueRequest':
	                return await this.#networkProcessor.continueRequest(this.#parser.parseContinueRequestParams(command.params));
	            case 'network.continueResponse':
	                return await this.#networkProcessor.continueResponse(this.#parser.parseContinueResponseParams(command.params));
	            case 'network.continueWithAuth':
	                return await this.#networkProcessor.continueWithAuth(this.#parser.parseContinueWithAuthParams(command.params));
	            case 'network.failRequest':
	                return await this.#networkProcessor.failRequest(this.#parser.parseFailRequestParams(command.params));
	            case 'network.provideResponse':
	                return await this.#networkProcessor.provideResponse(this.#parser.parseProvideResponseParams(command.params));
	            case 'network.removeIntercept':
	                return await this.#networkProcessor.removeIntercept(this.#parser.parseRemoveInterceptParams(command.params));
	            case 'network.setCacheBehavior':
	                return await this.#networkProcessor.setCacheBehavior(this.#parser.parseSetCacheBehavior(command.params));
	            // keep-sorted end
	            // Permissions module
	            // keep-sorted start block=yes
	            case 'permissions.setPermission':
	                return await this.#permissionsProcessor.setPermissions(this.#parser.parseSetPermissionsParams(command.params));
	            // keep-sorted end
	            // Script module
	            // keep-sorted start block=yes
	            case 'script.addPreloadScript':
	                return await this.#scriptProcessor.addPreloadScript(this.#parser.parseAddPreloadScriptParams(command.params));
	            case 'script.callFunction':
	                return await this.#scriptProcessor.callFunction(this.#parser.parseCallFunctionParams(this.#processTargetParams(command.params)));
	            case 'script.disown':
	                return await this.#scriptProcessor.disown(this.#parser.parseDisownParams(this.#processTargetParams(command.params)));
	            case 'script.evaluate':
	                return await this.#scriptProcessor.evaluate(this.#parser.parseEvaluateParams(this.#processTargetParams(command.params)));
	            case 'script.getRealms':
	                return this.#scriptProcessor.getRealms(this.#parser.parseGetRealmsParams(command.params));
	            case 'script.removePreloadScript':
	                return await this.#scriptProcessor.removePreloadScript(this.#parser.parseRemovePreloadScriptParams(command.params));
	            // keep-sorted end
	            // Session module
	            // keep-sorted start block=yes
	            case 'session.end':
	                throw new protocol_js_1.UnknownErrorException(`Method ${command.method} is not implemented.`);
	            case 'session.new':
	                return await this.#sessionProcessor.new(command.params);
	            case 'session.status':
	                return this.#sessionProcessor.status();
	            case 'session.subscribe':
	                return await this.#sessionProcessor.subscribe(this.#parser.parseSubscribeParams(command.params), command.channel);
	            case 'session.unsubscribe':
	                return await this.#sessionProcessor.unsubscribe(this.#parser.parseSubscribeParams(command.params), command.channel);
	            // keep-sorted end
	            // Storage module
	            // keep-sorted start block=yes
	            case 'storage.deleteCookies':
	                return await this.#storageProcessor.deleteCookies(this.#parser.parseDeleteCookiesParams(command.params));
	            case 'storage.getCookies':
	                return await this.#storageProcessor.getCookies(this.#parser.parseGetCookiesParams(command.params));
	            case 'storage.setCookie':
	                return await this.#storageProcessor.setCookie(this.#parser.parseSetCookieParams(command.params));
	            // keep-sorted end
	            // WebExtension module
	            // keep-sorted start block=yes
	            case 'webExtension.install':
	                throw new protocol_js_1.UnknownErrorException(`Method ${command.method} is not implemented.`);
	            case 'webExtension.uninstall':
	                throw new protocol_js_1.UnknownErrorException(`Method ${command.method} is not implemented.`);
	            // keep-sorted end
	        }
	        // Intentionally kept outside the switch statement to ensure that
	        // ESLint @typescript-eslint/switch-exhaustiveness-check triggers if a new
	        // command is added.
	        throw new protocol_js_1.UnknownCommandException(`Unknown command '${command?.method}'.`);
	    }
	    // Workaround for as zod.union always take the first schema
	    // https://github.com/w3c/webdriver-bidi/issues/635
	    #processTargetParams(params) {
	        if (typeof params === 'object' &&
	            params &&
	            'target' in params &&
	            typeof params.target === 'object' &&
	            params.target &&
	            'context' in params.target) {
	            delete params.target['realm'];
	        }
	        return params;
	    }
	    async processCommand(command) {
	        try {
	            const result = await this.#processCommand(command);
	            const response = {
	                type: 'success',
	                id: command.id,
	                result,
	            };
	            this.emit("response" /* CommandProcessorEvents.Response */, {
	                message: OutgoingMessage_js_1.OutgoingMessage.createResolved(response, command.channel),
	                event: command.method,
	            });
	        }
	        catch (e) {
	            if (e instanceof protocol_js_1.Exception) {
	                this.emit("response" /* CommandProcessorEvents.Response */, {
	                    message: OutgoingMessage_js_1.OutgoingMessage.createResolved(e.toErrorResponse(command.id), command.channel),
	                    event: command.method,
	                });
	            }
	            else {
	                const error = e;
	                this.#logger?.(log_js_1.LogType.bidi, error);
	                this.emit("response" /* CommandProcessorEvents.Response */, {
	                    message: OutgoingMessage_js_1.OutgoingMessage.createResolved(new protocol_js_1.UnknownErrorException(error.message, error.stack).toErrorResponse(command.id), command.channel),
	                    event: command.method,
	                });
	            }
	        }
	    }
	};
	CommandProcessor.CommandProcessor = CommandProcessor$1;
	
	return CommandProcessor;
}

var BluetoothProcessor = {};

var hasRequiredBluetoothProcessor;

function requireBluetoothProcessor () {
	if (hasRequiredBluetoothProcessor) return BluetoothProcessor;
	hasRequiredBluetoothProcessor = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(BluetoothProcessor, "__esModule", { value: true });
	BluetoothProcessor.BluetoothProcessor = void 0;
	let BluetoothProcessor$1 = class BluetoothProcessor {
	    #eventManager;
	    #browsingContextStorage;
	    constructor(eventManager, browsingContextStorage) {
	        this.#eventManager = eventManager;
	        this.#browsingContextStorage = browsingContextStorage;
	    }
	    async simulateAdapter(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        // Bluetooth spec requires overriding the existing adapter (step 6). From the CDP
	        // perspective, we need to disable the emulation first.
	        // https://webbluetoothcg.github.io/web-bluetooth/#bluetooth-simulateAdapter-command
	        await context.cdpTarget.browserCdpClient.sendCommand('BluetoothEmulation.disable');
	        await context.cdpTarget.browserCdpClient.sendCommand('BluetoothEmulation.enable', {
	            state: params.state,
	        });
	        return {};
	    }
	    async simulatePreconnectedPeripheral(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        await context.cdpTarget.browserCdpClient.sendCommand('BluetoothEmulation.simulatePreconnectedPeripheral', {
	            address: params.address,
	            name: params.name,
	            knownServiceUuids: params.knownServiceUuids,
	            manufacturerData: params.manufacturerData,
	        });
	        return {};
	    }
	    async simulateAdvertisement(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        await context.cdpTarget.browserCdpClient.sendCommand('BluetoothEmulation.simulateAdvertisement', {
	            entry: params.scanEntry,
	        });
	        return {};
	    }
	    onCdpTargetCreated(cdpTarget) {
	        cdpTarget.cdpClient.on('DeviceAccess.deviceRequestPrompted', (event) => {
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: 'bluetooth.requestDevicePromptUpdated',
	                params: {
	                    context: cdpTarget.id,
	                    prompt: event.id,
	                    devices: event.devices,
	                },
	            }, cdpTarget.id);
	        });
	    }
	    async handleRequestDevicePrompt(params) {
	        const context = this.#browsingContextStorage.getContext(params.context);
	        if (params.accept) {
	            await context.cdpTarget.cdpClient.sendCommand('DeviceAccess.selectPrompt', {
	                id: params.prompt,
	                deviceId: params.device,
	            });
	        }
	        else {
	            await context.cdpTarget.cdpClient.sendCommand('DeviceAccess.cancelPrompt', {
	                id: params.prompt,
	            });
	        }
	        return {};
	    }
	};
	BluetoothProcessor.BluetoothProcessor = BluetoothProcessor$1;
	
	return BluetoothProcessor;
}

var CdpTargetManager = {};

var BrowsingContextImpl = {};

var Deferred = {};

var hasRequiredDeferred;

function requireDeferred () {
	if (hasRequiredDeferred) return Deferred;
	hasRequiredDeferred = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(Deferred, "__esModule", { value: true });
	Deferred.Deferred = void 0;
	let Deferred$1 = class Deferred {
	    #isFinished = false;
	    #promise;
	    #result;
	    #resolve;
	    #reject;
	    get isFinished() {
	        return this.#isFinished;
	    }
	    get result() {
	        if (!this.#isFinished) {
	            throw new Error('Deferred is not finished yet');
	        }
	        return this.#result;
	    }
	    constructor() {
	        this.#promise = new Promise((resolve, reject) => {
	            this.#resolve = resolve;
	            this.#reject = reject;
	        });
	        // Needed to avoid `Uncaught (in promise)`. The promises returned by `then`
	        // and `catch` will be rejected anyway.
	        this.#promise.catch((_error) => {
	            // Intentionally empty.
	        });
	    }
	    then(onFulfilled, onRejected) {
	        return this.#promise.then(onFulfilled, onRejected);
	    }
	    catch(onRejected) {
	        return this.#promise.catch(onRejected);
	    }
	    resolve(value) {
	        this.#result = value;
	        if (!this.#isFinished) {
	            this.#isFinished = true;
	            this.#resolve(value);
	        }
	    }
	    reject(reason) {
	        if (!this.#isFinished) {
	            this.#isFinished = true;
	            this.#reject(reason);
	        }
	    }
	    finally(onFinally) {
	        return this.#promise.finally(onFinally);
	    }
	    [Symbol.toStringTag] = 'Promise';
	};
	Deferred.Deferred = Deferred$1;
	
	return Deferred;
}

var time = {};

var hasRequiredTime;

function requireTime () {
	if (hasRequiredTime) return time;
	hasRequiredTime = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(time, "__esModule", { value: true });
	time.getTimestamp = getTimestamp;
	function getTimestamp() {
	    // `timestamp` from the event is MonotonicTime, not real time, so
	    // the best Mapper can do is to set the timestamp to the epoch time
	    // of the event arrived.
	    // https://chromedevtools.github.io/devtools-protocol/tot/Network/#type-MonotonicTime
	    return new Date().getTime();
	}
	
	return time;
}

var unitConversions = {};

var hasRequiredUnitConversions;

function requireUnitConversions () {
	if (hasRequiredUnitConversions) return unitConversions;
	hasRequiredUnitConversions = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(unitConversions, "__esModule", { value: true });
	unitConversions.inchesFromCm = inchesFromCm;
	/** @return Given an input in cm, convert it to inches. */
	function inchesFromCm(cm) {
	    return cm / 2.54;
	}
	
	return unitConversions;
}

var WindowRealm = {};

var Realm = {};

var hasRequiredRealm;

function requireRealm () {
	if (hasRequiredRealm) return Realm;
	hasRequiredRealm = 1;
	Object.defineProperty(Realm, "__esModule", { value: true });
	Realm.Realm = void 0;
	const protocol_js_1 = requireProtocol();
	const log_js_1 = requireLog();
	const uuid_js_1 = requireUuid();
	const ChannelProxy_js_1 = requireChannelProxy();
	let Realm$1 = class Realm {
	    #cdpClient;
	    #eventManager;
	    #executionContextId;
	    #logger;
	    #origin;
	    #realmId;
	    #realmStorage;
	    constructor(cdpClient, eventManager, executionContextId, logger, origin, realmId, realmStorage) {
	        this.#cdpClient = cdpClient;
	        this.#eventManager = eventManager;
	        this.#executionContextId = executionContextId;
	        this.#logger = logger;
	        this.#origin = origin;
	        this.#realmId = realmId;
	        this.#realmStorage = realmStorage;
	        this.#realmStorage.addRealm(this);
	    }
	    cdpToBidiValue(cdpValue, resultOwnership) {
	        const bidiValue = this.serializeForBiDi(cdpValue.result.deepSerializedValue, new Map());
	        if (cdpValue.result.objectId) {
	            const objectId = cdpValue.result.objectId;
	            if (resultOwnership === "root" /* Script.ResultOwnership.Root */) {
	                // Extend BiDi value with `handle` based on required `resultOwnership`
	                // and  CDP response but not on the actual BiDi type.
	                bidiValue.handle = objectId;
	                // Remember all the handles sent to client.
	                this.#realmStorage.knownHandlesToRealmMap.set(objectId, this.realmId);
	            }
	            else {
	                // No need to await for the object to be released.
	                void this.#releaseObject(objectId).catch((error) => this.#logger?.(log_js_1.LogType.debugError, error));
	            }
	        }
	        return bidiValue;
	    }
	    /**
	     * Relies on the CDP to implement proper BiDi serialization, except:
	     * * CDP integer property `backendNodeId` is replaced with `sharedId` of
	     * `{documentId}_element_{backendNodeId}`;
	     * * CDP integer property `weakLocalObjectReference` is replaced with UUID `internalId`
	     * using unique-per serialization `internalIdMap`.
	     * * CDP type `platformobject` is replaced with `object`.
	     * @param deepSerializedValue - CDP value to be converted to BiDi.
	     * @param internalIdMap - Map from CDP integer `weakLocalObjectReference` to BiDi UUID
	     * `internalId`.
	     */
	    serializeForBiDi(deepSerializedValue, internalIdMap) {
	        if (Object.hasOwn(deepSerializedValue, 'weakLocalObjectReference')) {
	            const weakLocalObjectReference = deepSerializedValue.weakLocalObjectReference;
	            if (!internalIdMap.has(weakLocalObjectReference)) {
	                internalIdMap.set(weakLocalObjectReference, (0, uuid_js_1.uuidv4)());
	            }
	            deepSerializedValue.internalId = internalIdMap.get(weakLocalObjectReference);
	            delete deepSerializedValue['weakLocalObjectReference'];
	        }
	        if (deepSerializedValue.type === 'node' &&
	            deepSerializedValue.value &&
	            Object.hasOwn(deepSerializedValue.value, 'frameId')) {
	            // `frameId` is not needed in BiDi as it is not yet specified.
	            delete deepSerializedValue.value['frameId'];
	        }
	        // Platform object is a special case. It should have only `{type: object}`
	        // without `value` field.
	        if (deepSerializedValue.type === 'platformobject') {
	            return { type: 'object' };
	        }
	        const bidiValue = deepSerializedValue.value;
	        if (bidiValue === undefined) {
	            return deepSerializedValue;
	        }
	        // Recursively update the nested values.
	        if (['array', 'set', 'htmlcollection', 'nodelist'].includes(deepSerializedValue.type)) {
	            for (const i in bidiValue) {
	                bidiValue[i] = this.serializeForBiDi(bidiValue[i], internalIdMap);
	            }
	        }
	        if (['object', 'map'].includes(deepSerializedValue.type)) {
	            for (const i in bidiValue) {
	                bidiValue[i] = [
	                    this.serializeForBiDi(bidiValue[i][0], internalIdMap),
	                    this.serializeForBiDi(bidiValue[i][1], internalIdMap),
	                ];
	            }
	        }
	        return deepSerializedValue;
	    }
	    get realmId() {
	        return this.#realmId;
	    }
	    get executionContextId() {
	        return this.#executionContextId;
	    }
	    get origin() {
	        return this.#origin;
	    }
	    get source() {
	        return {
	            realm: this.realmId,
	        };
	    }
	    get cdpClient() {
	        return this.#cdpClient;
	    }
	    get baseInfo() {
	        return {
	            realm: this.realmId,
	            origin: this.origin,
	        };
	    }
	    async evaluate(expression, awaitPromise, resultOwnership = "none" /* Script.ResultOwnership.None */, serializationOptions = {}, userActivation = false, includeCommandLineApi = false) {
	        const cdpEvaluateResult = await this.cdpClient.sendCommand('Runtime.evaluate', {
	            contextId: this.executionContextId,
	            expression,
	            awaitPromise,
	            serializationOptions: Realm.#getSerializationOptions("deep" /* Protocol.Runtime.SerializationOptionsSerialization.Deep */, serializationOptions),
	            userGesture: userActivation,
	            includeCommandLineAPI: includeCommandLineApi,
	        });
	        if (cdpEvaluateResult.exceptionDetails) {
	            return await this.#getExceptionResult(cdpEvaluateResult.exceptionDetails, 0, resultOwnership);
	        }
	        return {
	            realm: this.realmId,
	            result: this.cdpToBidiValue(cdpEvaluateResult, resultOwnership),
	            type: 'success',
	        };
	    }
	    #registerEvent(event) {
	        if (this.associatedBrowsingContexts.length === 0) {
	            this.#eventManager.registerEvent(event, null);
	        }
	        else {
	            for (const browsingContext of this.associatedBrowsingContexts) {
	                this.#eventManager.registerEvent(event, browsingContext.id);
	            }
	        }
	    }
	    initialize() {
	        this.#registerEvent({
	            type: 'event',
	            method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmCreated,
	            params: this.realmInfo,
	        });
	    }
	    /**
	     * Serializes a given CDP object into BiDi, keeping references in the
	     * target's `globalThis`.
	     */
	    async serializeCdpObject(cdpRemoteObject, resultOwnership) {
	        // TODO: if the object is a primitive, return it directly without CDP roundtrip.
	        const argument = Realm.#cdpRemoteObjectToCallArgument(cdpRemoteObject);
	        const cdpValue = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {
	            functionDeclaration: String((remoteObject) => remoteObject),
	            awaitPromise: false,
	            arguments: [argument],
	            serializationOptions: {
	                serialization: "deep" /* Protocol.Runtime.SerializationOptionsSerialization.Deep */,
	            },
	            executionContextId: this.executionContextId,
	        });
	        return this.cdpToBidiValue(cdpValue, resultOwnership);
	    }
	    static #cdpRemoteObjectToCallArgument(cdpRemoteObject) {
	        if (cdpRemoteObject.objectId !== undefined) {
	            return { objectId: cdpRemoteObject.objectId };
	        }
	        if (cdpRemoteObject.unserializableValue !== undefined) {
	            return { unserializableValue: cdpRemoteObject.unserializableValue };
	        }
	        return { value: cdpRemoteObject.value };
	    }
	    /**
	     * Gets the string representation of an object. This is equivalent to
	     * calling `toString()` on the object value.
	     */
	    async stringifyObject(cdpRemoteObject) {
	        const { result } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {
	            functionDeclaration: String(
	            // eslint-disable-next-line @typescript-eslint/no-base-to-string
	            (remoteObject) => String(remoteObject)),
	            awaitPromise: false,
	            arguments: [cdpRemoteObject],
	            returnByValue: true,
	            executionContextId: this.executionContextId,
	        });
	        return result.value;
	    }
	    async #flattenKeyValuePairs(mappingLocalValue) {
	        const keyValueArray = await Promise.all(mappingLocalValue.map(async ([key, value]) => {
	            let keyArg;
	            if (typeof key === 'string') {
	                // Key is a string.
	                keyArg = { value: key };
	            }
	            else {
	                // Key is a serialized value.
	                keyArg = await this.deserializeForCdp(key);
	            }
	            const valueArg = await this.deserializeForCdp(value);
	            return [keyArg, valueArg];
	        }));
	        return keyValueArray.flat();
	    }
	    async #flattenValueList(listLocalValue) {
	        return await Promise.all(listLocalValue.map((localValue) => this.deserializeForCdp(localValue)));
	    }
	    async #serializeCdpExceptionDetails(cdpExceptionDetails, lineOffset, resultOwnership) {
	        const callFrames = cdpExceptionDetails.stackTrace?.callFrames.map((frame) => ({
	            url: frame.url,
	            functionName: frame.functionName,
	            lineNumber: frame.lineNumber - lineOffset,
	            columnNumber: frame.columnNumber,
	        })) ?? [];
	        // Exception should always be there.
	        const exception = cdpExceptionDetails.exception;
	        return {
	            exception: await this.serializeCdpObject(exception, resultOwnership),
	            columnNumber: cdpExceptionDetails.columnNumber,
	            lineNumber: cdpExceptionDetails.lineNumber - lineOffset,
	            stackTrace: {
	                callFrames,
	            },
	            text: (await this.stringifyObject(exception)) || cdpExceptionDetails.text,
	        };
	    }
	    async callFunction(functionDeclaration, awaitPromise, thisLocalValue = {
	        type: 'undefined',
	    }, argumentsLocalValues = [], resultOwnership = "none" /* Script.ResultOwnership.None */, serializationOptions = {}, userActivation = false) {
	        const callFunctionAndSerializeScript = `(...args) => {
      function callFunction(f, args) {
        const deserializedThis = args.shift();
        const deserializedArgs = args;
        return f.apply(deserializedThis, deserializedArgs);
      }
      return callFunction((
        ${functionDeclaration}
      ), args);
    }`;
	        const thisAndArgumentsList = [
	            await this.deserializeForCdp(thisLocalValue),
	            ...(await Promise.all(argumentsLocalValues.map(async (argumentLocalValue) => await this.deserializeForCdp(argumentLocalValue)))),
	        ];
	        let cdpCallFunctionResult;
	        try {
	            cdpCallFunctionResult = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {
	                functionDeclaration: callFunctionAndSerializeScript,
	                awaitPromise,
	                arguments: thisAndArgumentsList,
	                serializationOptions: Realm.#getSerializationOptions("deep" /* Protocol.Runtime.SerializationOptionsSerialization.Deep */, serializationOptions),
	                executionContextId: this.executionContextId,
	                userGesture: userActivation,
	            });
	        }
	        catch (error) {
	            // Heuristic to determine if the problem is in the argument.
	            // The check can be done on the `deserialization` step, but this approach
	            // helps to save round-trips.
	            if (error.code === -32e3 /* CdpErrorConstants.GENERIC_ERROR */ &&
	                [
	                    'Could not find object with given id',
	                    'Argument should belong to the same JavaScript world as target object',
	                    'Invalid remote object id',
	                ].includes(error.message)) {
	                throw new protocol_js_1.NoSuchHandleException('Handle was not found.');
	            }
	            throw error;
	        }
	        if (cdpCallFunctionResult.exceptionDetails) {
	            return await this.#getExceptionResult(cdpCallFunctionResult.exceptionDetails, 1, resultOwnership);
	        }
	        return {
	            type: 'success',
	            result: this.cdpToBidiValue(cdpCallFunctionResult, resultOwnership),
	            realm: this.realmId,
	        };
	    }
	    async deserializeForCdp(localValue) {
	        if ('handle' in localValue && localValue.handle) {
	            return { objectId: localValue.handle };
	            // We tried to find a handle value but failed
	            // This allows us to have exhaustive switch on `localValue.type`
	        }
	        else if ('handle' in localValue || 'sharedId' in localValue) {
	            throw new protocol_js_1.NoSuchHandleException('Handle was not found.');
	        }
	        switch (localValue.type) {
	            case 'undefined':
	                return { unserializableValue: 'undefined' };
	            case 'null':
	                return { unserializableValue: 'null' };
	            case 'string':
	                return { value: localValue.value };
	            case 'number':
	                if (localValue.value === 'NaN') {
	                    return { unserializableValue: 'NaN' };
	                }
	                else if (localValue.value === '-0') {
	                    return { unserializableValue: '-0' };
	                }
	                else if (localValue.value === 'Infinity') {
	                    return { unserializableValue: 'Infinity' };
	                }
	                else if (localValue.value === '-Infinity') {
	                    return { unserializableValue: '-Infinity' };
	                }
	                return {
	                    value: localValue.value,
	                };
	            case 'boolean':
	                return { value: Boolean(localValue.value) };
	            case 'bigint':
	                return {
	                    unserializableValue: `BigInt(${JSON.stringify(localValue.value)})`,
	                };
	            case 'date':
	                return {
	                    unserializableValue: `new Date(Date.parse(${JSON.stringify(localValue.value)}))`,
	                };
	            case 'regexp':
	                return {
	                    unserializableValue: `new RegExp(${JSON.stringify(localValue.value.pattern)}, ${JSON.stringify(localValue.value.flags)})`,
	                };
	            case 'map': {
	                // TODO: If none of the nested keys and values has a remote
	                // reference, serialize to `unserializableValue` without CDP roundtrip.
	                const keyValueArray = await this.#flattenKeyValuePairs(localValue.value);
	                const { result } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {
	                    functionDeclaration: String((...args) => {
	                        const result = new Map();
	                        for (let i = 0; i < args.length; i += 2) {
	                            result.set(args[i], args[i + 1]);
	                        }
	                        return result;
	                    }),
	                    awaitPromise: false,
	                    arguments: keyValueArray,
	                    returnByValue: false,
	                    executionContextId: this.executionContextId,
	                });
	                // TODO(#375): Release `result.objectId` after using.
	                return { objectId: result.objectId };
	            }
	            case 'object': {
	                // TODO: If none of the nested keys and values has a remote
	                // reference, serialize to `unserializableValue` without CDP roundtrip.
	                const keyValueArray = await this.#flattenKeyValuePairs(localValue.value);
	                const { result } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {
	                    functionDeclaration: String((...args) => {
	                        const result = {};
	                        for (let i = 0; i < args.length; i += 2) {
	                            // Key should be either `string`, `number`, or `symbol`.
	                            const key = args[i];
	                            result[key] = args[i + 1];
	                        }
	                        return result;
	                    }),
	                    awaitPromise: false,
	                    arguments: keyValueArray,
	                    returnByValue: false,
	                    executionContextId: this.executionContextId,
	                });
	                // TODO(#375): Release `result.objectId` after using.
	                return { objectId: result.objectId };
	            }
	            case 'array': {
	                // TODO: If none of the nested items has a remote reference,
	                // serialize to `unserializableValue` without CDP roundtrip.
	                const args = await this.#flattenValueList(localValue.value);
	                const { result } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {
	                    functionDeclaration: String((...args) => args),
	                    awaitPromise: false,
	                    arguments: args,
	                    returnByValue: false,
	                    executionContextId: this.executionContextId,
	                });
	                // TODO(#375): Release `result.objectId` after using.
	                return { objectId: result.objectId };
	            }
	            case 'set': {
	                // TODO: if none of the nested items has a remote reference,
	                // serialize to `unserializableValue` without CDP roundtrip.
	                const args = await this.#flattenValueList(localValue.value);
	                const { result } = await this.cdpClient.sendCommand('Runtime.callFunctionOn', {
	                    functionDeclaration: String((...args) => new Set(args)),
	                    awaitPromise: false,
	                    arguments: args,
	                    returnByValue: false,
	                    executionContextId: this.executionContextId,
	                });
	                // TODO(#375): Release `result.objectId` after using.
	                return { objectId: result.objectId };
	            }
	            case 'channel': {
	                const channelProxy = new ChannelProxy_js_1.ChannelProxy(localValue.value, this.#logger);
	                const channelProxySendMessageHandle = await channelProxy.init(this, this.#eventManager);
	                return { objectId: channelProxySendMessageHandle };
	            }
	            // TODO(#375): Dispose of nested objects.
	        }
	        // Intentionally outside to handle unknown types
	        throw new Error(`Value ${JSON.stringify(localValue)} is not deserializable.`);
	    }
	    async #getExceptionResult(exceptionDetails, lineOffset, resultOwnership) {
	        return {
	            exceptionDetails: await this.#serializeCdpExceptionDetails(exceptionDetails, lineOffset, resultOwnership),
	            realm: this.realmId,
	            type: 'exception',
	        };
	    }
	    static #getSerializationOptions(serialization, serializationOptions) {
	        return {
	            serialization,
	            additionalParameters: Realm.#getAdditionalSerializationParameters(serializationOptions),
	            ...Realm.#getMaxObjectDepth(serializationOptions),
	        };
	    }
	    static #getAdditionalSerializationParameters(serializationOptions) {
	        const additionalParameters = {};
	        if (serializationOptions.maxDomDepth !== undefined) {
	            additionalParameters['maxNodeDepth'] =
	                serializationOptions.maxDomDepth === null
	                    ? 1000
	                    : serializationOptions.maxDomDepth;
	        }
	        if (serializationOptions.includeShadowTree !== undefined) {
	            additionalParameters['includeShadowTree'] =
	                serializationOptions.includeShadowTree;
	        }
	        return additionalParameters;
	    }
	    static #getMaxObjectDepth(serializationOptions) {
	        return serializationOptions.maxObjectDepth === undefined ||
	            serializationOptions.maxObjectDepth === null
	            ? {}
	            : { maxDepth: serializationOptions.maxObjectDepth };
	    }
	    async #releaseObject(handle) {
	        try {
	            await this.cdpClient.sendCommand('Runtime.releaseObject', {
	                objectId: handle,
	            });
	        }
	        catch (error) {
	            // Heuristic to determine if the problem is in the unknown handler.
	            // Ignore the error if so.
	            if (!(error.code === -32e3 /* CdpErrorConstants.GENERIC_ERROR */ &&
	                error.message === 'Invalid remote object id')) {
	                throw error;
	            }
	        }
	    }
	    async disown(handle) {
	        // Disowning an object from different realm does nothing.
	        if (this.#realmStorage.knownHandlesToRealmMap.get(handle) !== this.realmId) {
	            return;
	        }
	        await this.#releaseObject(handle);
	        this.#realmStorage.knownHandlesToRealmMap.delete(handle);
	    }
	    dispose() {
	        this.#registerEvent({
	            type: 'event',
	            method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmDestroyed,
	            params: {
	                realm: this.realmId,
	            },
	        });
	    }
	};
	Realm.Realm = Realm$1;
	
	return Realm;
}

var SharedId = {};

var hasRequiredSharedId;

function requireSharedId () {
	if (hasRequiredSharedId) return SharedId;
	hasRequiredSharedId = 1;
	/*
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(SharedId, "__esModule", { value: true });
	SharedId.getSharedId = getSharedId;
	SharedId.parseSharedId = parseSharedId;
	const SHARED_ID_DIVIDER = '_element_';
	function getSharedId(frameId, documentId, backendNodeId) {
	    return `f.${frameId}.d.${documentId}.e.${backendNodeId}`;
	}
	function parseLegacySharedId(sharedId) {
	    const match = sharedId.match(new RegExp(`(.*)${SHARED_ID_DIVIDER}(.*)`));
	    if (!match) {
	        // SharedId is incorrectly formatted.
	        return null;
	    }
	    const documentId = match[1];
	    const elementId = match[2];
	    if (documentId === undefined || elementId === undefined) {
	        return null;
	    }
	    const backendNodeId = parseInt(elementId ?? '');
	    if (isNaN(backendNodeId)) {
	        return null;
	    }
	    return {
	        documentId,
	        backendNodeId,
	    };
	}
	function parseSharedId(sharedId) {
	    // TODO: remove legacy check once ChromeDriver provides sharedId in the new format.
	    const legacyFormattedSharedId = parseLegacySharedId(sharedId);
	    if (legacyFormattedSharedId !== null) {
	        return { ...legacyFormattedSharedId, frameId: undefined };
	    }
	    const match = sharedId.match(/f\.(.*)\.d\.(.*)\.e\.([0-9]*)/);
	    if (!match) {
	        // SharedId is incorrectly formatted.
	        return null;
	    }
	    const frameId = match[1];
	    const documentId = match[2];
	    const elementId = match[3];
	    if (frameId === undefined ||
	        documentId === undefined ||
	        elementId === undefined) {
	        return null;
	    }
	    const backendNodeId = parseInt(elementId ?? '');
	    if (isNaN(backendNodeId)) {
	        return null;
	    }
	    return {
	        frameId,
	        documentId,
	        backendNodeId,
	    };
	}
	
	return SharedId;
}

var hasRequiredWindowRealm;

function requireWindowRealm () {
	if (hasRequiredWindowRealm) return WindowRealm;
	hasRequiredWindowRealm = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(WindowRealm, "__esModule", { value: true });
	WindowRealm.WindowRealm = void 0;
	const protocol_js_1 = requireProtocol();
	const Realm_js_1 = requireRealm();
	const SharedId_js_1 = requireSharedId();
	let WindowRealm$1 = class WindowRealm extends Realm_js_1.Realm {
	    #browsingContextId;
	    #browsingContextStorage;
	    sandbox;
	    constructor(browsingContextId, browsingContextStorage, cdpClient, eventManager, executionContextId, logger, origin, realmId, realmStorage, sandbox) {
	        super(cdpClient, eventManager, executionContextId, logger, origin, realmId, realmStorage);
	        this.#browsingContextId = browsingContextId;
	        this.#browsingContextStorage = browsingContextStorage;
	        this.sandbox = sandbox;
	        this.initialize();
	    }
	    #getBrowsingContextId(navigableId) {
	        const maybeBrowsingContext = this.#browsingContextStorage
	            .getAllContexts()
	            .find((context) => context.navigableId === navigableId);
	        return maybeBrowsingContext?.id ?? 'UNKNOWN';
	    }
	    get browsingContext() {
	        return this.#browsingContextStorage.getContext(this.#browsingContextId);
	    }
	    get associatedBrowsingContexts() {
	        return [this.browsingContext];
	    }
	    get realmType() {
	        return 'window';
	    }
	    get realmInfo() {
	        return {
	            ...this.baseInfo,
	            type: this.realmType,
	            context: this.#browsingContextId,
	            sandbox: this.sandbox,
	        };
	    }
	    get source() {
	        return {
	            realm: this.realmId,
	            context: this.browsingContext.id,
	        };
	    }
	    serializeForBiDi(deepSerializedValue, internalIdMap) {
	        const bidiValue = deepSerializedValue.value;
	        if (deepSerializedValue.type === 'node' && bidiValue !== undefined) {
	            if (Object.hasOwn(bidiValue, 'backendNodeId')) {
	                let navigableId = this.browsingContext.navigableId ?? 'UNKNOWN';
	                if (Object.hasOwn(bidiValue, 'loaderId')) {
	                    // `loaderId` should be always there after ~2024-03-05, when
	                    // https://crrev.com/c/5116240 reaches stable.
	                    // TODO: remove the check after the date.
	                    navigableId = bidiValue.loaderId;
	                    delete bidiValue['loaderId'];
	                }
	                deepSerializedValue.sharedId =
	                    (0, SharedId_js_1.getSharedId)(this.#getBrowsingContextId(navigableId), navigableId, bidiValue.backendNodeId);
	                delete bidiValue['backendNodeId'];
	            }
	            if (Object.hasOwn(bidiValue, 'children')) {
	                for (const i in bidiValue.children) {
	                    bidiValue.children[i] = this.serializeForBiDi(bidiValue.children[i], internalIdMap);
	                }
	            }
	            if (Object.hasOwn(bidiValue, 'shadowRoot') &&
	                bidiValue.shadowRoot !== null) {
	                bidiValue.shadowRoot = this.serializeForBiDi(bidiValue.shadowRoot, internalIdMap);
	            }
	            // `namespaceURI` can be is either `null` or non-empty string.
	            if (bidiValue.namespaceURI === '') {
	                bidiValue.namespaceURI = null;
	            }
	        }
	        return super.serializeForBiDi(deepSerializedValue, internalIdMap);
	    }
	    async deserializeForCdp(localValue) {
	        if ('sharedId' in localValue && localValue.sharedId) {
	            const parsedSharedId = (0, SharedId_js_1.parseSharedId)(localValue.sharedId);
	            if (parsedSharedId === null) {
	                throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" was not found.`);
	            }
	            const { documentId, backendNodeId } = parsedSharedId;
	            // TODO: add proper validation if the element is accessible from the current realm.
	            if (this.browsingContext.navigableId !== documentId) {
	                throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" belongs to different document. Current document is ${this.browsingContext.navigableId}.`);
	            }
	            try {
	                const { object } = await this.cdpClient.sendCommand('DOM.resolveNode', {
	                    backendNodeId,
	                    executionContextId: this.executionContextId,
	                });
	                // TODO(#375): Release `obj.object.objectId` after using.
	                return { objectId: object.objectId };
	            }
	            catch (error) {
	                // Heuristic to detect "no such node" exception. Based on the  specific
	                // CDP implementation.
	                if (error.code === -32e3 /* CdpErrorConstants.GENERIC_ERROR */ &&
	                    error.message === 'No node with given id found') {
	                    throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" was not found.`);
	                }
	                throw new protocol_js_1.UnknownErrorException(error.message, error.stack);
	            }
	        }
	        return await super.deserializeForCdp(localValue);
	    }
	    async evaluate(expression, awaitPromise, resultOwnership, serializationOptions, userActivation, includeCommandLineApi) {
	        await this.#browsingContextStorage
	            .getContext(this.#browsingContextId)
	            .targetUnblockedOrThrow();
	        return await super.evaluate(expression, awaitPromise, resultOwnership, serializationOptions, userActivation, includeCommandLineApi);
	    }
	    async callFunction(functionDeclaration, awaitPromise, thisLocalValue, argumentsLocalValues, resultOwnership, serializationOptions, userActivation) {
	        await this.#browsingContextStorage
	            .getContext(this.#browsingContextId)
	            .targetUnblockedOrThrow();
	        return await super.callFunction(functionDeclaration, awaitPromise, thisLocalValue, argumentsLocalValues, resultOwnership, serializationOptions, userActivation);
	    }
	};
	WindowRealm.WindowRealm = WindowRealm$1;
	
	return WindowRealm;
}

var NavigationTracker = {};

var UrlHelpers = {};

var hasRequiredUrlHelpers;

function requireUrlHelpers () {
	if (hasRequiredUrlHelpers) return UrlHelpers;
	hasRequiredUrlHelpers = 1;
	/*
	 *  Copyright 2024 Google LLC.
	 *  Copyright (c) Microsoft Corporation.
	 *
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 *
	 */
	Object.defineProperty(UrlHelpers, "__esModule", { value: true });
	UrlHelpers.urlMatchesAboutBlank = urlMatchesAboutBlank;
	/**
	 * A URL matches about:blank if its scheme is "about", its path contains a single string
	 * "blank", its username and password are the empty string, and its host is null.
	 * https://html.spec.whatwg.org/multipage/urls-and-fetching.html#matches-about:blank
	 * @param {string} url
	 * @return {boolean}
	 */
	function urlMatchesAboutBlank(url) {
	    // An empty string is a special case, and considered to be about:blank.
	    // https://html.spec.whatwg.org/multipage/nav-history-apis.html#window-open-steps
	    if (url === '') {
	        return true;
	    }
	    try {
	        const parsedUrl = new URL(url);
	        const schema = parsedUrl.protocol.replace(/:$/, '');
	        return (schema.toLowerCase() === 'about' &&
	            parsedUrl.pathname.toLowerCase() === 'blank' &&
	            parsedUrl.username === '' &&
	            parsedUrl.password === '' &&
	            parsedUrl.host === '');
	    }
	    catch (err) {
	        // Wrong URL considered do not match about:blank.
	        if (err instanceof TypeError) {
	            return false;
	        }
	        // Re-throw other unexpected errors.
	        throw err;
	    }
	}
	
	return UrlHelpers;
}

var hasRequiredNavigationTracker;

function requireNavigationTracker () {
	if (hasRequiredNavigationTracker) return NavigationTracker;
	hasRequiredNavigationTracker = 1;
	/*
	 *  Copyright 2024 Google LLC.
	 *  Copyright (c) Microsoft Corporation.
	 *
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 *
	 */
	Object.defineProperty(NavigationTracker, "__esModule", { value: true });
	NavigationTracker.NavigationTracker = NavigationTracker.NavigationResult = void 0;
	const protocol_js_1 = requireProtocol();
	const Deferred_js_1 = requireDeferred();
	const log_js_1 = requireLog();
	const time_js_1 = requireTime();
	const UrlHelpers_js_1 = requireUrlHelpers();
	const uuid_js_1 = requireUuid();
	class NavigationResult {
	    eventName;
	    message;
	    constructor(eventName, message) {
	        this.eventName = eventName;
	        this.message = message;
	    }
	}
	NavigationTracker.NavigationResult = NavigationResult;
	class NavigationState {
	    navigationId = (0, uuid_js_1.uuidv4)();
	    #browsingContextId;
	    #started = false;
	    #finished = new Deferred_js_1.Deferred();
	    url;
	    loaderId;
	    #isInitial;
	    #eventManager;
	    #navigated = false;
	    get finished() {
	        return this.#finished;
	    }
	    constructor(url, browsingContextId, isInitial, eventManager) {
	        this.#browsingContextId = browsingContextId;
	        this.url = url;
	        this.#isInitial = isInitial;
	        this.#eventManager = eventManager;
	    }
	    navigationInfo() {
	        return {
	            context: this.#browsingContextId,
	            navigation: this.navigationId,
	            timestamp: (0, time_js_1.getTimestamp)(),
	            url: this.url,
	        };
	    }
	    start() {
	        if (!this.#isInitial && !this.#started) {
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.NavigationStarted,
	                params: this.navigationInfo(),
	            }, this.#browsingContextId);
	        }
	        this.#started = true;
	    }
	    #finish(navigationResult) {
	        this.#started = true;
	        if (!this.#isInitial &&
	            !this.#finished.isFinished &&
	            navigationResult.eventName !== "browsingContext.load" /* NavigationEventName.Load */) {
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: navigationResult.eventName,
	                params: this.navigationInfo(),
	            }, this.#browsingContextId);
	        }
	        this.#finished.resolve(navigationResult);
	    }
	    frameNavigated() {
	        this.#navigated = true;
	    }
	    fragmentNavigated() {
	        this.#navigated = true;
	        this.#finish(new NavigationResult("browsingContext.fragmentNavigated" /* NavigationEventName.FragmentNavigated */));
	    }
	    load() {
	        this.#finish(new NavigationResult("browsingContext.load" /* NavigationEventName.Load */));
	    }
	    fail(message) {
	        this.#finish(new NavigationResult(this.#navigated
	            ? "browsingContext.navigationAborted" /* NavigationEventName.NavigationAborted */
	            : "browsingContext.navigationFailed" /* NavigationEventName.NavigationFailed */, message));
	    }
	}
	/**
	 * Keeps track of navigations. Details: http://go/webdriver:bidi-navigation
	 */
	let NavigationTracker$1 = class NavigationTracker {
	    #eventManager;
	    #logger;
	    #loaderIdToNavigationsMap = new Map();
	    #browsingContextId;
	    #currentNavigation;
	    // When a new navigation is started via `BrowsingContext.navigate` with `wait` set to
	    // `None`, the command result should have `navigation` value, but mapper does not have
	    // it yet. This value will be set to `navigationId` after next .
	    #pendingNavigation;
	    // Flags if the initial navigation to `about:blank` is in progress.
	    #isInitialNavigation = true;
	    navigation = {
	        withinDocument: new Deferred_js_1.Deferred(),
	    };
	    constructor(url, browsingContextId, eventManager, logger) {
	        this.#browsingContextId = browsingContextId;
	        this.#eventManager = eventManager;
	        this.#logger = logger;
	        this.#isInitialNavigation = true;
	        this.#currentNavigation = new NavigationState(url, browsingContextId, (0, UrlHelpers_js_1.urlMatchesAboutBlank)(url), this.#eventManager);
	    }
	    /**
	     * Returns current started ongoing navigation. It can be either a started pending
	     * navigation, or one is already navigated.
	     */
	    get currentNavigationId() {
	        if (this.#pendingNavigation?.loaderId !== undefined) {
	            return this.#pendingNavigation.navigationId;
	        }
	        return this.#currentNavigation.navigationId;
	    }
	    /**
	     * Flags if the current navigation relates to the initial to `about:blank` navigation.
	     */
	    get isInitialNavigation() {
	        return this.#isInitialNavigation;
	    }
	    /**
	     * Url of the last navigated navigation.
	     */
	    get url() {
	        return this.#currentNavigation.url;
	    }
	    /**
	     * Creates a pending navigation e.g. when navigation command is called. Required to
	     * provide navigation id before the actual navigation is started. It will be used when
	     * navigation started. Can be aborted, failed, fragment navigated, or became a current
	     * navigation.
	     */
	    createPendingNavigation(url, canBeInitialNavigation = false) {
	        this.#logger?.(log_js_1.LogType.debug, 'createCommandNavigation');
	        this.#isInitialNavigation =
	            canBeInitialNavigation &&
	                this.#isInitialNavigation &&
	                (0, UrlHelpers_js_1.urlMatchesAboutBlank)(url);
	        this.#pendingNavigation?.fail('navigation canceled by concurrent navigation');
	        const navigation = new NavigationState(url, this.#browsingContextId, this.#isInitialNavigation, this.#eventManager);
	        this.#pendingNavigation = navigation;
	        return navigation;
	    }
	    dispose() {
	        this.#pendingNavigation?.fail('navigation canceled by context disposal');
	        this.#currentNavigation.fail('navigation canceled by context disposal');
	    }
	    // Update the current url.
	    onTargetInfoChanged(url) {
	        this.#logger?.(log_js_1.LogType.debug, `onTargetInfoChanged ${url}`);
	        this.#currentNavigation.url = url;
	    }
	    #getNavigationForFrameNavigated(url, loaderId) {
	        if (this.#loaderIdToNavigationsMap.has(loaderId)) {
	            return this.#loaderIdToNavigationsMap.get(loaderId);
	        }
	        if (this.#pendingNavigation !== undefined &&
	            this.#pendingNavigation?.loaderId === undefined) {
	            // This can be a pending navigation to `about:blank` created by a command. Use the
	            // pending navigation in this case.
	            return this.#pendingNavigation;
	        }
	        // Create a new pending navigation.
	        return this.createPendingNavigation(url, true);
	    }
	    /**
	     * @param {string} unreachableUrl indicated the navigation is actually failed.
	     */
	    frameNavigated(url, loaderId, unreachableUrl) {
	        this.#logger?.(log_js_1.LogType.debug, `frameNavigated ${url}`);
	        if (unreachableUrl !== undefined &&
	            !this.#loaderIdToNavigationsMap.has(loaderId)) {
	            // The navigation failed before started. Get or create pending navigation and fail
	            // it.
	            const navigation = this.#pendingNavigation ??
	                this.createPendingNavigation(unreachableUrl, true);
	            navigation.url = unreachableUrl;
	            navigation.start();
	            navigation.fail('the requested url is unreachable');
	            return;
	        }
	        const navigation = this.#getNavigationForFrameNavigated(url, loaderId);
	        navigation.frameNavigated();
	        if (navigation !== this.#currentNavigation) {
	            this.#currentNavigation.fail('navigation canceled by concurrent navigation');
	        }
	        navigation.url = url;
	        navigation.loaderId = loaderId;
	        this.#loaderIdToNavigationsMap.set(loaderId, navigation);
	        navigation.start();
	        this.#currentNavigation = navigation;
	        if (this.#pendingNavigation === navigation) {
	            this.#pendingNavigation = undefined;
	        }
	    }
	    navigatedWithinDocument(url, navigationType) {
	        this.#logger?.(log_js_1.LogType.debug, `navigatedWithinDocument ${url}, ${navigationType}`);
	        // Current navigation URL should be updated.
	        this.#currentNavigation.url = url;
	        if (navigationType !== 'fragment') {
	            // TODO: check for other navigation types, like `javascript`.
	            return;
	        }
	        // There is no way to guaranteed match pending navigation with finished fragment
	        // navigations. So assume any pending navigation without loader id is the fragment
	        // one.
	        const fragmentNavigation = this.#pendingNavigation !== undefined &&
	            this.#pendingNavigation.loaderId === undefined
	            ? this.#pendingNavigation
	            : new NavigationState(url, this.#browsingContextId, false, this.#eventManager);
	        // Finish ongoing navigation.
	        fragmentNavigation.fragmentNavigated();
	        if (fragmentNavigation === this.#pendingNavigation) {
	            this.#pendingNavigation = undefined;
	        }
	    }
	    frameRequestedNavigation(url) {
	        this.#logger?.(log_js_1.LogType.debug, `Page.frameRequestedNavigation ${url}`);
	        // The page is about to navigate to the url.
	        this.createPendingNavigation(url, true);
	    }
	    /**
	     * Required to mark navigation as fully complete.
	     * TODO: navigation should be complete when it became the current one on
	     * `Page.frameNavigated` or on navigating command finished with a new loader Id.
	     */
	    loadPageEvent(loaderId) {
	        this.#logger?.(log_js_1.LogType.debug, 'loadPageEvent');
	        // Even if it was an initial navigation, it is finished.
	        this.#isInitialNavigation = false;
	        this.#loaderIdToNavigationsMap.get(loaderId)?.load();
	    }
	    /**
	     * Fail navigation due to navigation command failed.
	     */
	    failNavigation(navigation, errorText) {
	        this.#logger?.(log_js_1.LogType.debug, 'failCommandNavigation');
	        navigation.fail(errorText);
	    }
	    /**
	     * Updates the navigation's `loaderId` and sets it as current one, if it is a
	     * cross-document navigation.
	     */
	    navigationCommandFinished(navigation, loaderId) {
	        this.#logger?.(log_js_1.LogType.debug, `finishCommandNavigation ${navigation.navigationId}, ${loaderId}`);
	        if (loaderId !== undefined) {
	            navigation.loaderId = loaderId;
	            this.#loaderIdToNavigationsMap.set(loaderId, navigation);
	        }
	        if (loaderId === undefined || this.#currentNavigation === navigation) {
	            // If the command's navigation is same-document or is already the current one,
	            // nothing to do.
	            return;
	        }
	        this.#currentNavigation.fail('navigation canceled by concurrent navigation');
	        navigation.start();
	        this.#currentNavigation = navigation;
	        if (this.#pendingNavigation === navigation) {
	            this.#pendingNavigation = undefined;
	        }
	    }
	    /**
	     * Emulated event, tight to `Network.requestWillBeSent`.
	     */
	    frameStartedNavigating(url, loaderId) {
	        this.#logger?.(log_js_1.LogType.debug, `frameStartedNavigating ${url}, ${loaderId}`);
	        if (this.#loaderIdToNavigationsMap.has(loaderId)) {
	            // The `frameStartedNavigating` is tight to the `Network.requestWillBeSent` event
	            // which can be emitted several times, e.g. in case of redirection. Nothing to do in
	            // such a case.
	            return;
	        }
	        const pendingNavigation = this.#pendingNavigation ?? this.createPendingNavigation(url, true);
	        pendingNavigation.url = url;
	        pendingNavigation.start();
	        pendingNavigation.loaderId = loaderId;
	        this.#loaderIdToNavigationsMap.set(loaderId, pendingNavigation);
	    }
	    /**
	     * In case of `beforeunload` handler, the pending navigation should be marked as started
	     * for consistency, as the `browsingContext.navigationStarted` should be emitted before
	     * user prompt.
	     */
	    beforeunload() {
	        this.#logger?.(log_js_1.LogType.debug, `beforeunload`);
	        if (this.#pendingNavigation === undefined) {
	            this.#logger?.(log_js_1.LogType.debugError, `Unexpectedly no pending navigation on beforeunload`);
	            return;
	        }
	        this.#pendingNavigation.start();
	    }
	    /**
	     * If there is a navigation with the loaderId equals to the network request id, it means
	     * that the navigation failed.
	     */
	    networkLoadingFailed(loaderId, errorText) {
	        this.#loaderIdToNavigationsMap.get(loaderId)?.fail(errorText);
	    }
	};
	NavigationTracker.NavigationTracker = NavigationTracker$1;
	
	return NavigationTracker;
}

var hasRequiredBrowsingContextImpl;

function requireBrowsingContextImpl () {
	if (hasRequiredBrowsingContextImpl) return BrowsingContextImpl;
	hasRequiredBrowsingContextImpl = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a;
	Object.defineProperty(BrowsingContextImpl, "__esModule", { value: true });
	BrowsingContextImpl.BrowsingContextImpl = void 0;
	BrowsingContextImpl.serializeOrigin = serializeOrigin;
	const protocol_js_1 = requireProtocol();
	const assert_js_1 = requireAssert();
	const Deferred_js_1 = requireDeferred();
	const log_js_1 = requireLog();
	const time_js_1 = requireTime();
	const unitConversions_js_1 = requireUnitConversions();
	const WindowRealm_js_1 = requireWindowRealm();
	const NavigationTracker_js_1 = requireNavigationTracker();
	let BrowsingContextImpl$1 = class BrowsingContextImpl {
	    static LOGGER_PREFIX = `${log_js_1.LogType.debug}:browsingContext`;
	    /** Direct children browsing contexts. */
	    #children = new Set();
	    /** The ID of this browsing context. */
	    #id;
	    userContext;
	    /**
	     * The ID of the parent browsing context.
	     * If null, this is a top-level context.
	     */
	    #loaderId;
	    #parentId = null;
	    // Keeps track of the previously set viewport.
	    #previousViewport = { width: 0, height: 0 };
	    #originalOpener;
	    #lifecycle = {
	        DOMContentLoaded: new Deferred_js_1.Deferred(),
	        load: new Deferred_js_1.Deferred(),
	    };
	    #cdpTarget;
	    #defaultRealmDeferred = new Deferred_js_1.Deferred();
	    #browsingContextStorage;
	    #eventManager;
	    #logger;
	    #navigationTracker;
	    #realmStorage;
	    // The deferred will be resolved when the default realm is created.
	    #unhandledPromptBehavior;
	    // Set when the user prompt is opened. Required to provide the type in closing event.
	    #lastUserPromptType;
	    constructor(id, parentId, userContext, cdpTarget, eventManager, browsingContextStorage, realmStorage, url, originalOpener, unhandledPromptBehavior, logger) {
	        this.#cdpTarget = cdpTarget;
	        this.#id = id;
	        this.#parentId = parentId;
	        this.userContext = userContext;
	        this.#eventManager = eventManager;
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#realmStorage = realmStorage;
	        this.#unhandledPromptBehavior = unhandledPromptBehavior;
	        this.#logger = logger;
	        this.#originalOpener = originalOpener;
	        this.#navigationTracker = new NavigationTracker_js_1.NavigationTracker(url, id, eventManager, logger);
	    }
	    static create(id, parentId, userContext, cdpTarget, eventManager, browsingContextStorage, realmStorage, url, originalOpener, unhandledPromptBehavior, logger) {
	        const context = new _a(id, parentId, userContext, cdpTarget, eventManager, browsingContextStorage, realmStorage, url, originalOpener, unhandledPromptBehavior, logger);
	        context.#initListeners();
	        browsingContextStorage.addContext(context);
	        if (!context.isTopLevelContext()) {
	            context.parent.addChild(context.id);
	        }
	        // Hold on the `contextCreated` event until the target is unblocked. This is required,
	        // as the parent of the context can be set later in case of reconnecting to an
	        // existing browser instance + OOPiF.
	        eventManager.registerPromiseEvent(context.targetUnblockedOrThrow().then(() => {
	            return {
	                kind: 'success',
	                value: {
	                    type: 'event',
	                    method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated,
	                    params: {
	                        ...context.serializeToBidiValue(),
	                        // Hack to provide the initial URL of the context, as it can be changed
	                        // between the page target is attached and unblocked, as the page is not
	                        // fully paused in MPArch session (https://crbug.com/372842894).
	                        // TODO: remove once https://crbug.com/372842894 is addressed.
	                        url,
	                    },
	                },
	            };
	        }, (error) => {
	            return {
	                kind: 'error',
	                error,
	            };
	        }), context.id, protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated);
	        return context;
	    }
	    /**
	     * @see https://html.spec.whatwg.org/multipage/document-sequences.html#navigable
	     */
	    get navigableId() {
	        return this.#loaderId;
	    }
	    get navigationId() {
	        return this.#navigationTracker.currentNavigationId;
	    }
	    dispose(emitContextDestroyed) {
	        this.#navigationTracker.dispose();
	        this.#deleteAllChildren();
	        this.#realmStorage.deleteRealms({
	            browsingContextId: this.id,
	        });
	        // Delete context from the parent.
	        if (!this.isTopLevelContext()) {
	            this.parent.#children.delete(this.id);
	        }
	        // Fail all ongoing navigations.
	        this.#failLifecycleIfNotFinished();
	        if (emitContextDestroyed) {
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextDestroyed,
	                params: this.serializeToBidiValue(),
	            }, this.id);
	        }
	        this.#eventManager.clearBufferedEvents(this.id);
	        this.#browsingContextStorage.deleteContextById(this.id);
	    }
	    /** Returns the ID of this context. */
	    get id() {
	        return this.#id;
	    }
	    /** Returns the parent context ID. */
	    get parentId() {
	        return this.#parentId;
	    }
	    /** Sets the parent context ID and updates parent's children. */
	    set parentId(parentId) {
	        if (this.#parentId !== null) {
	            this.#logger?.(log_js_1.LogType.debugError, 'Parent context already set');
	            // Cannot do anything except logging, as throwing will stop event processing. So
	            // just return,
	            return;
	        }
	        this.#parentId = parentId;
	        if (!this.isTopLevelContext()) {
	            this.parent.addChild(this.id);
	        }
	    }
	    /** Returns the parent context. */
	    get parent() {
	        if (this.parentId === null) {
	            return null;
	        }
	        return this.#browsingContextStorage.getContext(this.parentId);
	    }
	    /** Returns all direct children contexts. */
	    get directChildren() {
	        return [...this.#children].map((id) => this.#browsingContextStorage.getContext(id));
	    }
	    /** Returns all children contexts, flattened. */
	    get allChildren() {
	        const children = this.directChildren;
	        return children.concat(...children.map((child) => child.allChildren));
	    }
	    /**
	     * Returns true if this is a top-level context.
	     * This is the case whenever the parent context ID is null.
	     */
	    isTopLevelContext() {
	        return this.#parentId === null;
	    }
	    get top() {
	        // eslint-disable-next-line @typescript-eslint/no-this-alias
	        let topContext = this;
	        let parent = topContext.parent;
	        while (parent) {
	            topContext = parent;
	            parent = topContext.parent;
	        }
	        return topContext;
	    }
	    addChild(childId) {
	        this.#children.add(childId);
	    }
	    #deleteAllChildren(emitContextDestroyed = false) {
	        this.directChildren.map((child) => child.dispose(emitContextDestroyed));
	    }
	    get cdpTarget() {
	        return this.#cdpTarget;
	    }
	    updateCdpTarget(cdpTarget) {
	        this.#cdpTarget = cdpTarget;
	        this.#initListeners();
	    }
	    get url() {
	        return this.#navigationTracker.url;
	    }
	    async lifecycleLoaded() {
	        await this.#lifecycle.load;
	    }
	    async targetUnblockedOrThrow() {
	        const result = await this.#cdpTarget.unblocked;
	        if (result.kind === 'error') {
	            throw result.error;
	        }
	    }
	    async getOrCreateSandbox(sandbox) {
	        if (sandbox === undefined || sandbox === '') {
	            // Default realm is not guaranteed to be created at this point, so return a deferred.
	            return await this.#defaultRealmDeferred;
	        }
	        let maybeSandboxes = this.#realmStorage.findRealms({
	            browsingContextId: this.id,
	            sandbox,
	        });
	        if (maybeSandboxes.length === 0) {
	            await this.#cdpTarget.cdpClient.sendCommand('Page.createIsolatedWorld', {
	                frameId: this.id,
	                worldName: sandbox,
	            });
	            // `Runtime.executionContextCreated` should be emitted by the time the
	            // previous command is done.
	            maybeSandboxes = this.#realmStorage.findRealms({
	                browsingContextId: this.id,
	                sandbox,
	            });
	            (0, assert_js_1.assert)(maybeSandboxes.length !== 0);
	        }
	        // It's possible for more than one sandbox to be created due to provisional
	        // frames. In this case, it's always the first one (i.e. the oldest one)
	        // that is more relevant since the user may have set that one up already
	        // through evaluation.
	        return maybeSandboxes[0];
	    }
	    serializeToBidiValue(maxDepth = 0, addParentField = true) {
	        return {
	            context: this.#id,
	            url: this.url,
	            userContext: this.userContext,
	            originalOpener: this.#originalOpener ?? null,
	            // TODO(#2646): Implement Client Window correctly
	            clientWindow: '',
	            children: maxDepth > 0
	                ? this.directChildren.map((c) => c.serializeToBidiValue(maxDepth - 1, false))
	                : null,
	            ...(addParentField ? { parent: this.#parentId } : {}),
	        };
	    }
	    onTargetInfoChanged(params) {
	        this.#navigationTracker.onTargetInfoChanged(params.targetInfo.url);
	    }
	    #initListeners() {
	        this.#cdpTarget.cdpClient.on('Network.loadingFailed', (params) => {
	            // Detect navigation errors like `net::ERR_BLOCKED_BY_RESPONSE`.
	            // Network related to navigation has request id equals to navigation's loader id.
	            this.#navigationTracker.networkLoadingFailed(params.requestId, params.errorText);
	        });
	        this.#cdpTarget.cdpClient.on('Page.frameNavigated', (params) => {
	            if (this.id !== params.frame.id) {
	                return;
	            }
	            this.#navigationTracker.frameNavigated(params.frame.url + (params.frame.urlFragment ?? ''), params.frame.loaderId, 
	            // `unreachableUrl` indicates if the navigation failed.
	            params.frame.unreachableUrl);
	            // At the point the page is initialized, all the nested iframes from the
	            // previous page are detached and realms are destroyed.
	            // Delete children from context.
	            this.#deleteAllChildren();
	            this.#documentChanged(params.frame.loaderId);
	        });
	        this.#cdpTarget.on("frameStartedNavigating" /* TargetEvents.FrameStartedNavigating */, (params) => {
	            this.#logger?.(log_js_1.LogType.debugInfo, `Received ${"frameStartedNavigating" /* TargetEvents.FrameStartedNavigating */} event`, params);
	            // The frame ID can be either a browsing context id, or not set in case of the frame
	            // is the top-level in the current CDP target.
	            const possibleFrameIds = [
	                this.id,
	                ...(this.cdpTarget.id === this.id ? [undefined] : []),
	            ];
	            if (!possibleFrameIds.includes(params.frameId)) {
	                return;
	            }
	            this.#navigationTracker.frameStartedNavigating(params.url, params.loaderId);
	        });
	        this.#cdpTarget.cdpClient.on('Page.navigatedWithinDocument', (params) => {
	            if (this.id !== params.frameId) {
	                return;
	            }
	            this.#navigationTracker.navigatedWithinDocument(params.url, params.navigationType);
	            if (params.navigationType === 'historyApi') {
	                this.#eventManager.registerEvent({
	                    type: 'event',
	                    method: 'browsingContext.historyUpdated',
	                    params: {
	                        context: this.id,
	                        url: this.#navigationTracker.url,
	                    },
	                }, this.id);
	                return;
	            }
	        });
	        this.#cdpTarget.cdpClient.on('Page.frameRequestedNavigation', (params) => {
	            if (this.id !== params.frameId) {
	                return;
	            }
	            this.#navigationTracker.frameRequestedNavigation(params.url);
	        });
	        this.#cdpTarget.cdpClient.on('Page.lifecycleEvent', (params) => {
	            if (this.id !== params.frameId) {
	                return;
	            }
	            if (params.name === 'init') {
	                this.#documentChanged(params.loaderId);
	                return;
	            }
	            if (params.name === 'commit') {
	                this.#loaderId = params.loaderId;
	                return;
	            }
	            // If mapper attached to the page late, it might miss init and
	            // commit events. In that case, save the first loaderId for this
	            // frameId.
	            if (!this.#loaderId) {
	                this.#loaderId = params.loaderId;
	            }
	            // Ignore event from not current navigation.
	            if (params.loaderId !== this.#loaderId) {
	                return;
	            }
	            switch (params.name) {
	                case 'DOMContentLoaded':
	                    if (!this.#navigationTracker.isInitialNavigation) {
	                        // Do not emit for the initial navigation.
	                        this.#eventManager.registerEvent({
	                            type: 'event',
	                            method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.DomContentLoaded,
	                            params: {
	                                context: this.id,
	                                navigation: this.#navigationTracker.currentNavigationId,
	                                timestamp: (0, time_js_1.getTimestamp)(),
	                                url: this.#navigationTracker.url,
	                            },
	                        }, this.id);
	                    }
	                    this.#lifecycle.DOMContentLoaded.resolve();
	                    break;
	                case 'load':
	                    if (!this.#navigationTracker.isInitialNavigation) {
	                        // Do not emit for the initial navigation.
	                        this.#eventManager.registerEvent({
	                            type: 'event',
	                            method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.Load,
	                            params: {
	                                context: this.id,
	                                navigation: this.#navigationTracker.currentNavigationId,
	                                timestamp: (0, time_js_1.getTimestamp)(),
	                                url: this.#navigationTracker.url,
	                            },
	                        }, this.id);
	                    }
	                    // The initial navigation is finished.
	                    this.#navigationTracker.loadPageEvent(params.loaderId);
	                    this.#lifecycle.load.resolve();
	                    break;
	            }
	        });
	        this.#cdpTarget.cdpClient.on('Runtime.executionContextCreated', (params) => {
	            const { auxData, name, uniqueId, id } = params.context;
	            if (!auxData || auxData.frameId !== this.id) {
	                return;
	            }
	            let origin;
	            let sandbox;
	            // Only these execution contexts are supported for now.
	            switch (auxData.type) {
	                case 'isolated':
	                    sandbox = name;
	                    // Sandbox should have the same origin as the context itself, but in CDP
	                    // it has an empty one.
	                    if (!this.#defaultRealmDeferred.isFinished) {
	                        this.#logger?.(log_js_1.LogType.debugError, 'Unexpectedly, isolated realm created before the default one');
	                    }
	                    origin = this.#defaultRealmDeferred.isFinished
	                        ? this.#defaultRealmDeferred.result.origin
	                        : // This fallback is not expected to be ever reached.
	                            '';
	                    break;
	                case 'default':
	                    origin = serializeOrigin(params.context.origin);
	                    break;
	                default:
	                    return;
	            }
	            const realm = new WindowRealm_js_1.WindowRealm(this.id, this.#browsingContextStorage, this.#cdpTarget.cdpClient, this.#eventManager, id, this.#logger, origin, uniqueId, this.#realmStorage, sandbox);
	            if (auxData.isDefault) {
	                this.#defaultRealmDeferred.resolve(realm);
	                // Initialize ChannelProxy listeners for all the channels of all the
	                // preload scripts related to this BrowsingContext.
	                // TODO: extend for not default realms by the sandbox name.
	                void Promise.all(this.#cdpTarget
	                    .getChannels()
	                    .map((channel) => channel.startListenerFromWindow(realm, this.#eventManager)));
	            }
	        });
	        this.#cdpTarget.cdpClient.on('Runtime.executionContextDestroyed', (params) => {
	            if (this.#defaultRealmDeferred.isFinished &&
	                this.#defaultRealmDeferred.result.executionContextId ===
	                    params.executionContextId) {
	                this.#defaultRealmDeferred = new Deferred_js_1.Deferred();
	            }
	            this.#realmStorage.deleteRealms({
	                cdpSessionId: this.#cdpTarget.cdpSessionId,
	                executionContextId: params.executionContextId,
	            });
	        });
	        this.#cdpTarget.cdpClient.on('Runtime.executionContextsCleared', () => {
	            if (!this.#defaultRealmDeferred.isFinished) {
	                this.#defaultRealmDeferred.reject(new protocol_js_1.UnknownErrorException('execution contexts cleared'));
	            }
	            this.#defaultRealmDeferred = new Deferred_js_1.Deferred();
	            this.#realmStorage.deleteRealms({
	                cdpSessionId: this.#cdpTarget.cdpSessionId,
	            });
	        });
	        this.#cdpTarget.cdpClient.on('Page.javascriptDialogClosed', (params) => {
	            const accepted = params.result;
	            if (this.#lastUserPromptType === undefined) {
	                this.#logger?.(log_js_1.LogType.debugError, 'Unexpectedly no opening prompt event before closing one');
	            }
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.UserPromptClosed,
	                params: {
	                    context: this.id,
	                    accepted,
	                    // `lastUserPromptType` should never be undefined here, so fallback to
	                    // `UNKNOWN`. The fallback is required to prevent tests from hanging while
	                    // waiting for the closing event. The cast is required, as the `UNKNOWN` value
	                    // is not standard.
	                    type: this.#lastUserPromptType ??
	                        'UNKNOWN',
	                    userText: accepted && params.userInput ? params.userInput : undefined,
	                },
	            }, this.id);
	            this.#lastUserPromptType = undefined;
	        });
	        this.#cdpTarget.cdpClient.on('Page.javascriptDialogOpening', (params) => {
	            const promptType = _a.#getPromptType(params.type);
	            if (params.type === 'beforeunload') {
	                this.#navigationTracker.beforeunload();
	            }
	            // Set the last prompt type to provide it in closing event.
	            this.#lastUserPromptType = promptType;
	            const promptHandler = this.#getPromptHandler(promptType);
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.UserPromptOpened,
	                params: {
	                    context: this.id,
	                    handler: promptHandler,
	                    type: promptType,
	                    message: params.message,
	                    ...(params.type === 'prompt'
	                        ? { defaultValue: params.defaultPrompt }
	                        : {}),
	                },
	            }, this.id);
	            switch (promptHandler) {
	                // Based on `unhandledPromptBehavior`, check if the prompt should be handled
	                // automatically (`accept`, `dismiss`) or wait for the user to do it.
	                case "accept" /* Session.UserPromptHandlerType.Accept */:
	                    void this.handleUserPrompt(true);
	                    break;
	                case "dismiss" /* Session.UserPromptHandlerType.Dismiss */:
	                    void this.handleUserPrompt(false);
	                    break;
	            }
	        });
	    }
	    static #getPromptType(cdpType) {
	        switch (cdpType) {
	            case 'alert':
	                return "alert" /* BrowsingContext.UserPromptType.Alert */;
	            case 'beforeunload':
	                return "beforeunload" /* BrowsingContext.UserPromptType.Beforeunload */;
	            case 'confirm':
	                return "confirm" /* BrowsingContext.UserPromptType.Confirm */;
	            case 'prompt':
	                return "prompt" /* BrowsingContext.UserPromptType.Prompt */;
	        }
	    }
	    #getPromptHandler(promptType) {
	        const defaultPromptHandler = "dismiss" /* Session.UserPromptHandlerType.Dismiss */;
	        switch (promptType) {
	            case "alert" /* BrowsingContext.UserPromptType.Alert */:
	                return (this.#unhandledPromptBehavior?.alert ??
	                    this.#unhandledPromptBehavior?.default ??
	                    defaultPromptHandler);
	            case "beforeunload" /* BrowsingContext.UserPromptType.Beforeunload */:
	                return (this.#unhandledPromptBehavior?.beforeUnload ??
	                    this.#unhandledPromptBehavior?.default ??
	                    "accept" /* Session.UserPromptHandlerType.Accept */);
	            case "confirm" /* BrowsingContext.UserPromptType.Confirm */:
	                return (this.#unhandledPromptBehavior?.confirm ??
	                    this.#unhandledPromptBehavior?.default ??
	                    defaultPromptHandler);
	            case "prompt" /* BrowsingContext.UserPromptType.Prompt */:
	                return (this.#unhandledPromptBehavior?.prompt ??
	                    this.#unhandledPromptBehavior?.default ??
	                    defaultPromptHandler);
	        }
	    }
	    #documentChanged(loaderId) {
	        if (loaderId === undefined || this.#loaderId === loaderId) {
	            return;
	        }
	        // Document changed.
	        this.#resetLifecycleIfFinished();
	        this.#loaderId = loaderId;
	        // Delete all child iframes and notify about top level destruction.
	        this.#deleteAllChildren(true);
	    }
	    #resetLifecycleIfFinished() {
	        if (this.#lifecycle.DOMContentLoaded.isFinished) {
	            this.#lifecycle.DOMContentLoaded = new Deferred_js_1.Deferred();
	        }
	        else {
	            this.#logger?.(_a.LOGGER_PREFIX, 'Document changed (DOMContentLoaded)');
	        }
	        if (this.#lifecycle.load.isFinished) {
	            this.#lifecycle.load = new Deferred_js_1.Deferred();
	        }
	        else {
	            this.#logger?.(_a.LOGGER_PREFIX, 'Document changed (load)');
	        }
	    }
	    #failLifecycleIfNotFinished() {
	        if (!this.#lifecycle.DOMContentLoaded.isFinished) {
	            this.#lifecycle.DOMContentLoaded.reject(new protocol_js_1.UnknownErrorException('navigation canceled'));
	        }
	        if (!this.#lifecycle.load.isFinished) {
	            this.#lifecycle.load.reject(new protocol_js_1.UnknownErrorException('navigation canceled'));
	        }
	    }
	    async navigate(url, wait) {
	        try {
	            new URL(url);
	        }
	        catch {
	            throw new protocol_js_1.InvalidArgumentException(`Invalid URL: ${url}`);
	        }
	        const commandNavigation = this.#navigationTracker.createPendingNavigation(url);
	        // Navigate and wait for the result. If the navigation fails, the error event is
	        // emitted and the promise is rejected.
	        const cdpNavigatePromise = (async () => {
	            const cdpNavigateResult = await this.#cdpTarget.cdpClient.sendCommand('Page.navigate', {
	                url,
	                frameId: this.id,
	            });
	            if (cdpNavigateResult.errorText) {
	                // If navigation failed, no pending navigation is left.
	                this.#navigationTracker.failNavigation(commandNavigation, cdpNavigateResult.errorText);
	                throw new protocol_js_1.UnknownErrorException(cdpNavigateResult.errorText);
	            }
	            this.#navigationTracker.navigationCommandFinished(commandNavigation, cdpNavigateResult.loaderId);
	            this.#documentChanged(cdpNavigateResult.loaderId);
	        })();
	        if (wait === "none" /* BrowsingContext.ReadinessState.None */) {
	            return {
	                navigation: commandNavigation.navigationId,
	                url,
	            };
	        }
	        // Wait for either the navigation is finished or canceled by another navigation.
	        const result = await Promise.race([
	            // No `loaderId` means same-document navigation.
	            this.#waitNavigation(wait, cdpNavigatePromise),
	            // Throw an error if the navigation is canceled.
	            commandNavigation.finished,
	        ]);
	        if (result instanceof NavigationTracker_js_1.NavigationResult) {
	            if (
	            // TODO: check after decision on the spec is done:
	            //  https://github.com/w3c/webdriver-bidi/issues/799.
	            result.eventName === "browsingContext.navigationAborted" /* NavigationEventName.NavigationAborted */ ||
	                result.eventName === "browsingContext.navigationFailed" /* NavigationEventName.NavigationFailed */) {
	                throw new protocol_js_1.UnknownErrorException(result.message ?? 'unknown exception');
	            }
	        }
	        return {
	            navigation: commandNavigation.navigationId,
	            // Url can change due to redirects. Get the one from commandNavigation.
	            url: commandNavigation.url,
	        };
	    }
	    async #waitNavigation(wait, cdpCommandPromise) {
	        switch (wait) {
	            case "none" /* BrowsingContext.ReadinessState.None */:
	                return;
	            case "interactive" /* BrowsingContext.ReadinessState.Interactive */:
	                await cdpCommandPromise;
	                await this.#lifecycle.DOMContentLoaded;
	                return;
	            case "complete" /* BrowsingContext.ReadinessState.Complete */:
	                await cdpCommandPromise;
	                await this.#lifecycle.load;
	                return;
	        }
	    }
	    // TODO: support concurrent navigations analogous to `navigate`.
	    async reload(ignoreCache, wait) {
	        await this.targetUnblockedOrThrow();
	        this.#resetLifecycleIfFinished();
	        const commandNavigation = this.#navigationTracker.createPendingNavigation(this.#navigationTracker.url);
	        const cdpReloadPromise = this.#cdpTarget.cdpClient.sendCommand('Page.reload', {
	            ignoreCache,
	        });
	        // Wait for either the navigation is finished or canceled by another navigation.
	        const result = await Promise.race([
	            // No `loaderId` means same-document navigation.
	            this.#waitNavigation(wait, cdpReloadPromise),
	            // Throw an error if the navigation is canceled.
	            commandNavigation.finished,
	        ]);
	        if (result instanceof NavigationTracker_js_1.NavigationResult) {
	            if (result.eventName === "browsingContext.navigationAborted" /* NavigationEventName.NavigationAborted */ ||
	                result.eventName === "browsingContext.navigationFailed" /* NavigationEventName.NavigationFailed */) {
	                throw new protocol_js_1.UnknownErrorException(result.message ?? 'unknown exception');
	            }
	        }
	        return {
	            navigation: commandNavigation.navigationId,
	            // Url can change due to redirects. Get the one from commandNavigation.
	            url: commandNavigation.url,
	        };
	    }
	    async setViewport(viewport, devicePixelRatio) {
	        if (viewport === null && devicePixelRatio === null) {
	            await this.#cdpTarget.cdpClient.sendCommand('Emulation.clearDeviceMetricsOverride');
	        }
	        else {
	            try {
	                let appliedViewport;
	                if (viewport === undefined) {
	                    appliedViewport = this.#previousViewport;
	                }
	                else if (viewport === null) {
	                    appliedViewport = {
	                        width: 0,
	                        height: 0,
	                    };
	                }
	                else {
	                    appliedViewport = viewport;
	                }
	                this.#previousViewport = appliedViewport;
	                await this.#cdpTarget.cdpClient.sendCommand('Emulation.setDeviceMetricsOverride', {
	                    width: this.#previousViewport.width,
	                    height: this.#previousViewport.height,
	                    deviceScaleFactor: devicePixelRatio ? devicePixelRatio : 0,
	                    mobile: false,
	                    dontSetVisibleSize: true,
	                });
	            }
	            catch (err) {
	                if (err.message.startsWith(
	                // https://crsrc.org/c/content/browser/devtools/protocol/emulation_handler.cc;l=257;drc=2f6eee84cf98d4227e7c41718dd71b82f26d90ff
	                'Width and height values must be positive')) {
	                    throw new protocol_js_1.UnsupportedOperationException('Provided viewport dimensions are not supported');
	                }
	                throw err;
	            }
	        }
	    }
	    async handleUserPrompt(accept, userText) {
	        await this.#cdpTarget.cdpClient.sendCommand('Page.handleJavaScriptDialog', {
	            accept: accept ?? true,
	            promptText: userText,
	        });
	    }
	    async activate() {
	        await this.#cdpTarget.cdpClient.sendCommand('Page.bringToFront');
	    }
	    async captureScreenshot(params) {
	        if (!this.isTopLevelContext()) {
	            throw new protocol_js_1.UnsupportedOperationException(`Non-top-level 'context' (${params.context}) is currently not supported`);
	        }
	        const formatParameters = getImageFormatParameters(params);
	        let captureBeyondViewport = false;
	        let script;
	        params.origin ??= 'viewport';
	        switch (params.origin) {
	            case 'document': {
	                script = String(() => {
	                    const element = document.documentElement;
	                    return {
	                        x: 0,
	                        y: 0,
	                        width: element.scrollWidth,
	                        height: element.scrollHeight,
	                    };
	                });
	                captureBeyondViewport = true;
	                break;
	            }
	            case 'viewport': {
	                script = String(() => {
	                    const viewport = window.visualViewport;
	                    return {
	                        x: viewport.pageLeft,
	                        y: viewport.pageTop,
	                        width: viewport.width,
	                        height: viewport.height,
	                    };
	                });
	                break;
	            }
	        }
	        const realm = await this.getOrCreateSandbox(undefined);
	        const originResult = await realm.callFunction(script, false);
	        (0, assert_js_1.assert)(originResult.type === 'success');
	        const origin = deserializeDOMRect(originResult.result);
	        (0, assert_js_1.assert)(origin);
	        let rect = origin;
	        if (params.clip) {
	            const clip = params.clip;
	            if (params.origin === 'viewport' && clip.type === 'box') {
	                // For viewport origin, the clip is relative to the viewport, while the CDP
	                // screenshot is relative to the document. So correction for the viewport position
	                // is required.
	                clip.x += origin.x;
	                clip.y += origin.y;
	            }
	            rect = getIntersectionRect(await this.#parseRect(clip), origin);
	        }
	        if (rect.width === 0 || rect.height === 0) {
	            throw new protocol_js_1.UnableToCaptureScreenException(`Unable to capture screenshot with zero dimensions: width=${rect.width}, height=${rect.height}`);
	        }
	        return await this.#cdpTarget.cdpClient.sendCommand('Page.captureScreenshot', {
	            clip: { ...rect, scale: 1.0 },
	            ...formatParameters,
	            captureBeyondViewport,
	        });
	    }
	    async print(params) {
	        if (!this.isTopLevelContext()) {
	            throw new protocol_js_1.UnsupportedOperationException('Printing of non-top level contexts is not supported');
	        }
	        const cdpParams = {};
	        if (params.background !== undefined) {
	            cdpParams.printBackground = params.background;
	        }
	        if (params.margin?.bottom !== undefined) {
	            cdpParams.marginBottom = (0, unitConversions_js_1.inchesFromCm)(params.margin.bottom);
	        }
	        if (params.margin?.left !== undefined) {
	            cdpParams.marginLeft = (0, unitConversions_js_1.inchesFromCm)(params.margin.left);
	        }
	        if (params.margin?.right !== undefined) {
	            cdpParams.marginRight = (0, unitConversions_js_1.inchesFromCm)(params.margin.right);
	        }
	        if (params.margin?.top !== undefined) {
	            cdpParams.marginTop = (0, unitConversions_js_1.inchesFromCm)(params.margin.top);
	        }
	        if (params.orientation !== undefined) {
	            cdpParams.landscape = params.orientation === 'landscape';
	        }
	        if (params.page?.height !== undefined) {
	            cdpParams.paperHeight = (0, unitConversions_js_1.inchesFromCm)(params.page.height);
	        }
	        if (params.page?.width !== undefined) {
	            cdpParams.paperWidth = (0, unitConversions_js_1.inchesFromCm)(params.page.width);
	        }
	        if (params.pageRanges !== undefined) {
	            for (const range of params.pageRanges) {
	                if (typeof range === 'number') {
	                    continue;
	                }
	                const rangeParts = range.split('-');
	                if (rangeParts.length < 1 || rangeParts.length > 2) {
	                    throw new protocol_js_1.InvalidArgumentException(`Invalid page range: ${range} is not a valid integer range.`);
	                }
	                if (rangeParts.length === 1) {
	                    void parseInteger(rangeParts[0] ?? '');
	                    continue;
	                }
	                let lowerBound;
	                let upperBound;
	                const [rangeLowerPart = '', rangeUpperPart = ''] = rangeParts;
	                if (rangeLowerPart === '') {
	                    lowerBound = 1;
	                }
	                else {
	                    lowerBound = parseInteger(rangeLowerPart);
	                }
	                if (rangeUpperPart === '') {
	                    upperBound = Number.MAX_SAFE_INTEGER;
	                }
	                else {
	                    upperBound = parseInteger(rangeUpperPart);
	                }
	                if (lowerBound > upperBound) {
	                    throw new protocol_js_1.InvalidArgumentException(`Invalid page range: ${rangeLowerPart} > ${rangeUpperPart}`);
	                }
	            }
	            cdpParams.pageRanges = params.pageRanges.join(',');
	        }
	        if (params.scale !== undefined) {
	            cdpParams.scale = params.scale;
	        }
	        if (params.shrinkToFit !== undefined) {
	            cdpParams.preferCSSPageSize = !params.shrinkToFit;
	        }
	        try {
	            const result = await this.#cdpTarget.cdpClient.sendCommand('Page.printToPDF', cdpParams);
	            return {
	                data: result.data,
	            };
	        }
	        catch (error) {
	            // Effectively zero dimensions.
	            if (error.message ===
	                'invalid print parameters: content area is empty') {
	                throw new protocol_js_1.UnsupportedOperationException(error.message);
	            }
	            throw error;
	        }
	    }
	    /**
	     * See
	     * https://w3c.github.io/webdriver-bidi/#:~:text=If%20command%20parameters%20contains%20%22clip%22%3A
	     */
	    async #parseRect(clip) {
	        switch (clip.type) {
	            case 'box':
	                return { x: clip.x, y: clip.y, width: clip.width, height: clip.height };
	            case 'element': {
	                // TODO: #1213: Use custom sandbox specifically for Chromium BiDi
	                const sandbox = await this.getOrCreateSandbox(undefined);
	                const result = await sandbox.callFunction(String((element) => {
	                    return element instanceof Element;
	                }), false, { type: 'undefined' }, [clip.element]);
	                if (result.type === 'exception') {
	                    throw new protocol_js_1.NoSuchElementException(`Element '${clip.element.sharedId}' was not found`);
	                }
	                (0, assert_js_1.assert)(result.result.type === 'boolean');
	                if (!result.result.value) {
	                    throw new protocol_js_1.NoSuchElementException(`Node '${clip.element.sharedId}' is not an Element`);
	                }
	                {
	                    const result = await sandbox.callFunction(String((element) => {
	                        const rect = element.getBoundingClientRect();
	                        return {
	                            x: rect.x,
	                            y: rect.y,
	                            height: rect.height,
	                            width: rect.width,
	                        };
	                    }), false, { type: 'undefined' }, [clip.element]);
	                    (0, assert_js_1.assert)(result.type === 'success');
	                    const rect = deserializeDOMRect(result.result);
	                    if (!rect) {
	                        throw new protocol_js_1.UnableToCaptureScreenException(`Could not get bounding box for Element '${clip.element.sharedId}'`);
	                    }
	                    return rect;
	                }
	            }
	        }
	    }
	    async close() {
	        await this.#cdpTarget.cdpClient.sendCommand('Page.close');
	    }
	    async traverseHistory(delta) {
	        if (delta === 0) {
	            return;
	        }
	        const history = await this.#cdpTarget.cdpClient.sendCommand('Page.getNavigationHistory');
	        const entry = history.entries[history.currentIndex + delta];
	        if (!entry) {
	            throw new protocol_js_1.NoSuchHistoryEntryException(`No history entry at delta ${delta}`);
	        }
	        await this.#cdpTarget.cdpClient.sendCommand('Page.navigateToHistoryEntry', {
	            entryId: entry.id,
	        });
	    }
	    async toggleModulesIfNeeded() {
	        await Promise.all([
	            this.#cdpTarget.toggleNetworkIfNeeded(),
	            this.#cdpTarget.toggleDeviceAccessIfNeeded(),
	        ]);
	    }
	    async locateNodes(params) {
	        // TODO: create a dedicated sandbox instead of `#defaultRealm`.
	        return await this.#locateNodesByLocator(await this.#defaultRealmDeferred, params.locator, params.startNodes ?? [], params.maxNodeCount, params.serializationOptions);
	    }
	    async #getLocatorDelegate(realm, locator, maxNodeCount, startNodes) {
	        switch (locator.type) {
	            case 'css':
	                return {
	                    functionDeclaration: String((cssSelector, maxNodeCount, ...startNodes) => {
	                        const locateNodesUsingCss = (element) => {
	                            if (!(element instanceof HTMLElement ||
	                                element instanceof Document ||
	                                element instanceof DocumentFragment)) {
	                                throw new Error('startNodes in css selector should be HTMLElement, Document or DocumentFragment');
	                            }
	                            return [...element.querySelectorAll(cssSelector)];
	                        };
	                        startNodes = startNodes.length > 0 ? startNodes : [document];
	                        const returnedNodes = startNodes
	                            .map((startNode) => 
	                        // TODO: stop search early if `maxNodeCount` is reached.
	                        locateNodesUsingCss(startNode))
	                            .flat(1);
	                        return maxNodeCount === 0
	                            ? returnedNodes
	                            : returnedNodes.slice(0, maxNodeCount);
	                    }),
	                    argumentsLocalValues: [
	                        // `cssSelector`
	                        { type: 'string', value: locator.value },
	                        // `maxNodeCount` with `0` means no limit.
	                        { type: 'number', value: maxNodeCount ?? 0 },
	                        // `startNodes`
	                        ...startNodes,
	                    ],
	                };
	            case 'xpath':
	                return {
	                    functionDeclaration: String((xPathSelector, maxNodeCount, ...startNodes) => {
	                        // https://w3c.github.io/webdriver-bidi/#locate-nodes-using-xpath
	                        const evaluator = new XPathEvaluator();
	                        const expression = evaluator.createExpression(xPathSelector);
	                        const locateNodesUsingXpath = (element) => {
	                            const xPathResult = expression.evaluate(element, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE);
	                            const returnedNodes = [];
	                            for (let i = 0; i < xPathResult.snapshotLength; i++) {
	                                returnedNodes.push(xPathResult.snapshotItem(i));
	                            }
	                            return returnedNodes;
	                        };
	                        startNodes = startNodes.length > 0 ? startNodes : [document];
	                        const returnedNodes = startNodes
	                            .map((startNode) => 
	                        // TODO: stop search early if `maxNodeCount` is reached.
	                        locateNodesUsingXpath(startNode))
	                            .flat(1);
	                        return maxNodeCount === 0
	                            ? returnedNodes
	                            : returnedNodes.slice(0, maxNodeCount);
	                    }),
	                    argumentsLocalValues: [
	                        // `xPathSelector`
	                        { type: 'string', value: locator.value },
	                        // `maxNodeCount` with `0` means no limit.
	                        { type: 'number', value: maxNodeCount ?? 0 },
	                        // `startNodes`
	                        ...startNodes,
	                    ],
	                };
	            case 'innerText':
	                // https://w3c.github.io/webdriver-bidi/#locate-nodes-using-inner-text
	                if (locator.value === '') {
	                    throw new protocol_js_1.InvalidSelectorException('innerText locator cannot be empty');
	                }
	                return {
	                    functionDeclaration: String((innerTextSelector, fullMatch, ignoreCase, maxNodeCount, maxDepth, ...startNodes) => {
	                        const searchText = ignoreCase
	                            ? innerTextSelector.toUpperCase()
	                            : innerTextSelector;
	                        const locateNodesUsingInnerText = (node, currentMaxDepth) => {
	                            const returnedNodes = [];
	                            if (node instanceof DocumentFragment ||
	                                node instanceof Document) {
	                                const children = [...node.children];
	                                children.forEach((child) => 
	                                // `currentMaxDepth` is not decremented intentionally according to
	                                // https://github.com/w3c/webdriver-bidi/pull/713.
	                                returnedNodes.push(...locateNodesUsingInnerText(child, currentMaxDepth)));
	                                return returnedNodes;
	                            }
	                            if (!(node instanceof HTMLElement)) {
	                                return [];
	                            }
	                            const element = node;
	                            const nodeInnerText = ignoreCase
	                                ? element.innerText?.toUpperCase()
	                                : element.innerText;
	                            if (!nodeInnerText.includes(searchText)) {
	                                return [];
	                            }
	                            const childNodes = [];
	                            for (const child of element.children) {
	                                if (child instanceof HTMLElement) {
	                                    childNodes.push(child);
	                                }
	                            }
	                            if (childNodes.length === 0) {
	                                if (fullMatch && nodeInnerText === searchText) {
	                                    returnedNodes.push(element);
	                                }
	                                else {
	                                    if (!fullMatch) {
	                                        // Note: `nodeInnerText.includes(searchText)` is already checked
	                                        returnedNodes.push(element);
	                                    }
	                                }
	                            }
	                            else {
	                                const childNodeMatches = 
	                                // Don't search deeper if `maxDepth` is reached.
	                                currentMaxDepth <= 0
	                                    ? []
	                                    : childNodes
	                                        .map((child) => locateNodesUsingInnerText(child, currentMaxDepth - 1))
	                                        .flat(1);
	                                if (childNodeMatches.length === 0) {
	                                    // Note: `nodeInnerText.includes(searchText)` is already checked
	                                    if (!fullMatch || nodeInnerText === searchText) {
	                                        returnedNodes.push(element);
	                                    }
	                                }
	                                else {
	                                    returnedNodes.push(...childNodeMatches);
	                                }
	                            }
	                            // TODO: stop search early if `maxNodeCount` is reached.
	                            return returnedNodes;
	                        };
	                        // TODO: stop search early if `maxNodeCount` is reached.
	                        startNodes = startNodes.length > 0 ? startNodes : [document];
	                        const returnedNodes = startNodes
	                            .map((startNode) => 
	                        // TODO: stop search early if `maxNodeCount` is reached.
	                        locateNodesUsingInnerText(startNode, maxDepth))
	                            .flat(1);
	                        return maxNodeCount === 0
	                            ? returnedNodes
	                            : returnedNodes.slice(0, maxNodeCount);
	                    }),
	                    argumentsLocalValues: [
	                        // `innerTextSelector`
	                        { type: 'string', value: locator.value },
	                        // `fullMatch` with default `true`.
	                        { type: 'boolean', value: locator.matchType !== 'partial' },
	                        // `ignoreCase` with default `false`.
	                        { type: 'boolean', value: locator.ignoreCase === true },
	                        // `maxNodeCount` with `0` means no limit.
	                        { type: 'number', value: maxNodeCount ?? 0 },
	                        // `maxDepth` with default `1000` (same as default full serialization depth).
	                        { type: 'number', value: locator.maxDepth ?? 1000 },
	                        // `startNodes`
	                        ...startNodes,
	                    ],
	                };
	            case 'accessibility': {
	                // https://w3c.github.io/webdriver-bidi/#locate-nodes-using-accessibility-attributes
	                if (!locator.value.name && !locator.value.role) {
	                    throw new protocol_js_1.InvalidSelectorException('Either name or role has to be specified');
	                }
	                // The next two commands cause a11y caches for the target to be
	                // preserved. We probably do not need to disable them if the
	                // client is using a11y features, but we could by calling
	                // Accessibility.disable.
	                await Promise.all([
	                    this.#cdpTarget.cdpClient.sendCommand('Accessibility.enable'),
	                    this.#cdpTarget.cdpClient.sendCommand('Accessibility.getRootAXNode'),
	                ]);
	                const bindings = await realm.evaluate(
	                /* expression=*/ '({getAccessibleName, getAccessibleRole})', 
	                /* awaitPromise=*/ false, "root" /* Script.ResultOwnership.Root */, 
	                /* serializationOptions= */ undefined, 
	                /* userActivation=*/ false, 
	                /* includeCommandLineApi=*/ true);
	                if (bindings.type !== 'success') {
	                    throw new Error('Could not get bindings');
	                }
	                if (bindings.result.type !== 'object') {
	                    throw new Error('Could not get bindings');
	                }
	                return {
	                    functionDeclaration: String((name, role, bindings, maxNodeCount, ...startNodes) => {
	                        const returnedNodes = [];
	                        let aborted = false;
	                        function collect(contextNodes, selector) {
	                            if (aborted) {
	                                return;
	                            }
	                            for (const contextNode of contextNodes) {
	                                let match = true;
	                                if (selector.role) {
	                                    const role = bindings.getAccessibleRole(contextNode);
	                                    if (selector.role !== role) {
	                                        match = false;
	                                    }
	                                }
	                                if (selector.name) {
	                                    const name = bindings.getAccessibleName(contextNode);
	                                    if (selector.name !== name) {
	                                        match = false;
	                                    }
	                                }
	                                if (match) {
	                                    if (maxNodeCount !== 0 &&
	                                        returnedNodes.length === maxNodeCount) {
	                                        aborted = true;
	                                        break;
	                                    }
	                                    returnedNodes.push(contextNode);
	                                }
	                                const childNodes = [];
	                                for (const child of contextNode.children) {
	                                    if (child instanceof HTMLElement) {
	                                        childNodes.push(child);
	                                    }
	                                }
	                                collect(childNodes, selector);
	                            }
	                        }
	                        startNodes =
	                            startNodes.length > 0
	                                ? startNodes
	                                : Array.from(document.documentElement.children).filter((c) => c instanceof HTMLElement);
	                        collect(startNodes, {
	                            role,
	                            name,
	                        });
	                        return returnedNodes;
	                    }),
	                    argumentsLocalValues: [
	                        // `name`
	                        { type: 'string', value: locator.value.name || '' },
	                        // `role`
	                        { type: 'string', value: locator.value.role || '' },
	                        // `bindings`.
	                        { handle: bindings.result.handle },
	                        // `maxNodeCount` with `0` means no limit.
	                        { type: 'number', value: maxNodeCount ?? 0 },
	                        // `startNodes`
	                        ...startNodes,
	                    ],
	                };
	            }
	        }
	    }
	    async #locateNodesByLocator(realm, locator, startNodes, maxNodeCount, serializationOptions) {
	        const locatorDelegate = await this.#getLocatorDelegate(realm, locator, maxNodeCount, startNodes);
	        serializationOptions = {
	            ...serializationOptions,
	            // The returned object is an array of nodes, so no need in deeper JS serialization.
	            maxObjectDepth: 1,
	        };
	        const locatorResult = await realm.callFunction(locatorDelegate.functionDeclaration, false, { type: 'undefined' }, locatorDelegate.argumentsLocalValues, "none" /* Script.ResultOwnership.None */, serializationOptions);
	        if (locatorResult.type !== 'success') {
	            this.#logger?.(_a.LOGGER_PREFIX, 'Failed locateNodesByLocator', locatorResult);
	            // Heuristic to detect invalid selector for different types of selectors.
	            if (
	            // CSS selector.
	            locatorResult.exceptionDetails.text?.endsWith('is not a valid selector.') ||
	                // XPath selector.
	                locatorResult.exceptionDetails.text?.endsWith('is not a valid XPath expression.')) {
	                throw new protocol_js_1.InvalidSelectorException(`Not valid selector ${typeof locator.value === 'string' ? locator.value : JSON.stringify(locator.value)}`);
	            }
	            // Heuristic to detect if the `startNode` is not an `HTMLElement` in css selector.
	            if (locatorResult.exceptionDetails.text ===
	                'Error: startNodes in css selector should be HTMLElement, Document or DocumentFragment') {
	                throw new protocol_js_1.InvalidArgumentException('startNodes in css selector should be HTMLElement, Document or DocumentFragment');
	            }
	            throw new protocol_js_1.UnknownErrorException(`Unexpected error in selector script: ${locatorResult.exceptionDetails.text}`);
	        }
	        if (locatorResult.result.type !== 'array') {
	            throw new protocol_js_1.UnknownErrorException(`Unexpected selector script result type: ${locatorResult.result.type}`);
	        }
	        // Check there are no non-node elements in the result.
	        const nodes = locatorResult.result.value.map((value) => {
	            if (value.type !== 'node') {
	                throw new protocol_js_1.UnknownErrorException(`Unexpected selector script result element: ${value.type}`);
	            }
	            return value;
	        });
	        return { nodes };
	    }
	};
	BrowsingContextImpl.BrowsingContextImpl = BrowsingContextImpl$1;
	_a = BrowsingContextImpl$1;
	function serializeOrigin(origin) {
	    // https://html.spec.whatwg.org/multipage/origin.html#ascii-serialisation-of-an-origin
	    if (['://', ''].includes(origin)) {
	        origin = 'null';
	    }
	    return origin;
	}
	function getImageFormatParameters(params) {
	    const { quality, type } = params.format ?? {
	        type: 'image/png',
	    };
	    switch (type) {
	        case 'image/png': {
	            return { format: 'png' };
	        }
	        case 'image/jpeg': {
	            return {
	                format: 'jpeg',
	                ...(quality === undefined ? {} : { quality: Math.round(quality * 100) }),
	            };
	        }
	        case 'image/webp': {
	            return {
	                format: 'webp',
	                ...(quality === undefined ? {} : { quality: Math.round(quality * 100) }),
	            };
	        }
	    }
	    throw new protocol_js_1.InvalidArgumentException(`Image format '${type}' is not a supported format`);
	}
	function deserializeDOMRect(result) {
	    if (result.type !== 'object' || result.value === undefined) {
	        return;
	    }
	    const x = result.value.find(([key]) => {
	        return key === 'x';
	    })?.[1];
	    const y = result.value.find(([key]) => {
	        return key === 'y';
	    })?.[1];
	    const height = result.value.find(([key]) => {
	        return key === 'height';
	    })?.[1];
	    const width = result.value.find(([key]) => {
	        return key === 'width';
	    })?.[1];
	    if (x?.type !== 'number' ||
	        y?.type !== 'number' ||
	        height?.type !== 'number' ||
	        width?.type !== 'number') {
	        return;
	    }
	    return {
	        x: x.value,
	        y: y.value,
	        width: width.value,
	        height: height.value,
	    };
	}
	/** @see https://w3c.github.io/webdriver-bidi/#normalize-rect */
	function normalizeRect(box) {
	    return {
	        ...(box.width < 0
	            ? {
	                x: box.x + box.width,
	                width: -box.width,
	            }
	            : {
	                x: box.x,
	                width: box.width,
	            }),
	        ...(box.height < 0
	            ? {
	                y: box.y + box.height,
	                height: -box.height,
	            }
	            : {
	                y: box.y,
	                height: box.height,
	            }),
	    };
	}
	/** @see https://w3c.github.io/webdriver-bidi/#rectangle-intersection */
	function getIntersectionRect(first, second) {
	    first = normalizeRect(first);
	    second = normalizeRect(second);
	    const x = Math.max(first.x, second.x);
	    const y = Math.max(first.y, second.y);
	    return {
	        x,
	        y,
	        width: Math.max(Math.min(first.x + first.width, second.x + second.width) - x, 0),
	        height: Math.max(Math.min(first.y + first.height, second.y + second.height) - y, 0),
	    };
	}
	function parseInteger(value) {
	    value = value.trim();
	    if (!/^[0-9]+$/.test(value)) {
	        throw new protocol_js_1.InvalidArgumentException(`Invalid integer: ${value}`);
	    }
	    return parseInt(value);
	}
	
	return BrowsingContextImpl;
}

var WorkerRealm = {};

var hasRequiredWorkerRealm;

function requireWorkerRealm () {
	if (hasRequiredWorkerRealm) return WorkerRealm;
	hasRequiredWorkerRealm = 1;
	/**
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(WorkerRealm, "__esModule", { value: true });
	WorkerRealm.WorkerRealm = void 0;
	const Realm_js_1 = requireRealm();
	let WorkerRealm$1 = class WorkerRealm extends Realm_js_1.Realm {
	    #realmType;
	    #ownerRealms;
	    constructor(cdpClient, eventManager, executionContextId, logger, origin, ownerRealms, realmId, realmStorage, realmType) {
	        super(cdpClient, eventManager, executionContextId, logger, origin, realmId, realmStorage);
	        this.#ownerRealms = ownerRealms;
	        this.#realmType = realmType;
	        this.initialize();
	    }
	    get associatedBrowsingContexts() {
	        return this.#ownerRealms.flatMap((realm) => realm.associatedBrowsingContexts);
	    }
	    get realmType() {
	        return this.#realmType;
	    }
	    get source() {
	        return {
	            realm: this.realmId,
	            // This is a hack to make Puppeteer able to track workers.
	            // TODO: remove after Puppeteer tracks workers by owners and use the base version.
	            context: this.associatedBrowsingContexts[0]?.id,
	        };
	    }
	    get realmInfo() {
	        const owners = this.#ownerRealms.map((realm) => realm.realmId);
	        const { realmType } = this;
	        switch (realmType) {
	            case 'dedicated-worker': {
	                const owner = owners[0];
	                if (owner === undefined || owners.length !== 1) {
	                    throw new Error('Dedicated worker must have exactly one owner');
	                }
	                return {
	                    ...this.baseInfo,
	                    type: realmType,
	                    owners: [owner],
	                };
	            }
	            case 'service-worker':
	            case 'shared-worker': {
	                return {
	                    ...this.baseInfo,
	                    type: realmType,
	                };
	            }
	        }
	    }
	};
	WorkerRealm.WorkerRealm = WorkerRealm$1;
	
	return WorkerRealm;
}

var CdpTarget = {};

var LogManager = {};

var logHelper = {};

var hasRequiredLogHelper;

function requireLogHelper () {
	if (hasRequiredLogHelper) return logHelper;
	hasRequiredLogHelper = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(logHelper, "__esModule", { value: true });
	logHelper.logMessageFormatter = logMessageFormatter;
	logHelper.getRemoteValuesText = getRemoteValuesText;
	const assert_js_1 = requireAssert();
	const specifiers = ['%s', '%d', '%i', '%f', '%o', '%O', '%c'];
	function isFormatSpecifier(str) {
	    return specifiers.some((spec) => str.includes(spec));
	}
	/**
	 * @param args input remote values to be format printed
	 * @return parsed text of the remote values in specific format
	 */
	function logMessageFormatter(args) {
	    let output = '';
	    const argFormat = args[0].value.toString();
	    const argValues = args.slice(1, undefined);
	    const tokens = argFormat.split(new RegExp(specifiers.map((spec) => `(${spec})`).join('|'), 'g'));
	    for (const token of tokens) {
	        if (token === undefined || token === '') {
	            continue;
	        }
	        if (isFormatSpecifier(token)) {
	            const arg = argValues.shift();
	            // raise an exception when less value is provided
	            (0, assert_js_1.assert)(arg, `Less value is provided: "${getRemoteValuesText(args, false)}"`);
	            if (token === '%s') {
	                output += stringFromArg(arg);
	            }
	            else if (token === '%d' || token === '%i') {
	                if (arg.type === 'bigint' ||
	                    arg.type === 'number' ||
	                    arg.type === 'string') {
	                    output += parseInt(arg.value.toString(), 10);
	                }
	                else {
	                    output += 'NaN';
	                }
	            }
	            else if (token === '%f') {
	                if (arg.type === 'bigint' ||
	                    arg.type === 'number' ||
	                    arg.type === 'string') {
	                    output += parseFloat(arg.value.toString());
	                }
	                else {
	                    output += 'NaN';
	                }
	            }
	            else {
	                // %o, %O, %c
	                output += toJson(arg);
	            }
	        }
	        else {
	            output += token;
	        }
	    }
	    // raise an exception when more value is provided
	    if (argValues.length > 0) {
	        throw new Error(`More value is provided: "${getRemoteValuesText(args, false)}"`);
	    }
	    return output;
	}
	/**
	 * @param arg input remote value to be parsed
	 * @return parsed text of the remote value
	 *
	 * input: {"type": "number", "value": 1}
	 * output: 1
	 *
	 * input: {"type": "string", "value": "abc"}
	 * output: "abc"
	 *
	 * input: {"type": "object",  "value": [["id", {"type": "number", "value": 1}]]}
	 * output: '{"id": 1}'
	 *
	 * input: {"type": "object", "value": [["font-size", {"type": "string", "value": "20px"}]]}
	 * output: '{"font-size": "20px"}'
	 */
	function toJson(arg) {
	    // arg type validation
	    if (arg.type !== 'array' &&
	        arg.type !== 'bigint' &&
	        arg.type !== 'date' &&
	        arg.type !== 'number' &&
	        arg.type !== 'object' &&
	        arg.type !== 'string') {
	        return stringFromArg(arg);
	    }
	    if (arg.type === 'bigint') {
	        return `${arg.value.toString()}n`;
	    }
	    if (arg.type === 'number') {
	        return arg.value.toString();
	    }
	    if (['date', 'string'].includes(arg.type)) {
	        return JSON.stringify(arg.value);
	    }
	    if (arg.type === 'object') {
	        return `{${arg.value
	            .map((pair) => {
	            return `${JSON.stringify(pair[0])}:${toJson(pair[1])}`;
	        })
	            .join(',')}}`;
	    }
	    if (arg.type === 'array') {
	        return `[${arg.value?.map((val) => toJson(val)).join(',') ?? ''}]`;
	    }
	    // eslint-disable-next-line @typescript-eslint/no-base-to-string
	    throw Error(`Invalid value type: ${arg}`);
	}
	function stringFromArg(arg) {
	    if (!Object.hasOwn(arg, 'value')) {
	        return arg.type;
	    }
	    switch (arg.type) {
	        case 'string':
	        case 'number':
	        case 'boolean':
	        case 'bigint':
	            return String(arg.value);
	        case 'regexp':
	            return `/${arg.value.pattern}/${arg.value.flags ?? ''}`;
	        case 'date':
	            return new Date(arg.value).toString();
	        case 'object':
	            return `Object(${arg.value?.length ?? ''})`;
	        case 'array':
	            return `Array(${arg.value?.length ?? ''})`;
	        case 'map':
	            return `Map(${arg.value?.length})`;
	        case 'set':
	            return `Set(${arg.value?.length})`;
	        default:
	            return arg.type;
	    }
	}
	function getRemoteValuesText(args, formatText) {
	    const arg = args[0];
	    if (!arg) {
	        return '';
	    }
	    // if args[0] is a format specifier, format the args as output
	    if (arg.type === 'string' &&
	        isFormatSpecifier(arg.value.toString()) &&
	        formatText) {
	        return logMessageFormatter(args);
	    }
	    // if args[0] is not a format specifier, just join the args with \u0020 (unicode 'SPACE')
	    return args
	        .map((arg) => {
	        return stringFromArg(arg);
	    })
	        .join('\u0020');
	}
	
	return logHelper;
}

var hasRequiredLogManager;

function requireLogManager () {
	if (hasRequiredLogManager) return LogManager;
	hasRequiredLogManager = 1;
	var _a;
	Object.defineProperty(LogManager, "__esModule", { value: true });
	LogManager.LogManager = void 0;
	const protocol_js_1 = requireProtocol();
	const log_js_1 = requireLog();
	const logHelper_js_1 = requireLogHelper();
	/** Converts CDP StackTrace object to BiDi StackTrace object. */
	function getBidiStackTrace(cdpStackTrace) {
	    const stackFrames = cdpStackTrace?.callFrames.map((callFrame) => {
	        return {
	            columnNumber: callFrame.columnNumber,
	            functionName: callFrame.functionName,
	            lineNumber: callFrame.lineNumber,
	            url: callFrame.url,
	        };
	    });
	    return stackFrames ? { callFrames: stackFrames } : undefined;
	}
	function getLogLevel(consoleApiType) {
	    if (["error" /* Log.Level.Error */, 'assert'].includes(consoleApiType)) {
	        return "error" /* Log.Level.Error */;
	    }
	    if (["debug" /* Log.Level.Debug */, 'trace'].includes(consoleApiType)) {
	        return "debug" /* Log.Level.Debug */;
	    }
	    if (["warn" /* Log.Level.Warn */, 'warning'].includes(consoleApiType)) {
	        return "warn" /* Log.Level.Warn */;
	    }
	    return "info" /* Log.Level.Info */;
	}
	function getLogMethod(consoleApiType) {
	    switch (consoleApiType) {
	        case 'warning':
	            return 'warn';
	        case 'startGroup':
	            return 'group';
	        case 'startGroupCollapsed':
	            return 'groupCollapsed';
	        case 'endGroup':
	            return 'groupEnd';
	    }
	    return consoleApiType;
	}
	let LogManager$1 = class LogManager {
	    #eventManager;
	    #realmStorage;
	    #cdpTarget;
	    #logger;
	    constructor(cdpTarget, realmStorage, eventManager, logger) {
	        this.#cdpTarget = cdpTarget;
	        this.#realmStorage = realmStorage;
	        this.#eventManager = eventManager;
	        this.#logger = logger;
	    }
	    static create(cdpTarget, realmStorage, eventManager, logger) {
	        const logManager = new _a(cdpTarget, realmStorage, eventManager, logger);
	        logManager.#initializeEntryAddedEventListener();
	        return logManager;
	    }
	    /**
	     * Heuristic serialization of CDP remote object. If possible, return the BiDi value
	     * without deep serialization.
	     */
	    async #heuristicSerializeArg(arg, realm) {
	        switch (arg.type) {
	            // TODO: Implement regexp, array, object, map and set heuristics base on
	            //  preview.
	            case 'undefined':
	                return { type: 'undefined' };
	            case 'boolean':
	                return { type: 'boolean', value: arg.value };
	            case 'string':
	                return { type: 'string', value: arg.value };
	            case 'number':
	                // The value can be either a number or a string like `Infinity` or `-0`.
	                return { type: 'number', value: arg.unserializableValue ?? arg.value };
	            case 'bigint':
	                if (arg.unserializableValue !== undefined &&
	                    arg.unserializableValue[arg.unserializableValue.length - 1] === 'n') {
	                    return {
	                        type: arg.type,
	                        value: arg.unserializableValue.slice(0, -1),
	                    };
	                }
	                // Unexpected bigint value, fall back to CDP deep serialization.
	                break;
	            case 'object':
	                if (arg.subtype === 'null') {
	                    return { type: 'null' };
	                }
	                // Fall back to CDP deep serialization.
	                break;
	        }
	        // Fall back to CDP deep serialization.
	        return await realm.serializeCdpObject(arg, "none" /* Script.ResultOwnership.None */);
	    }
	    #initializeEntryAddedEventListener() {
	        this.#cdpTarget.cdpClient.on('Runtime.consoleAPICalled', (params) => {
	            // Try to find realm by `cdpSessionId` and `executionContextId`,
	            // if provided.
	            const realm = this.#realmStorage.findRealm({
	                cdpSessionId: this.#cdpTarget.cdpSessionId,
	                executionContextId: params.executionContextId,
	            });
	            if (realm === undefined) {
	                // Ignore exceptions not attached to any realm.
	                this.#logger?.(log_js_1.LogType.cdp, params);
	                return;
	            }
	            const argsPromise = Promise.all(params.args.map((arg) => this.#heuristicSerializeArg(arg, realm)));
	            for (const browsingContext of realm.associatedBrowsingContexts) {
	                this.#eventManager.registerPromiseEvent(argsPromise.then((args) => ({
	                    kind: 'success',
	                    value: {
	                        type: 'event',
	                        method: protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded,
	                        params: {
	                            level: getLogLevel(params.type),
	                            source: realm.source,
	                            text: (0, logHelper_js_1.getRemoteValuesText)(args, true),
	                            timestamp: Math.round(params.timestamp),
	                            stackTrace: getBidiStackTrace(params.stackTrace),
	                            type: 'console',
	                            method: getLogMethod(params.type),
	                            args,
	                        },
	                    },
	                }), (error) => ({
	                    kind: 'error',
	                    error,
	                })), browsingContext.id, protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded);
	            }
	        });
	        this.#cdpTarget.cdpClient.on('Runtime.exceptionThrown', (params) => {
	            // Try to find realm by `cdpSessionId` and `executionContextId`,
	            // if provided.
	            const realm = this.#realmStorage.findRealm({
	                cdpSessionId: this.#cdpTarget.cdpSessionId,
	                executionContextId: params.exceptionDetails.executionContextId,
	            });
	            if (realm === undefined) {
	                // Ignore exceptions not attached to any realm.
	                this.#logger?.(log_js_1.LogType.cdp, params);
	                return;
	            }
	            for (const browsingContext of realm.associatedBrowsingContexts) {
	                this.#eventManager.registerPromiseEvent(_a.#getExceptionText(params, realm).then((text) => ({
	                    kind: 'success',
	                    value: {
	                        type: 'event',
	                        method: protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded,
	                        params: {
	                            level: "error" /* Log.Level.Error */,
	                            source: realm.source,
	                            text,
	                            timestamp: Math.round(params.timestamp),
	                            stackTrace: getBidiStackTrace(params.exceptionDetails.stackTrace),
	                            type: 'javascript',
	                        },
	                    },
	                }), (error) => ({
	                    kind: 'error',
	                    error,
	                })), browsingContext.id, protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded);
	            }
	        });
	    }
	    /**
	     * Try the best to get the exception text.
	     */
	    static async #getExceptionText(params, realm) {
	        if (!params.exceptionDetails.exception) {
	            return params.exceptionDetails.text;
	        }
	        if (realm === undefined) {
	            return JSON.stringify(params.exceptionDetails.exception);
	        }
	        return await realm.stringifyObject(params.exceptionDetails.exception);
	    }
	};
	LogManager.LogManager = LogManager$1;
	_a = LogManager$1;
	
	return LogManager;
}

var hasRequiredCdpTarget;

function requireCdpTarget () {
	if (hasRequiredCdpTarget) return CdpTarget;
	hasRequiredCdpTarget = 1;
	Object.defineProperty(CdpTarget, "__esModule", { value: true });
	CdpTarget.CdpTarget = void 0;
	const chromium_bidi_js_1 = requireChromiumBidi();
	const Deferred_js_1 = requireDeferred();
	const EventEmitter_js_1 = requireEventEmitter$1();
	const log_js_1 = requireLog();
	const BrowsingContextImpl_js_1 = requireBrowsingContextImpl();
	const LogManager_js_1 = requireLogManager();
	let CdpTarget$1 = class CdpTarget extends EventEmitter_js_1.EventEmitter {
	    #id;
	    #cdpClient;
	    #browserCdpClient;
	    #parentCdpClient;
	    #realmStorage;
	    #eventManager;
	    #preloadScriptStorage;
	    #browsingContextStorage;
	    #prerenderingDisabled;
	    #networkStorage;
	    #unblocked = new Deferred_js_1.Deferred();
	    #unhandledPromptBehavior;
	    #logger;
	    #deviceAccessEnabled = false;
	    #cacheDisableState = false;
	    #fetchDomainStages = {
	        request: false,
	        response: false,
	        auth: false,
	    };
	    static create(targetId, cdpClient, browserCdpClient, parentCdpClient, realmStorage, eventManager, preloadScriptStorage, browsingContextStorage, networkStorage, prerenderingDisabled, unhandledPromptBehavior, logger) {
	        const cdpTarget = new CdpTarget(targetId, cdpClient, browserCdpClient, parentCdpClient, eventManager, realmStorage, preloadScriptStorage, browsingContextStorage, networkStorage, prerenderingDisabled, unhandledPromptBehavior, logger);
	        LogManager_js_1.LogManager.create(cdpTarget, realmStorage, eventManager, logger);
	        cdpTarget.#setEventListeners();
	        // No need to await.
	        // Deferred will be resolved when the target is unblocked.
	        void cdpTarget.#unblock();
	        return cdpTarget;
	    }
	    constructor(targetId, cdpClient, browserCdpClient, parentCdpClient, eventManager, realmStorage, preloadScriptStorage, browsingContextStorage, networkStorage, prerenderingDisabled, unhandledPromptBehavior, logger) {
	        super();
	        this.#id = targetId;
	        this.#cdpClient = cdpClient;
	        this.#browserCdpClient = browserCdpClient;
	        this.#parentCdpClient = parentCdpClient;
	        this.#eventManager = eventManager;
	        this.#realmStorage = realmStorage;
	        this.#preloadScriptStorage = preloadScriptStorage;
	        this.#networkStorage = networkStorage;
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#prerenderingDisabled = prerenderingDisabled;
	        this.#unhandledPromptBehavior = unhandledPromptBehavior;
	        this.#logger = logger;
	    }
	    /** Returns a deferred that resolves when the target is unblocked. */
	    get unblocked() {
	        return this.#unblocked;
	    }
	    get id() {
	        return this.#id;
	    }
	    get cdpClient() {
	        return this.#cdpClient;
	    }
	    get parentCdpClient() {
	        return this.#parentCdpClient;
	    }
	    get browserCdpClient() {
	        return this.#browserCdpClient;
	    }
	    /** Needed for CDP escape path. */
	    get cdpSessionId() {
	        // SAFETY we got the client by it's id for creating
	        return this.#cdpClient.sessionId;
	    }
	    /**
	     * Enables all the required CDP domains and unblocks the target.
	     */
	    async #unblock() {
	        try {
	            await Promise.all([
	                this.#cdpClient.sendCommand('Page.enable'),
	                // There can be some existing frames in the target, if reconnecting to an
	                // existing browser instance, e.g. via Puppeteer. Need to restore the browsing
	                // contexts for the frames to correctly handle further events, like
	                // `Runtime.executionContextCreated`.
	                // It's important to schedule this task together with enabling domains commands to
	                // prepare the tree before the events (e.g. Runtime.executionContextCreated) start
	                // coming.
	                // https://github.com/GoogleChromeLabs/chromium-bidi/issues/2282
	                this.#cdpClient
	                    .sendCommand('Page.getFrameTree')
	                    .then((frameTree) => this.#restoreFrameTreeState(frameTree.frameTree)),
	                this.#cdpClient.sendCommand('Runtime.enable'),
	                this.#cdpClient.sendCommand('Page.setLifecycleEventsEnabled', {
	                    enabled: true,
	                }),
	                this.#cdpClient
	                    .sendCommand('Page.setPrerenderingAllowed', {
	                    isAllowed: !this.#prerenderingDisabled,
	                })
	                    .catch(() => {
	                    // Ignore CDP errors, as the command is not supported by iframe targets or
	                    // prerendered pages. Generic catch, as the error can vary between CdpClient
	                    // implementations: Tab vs Puppeteer.
	                }),
	                // Enabling CDP Network domain is required for navigation detection:
	                // https://github.com/GoogleChromeLabs/chromium-bidi/issues/2856.
	                this.#cdpClient
	                    .sendCommand('Network.enable')
	                    .then(() => this.toggleNetworkIfNeeded()),
	                this.#cdpClient.sendCommand('Target.setAutoAttach', {
	                    autoAttach: true,
	                    waitForDebuggerOnStart: true,
	                    flatten: true,
	                }),
	                this.#initAndEvaluatePreloadScripts(),
	                this.#cdpClient.sendCommand('Runtime.runIfWaitingForDebugger'),
	                // Resume tab execution as well if it was paused by the debugger.
	                this.#parentCdpClient.sendCommand('Runtime.runIfWaitingForDebugger'),
	                this.toggleDeviceAccessIfNeeded(),
	            ]);
	        }
	        catch (error) {
	            this.#logger?.(log_js_1.LogType.debugError, 'Failed to unblock target', error);
	            // The target might have been closed before the initialization finished.
	            if (!this.#cdpClient.isCloseError(error)) {
	                this.#unblocked.resolve({
	                    kind: 'error',
	                    error,
	                });
	                return;
	            }
	        }
	        this.#unblocked.resolve({
	            kind: 'success',
	            value: undefined,
	        });
	    }
	    #restoreFrameTreeState(frameTree) {
	        const frame = frameTree.frame;
	        const maybeContext = this.#browsingContextStorage.findContext(frame.id);
	        if (maybeContext !== undefined) {
	            // Restoring parent of already known browsing context. This means the target is
	            // OOPiF and the BiDi session was connected to already existing browser instance.
	            if (maybeContext.parentId === null &&
	                frame.parentId !== null &&
	                frame.parentId !== undefined) {
	                maybeContext.parentId = frame.parentId;
	            }
	        }
	        if (maybeContext === undefined && frame.parentId !== undefined) {
	            // Restore not yet known nested frames. The top-level frame is created when the
	            // target is attached.
	            const parentBrowsingContext = this.#browsingContextStorage.getContext(frame.parentId);
	            BrowsingContextImpl_js_1.BrowsingContextImpl.create(frame.id, frame.parentId, parentBrowsingContext.userContext, parentBrowsingContext.cdpTarget, this.#eventManager, this.#browsingContextStorage, this.#realmStorage, frame.url, undefined, this.#unhandledPromptBehavior, this.#logger);
	        }
	        frameTree.childFrames?.map((frameTree) => this.#restoreFrameTreeState(frameTree));
	    }
	    async toggleFetchIfNeeded() {
	        const stages = this.#networkStorage.getInterceptionStages(this.topLevelId);
	        if (this.#fetchDomainStages.request === stages.request &&
	            this.#fetchDomainStages.response === stages.response &&
	            this.#fetchDomainStages.auth === stages.auth) {
	            return;
	        }
	        const patterns = [];
	        this.#fetchDomainStages = stages;
	        if (stages.request || stages.auth) {
	            // CDP quirk we need request interception when we intercept auth
	            patterns.push({
	                urlPattern: '*',
	                requestStage: 'Request',
	            });
	        }
	        if (stages.response) {
	            patterns.push({
	                urlPattern: '*',
	                requestStage: 'Response',
	            });
	        }
	        if (patterns.length) {
	            await this.#cdpClient.sendCommand('Fetch.enable', {
	                patterns,
	                handleAuthRequests: stages.auth,
	            });
	        }
	        else {
	            const blockedRequest = this.#networkStorage
	                .getRequestsByTarget(this)
	                .filter((request) => request.interceptPhase);
	            void Promise.allSettled(blockedRequest.map((request) => request.waitNextPhase))
	                .then(async () => {
	                const blockedRequest = this.#networkStorage
	                    .getRequestsByTarget(this)
	                    .filter((request) => request.interceptPhase);
	                if (blockedRequest.length) {
	                    return await this.toggleFetchIfNeeded();
	                }
	                return await this.#cdpClient.sendCommand('Fetch.disable');
	            })
	                .catch((error) => {
	                this.#logger?.(log_js_1.LogType.bidi, 'Disable failed', error);
	            });
	        }
	    }
	    /**
	     * Toggles CDP "Fetch" domain and enable/disable network cache.
	     */
	    async toggleNetworkIfNeeded() {
	        // Although the Network domain remains active, Fetch domain activation and caching
	        // settings should be managed dynamically.
	        try {
	            await Promise.all([
	                this.toggleSetCacheDisabled(),
	                this.toggleFetchIfNeeded(),
	            ]);
	        }
	        catch (err) {
	            this.#logger?.(log_js_1.LogType.debugError, err);
	            if (!this.#isExpectedError(err)) {
	                throw err;
	            }
	        }
	    }
	    async toggleSetCacheDisabled(disable) {
	        const defaultCacheDisabled = this.#networkStorage.defaultCacheBehavior === 'bypass';
	        const cacheDisabled = disable ?? defaultCacheDisabled;
	        if (this.#cacheDisableState === cacheDisabled) {
	            return;
	        }
	        this.#cacheDisableState = cacheDisabled;
	        try {
	            await this.#cdpClient.sendCommand('Network.setCacheDisabled', {
	                cacheDisabled,
	            });
	        }
	        catch (err) {
	            this.#logger?.(log_js_1.LogType.debugError, err);
	            this.#cacheDisableState = !cacheDisabled;
	            if (!this.#isExpectedError(err)) {
	                throw err;
	            }
	        }
	    }
	    async toggleDeviceAccessIfNeeded() {
	        const enabled = this.isSubscribedTo(chromium_bidi_js_1.BiDiModule.Bluetooth);
	        if (this.#deviceAccessEnabled === enabled) {
	            return;
	        }
	        this.#deviceAccessEnabled = enabled;
	        try {
	            await this.#cdpClient.sendCommand(enabled ? 'DeviceAccess.enable' : 'DeviceAccess.disable');
	        }
	        catch (err) {
	            this.#logger?.(log_js_1.LogType.debugError, err);
	            this.#deviceAccessEnabled = !enabled;
	            if (!this.#isExpectedError(err)) {
	                throw err;
	            }
	        }
	    }
	    /**
	     * Heuristic checking if the error is due to the session being closed. If so, ignore the
	     * error.
	     */
	    #isExpectedError(err) {
	        const error = err;
	        return ((error.code === -32001 &&
	            error.message === 'Session with given id not found.') ||
	            this.#cdpClient.isCloseError(err));
	    }
	    #setEventListeners() {
	        this.#cdpClient.on('Network.requestWillBeSent', (eventParams) => {
	            if (eventParams.loaderId === eventParams.requestId) {
	                this.emit("frameStartedNavigating" /* TargetEvents.FrameStartedNavigating */, {
	                    loaderId: eventParams.loaderId,
	                    url: eventParams.request.url,
	                    frameId: eventParams.frameId,
	                });
	            }
	        });
	        this.#cdpClient.on('*', (event, params) => {
	            // We may encounter uses for EventEmitter other than CDP events,
	            // which we want to skip.
	            if (typeof event !== 'string') {
	                return;
	            }
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: `goog:cdp.${event}`,
	                params: {
	                    event,
	                    params,
	                    session: this.cdpSessionId,
	                },
	            }, this.id);
	            // Duplicate the event to the deprecated event name.
	            // https://github.com/GoogleChromeLabs/chromium-bidi/issues/2844
	            this.#eventManager.registerEvent({
	                type: 'event',
	                method: `cdp.${event}`,
	                params: {
	                    event,
	                    params,
	                    session: this.cdpSessionId,
	                },
	            }, this.id);
	        });
	    }
	    async #enableFetch(stages) {
	        const patterns = [];
	        if (stages.request || stages.auth) {
	            // CDP quirk we need request interception when we intercept auth
	            patterns.push({
	                urlPattern: '*',
	                requestStage: 'Request',
	            });
	        }
	        if (stages.response) {
	            patterns.push({
	                urlPattern: '*',
	                requestStage: 'Response',
	            });
	        }
	        if (patterns.length) {
	            const oldStages = this.#fetchDomainStages;
	            this.#fetchDomainStages = stages;
	            try {
	                await this.#cdpClient.sendCommand('Fetch.enable', {
	                    patterns,
	                    handleAuthRequests: stages.auth,
	                });
	            }
	            catch {
	                this.#fetchDomainStages = oldStages;
	            }
	        }
	    }
	    async #disableFetch() {
	        const blockedRequest = this.#networkStorage
	            .getRequestsByTarget(this)
	            .filter((request) => request.interceptPhase);
	        if (blockedRequest.length === 0) {
	            this.#fetchDomainStages = {
	                request: false,
	                response: false,
	                auth: false,
	            };
	            await this.#cdpClient.sendCommand('Fetch.disable');
	        }
	    }
	    async toggleNetwork() {
	        const stages = this.#networkStorage.getInterceptionStages(this.topLevelId);
	        const fetchEnable = Object.values(stages).some((value) => value);
	        const fetchChanged = this.#fetchDomainStages.request !== stages.request ||
	            this.#fetchDomainStages.response !== stages.response ||
	            this.#fetchDomainStages.auth !== stages.auth;
	        this.#logger?.(log_js_1.LogType.debugInfo, 'Toggle Network', `Fetch (${fetchEnable}) ${fetchChanged}`);
	        if (fetchEnable && fetchChanged) {
	            await this.#enableFetch(stages);
	        }
	        if (!fetchEnable && fetchChanged) {
	            await this.#disableFetch();
	        }
	    }
	    /**
	     * All the ProxyChannels from all the preload scripts of the given
	     * BrowsingContext.
	     */
	    getChannels() {
	        return this.#preloadScriptStorage
	            .find()
	            .flatMap((script) => script.channels);
	    }
	    /** Loads all top-level preload scripts. */
	    async #initAndEvaluatePreloadScripts() {
	        await Promise.all(this.#preloadScriptStorage
	            .find({
	            // Needed for OOPIF
	            targetId: this.topLevelId,
	            global: true,
	        })
	            .map((script) => {
	            return script.initInTarget(this, true);
	        }));
	    }
	    get topLevelId() {
	        return (this.#browsingContextStorage.findTopLevelContextId(this.id) ?? this.id);
	    }
	    isSubscribedTo(moduleOrEvent) {
	        return this.#eventManager.subscriptionManager.isSubscribedTo(moduleOrEvent, this.topLevelId);
	    }
	};
	CdpTarget.CdpTarget = CdpTarget$1;
	
	return CdpTarget;
}

var hasRequiredCdpTargetManager;

function requireCdpTargetManager () {
	if (hasRequiredCdpTargetManager) return CdpTargetManager;
	hasRequiredCdpTargetManager = 1;
	Object.defineProperty(CdpTargetManager, "__esModule", { value: true });
	CdpTargetManager.CdpTargetManager = void 0;
	const log_js_1 = requireLog();
	const BrowsingContextImpl_js_1 = requireBrowsingContextImpl();
	const WorkerRealm_js_1 = requireWorkerRealm();
	const CdpTarget_js_1 = requireCdpTarget();
	const cdpToBidiTargetTypes = {
	    service_worker: 'service-worker',
	    shared_worker: 'shared-worker',
	    worker: 'dedicated-worker',
	};
	let CdpTargetManager$1 = class CdpTargetManager {
	    #browserCdpClient;
	    #cdpConnection;
	    #targetKeysToBeIgnoredByAutoAttach = new Set();
	    #selfTargetId;
	    #eventManager;
	    #browsingContextStorage;
	    #networkStorage;
	    #bluetoothProcessor;
	    #preloadScriptStorage;
	    #realmStorage;
	    #defaultUserContextId;
	    #logger;
	    #unhandledPromptBehavior;
	    #prerenderingDisabled;
	    constructor(cdpConnection, browserCdpClient, selfTargetId, eventManager, browsingContextStorage, realmStorage, networkStorage, bluetoothProcessor, preloadScriptStorage, defaultUserContextId, prerenderingDisabled, unhandledPromptBehavior, logger) {
	        this.#cdpConnection = cdpConnection;
	        this.#browserCdpClient = browserCdpClient;
	        this.#targetKeysToBeIgnoredByAutoAttach.add(selfTargetId);
	        this.#selfTargetId = selfTargetId;
	        this.#eventManager = eventManager;
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#preloadScriptStorage = preloadScriptStorage;
	        this.#networkStorage = networkStorage;
	        this.#bluetoothProcessor = bluetoothProcessor;
	        this.#realmStorage = realmStorage;
	        this.#defaultUserContextId = defaultUserContextId;
	        this.#prerenderingDisabled = prerenderingDisabled;
	        this.#unhandledPromptBehavior = unhandledPromptBehavior;
	        this.#logger = logger;
	        this.#setEventListeners(browserCdpClient);
	    }
	    /**
	     * This method is called for each CDP session, since this class is responsible
	     * for creating and destroying all targets and browsing contexts.
	     */
	    #setEventListeners(cdpClient) {
	        cdpClient.on('Target.attachedToTarget', (params) => {
	            this.#handleAttachedToTargetEvent(params, cdpClient);
	        });
	        cdpClient.on('Target.detachedFromTarget', this.#handleDetachedFromTargetEvent.bind(this));
	        cdpClient.on('Target.targetInfoChanged', this.#handleTargetInfoChangedEvent.bind(this));
	        cdpClient.on('Inspector.targetCrashed', () => {
	            this.#handleTargetCrashedEvent(cdpClient);
	        });
	        cdpClient.on('Page.frameAttached', this.#handleFrameAttachedEvent.bind(this));
	        cdpClient.on('Page.frameDetached', this.#handleFrameDetachedEvent.bind(this));
	        cdpClient.on('Page.frameSubtreeWillBeDetached', this.#handleFrameSubtreeWillBeDetached.bind(this));
	    }
	    #handleFrameAttachedEvent(params) {
	        const parentBrowsingContext = this.#browsingContextStorage.findContext(params.parentFrameId);
	        if (parentBrowsingContext !== undefined) {
	            BrowsingContextImpl_js_1.BrowsingContextImpl.create(params.frameId, params.parentFrameId, parentBrowsingContext.userContext, parentBrowsingContext.cdpTarget, this.#eventManager, this.#browsingContextStorage, this.#realmStorage, 
	            // At this point, we don't know the URL of the frame yet, so it will be updated
	            // later.
	            'about:blank', undefined, this.#unhandledPromptBehavior, this.#logger);
	        }
	    }
	    #handleFrameDetachedEvent(params) {
	        // In case of OOPiF no need in deleting BrowsingContext.
	        if (params.reason === 'swap') {
	            return;
	        }
	        this.#browsingContextStorage.findContext(params.frameId)?.dispose(true);
	    }
	    #handleFrameSubtreeWillBeDetached(params) {
	        this.#browsingContextStorage.findContext(params.frameId)?.dispose(true);
	    }
	    #handleAttachedToTargetEvent(params, parentSessionCdpClient) {
	        const { sessionId, targetInfo } = params;
	        const targetCdpClient = this.#cdpConnection.getCdpClient(sessionId);
	        const detach = async () => {
	            // Detaches and resumes the target suppressing errors.
	            await targetCdpClient
	                .sendCommand('Runtime.runIfWaitingForDebugger')
	                .then(() => parentSessionCdpClient.sendCommand('Target.detachFromTarget', params))
	                .catch((error) => this.#logger?.(log_js_1.LogType.debugError, error));
	        };
	        // Do not attach to the Mapper target.
	        if (this.#selfTargetId === targetInfo.targetId) {
	            void detach();
	            return;
	        }
	        // Service workers are special case because they attach to the
	        // browser target and the page target (so twice per worker) during
	        // the regular auto-attach and might hang if the CDP session on
	        // the browser level is not detached. The logic to detach the
	        // right session is handled in the switch below.
	        const targetKey = targetInfo.type === 'service_worker'
	            ? `${parentSessionCdpClient.sessionId}_${targetInfo.targetId}`
	            : targetInfo.targetId;
	        // Mapper generally only needs one session per target. If we
	        // receive additional auto-attached sessions, that is very likely
	        // coming from custom CDP sessions.
	        if (this.#targetKeysToBeIgnoredByAutoAttach.has(targetKey)) {
	            // Return to leave the session untouched.
	            return;
	        }
	        this.#targetKeysToBeIgnoredByAutoAttach.add(targetKey);
	        switch (targetInfo.type) {
	            case 'tab':
	                // Tab targets are required only to handle page targets beneath them.
	                this.#setEventListeners(targetCdpClient);
	                // Auto-attach to the page target. No need in resuming tab target debugger, as it
	                // should preserve the page target debugger state, and will be resumed by the page
	                // target.
	                void (async () => {
	                    await targetCdpClient.sendCommand('Target.setAutoAttach', {
	                        autoAttach: true,
	                        waitForDebuggerOnStart: true,
	                        flatten: true,
	                    });
	                })();
	                return;
	            case 'page':
	            case 'iframe': {
	                const cdpTarget = this.#createCdpTarget(targetCdpClient, parentSessionCdpClient, targetInfo);
	                const maybeContext = this.#browsingContextStorage.findContext(targetInfo.targetId);
	                if (maybeContext && targetInfo.type === 'iframe') {
	                    // OOPiF.
	                    maybeContext.updateCdpTarget(cdpTarget);
	                }
	                else {
	                    // If attaching to existing browser instance, there could be OOPiF targets. This
	                    // case is handled by the `findFrameParentId` method.
	                    const parentId = this.#findFrameParentId(targetInfo, parentSessionCdpClient.sessionId);
	                    const userContext = targetInfo.browserContextId &&
	                        targetInfo.browserContextId !== this.#defaultUserContextId
	                        ? targetInfo.browserContextId
	                        : 'default';
	                    // New context.
	                    BrowsingContextImpl_js_1.BrowsingContextImpl.create(targetInfo.targetId, parentId, userContext, cdpTarget, this.#eventManager, this.#browsingContextStorage, this.#realmStorage, 
	                    // Hack: when a new target created, CDP emits targetInfoChanged with an empty
	                    // url, and navigates it to about:blank later. When the event is emitted for
	                    // an existing target (reconnect), the url is already known, and navigation
	                    // events will not be emitted anymore. Replacing empty url with `about:blank`
	                    // allows to handle both cases in the same way.
	                    // "7.3.2.1 Creating browsing contexts".
	                    // https://html.spec.whatwg.org/multipage/document-sequences.html#creating-browsing-contexts
	                    // TODO: check who to deal with non-null creator and its `creatorOrigin`.
	                    targetInfo.url === '' ? 'about:blank' : targetInfo.url, targetInfo.openerFrameId ?? targetInfo.openerId, this.#unhandledPromptBehavior, this.#logger);
	                }
	                return;
	            }
	            case 'service_worker':
	            case 'worker': {
	                const realm = this.#realmStorage.findRealm({
	                    cdpSessionId: parentSessionCdpClient.sessionId,
	                });
	                // If there is no browsing context, this worker is already terminated.
	                if (!realm) {
	                    void detach();
	                    return;
	                }
	                const cdpTarget = this.#createCdpTarget(targetCdpClient, parentSessionCdpClient, targetInfo);
	                this.#handleWorkerTarget(cdpToBidiTargetTypes[targetInfo.type], cdpTarget, realm);
	                return;
	            }
	            // In CDP, we only emit shared workers on the browser and not the set of
	            // frames that use the shared worker. If we change this in the future to
	            // behave like service workers (emits on both browser and frame targets),
	            // we can remove this block and merge service workers with the above one.
	            case 'shared_worker': {
	                const cdpTarget = this.#createCdpTarget(targetCdpClient, parentSessionCdpClient, targetInfo);
	                this.#handleWorkerTarget(cdpToBidiTargetTypes[targetInfo.type], cdpTarget);
	                return;
	            }
	        }
	        // DevTools or some other not supported by BiDi target. Just release
	        // debugger and ignore them.
	        void detach();
	    }
	    /** Try to find the parent browsing context ID for the given attached target. */
	    #findFrameParentId(targetInfo, parentSessionId) {
	        if (targetInfo.type !== 'iframe') {
	            return null;
	        }
	        const parentId = targetInfo.openerFrameId ?? targetInfo.openerId;
	        if (parentId !== undefined) {
	            return parentId;
	        }
	        if (parentSessionId !== undefined) {
	            return (this.#browsingContextStorage.findContextBySession(parentSessionId)
	                ?.id ?? null);
	        }
	        return null;
	    }
	    #createCdpTarget(targetCdpClient, parentCdpClient, targetInfo) {
	        this.#setEventListeners(targetCdpClient);
	        const target = CdpTarget_js_1.CdpTarget.create(targetInfo.targetId, targetCdpClient, this.#browserCdpClient, parentCdpClient, this.#realmStorage, this.#eventManager, this.#preloadScriptStorage, this.#browsingContextStorage, this.#networkStorage, this.#prerenderingDisabled, this.#unhandledPromptBehavior, this.#logger);
	        this.#networkStorage.onCdpTargetCreated(target);
	        this.#bluetoothProcessor.onCdpTargetCreated(target);
	        return target;
	    }
	    #workers = new Map();
	    #handleWorkerTarget(realmType, cdpTarget, ownerRealm) {
	        cdpTarget.cdpClient.on('Runtime.executionContextCreated', (params) => {
	            const { uniqueId, id, origin } = params.context;
	            const workerRealm = new WorkerRealm_js_1.WorkerRealm(cdpTarget.cdpClient, this.#eventManager, id, this.#logger, (0, BrowsingContextImpl_js_1.serializeOrigin)(origin), ownerRealm ? [ownerRealm] : [], uniqueId, this.#realmStorage, realmType);
	            this.#workers.set(cdpTarget.cdpSessionId, workerRealm);
	        });
	    }
	    #handleDetachedFromTargetEvent({ sessionId, targetId, }) {
	        if (targetId) {
	            this.#preloadScriptStorage.find({ targetId }).map((preloadScript) => {
	                preloadScript.dispose(targetId);
	            });
	        }
	        const context = this.#browsingContextStorage.findContextBySession(sessionId);
	        if (context) {
	            context.dispose(true);
	            return;
	        }
	        const worker = this.#workers.get(sessionId);
	        if (worker) {
	            this.#realmStorage.deleteRealms({
	                cdpSessionId: worker.cdpClient.sessionId,
	            });
	        }
	    }
	    #handleTargetInfoChangedEvent(params) {
	        const context = this.#browsingContextStorage.findContext(params.targetInfo.targetId);
	        if (context) {
	            context.onTargetInfoChanged(params);
	        }
	    }
	    #handleTargetCrashedEvent(cdpClient) {
	        // This is primarily used for service and shared workers. CDP tends to not
	        // signal they closed gracefully and instead says they crashed to signal
	        // they are closed.
	        const realms = this.#realmStorage.findRealms({
	            cdpSessionId: cdpClient.sessionId,
	        });
	        for (const realm of realms) {
	            realm.dispose();
	        }
	    }
	};
	CdpTargetManager.CdpTargetManager = CdpTargetManager$1;
	
	return CdpTargetManager;
}

var BrowsingContextStorage = {};

var hasRequiredBrowsingContextStorage;

function requireBrowsingContextStorage () {
	if (hasRequiredBrowsingContextStorage) return BrowsingContextStorage;
	hasRequiredBrowsingContextStorage = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(BrowsingContextStorage, "__esModule", { value: true });
	BrowsingContextStorage.BrowsingContextStorage = void 0;
	const protocol_js_1 = requireProtocol();
	const EventEmitter_js_1 = requireEventEmitter$1();
	/** Container class for browsing contexts. */
	let BrowsingContextStorage$1 = class BrowsingContextStorage {
	    /** Map from context ID to context implementation. */
	    #contexts = new Map();
	    /** Event emitter for browsing context storage eventsis not expected to be exposed to
	     * the outside world. */
	    #eventEmitter = new EventEmitter_js_1.EventEmitter();
	    /** Gets all top-level contexts, i.e. those with no parent. */
	    getTopLevelContexts() {
	        return this.getAllContexts().filter((context) => context.isTopLevelContext());
	    }
	    /** Gets all contexts. */
	    getAllContexts() {
	        return Array.from(this.#contexts.values());
	    }
	    /** Deletes the context with the given ID. */
	    deleteContextById(id) {
	        this.#contexts.delete(id);
	    }
	    /** Deletes the given context. */
	    deleteContext(context) {
	        this.#contexts.delete(context.id);
	    }
	    /** Tracks the given context. */
	    addContext(context) {
	        this.#contexts.set(context.id, context);
	        this.#eventEmitter.emit("added" /* BrowsingContextStorageEvents.Added */, {
	            browsingContext: context,
	        });
	    }
	    /**
	     * Waits for a context with the given ID to be added and returns it.
	     */
	    waitForContext(browsingContextId) {
	        return new Promise((resolve) => {
	            const listener = (event) => {
	                if (event.browsingContext.id === browsingContextId) {
	                    this.#eventEmitter.off("added" /* BrowsingContextStorageEvents.Added */, listener);
	                    resolve(event.browsingContext);
	                }
	            };
	            this.#eventEmitter.on("added" /* BrowsingContextStorageEvents.Added */, listener);
	        });
	    }
	    /** Returns true whether there is an existing context with the given ID. */
	    hasContext(id) {
	        return this.#contexts.has(id);
	    }
	    /** Gets the context with the given ID, if any. */
	    findContext(id) {
	        return this.#contexts.get(id);
	    }
	    /** Returns the top-level context ID of the given context, if any. */
	    findTopLevelContextId(id) {
	        if (id === null) {
	            return null;
	        }
	        const maybeContext = this.findContext(id);
	        const parentId = maybeContext?.parentId ?? null;
	        if (parentId === null) {
	            return id;
	        }
	        return this.findTopLevelContextId(parentId);
	    }
	    findContextBySession(sessionId) {
	        for (const context of this.#contexts.values()) {
	            if (context.cdpTarget.cdpSessionId === sessionId) {
	                return context;
	            }
	        }
	        return;
	    }
	    /** Gets the context with the given ID, if any, otherwise throws. */
	    getContext(id) {
	        const result = this.findContext(id);
	        if (result === undefined) {
	            throw new protocol_js_1.NoSuchFrameException(`Context ${id} not found`);
	        }
	        return result;
	    }
	    verifyTopLevelContextsList(contexts) {
	        const foundContexts = new Set();
	        if (!contexts) {
	            return foundContexts;
	        }
	        for (const contextId of contexts) {
	            const context = this.getContext(contextId);
	            if (context.isTopLevelContext()) {
	                foundContexts.add(context);
	            }
	            else {
	                throw new protocol_js_1.InvalidArgumentException(`Non top-level context '${contextId}' given.`);
	            }
	        }
	        return foundContexts;
	    }
	};
	BrowsingContextStorage.BrowsingContextStorage = BrowsingContextStorage$1;
	
	return BrowsingContextStorage;
}

var NetworkStorage = {};

var NetworkRequest = {};

var hasRequiredNetworkRequest;

function requireNetworkRequest () {
	if (hasRequiredNetworkRequest) return NetworkRequest;
	hasRequiredNetworkRequest = 1;
	/*
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	var _a;
	Object.defineProperty(NetworkRequest, "__esModule", { value: true });
	NetworkRequest.NetworkRequest = void 0;
	const protocol_js_1 = requireProtocol();
	const assert_js_1 = requireAssert();
	const Deferred_js_1 = requireDeferred();
	const log_js_1 = requireLog();
	const NetworkUtils_js_1 = requireNetworkUtils();
	const REALM_REGEX = /(?<=realm=").*(?=")/;
	/** Abstracts one individual network request. */
	let NetworkRequest$1 = class NetworkRequest {
	    static unknownParameter = 'UNKNOWN';
	    /**
	     * Each network request has an associated request id, which is a string
	     * uniquely identifying that request.
	     *
	     * The identifier for a request resulting from a redirect matches that of the
	     * request that initiated it.
	     */
	    #id;
	    #fetchId;
	    /**
	     * Indicates the network intercept phase, if the request is currently blocked.
	     * Undefined necessarily implies that the request is not blocked.
	     */
	    #interceptPhase;
	    #servedFromCache = false;
	    #redirectCount;
	    #request = {};
	    #requestOverrides;
	    #responseOverrides;
	    #response = {};
	    #eventManager;
	    #networkStorage;
	    #cdpTarget;
	    #logger;
	    #emittedEvents = {
	        [protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired]: false,
	        [protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent]: false,
	        [protocol_js_1.ChromiumBidi.Network.EventNames.FetchError]: false,
	        [protocol_js_1.ChromiumBidi.Network.EventNames.ResponseCompleted]: false,
	        [protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted]: false,
	    };
	    waitNextPhase = new Deferred_js_1.Deferred();
	    constructor(id, eventManager, networkStorage, cdpTarget, redirectCount = 0, logger) {
	        this.#id = id;
	        this.#eventManager = eventManager;
	        this.#networkStorage = networkStorage;
	        this.#cdpTarget = cdpTarget;
	        this.#redirectCount = redirectCount;
	        this.#logger = logger;
	    }
	    get id() {
	        return this.#id;
	    }
	    get fetchId() {
	        return this.#fetchId;
	    }
	    /**
	     * When blocked returns the phase for it
	     */
	    get interceptPhase() {
	        return this.#interceptPhase;
	    }
	    get url() {
	        const fragment = this.#request.info?.request.urlFragment ??
	            this.#request.paused?.request.urlFragment ??
	            '';
	        const url = this.#response.info?.url ??
	            this.#response.paused?.request.url ??
	            this.#requestOverrides?.url ??
	            this.#request.auth?.request.url ??
	            this.#request.info?.request.url ??
	            this.#request.paused?.request.url ??
	            _a.unknownParameter;
	        return `${url}${fragment}`;
	    }
	    get redirectCount() {
	        return this.#redirectCount;
	    }
	    get cdpTarget() {
	        return this.#cdpTarget;
	    }
	    get cdpClient() {
	        return this.#cdpTarget.cdpClient;
	    }
	    isRedirecting() {
	        return Boolean(this.#request.info);
	    }
	    #isDataUrl() {
	        return this.url.startsWith('data:');
	    }
	    get #method() {
	        return (this.#requestOverrides?.method ??
	            this.#request.info?.request.method ??
	            this.#request.paused?.request.method ??
	            this.#request.auth?.request.method ??
	            this.#response.paused?.request.method);
	    }
	    get #navigationId() {
	        // Heuristic to determine if this is a navigation request, and if not return null.
	        if (!this.#request.info ||
	            !this.#request.info.loaderId ||
	            // When we navigate all CDP network events have `loaderId`
	            // CDP's `loaderId` and `requestId` match when
	            // that request triggered the loading
	            this.#request.info.loaderId !== this.#request.info.requestId) {
	            return null;
	        }
	        // Get virtual navigation ID from the browsing context.
	        return this.#networkStorage.getNavigationId(this.#context ?? undefined);
	    }
	    get #cookies() {
	        let cookies = [];
	        if (this.#request.extraInfo) {
	            cookies = this.#request.extraInfo.associatedCookies
	                .filter(({ blockedReasons }) => {
	                return !Array.isArray(blockedReasons) || blockedReasons.length === 0;
	            })
	                .map(({ cookie }) => (0, NetworkUtils_js_1.cdpToBiDiCookie)(cookie));
	        }
	        return cookies;
	    }
	    get #bodySize() {
	        let bodySize = 0;
	        if (typeof this.#requestOverrides?.bodySize === 'number') {
	            bodySize = this.#requestOverrides.bodySize;
	        }
	        else {
	            bodySize = (0, NetworkUtils_js_1.bidiBodySizeFromCdpPostDataEntries)(this.#request.info?.request.postDataEntries ?? []);
	        }
	        return bodySize;
	    }
	    get #context() {
	        return (this.#response.paused?.frameId ??
	            this.#request.info?.frameId ??
	            this.#request.paused?.frameId ??
	            this.#request.auth?.frameId ??
	            null);
	    }
	    /** Returns the HTTP status code associated with this request if any. */
	    get #statusCode() {
	        return (this.#responseOverrides?.statusCode ??
	            this.#response.paused?.responseStatusCode ??
	            this.#response.extraInfo?.statusCode ??
	            this.#response.info?.status);
	    }
	    get #requestHeaders() {
	        let headers = [];
	        if (this.#requestOverrides?.headers) {
	            headers = this.#requestOverrides.headers;
	        }
	        else {
	            headers = [
	                ...(0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#request.info?.request.headers),
	                ...(0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#request.extraInfo?.headers),
	            ];
	        }
	        return headers;
	    }
	    get #authChallenges() {
	        // TODO: get headers from Fetch.requestPaused
	        if (!this.#response.info) {
	            return;
	        }
	        if (!(this.#statusCode === 401 || this.#statusCode === 407)) {
	            return undefined;
	        }
	        const headerName = this.#statusCode === 401 ? 'WWW-Authenticate' : 'Proxy-Authenticate';
	        const authChallenges = [];
	        for (const [header, value] of Object.entries(this.#response.info.headers)) {
	            // TODO: Do a proper match based on https://httpwg.org/specs/rfc9110.html#credentials
	            // Or verify this works
	            if (header.localeCompare(headerName, undefined, { sensitivity: 'base' }) === 0) {
	                authChallenges.push({
	                    scheme: value.split(' ').at(0) ?? '',
	                    realm: value.match(REALM_REGEX)?.at(0) ?? '',
	                });
	            }
	        }
	        return authChallenges;
	    }
	    get #timings() {
	        // The timing in the CDP events are provided relative to the event's baseline.
	        // However, the baseline can be different for different events, and the events have to
	        // be normalized throughout resource events. Normalize events timestamps  by the
	        // request.
	        // TODO: Verify this is correct.
	        const responseTimeOffset = (0, NetworkUtils_js_1.getTiming)((0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.requestTime) -
	            (0, NetworkUtils_js_1.getTiming)(this.#request.info?.timestamp));
	        return {
	            // TODO: Verify this is correct
	            timeOrigin: Math.round((0, NetworkUtils_js_1.getTiming)(this.#request.info?.wallTime) * 1000),
	            // Timing baseline.
	            // TODO: Verify this is correct.
	            requestTime: 0,
	            // TODO: set if redirect detected.
	            redirectStart: 0,
	            // TODO: set if redirect detected.
	            redirectEnd: 0,
	            // TODO: Verify this is correct
	            // https://source.chromium.org/chromium/chromium/src/+/main:net/base/load_timing_info.h;l=145
	            fetchStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.workerFetchStart, responseTimeOffset),
	            // fetchStart: 0,
	            dnsStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.dnsStart, responseTimeOffset),
	            dnsEnd: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.dnsEnd, responseTimeOffset),
	            connectStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.connectStart, responseTimeOffset),
	            connectEnd: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.connectEnd, responseTimeOffset),
	            tlsStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.sslStart, responseTimeOffset),
	            requestStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.sendStart, responseTimeOffset),
	            // https://source.chromium.org/chromium/chromium/src/+/main:net/base/load_timing_info.h;l=196
	            responseStart: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.receiveHeadersStart, responseTimeOffset),
	            responseEnd: (0, NetworkUtils_js_1.getTiming)(this.#response.info?.timing?.receiveHeadersEnd, responseTimeOffset),
	        };
	    }
	    #phaseChanged() {
	        this.waitNextPhase.resolve();
	        this.waitNextPhase = new Deferred_js_1.Deferred();
	    }
	    #interceptsInPhase(phase) {
	        if (!this.#cdpTarget.isSubscribedTo(`network.${phase}`)) {
	            return new Set();
	        }
	        return this.#networkStorage.getInterceptsForPhase(this, phase);
	    }
	    #isBlockedInPhase(phase) {
	        return this.#interceptsInPhase(phase).size > 0;
	    }
	    handleRedirect(event) {
	        // TODO: use event.redirectResponse;
	        // Temporary workaround to emit ResponseCompleted event for redirects
	        this.#response.hasExtraInfo = false;
	        this.#response.info = event.redirectResponse;
	        this.#emitEventsIfReady({
	            wasRedirected: true,
	        });
	    }
	    #emitEventsIfReady(options = {}) {
	        const requestExtraInfoCompleted = 
	        // Flush redirects
	        options.wasRedirected ||
	            options.hasFailed ||
	            this.#isDataUrl() ||
	            Boolean(this.#request.extraInfo) ||
	            // Requests from cache don't have extra info
	            this.#servedFromCache ||
	            // Sometimes there is no extra info and the response
	            // is the only place we can find out
	            Boolean(this.#response.info && !this.#response.hasExtraInfo);
	        const noInterceptionExpected = 
	        // We can't intercept data urls from CDP
	        this.#isDataUrl() ||
	            // Cached requests never hit the network
	            this.#servedFromCache;
	        const requestInterceptionExpected = !noInterceptionExpected &&
	            this.#isBlockedInPhase("beforeRequestSent" /* Network.InterceptPhase.BeforeRequestSent */);
	        const requestInterceptionCompleted = !requestInterceptionExpected ||
	            (requestInterceptionExpected && Boolean(this.#request.paused));
	        if (Boolean(this.#request.info) &&
	            (requestInterceptionExpected
	                ? requestInterceptionCompleted
	                : requestExtraInfoCompleted)) {
	            this.#emitEvent(this.#getBeforeRequestEvent.bind(this));
	        }
	        const responseExtraInfoCompleted = Boolean(this.#response.extraInfo) ||
	            // Response from cache don't have extra info
	            this.#servedFromCache ||
	            // Don't expect extra info if the flag is false
	            Boolean(this.#response.info && !this.#response.hasExtraInfo);
	        const responseInterceptionExpected = !noInterceptionExpected &&
	            this.#isBlockedInPhase("responseStarted" /* Network.InterceptPhase.ResponseStarted */);
	        if (this.#response.info ||
	            (responseInterceptionExpected && Boolean(this.#response.paused))) {
	            this.#emitEvent(this.#getResponseStartedEvent.bind(this));
	        }
	        const responseInterceptionCompleted = !responseInterceptionExpected ||
	            (responseInterceptionExpected && Boolean(this.#response.paused));
	        if (Boolean(this.#response.info) &&
	            responseExtraInfoCompleted &&
	            responseInterceptionCompleted) {
	            this.#emitEvent(this.#getResponseReceivedEvent.bind(this));
	            this.#networkStorage.deleteRequest(this.id);
	        }
	    }
	    onRequestWillBeSentEvent(event) {
	        this.#request.info = event;
	        this.#emitEventsIfReady();
	    }
	    onRequestWillBeSentExtraInfoEvent(event) {
	        this.#request.extraInfo = event;
	        this.#emitEventsIfReady();
	    }
	    onResponseReceivedExtraInfoEvent(event) {
	        if (event.statusCode >= 300 &&
	            event.statusCode <= 399 &&
	            this.#request.info &&
	            event.headers['location'] === this.#request.info.request.url) {
	            // We received the Response Extra info for the redirect
	            // Too late so we need to skip it as it will
	            // fire wrongly for the last one
	            return;
	        }
	        this.#response.extraInfo = event;
	        this.#emitEventsIfReady();
	    }
	    onResponseReceivedEvent(event) {
	        this.#response.hasExtraInfo = event.hasExtraInfo;
	        this.#response.info = event.response;
	        this.#emitEventsIfReady();
	    }
	    onServedFromCache() {
	        this.#servedFromCache = true;
	        this.#emitEventsIfReady();
	    }
	    onLoadingFailedEvent(event) {
	        this.#emitEventsIfReady({
	            hasFailed: true,
	        });
	        this.#emitEvent(() => {
	            return {
	                method: protocol_js_1.ChromiumBidi.Network.EventNames.FetchError,
	                params: {
	                    ...this.#getBaseEventParams(),
	                    errorText: event.errorText,
	                },
	            };
	        });
	    }
	    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-failRequest */
	    async failRequest(errorReason) {
	        (0, assert_js_1.assert)(this.#fetchId, 'Network Interception not set-up.');
	        await this.cdpClient.sendCommand('Fetch.failRequest', {
	            requestId: this.#fetchId,
	            errorReason,
	        });
	        this.#interceptPhase = undefined;
	    }
	    onRequestPaused(event) {
	        this.#fetchId = event.requestId;
	        // CDP https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#event-requestPaused
	        if (event.responseStatusCode || event.responseErrorReason) {
	            this.#response.paused = event;
	            if (this.#isBlockedInPhase("responseStarted" /* Network.InterceptPhase.ResponseStarted */) &&
	                // CDP may emit multiple events for a single request
	                !this.#emittedEvents[protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted] &&
	                // Continue all response that have not enabled Network domain
	                this.#fetchId !== this.id) {
	                this.#interceptPhase = "responseStarted" /* Network.InterceptPhase.ResponseStarted */;
	            }
	            else {
	                void this.#continueResponse();
	            }
	        }
	        else {
	            this.#request.paused = event;
	            if (this.#isBlockedInPhase("beforeRequestSent" /* Network.InterceptPhase.BeforeRequestSent */) &&
	                // CDP may emit multiple events for a single request
	                !this.#emittedEvents[protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent] &&
	                // Continue all requests that have not enabled Network domain
	                this.#fetchId !== this.id) {
	                this.#interceptPhase = "beforeRequestSent" /* Network.InterceptPhase.BeforeRequestSent */;
	            }
	            else {
	                void this.#continueRequest();
	            }
	        }
	        this.#emitEventsIfReady();
	    }
	    onAuthRequired(event) {
	        this.#fetchId = event.requestId;
	        this.#request.auth = event;
	        if (this.#isBlockedInPhase("authRequired" /* Network.InterceptPhase.AuthRequired */) &&
	            // Continue all auth requests that have not enabled Network domain
	            this.#fetchId !== this.id) {
	            this.#interceptPhase = "authRequired" /* Network.InterceptPhase.AuthRequired */;
	        }
	        else {
	            void this.#continueWithAuth({
	                response: 'Default',
	            });
	        }
	        this.#emitEvent(() => {
	            return {
	                method: protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired,
	                params: {
	                    ...this.#getBaseEventParams("authRequired" /* Network.InterceptPhase.AuthRequired */),
	                    response: this.#getResponseEventParams(),
	                },
	            };
	        });
	    }
	    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueRequest */
	    async continueRequest(overrides = {}) {
	        const overrideHeaders = this.#getOverrideHeader(overrides.headers, overrides.cookies);
	        const headers = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(overrideHeaders);
	        const postData = getCdpBodyFromBiDiBytesValue(overrides.body);
	        await this.#continueRequest({
	            url: overrides.url,
	            method: overrides.method,
	            headers,
	            postData,
	        });
	        this.#requestOverrides = {
	            url: overrides.url,
	            method: overrides.method,
	            headers: overrides.headers,
	            cookies: overrides.cookies,
	            bodySize: getSizeFromBiDiBytesValue(overrides.body),
	        };
	    }
	    async #continueRequest(overrides = {}) {
	        (0, assert_js_1.assert)(this.#fetchId, 'Network Interception not set-up.');
	        await this.cdpClient.sendCommand('Fetch.continueRequest', {
	            requestId: this.#fetchId,
	            url: overrides.url,
	            method: overrides.method,
	            headers: overrides.headers,
	            postData: overrides.postData,
	        });
	        this.#interceptPhase = undefined;
	    }
	    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueResponse */
	    async continueResponse(overrides = {}) {
	        if (this.interceptPhase === "authRequired" /* Network.InterceptPhase.AuthRequired */) {
	            if (overrides.credentials) {
	                await Promise.all([
	                    this.waitNextPhase,
	                    await this.#continueWithAuth({
	                        response: 'ProvideCredentials',
	                        username: overrides.credentials.username,
	                        password: overrides.credentials.password,
	                    }),
	                ]);
	            }
	            else {
	                // We need to use `ProvideCredentials`
	                // As `Default` may cancel the request
	                return await this.#continueWithAuth({
	                    response: 'ProvideCredentials',
	                });
	            }
	        }
	        if (this.#interceptPhase === "responseStarted" /* Network.InterceptPhase.ResponseStarted */) {
	            const overrideHeaders = this.#getOverrideHeader(overrides.headers, overrides.cookies);
	            const responseHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(overrideHeaders);
	            await this.#continueResponse({
	                responseCode: overrides.statusCode ?? this.#response.paused?.responseStatusCode,
	                responsePhrase: overrides.reasonPhrase ?? this.#response.paused?.responseStatusText,
	                responseHeaders: responseHeaders ?? this.#response.paused?.responseHeaders,
	            });
	            this.#responseOverrides = {
	                statusCode: overrides.statusCode,
	                headers: overrideHeaders,
	            };
	        }
	    }
	    async #continueResponse({ responseCode, responsePhrase, responseHeaders, } = {}) {
	        (0, assert_js_1.assert)(this.#fetchId, 'Network Interception not set-up.');
	        await this.cdpClient.sendCommand('Fetch.continueResponse', {
	            requestId: this.#fetchId,
	            responseCode,
	            responsePhrase,
	            responseHeaders,
	        });
	        this.#interceptPhase = undefined;
	    }
	    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-continueWithAuth */
	    async continueWithAuth(authChallenge) {
	        let username;
	        let password;
	        if (authChallenge.action === 'provideCredentials') {
	            const { credentials } = authChallenge;
	            username = credentials.username;
	            password = credentials.password;
	        }
	        const response = (0, NetworkUtils_js_1.cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction)(authChallenge.action);
	        await this.#continueWithAuth({
	            response,
	            username,
	            password,
	        });
	    }
	    /** @see https://chromedevtools.github.io/devtools-protocol/tot/Fetch/#method-provideResponse */
	    async provideResponse(overrides) {
	        (0, assert_js_1.assert)(this.#fetchId, 'Network Interception not set-up.');
	        // We need to pass through if the request is already in
	        // AuthRequired phase
	        if (this.interceptPhase === "authRequired" /* Network.InterceptPhase.AuthRequired */) {
	            // We need to use `ProvideCredentials`
	            // As `Default` may cancel the request
	            return await this.#continueWithAuth({
	                response: 'ProvideCredentials',
	            });
	        }
	        // If we don't modify the response
	        // just continue the request
	        if (!overrides.body && !overrides.headers) {
	            return await this.#continueRequest();
	        }
	        const overrideHeaders = this.#getOverrideHeader(overrides.headers, overrides.cookies);
	        const responseHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(overrideHeaders);
	        const responseCode = overrides.statusCode ?? this.#statusCode ?? 200;
	        await this.cdpClient.sendCommand('Fetch.fulfillRequest', {
	            requestId: this.#fetchId,
	            responseCode,
	            responsePhrase: overrides.reasonPhrase,
	            responseHeaders,
	            body: getCdpBodyFromBiDiBytesValue(overrides.body),
	        });
	        this.#interceptPhase = undefined;
	    }
	    dispose() {
	        this.waitNextPhase.reject(new Error('waitNextPhase disposed'));
	    }
	    async #continueWithAuth(authChallengeResponse) {
	        (0, assert_js_1.assert)(this.#fetchId, 'Network Interception not set-up.');
	        await this.cdpClient.sendCommand('Fetch.continueWithAuth', {
	            requestId: this.#fetchId,
	            authChallengeResponse,
	        });
	        this.#interceptPhase = undefined;
	    }
	    #emitEvent(getEvent) {
	        let event;
	        try {
	            event = getEvent();
	        }
	        catch (error) {
	            this.#logger?.(log_js_1.LogType.debugError, error);
	            return;
	        }
	        if (this.#isIgnoredEvent() ||
	            (this.#emittedEvents[event.method] &&
	                // Special case this event can be emitted multiple times
	                event.method !== protocol_js_1.ChromiumBidi.Network.EventNames.AuthRequired)) {
	            return;
	        }
	        this.#phaseChanged();
	        this.#emittedEvents[event.method] = true;
	        this.#eventManager.registerEvent(Object.assign(event, {
	            type: 'event',
	        }), this.#context);
	    }
	    #getBaseEventParams(phase) {
	        const interceptProps = {
	            isBlocked: false,
	        };
	        if (phase) {
	            const blockedBy = this.#interceptsInPhase(phase);
	            interceptProps.isBlocked = blockedBy.size > 0;
	            if (interceptProps.isBlocked) {
	                interceptProps.intercepts = [...blockedBy];
	            }
	        }
	        return {
	            context: this.#context,
	            navigation: this.#navigationId,
	            redirectCount: this.#redirectCount,
	            request: this.#getRequestData(),
	            // Timestamp should be in milliseconds, while CDP provides it in seconds.
	            timestamp: Math.round((0, NetworkUtils_js_1.getTiming)(this.#request.info?.wallTime) * 1000),
	            // Contains isBlocked and intercepts
	            ...interceptProps,
	        };
	    }
	    #getResponseEventParams() {
	        // Chromium sends wrong extraInfo events for responses served from cache.
	        // See https://github.com/puppeteer/puppeteer/issues/9965 and
	        // https://crbug.com/1340398.
	        if (this.#response.info?.fromDiskCache) {
	            this.#response.extraInfo = undefined;
	        }
	        const headers = [
	            ...(0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#response.info?.headers),
	            ...(0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#response.extraInfo?.headers),
	            // TODO: Verify how to dedupe these
	            // ...bidiNetworkHeadersFromCdpNetworkHeadersEntries(
	            //   this.#response.paused?.responseHeaders
	            // ),
	        ];
	        const authChallenges = this.#authChallenges;
	        const response = {
	            url: this.url,
	            protocol: this.#response.info?.protocol ?? '',
	            status: this.#statusCode ?? -1, // TODO: Throw an exception or use some other status code?
	            statusText: this.#response.info?.statusText ||
	                this.#response.paused?.responseStatusText ||
	                '',
	            fromCache: this.#response.info?.fromDiskCache ||
	                this.#response.info?.fromPrefetchCache ||
	                this.#servedFromCache,
	            headers: this.#responseOverrides?.headers ?? headers,
	            mimeType: this.#response.info?.mimeType || '',
	            bytesReceived: this.#response.info?.encodedDataLength || 0,
	            headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers),
	            // TODO: consider removing from spec.
	            bodySize: 0,
	            content: {
	                // TODO: consider removing from spec.
	                size: 0,
	            },
	            ...(authChallenges ? { authChallenges } : {}),
	        };
	        return {
	            ...response,
	            'goog:securityDetails': this.#response.info?.securityDetails,
	        };
	    }
	    #getRequestData() {
	        const headers = this.#requestHeaders;
	        const request = {
	            request: this.#id,
	            url: this.url,
	            method: this.#method ?? _a.unknownParameter,
	            headers,
	            cookies: this.#cookies,
	            headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers),
	            bodySize: this.#bodySize,
	            // TODO: populate
	            destination: '',
	            // TODO: populate
	            initiatorType: null,
	            timings: this.#timings,
	        };
	        return {
	            ...request,
	            'goog:postData': this.#request.info?.request?.postData,
	            'goog:hasPostData': this.#request.info?.request?.hasPostData,
	            'goog:resourceType': this.#request.info?.type,
	        };
	    }
	    #getBeforeRequestEvent() {
	        (0, assert_js_1.assert)(this.#request.info, 'RequestWillBeSentEvent is not set');
	        return {
	            method: protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent,
	            params: {
	                ...this.#getBaseEventParams("beforeRequestSent" /* Network.InterceptPhase.BeforeRequestSent */),
	                initiator: {
	                    type: _a.#getInitiatorType(this.#request.info.initiator.type),
	                    columnNumber: this.#request.info.initiator.columnNumber,
	                    lineNumber: this.#request.info.initiator.lineNumber,
	                    stackTrace: this.#request.info.initiator.stack,
	                    request: this.#request.info.initiator.requestId,
	                },
	            },
	        };
	    }
	    #getResponseStartedEvent() {
	        return {
	            method: protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted,
	            params: {
	                ...this.#getBaseEventParams("responseStarted" /* Network.InterceptPhase.ResponseStarted */),
	                response: this.#getResponseEventParams(),
	            },
	        };
	    }
	    #getResponseReceivedEvent() {
	        return {
	            method: protocol_js_1.ChromiumBidi.Network.EventNames.ResponseCompleted,
	            params: {
	                ...this.#getBaseEventParams(),
	                response: this.#getResponseEventParams(),
	            },
	        };
	    }
	    #isIgnoredEvent() {
	        const faviconUrl = '/favicon.ico';
	        return (this.#request.paused?.request.url.endsWith(faviconUrl) ??
	            this.#request.info?.request.url.endsWith(faviconUrl) ??
	            false);
	    }
	    #getOverrideHeader(headers, cookies) {
	        if (!headers && !cookies) {
	            return undefined;
	        }
	        let overrideHeaders = headers;
	        const cookieHeader = (0, NetworkUtils_js_1.networkHeaderFromCookieHeaders)(cookies);
	        if (cookieHeader && !overrideHeaders) {
	            overrideHeaders = this.#requestHeaders;
	        }
	        if (cookieHeader && overrideHeaders) {
	            overrideHeaders.filter((header) => header.name.localeCompare('cookie', undefined, {
	                sensitivity: 'base',
	            }) !== 0);
	            overrideHeaders.push(cookieHeader);
	        }
	        return overrideHeaders;
	    }
	    static #getInitiatorType(initiatorType) {
	        switch (initiatorType) {
	            case 'parser':
	            case 'script':
	            case 'preflight':
	                return initiatorType;
	            default:
	                return 'other';
	        }
	    }
	};
	NetworkRequest.NetworkRequest = NetworkRequest$1;
	_a = NetworkRequest$1;
	function getCdpBodyFromBiDiBytesValue(body) {
	    let parsedBody;
	    if (body?.type === 'string') {
	        parsedBody = btoa(body.value);
	    }
	    else if (body?.type === 'base64') {
	        parsedBody = body.value;
	    }
	    return parsedBody;
	}
	function getSizeFromBiDiBytesValue(body) {
	    if (body?.type === 'string') {
	        return body.value.length;
	    }
	    else if (body?.type === 'base64') {
	        return atob(body.value).length;
	    }
	    return 0;
	}
	
	return NetworkRequest;
}

var hasRequiredNetworkStorage;

function requireNetworkStorage () {
	if (hasRequiredNetworkStorage) return NetworkStorage;
	hasRequiredNetworkStorage = 1;
	Object.defineProperty(NetworkStorage, "__esModule", { value: true });
	NetworkStorage.NetworkStorage = void 0;
	const protocol_js_1 = requireProtocol();
	const uuid_js_1 = requireUuid();
	const NetworkRequest_js_1 = requireNetworkRequest();
	const NetworkUtils_js_1 = requireNetworkUtils();
	/** Stores network and intercept maps. */
	let NetworkStorage$1 = class NetworkStorage {
	    #browsingContextStorage;
	    #eventManager;
	    #logger;
	    /**
	     * A map from network request ID to Network Request objects.
	     * Needed as long as information about requests comes from different events.
	     */
	    #requests = new Map();
	    /** A map from intercept ID to track active network intercepts. */
	    #intercepts = new Map();
	    #defaultCacheBehavior = 'default';
	    constructor(eventManager, browsingContextStorage, browserClient, logger) {
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#eventManager = eventManager;
	        browserClient.on('Target.detachedFromTarget', ({ sessionId }) => {
	            this.disposeRequestMap(sessionId);
	        });
	        this.#logger = logger;
	    }
	    /**
	     * Gets the network request with the given ID, if any.
	     * Otherwise, creates a new network request with the given ID and cdp target.
	     */
	    #getOrCreateNetworkRequest(id, cdpTarget, redirectCount) {
	        let request = this.getRequestById(id);
	        if (request) {
	            return request;
	        }
	        request = new NetworkRequest_js_1.NetworkRequest(id, this.#eventManager, this, cdpTarget, redirectCount, this.#logger);
	        this.addRequest(request);
	        return request;
	    }
	    onCdpTargetCreated(cdpTarget) {
	        const cdpClient = cdpTarget.cdpClient;
	        // TODO: Wrap into object
	        const listeners = [
	            [
	                'Network.requestWillBeSent',
	                (params) => {
	                    const request = this.getRequestById(params.requestId);
	                    if (request && request.isRedirecting()) {
	                        request.handleRedirect(params);
	                        this.deleteRequest(params.requestId);
	                        this.#getOrCreateNetworkRequest(params.requestId, cdpTarget, request.redirectCount + 1).onRequestWillBeSentEvent(params);
	                    }
	                    else {
	                        this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onRequestWillBeSentEvent(params);
	                    }
	                },
	            ],
	            [
	                'Network.requestWillBeSentExtraInfo',
	                (params) => {
	                    this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onRequestWillBeSentExtraInfoEvent(params);
	                },
	            ],
	            [
	                'Network.responseReceived',
	                (params) => {
	                    this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onResponseReceivedEvent(params);
	                },
	            ],
	            [
	                'Network.responseReceivedExtraInfo',
	                (params) => {
	                    this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onResponseReceivedExtraInfoEvent(params);
	                },
	            ],
	            [
	                'Network.requestServedFromCache',
	                (params) => {
	                    this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onServedFromCache();
	                },
	            ],
	            [
	                'Network.loadingFailed',
	                (params) => {
	                    this.#getOrCreateNetworkRequest(params.requestId, cdpTarget).onLoadingFailedEvent(params);
	                },
	            ],
	            [
	                'Fetch.requestPaused',
	                (event) => {
	                    this.#getOrCreateNetworkRequest(
	                    // CDP quirk if the Network domain is not present this is undefined
	                    event.networkId ?? event.requestId, cdpTarget).onRequestPaused(event);
	                },
	            ],
	            [
	                'Fetch.authRequired',
	                (event) => {
	                    let request = this.getRequestByFetchId(event.requestId);
	                    if (!request) {
	                        request = this.#getOrCreateNetworkRequest(event.requestId, cdpTarget);
	                    }
	                    request.onAuthRequired(event);
	                },
	            ],
	        ];
	        for (const [event, listener] of listeners) {
	            cdpClient.on(event, listener);
	        }
	    }
	    getInterceptionStages(browsingContextId) {
	        const stages = {
	            request: false,
	            response: false,
	            auth: false,
	        };
	        for (const intercept of this.#intercepts.values()) {
	            if (intercept.contexts &&
	                !intercept.contexts.includes(browsingContextId)) {
	                continue;
	            }
	            stages.request ||= intercept.phases.includes("beforeRequestSent" /* Network.InterceptPhase.BeforeRequestSent */);
	            stages.response ||= intercept.phases.includes("responseStarted" /* Network.InterceptPhase.ResponseStarted */);
	            stages.auth ||= intercept.phases.includes("authRequired" /* Network.InterceptPhase.AuthRequired */);
	        }
	        return stages;
	    }
	    getInterceptsForPhase(request, phase) {
	        if (request.url === NetworkRequest_js_1.NetworkRequest.unknownParameter) {
	            return new Set();
	        }
	        const intercepts = new Set();
	        for (const [interceptId, intercept] of this.#intercepts.entries()) {
	            if (!intercept.phases.includes(phase) ||
	                (intercept.contexts &&
	                    !intercept.contexts.includes(request.cdpTarget.topLevelId))) {
	                continue;
	            }
	            if (intercept.urlPatterns.length === 0) {
	                intercepts.add(interceptId);
	                continue;
	            }
	            for (const pattern of intercept.urlPatterns) {
	                if ((0, NetworkUtils_js_1.matchUrlPattern)(pattern, request.url)) {
	                    intercepts.add(interceptId);
	                    break;
	                }
	            }
	        }
	        return intercepts;
	    }
	    disposeRequestMap(sessionId) {
	        for (const request of this.#requests.values()) {
	            if (request.cdpClient.sessionId === sessionId) {
	                this.#requests.delete(request.id);
	                request.dispose();
	            }
	        }
	    }
	    /**
	     * Adds the given entry to the intercept map.
	     * URL patterns are assumed to be parsed.
	     *
	     * @return The intercept ID.
	     */
	    addIntercept(value) {
	        const interceptId = (0, uuid_js_1.uuidv4)();
	        this.#intercepts.set(interceptId, value);
	        return interceptId;
	    }
	    /**
	     * Removes the given intercept from the intercept map.
	     * Throws NoSuchInterceptException if the intercept does not exist.
	     */
	    removeIntercept(intercept) {
	        if (!this.#intercepts.has(intercept)) {
	            throw new protocol_js_1.NoSuchInterceptException(`Intercept '${intercept}' does not exist.`);
	        }
	        this.#intercepts.delete(intercept);
	    }
	    getRequestsByTarget(target) {
	        const requests = [];
	        for (const request of this.#requests.values()) {
	            if (request.cdpTarget === target) {
	                requests.push(request);
	            }
	        }
	        return requests;
	    }
	    getRequestById(id) {
	        return this.#requests.get(id);
	    }
	    getRequestByFetchId(fetchId) {
	        for (const request of this.#requests.values()) {
	            if (request.fetchId === fetchId) {
	                return request;
	            }
	        }
	        return;
	    }
	    addRequest(request) {
	        this.#requests.set(request.id, request);
	    }
	    deleteRequest(id) {
	        this.#requests.delete(id);
	    }
	    /**
	     * Gets the virtual navigation ID for the given navigable ID.
	     */
	    getNavigationId(contextId) {
	        if (contextId === undefined) {
	            return null;
	        }
	        return (this.#browsingContextStorage.findContext(contextId)?.navigationId ?? null);
	    }
	    set defaultCacheBehavior(behavior) {
	        this.#defaultCacheBehavior = behavior;
	    }
	    get defaultCacheBehavior() {
	        return this.#defaultCacheBehavior;
	    }
	};
	NetworkStorage.NetworkStorage = NetworkStorage$1;
	
	return NetworkStorage;
}

var PreloadScriptStorage = {};

var hasRequiredPreloadScriptStorage;

function requirePreloadScriptStorage () {
	if (hasRequiredPreloadScriptStorage) return PreloadScriptStorage;
	hasRequiredPreloadScriptStorage = 1;
	Object.defineProperty(PreloadScriptStorage, "__esModule", { value: true });
	PreloadScriptStorage.PreloadScriptStorage = void 0;
	/**
	 * Container class for preload scripts.
	 */
	let PreloadScriptStorage$1 = class PreloadScriptStorage {
	    /** Tracks all BiDi preload scripts.  */
	    #scripts = new Set();
	    /**
	     * Finds all entries that match the given filter (OR logic).
	     */
	    find(filter) {
	        if (!filter) {
	            return [...this.#scripts];
	        }
	        return [...this.#scripts].filter((script) => {
	            if (filter.id !== undefined && filter.id === script.id) {
	                return true;
	            }
	            if (filter.targetId !== undefined &&
	                script.targetIds.has(filter.targetId)) {
	                return true;
	            }
	            if (filter.global !== undefined &&
	                // Global scripts have no contexts
	                ((filter.global && script.contexts === undefined) ||
	                    // Non global scripts always have contexts
	                    (!filter.global && script.contexts !== undefined))) {
	                return true;
	            }
	            return false;
	        });
	    }
	    add(preloadScript) {
	        this.#scripts.add(preloadScript);
	    }
	    /** Deletes all BiDi preload script entries that match the given filter. */
	    remove(filter) {
	        for (const preloadScript of this.find(filter)) {
	            this.#scripts.delete(preloadScript);
	        }
	    }
	};
	PreloadScriptStorage.PreloadScriptStorage = PreloadScriptStorage$1;
	
	return PreloadScriptStorage;
}

var RealmStorage = {};

var hasRequiredRealmStorage;

function requireRealmStorage () {
	if (hasRequiredRealmStorage) return RealmStorage;
	hasRequiredRealmStorage = 1;
	Object.defineProperty(RealmStorage, "__esModule", { value: true });
	RealmStorage.RealmStorage = void 0;
	const protocol_js_1 = requireProtocol();
	const WindowRealm_js_1 = requireWindowRealm();
	/** Container class for browsing realms. */
	let RealmStorage$1 = class RealmStorage {
	    /** Tracks handles and their realms sent to the client. */
	    #knownHandlesToRealmMap = new Map();
	    /** Map from realm ID to Realm. */
	    #realmMap = new Map();
	    get knownHandlesToRealmMap() {
	        return this.#knownHandlesToRealmMap;
	    }
	    addRealm(realm) {
	        this.#realmMap.set(realm.realmId, realm);
	    }
	    /** Finds all realms that match the given filter. */
	    findRealms(filter) {
	        return Array.from(this.#realmMap.values()).filter((realm) => {
	            if (filter.realmId !== undefined && filter.realmId !== realm.realmId) {
	                return false;
	            }
	            if (filter.browsingContextId !== undefined &&
	                !realm.associatedBrowsingContexts
	                    .map((browsingContext) => browsingContext.id)
	                    .includes(filter.browsingContextId)) {
	                return false;
	            }
	            if (filter.sandbox !== undefined &&
	                (!(realm instanceof WindowRealm_js_1.WindowRealm) || filter.sandbox !== realm.sandbox)) {
	                return false;
	            }
	            if (filter.executionContextId !== undefined &&
	                filter.executionContextId !== realm.executionContextId) {
	                return false;
	            }
	            if (filter.origin !== undefined && filter.origin !== realm.origin) {
	                return false;
	            }
	            if (filter.type !== undefined && filter.type !== realm.realmType) {
	                return false;
	            }
	            if (filter.cdpSessionId !== undefined &&
	                filter.cdpSessionId !== realm.cdpClient.sessionId) {
	                return false;
	            }
	            return true;
	        });
	    }
	    findRealm(filter) {
	        const maybeRealms = this.findRealms(filter);
	        if (maybeRealms.length !== 1) {
	            return undefined;
	        }
	        return maybeRealms[0];
	    }
	    /** Gets the only realm that matches the given filter, if any, otherwise throws. */
	    getRealm(filter) {
	        const maybeRealm = this.findRealm(filter);
	        if (maybeRealm === undefined) {
	            throw new protocol_js_1.NoSuchFrameException(`Realm ${JSON.stringify(filter)} not found`);
	        }
	        return maybeRealm;
	    }
	    /** Deletes all realms that match the given filter. */
	    deleteRealms(filter) {
	        this.findRealms(filter).map((realm) => {
	            realm.dispose();
	            this.#realmMap.delete(realm.realmId);
	            Array.from(this.knownHandlesToRealmMap.entries())
	                .filter(([, r]) => r === realm.realmId)
	                .map(([handle]) => this.knownHandlesToRealmMap.delete(handle));
	        });
	    }
	};
	RealmStorage.RealmStorage = RealmStorage$1;
	
	return RealmStorage;
}

var EventManager = {};

var Buffer$1 = {};

var hasRequiredBuffer;

function requireBuffer () {
	if (hasRequiredBuffer) return Buffer$1;
	hasRequiredBuffer = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(Buffer$1, "__esModule", { value: true });
	Buffer$1.Buffer = void 0;
	/** Implements a FIFO buffer with a fixed size. */
	class Buffer {
	    #capacity;
	    #entries = [];
	    #onItemRemoved;
	    /**
	     * @param capacity The buffer capacity.
	     * @param onItemRemoved Delegate called for each removed element.
	     */
	    constructor(capacity, onItemRemoved) {
	        this.#capacity = capacity;
	        this.#onItemRemoved = onItemRemoved;
	    }
	    get() {
	        return this.#entries;
	    }
	    add(value) {
	        this.#entries.push(value);
	        while (this.#entries.length > this.#capacity) {
	            const item = this.#entries.shift();
	            if (item !== undefined) {
	                this.#onItemRemoved?.(item);
	            }
	        }
	    }
	}
	Buffer$1.Buffer = Buffer;
	
	return Buffer$1;
}

var DefaultMap = {};

var hasRequiredDefaultMap;

function requireDefaultMap () {
	if (hasRequiredDefaultMap) return DefaultMap;
	hasRequiredDefaultMap = 1;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(DefaultMap, "__esModule", { value: true });
	DefaultMap.DefaultMap = void 0;
	/**
	 * A subclass of Map whose functionality is almost the same as its parent
	 * except for the fact that DefaultMap never returns undefined. It provides a
	 * default value for keys that do not exist.
	 */
	let DefaultMap$1 = class DefaultMap extends Map {
	    /** The default value to return whenever a key is not present in the map. */
	    #getDefaultValue;
	    constructor(getDefaultValue, entries) {
	        super(entries);
	        this.#getDefaultValue = getDefaultValue;
	    }
	    get(key) {
	        if (!this.has(key)) {
	            this.set(key, this.#getDefaultValue(key));
	        }
	        return super.get(key);
	    }
	};
	DefaultMap.DefaultMap = DefaultMap$1;
	
	return DefaultMap;
}

var DistinctValues = {};

var hasRequiredDistinctValues;

function requireDistinctValues () {
	if (hasRequiredDistinctValues) return DistinctValues;
	hasRequiredDistinctValues = 1;
	/*
	 * Copyright 2024 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(DistinctValues, "__esModule", { value: true });
	DistinctValues.distinctValues = distinctValues;
	DistinctValues.deterministicJSONStringify = deterministicJSONStringify;
	/**
	 * Returns an array of distinct values. Order is not guaranteed.
	 * @param values - The values to filter. Should be JSON-serializable.
	 * @return - An array of distinct values.
	 */
	function distinctValues(values) {
	    const map = new Map();
	    for (const value of values) {
	        map.set(deterministicJSONStringify(value), value);
	    }
	    return Array.from(map.values());
	}
	/**
	 * Returns a stringified version of the object with keys sorted. This is required to
	 * ensure that the stringified version of an object is deterministic independent of the
	 * order of keys.
	 * @param obj
	 * @return {string}
	 */
	function deterministicJSONStringify(obj) {
	    return JSON.stringify(normalizeObject(obj));
	}
	function normalizeObject(obj) {
	    if (obj === undefined ||
	        obj === null ||
	        Array.isArray(obj) ||
	        typeof obj !== 'object') {
	        return obj;
	    }
	    // Copy the original object key and values to a new object in sorted order.
	    const newObj = {};
	    for (const key of Object.keys(obj).sort()) {
	        const value = obj[key];
	        newObj[key] = normalizeObject(value); // Recursively sort nested objects
	    }
	    return newObj;
	}
	
	return DistinctValues;
}

var IdWrapper = {};

var hasRequiredIdWrapper;

function requireIdWrapper () {
	if (hasRequiredIdWrapper) return IdWrapper;
	hasRequiredIdWrapper = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(IdWrapper, "__esModule", { value: true });
	IdWrapper.IdWrapper = void 0;
	/**
	 * Creates an object with a positive unique incrementing id.
	 */
	let IdWrapper$1 = class IdWrapper {
	    static #counter = 0;
	    #id;
	    constructor() {
	        this.#id = ++IdWrapper.#counter;
	    }
	    get id() {
	        return this.#id;
	    }
	};
	IdWrapper.IdWrapper = IdWrapper$1;
	
	return IdWrapper;
}

var events$1 = {};

var hasRequiredEvents$1;

function requireEvents$1 () {
	if (hasRequiredEvents$1) return events$1;
	hasRequiredEvents$1 = 1;
	Object.defineProperty(events$1, "__esModule", { value: true });
	events$1.isCdpEvent = isCdpEvent;
	events$1.isDeprecatedCdpEvent = isDeprecatedCdpEvent;
	events$1.assertSupportedEvent = assertSupportedEvent;
	/**
	 * Copyright 2023 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	const protocol_js_1 = requireProtocol();
	/**
	 * Returns true if the given event is a CDP event.
	 * @see https://chromedevtools.github.io/devtools-protocol/
	 */
	function isCdpEvent(name) {
	    return (name.split('.').at(0)?.startsWith(protocol_js_1.ChromiumBidi.BiDiModule.Cdp) ?? false);
	}
	/**
	 * Returns true if the given event is a deprecated CDP event.
	 * @see https://chromedevtools.github.io/devtools-protocol/
	 */
	function isDeprecatedCdpEvent(name) {
	    return (name.split('.').at(0)?.startsWith(protocol_js_1.ChromiumBidi.BiDiModule.DeprecatedCdp) ??
	        false);
	}
	/**
	 * Asserts that the given event is known to BiDi or BiDi+, or throws otherwise.
	 */
	function assertSupportedEvent(name) {
	    if (!protocol_js_1.ChromiumBidi.EVENT_NAMES.has(name) &&
	        !isCdpEvent(name) &&
	        !isDeprecatedCdpEvent(name)) {
	        throw new protocol_js_1.InvalidArgumentException(`Unknown event: ${name}`);
	    }
	}
	
	return events$1;
}

var SubscriptionManager = {};

var hasRequiredSubscriptionManager;

function requireSubscriptionManager () {
	if (hasRequiredSubscriptionManager) return SubscriptionManager;
	hasRequiredSubscriptionManager = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(SubscriptionManager, "__esModule", { value: true });
	SubscriptionManager.SubscriptionManager = void 0;
	SubscriptionManager.cartesianProduct = cartesianProduct;
	SubscriptionManager.unrollEvents = unrollEvents;
	const protocol_js_1 = requireProtocol();
	const events_js_1 = requireEvents$1();
	/**
	 * Returns the cartesian product of the given arrays.
	 *
	 * Example:
	 *   cartesian([1, 2], ['a', 'b']); => [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
	 */
	function cartesianProduct(...a) {
	    return a.reduce((a, b) => a.flatMap((d) => b.map((e) => [d, e].flat())));
	}
	/** Expands "AllEvents" events into atomic events. */
	function unrollEvents(events) {
	    const allEvents = new Set();
	    function addEvents(events) {
	        for (const event of events) {
	            allEvents.add(event);
	        }
	    }
	    for (const event of events) {
	        switch (event) {
	            case protocol_js_1.ChromiumBidi.BiDiModule.Bluetooth:
	                addEvents(Object.values(protocol_js_1.ChromiumBidi.Bluetooth.EventNames));
	                break;
	            case protocol_js_1.ChromiumBidi.BiDiModule.BrowsingContext:
	                addEvents(Object.values(protocol_js_1.ChromiumBidi.BrowsingContext.EventNames));
	                break;
	            case protocol_js_1.ChromiumBidi.BiDiModule.Log:
	                addEvents(Object.values(protocol_js_1.ChromiumBidi.Log.EventNames));
	                break;
	            case protocol_js_1.ChromiumBidi.BiDiModule.Network:
	                addEvents(Object.values(protocol_js_1.ChromiumBidi.Network.EventNames));
	                break;
	            case protocol_js_1.ChromiumBidi.BiDiModule.Script:
	                addEvents(Object.values(protocol_js_1.ChromiumBidi.Script.EventNames));
	                break;
	            default:
	                allEvents.add(event);
	        }
	    }
	    return [...allEvents.values()];
	}
	let SubscriptionManager$1 = class SubscriptionManager {
	    #subscriptionPriority = 0;
	    // BrowsingContext `null` means the event has subscription across all the
	    // browsing contexts.
	    // Channel `null` means no `channel` should be added.
	    #channelToContextToEventMap = new Map();
	    #browsingContextStorage;
	    constructor(browsingContextStorage) {
	        this.#browsingContextStorage = browsingContextStorage;
	    }
	    getChannelsSubscribedToEvent(eventMethod, contextId) {
	        const prioritiesAndChannels = Array.from(this.#channelToContextToEventMap.keys())
	            .map((channel) => ({
	            priority: this.#getEventSubscriptionPriorityForChannel(eventMethod, contextId, channel),
	            channel,
	        }))
	            .filter(({ priority }) => priority !== null);
	        // Sort channels by priority.
	        return prioritiesAndChannels
	            .sort((a, b) => a.priority - b.priority)
	            .map(({ channel }) => channel);
	    }
	    #getEventSubscriptionPriorityForChannel(eventMethod, contextId, channel) {
	        const contextToEventMap = this.#channelToContextToEventMap.get(channel);
	        if (contextToEventMap === undefined) {
	            return null;
	        }
	        const maybeTopLevelContextId = this.#browsingContextStorage.findTopLevelContextId(contextId);
	        // `null` covers global subscription.
	        const relevantContexts = [...new Set([null, maybeTopLevelContextId])];
	        // Get all the subscription priorities.
	        const priorities = relevantContexts
	            .map((context) => {
	            // Get the priority for exact event name
	            const priority = contextToEventMap.get(context)?.get(eventMethod);
	            // For CDP we can't provide specific event name when subscribing
	            // to the module directly.
	            // Because of that we need to see event `cdp` exists in the map.
	            if ((0, events_js_1.isCdpEvent)(eventMethod)) {
	                const cdpPriority = contextToEventMap
	                    .get(context)
	                    ?.get(protocol_js_1.ChromiumBidi.BiDiModule.Cdp);
	                // If we subscribe to the event directly and `cdp` module as well
	                // priority will be different we take minimal priority
	                return priority && cdpPriority
	                    ? Math.min(priority, cdpPriority)
	                    : // At this point we know that we have subscribed
	                        // to only one of the two
	                        (priority ?? cdpPriority);
	            }
	            // https://github.com/GoogleChromeLabs/chromium-bidi/issues/2844.
	            if ((0, events_js_1.isDeprecatedCdpEvent)(eventMethod)) {
	                const cdpPriority = contextToEventMap
	                    .get(context)
	                    ?.get(protocol_js_1.ChromiumBidi.BiDiModule.DeprecatedCdp);
	                // If we subscribe to the event directly and `cdp` module as well
	                // priority will be different we take minimal priority
	                return priority && cdpPriority
	                    ? Math.min(priority, cdpPriority)
	                    : // At this point we know that we have subscribed
	                        // to only one of the two
	                        (priority ?? cdpPriority);
	            }
	            return priority;
	        })
	            .filter((p) => p !== undefined);
	        if (priorities.length === 0) {
	            // Not subscribed, return null.
	            return null;
	        }
	        // Return minimal priority.
	        return Math.min(...priorities);
	    }
	    /**
	     * @param module BiDi+ module
	     * @param contextId `null` == globally subscribed
	     *
	     * @returns
	     */
	    isSubscribedTo(moduleOrEvent, contextId = null) {
	        const topLevelContext = this.#browsingContextStorage.findTopLevelContextId(contextId);
	        for (const browserContextToEventMap of this.#channelToContextToEventMap.values()) {
	            for (const [id, eventMap] of browserContextToEventMap.entries()) {
	                // Not subscribed to this context or globally
	                if (topLevelContext !== id && id !== null) {
	                    continue;
	                }
	                for (const event of eventMap.keys()) {
	                    // This also covers the `cdp` case where
	                    // we don't unroll the event names
	                    if (
	                    // Event explicitly subscribed
	                    event === moduleOrEvent ||
	                        // Event subscribed via module
	                        event === moduleOrEvent.split('.').at(0) ||
	                        // Event explicitly subscribed compared to module
	                        event.split('.').at(0) === moduleOrEvent) {
	                        return true;
	                    }
	                }
	            }
	        }
	        return false;
	    }
	    /**
	     * Subscribes to event in the given context and channel.
	     * @param {EventNames} event
	     * @param {BrowsingContext.BrowsingContext | null} contextId
	     * @param {BidiPlusChannel} channel
	     * @return {SubscriptionItem[]} List of
	     * subscriptions. If the event is a whole module, it will return all the specific
	     * events. If the contextId is null, it will return all the top-level contexts which were
	     * not subscribed before the command.
	     */
	    subscribe(event, contextId, channel) {
	        // All the subscriptions are handled on the top-level contexts.
	        contextId = this.#browsingContextStorage.findTopLevelContextId(contextId);
	        // Check if subscribed event is a whole module
	        switch (event) {
	            case protocol_js_1.ChromiumBidi.BiDiModule.BrowsingContext:
	                return Object.values(protocol_js_1.ChromiumBidi.BrowsingContext.EventNames)
	                    .map((specificEvent) => this.subscribe(specificEvent, contextId, channel))
	                    .flat();
	            case protocol_js_1.ChromiumBidi.BiDiModule.Log:
	                return Object.values(protocol_js_1.ChromiumBidi.Log.EventNames)
	                    .map((specificEvent) => this.subscribe(specificEvent, contextId, channel))
	                    .flat();
	            case protocol_js_1.ChromiumBidi.BiDiModule.Network:
	                return Object.values(protocol_js_1.ChromiumBidi.Network.EventNames)
	                    .map((specificEvent) => this.subscribe(specificEvent, contextId, channel))
	                    .flat();
	            case protocol_js_1.ChromiumBidi.BiDiModule.Script:
	                return Object.values(protocol_js_1.ChromiumBidi.Script.EventNames)
	                    .map((specificEvent) => this.subscribe(specificEvent, contextId, channel))
	                    .flat();
	            case protocol_js_1.ChromiumBidi.BiDiModule.Bluetooth:
	                return Object.values(protocol_js_1.ChromiumBidi.Bluetooth.EventNames)
	                    .map((specificEvent) => this.subscribe(specificEvent, contextId, channel))
	                    .flat();
	            // Intentionally left empty.
	        }
	        if (!this.#channelToContextToEventMap.has(channel)) {
	            this.#channelToContextToEventMap.set(channel, new Map());
	        }
	        const contextToEventMap = this.#channelToContextToEventMap.get(channel);
	        if (!contextToEventMap.has(contextId)) {
	            contextToEventMap.set(contextId, new Map());
	        }
	        const eventMap = contextToEventMap.get(contextId);
	        const affectedContextIds = (contextId === null
	            ? this.#browsingContextStorage.getTopLevelContexts().map((c) => c.id)
	            : [contextId])
	            // There can be contexts that are already subscribed to the event. Do not include
	            // them to the output.
	            .filter((contextId) => !this.isSubscribedTo(event, contextId));
	        if (!eventMap.has(event)) {
	            // Add subscription only if it's not already subscribed.
	            eventMap.set(event, this.#subscriptionPriority++);
	        }
	        return affectedContextIds.map((contextId) => ({
	            event,
	            contextId,
	        }));
	    }
	    /**
	     * Unsubscribes atomically from all events in the given contexts and channel.
	     */
	    unsubscribeAll(events, contextIds, channel) {
	        // Assert all contexts are known.
	        for (const contextId of contextIds) {
	            if (contextId !== null) {
	                this.#browsingContextStorage.getContext(contextId);
	            }
	        }
	        const eventContextPairs = cartesianProduct(unrollEvents(events), contextIds);
	        // Assert all unsubscriptions are valid.
	        // If any of the unsubscriptions are invalid, do not unsubscribe from anything.
	        eventContextPairs
	            .map(([event, contextId]) => this.#checkUnsubscribe(event, contextId, channel))
	            .forEach((unsubscribe) => unsubscribe());
	    }
	    /**
	     * Unsubscribes from the event in the given context and channel.
	     * Syntactic sugar for "unsubscribeAll".
	     */
	    unsubscribe(eventName, contextId, channel) {
	        this.unsubscribeAll([eventName], [contextId], channel);
	    }
	    #checkUnsubscribe(event, contextId, channel) {
	        // All the subscriptions are handled on the top-level contexts.
	        contextId = this.#browsingContextStorage.findTopLevelContextId(contextId);
	        if (!this.#channelToContextToEventMap.has(channel)) {
	            throw new protocol_js_1.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? 'null' : contextId}. No subscription found.`);
	        }
	        const contextToEventMap = this.#channelToContextToEventMap.get(channel);
	        if (!contextToEventMap.has(contextId)) {
	            throw new protocol_js_1.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? 'null' : contextId}. No subscription found.`);
	        }
	        const eventMap = contextToEventMap.get(contextId);
	        if (!eventMap.has(event)) {
	            throw new protocol_js_1.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? 'null' : contextId}. No subscription found.`);
	        }
	        return () => {
	            eventMap.delete(event);
	            // Clean up maps if empty.
	            if (eventMap.size === 0) {
	                contextToEventMap.delete(event);
	            }
	            if (contextToEventMap.size === 0) {
	                this.#channelToContextToEventMap.delete(channel);
	            }
	        };
	    }
	};
	SubscriptionManager.SubscriptionManager = SubscriptionManager$1;
	
	return SubscriptionManager;
}

var hasRequiredEventManager;

function requireEventManager () {
	if (hasRequiredEventManager) return EventManager;
	hasRequiredEventManager = 1;
	/**
	 * Copyright 2022 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	var _a;
	Object.defineProperty(EventManager, "__esModule", { value: true });
	EventManager.EventManager = void 0;
	const protocol_js_1 = requireProtocol();
	const Buffer_js_1 = requireBuffer();
	const DefaultMap_js_1 = requireDefaultMap();
	const DistinctValues_js_1 = requireDistinctValues();
	const EventEmitter_js_1 = requireEventEmitter$1();
	const IdWrapper_js_1 = requireIdWrapper();
	const OutgoingMessage_js_1 = requireOutgoingMessage();
	const events_js_1 = requireEvents$1();
	const SubscriptionManager_js_1 = requireSubscriptionManager();
	class EventWrapper {
	    #idWrapper = new IdWrapper_js_1.IdWrapper();
	    #contextId;
	    #event;
	    constructor(event, contextId) {
	        this.#event = event;
	        this.#contextId = contextId;
	    }
	    get id() {
	        return this.#idWrapper.id;
	    }
	    get contextId() {
	        return this.#contextId;
	    }
	    get event() {
	        return this.#event;
	    }
	}
	/**
	 * Maps event name to a desired buffer length.
	 */
	const eventBufferLength = new Map([[protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded, 100]]);
	let EventManager$1 = class EventManager extends EventEmitter_js_1.EventEmitter {
	    /**
	     * Maps event name to a set of contexts where this event already happened.
	     * Needed for getting buffered events from all the contexts in case of
	     * subscripting to all contexts.
	     */
	    #eventToContextsMap = new DefaultMap_js_1.DefaultMap(() => new Set());
	    /**
	     * Maps `eventName` + `browsingContext` to buffer. Used to get buffered events
	     * during subscription. Channel-agnostic.
	     */
	    #eventBuffers = new Map();
	    /**
	     * Maps `eventName` + `browsingContext` to  Map of channel to last id
	     * Used to avoid sending duplicated events when user
	     * subscribes -> unsubscribes -> subscribes.
	     */
	    #lastMessageSent = new Map();
	    #subscriptionManager;
	    #browsingContextStorage;
	    /**
	     * Map of event name to hooks to be called when client is subscribed to the event.
	     */
	    #subscribeHooks;
	    constructor(browsingContextStorage) {
	        super();
	        this.#browsingContextStorage = browsingContextStorage;
	        this.#subscriptionManager = new SubscriptionManager_js_1.SubscriptionManager(browsingContextStorage);
	        this.#subscribeHooks = new DefaultMap_js_1.DefaultMap(() => []);
	    }
	    get subscriptionManager() {
	        return this.#subscriptionManager;
	    }
	    /**
	     * Returns consistent key to be used to access value maps.
	     */
	    static #getMapKey(eventName, browsingContext) {
	        return JSON.stringify({ eventName, browsingContext });
	    }
	    addSubscribeHook(event, hook) {
	        this.#subscribeHooks.get(event).push(hook);
	    }
	    registerEvent(event, contextId) {
	        this.registerPromiseEvent(Promise.resolve({
	            kind: 'success',
	            value: event,
	        }), contextId, event.method);
	    }
	    registerPromiseEvent(event, contextId, eventName) {
	        const eventWrapper = new EventWrapper(event, contextId);
	        const sortedChannels = this.#subscriptionManager.getChannelsSubscribedToEvent(eventName, contextId);
	        this.#bufferEvent(eventWrapper, eventName);
	        // Send events to channels in the subscription priority.
	        for (const channel of sortedChannels) {
	            this.emit("event" /* EventManagerEvents.Event */, {
	                message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(event, channel),
	                event: eventName,
	            });
	            this.#markEventSent(eventWrapper, channel, eventName);
	        }
	    }
	    async subscribe(eventNames, contextIds, channel) {
	        for (const name of eventNames) {
	            (0, events_js_1.assertSupportedEvent)(name);
	        }
	        // First check if all the contexts are known.
	        for (const contextId of contextIds) {
	            if (contextId !== null) {
	                // Assert the context is known. Throw exception otherwise.
	                this.#browsingContextStorage.getContext(contextId);
	            }
	        }
	        // List of the subscription items that were actually added. Each contains a specific
	        // event and context. No module event (like "network") or global context subscription
	        // (like null) are included.
	        const addedSubscriptionItems = [];
	        for (const eventName of eventNames) {
	            for (const contextId of contextIds) {
	                addedSubscriptionItems.push(...this.#subscriptionManager.subscribe(eventName, contextId, channel));
	                for (const eventWrapper of this.#getBufferedEvents(eventName, contextId, channel)) {
	                    // The order of the events is important.
	                    this.emit("event" /* EventManagerEvents.Event */, {
	                        message: OutgoingMessage_js_1.OutgoingMessage.createFromPromise(eventWrapper.event, channel),
	                        event: eventName,
	                    });
	                    this.#markEventSent(eventWrapper, channel, eventName);
	                }
	            }
	        }
	        // Iterate over all new subscription items and call hooks if any. There can be
	        // duplicates, e.g. when subscribing to the whole module and some specific event in
	        // the same time ("network", "network.responseCompleted"). `distinctValues` guarantees
	        // that hooks are called only once per pair event + context.
	        (0, DistinctValues_js_1.distinctValues)(addedSubscriptionItems).forEach(({ contextId, event }) => {
	            this.#subscribeHooks.get(event).forEach((hook) => hook(contextId));
	        });
	        await this.toggleModulesIfNeeded();
	    }
	    async unsubscribe(eventNames, contextIds, channel) {
	        for (const name of eventNames) {
	            (0, events_js_1.assertSupportedEvent)(name);
	        }
	        this.#subscriptionManager.unsubscribeAll(eventNames, contextIds, channel);
	        await this.toggleModulesIfNeeded();
	    }
	    async toggleModulesIfNeeded() {
	        // TODO(1): Only update changed subscribers
	        // TODO(2): Enable for Worker Targets
	        await Promise.all(this.#browsingContextStorage.getAllContexts().map(async (context) => {
	            return await context.toggleModulesIfNeeded();
	        }));
	    }
	    clearBufferedEvents(contextId) {
	        for (const eventName of eventBufferLength.keys()) {
	            const bufferMapKey = _a.#getMapKey(eventName, contextId);
	            this.#eventBuffers.delete(bufferMapKey);
	        }
	    }
	    /**
	     * If the event is buffer-able, put it in the buffer.
	     */
	    #bufferEvent(eventWrapper, eventName) {
	        if (!eventBufferLength.has(eventName)) {
	            // Do nothing if the event is no buffer-able.
	            return;
	        }
	        const bufferMapKey = _a.#getMapKey(eventName, eventWrapper.contextId);
	        if (!this.#eventBuffers.has(bufferMapKey)) {
	            this.#eventBuffers.set(bufferMapKey, new Buffer_js_1.Buffer(eventBufferLength.get(eventName)));
	        }
	        this.#eventBuffers.get(bufferMapKey).add(eventWrapper);
	        // Add the context to the list of contexts having `eventName` events.
	        this.#eventToContextsMap.get(eventName).add(eventWrapper.contextId);
	    }
	    /**
	     * If the event is buffer-able, mark it as sent to the given contextId and channel.
	     */
	    #markEventSent(eventWrapper, channel, eventName) {
	        if (!eventBufferLength.has(eventName)) {
	            // Do nothing if the event is no buffer-able.
	            return;
	        }
	        const lastSentMapKey = _a.#getMapKey(eventName, eventWrapper.contextId);
	        const lastId = Math.max(this.#lastMessageSent.get(lastSentMapKey)?.get(channel) ?? 0, eventWrapper.id);
	        const channelMap = this.#lastMessageSent.get(lastSentMapKey);
	        if (channelMap) {
	            channelMap.set(channel, lastId);
	        }
	        else {
	            this.#lastMessageSent.set(lastSentMapKey, new Map([[channel, lastId]]));
	        }
	    }
	    /**
	     * Returns events which are buffered and not yet sent to the given channel events.
	     */
	    #getBufferedEvents(eventName, contextId, channel) {
	        const bufferMapKey = _a.#getMapKey(eventName, contextId);
	        const lastSentMessageId = this.#lastMessageSent.get(bufferMapKey)?.get(channel) ?? -Infinity;
	        const result = this.#eventBuffers
	            .get(bufferMapKey)
	            ?.get()
	            .filter((wrapper) => wrapper.id > lastSentMessageId) ?? [];
	        if (contextId === null) {
	            // For global subscriptions, events buffered in each context should be sent back.
	            Array.from(this.#eventToContextsMap.get(eventName).keys())
	                .filter((_contextId) => 
	            // Events without context are already in the result.
	            _contextId !== null &&
	                // Events from deleted contexts should not be sent.
	                this.#browsingContextStorage.hasContext(_contextId))
	                .map((_contextId) => this.#getBufferedEvents(eventName, _contextId, channel))
	                .forEach((events) => result.push(...events));
	        }
	        return result.sort((e1, e2) => e1.id - e2.id);
	    }
	};
	EventManager.EventManager = EventManager$1;
	_a = EventManager$1;
	
	return EventManager;
}

var hasRequiredBidiServer;

function requireBidiServer () {
	if (hasRequiredBidiServer) return BidiServer;
	hasRequiredBidiServer = 1;
	/**
	 * Copyright 2021 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(BidiServer, "__esModule", { value: true });
	BidiServer.BidiServer = void 0;
	const EventEmitter_js_1 = requireEventEmitter$1();
	const log_js_1 = requireLog();
	const ProcessingQueue_js_1 = requireProcessingQueue();
	const CommandProcessor_js_1 = requireCommandProcessor();
	const BluetoothProcessor_js_1 = requireBluetoothProcessor();
	const CdpTargetManager_js_1 = requireCdpTargetManager();
	const BrowsingContextStorage_js_1 = requireBrowsingContextStorage();
	const NetworkStorage_js_1 = requireNetworkStorage();
	const PreloadScriptStorage_js_1 = requirePreloadScriptStorage();
	const RealmStorage_js_1 = requireRealmStorage();
	const EventManager_js_1 = requireEventManager();
	let BidiServer$1 = class BidiServer extends EventEmitter_js_1.EventEmitter {
	    #messageQueue;
	    #transport;
	    #commandProcessor;
	    #eventManager;
	    #browsingContextStorage = new BrowsingContextStorage_js_1.BrowsingContextStorage();
	    #realmStorage = new RealmStorage_js_1.RealmStorage();
	    #preloadScriptStorage = new PreloadScriptStorage_js_1.PreloadScriptStorage();
	    #bluetoothProcessor;
	    #logger;
	    #handleIncomingMessage = (message) => {
	        void this.#commandProcessor.processCommand(message).catch((error) => {
	            this.#logger?.(log_js_1.LogType.debugError, error);
	        });
	    };
	    #processOutgoingMessage = async (messageEntry) => {
	        const message = messageEntry.message;
	        if (messageEntry.channel !== null) {
	            message['channel'] = messageEntry.channel;
	        }
	        await this.#transport.sendMessage(message);
	    };
	    constructor(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, defaultUserContextId, parser, logger) {
	        super();
	        this.#logger = logger;
	        this.#messageQueue = new ProcessingQueue_js_1.ProcessingQueue(this.#processOutgoingMessage, this.#logger);
	        this.#transport = bidiTransport;
	        this.#transport.setOnMessage(this.#handleIncomingMessage);
	        this.#eventManager = new EventManager_js_1.EventManager(this.#browsingContextStorage);
	        const networkStorage = new NetworkStorage_js_1.NetworkStorage(this.#eventManager, this.#browsingContextStorage, browserCdpClient, logger);
	        this.#bluetoothProcessor = new BluetoothProcessor_js_1.BluetoothProcessor(this.#eventManager, this.#browsingContextStorage);
	        this.#commandProcessor = new CommandProcessor_js_1.CommandProcessor(cdpConnection, browserCdpClient, this.#eventManager, this.#browsingContextStorage, this.#realmStorage, this.#preloadScriptStorage, networkStorage, this.#bluetoothProcessor, parser, async (options) => {
	            // This is required to ignore certificate errors when service worker is fetched.
	            await browserCdpClient.sendCommand('Security.setIgnoreCertificateErrors', {
	                ignore: options.acceptInsecureCerts ?? false,
	            });
	            new CdpTargetManager_js_1.CdpTargetManager(cdpConnection, browserCdpClient, selfTargetId, this.#eventManager, this.#browsingContextStorage, this.#realmStorage, networkStorage, this.#bluetoothProcessor, this.#preloadScriptStorage, defaultUserContextId, options?.['goog:prerenderingDisabled'] ?? false, options?.unhandledPromptBehavior, logger);
	            // Needed to get events about new targets.
	            await browserCdpClient.sendCommand('Target.setDiscoverTargets', {
	                discover: true,
	            });
	            // Needed to automatically attach to new targets.
	            await browserCdpClient.sendCommand('Target.setAutoAttach', {
	                autoAttach: true,
	                waitForDebuggerOnStart: true,
	                flatten: true,
	                // Browser session should attach to tab instead of the page, so that
	                // prerendering is not blocked.
	                filter: [
	                    {
	                        type: 'page',
	                        exclude: true,
	                    },
	                    {},
	                ],
	            });
	            await this.#topLevelContextsLoaded();
	        }, this.#logger);
	        this.#eventManager.on("event" /* EventManagerEvents.Event */, ({ message, event }) => {
	            this.emitOutgoingMessage(message, event);
	        });
	        this.#commandProcessor.on("response" /* CommandProcessorEvents.Response */, ({ message, event }) => {
	            this.emitOutgoingMessage(message, event);
	        });
	    }
	    /**
	     * Creates and starts BiDi Mapper instance.
	     */
	    static async createAndStart(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, parser, logger) {
	        // The default context is not exposed in Target.getBrowserContexts but can
	        // be observed via Target.getTargets. To determine the default browser
	        // context, we check which one is mentioned in Target.getTargets and not in
	        // Target.getBrowserContexts.
	        const [{ browserContextIds }, { targetInfos }] = await Promise.all([
	            browserCdpClient.sendCommand('Target.getBrowserContexts'),
	            browserCdpClient.sendCommand('Target.getTargets'),
	        ]);
	        let defaultUserContextId = 'default';
	        for (const info of targetInfos) {
	            if (info.browserContextId &&
	                !browserContextIds.includes(info.browserContextId)) {
	                defaultUserContextId = info.browserContextId;
	                break;
	            }
	        }
	        const server = new BidiServer(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, defaultUserContextId, parser, logger);
	        return server;
	    }
	    /**
	     * Sends BiDi message.
	     */
	    emitOutgoingMessage(messageEntry, event) {
	        this.#messageQueue.add(messageEntry, event);
	    }
	    close() {
	        this.#transport.close();
	    }
	    async #topLevelContextsLoaded() {
	        await Promise.all(this.#browsingContextStorage
	            .getTopLevelContexts()
	            .map((c) => c.lifecycleLoaded()));
	    }
	};
	BidiServer.BidiServer = BidiServer$1;
	
	return BidiServer;
}

var hasRequiredBidiMapper;

function requireBidiMapper () {
	if (hasRequiredBidiMapper) return BidiMapper;
	hasRequiredBidiMapper = 1;
	(function (exports) {
		/**
		 * Copyright 2022 Google LLC.
		 * Copyright (c) Microsoft Corporation.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 *     http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.OutgoingMessage = exports.EventEmitter = exports.BidiServer = void 0;
		/**
		 * @fileoverview The entry point to the BiDi Mapper namespace.
		 * Other modules should only access exports defined in this file.
		 * XXX: Add ESlint rule for this (https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-restricted-paths.md)
		 */
		var BidiServer_js_1 = requireBidiServer();
		Object.defineProperty(exports, "BidiServer", { enumerable: true, get: function () { return BidiServer_js_1.BidiServer; } });
		var EventEmitter_js_1 = requireEventEmitter$1();
		Object.defineProperty(exports, "EventEmitter", { enumerable: true, get: function () { return EventEmitter_js_1.EventEmitter; } });
		var OutgoingMessage_js_1 = requireOutgoingMessage();
		Object.defineProperty(exports, "OutgoingMessage", { enumerable: true, get: function () { return OutgoingMessage_js_1.OutgoingMessage; } });
		
	} (BidiMapper));
	return BidiMapper;
}

var CdpConnection = {};

var CdpClient = {};

var hasRequiredCdpClient;

function requireCdpClient () {
	if (hasRequiredCdpClient) return CdpClient;
	hasRequiredCdpClient = 1;
	/**
	 * Copyright 2021 Google LLC.
	 * Copyright (c) Microsoft Corporation.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	Object.defineProperty(CdpClient, "__esModule", { value: true });
	CdpClient.MapperCdpClient = CdpClient.CloseError = void 0;
	const EventEmitter_js_1 = requireEventEmitter$1();
	/** An error that will be thrown if/when the connection is closed. */
	class CloseError extends Error {
	}
	CdpClient.CloseError = CloseError;
	/** Represents a high-level CDP connection to the browser. */
	class MapperCdpClient extends EventEmitter_js_1.EventEmitter {
	    #cdpConnection;
	    #sessionId;
	    constructor(cdpConnection, sessionId) {
	        super();
	        this.#cdpConnection = cdpConnection;
	        this.#sessionId = sessionId;
	    }
	    get sessionId() {
	        return this.#sessionId;
	    }
	    sendCommand(method, ...params) {
	        return this.#cdpConnection.sendCommand(method, params[0], this.#sessionId);
	    }
	    isCloseError(error) {
	        return error instanceof CloseError;
	    }
	}
	CdpClient.MapperCdpClient = MapperCdpClient;
	
	return CdpClient;
}

var hasRequiredCdpConnection;

function requireCdpConnection () {
	if (hasRequiredCdpConnection) return CdpConnection;
	hasRequiredCdpConnection = 1;
	var _a;
	Object.defineProperty(CdpConnection, "__esModule", { value: true });
	CdpConnection.MapperCdpConnection = void 0;
	const log_js_1 = requireLog();
	const CdpClient_js_1 = requireCdpClient();
	/**
	 * Represents a high-level CDP connection to the browser backend.
	 *
	 * Manages all CdpClients (each backed by a Session ID) instance for each active
	 * CDP session.
	 */
	class MapperCdpConnection {
	    static LOGGER_PREFIX_RECV = `${log_js_1.LogType.cdp}:RECV ◂`;
	    static LOGGER_PREFIX_SEND = `${log_js_1.LogType.cdp}:SEND ▸`;
	    #mainBrowserCdpClient;
	    #transport;
	    /** Map from session ID to CdpClient.
	     * `undefined` points to the main browser session. */
	    #sessionCdpClients = new Map();
	    #commandCallbacks = new Map();
	    #logger;
	    #nextId = 0;
	    constructor(transport, logger) {
	        this.#transport = transport;
	        this.#logger = logger;
	        this.#transport.setOnMessage(this.#onMessage);
	        // Create default Browser CDP Session.
	        this.#mainBrowserCdpClient = this.#createCdpClient(undefined);
	    }
	    /** Closes the connection to the browser. */
	    close() {
	        this.#transport.close();
	        for (const [, { reject, error }] of this.#commandCallbacks) {
	            reject(error);
	        }
	        this.#commandCallbacks.clear();
	        this.#sessionCdpClients.clear();
	    }
	    async createBrowserSession() {
	        const { sessionId } = await this.#mainBrowserCdpClient.sendCommand('Target.attachToBrowserTarget');
	        return this.#createCdpClient(sessionId);
	    }
	    /**
	     * Gets a CdpClient instance attached to the given session ID,
	     * or null if the session is not attached.
	     */
	    getCdpClient(sessionId) {
	        const cdpClient = this.#sessionCdpClients.get(sessionId);
	        if (!cdpClient) {
	            throw new Error(`Unknown CDP session ID: ${sessionId}`);
	        }
	        return cdpClient;
	    }
	    sendCommand(method, params, sessionId) {
	        return new Promise((resolve, reject) => {
	            const id = this.#nextId++;
	            this.#commandCallbacks.set(id, {
	                sessionId,
	                resolve,
	                reject,
	                error: new CdpClient_js_1.CloseError(`${method} ${JSON.stringify(params)} ${sessionId ?? ''} call rejected because the connection has been closed.`),
	            });
	            const cdpMessage = { id, method, params };
	            if (sessionId) {
	                cdpMessage.sessionId = sessionId;
	            }
	            void this.#transport
	                .sendMessage(JSON.stringify(cdpMessage))
	                ?.catch((error) => {
	                this.#logger?.(log_js_1.LogType.debugError, error);
	                this.#transport.close();
	            });
	            this.#logger?.(_a.LOGGER_PREFIX_SEND, cdpMessage);
	        });
	    }
	    #onMessage = (json) => {
	        const message = JSON.parse(json);
	        this.#logger?.(_a.LOGGER_PREFIX_RECV, message);
	        // Update client map if a session is attached
	        // Listen for these events on every session.
	        if (message.method === 'Target.attachedToTarget') {
	            const { sessionId } = message.params;
	            this.#createCdpClient(sessionId);
	        }
	        if (message.id !== undefined) {
	            // Handle command response.
	            const callbacks = this.#commandCallbacks.get(message.id);
	            this.#commandCallbacks.delete(message.id);
	            if (callbacks) {
	                if (message.result) {
	                    callbacks.resolve(message.result);
	                }
	                else if (message.error) {
	                    callbacks.reject(message.error);
	                }
	            }
	        }
	        else if (message.method) {
	            const client = this.#sessionCdpClients.get(message.sessionId ?? undefined);
	            client?.emit(message.method, message.params || {});
	            // Update client map if a session is detached
	            // But emit on that session
	            if (message.method === 'Target.detachedFromTarget') {
	                const { sessionId } = message.params;
	                const client = this.#sessionCdpClients.get(sessionId);
	                if (client) {
	                    this.#sessionCdpClients.delete(sessionId);
	                    client.removeAllListeners();
	                }
	                // Reject all the pending commands for the detached session.
	                for (const callback of this.#commandCallbacks.values()) {
	                    if (callback.sessionId === sessionId) {
	                        callback.reject(callback.error);
	                    }
	                }
	            }
	        }
	    };
	    /**
	     * Creates a new CdpClient instance for the given session ID.
	     * @param sessionId either a string, or undefined for the main browser session.
	     * The main browser session is used only to create new browser sessions.
	     * @private
	     */
	    #createCdpClient(sessionId) {
	        const cdpClient = new CdpClient_js_1.MapperCdpClient(this, sessionId);
	        this.#sessionCdpClients.set(sessionId, cdpClient);
	        return cdpClient;
	    }
	}
	CdpConnection.MapperCdpConnection = MapperCdpConnection;
	_a = MapperCdpConnection;
	
	return CdpConnection;
}

var bidiOverCdp;
var hasRequiredBidiOverCdp;

function requireBidiOverCdp () {
	if (hasRequiredBidiOverCdp) return bidiOverCdp;
	hasRequiredBidiOverCdp = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiOverCdp_exports = {};
	__export(bidiOverCdp_exports, {
	  connectBidiOverCdp: () => connectBidiOverCdp
	});
	bidiOverCdp = __toCommonJS(bidiOverCdp_exports);
	var bidiMapper = __toESM(requireBidiMapper());
	var bidiCdpConnection = __toESM(requireCdpConnection());
	var import_debugLogger = requireDebugLogger();
	const bidiServerLogger = (prefix, ...args) => {
	  import_debugLogger.debugLogger.log(prefix, args);
	};
	async function connectBidiOverCdp(cdp) {
	  let server = void 0;
	  const bidiTransport = new BidiTransportImpl();
	  const bidiConnection = new BidiConnection(bidiTransport, () => server?.close());
	  const cdpTransportImpl = new CdpTransportImpl(cdp);
	  const cdpConnection = new bidiCdpConnection.MapperCdpConnection(cdpTransportImpl, bidiServerLogger);
	  cdp.onclose = () => bidiConnection.onclose?.();
	  server = await bidiMapper.BidiServer.createAndStart(
	    bidiTransport,
	    cdpConnection,
	    await cdpConnection.createBrowserSession(),
	    /* selfTargetId= */
	    "",
	    void 0,
	    bidiServerLogger
	  );
	  return bidiConnection;
	}
	class BidiTransportImpl {
	  setOnMessage(handler) {
	    this._handler = handler;
	  }
	  sendMessage(message) {
	    return this._bidiConnection.onmessage?.(message);
	  }
	  close() {
	    this._bidiConnection.onclose?.();
	  }
	}
	class BidiConnection {
	  constructor(bidiTransport, closeCallback) {
	    this._bidiTransport = bidiTransport;
	    this._bidiTransport._bidiConnection = this;
	    this._closeCallback = closeCallback;
	  }
	  send(s) {
	    this._bidiTransport._handler?.(s);
	  }
	  close() {
	    this._closeCallback();
	  }
	}
	class CdpTransportImpl {
	  constructor(connection) {
	    this._connection = connection;
	    this._connection.onmessage = (message) => {
	      this._handler?.(JSON.stringify(message));
	    };
	  }
	  setOnMessage(handler) {
	    this._handler = handler;
	  }
	  sendMessage(message) {
	    return this._connection.send(JSON.parse(message));
	  }
	  close() {
	    this._connection.close();
	  }
	}
	return bidiOverCdp;
}

var bidiChromium;
var hasRequiredBidiChromium;

function requireBidiChromium () {
	if (hasRequiredBidiChromium) return bidiChromium;
	hasRequiredBidiChromium = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiChromium_exports = {};
	__export(bidiChromium_exports, {
	  BidiChromium: () => BidiChromium
	});
	bidiChromium = __toCommonJS(bidiChromium_exports);
	var import_os = __toESM(require$$0$2);
	var import_utils = requireUtils();
	var import_ascii = requireAscii();
	var import_browserType = requireBrowserType$1();
	var import_bidiBrowser = requireBidiBrowser();
	var import_bidiConnection = requireBidiConnection();
	var import_chromiumSwitches = requireChromiumSwitches();
	class BidiChromium extends import_browserType.BrowserType {
	  constructor(parent) {
	    super(parent, "bidi");
	    this._useBidi = true;
	  }
	  async connectToTransport(transport, options) {
	    const bidiTransport = await requireBidiOverCdp().connectBidiOverCdp(transport);
	    transport[kBidiOverCdpWrapper] = bidiTransport;
	    return import_bidiBrowser.BidiBrowser.connect(this.attribution.playwright, bidiTransport, options);
	  }
	  doRewriteStartupLog(error) {
	    if (!error.logs)
	      return error;
	    if (error.logs.includes("Missing X server"))
	      error.logs = "\n" + (0, import_ascii.wrapInASCIIBox)(import_browserType.kNoXServerRunningError, 1);
	    if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180"))
	      return error;
	    error.logs = [
	      `Chromium sandboxing failed!`,
	      `================================`,
	      `To avoid the sandboxing issue, do either of the following:`,
	      `  - (preferred): Configure your environment to support sandboxing`,
	      `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`,
	      `================================`,
	      ``
	    ].join("\n");
	    return error;
	  }
	  amendEnvironment(env, userDataDir, executable, browserArguments) {
	    return env;
	  }
	  attemptToGracefullyCloseBrowser(transport) {
	    const bidiTransport = transport[kBidiOverCdpWrapper];
	    if (bidiTransport)
	      transport = bidiTransport;
	    transport.send({ method: "browser.close", params: {}, id: import_bidiConnection.kBrowserCloseMessageId });
	  }
	  defaultArgs(options, isPersistent, userDataDir) {
	    const chromeArguments = this._innerDefaultArgs(options);
	    chromeArguments.push(`--user-data-dir=${userDataDir}`);
	    chromeArguments.push("--remote-debugging-port=0");
	    if (isPersistent)
	      chromeArguments.push("about:blank");
	    else
	      chromeArguments.push("--no-startup-window");
	    return chromeArguments;
	  }
	  readyState(options) {
	    (0, import_utils.assert)(options.useWebSocket);
	    return new ChromiumReadyState();
	  }
	  _innerDefaultArgs(options) {
	    const { args = [] } = options;
	    const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
	    if (userDataDirArg)
	      throw this._createUserDataDirArgMisuseError("--user-data-dir");
	    if (args.find((arg) => arg.startsWith("--remote-debugging-pipe")))
	      throw new Error("Playwright manages remote debugging connection itself.");
	    if (args.find((arg) => !arg.startsWith("-")))
	      throw new Error("Arguments can not specify page to be opened");
	    const chromeArguments = [...import_chromiumSwitches.chromiumSwitches];
	    if (import_os.default.platform() === "darwin") {
	      chromeArguments.push("--enable-use-zoom-for-dsf=false");
	      if (options.headless)
	        chromeArguments.push("--use-angle");
	    }
	    if (options.devtools)
	      chromeArguments.push("--auto-open-devtools-for-tabs");
	    if (options.headless) {
	      chromeArguments.push("--headless");
	      chromeArguments.push(
	        "--hide-scrollbars",
	        "--mute-audio",
	        "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4"
	      );
	    }
	    if (options.chromiumSandbox !== true)
	      chromeArguments.push("--no-sandbox");
	    const proxy = options.proxyOverride || options.proxy;
	    if (proxy) {
	      const proxyURL = new URL(proxy.server);
	      const isSocks = proxyURL.protocol === "socks5:";
	      if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
	        chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
	      }
	      chromeArguments.push(`--proxy-server=${proxy.server}`);
	      const proxyBypassRules = [];
	      if (this.attribution.playwright.options.socksProxyPort)
	        proxyBypassRules.push("<-loopback>");
	      if (proxy.bypass)
	        proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
	      if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
	        proxyBypassRules.push("<-loopback>");
	      if (proxyBypassRules.length > 0)
	        chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
	    }
	    chromeArguments.push(...args);
	    return chromeArguments;
	  }
	}
	class ChromiumReadyState extends import_browserType.BrowserReadyState {
	  onBrowserOutput(message) {
	    const match = message.match(/DevTools listening on (.*)/);
	    if (match)
	      this._wsEndpoint.resolve(match[1]);
	  }
	}
	const kBidiOverCdpWrapper = Symbol("kBidiConnectionWrapper");
	return bidiChromium;
}

var firefoxPrefs;
var hasRequiredFirefoxPrefs;

function requireFirefoxPrefs () {
	if (hasRequiredFirefoxPrefs) return firefoxPrefs;
	hasRequiredFirefoxPrefs = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var firefoxPrefs_exports = {};
	__export(firefoxPrefs_exports, {
	  createProfile: () => createProfile
	});
	firefoxPrefs = __toCommonJS(firefoxPrefs_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	/**
	 * @license
	 * Copyright 2023 Google Inc.
	 * SPDX-License-Identifier: Apache-2.0
	 */
	async function createProfile(options) {
	  if (!import_fs.default.existsSync(options.path)) {
	    await import_fs.default.promises.mkdir(options.path, {
	      recursive: true
	    });
	  }
	  await writePreferences({
	    preferences: {
	      ...defaultProfilePreferences(options.preferences),
	      ...options.preferences
	    },
	    path: options.path
	  });
	}
	function defaultProfilePreferences(extraPrefs) {
	  const server = "dummy.test";
	  const defaultPrefs = {
	    // Make sure Shield doesn't hit the network.
	    "app.normandy.api_url": "",
	    // Disable Firefox old build background check
	    "app.update.checkInstallTime": false,
	    // Disable automatically upgrading Firefox
	    "app.update.disabledForTesting": true,
	    // Increase the APZ content response timeout to 1 minute
	    "apz.content_response_timeout": 6e4,
	    // Prevent various error message on the console
	    // jest-puppeteer asserts that no error message is emitted by the console
	    "browser.contentblocking.features.standard": "-tp,tpPrivate,cookieBehavior0,-cm,-fp",
	    // Enable the dump function: which sends messages to the system
	    // console
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=1543115
	    "browser.dom.window.dump.enabled": true,
	    // Make sure newtab weather doesn't hit the network to retrieve weather data.
	    "browser.newtabpage.activity-stream.discoverystream.region-weather-config": "",
	    // Make sure newtab wallpapers don't hit the network to retrieve wallpaper data.
	    "browser.newtabpage.activity-stream.newtabWallpapers.enabled": false,
	    "browser.newtabpage.activity-stream.newtabWallpapers.v2.enabled": false,
	    // Make sure Topsites doesn't hit the network to retrieve sponsored tiles.
	    "browser.newtabpage.activity-stream.showSponsoredTopSites": false,
	    // Disable topstories
	    "browser.newtabpage.activity-stream.feeds.system.topstories": false,
	    // Always display a blank page
	    "browser.newtabpage.enabled": false,
	    // Background thumbnails in particular cause grief: and disabling
	    // thumbnails in general cannot hurt
	    "browser.pagethumbnails.capturing_disabled": true,
	    // Disable safebrowsing components.
	    "browser.safebrowsing.blockedURIs.enabled": false,
	    "browser.safebrowsing.downloads.enabled": false,
	    "browser.safebrowsing.malware.enabled": false,
	    "browser.safebrowsing.phishing.enabled": false,
	    // Disable updates to search engines.
	    "browser.search.update": false,
	    // Do not restore the last open set of tabs if the browser has crashed
	    "browser.sessionstore.resume_from_crash": false,
	    // Skip check for default browser on startup
	    "browser.shell.checkDefaultBrowser": false,
	    // Disable newtabpage
	    "browser.startup.homepage": "about:blank",
	    // Do not redirect user when a milstone upgrade of Firefox is detected
	    "browser.startup.homepage_override.mstone": "ignore",
	    // Start with a blank page about:blank
	    "browser.startup.page": 0,
	    // Do not allow background tabs to be zombified on Android: otherwise for
	    // tests that open additional tabs: the test harness tab itself might get
	    // unloaded
	    "browser.tabs.disableBackgroundZombification": false,
	    // Do not warn when closing all other open tabs
	    "browser.tabs.warnOnCloseOtherTabs": false,
	    // Do not warn when multiple tabs will be opened
	    "browser.tabs.warnOnOpen": false,
	    // Do not automatically offer translations, as tests do not expect this.
	    "browser.translations.automaticallyPopup": false,
	    // Disable the UI tour.
	    "browser.uitour.enabled": false,
	    // Turn off search suggestions in the location bar so as not to trigger
	    // network connections.
	    "browser.urlbar.suggest.searches": false,
	    // Disable first run splash page on Windows 10
	    "browser.usedOnWindows10.introURL": "",
	    // Do not warn on quitting Firefox
	    "browser.warnOnQuit": false,
	    // Defensively disable data reporting systems
	    "datareporting.healthreport.documentServerURI": `http://${server}/dummy/healthreport/`,
	    "datareporting.healthreport.logging.consoleEnabled": false,
	    "datareporting.healthreport.service.enabled": false,
	    "datareporting.healthreport.service.firstRun": false,
	    "datareporting.healthreport.uploadEnabled": false,
	    // Do not show datareporting policy notifications which can interfere with tests
	    "datareporting.policy.dataSubmissionEnabled": false,
	    "datareporting.policy.dataSubmissionPolicyBypassNotification": true,
	    // DevTools JSONViewer sometimes fails to load dependencies with its require.js.
	    // This doesn't affect Puppeteer but spams console (Bug 1424372)
	    "devtools.jsonview.enabled": false,
	    // Disable popup-blocker
	    "dom.disable_open_during_load": false,
	    // Enable the support for File object creation in the content process
	    // Required for |Page.setFileInputFiles| protocol method.
	    "dom.file.createInChild": true,
	    // Disable the ProcessHangMonitor
	    "dom.ipc.reportProcessHangs": false,
	    // Disable slow script dialogues
	    "dom.max_chrome_script_run_time": 0,
	    "dom.max_script_run_time": 0,
	    // Disable background timer throttling to allow tests to run in parallel
	    // without a decrease in performance.
	    "dom.min_background_timeout_value": 0,
	    "dom.min_background_timeout_value_without_budget_throttling": 0,
	    "dom.timeout.enable_budget_timer_throttling": false,
	    // Disable HTTPS-First upgrades
	    "dom.security.https_first": false,
	    // Only load extensions from the application and user profile
	    // AddonManager.SCOPE_PROFILE + AddonManager.SCOPE_APPLICATION
	    "extensions.autoDisableScopes": 0,
	    "extensions.enabledScopes": 5,
	    // Disable metadata caching for installed add-ons by default
	    "extensions.getAddons.cache.enabled": false,
	    // Disable installing any distribution extensions or add-ons.
	    "extensions.installDistroAddons": false,
	    // Disabled screenshots extension
	    "extensions.screenshots.disabled": true,
	    // Turn off extension updates so they do not bother tests
	    "extensions.update.enabled": false,
	    // Turn off extension updates so they do not bother tests
	    "extensions.update.notifyUser": false,
	    // Make sure opening about:addons will not hit the network
	    "extensions.webservice.discoverURL": `http://${server}/dummy/discoveryURL`,
	    // Allow the application to have focus even it runs in the background
	    "focusmanager.testmode": true,
	    // Disable useragent updates
	    "general.useragent.updates.enabled": false,
	    // Always use network provider for geolocation tests so we bypass the
	    // macOS dialog raised by the corelocation provider
	    "geo.provider.testing": true,
	    // Do not scan Wifi
	    "geo.wifi.scan": false,
	    // No hang monitor
	    "hangmonitor.timeout": 0,
	    // Show chrome errors and warnings in the error console
	    "javascript.options.showInConsole": true,
	    // Do not throttle rendering (requestAnimationFrame) in background tabs
	    "layout.testing.top-level-always-active": true,
	    // Disable download and usage of OpenH264: and Widevine plugins
	    "media.gmp-manager.updateEnabled": false,
	    // Disable the GFX sanity window
	    "media.sanity-test.disabled": true,
	    // Disable connectivity service pings
	    "network.connectivity-service.enabled": false,
	    // Disable experimental feature that is only available in Nightly
	    "network.cookie.sameSite.laxByDefault": false,
	    // Do not prompt for temporary redirects
	    "network.http.prompt-temp-redirect": false,
	    // Disable speculative connections so they are not reported as leaking
	    // when they are hanging around
	    "network.http.speculative-parallel-limit": 0,
	    // Do not automatically switch between offline and online
	    "network.manage-offline-status": false,
	    // Make sure SNTP requests do not hit the network
	    "network.sntp.pools": server,
	    // Disable Flash.
	    "plugin.state.flash": 0,
	    "privacy.trackingprotection.enabled": false,
	    // Can be removed once Firefox 89 is no longer supported
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=1710839
	    "remote.enabled": true,
	    // Don't do network connections for mitm priming
	    "security.certerrors.mitm.priming.enabled": false,
	    // Local documents have access to all other local documents,
	    // including directory listings
	    "security.fileuri.strict_origin_policy": false,
	    // Do not wait for the notification button security delay
	    "security.notification_enable_delay": 0,
	    // Do not automatically fill sign-in forms with known usernames and
	    // passwords
	    "signon.autofillForms": false,
	    // Disable password capture, so that tests that include forms are not
	    // influenced by the presence of the persistent doorhanger notification
	    "signon.rememberSignons": false,
	    // Disable first-run welcome page
	    "startup.homepage_welcome_url": "about:blank",
	    // Disable first-run welcome page
	    "startup.homepage_welcome_url.additional": "",
	    // Disable browser animations (tabs, fullscreen, sliding alerts)
	    "toolkit.cosmeticAnimations.enabled": false,
	    // Prevent starting into safe mode after application crashes
	    "toolkit.startup.max_resumed_crashes": -1
	  };
	  return Object.assign(defaultPrefs, extraPrefs);
	}
	async function writePreferences(options) {
	  const prefsPath = import_path.default.join(options.path, "prefs.js");
	  const lines = Object.entries(options.preferences).map(([key, value]) => {
	    return `user_pref(${JSON.stringify(key)}, ${JSON.stringify(value)});`;
	  });
	  const result = await Promise.allSettled([
	    import_fs.default.promises.writeFile(import_path.default.join(options.path, "user.js"), lines.join("\n")),
	    // Create a backup of the preferences file if it already exitsts.
	    import_fs.default.promises.access(prefsPath, import_fs.default.constants.F_OK).then(
	      async () => {
	        await import_fs.default.promises.copyFile(
	          prefsPath,
	          import_path.default.join(options.path, "prefs.js.playwright")
	        );
	      },
	      // Swallow only if file does not exist
	      () => {
	      }
	    )
	  ]);
	  for (const command of result) {
	    if (command.status === "rejected") {
	      throw command.reason;
	    }
	  }
	}
	return firefoxPrefs;
}

var bidiFirefox;
var hasRequiredBidiFirefox;

function requireBidiFirefox () {
	if (hasRequiredBidiFirefox) return bidiFirefox;
	hasRequiredBidiFirefox = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var bidiFirefox_exports = {};
	__export(bidiFirefox_exports, {
	  BidiFirefox: () => BidiFirefox
	});
	bidiFirefox = __toCommonJS(bidiFirefox_exports);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_utils = requireUtils();
	var import_ascii = requireAscii();
	var import_browserType = requireBrowserType$1();
	var import_bidiBrowser = requireBidiBrowser();
	var import_bidiConnection = requireBidiConnection();
	var import_firefoxPrefs = requireFirefoxPrefs();
	class BidiFirefox extends import_browserType.BrowserType {
	  constructor(parent) {
	    super(parent, "bidi");
	    this._useBidi = true;
	  }
	  async connectToTransport(transport, options) {
	    return import_bidiBrowser.BidiBrowser.connect(this.attribution.playwright, transport, options);
	  }
	  doRewriteStartupLog(error) {
	    if (!error.logs)
	      return error;
	    if (error.logs.includes(`as root in a regular user's session is not supported.`))
	      error.logs = "\n" + (0, import_ascii.wrapInASCIIBox)(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.
Workaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
	    if (error.logs.includes("no DISPLAY environment variable specified"))
	      error.logs = "\n" + (0, import_ascii.wrapInASCIIBox)(import_browserType.kNoXServerRunningError, 1);
	    return error;
	  }
	  amendEnvironment(env, userDataDir, executable, browserArguments) {
	    if (!import_path.default.isAbsolute(import_os.default.homedir()))
	      throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${import_os.default.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
	    env = {
	      ...env,
	      "MOZ_CRASHREPORTER": "1",
	      "MOZ_CRASHREPORTER_NO_REPORT": "1",
	      "MOZ_CRASHREPORTER_SHUTDOWN": "1"
	    };
	    if (import_os.default.platform() === "linux") {
	      return { ...env, SNAP_NAME: void 0, SNAP_INSTANCE_NAME: void 0 };
	    }
	    return env;
	  }
	  attemptToGracefullyCloseBrowser(transport) {
	    transport.send({ method: "browser.close", params: {}, id: import_bidiConnection.kBrowserCloseMessageId });
	  }
	  async prepareUserDataDir(options, userDataDir) {
	    await (0, import_firefoxPrefs.createProfile)({
	      path: userDataDir,
	      preferences: options.firefoxUserPrefs || {}
	    });
	  }
	  defaultArgs(options, isPersistent, userDataDir) {
	    const { args = [], headless } = options;
	    const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
	    if (userDataDirArg)
	      throw this._createUserDataDirArgMisuseError("--profile");
	    const firefoxArguments = ["--remote-debugging-port=0"];
	    if (headless)
	      firefoxArguments.push("--headless");
	    else
	      firefoxArguments.push("--foreground");
	    firefoxArguments.push(`--profile`, userDataDir);
	    firefoxArguments.push(...args);
	    return firefoxArguments;
	  }
	  readyState(options) {
	    (0, import_utils.assert)(options.useWebSocket);
	    return new FirefoxReadyState();
	  }
	}
	class FirefoxReadyState extends import_browserType.BrowserReadyState {
	  onBrowserOutput(message) {
	    const match = message.match(/WebDriver BiDi listening on (ws:\/\/.*)$/);
	    if (match)
	      this._wsEndpoint.resolve(match[1] + "/session");
	  }
	}
	return bidiFirefox;
}

var crDevTools;
var hasRequiredCrDevTools;

function requireCrDevTools () {
	if (hasRequiredCrDevTools) return crDevTools;
	hasRequiredCrDevTools = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var crDevTools_exports = {};
	__export(crDevTools_exports, {
	  CRDevTools: () => CRDevTools
	});
	crDevTools = __toCommonJS(crDevTools_exports);
	var import_fs = __toESM(require$$0$4);
	const kBindingName = "__pw_devtools__";
	class CRDevTools {
	  constructor(preferencesPath) {
	    this._preferencesPath = preferencesPath;
	    this._savePromise = Promise.resolve();
	  }
	  install(session) {
	    session.on("Runtime.bindingCalled", async (event) => {
	      if (event.name !== kBindingName)
	        return;
	      const parsed = JSON.parse(event.payload);
	      let result = void 0;
	      if (this.__testHookOnBinding)
	        this.__testHookOnBinding(parsed);
	      if (parsed.method === "getPreferences") {
	        if (this._prefs === void 0) {
	          try {
	            const json = await import_fs.default.promises.readFile(this._preferencesPath, "utf8");
	            this._prefs = JSON.parse(json);
	          } catch (e) {
	            this._prefs = {};
	          }
	        }
	        result = this._prefs;
	      } else if (parsed.method === "setPreference") {
	        this._prefs[parsed.params[0]] = parsed.params[1];
	        this._save();
	      } else if (parsed.method === "removePreference") {
	        delete this._prefs[parsed.params[0]];
	        this._save();
	      } else if (parsed.method === "clearPreferences") {
	        this._prefs = {};
	        this._save();
	      }
	      session.send("Runtime.evaluate", {
	        expression: `window.DevToolsAPI.embedderMessageAck(${parsed.id}, ${JSON.stringify(result)})`,
	        contextId: event.executionContextId
	      }).catch((e) => null);
	    });
	    Promise.all([
	      session.send("Runtime.enable"),
	      session.send("Runtime.addBinding", { name: kBindingName }),
	      session.send("Page.enable"),
	      session.send("Page.addScriptToEvaluateOnNewDocument", { source: `
        (() => {
          const init = () => {
            // Lazy init happens when InspectorFrontendHost is initialized.
            // At this point DevToolsHost is ready to be used.
            const host = window.DevToolsHost;
            const old = host.sendMessageToEmbedder.bind(host);
            host.sendMessageToEmbedder = message => {
              if (['getPreferences', 'setPreference', 'removePreference', 'clearPreferences'].includes(JSON.parse(message).method))
                window.${kBindingName}(message);
              else
                old(message);
            };
          };
          let value;
          Object.defineProperty(window, 'InspectorFrontendHost', {
            configurable: true,
            enumerable: true,
            get() { return value; },
            set(v) { value = v; init(); },
          });
        })()
      ` }),
	      session.send("Runtime.runIfWaitingForDebugger")
	    ]).catch((e) => null);
	  }
	  _save() {
	    this._savePromise = this._savePromise.then(async () => {
	      await import_fs.default.promises.writeFile(this._preferencesPath, JSON.stringify(this._prefs)).catch((e) => null);
	    });
	  }
	}
	return crDevTools;
}

var chromium$1;
var hasRequiredChromium;

function requireChromium () {
	if (hasRequiredChromium) return chromium$1;
	hasRequiredChromium = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var chromium_exports = {};
	__export(chromium_exports, {
	  Chromium: () => Chromium
	});
	chromium$1 = __toCommonJS(chromium_exports);
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_chromiumSwitches = requireChromiumSwitches();
	var import_crBrowser = requireCrBrowser();
	var import_crConnection = requireCrConnection();
	var import_timeoutSettings = requireTimeoutSettings$1();
	var import_utils = requireUtils();
	var import_ascii = requireAscii();
	var import_debugLogger = requireDebugLogger();
	var import_manualPromise = requireManualPromise();
	var import_network = requireNetwork$2();
	var import_userAgent = requireUserAgent();
	var import_browserContext = requireBrowserContext$1();
	var import_browserType = requireBrowserType$1();
	var import_browserType2 = requireBrowserType$1();
	var import_helper = requireHelper();
	var import_registry = requireRegistry();
	var import_transport = requireTransport();
	var import_crDevTools = requireCrDevTools();
	var import_browser = requireBrowser$1();
	var import_fileUtils = requireFileUtils$1();
	var import_processLauncher = requireProcessLauncher();
	var import_progress = requireProgress();
	const ARTIFACTS_FOLDER = import_path.default.join(import_os.default.tmpdir(), "playwright-artifacts-");
	class Chromium extends import_browserType.BrowserType {
	  constructor(parent) {
	    super(parent, "chromium");
	    if ((0, import_utils.debugMode)())
	      this._devtools = this._createDevTools();
	  }
	  async connectOverCDP(metadata, endpointURL, options) {
	    const controller = new import_progress.ProgressController(metadata, this);
	    controller.setLogName("browser");
	    return controller.run(async (progress) => {
	      return await this._connectOverCDPInternal(progress, endpointURL, options);
	    }, import_timeoutSettings.TimeoutSettings.timeout(options));
	  }
	  async _connectOverCDPInternal(progress, endpointURL, options, onClose) {
	    let headersMap;
	    if (options.headers)
	      headersMap = (0, import_utils.headersArrayToObject)(options.headers, false);
	    if (!headersMap)
	      headersMap = { "User-Agent": (0, import_userAgent.getUserAgent)() };
	    else if (headersMap && !Object.keys(headersMap).some((key) => key.toLowerCase() === "user-agent"))
	      headersMap["User-Agent"] = (0, import_userAgent.getUserAgent)();
	    const artifactsDir = await import_fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
	    const wsEndpoint = await urlToWSEndpoint(progress, endpointURL, headersMap);
	    progress.throwIfAborted();
	    const chromeTransport = await import_transport.WebSocketTransport.connect(progress, wsEndpoint, { headers: headersMap });
	    const cleanedUp = new import_manualPromise.ManualPromise();
	    const doCleanup = async () => {
	      await (0, import_fileUtils.removeFolders)([artifactsDir]);
	      await onClose?.();
	      cleanedUp.resolve();
	    };
	    const doClose = async () => {
	      await chromeTransport.closeAndWait();
	      await cleanedUp;
	    };
	    const browserProcess = { close: doClose, kill: doClose };
	    const persistent = { noDefaultViewport: true };
	    const browserOptions = {
	      slowMo: options.slowMo,
	      name: "chromium",
	      isChromium: true,
	      persistent,
	      browserProcess,
	      protocolLogger: import_helper.helper.debugProtocolLogger(),
	      browserLogsCollector: new import_debugLogger.RecentLogsCollector(),
	      artifactsDir,
	      downloadsPath: options.downloadsPath || artifactsDir,
	      tracesDir: options.tracesDir || artifactsDir,
	      originalLaunchOptions: {}
	    };
	    (0, import_browserContext.validateBrowserContextOptions)(persistent, browserOptions);
	    progress.throwIfAborted();
	    const browser = await import_crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
	    browser._isCollocatedWithServer = false;
	    browser.on(import_browser.Browser.Events.Disconnected, doCleanup);
	    return browser;
	  }
	  _createDevTools() {
	    const directory = import_registry.registry.findExecutable("chromium").directory;
	    return directory ? new import_crDevTools.CRDevTools(import_path.default.join(directory, "devtools-preferences.json")) : void 0;
	  }
	  async connectToTransport(transport, options) {
	    let devtools = this._devtools;
	    if (options.__testHookForDevTools) {
	      devtools = this._createDevTools();
	      await options.__testHookForDevTools(devtools);
	    }
	    return import_crBrowser.CRBrowser.connect(this.attribution.playwright, transport, options, devtools);
	  }
	  doRewriteStartupLog(error) {
	    if (!error.logs)
	      return error;
	    if (error.logs.includes("Missing X server"))
	      error.logs = "\n" + (0, import_ascii.wrapInASCIIBox)(import_browserType.kNoXServerRunningError, 1);
	    if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180"))
	      return error;
	    error.logs = [
	      `Chromium sandboxing failed!`,
	      `================================`,
	      `To avoid the sandboxing issue, do either of the following:`,
	      `  - (preferred): Configure your environment to support sandboxing`,
	      `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`,
	      `================================`,
	      ``
	    ].join("\n");
	    return error;
	  }
	  amendEnvironment(env, userDataDir, executable, browserArguments) {
	    return env;
	  }
	  attemptToGracefullyCloseBrowser(transport) {
	    const message = { method: "Browser.close", id: import_crConnection.kBrowserCloseMessageId, params: {} };
	    transport.send(message);
	  }
	  async _launchWithSeleniumHub(progress, hubUrl, options) {
	    await this._createArtifactDirs(options);
	    if (!hubUrl.endsWith("/"))
	      hubUrl = hubUrl + "/";
	    const args = this._innerDefaultArgs(options);
	    args.push("--remote-debugging-port=0");
	    const isEdge = options.channel && options.channel.startsWith("msedge");
	    let desiredCapabilities = {
	      "browserName": isEdge ? "MicrosoftEdge" : "chrome",
	      [isEdge ? "ms:edgeOptions" : "goog:chromeOptions"]: { args }
	    };
	    if (process.env.SELENIUM_REMOTE_CAPABILITIES) {
	      const remoteCapabilities = parseSeleniumRemoteParams({ name: "capabilities", value: process.env.SELENIUM_REMOTE_CAPABILITIES }, progress);
	      if (remoteCapabilities)
	        desiredCapabilities = { ...desiredCapabilities, ...remoteCapabilities };
	    }
	    let headers = {};
	    if (process.env.SELENIUM_REMOTE_HEADERS) {
	      const remoteHeaders = parseSeleniumRemoteParams({ name: "headers", value: process.env.SELENIUM_REMOTE_HEADERS }, progress);
	      if (remoteHeaders)
	        headers = remoteHeaders;
	    }
	    progress.log(`<selenium> connecting to ${hubUrl}`);
	    const response = await (0, import_network.fetchData)({
	      url: hubUrl + "session",
	      method: "POST",
	      headers: {
	        "Content-Type": "application/json; charset=utf-8",
	        ...headers
	      },
	      data: JSON.stringify({
	        capabilities: { alwaysMatch: desiredCapabilities }
	      }),
	      timeout: progress.timeUntilDeadline()
	    }, seleniumErrorHandler);
	    const value = JSON.parse(response).value;
	    const sessionId = value.sessionId;
	    progress.log(`<selenium> connected to sessionId=${sessionId}`);
	    const disconnectFromSelenium = async () => {
	      progress.log(`<selenium> disconnecting from sessionId=${sessionId}`);
	      await (0, import_network.fetchData)({
	        url: hubUrl + "session/" + sessionId,
	        method: "DELETE",
	        headers
	      }).catch((error) => progress.log(`<error disconnecting from selenium>: ${error}`));
	      progress.log(`<selenium> disconnected from sessionId=${sessionId}`);
	      import_processLauncher.gracefullyCloseSet.delete(disconnectFromSelenium);
	    };
	    import_processLauncher.gracefullyCloseSet.add(disconnectFromSelenium);
	    try {
	      const capabilities = value.capabilities;
	      let endpointURL;
	      if (capabilities["se:cdp"]) {
	        progress.log(`<selenium> using selenium v4`);
	        const endpointURLString = addProtocol(capabilities["se:cdp"]);
	        endpointURL = new URL(endpointURLString);
	        if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1")
	          endpointURL.hostname = new URL(hubUrl).hostname;
	        progress.log(`<selenium> retrieved endpoint ${endpointURL.toString()} for sessionId=${sessionId}`);
	      } else {
	        progress.log(`<selenium> using selenium v3`);
	        const maybeChromeOptions = capabilities["goog:chromeOptions"];
	        const chromeOptions = maybeChromeOptions && typeof maybeChromeOptions === "object" ? maybeChromeOptions : void 0;
	        const debuggerAddress = chromeOptions && typeof chromeOptions.debuggerAddress === "string" ? chromeOptions.debuggerAddress : void 0;
	        const chromeOptionsURL = typeof maybeChromeOptions === "string" ? maybeChromeOptions : void 0;
	        const endpointURLString = addProtocol(debuggerAddress || chromeOptionsURL).replace("localhost", "127.0.0.1");
	        progress.log(`<selenium> retrieved endpoint ${endpointURLString} for sessionId=${sessionId}`);
	        endpointURL = new URL(endpointURLString);
	        if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1") {
	          const sessionInfoUrl = new URL(hubUrl).origin + "/grid/api/testsession?session=" + sessionId;
	          try {
	            const sessionResponse = await (0, import_network.fetchData)({
	              url: sessionInfoUrl,
	              method: "GET",
	              timeout: progress.timeUntilDeadline(),
	              headers
	            }, seleniumErrorHandler);
	            const proxyId = JSON.parse(sessionResponse).proxyId;
	            endpointURL.hostname = new URL(proxyId).hostname;
	            progress.log(`<selenium> resolved endpoint ip ${endpointURL.toString()} for sessionId=${sessionId}`);
	          } catch (e) {
	            progress.log(`<selenium> unable to resolve endpoint ip for sessionId=${sessionId}, running in standalone?`);
	          }
	        }
	      }
	      return await this._connectOverCDPInternal(progress, endpointURL.toString(), {
	        ...options,
	        headers: (0, import_utils.headersObjectToArray)(headers)
	      }, disconnectFromSelenium);
	    } catch (e) {
	      await disconnectFromSelenium();
	      throw e;
	    }
	  }
	  defaultArgs(options, isPersistent, userDataDir) {
	    const chromeArguments = this._innerDefaultArgs(options);
	    chromeArguments.push(`--user-data-dir=${userDataDir}`);
	    if (options.useWebSocket)
	      chromeArguments.push("--remote-debugging-port=0");
	    else
	      chromeArguments.push("--remote-debugging-pipe");
	    if (isPersistent)
	      chromeArguments.push("about:blank");
	    else
	      chromeArguments.push("--no-startup-window");
	    return chromeArguments;
	  }
	  _innerDefaultArgs(options) {
	    const { args = [] } = options;
	    const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
	    if (userDataDirArg)
	      throw this._createUserDataDirArgMisuseError("--user-data-dir");
	    if (args.find((arg) => arg.startsWith("--remote-debugging-pipe")))
	      throw new Error("Playwright manages remote debugging connection itself.");
	    if (args.find((arg) => !arg.startsWith("-")))
	      throw new Error("Arguments can not specify page to be opened");
	    const chromeArguments = [...import_chromiumSwitches.chromiumSwitches];
	    if (import_os.default.platform() === "darwin") {
	      chromeArguments.push("--enable-use-zoom-for-dsf=false");
	      if (options.headless && (!options.channel || options.channel === "chromium-headless-shell"))
	        chromeArguments.push("--use-angle");
	    }
	    if (options.devtools)
	      chromeArguments.push("--auto-open-devtools-for-tabs");
	    if (options.headless) {
	      chromeArguments.push("--headless");
	      chromeArguments.push(
	        "--hide-scrollbars",
	        "--mute-audio",
	        "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4"
	      );
	    }
	    if (options.chromiumSandbox !== true)
	      chromeArguments.push("--no-sandbox");
	    const proxy = options.proxyOverride || options.proxy;
	    if (proxy) {
	      const proxyURL = new URL(proxy.server);
	      const isSocks = proxyURL.protocol === "socks5:";
	      if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
	        chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
	      }
	      chromeArguments.push(`--proxy-server=${proxy.server}`);
	      const proxyBypassRules = [];
	      if (this.attribution.playwright.options.socksProxyPort)
	        proxyBypassRules.push("<-loopback>");
	      if (proxy.bypass)
	        proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
	      if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
	        proxyBypassRules.push("<-loopback>");
	      if (proxyBypassRules.length > 0)
	        chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
	    }
	    chromeArguments.push(...args);
	    return chromeArguments;
	  }
	  readyState(options) {
	    if (options.useWebSocket || options.args?.some((a) => a.startsWith("--remote-debugging-port")))
	      return new ChromiumReadyState();
	    return void 0;
	  }
	  getExecutableName(options) {
	    if (options.channel)
	      return options.channel;
	    return options.headless ? "chromium-headless-shell" : "chromium";
	  }
	}
	class ChromiumReadyState extends import_browserType2.BrowserReadyState {
	  onBrowserOutput(message) {
	    const match = message.match(/DevTools listening on (.*)/);
	    if (match)
	      this._wsEndpoint.resolve(match[1]);
	  }
	}
	async function urlToWSEndpoint(progress, endpointURL, headers) {
	  if (endpointURL.startsWith("ws"))
	    return endpointURL;
	  progress.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
	  const httpURL = endpointURL.endsWith("/") ? `${endpointURL}json/version/` : `${endpointURL}/json/version/`;
	  const json = await (0, import_network.fetchData)(
	    {
	      url: httpURL,
	      headers
	    },
	    async (_, resp) => new Error(`Unexpected status ${resp.statusCode} when connecting to ${httpURL}.
This does not look like a DevTools server, try connecting via ws://.`)
	  );
	  return JSON.parse(json).webSocketDebuggerUrl;
	}
	async function seleniumErrorHandler(params, response) {
	  const body = await streamToString(response);
	  let message = body;
	  try {
	    const json = JSON.parse(body);
	    message = json.value.localizedMessage || json.value.message;
	  } catch (e) {
	  }
	  return new Error(`Error connecting to Selenium at ${params.url}: ${message}`);
	}
	function addProtocol(url) {
	  if (!["ws://", "wss://", "http://", "https://"].some((protocol) => url.startsWith(protocol)))
	    return "http://" + url;
	  return url;
	}
	function streamToString(stream) {
	  return new Promise((resolve, reject) => {
	    const chunks = [];
	    stream.on("data", (chunk) => chunks.push(Buffer.from(chunk)));
	    stream.on("error", reject);
	    stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf8")));
	  });
	}
	function parseSeleniumRemoteParams(env, progress) {
	  try {
	    const parsed = JSON.parse(env.value);
	    progress.log(`<selenium> using additional ${env.name} "${env.value}"`);
	    return parsed;
	  } catch (e) {
	    progress.log(`<selenium> ignoring additional ${env.name} "${env.value}": ${e}`);
	  }
	}
	return chromium$1;
}

var ariaSnapshot;
var hasRequiredAriaSnapshot;

function requireAriaSnapshot () {
	if (hasRequiredAriaSnapshot) return ariaSnapshot;
	hasRequiredAriaSnapshot = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ariaSnapshot_exports = {};
	__export(ariaSnapshot_exports, {
	  KeyParser: () => KeyParser,
	  ParserError: () => ParserError,
	  parseAriaSnapshot: () => parseAriaSnapshot,
	  parseAriaSnapshotUnsafe: () => parseAriaSnapshotUnsafe,
	  valueOrRegex: () => valueOrRegex
	});
	ariaSnapshot = __toCommonJS(ariaSnapshot_exports);
	function parseAriaSnapshotUnsafe(yaml, text) {
	  const result = parseAriaSnapshot(yaml, text);
	  if (result.errors.length)
	    throw new Error(result.errors[0].message);
	  return result.fragment;
	}
	function parseAriaSnapshot(yaml, text, options = {}) {
	  const lineCounter = new yaml.LineCounter();
	  const parseOptions = {
	    keepSourceTokens: true,
	    lineCounter,
	    ...options
	  };
	  const yamlDoc = yaml.parseDocument(text, parseOptions);
	  const errors = [];
	  const convertRange = (range) => {
	    return [lineCounter.linePos(range[0]), lineCounter.linePos(range[1])];
	  };
	  const addError = (error) => {
	    errors.push({
	      message: error.message,
	      range: [lineCounter.linePos(error.pos[0]), lineCounter.linePos(error.pos[1])]
	    });
	  };
	  const convertSeq = (container, seq) => {
	    for (const item of seq.items) {
	      const itemIsString = item instanceof yaml.Scalar && typeof item.value === "string";
	      if (itemIsString) {
	        const childNode = KeyParser.parse(item, parseOptions, errors);
	        if (childNode) {
	          container.children = container.children || [];
	          container.children.push(childNode);
	        }
	        continue;
	      }
	      const itemIsMap = item instanceof yaml.YAMLMap;
	      if (itemIsMap) {
	        convertMap(container, item);
	        continue;
	      }
	      errors.push({
	        message: "Sequence items should be strings or maps",
	        range: convertRange(item.range || seq.range)
	      });
	    }
	  };
	  const convertMap = (container, map) => {
	    for (const entry of map.items) {
	      container.children = container.children || [];
	      const keyIsString = entry.key instanceof yaml.Scalar && typeof entry.key.value === "string";
	      if (!keyIsString) {
	        errors.push({
	          message: "Only string keys are supported",
	          range: convertRange(entry.key.range || map.range)
	        });
	        continue;
	      }
	      const key = entry.key;
	      const value = entry.value;
	      if (key.value === "text") {
	        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";
	        if (!valueIsString) {
	          errors.push({
	            message: "Text value should be a string",
	            range: convertRange(entry.value.range || map.range)
	          });
	          continue;
	        }
	        container.children.push({
	          kind: "text",
	          text: valueOrRegex(value.value)
	        });
	        continue;
	      }
	      if (key.value === "/children") {
	        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";
	        if (!valueIsString || value.value !== "contain" && value.value !== "equal" && value.value !== "deep-equal") {
	          errors.push({
	            message: 'Strict value should be "contain", "equal" or "deep-equal"',
	            range: convertRange(entry.value.range || map.range)
	          });
	          continue;
	        }
	        container.containerMode = value.value;
	        continue;
	      }
	      if (key.value.startsWith("/")) {
	        const valueIsString = value instanceof yaml.Scalar && typeof value.value === "string";
	        if (!valueIsString) {
	          errors.push({
	            message: "Property value should be a string",
	            range: convertRange(entry.value.range || map.range)
	          });
	          continue;
	        }
	        container.props = container.props ?? {};
	        container.props[key.value.slice(1)] = valueOrRegex(value.value);
	        continue;
	      }
	      const childNode = KeyParser.parse(key, parseOptions, errors);
	      if (!childNode)
	        continue;
	      const valueIsScalar = value instanceof yaml.Scalar;
	      if (valueIsScalar) {
	        const type = typeof value.value;
	        if (type !== "string" && type !== "number" && type !== "boolean") {
	          errors.push({
	            message: "Node value should be a string or a sequence",
	            range: convertRange(entry.value.range || map.range)
	          });
	          continue;
	        }
	        container.children.push({
	          ...childNode,
	          children: [{
	            kind: "text",
	            text: valueOrRegex(String(value.value))
	          }]
	        });
	        continue;
	      }
	      const valueIsSequence = value instanceof yaml.YAMLSeq;
	      if (valueIsSequence) {
	        container.children.push(childNode);
	        convertSeq(childNode, value);
	        continue;
	      }
	      errors.push({
	        message: "Map values should be strings or sequences",
	        range: convertRange(entry.value.range || map.range)
	      });
	    }
	  };
	  const fragment = { kind: "role", role: "fragment" };
	  yamlDoc.errors.forEach(addError);
	  if (errors.length)
	    return { errors, fragment };
	  if (!(yamlDoc.contents instanceof yaml.YAMLSeq)) {
	    errors.push({
	      message: 'Aria snapshot must be a YAML sequence, elements starting with " -"',
	      range: yamlDoc.contents ? convertRange(yamlDoc.contents.range) : [{ line: 0, col: 0 }, { line: 0, col: 0 }]
	    });
	  }
	  if (errors.length)
	    return { errors, fragment };
	  convertSeq(fragment, yamlDoc.contents);
	  if (errors.length)
	    return { errors, fragment: emptyFragment };
	  if (fragment.children?.length === 1)
	    return { fragment: fragment.children[0], errors };
	  return { fragment, errors };
	}
	const emptyFragment = { kind: "role", role: "fragment" };
	function normalizeWhitespace(text) {
	  return text.replace(/[\u200b\u00ad]/g, "").replace(/[\r\n\s\t]+/g, " ").trim();
	}
	function valueOrRegex(value) {
	  return value.startsWith("/") && value.endsWith("/") && value.length > 1 ? { pattern: value.slice(1, -1) } : normalizeWhitespace(value);
	}
	class KeyParser {
	  static parse(text, options, errors) {
	    try {
	      return new KeyParser(text.value)._parse();
	    } catch (e) {
	      if (e instanceof ParserError) {
	        const message = options.prettyErrors === false ? e.message : e.message + ":\n\n" + text.value + "\n" + " ".repeat(e.pos) + "^\n";
	        errors.push({
	          message,
	          range: [options.lineCounter.linePos(text.range[0]), options.lineCounter.linePos(text.range[0] + e.pos)]
	        });
	        return null;
	      }
	      throw e;
	    }
	  }
	  constructor(input) {
	    this._input = input;
	    this._pos = 0;
	    this._length = input.length;
	  }
	  _peek() {
	    return this._input[this._pos] || "";
	  }
	  _next() {
	    if (this._pos < this._length)
	      return this._input[this._pos++];
	    return null;
	  }
	  _eof() {
	    return this._pos >= this._length;
	  }
	  _isWhitespace() {
	    return !this._eof() && /\s/.test(this._peek());
	  }
	  _skipWhitespace() {
	    while (this._isWhitespace())
	      this._pos++;
	  }
	  _readIdentifier(type) {
	    if (this._eof())
	      this._throwError(`Unexpected end of input when expecting ${type}`);
	    const start = this._pos;
	    while (!this._eof() && /[a-zA-Z]/.test(this._peek()))
	      this._pos++;
	    return this._input.slice(start, this._pos);
	  }
	  _readString() {
	    let result = "";
	    let escaped = false;
	    while (!this._eof()) {
	      const ch = this._next();
	      if (escaped) {
	        result += ch;
	        escaped = false;
	      } else if (ch === "\\") {
	        escaped = true;
	      } else if (ch === '"') {
	        return result;
	      } else {
	        result += ch;
	      }
	    }
	    this._throwError("Unterminated string");
	  }
	  _throwError(message, offset = 0) {
	    throw new ParserError(message, offset || this._pos);
	  }
	  _readRegex() {
	    let result = "";
	    let escaped = false;
	    let insideClass = false;
	    while (!this._eof()) {
	      const ch = this._next();
	      if (escaped) {
	        result += ch;
	        escaped = false;
	      } else if (ch === "\\") {
	        escaped = true;
	        result += ch;
	      } else if (ch === "/" && !insideClass) {
	        return { pattern: result };
	      } else if (ch === "[") {
	        insideClass = true;
	        result += ch;
	      } else if (ch === "]" && insideClass) {
	        result += ch;
	        insideClass = false;
	      } else {
	        result += ch;
	      }
	    }
	    this._throwError("Unterminated regex");
	  }
	  _readStringOrRegex() {
	    const ch = this._peek();
	    if (ch === '"') {
	      this._next();
	      return normalizeWhitespace(this._readString());
	    }
	    if (ch === "/") {
	      this._next();
	      return this._readRegex();
	    }
	    return null;
	  }
	  _readAttributes(result) {
	    let errorPos = this._pos;
	    while (true) {
	      this._skipWhitespace();
	      if (this._peek() === "[") {
	        this._next();
	        this._skipWhitespace();
	        errorPos = this._pos;
	        const flagName = this._readIdentifier("attribute");
	        this._skipWhitespace();
	        let flagValue = "";
	        if (this._peek() === "=") {
	          this._next();
	          this._skipWhitespace();
	          errorPos = this._pos;
	          while (this._peek() !== "]" && !this._isWhitespace() && !this._eof())
	            flagValue += this._next();
	        }
	        this._skipWhitespace();
	        if (this._peek() !== "]")
	          this._throwError("Expected ]");
	        this._next();
	        this._applyAttribute(result, flagName, flagValue || "true", errorPos);
	      } else {
	        break;
	      }
	    }
	  }
	  _parse() {
	    this._skipWhitespace();
	    const role = this._readIdentifier("role");
	    this._skipWhitespace();
	    const name = this._readStringOrRegex() || "";
	    const result = { kind: "role", role, name };
	    this._readAttributes(result);
	    this._skipWhitespace();
	    if (!this._eof())
	      this._throwError("Unexpected input");
	    return result;
	  }
	  _applyAttribute(node, key, value, errorPos) {
	    if (key === "checked") {
	      this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "checked" attribute must be a boolean or "mixed"', errorPos);
	      node.checked = value === "true" ? true : value === "false" ? false : "mixed";
	      return;
	    }
	    if (key === "disabled") {
	      this._assert(value === "true" || value === "false", 'Value of "disabled" attribute must be a boolean', errorPos);
	      node.disabled = value === "true";
	      return;
	    }
	    if (key === "expanded") {
	      this._assert(value === "true" || value === "false", 'Value of "expanded" attribute must be a boolean', errorPos);
	      node.expanded = value === "true";
	      return;
	    }
	    if (key === "level") {
	      this._assert(!isNaN(Number(value)), 'Value of "level" attribute must be a number', errorPos);
	      node.level = Number(value);
	      return;
	    }
	    if (key === "pressed") {
	      this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "pressed" attribute must be a boolean or "mixed"', errorPos);
	      node.pressed = value === "true" ? true : value === "false" ? false : "mixed";
	      return;
	    }
	    if (key === "selected") {
	      this._assert(value === "true" || value === "false", 'Value of "selected" attribute must be a boolean', errorPos);
	      node.selected = value === "true";
	      return;
	    }
	    this._assert(false, `Unsupported attribute [${key}]`, errorPos);
	  }
	  _assert(value, message, valuePos) {
	    if (!value)
	      this._throwError(message || "Assertion error", valuePos);
	  }
	}
	class ParserError extends Error {
	  constructor(message, pos) {
	    super(message);
	    this.pos = pos;
	  }
	}
	return ariaSnapshot;
}

var debugController;
var hasRequiredDebugController;

function requireDebugController () {
	if (hasRequiredDebugController) return debugController;
	hasRequiredDebugController = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var debugController_exports = {};
	__export(debugController_exports, {
	  DebugController: () => DebugController
	});
	debugController = __toCommonJS(debugController_exports);
	var import_instrumentation = requireInstrumentation();
	var import_processLauncher = requireProcessLauncher();
	var import_recorder = requireRecorder();
	var import_utils = requireUtils();
	var import_ariaSnapshot = requireAriaSnapshot();
	var import_utilsBundle = requireUtilsBundle();
	var import_recorderApp = requireRecorderApp();
	var import_locatorParser = requireLocatorParser();
	const internalMetadata = (0, import_instrumentation.serverSideCallMetadata)();
	class DebugController extends import_instrumentation.SdkObject {
	  constructor(playwright) {
	    super({ attribution: { isInternalPlaywright: true }, instrumentation: (0, import_instrumentation.createInstrumentation)() }, void 0, "DebugController");
	    this._sdkLanguage = "javascript";
	    this._codegenId = "playwright-test";
	    this._playwright = playwright;
	  }
	  static {
	    this.Events = {
	      StateChanged: "stateChanged",
	      InspectRequested: "inspectRequested",
	      SourceChanged: "sourceChanged",
	      Paused: "paused",
	      SetModeRequested: "setModeRequested"
	    };
	  }
	  initialize(codegenId, sdkLanguage) {
	    this._codegenId = codegenId;
	    this._sdkLanguage = sdkLanguage;
	  }
	  dispose() {
	    this.setReportStateChanged(false);
	  }
	  setReportStateChanged(enabled) {
	    if (enabled && !this._trackHierarchyListener) {
	      this._trackHierarchyListener = {
	        onPageOpen: () => this._emitSnapshot(false),
	        onPageClose: () => this._emitSnapshot(false)
	      };
	      this._playwright.instrumentation.addListener(this._trackHierarchyListener, null);
	      this._emitSnapshot(true);
	    } else if (!enabled && this._trackHierarchyListener) {
	      this._playwright.instrumentation.removeListener(this._trackHierarchyListener);
	      this._trackHierarchyListener = void 0;
	    }
	  }
	  async resetForReuse() {
	    const contexts = /* @__PURE__ */ new Set();
	    for (const page of this._playwright.allPages())
	      contexts.add(page.context());
	    for (const context of contexts)
	      await context.resetForReuse(internalMetadata, null);
	  }
	  async navigate(url) {
	    for (const p of this._playwright.allPages())
	      await p.mainFrame().goto(internalMetadata, url);
	  }
	  async setRecorderMode(params) {
	    await this._closeBrowsersWithoutPages();
	    if (params.mode === "none") {
	      for (const recorder of await this._allRecorders()) {
	        recorder.hideHighlightedSelector();
	        recorder.setMode("none");
	      }
	      return;
	    }
	    if (!this._playwright.allBrowsers().length)
	      await this._playwright.chromium.launch(internalMetadata, { headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS });
	    const pages = this._playwright.allPages();
	    if (!pages.length) {
	      const [browser] = this._playwright.allBrowsers();
	      const { context } = await browser.newContextForReuse({}, internalMetadata);
	      await context.newPage(internalMetadata);
	    }
	    if (params.testIdAttributeName) {
	      for (const page of this._playwright.allPages())
	        page.context().selectors().setTestIdAttributeName(params.testIdAttributeName);
	    }
	    for (const recorder of await this._allRecorders()) {
	      recorder.hideHighlightedSelector();
	      if (params.mode !== "inspecting")
	        recorder.setOutput(this._codegenId, params.file);
	      recorder.setMode(params.mode);
	    }
	  }
	  async highlight(params) {
	    if (params.selector)
	      (0, import_locatorParser.unsafeLocatorOrSelectorAsSelector)(this._sdkLanguage, params.selector, "data-testid");
	    const ariaTemplate = params.ariaTemplate ? (0, import_ariaSnapshot.parseAriaSnapshotUnsafe)(import_utilsBundle.yaml, params.ariaTemplate) : void 0;
	    for (const recorder of await this._allRecorders()) {
	      if (ariaTemplate)
	        recorder.setHighlightedAriaTemplate(ariaTemplate);
	      else if (params.selector)
	        recorder.setHighlightedSelector(this._sdkLanguage, params.selector);
	    }
	  }
	  async hideHighlight() {
	    for (const recorder of await this._allRecorders())
	      recorder.hideHighlightedSelector();
	    await this._playwright.hideHighlight();
	  }
	  allBrowsers() {
	    return [...this._playwright.allBrowsers()];
	  }
	  async resume() {
	    for (const recorder of await this._allRecorders())
	      recorder.resume();
	  }
	  async kill() {
	    (0, import_processLauncher.gracefullyProcessExitDoNotHang)(0);
	  }
	  async closeAllBrowsers() {
	    await Promise.all(this.allBrowsers().map((browser) => browser.close({ reason: "Close all browsers requested" })));
	  }
	  _emitSnapshot(initial) {
	    const pageCount = this._playwright.allPages().length;
	    if (initial && !pageCount)
	      return;
	    this.emit(DebugController.Events.StateChanged, { pageCount });
	  }
	  async _allRecorders() {
	    const contexts = /* @__PURE__ */ new Set();
	    for (const page of this._playwright.allPages())
	      contexts.add(page.context());
	    const result = await Promise.all([...contexts].map((c) => import_recorder.Recorder.showInspector(c, { omitCallTracking: true }, () => Promise.resolve(new InspectingRecorderApp(this)))));
	    return result.filter(Boolean);
	  }
	  async _closeBrowsersWithoutPages() {
	    for (const browser of this._playwright.allBrowsers()) {
	      for (const context of browser.contexts()) {
	        if (!context.pages().length)
	          await context.close({ reason: "Browser collected" });
	      }
	      if (!browser.contexts())
	        await browser.close({ reason: "Browser collected" });
	    }
	  }
	}
	class InspectingRecorderApp extends import_recorderApp.EmptyRecorderApp {
	  constructor(debugController) {
	    super();
	    this._debugController = debugController;
	  }
	  async elementPicked(elementInfo) {
	    const locator = (0, import_utils.asLocator)(this._debugController._sdkLanguage, elementInfo.selector);
	    this._debugController.emit(DebugController.Events.InspectRequested, { selector: elementInfo.selector, locator, ariaSnapshot: elementInfo.ariaSnapshot });
	  }
	  async setSources(sources) {
	    const source = sources.find((s) => s.id === this._debugController._codegenId);
	    const { text, header, footer, actions } = source || { text: "" };
	    this._debugController.emit(DebugController.Events.SourceChanged, { text, header, footer, actions });
	  }
	  async setPaused(paused) {
	    this._debugController.emit(DebugController.Events.Paused, { paused });
	  }
	  async setMode(mode) {
	    this._debugController.emit(DebugController.Events.SetModeRequested, { mode });
	  }
	}
	return debugController;
}

var electron$1;
var hasRequiredElectron$1;

function requireElectron$1 () {
	if (hasRequiredElectron$1) return electron$1;
	hasRequiredElectron$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var electron_exports = {};
	__export(electron_exports, {
	  Electron: () => Electron,
	  ElectronApplication: () => ElectronApplication
	});
	electron$1 = __toCommonJS(electron_exports);
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var readline = __toESM(require$$2);
	var import_timeoutSettings = requireTimeoutSettings$1();
	var import_utils = requireUtils();
	var import_ascii = requireAscii();
	var import_debugLogger = requireDebugLogger();
	var import_eventsHelper = requireEventsHelper();
	var import_browserContext = requireBrowserContext$1();
	var import_crBrowser = requireCrBrowser();
	var import_crConnection = requireCrConnection();
	var import_crExecutionContext = requireCrExecutionContext();
	var import_crProtocolHelper = requireCrProtocolHelper();
	var import_console = requireConsole();
	var import_helper = requireHelper();
	var import_instrumentation = requireInstrumentation();
	var js = __toESM(requireJavascript$1());
	var import_processLauncher = requireProcessLauncher();
	var import_progress = requireProgress();
	var import_transport = requireTransport();
	const ARTIFACTS_FOLDER = import_path.default.join(import_os.default.tmpdir(), "playwright-artifacts-");
	class ElectronApplication extends import_instrumentation.SdkObject {
	  constructor(parent, browser, nodeConnection, process2) {
	    super(parent, "electron-app");
	    this._nodeElectronHandlePromise = new import_utils.ManualPromise();
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings();
	    this._process = process2;
	    this._browserContext = browser._defaultContext;
	    this._nodeConnection = nodeConnection;
	    this._nodeSession = nodeConnection.rootSession;
	    this._nodeSession.on("Runtime.executionContextCreated", async (event) => {
	      if (!event.context.auxData || !event.context.auxData.isDefault)
	        return;
	      const crExecutionContext = new import_crExecutionContext.CRExecutionContext(this._nodeSession, event.context);
	      this._nodeExecutionContext = new js.ExecutionContext(this, crExecutionContext, "electron");
	      const { result: remoteObject } = await crExecutionContext._client.send("Runtime.evaluate", {
	        expression: `require('electron')`,
	        contextId: event.context.id,
	        // Needed after Electron 28 to get access to require: https://github.com/microsoft/playwright/issues/28048
	        includeCommandLineAPI: true
	      });
	      this._nodeElectronHandlePromise.resolve(new js.JSHandle(this._nodeExecutionContext, "object", "ElectronModule", remoteObject.objectId));
	    });
	    this._nodeSession.on("Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event));
	    const appClosePromise = new Promise((f) => this.once(ElectronApplication.Events.Close, f));
	    this._browserContext.setCustomCloseHandler(async () => {
	      await this._browserContext.stopVideoRecording();
	      const electronHandle = await this._nodeElectronHandlePromise;
	      await electronHandle.evaluate(({ app }) => app.quit()).catch(() => {
	      });
	      this._nodeConnection.close();
	      await appClosePromise;
	    });
	  }
	  static {
	    this.Events = {
	      Close: "close",
	      Console: "console"
	    };
	  }
	  async _onConsoleAPI(event) {
	    if (event.executionContextId === 0) {
	      return;
	    }
	    if (!this._nodeExecutionContext)
	      return;
	    const args = event.args.map((arg) => (0, import_crExecutionContext.createHandle)(this._nodeExecutionContext, arg));
	    const message = new import_console.ConsoleMessage(null, event.type, void 0, args, (0, import_crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
	    this.emit(ElectronApplication.Events.Console, message);
	  }
	  async initialize() {
	    await this._nodeSession.send("Runtime.enable", {});
	    await this._nodeSession.send("Runtime.evaluate", { expression: "__playwright_run()" });
	  }
	  process() {
	    return this._process;
	  }
	  context() {
	    return this._browserContext;
	  }
	  async close() {
	    await this._browserContext.close({ reason: "Application exited" });
	  }
	  async browserWindow(page) {
	    const targetId = page._delegate._targetId;
	    const electronHandle = await this._nodeElectronHandlePromise;
	    return await electronHandle.evaluateHandle(({ BrowserWindow, webContents }, targetId2) => {
	      const wc = webContents.fromDevToolsTargetId(targetId2);
	      return BrowserWindow.fromWebContents(wc);
	    }, targetId);
	  }
	}
	class Electron extends import_instrumentation.SdkObject {
	  constructor(playwright) {
	    super(playwright, "electron");
	  }
	  async launch(options) {
	    const {
	      args = []
	    } = options;
	    const controller = new import_progress.ProgressController((0, import_instrumentation.serverSideCallMetadata)(), this);
	    controller.setLogName("browser");
	    return controller.run(async (progress) => {
	      let app = void 0;
	      let electronArguments = ["--inspect=0", "--remote-debugging-port=0", ...args];
	      if (import_os.default.platform() === "linux") {
	        const runningAsRoot = process.geteuid && process.geteuid() === 0;
	        if (runningAsRoot && electronArguments.indexOf("--no-sandbox") === -1)
	          electronArguments.unshift("--no-sandbox");
	      }
	      const artifactsDir = await import_fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
	      const browserLogsCollector = new import_debugLogger.RecentLogsCollector();
	      const env = options.env ? (0, import_processLauncher.envArrayToObject)(options.env) : process.env;
	      let command;
	      if (options.executablePath) {
	        command = options.executablePath;
	      } else {
	        try {
	          command = require("electron/index.js");
	        } catch (error) {
	          if (error?.code === "MODULE_NOT_FOUND") {
	            throw new Error("\n" + (0, import_ascii.wrapInASCIIBox)([
	              "Electron executablePath not found!",
	              "Please install it using `npm install -D electron` or set the executablePath to your Electron executable."
	            ].join("\n"), 1));
	          }
	          throw error;
	        }
	        electronArguments.unshift("-r", require.resolve("./loader"));
	      }
	      let shell = false;
	      if (process.platform === "win32") {
	        shell = true;
	        command = `"${command}"`;
	        electronArguments = electronArguments.map((arg) => `"${arg}"`);
	      }
	      delete env.NODE_OPTIONS;
	      const { launchedProcess, gracefullyClose, kill } = await (0, import_processLauncher.launchProcess)({
	        command,
	        args: electronArguments,
	        env,
	        log: (message) => {
	          progress.log(message);
	          browserLogsCollector.log(message);
	        },
	        shell,
	        stdio: "pipe",
	        cwd: options.cwd,
	        tempDirectories: [artifactsDir],
	        attemptToGracefullyClose: () => app.close(),
	        handleSIGINT: true,
	        handleSIGTERM: true,
	        handleSIGHUP: true,
	        onExit: () => app?.emit(ElectronApplication.Events.Close)
	      });
	      const waitForXserverError = new Promise(async (resolve, reject) => {
	        waitForLine(progress, launchedProcess, /Unable to open X display/).then(() => reject(new Error([
	          "Unable to open X display!",
	          `================================`,
	          "Most likely this is because there is no X server available.",
	          "Use 'xvfb-run' on Linux to launch your tests with an emulated display server.",
	          "For example: 'xvfb-run npm run test:e2e'",
	          `================================`,
	          progress.metadata.log
	        ].join("\n")))).catch(() => {
	        });
	      });
	      const nodeMatchPromise = waitForLine(progress, launchedProcess, /^Debugger listening on (ws:\/\/.*)$/);
	      const chromeMatchPromise = waitForLine(progress, launchedProcess, /^DevTools listening on (ws:\/\/.*)$/);
	      const debuggerDisconnectPromise = waitForLine(progress, launchedProcess, /Waiting for the debugger to disconnect\.\.\./);
	      const nodeMatch = await nodeMatchPromise;
	      const nodeTransport = await import_transport.WebSocketTransport.connect(progress, nodeMatch[1]);
	      const nodeConnection = new import_crConnection.CRConnection(nodeTransport, import_helper.helper.debugProtocolLogger(), browserLogsCollector);
	      debuggerDisconnectPromise.then(() => {
	        nodeTransport.close();
	      }).catch(() => {
	      });
	      const chromeMatch = await Promise.race([
	        chromeMatchPromise,
	        waitForXserverError
	      ]);
	      const chromeTransport = await import_transport.WebSocketTransport.connect(progress, chromeMatch[1]);
	      const browserProcess = {
	        onclose: void 0,
	        process: launchedProcess,
	        close: gracefullyClose,
	        kill
	      };
	      const contextOptions = {
	        ...options,
	        noDefaultViewport: true
	      };
	      const browserOptions = {
	        name: "electron",
	        isChromium: true,
	        headful: true,
	        persistent: contextOptions,
	        browserProcess,
	        protocolLogger: import_helper.helper.debugProtocolLogger(),
	        browserLogsCollector,
	        artifactsDir,
	        downloadsPath: artifactsDir,
	        tracesDir: options.tracesDir || artifactsDir,
	        originalLaunchOptions: {}
	      };
	      (0, import_browserContext.validateBrowserContextOptions)(contextOptions, browserOptions);
	      const browser = await import_crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
	      app = new ElectronApplication(this, browser, nodeConnection, launchedProcess);
	      await app.initialize();
	      return app;
	    }, import_timeoutSettings.TimeoutSettings.launchTimeout(options));
	  }
	}
	function waitForLine(progress, process2, regex) {
	  return new Promise((resolve, reject) => {
	    const rl = readline.createInterface({ input: process2.stderr });
	    const failError = new Error("Process failed to launch!");
	    const listeners = [
	      import_eventsHelper.eventsHelper.addEventListener(rl, "line", onLine),
	      import_eventsHelper.eventsHelper.addEventListener(rl, "close", reject.bind(null, failError)),
	      import_eventsHelper.eventsHelper.addEventListener(process2, "exit", reject.bind(null, failError)),
	      // It is Ok to remove error handler because we did not create process and there is another listener.
	      import_eventsHelper.eventsHelper.addEventListener(process2, "error", reject.bind(null, failError))
	    ];
	    progress.cleanupWhenAborted(cleanup);
	    function onLine(line) {
	      const match = line.match(regex);
	      if (!match)
	        return;
	      cleanup();
	      resolve(match);
	    }
	    function cleanup() {
	      import_eventsHelper.eventsHelper.removeEventListeners(listeners);
	    }
	  });
	}
	return electron$1;
}

var ffConnection;
var hasRequiredFfConnection;

function requireFfConnection () {
	if (hasRequiredFfConnection) return ffConnection;
	hasRequiredFfConnection = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ffConnection_exports = {};
	__export(ffConnection_exports, {
	  ConnectionEvents: () => ConnectionEvents,
	  FFConnection: () => FFConnection,
	  FFSession: () => FFSession,
	  kBrowserCloseMessageId: () => kBrowserCloseMessageId
	});
	ffConnection = __toCommonJS(ffConnection_exports);
	var import_events = require$$0$5;
	var import_debugLogger = requireDebugLogger();
	var import_helper = requireHelper();
	var import_protocolError = requireProtocolError();
	const ConnectionEvents = {
	  Disconnected: Symbol("Disconnected")
	};
	const kBrowserCloseMessageId = -9999;
	class FFConnection extends import_events.EventEmitter {
	  constructor(transport, protocolLogger, browserLogsCollector) {
	    super();
	    this.setMaxListeners(0);
	    this._transport = transport;
	    this._protocolLogger = protocolLogger;
	    this._browserLogsCollector = browserLogsCollector;
	    this._lastId = 0;
	    this._sessions = /* @__PURE__ */ new Map();
	    this._closed = false;
	    this.rootSession = new FFSession(this, "", (message) => this._rawSend(message));
	    this._sessions.set("", this.rootSession);
	    this._transport.onmessage = this._onMessage.bind(this);
	    this._transport.onclose = this._onClose.bind(this);
	  }
	  nextMessageId() {
	    return ++this._lastId;
	  }
	  _rawSend(message) {
	    this._protocolLogger("send", message);
	    this._transport.send(message);
	  }
	  async _onMessage(message) {
	    this._protocolLogger("receive", message);
	    if (message.id === kBrowserCloseMessageId)
	      return;
	    const session = this._sessions.get(message.sessionId || "");
	    if (session)
	      session.dispatchMessage(message);
	  }
	  _onClose(reason) {
	    this._closed = true;
	    this._transport.onmessage = void 0;
	    this._transport.onclose = void 0;
	    this._browserDisconnectedLogs = import_helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
	    this.rootSession.dispose();
	    Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
	  }
	  close() {
	    if (!this._closed)
	      this._transport.close();
	  }
	  createSession(sessionId) {
	    const session = new FFSession(this, sessionId, (message) => this._rawSend({ ...message, sessionId }));
	    this._sessions.set(sessionId, session);
	    return session;
	  }
	}
	class FFSession extends import_events.EventEmitter {
	  constructor(connection, sessionId, rawSend) {
	    super();
	    this._disposed = false;
	    this._crashed = false;
	    this.setMaxListeners(0);
	    this._callbacks = /* @__PURE__ */ new Map();
	    this._connection = connection;
	    this._sessionId = sessionId;
	    this._rawSend = rawSend;
	    this.on = super.on;
	    this.addListener = super.addListener;
	    this.off = super.removeListener;
	    this.removeListener = super.removeListener;
	    this.once = super.once;
	  }
	  markAsCrashed() {
	    this._crashed = true;
	  }
	  async send(method, params) {
	    if (this._crashed || this._disposed || this._connection._closed || this._connection._browserDisconnectedLogs)
	      throw new import_protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this._connection._browserDisconnectedLogs);
	    const id = this._connection.nextMessageId();
	    this._rawSend({ method, params, id });
	    return new Promise((resolve, reject) => {
	      this._callbacks.set(id, { resolve, reject, error: new import_protocolError.ProtocolError("error", method) });
	    });
	  }
	  sendMayFail(method, params) {
	    return this.send(method, params).catch((error) => import_debugLogger.debugLogger.log("error", error));
	  }
	  dispatchMessage(object) {
	    if (object.id) {
	      const callback = this._callbacks.get(object.id);
	      if (callback) {
	        this._callbacks.delete(object.id);
	        if (object.error) {
	          callback.error.setMessage(object.error.message);
	          callback.reject(callback.error);
	        } else {
	          callback.resolve(object.result);
	        }
	      }
	    } else {
	      Promise.resolve().then(() => this.emit(object.method, object.params));
	    }
	  }
	  dispose() {
	    this._disposed = true;
	    this._connection._sessions.delete(this._sessionId);
	    for (const callback of this._callbacks.values()) {
	      callback.error.type = this._crashed ? "crashed" : "closed";
	      callback.error.logs = this._connection._browserDisconnectedLogs;
	      callback.reject(callback.error);
	    }
	    this._callbacks.clear();
	  }
	}
	return ffConnection;
}

var ffAccessibility;
var hasRequiredFfAccessibility;

function requireFfAccessibility () {
	if (hasRequiredFfAccessibility) return ffAccessibility;
	hasRequiredFfAccessibility = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ffAccessibility_exports = {};
	__export(ffAccessibility_exports, {
	  getAccessibilityTree: () => getAccessibilityTree
	});
	ffAccessibility = __toCommonJS(ffAccessibility_exports);
	async function getAccessibilityTree(session, needle) {
	  const objectId = needle ? needle._objectId : void 0;
	  const { tree } = await session.send("Accessibility.getFullAXTree", { objectId });
	  const axNode = new FFAXNode(tree);
	  return {
	    tree: axNode,
	    needle: needle ? axNode._findNeedle() : null
	  };
	}
	const FFRoleToARIARole = new Map(Object.entries({
	  "pushbutton": "button",
	  "checkbutton": "checkbox",
	  "editcombobox": "combobox",
	  "content deletion": "deletion",
	  "footnote": "doc-footnote",
	  "non-native document": "document",
	  "grouping": "group",
	  "graphic": "img",
	  "content insertion": "insertion",
	  "animation": "marquee",
	  "flat equation": "math",
	  "menupopup": "menu",
	  "check menu item": "menuitemcheckbox",
	  "radio menu item": "menuitemradio",
	  "listbox option": "option",
	  "radiobutton": "radio",
	  "statusbar": "status",
	  "pagetab": "tab",
	  "pagetablist": "tablist",
	  "propertypage": "tabpanel",
	  "entry": "textbox",
	  "outline": "tree",
	  "tree table": "treegrid",
	  "outlineitem": "treeitem"
	}));
	class FFAXNode {
	  constructor(payload) {
	    this._payload = payload;
	    this._children = (payload.children || []).map((x) => new FFAXNode(x));
	    this._editable = !!payload.editable;
	    this._richlyEditable = this._editable && (payload.tag !== "textarea" && payload.tag !== "input");
	    this._focusable = !!payload.focusable;
	    this._expanded = !!payload.expanded;
	    this._name = this._payload.name;
	    this._role = this._payload.role;
	  }
	  _isPlainTextField() {
	    if (this._richlyEditable)
	      return false;
	    if (this._editable)
	      return true;
	    return this._role === "entry";
	  }
	  _isTextOnlyObject() {
	    const role = this._role;
	    return role === "text leaf" || role === "text" || role === "statictext";
	  }
	  _hasFocusableChild() {
	    if (this._cachedHasFocusableChild === void 0) {
	      this._cachedHasFocusableChild = false;
	      for (const child of this._children) {
	        if (child._focusable || child._hasFocusableChild()) {
	          this._cachedHasFocusableChild = true;
	          break;
	        }
	      }
	    }
	    return this._cachedHasFocusableChild;
	  }
	  children() {
	    return this._children;
	  }
	  _findNeedle() {
	    if (this._payload.foundObject)
	      return this;
	    for (const child of this._children) {
	      const found = child._findNeedle();
	      if (found)
	        return found;
	    }
	    return null;
	  }
	  isLeafNode() {
	    if (!this._children.length)
	      return true;
	    if (this._isPlainTextField() || this._isTextOnlyObject())
	      return true;
	    switch (this._role) {
	      case "graphic":
	      case "scrollbar":
	      case "slider":
	      case "separator":
	      case "progressbar":
	        return true;
	    }
	    if (this._hasFocusableChild())
	      return false;
	    if (this._focusable && this._role !== "document" && this._name)
	      return true;
	    if (this._role === "heading" && this._name)
	      return true;
	    return false;
	  }
	  isControl() {
	    switch (this._role) {
	      case "checkbutton":
	      case "check menu item":
	      case "check rich option":
	      case "combobox":
	      case "combobox option":
	      case "color chooser":
	      case "listbox":
	      case "listbox option":
	      case "listbox rich option":
	      case "popup menu":
	      case "menupopup":
	      case "menuitem":
	      case "menubar":
	      case "button":
	      case "pushbutton":
	      case "radiobutton":
	      case "radio menuitem":
	      case "scrollbar":
	      case "slider":
	      case "spinbutton":
	      case "switch":
	      case "pagetab":
	      case "entry":
	      case "tree table":
	        return true;
	      default:
	        return false;
	    }
	  }
	  isInteresting(insideControl) {
	    if (this._focusable || this._richlyEditable)
	      return true;
	    if (this.isControl())
	      return true;
	    if (insideControl)
	      return false;
	    return this.isLeafNode() && !!this._name.trim();
	  }
	  serialize() {
	    const node = {
	      role: FFRoleToARIARole.get(this._role) || this._role,
	      name: this._name || ""
	    };
	    const userStringProperties = [
	      "name",
	      "description",
	      "roledescription",
	      "valuetext",
	      "keyshortcuts"
	    ];
	    for (const userStringProperty of userStringProperties) {
	      if (!(userStringProperty in this._payload))
	        continue;
	      node[userStringProperty] = this._payload[userStringProperty];
	    }
	    const booleanProperties = [
	      "disabled",
	      "expanded",
	      "focused",
	      "modal",
	      "multiline",
	      "multiselectable",
	      "readonly",
	      "required",
	      "selected"
	    ];
	    for (const booleanProperty of booleanProperties) {
	      if (this._role === "document" && booleanProperty === "focused")
	        continue;
	      const value = this._payload[booleanProperty];
	      if (!value)
	        continue;
	      node[booleanProperty] = value;
	    }
	    const numericalProperties = [
	      "level"
	    ];
	    for (const numericalProperty of numericalProperties) {
	      if (!(numericalProperty in this._payload))
	        continue;
	      node[numericalProperty] = this._payload[numericalProperty];
	    }
	    const tokenProperties = [
	      "autocomplete",
	      "haspopup",
	      "orientation"
	    ];
	    for (const tokenProperty of tokenProperties) {
	      const value = this._payload[tokenProperty];
	      if (!value || value === "false")
	        continue;
	      node[tokenProperty] = value;
	    }
	    const axNode = node;
	    axNode.valueString = this._payload.value;
	    if ("checked" in this._payload)
	      axNode.checked = this._payload.checked === true ? "checked" : this._payload.checked === "mixed" ? "mixed" : "unchecked";
	    if ("pressed" in this._payload)
	      axNode.pressed = this._payload.pressed === true ? "pressed" : "released";
	    if ("invalid" in this._payload)
	      axNode.invalid = this._payload.invalid === true ? "true" : "false";
	    return axNode;
	  }
	}
	return ffAccessibility;
}

var ffExecutionContext;
var hasRequiredFfExecutionContext;

function requireFfExecutionContext () {
	if (hasRequiredFfExecutionContext) return ffExecutionContext;
	hasRequiredFfExecutionContext = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ffExecutionContext_exports = {};
	__export(ffExecutionContext_exports, {
	  FFExecutionContext: () => FFExecutionContext,
	  createHandle: () => createHandle
	});
	ffExecutionContext = __toCommonJS(ffExecutionContext_exports);
	var import_assert = requireAssert$1();
	var import_stackTrace = requireStackTrace();
	var js = __toESM(requireJavascript$1());
	var dom = __toESM(requireDom());
	var import_protocolError = requireProtocolError();
	class FFExecutionContext {
	  constructor(session, executionContextId) {
	    this._session = session;
	    this._executionContextId = executionContextId;
	  }
	  async rawEvaluateJSON(expression) {
	    const payload = await this._session.send("Runtime.evaluate", {
	      expression,
	      returnByValue: true,
	      executionContextId: this._executionContextId
	    }).catch(rewriteError);
	    checkException(payload.exceptionDetails);
	    return payload.result.value;
	  }
	  async rawEvaluateHandle(context, expression) {
	    const payload = await this._session.send("Runtime.evaluate", {
	      expression,
	      returnByValue: false,
	      executionContextId: this._executionContextId
	    }).catch(rewriteError);
	    checkException(payload.exceptionDetails);
	    return createHandle(context, payload.result);
	  }
	  async evaluateWithArguments(expression, returnByValue, utilityScript, values, handles) {
	    const payload = await this._session.send("Runtime.callFunction", {
	      functionDeclaration: expression,
	      args: [
	        { objectId: utilityScript._objectId, value: void 0 },
	        ...values.map((value) => ({ value })),
	        ...handles.map((handle) => ({ objectId: handle._objectId, value: void 0 }))
	      ],
	      returnByValue,
	      executionContextId: this._executionContextId
	    }).catch(rewriteError);
	    checkException(payload.exceptionDetails);
	    if (returnByValue)
	      return js.parseEvaluationResultValue(payload.result.value);
	    return createHandle(utilityScript._context, payload.result);
	  }
	  async getProperties(object) {
	    const response = await this._session.send("Runtime.getObjectProperties", {
	      executionContextId: this._executionContextId,
	      objectId: object._objectId
	    });
	    const result = /* @__PURE__ */ new Map();
	    for (const property of response.properties)
	      result.set(property.name, createHandle(object._context, property.value));
	    return result;
	  }
	  async releaseHandle(handle) {
	    if (!handle._objectId)
	      return;
	    await this._session.send("Runtime.disposeObject", {
	      executionContextId: this._executionContextId,
	      objectId: handle._objectId
	    });
	  }
	}
	function checkException(exceptionDetails) {
	  if (!exceptionDetails)
	    return;
	  if (exceptionDetails.value)
	    throw new js.JavaScriptErrorInEvaluate(JSON.stringify(exceptionDetails.value));
	  else
	    throw new js.JavaScriptErrorInEvaluate(exceptionDetails.text + (exceptionDetails.stack ? "\n" + exceptionDetails.stack : ""));
	}
	function rewriteError(error) {
	  if (error.message.includes("cyclic object value") || error.message.includes("Object is not serializable"))
	    return { result: { type: "undefined", value: void 0 } };
	  if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON"))
	    (0, import_stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
	  if (!js.isJavaScriptErrorInEvaluate(error) && !(0, import_protocolError.isSessionClosedError)(error))
	    throw new Error("Execution context was destroyed, most likely because of a navigation.");
	  throw error;
	}
	function potentiallyUnserializableValue(remoteObject) {
	  const value = remoteObject.value;
	  const unserializableValue = remoteObject.unserializableValue;
	  return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
	}
	function renderPreview(object) {
	  if (object.type === "undefined")
	    return "undefined";
	  if (object.unserializableValue)
	    return String(object.unserializableValue);
	  if (object.type === "symbol")
	    return "Symbol()";
	  if (object.subtype === "regexp")
	    return "RegExp";
	  if (object.subtype === "weakmap")
	    return "WeakMap";
	  if (object.subtype === "weakset")
	    return "WeakSet";
	  if (object.subtype)
	    return object.subtype[0].toUpperCase() + object.subtype.slice(1);
	  if ("value" in object)
	    return String(object.value);
	}
	function createHandle(context, remoteObject) {
	  if (remoteObject.subtype === "node") {
	    (0, import_assert.assert)(context instanceof dom.FrameExecutionContext);
	    return new dom.ElementHandle(context, remoteObject.objectId);
	  }
	  return new js.JSHandle(context, remoteObject.subtype || remoteObject.type || "", renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
	}
	return ffExecutionContext;
}

var ffInput;
var hasRequiredFfInput;

function requireFfInput () {
	if (hasRequiredFfInput) return ffInput;
	hasRequiredFfInput = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ffInput_exports = {};
	__export(ffInput_exports, {
	  RawKeyboardImpl: () => RawKeyboardImpl,
	  RawMouseImpl: () => RawMouseImpl,
	  RawTouchscreenImpl: () => RawTouchscreenImpl
	});
	ffInput = __toCommonJS(ffInput_exports);
	function toModifiersMask(modifiers) {
	  let mask = 0;
	  if (modifiers.has("Alt"))
	    mask |= 1;
	  if (modifiers.has("Control"))
	    mask |= 2;
	  if (modifiers.has("Shift"))
	    mask |= 4;
	  if (modifiers.has("Meta"))
	    mask |= 8;
	  return mask;
	}
	function toButtonNumber(button) {
	  if (button === "left")
	    return 0;
	  if (button === "middle")
	    return 1;
	  if (button === "right")
	    return 2;
	  return 0;
	}
	function toButtonsMask(buttons) {
	  let mask = 0;
	  if (buttons.has("left"))
	    mask |= 1;
	  if (buttons.has("right"))
	    mask |= 2;
	  if (buttons.has("middle"))
	    mask |= 4;
	  return mask;
	}
	class RawKeyboardImpl {
	  constructor(client) {
	    this._client = client;
	  }
	  async keydown(modifiers, keyName, description, autoRepeat) {
	    let text = description.text;
	    if (text === "\r")
	      text = "";
	    const { code, key, location } = description;
	    await this._client.send("Page.dispatchKeyEvent", {
	      type: "keydown",
	      keyCode: description.keyCodeWithoutLocation,
	      code,
	      key,
	      repeat: autoRepeat,
	      location,
	      text
	    });
	  }
	  async keyup(modifiers, keyName, description) {
	    const { code, key, location } = description;
	    await this._client.send("Page.dispatchKeyEvent", {
	      type: "keyup",
	      key,
	      keyCode: description.keyCodeWithoutLocation,
	      code,
	      location,
	      repeat: false
	    });
	  }
	  async sendText(text) {
	    await this._client.send("Page.insertText", { text });
	  }
	}
	class RawMouseImpl {
	  constructor(client) {
	    this._client = client;
	  }
	  async move(x, y, button, buttons, modifiers, forClick) {
	    await this._client.send("Page.dispatchMouseEvent", {
	      type: "mousemove",
	      button: 0,
	      buttons: toButtonsMask(buttons),
	      x: Math.floor(x),
	      y: Math.floor(y),
	      modifiers: toModifiersMask(modifiers)
	    });
	  }
	  async down(x, y, button, buttons, modifiers, clickCount) {
	    await this._client.send("Page.dispatchMouseEvent", {
	      type: "mousedown",
	      button: toButtonNumber(button),
	      buttons: toButtonsMask(buttons),
	      x: Math.floor(x),
	      y: Math.floor(y),
	      modifiers: toModifiersMask(modifiers),
	      clickCount
	    });
	  }
	  async up(x, y, button, buttons, modifiers, clickCount) {
	    await this._client.send("Page.dispatchMouseEvent", {
	      type: "mouseup",
	      button: toButtonNumber(button),
	      buttons: toButtonsMask(buttons),
	      x: Math.floor(x),
	      y: Math.floor(y),
	      modifiers: toModifiersMask(modifiers),
	      clickCount
	    });
	  }
	  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
	    await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, { world: "utility" });
	    await this._client.send("Page.dispatchWheelEvent", {
	      deltaX,
	      deltaY,
	      x: Math.floor(x),
	      y: Math.floor(y),
	      deltaZ: 0,
	      modifiers: toModifiersMask(modifiers)
	    });
	  }
	  setPage(page) {
	    this._page = page;
	  }
	}
	class RawTouchscreenImpl {
	  constructor(client) {
	    this._client = client;
	  }
	  async tap(x, y, modifiers) {
	    await this._client.send("Page.dispatchTapEvent", {
	      x,
	      y,
	      modifiers: toModifiersMask(modifiers)
	    });
	  }
	}
	return ffInput;
}

var ffNetworkManager;
var hasRequiredFfNetworkManager;

function requireFfNetworkManager () {
	if (hasRequiredFfNetworkManager) return ffNetworkManager;
	hasRequiredFfNetworkManager = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ffNetworkManager_exports = {};
	__export(ffNetworkManager_exports, {
	  FFNetworkManager: () => FFNetworkManager
	});
	ffNetworkManager = __toCommonJS(ffNetworkManager_exports);
	var import_eventsHelper = requireEventsHelper();
	var network = __toESM(requireNetwork$1());
	class FFNetworkManager {
	  constructor(session, page) {
	    this._session = session;
	    this._requests = /* @__PURE__ */ new Map();
	    this._page = page;
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.requestFinished", this._onRequestFinished.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.requestFailed", this._onRequestFailed.bind(this))
	    ];
	  }
	  dispose() {
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	  }
	  async setRequestInterception(enabled) {
	    await Promise.all([
	      this._session.send("Network.setRequestInterception", { enabled }),
	      this._session.send("Page.setCacheDisabled", { cacheDisabled: enabled })
	    ]);
	  }
	  _onRequestWillBeSent(event) {
	    const redirectedFrom = event.redirectedFrom ? this._requests.get(event.redirectedFrom) || null : null;
	    const frame = redirectedFrom ? redirectedFrom.request.frame() : event.frameId ? this._page._frameManager.frame(event.frameId) : null;
	    if (!frame)
	      return;
	    if (redirectedFrom)
	      this._requests.delete(redirectedFrom._id);
	    const request = new InterceptableRequest(frame, redirectedFrom, event);
	    let route;
	    if (event.isIntercepted)
	      route = new FFRouteImpl(this._session, request);
	    this._requests.set(request._id, request);
	    this._page._frameManager.requestStarted(request.request, route);
	  }
	  _onResponseReceived(event) {
	    const request = this._requests.get(event.requestId);
	    if (!request)
	      return;
	    const getResponseBody = async () => {
	      const response2 = await this._session.send("Network.getResponseBody", {
	        requestId: request._id
	      });
	      if (response2.evicted)
	        throw new Error(`Response body for ${request.request.method()} ${request.request.url()} was evicted!`);
	      return Buffer.from(response2.base64body, "base64");
	    };
	    const startTime = event.timing.startTime;
	    function relativeToStart(time) {
	      if (!time)
	        return -1;
	      return (time - startTime) / 1e3;
	    }
	    const timing = {
	      startTime: startTime / 1e3,
	      domainLookupStart: relativeToStart(event.timing.domainLookupStart),
	      domainLookupEnd: relativeToStart(event.timing.domainLookupEnd),
	      connectStart: relativeToStart(event.timing.connectStart),
	      secureConnectionStart: relativeToStart(event.timing.secureConnectionStart),
	      connectEnd: relativeToStart(event.timing.connectEnd),
	      requestStart: relativeToStart(event.timing.requestStart),
	      responseStart: relativeToStart(event.timing.responseStart)
	    };
	    const response = new network.Response(request.request, event.status, event.statusText, parseMultivalueHeaders(event.headers), timing, getResponseBody, event.fromServiceWorker);
	    if (event?.remoteIPAddress && typeof event?.remotePort === "number") {
	      response._serverAddrFinished({
	        ipAddress: event.remoteIPAddress,
	        port: event.remotePort
	      });
	    } else {
	      response._serverAddrFinished();
	    }
	    response._securityDetailsFinished({
	      protocol: event?.securityDetails?.protocol,
	      subjectName: event?.securityDetails?.subjectName,
	      issuer: event?.securityDetails?.issuer,
	      validFrom: event?.securityDetails?.validFrom,
	      validTo: event?.securityDetails?.validTo
	    });
	    response.setRawResponseHeaders(null);
	    response.setResponseHeadersSize(null);
	    this._page._frameManager.requestReceivedResponse(response);
	  }
	  _onRequestFinished(event) {
	    const request = this._requests.get(event.requestId);
	    if (!request)
	      return;
	    const response = request.request._existingResponse();
	    response.setTransferSize(event.transferSize);
	    response.setEncodedBodySize(event.encodedBodySize);
	    const isRedirected = response.status() >= 300 && response.status() <= 399;
	    const responseEndTime = event.responseEndTime ? event.responseEndTime / 1e3 - response.timing().startTime : -1;
	    if (isRedirected) {
	      response._requestFinished(responseEndTime);
	    } else {
	      this._requests.delete(request._id);
	      response._requestFinished(responseEndTime);
	    }
	    if (event.protocolVersion)
	      response._setHttpVersion(event.protocolVersion);
	    this._page._frameManager.reportRequestFinished(request.request, response);
	  }
	  _onRequestFailed(event) {
	    const request = this._requests.get(event.requestId);
	    if (!request)
	      return;
	    this._requests.delete(request._id);
	    const response = request.request._existingResponse();
	    if (response) {
	      response.setTransferSize(null);
	      response.setEncodedBodySize(null);
	      response._requestFinished(-1);
	    }
	    request.request._setFailureText(event.errorCode);
	    this._page._frameManager.requestFailed(request.request, event.errorCode === "NS_BINDING_ABORTED");
	  }
	}
	const causeToResourceType = {
	  TYPE_INVALID: "other",
	  TYPE_OTHER: "other",
	  TYPE_SCRIPT: "script",
	  TYPE_IMAGE: "image",
	  TYPE_STYLESHEET: "stylesheet",
	  TYPE_OBJECT: "other",
	  TYPE_DOCUMENT: "document",
	  TYPE_SUBDOCUMENT: "document",
	  TYPE_REFRESH: "document",
	  TYPE_XBL: "other",
	  TYPE_PING: "other",
	  TYPE_XMLHTTPREQUEST: "xhr",
	  TYPE_OBJECT_SUBREQUEST: "other",
	  TYPE_DTD: "other",
	  TYPE_FONT: "font",
	  TYPE_MEDIA: "media",
	  TYPE_WEBSOCKET: "websocket",
	  TYPE_CSP_REPORT: "other",
	  TYPE_XSLT: "other",
	  TYPE_BEACON: "other",
	  TYPE_FETCH: "fetch",
	  TYPE_IMAGESET: "image",
	  TYPE_WEB_MANIFEST: "manifest"
	};
	const internalCauseToResourceType = {
	  TYPE_INTERNAL_EVENTSOURCE: "eventsource"
	};
	class InterceptableRequest {
	  constructor(frame, redirectedFrom, payload) {
	    this._id = payload.requestId;
	    if (redirectedFrom)
	      redirectedFrom._redirectedTo = this;
	    let postDataBuffer = null;
	    if (payload.postData)
	      postDataBuffer = Buffer.from(payload.postData, "base64");
	    this.request = new network.Request(
	      frame._page._browserContext,
	      frame,
	      null,
	      redirectedFrom ? redirectedFrom.request : null,
	      payload.navigationId,
	      payload.url,
	      internalCauseToResourceType[payload.internalCause] || causeToResourceType[payload.cause] || "other",
	      payload.method,
	      postDataBuffer,
	      payload.headers
	    );
	    this.request.setRawRequestHeaders(null);
	  }
	  _finalRequest() {
	    let request = this;
	    while (request._redirectedTo)
	      request = request._redirectedTo;
	    return request;
	  }
	}
	class FFRouteImpl {
	  constructor(session, request) {
	    this._session = session;
	    this._request = request;
	  }
	  async continue(overrides) {
	    await this._session.sendMayFail("Network.resumeInterceptedRequest", {
	      requestId: this._request._id,
	      url: overrides.url,
	      method: overrides.method,
	      headers: overrides.headers,
	      postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : void 0
	    });
	  }
	  async fulfill(response) {
	    const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
	    await this._session.sendMayFail("Network.fulfillInterceptedRequest", {
	      requestId: this._request._id,
	      status: response.status,
	      statusText: network.statusText(response.status),
	      headers: response.headers,
	      base64body
	    });
	  }
	  async abort(errorCode) {
	    await this._session.sendMayFail("Network.abortInterceptedRequest", {
	      requestId: this._request._id,
	      errorCode
	    });
	  }
	}
	function parseMultivalueHeaders(headers) {
	  const result = [];
	  for (const header of headers) {
	    const separator = header.name.toLowerCase() === "set-cookie" ? "\n" : ",";
	    const tokens = header.value.split(separator).map((s) => s.trim());
	    for (const token of tokens)
	      result.push({ name: header.name, value: token });
	  }
	  return result;
	}
	return ffNetworkManager;
}

var ffPage;
var hasRequiredFfPage;

function requireFfPage () {
	if (hasRequiredFfPage) return ffPage;
	hasRequiredFfPage = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ffPage_exports = {};
	__export(ffPage_exports, {
	  FFPage: () => FFPage,
	  UTILITY_WORLD_NAME: () => UTILITY_WORLD_NAME
	});
	ffPage = __toCommonJS(ffPage_exports);
	var import_eventsHelper = requireEventsHelper();
	var dialog = __toESM(requireDialog$1());
	var dom = __toESM(requireDom());
	var import_page = requirePage$1();
	var import_page2 = requirePage$1();
	var import_ffAccessibility = requireFfAccessibility();
	var import_ffConnection = requireFfConnection();
	var import_ffExecutionContext = requireFfExecutionContext();
	var import_ffInput = requireFfInput();
	var import_ffNetworkManager = requireFfNetworkManager();
	var import_debugLogger = requireDebugLogger();
	var import_stackTrace = requireStackTrace();
	var import_browserContext = requireBrowserContext$1();
	var import_errors = requireErrors$1();
	const UTILITY_WORLD_NAME = "__playwright_utility_world__";
	class FFPage {
	  constructor(session, browserContext, opener) {
	    this.cspErrorsAsynchronousForInlineScripts = true;
	    this._reportedAsNew = false;
	    this._workers = /* @__PURE__ */ new Map();
	    this._initScripts = [];
	    this._session = session;
	    this._opener = opener;
	    this.rawKeyboard = new import_ffInput.RawKeyboardImpl(session);
	    this.rawMouse = new import_ffInput.RawMouseImpl(session);
	    this.rawTouchscreen = new import_ffInput.RawTouchscreenImpl(session);
	    this._contextIdToContext = /* @__PURE__ */ new Map();
	    this._browserContext = browserContext;
	    this._page = new import_page2.Page(this, browserContext);
	    this.rawMouse.setPage(this._page);
	    this._networkManager = new import_ffNetworkManager.FFNetworkManager(session, this._page);
	    this._page.on(import_page2.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame));
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.eventFired", this._onEventFired.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", this._onFrameAttached.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", this._onFrameDetached.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationAborted", this._onNavigationAborted.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationCommitted", this._onNavigationCommitted.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationStarted", this._onNavigationStarted.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.sameDocumentNavigation", this._onSameDocumentNavigation.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", this._onExecutionContextCreated.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextDestroyed", this._onExecutionContextDestroyed.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.linkClicked", (event) => this._onLinkClicked(event.phase)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.uncaughtError", this._onUncaughtError.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.console", this._onConsole.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.dialogOpened", this._onDialogOpened.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.bindingCalled", this._onBindingCalled.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", this._onFileChooserOpened.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerCreated", this._onWorkerCreated.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerDestroyed", this._onWorkerDestroyed.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.dispatchMessageFromWorker", this._onDispatchMessageFromWorker.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.crashed", this._onCrashed.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.videoRecordingStarted", this._onVideoRecordingStarted.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketCreated", this._onWebSocketCreated.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketClosed", this._onWebSocketClosed.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameReceived", this._onWebSocketFrameReceived.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameSent", this._onWebSocketFrameSent.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.screencastFrame", this._onScreencastFrame.bind(this))
	    ];
	    this._session.once("Page.ready", () => {
	      if (this._reportedAsNew)
	        return;
	      this._reportedAsNew = true;
	      this._page.reportAsNew(this._opener?._page);
	    });
	    this.addInitScript(new import_page.InitScript("", true), UTILITY_WORLD_NAME).catch((e) => this._markAsError(e));
	  }
	  async _markAsError(error) {
	    if (this._reportedAsNew)
	      return;
	    this._reportedAsNew = true;
	    this._page.reportAsNew(this._opener?._page, error);
	  }
	  _onWebSocketCreated(event) {
	    this._page._frameManager.onWebSocketCreated(webSocketId(event.frameId, event.wsid), event.requestURL);
	    this._page._frameManager.onWebSocketRequest(webSocketId(event.frameId, event.wsid));
	  }
	  _onWebSocketClosed(event) {
	    if (event.error)
	      this._page._frameManager.webSocketError(webSocketId(event.frameId, event.wsid), event.error);
	    this._page._frameManager.webSocketClosed(webSocketId(event.frameId, event.wsid));
	  }
	  _onWebSocketFrameReceived(event) {
	    this._page._frameManager.webSocketFrameReceived(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
	  }
	  _onWebSocketFrameSent(event) {
	    this._page._frameManager.onWebSocketFrameSent(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
	  }
	  _onExecutionContextCreated(payload) {
	    const { executionContextId, auxData } = payload;
	    const frame = this._page._frameManager.frame(auxData.frameId);
	    if (!frame)
	      return;
	    const delegate = new import_ffExecutionContext.FFExecutionContext(this._session, executionContextId);
	    let worldName = null;
	    if (auxData.name === UTILITY_WORLD_NAME)
	      worldName = "utility";
	    else if (!auxData.name)
	      worldName = "main";
	    const context = new dom.FrameExecutionContext(delegate, frame, worldName);
	    if (worldName)
	      frame._contextCreated(worldName, context);
	    this._contextIdToContext.set(executionContextId, context);
	  }
	  _onExecutionContextDestroyed(payload) {
	    const { executionContextId } = payload;
	    const context = this._contextIdToContext.get(executionContextId);
	    if (!context)
	      return;
	    this._contextIdToContext.delete(executionContextId);
	    context.frame._contextDestroyed(context);
	  }
	  _onExecutionContextsCleared() {
	    for (const executionContextId of Array.from(this._contextIdToContext.keys()))
	      this._onExecutionContextDestroyed({ executionContextId });
	  }
	  _removeContextsForFrame(frame) {
	    for (const [contextId, context] of this._contextIdToContext) {
	      if (context.frame === frame)
	        this._contextIdToContext.delete(contextId);
	    }
	  }
	  _onLinkClicked(phase) {
	    if (phase === "before")
	      this._page._frameManager.frameWillPotentiallyRequestNavigation();
	    else
	      this._page._frameManager.frameDidPotentiallyRequestNavigation();
	  }
	  _onNavigationStarted(params) {
	    this._page._frameManager.frameRequestedNavigation(params.frameId, params.navigationId);
	  }
	  _onNavigationAborted(params) {
	    this._page._frameManager.frameAbortedNavigation(params.frameId, params.errorText, params.navigationId);
	  }
	  _onNavigationCommitted(params) {
	    for (const [workerId, worker] of this._workers) {
	      if (worker.frameId === params.frameId)
	        this._onWorkerDestroyed({ workerId });
	    }
	    this._page._frameManager.frameCommittedNewDocumentNavigation(params.frameId, params.url, params.name || "", params.navigationId || "", false);
	  }
	  _onSameDocumentNavigation(params) {
	    this._page._frameManager.frameCommittedSameDocumentNavigation(params.frameId, params.url);
	  }
	  _onFrameAttached(params) {
	    this._page._frameManager.frameAttached(params.frameId, params.parentFrameId);
	  }
	  _onFrameDetached(params) {
	    this._page._frameManager.frameDetached(params.frameId);
	  }
	  _onEventFired(payload) {
	    const { frameId, name } = payload;
	    if (name === "load")
	      this._page._frameManager.frameLifecycleEvent(frameId, "load");
	    if (name === "DOMContentLoaded")
	      this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
	  }
	  _onUncaughtError(params) {
	    const { name, message } = (0, import_stackTrace.splitErrorMessage)(params.message);
	    const error = new Error(message);
	    error.stack = params.message + "\n" + params.stack.split("\n").filter(Boolean).map((a) => a.replace(/([^@]*)@(.*)/, "    at $1 ($2)")).join("\n");
	    error.name = name;
	    this._page.emitOnContextOnceInitialized(import_browserContext.BrowserContext.Events.PageError, error, this._page);
	  }
	  _onConsole(payload) {
	    const { type, args, executionContextId, location } = payload;
	    const context = this._contextIdToContext.get(executionContextId);
	    if (!context)
	      return;
	    this._page._addConsoleMessage(type === "warn" ? "warning" : type, args.map((arg) => (0, import_ffExecutionContext.createHandle)(context, arg)), location);
	  }
	  _onDialogOpened(params) {
	    this._page.emitOnContext(import_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(
	      this._page,
	      params.type,
	      params.message,
	      async (accept, promptText) => {
	        await this._session.sendMayFail("Page.handleDialog", { dialogId: params.dialogId, accept, promptText });
	      },
	      params.defaultValue
	    ));
	  }
	  async _onBindingCalled(event) {
	    const pageOrError = await this._page.waitForInitializedOrError();
	    if (!(pageOrError instanceof Error)) {
	      const context = this._contextIdToContext.get(event.executionContextId);
	      if (context)
	        await this._page._onBindingCalled(event.payload, context);
	    }
	  }
	  async _onFileChooserOpened(payload) {
	    const { executionContextId, element } = payload;
	    const context = this._contextIdToContext.get(executionContextId);
	    if (!context)
	      return;
	    const handle = (0, import_ffExecutionContext.createHandle)(context, element).asElement();
	    await this._page._onFileChooserOpened(handle);
	  }
	  async _onWorkerCreated(event) {
	    const workerId = event.workerId;
	    const worker = new import_page2.Worker(this._page, event.url);
	    const workerSession = new import_ffConnection.FFSession(this._session._connection, workerId, (message) => {
	      this._session.send("Page.sendMessageToWorker", {
	        frameId: event.frameId,
	        workerId,
	        message: JSON.stringify(message)
	      }).catch((e) => {
	        workerSession.dispatchMessage({ id: message.id, method: "", params: {}, error: { message: e.message, data: void 0 } });
	      });
	    });
	    this._workers.set(workerId, { session: workerSession, frameId: event.frameId });
	    this._page._addWorker(workerId, worker);
	    workerSession.once("Runtime.executionContextCreated", (event2) => {
	      worker._createExecutionContext(new import_ffExecutionContext.FFExecutionContext(workerSession, event2.executionContextId));
	    });
	    workerSession.on("Runtime.console", (event2) => {
	      const { type, args, location } = event2;
	      const context = worker._existingExecutionContext;
	      this._page._addConsoleMessage(type, args.map((arg) => (0, import_ffExecutionContext.createHandle)(context, arg)), location);
	    });
	  }
	  _onWorkerDestroyed(event) {
	    const workerId = event.workerId;
	    const worker = this._workers.get(workerId);
	    if (!worker)
	      return;
	    worker.session.dispose();
	    this._workers.delete(workerId);
	    this._page._removeWorker(workerId);
	  }
	  async _onDispatchMessageFromWorker(event) {
	    const worker = this._workers.get(event.workerId);
	    if (!worker)
	      return;
	    worker.session.dispatchMessage(JSON.parse(event.message));
	  }
	  async _onCrashed(event) {
	    this._session.markAsCrashed();
	    this._page._didCrash();
	  }
	  _onVideoRecordingStarted(event) {
	    this._browserContext._browser._videoStarted(this._browserContext, event.screencastId, event.file, this._page.waitForInitializedOrError());
	  }
	  didClose() {
	    this._markAsError(new import_errors.TargetClosedError());
	    this._session.dispose();
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	    this._networkManager.dispose();
	    this._page._didClose();
	  }
	  async navigateFrame(frame, url, referer) {
	    const response = await this._session.send("Page.navigate", { url, referer, frameId: frame._id });
	    return { newDocumentId: response.navigationId || void 0 };
	  }
	  async updateExtraHTTPHeaders() {
	    await this._session.send("Network.setExtraHTTPHeaders", { headers: this._page.extraHTTPHeaders() || [] });
	  }
	  async updateEmulatedViewportSize() {
	    const viewportSize = this._page.viewportSize();
	    await this._session.send("Page.setViewportSize", { viewportSize });
	  }
	  async bringToFront() {
	    await this._session.send("Page.bringToFront", {});
	  }
	  async updateEmulateMedia() {
	    const emulatedMedia = this._page.emulatedMedia();
	    const colorScheme = emulatedMedia.colorScheme === "no-override" ? void 0 : emulatedMedia.colorScheme;
	    const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? void 0 : emulatedMedia.reducedMotion;
	    const forcedColors = emulatedMedia.forcedColors === "no-override" ? void 0 : emulatedMedia.forcedColors;
	    const contrast = emulatedMedia.contrast === "no-override" ? void 0 : emulatedMedia.contrast;
	    await this._session.send("Page.setEmulatedMedia", {
	      // Empty string means reset.
	      type: emulatedMedia.media === "no-override" ? "" : emulatedMedia.media,
	      colorScheme,
	      reducedMotion,
	      forcedColors,
	      contrast
	    });
	  }
	  async updateRequestInterception() {
	    await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
	  }
	  async updateFileChooserInterception() {
	    const enabled = this._page.fileChooserIntercepted();
	    await this._session.send("Page.setInterceptFileChooserDialog", { enabled }).catch(() => {
	    });
	  }
	  async reload() {
	    await this._session.send("Page.reload");
	  }
	  async goBack() {
	    const { success } = await this._session.send("Page.goBack", { frameId: this._page.mainFrame()._id });
	    return success;
	  }
	  async goForward() {
	    const { success } = await this._session.send("Page.goForward", { frameId: this._page.mainFrame()._id });
	    return success;
	  }
	  async requestGC() {
	    await this._session.send("Heap.collectGarbage");
	  }
	  async addInitScript(initScript, worldName) {
	    this._initScripts.push({ initScript, worldName });
	    await this._session.send("Page.setInitScripts", { scripts: this._initScripts.map((s) => ({ script: s.initScript.source, worldName: s.worldName })) });
	  }
	  async removeNonInternalInitScripts() {
	    this._initScripts = this._initScripts.filter((s) => s.initScript.internal);
	    await this._session.send("Page.setInitScripts", { scripts: this._initScripts.map((s) => ({ script: s.initScript.source, worldName: s.worldName })) });
	  }
	  async closePage(runBeforeUnload) {
	    await this._session.send("Page.close", { runBeforeUnload });
	  }
	  async setBackgroundColor(color) {
	    if (color)
	      throw new Error("Not implemented");
	  }
	  async takeScreenshot(progress, format, documentRect, viewportRect, quality, fitsViewport, scale) {
	    if (!documentRect) {
	      const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress, () => ({ x: window.scrollX, y: window.scrollY }));
	      documentRect = {
	        x: viewportRect.x + scrollOffset.x,
	        y: viewportRect.y + scrollOffset.y,
	        width: viewportRect.width,
	        height: viewportRect.height
	      };
	    }
	    progress.throwIfAborted();
	    const { data } = await this._session.send("Page.screenshot", {
	      mimeType: "image/" + format,
	      clip: documentRect,
	      quality,
	      omitDeviceScaleFactor: scale === "css"
	    });
	    return Buffer.from(data, "base64");
	  }
	  async getContentFrame(handle) {
	    const { contentFrameId } = await this._session.send("Page.describeNode", {
	      frameId: handle._context.frame._id,
	      objectId: handle._objectId
	    });
	    if (!contentFrameId)
	      return null;
	    return this._page._frameManager.frame(contentFrameId);
	  }
	  async getOwnerFrame(handle) {
	    const { ownerFrameId } = await this._session.send("Page.describeNode", {
	      frameId: handle._context.frame._id,
	      objectId: handle._objectId
	    });
	    return ownerFrameId || null;
	  }
	  async getBoundingBox(handle) {
	    const quads = await this.getContentQuads(handle);
	    if (!quads || !quads.length)
	      return null;
	    let minX = Infinity;
	    let maxX = -Infinity;
	    let minY = Infinity;
	    let maxY = -Infinity;
	    for (const quad of quads) {
	      for (const point of quad) {
	        minX = Math.min(minX, point.x);
	        maxX = Math.max(maxX, point.x);
	        minY = Math.min(minY, point.y);
	        maxY = Math.max(maxY, point.y);
	      }
	    }
	    return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };
	  }
	  async scrollRectIntoViewIfNeeded(handle, rect) {
	    return await this._session.send("Page.scrollIntoViewIfNeeded", {
	      frameId: handle._context.frame._id,
	      objectId: handle._objectId,
	      rect
	    }).then(() => "done").catch((e) => {
	      if (e instanceof Error && e.message.includes("Node is detached from document"))
	        return "error:notconnected";
	      if (e instanceof Error && e.message.includes("Node does not have a layout object"))
	        return "error:notvisible";
	      throw e;
	    });
	  }
	  async setScreencastOptions(options) {
	    if (options) {
	      const { screencastId } = await this._session.send("Page.startScreencast", options);
	      this._screencastId = screencastId;
	    } else {
	      await this._session.send("Page.stopScreencast");
	    }
	  }
	  _onScreencastFrame(event) {
	    if (!this._screencastId)
	      return;
	    const screencastId = this._screencastId;
	    this._page.throttleScreencastFrameAck(() => {
	      this._session.send("Page.screencastFrameAck", { screencastId }).catch((e) => import_debugLogger.debugLogger.log("error", e));
	    });
	    const buffer = Buffer.from(event.data, "base64");
	    this._page.emit(import_page2.Page.Events.ScreencastFrame, {
	      buffer,
	      width: event.deviceWidth,
	      height: event.deviceHeight
	    });
	  }
	  rafCountForStablePosition() {
	    return 1;
	  }
	  async getContentQuads(handle) {
	    const result = await this._session.sendMayFail("Page.getContentQuads", {
	      frameId: handle._context.frame._id,
	      objectId: handle._objectId
	    });
	    if (!result)
	      return null;
	    return result.quads.map((quad) => [quad.p1, quad.p2, quad.p3, quad.p4]);
	  }
	  async setInputFilePaths(handle, files) {
	    await this._session.send("Page.setFileInputFiles", {
	      frameId: handle._context.frame._id,
	      objectId: handle._objectId,
	      files
	    });
	  }
	  async adoptElementHandle(handle, to) {
	    const result = await this._session.send("Page.adoptNode", {
	      frameId: handle._context.frame._id,
	      objectId: handle._objectId,
	      executionContextId: to.delegate._executionContextId
	    });
	    if (!result.remoteObject)
	      throw new Error(dom.kUnableToAdoptErrorMessage);
	    return (0, import_ffExecutionContext.createHandle)(to, result.remoteObject);
	  }
	  async getAccessibilityTree(needle) {
	    return (0, import_ffAccessibility.getAccessibilityTree)(this._session, needle);
	  }
	  async inputActionEpilogue() {
	  }
	  async resetForReuse() {
	    await this.rawMouse.move(-1, -1, "none", /* @__PURE__ */ new Set(), /* @__PURE__ */ new Set(), false);
	  }
	  async getFrameElement(frame) {
	    const parent = frame.parentFrame();
	    if (!parent)
	      throw new Error("Frame has been detached.");
	    const context = await parent._mainContext();
	    const result = await this._session.send("Page.adoptNode", {
	      frameId: frame._id,
	      executionContextId: context.delegate._executionContextId
	    });
	    if (!result.remoteObject)
	      throw new Error("Frame has been detached.");
	    return (0, import_ffExecutionContext.createHandle)(context, result.remoteObject);
	  }
	  shouldToggleStyleSheetToSyncAnimations() {
	    return false;
	  }
	}
	function webSocketId(frameId, wsid) {
	  return `${frameId}---${wsid}`;
	}
	return ffPage;
}

var ffBrowser;
var hasRequiredFfBrowser;

function requireFfBrowser () {
	if (hasRequiredFfBrowser) return ffBrowser;
	hasRequiredFfBrowser = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var ffBrowser_exports = {};
	__export(ffBrowser_exports, {
	  FFBrowser: () => FFBrowser,
	  FFBrowserContext: () => FFBrowserContext
	});
	ffBrowser = __toCommonJS(ffBrowser_exports);
	var import_utils = requireUtils();
	var import_browser = requireBrowser$1();
	var import_browserContext = requireBrowserContext$1();
	var import_errors = requireErrors$1();
	var network = __toESM(requireNetwork$1());
	var import_page = requirePage$1();
	var import_ffConnection = requireFfConnection();
	var import_ffPage = requireFfPage();
	class FFBrowser extends import_browser.Browser {
	  constructor(parent, connection, options) {
	    super(parent, options);
	    this._version = "";
	    this._userAgent = "";
	    this._connection = connection;
	    this.session = connection.rootSession;
	    this._ffPages = /* @__PURE__ */ new Map();
	    this._contexts = /* @__PURE__ */ new Map();
	    this._connection.on(import_ffConnection.ConnectionEvents.Disconnected, () => this._onDisconnect());
	    this.session.on("Browser.attachedToTarget", this._onAttachedToTarget.bind(this));
	    this.session.on("Browser.detachedFromTarget", this._onDetachedFromTarget.bind(this));
	    this.session.on("Browser.downloadCreated", this._onDownloadCreated.bind(this));
	    this.session.on("Browser.downloadFinished", this._onDownloadFinished.bind(this));
	    this.session.on("Browser.videoRecordingFinished", this._onVideoRecordingFinished.bind(this));
	  }
	  static async connect(parent, transport, options) {
	    const connection = new import_ffConnection.FFConnection(transport, options.protocolLogger, options.browserLogsCollector);
	    const browser = new FFBrowser(parent, connection, options);
	    if (options.__testHookOnConnectToBrowser)
	      await options.__testHookOnConnectToBrowser();
	    let firefoxUserPrefs = options.originalLaunchOptions.firefoxUserPrefs ?? {};
	    if (Object.keys(kBandaidFirefoxUserPrefs).length)
	      firefoxUserPrefs = { ...kBandaidFirefoxUserPrefs, ...firefoxUserPrefs };
	    const promises = [
	      browser.session.send("Browser.enable", {
	        attachToDefaultContext: !!options.persistent,
	        userPrefs: Object.entries(firefoxUserPrefs).map(([name, value]) => ({ name, value }))
	      }),
	      browser._initVersion()
	    ];
	    if (options.persistent) {
	      browser._defaultContext = new FFBrowserContext(browser, void 0, options.persistent);
	      promises.push(browser._defaultContext._initialize());
	    }
	    const proxy = options.originalLaunchOptions.proxyOverride || options.proxy;
	    if (proxy)
	      promises.push(browser.session.send("Browser.setBrowserProxy", toJugglerProxyOptions(proxy)));
	    await Promise.all(promises);
	    return browser;
	  }
	  async _initVersion() {
	    const result = await this.session.send("Browser.getInfo");
	    this._version = result.version.substring(result.version.indexOf("/") + 1);
	    this._userAgent = result.userAgent;
	  }
	  isConnected() {
	    return !this._connection._closed;
	  }
	  async doCreateNewContext(options) {
	    if (options.isMobile)
	      throw new Error("options.isMobile is not supported in Firefox");
	    const { browserContextId } = await this.session.send("Browser.createBrowserContext", { removeOnDetach: true });
	    const context = new FFBrowserContext(this, browserContextId, options);
	    await context._initialize();
	    this._contexts.set(browserContextId, context);
	    return context;
	  }
	  contexts() {
	    return Array.from(this._contexts.values());
	  }
	  version() {
	    return this._version;
	  }
	  userAgent() {
	    return this._userAgent;
	  }
	  _onDetachedFromTarget(payload) {
	    const ffPage = this._ffPages.get(payload.targetId);
	    this._ffPages.delete(payload.targetId);
	    ffPage.didClose();
	  }
	  _onAttachedToTarget(payload) {
	    const { targetId, browserContextId, openerId, type } = payload.targetInfo;
	    (0, import_utils.assert)(type === "page");
	    const context = browserContextId ? this._contexts.get(browserContextId) : this._defaultContext;
	    (0, import_utils.assert)(context, `Unknown context id:${browserContextId}, _defaultContext: ${this._defaultContext}`);
	    const session = this._connection.createSession(payload.sessionId);
	    const opener = openerId ? this._ffPages.get(openerId) : null;
	    const ffPage = new import_ffPage.FFPage(session, context, opener);
	    this._ffPages.set(targetId, ffPage);
	  }
	  _onDownloadCreated(payload) {
	    const ffPage = this._ffPages.get(payload.pageTargetId);
	    if (!ffPage)
	      return;
	    ffPage._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
	    let originPage = ffPage._page.initializedOrUndefined();
	    if (!originPage) {
	      ffPage._markAsError(new Error("Starting new page download"));
	      if (ffPage._opener)
	        originPage = ffPage._opener._page.initializedOrUndefined();
	    }
	    if (!originPage)
	      return;
	    this._downloadCreated(originPage, payload.uuid, payload.url, payload.suggestedFileName);
	  }
	  _onDownloadFinished(payload) {
	    const error = payload.canceled ? "canceled" : payload.error;
	    this._downloadFinished(payload.uuid, error);
	  }
	  _onVideoRecordingFinished(payload) {
	    this._takeVideo(payload.screencastId)?.reportFinished();
	  }
	  _onDisconnect() {
	    for (const video of this._idToVideo.values())
	      video.artifact.reportFinished(new import_errors.TargetClosedError());
	    this._idToVideo.clear();
	    for (const ffPage of this._ffPages.values())
	      ffPage.didClose();
	    this._ffPages.clear();
	    this._didClose();
	  }
	}
	class FFBrowserContext extends import_browserContext.BrowserContext {
	  constructor(browser, browserContextId, options) {
	    super(browser, options, browserContextId);
	  }
	  async _initialize() {
	    (0, import_utils.assert)(!this._ffPages().length);
	    const browserContextId = this._browserContextId;
	    const promises = [
	      super._initialize(),
	      this._browser.session.send("Browser.addBinding", { browserContextId: this._browserContextId, name: import_page.PageBinding.kPlaywrightBinding, script: "" }),
	      this._updateInitScripts()
	    ];
	    if (this._options.acceptDownloads !== "internal-browser-default") {
	      promises.push(this._browser.session.send("Browser.setDownloadOptions", {
	        browserContextId,
	        downloadOptions: {
	          behavior: this._options.acceptDownloads === "accept" ? "saveToDisk" : "cancel",
	          downloadsDir: this._browser.options.downloadsPath
	        }
	      }));
	    }
	    if (this._options.viewport) {
	      const viewport = {
	        viewportSize: { width: this._options.viewport.width, height: this._options.viewport.height },
	        deviceScaleFactor: this._options.deviceScaleFactor || 1
	      };
	      promises.push(this._browser.session.send("Browser.setDefaultViewport", { browserContextId, viewport }));
	    }
	    if (this._options.hasTouch)
	      promises.push(this._browser.session.send("Browser.setTouchOverride", { browserContextId, hasTouch: true }));
	    if (this._options.userAgent)
	      promises.push(this._browser.session.send("Browser.setUserAgentOverride", { browserContextId, userAgent: this._options.userAgent }));
	    if (this._options.bypassCSP)
	      promises.push(this._browser.session.send("Browser.setBypassCSP", { browserContextId, bypassCSP: true }));
	    if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors)
	      promises.push(this._browser.session.send("Browser.setIgnoreHTTPSErrors", { browserContextId, ignoreHTTPSErrors: true }));
	    if (this._options.javaScriptEnabled === false)
	      promises.push(this._browser.session.send("Browser.setJavaScriptDisabled", { browserContextId, javaScriptDisabled: true }));
	    if (this._options.locale)
	      promises.push(this._browser.session.send("Browser.setLocaleOverride", { browserContextId, locale: this._options.locale }));
	    if (this._options.timezoneId)
	      promises.push(this._browser.session.send("Browser.setTimezoneOverride", { browserContextId, timezoneId: this._options.timezoneId }));
	    if (this._options.extraHTTPHeaders || this._options.locale)
	      promises.push(this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []));
	    if (this._options.httpCredentials)
	      promises.push(this.setHTTPCredentials(this._options.httpCredentials));
	    if (this._options.geolocation)
	      promises.push(this.setGeolocation(this._options.geolocation));
	    if (this._options.offline)
	      promises.push(this.setOffline(this._options.offline));
	    if (this._options.colorScheme !== "no-override") {
	      promises.push(this._browser.session.send("Browser.setColorScheme", {
	        browserContextId,
	        colorScheme: this._options.colorScheme !== void 0 ? this._options.colorScheme : "light"
	      }));
	    }
	    if (this._options.reducedMotion !== "no-override") {
	      promises.push(this._browser.session.send("Browser.setReducedMotion", {
	        browserContextId,
	        reducedMotion: this._options.reducedMotion !== void 0 ? this._options.reducedMotion : "no-preference"
	      }));
	    }
	    if (this._options.forcedColors !== "no-override") {
	      promises.push(this._browser.session.send("Browser.setForcedColors", {
	        browserContextId,
	        forcedColors: this._options.forcedColors !== void 0 ? this._options.forcedColors : "none"
	      }));
	    }
	    if (this._options.contrast !== "no-override") {
	      promises.push(this._browser.session.send("Browser.setContrast", {
	        browserContextId,
	        contrast: this._options.contrast !== void 0 ? this._options.contrast : "no-preference"
	      }));
	    }
	    if (this._options.recordVideo) {
	      promises.push(this._ensureVideosPath().then(() => {
	        return this._browser.session.send("Browser.setVideoRecordingOptions", {
	          // validateBrowserContextOptions ensures correct video size.
	          options: {
	            ...this._options.recordVideo.size,
	            dir: this._options.recordVideo.dir
	          },
	          browserContextId: this._browserContextId
	        });
	      }));
	    }
	    const proxy = this._options.proxyOverride || this._options.proxy;
	    if (proxy) {
	      promises.push(this._browser.session.send("Browser.setContextProxy", {
	        browserContextId: this._browserContextId,
	        ...toJugglerProxyOptions(proxy)
	      }));
	    }
	    await Promise.all(promises);
	  }
	  _ffPages() {
	    return Array.from(this._browser._ffPages.values()).filter((ffPage) => ffPage._browserContext === this);
	  }
	  possiblyUninitializedPages() {
	    return this._ffPages().map((ffPage) => ffPage._page);
	  }
	  async doCreateNewPage() {
	    (0, import_browserContext.assertBrowserContextIsNotOwned)(this);
	    const { targetId } = await this._browser.session.send("Browser.newPage", {
	      browserContextId: this._browserContextId
	    }).catch((e) => {
	      if (e.message.includes("Failed to override timezone"))
	        throw new Error(`Invalid timezone ID: ${this._options.timezoneId}`);
	      throw e;
	    });
	    return this._browser._ffPages.get(targetId)._page;
	  }
	  async doGetCookies(urls) {
	    const { cookies } = await this._browser.session.send("Browser.getCookies", { browserContextId: this._browserContextId });
	    return network.filterCookies(cookies.map((c) => {
	      const copy = { ...c };
	      delete copy.size;
	      delete copy.session;
	      return copy;
	    }), urls);
	  }
	  async addCookies(cookies) {
	    const cc = network.rewriteCookies(cookies).map((c) => ({
	      ...c,
	      expires: c.expires === -1 ? void 0 : c.expires
	    }));
	    await this._browser.session.send("Browser.setCookies", { browserContextId: this._browserContextId, cookies: cc });
	  }
	  async doClearCookies() {
	    await this._browser.session.send("Browser.clearCookies", { browserContextId: this._browserContextId });
	  }
	  async doGrantPermissions(origin, permissions) {
	    const webPermissionToProtocol = /* @__PURE__ */ new Map([
	      ["geolocation", "geo"],
	      ["persistent-storage", "persistent-storage"],
	      ["push", "push"],
	      ["notifications", "desktop-notification"]
	    ]);
	    const filtered = permissions.map((permission) => {
	      const protocolPermission = webPermissionToProtocol.get(permission);
	      if (!protocolPermission)
	        throw new Error("Unknown permission: " + permission);
	      return protocolPermission;
	    });
	    await this._browser.session.send("Browser.grantPermissions", { origin, browserContextId: this._browserContextId, permissions: filtered });
	  }
	  async doClearPermissions() {
	    await this._browser.session.send("Browser.resetPermissions", { browserContextId: this._browserContextId });
	  }
	  async setGeolocation(geolocation) {
	    (0, import_browserContext.verifyGeolocation)(geolocation);
	    this._options.geolocation = geolocation;
	    await this._browser.session.send("Browser.setGeolocationOverride", { browserContextId: this._browserContextId, geolocation: geolocation || null });
	  }
	  async setExtraHTTPHeaders(headers) {
	    this._options.extraHTTPHeaders = headers;
	    let allHeaders = this._options.extraHTTPHeaders;
	    if (this._options.locale)
	      allHeaders = network.mergeHeaders([allHeaders, network.singleHeader("Accept-Language", this._options.locale)]);
	    await this._browser.session.send("Browser.setExtraHTTPHeaders", { browserContextId: this._browserContextId, headers: allHeaders });
	  }
	  async setUserAgent(userAgent) {
	    await this._browser.session.send("Browser.setUserAgentOverride", { browserContextId: this._browserContextId, userAgent: userAgent || null });
	  }
	  async setOffline(offline) {
	    this._options.offline = offline;
	    await this._browser.session.send("Browser.setOnlineOverride", { browserContextId: this._browserContextId, override: offline ? "offline" : "online" });
	  }
	  async doSetHTTPCredentials(httpCredentials) {
	    this._options.httpCredentials = httpCredentials;
	    let credentials = null;
	    if (httpCredentials) {
	      const { username, password, origin } = httpCredentials;
	      credentials = { username, password, origin };
	    }
	    await this._browser.session.send("Browser.setHTTPCredentials", { browserContextId: this._browserContextId, credentials });
	  }
	  async doAddInitScript(initScript) {
	    await this._updateInitScripts();
	  }
	  async doRemoveNonInternalInitScripts() {
	    await this._updateInitScripts();
	  }
	  async _updateInitScripts() {
	    const bindingScripts = [...this._pageBindings.values()].map((binding) => binding.initScript.source);
	    const initScripts = this.initScripts.map((script) => script.source);
	    await this._browser.session.send("Browser.setInitScripts", { browserContextId: this._browserContextId, scripts: [import_page.kBuiltinsScript.source, ...bindingScripts, ...initScripts].map((script) => ({ script })) });
	  }
	  async doUpdateRequestInterception() {
	    await Promise.all([
	      this._browser.session.send("Browser.setRequestInterception", { browserContextId: this._browserContextId, enabled: !!this._requestInterceptor }),
	      this._browser.session.send("Browser.setCacheDisabled", { browserContextId: this._browserContextId, cacheDisabled: !!this._requestInterceptor })
	    ]);
	  }
	  onClosePersistent() {
	  }
	  async clearCache() {
	    await this._browser.session.send("Browser.clearCache");
	  }
	  async doClose(reason) {
	    if (!this._browserContextId) {
	      if (this._options.recordVideo) {
	        await this._browser.session.send("Browser.setVideoRecordingOptions", {
	          options: void 0,
	          browserContextId: this._browserContextId
	        });
	      }
	      await this._browser.close({ reason });
	    } else {
	      await this._browser.session.send("Browser.removeBrowserContext", { browserContextId: this._browserContextId });
	      this._browser._contexts.delete(this._browserContextId);
	    }
	  }
	  async cancelDownload(uuid) {
	    await this._browser.session.send("Browser.cancelDownload", { uuid });
	  }
	}
	function toJugglerProxyOptions(proxy) {
	  const proxyServer = new URL(proxy.server);
	  let port = parseInt(proxyServer.port, 10);
	  let type = "http";
	  if (proxyServer.protocol === "socks5:")
	    type = "socks";
	  else if (proxyServer.protocol === "socks4:")
	    type = "socks4";
	  else if (proxyServer.protocol === "https:")
	    type = "https";
	  if (proxyServer.port === "") {
	    if (proxyServer.protocol === "http:")
	      port = 80;
	    else if (proxyServer.protocol === "https:")
	      port = 443;
	  }
	  return {
	    type,
	    bypass: proxy.bypass ? proxy.bypass.split(",").map((domain) => domain.trim()) : [],
	    host: proxyServer.hostname,
	    port,
	    username: proxy.username,
	    password: proxy.password
	  };
	}
	const kBandaidFirefoxUserPrefs = {};
	return ffBrowser;
}

var firefox;
var hasRequiredFirefox;

function requireFirefox () {
	if (hasRequiredFirefox) return firefox;
	hasRequiredFirefox = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var firefox_exports = {};
	__export(firefox_exports, {
	  Firefox: () => Firefox
	});
	firefox = __toCommonJS(firefox_exports);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_ffBrowser = requireFfBrowser();
	var import_ffConnection = requireFfConnection();
	var import_ascii = requireAscii();
	var import_browserType = requireBrowserType$1();
	var import_browserType2 = requireBrowserType$1();
	class Firefox extends import_browserType.BrowserType {
	  constructor(parent) {
	    super(parent, "firefox");
	  }
	  connectToTransport(transport, options) {
	    return import_ffBrowser.FFBrowser.connect(this.attribution.playwright, transport, options);
	  }
	  doRewriteStartupLog(error) {
	    if (!error.logs)
	      return error;
	    if (error.logs.includes(`as root in a regular user's session is not supported.`))
	      error.logs = "\n" + (0, import_ascii.wrapInASCIIBox)(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.
Workaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
	    if (error.logs.includes("no DISPLAY environment variable specified"))
	      error.logs = "\n" + (0, import_ascii.wrapInASCIIBox)(import_browserType.kNoXServerRunningError, 1);
	    return error;
	  }
	  amendEnvironment(env, userDataDir, executable, browserArguments) {
	    if (!import_path.default.isAbsolute(import_os.default.homedir()))
	      throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${import_os.default.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
	    if (import_os.default.platform() === "linux") {
	      return { ...env, SNAP_NAME: void 0, SNAP_INSTANCE_NAME: void 0 };
	    }
	    return env;
	  }
	  attemptToGracefullyCloseBrowser(transport) {
	    const message = { method: "Browser.close", params: {}, id: import_ffConnection.kBrowserCloseMessageId };
	    transport.send(message);
	  }
	  defaultArgs(options, isPersistent, userDataDir) {
	    const { args = [], headless } = options;
	    const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
	    if (userDataDirArg)
	      throw this._createUserDataDirArgMisuseError("--profile");
	    if (args.find((arg) => arg.startsWith("-juggler")))
	      throw new Error("Use the port parameter instead of -juggler argument");
	    const firefoxArguments = ["-no-remote"];
	    if (headless) {
	      firefoxArguments.push("-headless");
	    } else {
	      firefoxArguments.push("-wait-for-browser");
	      firefoxArguments.push("-foreground");
	    }
	    firefoxArguments.push(`-profile`, userDataDir);
	    firefoxArguments.push("-juggler-pipe");
	    firefoxArguments.push(...args);
	    if (isPersistent)
	      firefoxArguments.push("about:blank");
	    else
	      firefoxArguments.push("-silent");
	    return firefoxArguments;
	  }
	  readyState(options) {
	    return new JugglerReadyState();
	  }
	}
	class JugglerReadyState extends import_browserType2.BrowserReadyState {
	  onBrowserOutput(message) {
	    if (message.includes("Juggler listening to the pipe"))
	      this._wsEndpoint.resolve(void 0);
	  }
	}
	return firefox;
}

var selectors$1;
var hasRequiredSelectors$1;

function requireSelectors$1 () {
	if (hasRequiredSelectors$1) return selectors$1;
	hasRequiredSelectors$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var selectors_exports = {};
	__export(selectors_exports, {
	  Selectors: () => Selectors
	});
	selectors$1 = __toCommonJS(selectors_exports);
	var import_crypto = requireCrypto();
	var import_selectorParser = requireSelectorParser();
	class Selectors {
	  constructor() {
	    this.guid = `selectors@${(0, import_crypto.createGuid)()}`;
	    this._testIdAttributeName = "data-testid";
	    this._builtinEngines = /* @__PURE__ */ new Set([
	      "css",
	      "css:light",
	      "xpath",
	      "xpath:light",
	      "_react",
	      "_vue",
	      "text",
	      "text:light",
	      "id",
	      "id:light",
	      "data-testid",
	      "data-testid:light",
	      "data-test-id",
	      "data-test-id:light",
	      "data-test",
	      "data-test:light",
	      "nth",
	      "visible",
	      "internal:control",
	      "internal:has",
	      "internal:has-not",
	      "internal:has-text",
	      "internal:has-not-text",
	      "internal:and",
	      "internal:or",
	      "internal:chain",
	      "role",
	      "internal:attr",
	      "internal:label",
	      "internal:text",
	      "internal:role",
	      "internal:testid",
	      "aria-ref"
	    ]);
	    this._builtinEnginesInMainWorld = /* @__PURE__ */ new Set([
	      "_react",
	      "_vue"
	    ]);
	    this._engines = /* @__PURE__ */ new Map();
	  }
	  async register(name, source, contentScript = false) {
	    if (!name.match(/^[a-zA-Z_0-9-]+$/))
	      throw new Error("Selector engine name may only contain [a-zA-Z0-9_] characters");
	    if (this._builtinEngines.has(name) || name === "zs" || name === "zs:light")
	      throw new Error(`"${name}" is a predefined selector engine`);
	    if (this._engines.has(name))
	      throw new Error(`"${name}" selector engine has been already registered`);
	    this._engines.set(name, { source, contentScript });
	  }
	  testIdAttributeName() {
	    return this._testIdAttributeName;
	  }
	  setTestIdAttributeName(testIdAttributeName) {
	    this._testIdAttributeName = testIdAttributeName;
	  }
	  unregisterAll() {
	    this._engines.clear();
	  }
	  parseSelector(selector, strict) {
	    const parsed = typeof selector === "string" ? (0, import_selectorParser.parseSelector)(selector) : selector;
	    let needsMainWorld = false;
	    (0, import_selectorParser.visitAllSelectorParts)(parsed, (part) => {
	      const name = part.name;
	      const custom = this._engines.get(name);
	      if (!custom && !this._builtinEngines.has(name))
	        throw new import_selectorParser.InvalidSelectorError(`Unknown engine "${name}" while parsing selector ${(0, import_selectorParser.stringifySelector)(parsed)}`);
	      if (custom && !custom.contentScript)
	        needsMainWorld = true;
	      if (this._builtinEnginesInMainWorld.has(name))
	        needsMainWorld = true;
	    });
	    return {
	      parsed,
	      world: needsMainWorld ? "main" : "utility",
	      strict
	    };
	  }
	}
	return selectors$1;
}

var wkConnection;
var hasRequiredWkConnection;

function requireWkConnection () {
	if (hasRequiredWkConnection) return wkConnection;
	hasRequiredWkConnection = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkConnection_exports = {};
	__export(wkConnection_exports, {
	  WKConnection: () => WKConnection,
	  WKSession: () => WKSession,
	  kBrowserCloseMessageId: () => kBrowserCloseMessageId,
	  kPageProxyMessageReceived: () => kPageProxyMessageReceived
	});
	wkConnection = __toCommonJS(wkConnection_exports);
	var import_events = require$$0$5;
	var import_utils = requireUtils();
	var import_debugLogger = requireDebugLogger();
	var import_helper = requireHelper();
	var import_protocolError = requireProtocolError();
	const kBrowserCloseMessageId = -9999;
	const kPageProxyMessageReceived = Symbol("kPageProxyMessageReceived");
	class WKConnection {
	  constructor(transport, onDisconnect, protocolLogger, browserLogsCollector) {
	    this._lastId = 0;
	    this._closed = false;
	    this._transport = transport;
	    this._onDisconnect = onDisconnect;
	    this._protocolLogger = protocolLogger;
	    this._browserLogsCollector = browserLogsCollector;
	    this.browserSession = new WKSession(this, "", (message) => {
	      this.rawSend(message);
	    });
	    this._transport.onmessage = this._dispatchMessage.bind(this);
	    this._transport.onclose = this._onClose.bind(this);
	  }
	  nextMessageId() {
	    return ++this._lastId;
	  }
	  rawSend(message) {
	    this._protocolLogger("send", message);
	    this._transport.send(message);
	  }
	  _dispatchMessage(message) {
	    this._protocolLogger("receive", message);
	    if (message.id === kBrowserCloseMessageId)
	      return;
	    if (message.pageProxyId) {
	      const payload = { message, pageProxyId: message.pageProxyId };
	      this.browserSession.dispatchMessage({ method: kPageProxyMessageReceived, params: payload });
	      return;
	    }
	    this.browserSession.dispatchMessage(message);
	  }
	  _onClose(reason) {
	    this._closed = true;
	    this._transport.onmessage = void 0;
	    this._transport.onclose = void 0;
	    this._browserDisconnectedLogs = import_helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
	    this.browserSession.dispose();
	    this._onDisconnect();
	  }
	  isClosed() {
	    return this._closed;
	  }
	  close() {
	    if (!this._closed)
	      this._transport.close();
	  }
	}
	class WKSession extends import_events.EventEmitter {
	  constructor(connection, sessionId, rawSend) {
	    super();
	    this._disposed = false;
	    this._callbacks = /* @__PURE__ */ new Map();
	    this._crashed = false;
	    this.setMaxListeners(0);
	    this.connection = connection;
	    this.sessionId = sessionId;
	    this._rawSend = rawSend;
	    this.on = super.on;
	    this.off = super.removeListener;
	    this.addListener = super.addListener;
	    this.removeListener = super.removeListener;
	    this.once = super.once;
	  }
	  async send(method, params) {
	    if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs)
	      throw new import_protocolError.ProtocolError(this._crashed ? "crashed" : "closed", void 0, this.connection._browserDisconnectedLogs);
	    const id = this.connection.nextMessageId();
	    const messageObj = { id, method, params };
	    this._rawSend(messageObj);
	    return new Promise((resolve, reject) => {
	      this._callbacks.set(id, { resolve, reject, error: new import_protocolError.ProtocolError("error", method) });
	    });
	  }
	  sendMayFail(method, params) {
	    return this.send(method, params).catch((error) => import_debugLogger.debugLogger.log("error", error));
	  }
	  markAsCrashed() {
	    this._crashed = true;
	  }
	  isDisposed() {
	    return this._disposed;
	  }
	  dispose() {
	    for (const callback of this._callbacks.values()) {
	      callback.error.type = this._crashed ? "crashed" : "closed";
	      callback.error.logs = this.connection._browserDisconnectedLogs;
	      callback.reject(callback.error);
	    }
	    this._callbacks.clear();
	    this._disposed = true;
	  }
	  dispatchMessage(object) {
	    if (object.id && this._callbacks.has(object.id)) {
	      const callback = this._callbacks.get(object.id);
	      this._callbacks.delete(object.id);
	      if (object.error) {
	        callback.error.setMessage(object.error.message);
	        callback.reject(callback.error);
	      } else {
	        callback.resolve(object.result);
	      }
	    } else if (object.id && !object.error) {
	      (0, import_utils.assert)(this.isDisposed());
	    } else {
	      Promise.resolve().then(() => this.emit(object.method, object.params));
	    }
	  }
	}
	return wkConnection;
}

var wkAccessibility;
var hasRequiredWkAccessibility;

function requireWkAccessibility () {
	if (hasRequiredWkAccessibility) return wkAccessibility;
	hasRequiredWkAccessibility = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkAccessibility_exports = {};
	__export(wkAccessibility_exports, {
	  getAccessibilityTree: () => getAccessibilityTree
	});
	wkAccessibility = __toCommonJS(wkAccessibility_exports);
	async function getAccessibilityTree(session, needle) {
	  const objectId = needle ? needle._objectId : void 0;
	  const { axNode } = await session.send("Page.accessibilitySnapshot", { objectId });
	  const tree = new WKAXNode(axNode);
	  return {
	    tree,
	    needle: needle ? tree._findNeedle() : null
	  };
	}
	const WKRoleToARIARole = new Map(Object.entries({
	  "TextField": "textbox"
	}));
	const WKUnhelpfulRoleDescriptions = new Map(Object.entries({
	  "WebArea": "HTML content",
	  "Summary": "summary",
	  "DescriptionList": "description list",
	  "ImageMap": "image map",
	  "ListMarker": "list marker",
	  "Video": "video playback",
	  "Mark": "highlighted",
	  "contentinfo": "content information",
	  "Details": "details",
	  "DescriptionListDetail": "description",
	  "DescriptionListTerm": "term",
	  "alertdialog": "web alert dialog",
	  "dialog": "web dialog",
	  "status": "application status",
	  "tabpanel": "tab panel",
	  "application": "web application"
	}));
	class WKAXNode {
	  constructor(payload) {
	    this._payload = payload;
	    this._children = [];
	    for (const payload2 of this._payload.children || [])
	      this._children.push(new WKAXNode(payload2));
	  }
	  children() {
	    return this._children;
	  }
	  _findNeedle() {
	    if (this._payload.found)
	      return this;
	    for (const child of this._children) {
	      const found = child._findNeedle();
	      if (found)
	        return found;
	    }
	    return null;
	  }
	  isControl() {
	    switch (this._payload.role) {
	      case "button":
	      case "checkbox":
	      case "ColorWell":
	      case "combobox":
	      case "DisclosureTriangle":
	      case "listbox":
	      case "menu":
	      case "menubar":
	      case "menuitem":
	      case "menuitemcheckbox":
	      case "menuitemradio":
	      case "radio":
	      case "scrollbar":
	      case "searchbox":
	      case "slider":
	      case "spinbutton":
	      case "switch":
	      case "tab":
	      case "textbox":
	      case "TextField":
	      case "tree":
	        return true;
	      default:
	        return false;
	    }
	  }
	  _isTextControl() {
	    switch (this._payload.role) {
	      case "combobox":
	      case "searchfield":
	      case "textbox":
	      case "TextField":
	        return true;
	    }
	    return false;
	  }
	  _name() {
	    if (this._payload.role === "text")
	      return this._payload.value || "";
	    return this._payload.name || "";
	  }
	  isInteresting(insideControl) {
	    const { role, focusable } = this._payload;
	    const name = this._name();
	    if (role === "ScrollArea")
	      return false;
	    if (role === "WebArea")
	      return true;
	    if (focusable || role === "MenuListOption")
	      return true;
	    if (this.isControl())
	      return true;
	    if (insideControl)
	      return false;
	    return this.isLeafNode() && !!name;
	  }
	  _hasRedundantTextChild() {
	    if (this._children.length !== 1)
	      return false;
	    const child = this._children[0];
	    return child._payload.role === "text" && this._payload.name === child._payload.value;
	  }
	  isLeafNode() {
	    if (!this._children.length)
	      return true;
	    if (this._isTextControl())
	      return true;
	    if (this._hasRedundantTextChild())
	      return true;
	    return false;
	  }
	  serialize() {
	    const node = {
	      role: WKRoleToARIARole.get(this._payload.role) || this._payload.role,
	      name: this._name()
	    };
	    if ("description" in this._payload && this._payload.description !== node.name)
	      node.description = this._payload.description;
	    if ("roledescription" in this._payload) {
	      const roledescription = this._payload.roledescription;
	      if (roledescription !== this._payload.role && WKUnhelpfulRoleDescriptions.get(this._payload.role) !== roledescription)
	        node.roledescription = roledescription;
	    }
	    if ("value" in this._payload && this._payload.role !== "text") {
	      if (typeof this._payload.value === "string")
	        node.valueString = this._payload.value;
	      else if (typeof this._payload.value === "number")
	        node.valueNumber = this._payload.value;
	    }
	    if ("checked" in this._payload)
	      node.checked = this._payload.checked === "true" ? "checked" : this._payload.checked === "false" ? "unchecked" : "mixed";
	    if ("pressed" in this._payload)
	      node.pressed = this._payload.pressed === "true" ? "pressed" : this._payload.pressed === "false" ? "released" : "mixed";
	    const userStringProperties = [
	      "keyshortcuts",
	      "valuetext"
	    ];
	    for (const userStringProperty of userStringProperties) {
	      if (!(userStringProperty in this._payload))
	        continue;
	      node[userStringProperty] = this._payload[userStringProperty];
	    }
	    const booleanProperties = [
	      "disabled",
	      "expanded",
	      "focused",
	      "modal",
	      "multiselectable",
	      "readonly",
	      "required",
	      "selected"
	    ];
	    for (const booleanProperty of booleanProperties) {
	      if (booleanProperty === "focused" && (this._payload.role === "WebArea" || this._payload.role === "ScrollArea"))
	        continue;
	      const value = this._payload[booleanProperty];
	      if (!value)
	        continue;
	      node[booleanProperty] = value;
	    }
	    const numericalProperties = [
	      "level",
	      "valuemax",
	      "valuemin"
	    ];
	    for (const numericalProperty of numericalProperties) {
	      if (!(numericalProperty in this._payload))
	        continue;
	      node[numericalProperty] = this._payload[numericalProperty];
	    }
	    const tokenProperties = [
	      "autocomplete",
	      "haspopup",
	      "invalid"
	    ];
	    for (const tokenProperty of tokenProperties) {
	      const value = this._payload[tokenProperty];
	      if (!value || value === "false")
	        continue;
	      node[tokenProperty] = value;
	    }
	    const orientationIsApplicable = /* @__PURE__ */ new Set([
	      "ScrollArea",
	      "scrollbar",
	      "listbox",
	      "combobox",
	      "menu",
	      "tree",
	      "separator",
	      "slider",
	      "tablist",
	      "toolbar"
	    ]);
	    if (this._payload.orientation && orientationIsApplicable.has(this._payload.role))
	      node.orientation = this._payload.orientation;
	    return node;
	  }
	}
	return wkAccessibility;
}

var wkExecutionContext;
var hasRequiredWkExecutionContext;

function requireWkExecutionContext () {
	if (hasRequiredWkExecutionContext) return wkExecutionContext;
	hasRequiredWkExecutionContext = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkExecutionContext_exports = {};
	__export(wkExecutionContext_exports, {
	  WKExecutionContext: () => WKExecutionContext,
	  createHandle: () => createHandle
	});
	wkExecutionContext = __toCommonJS(wkExecutionContext_exports);
	var js = __toESM(requireJavascript$1());
	var dom = __toESM(requireDom());
	var import_protocolError = requireProtocolError();
	var import_assert = requireAssert$1();
	class WKExecutionContext {
	  constructor(session, contextId) {
	    this._session = session;
	    this._contextId = contextId;
	  }
	  async rawEvaluateJSON(expression) {
	    try {
	      const response = await this._session.send("Runtime.evaluate", {
	        expression,
	        contextId: this._contextId,
	        returnByValue: true
	      });
	      if (response.wasThrown)
	        throw new js.JavaScriptErrorInEvaluate(response.result.description);
	      return response.result.value;
	    } catch (error) {
	      throw rewriteError(error);
	    }
	  }
	  async rawEvaluateHandle(context, expression) {
	    try {
	      const response = await this._session.send("Runtime.evaluate", {
	        expression,
	        contextId: this._contextId,
	        returnByValue: false
	      });
	      if (response.wasThrown)
	        throw new js.JavaScriptErrorInEvaluate(response.result.description);
	      return createHandle(context, response.result);
	    } catch (error) {
	      throw rewriteError(error);
	    }
	  }
	  async evaluateWithArguments(expression, returnByValue, utilityScript, values, handles) {
	    try {
	      const response = await this._session.send("Runtime.callFunctionOn", {
	        functionDeclaration: expression,
	        objectId: utilityScript._objectId,
	        arguments: [
	          { objectId: utilityScript._objectId },
	          ...values.map((value) => ({ value })),
	          ...handles.map((handle) => ({ objectId: handle._objectId }))
	        ],
	        returnByValue,
	        emulateUserGesture: true,
	        awaitPromise: true
	      });
	      if (response.wasThrown)
	        throw new js.JavaScriptErrorInEvaluate(response.result.description);
	      if (returnByValue)
	        return js.parseEvaluationResultValue(response.result.value);
	      return createHandle(utilityScript._context, response.result);
	    } catch (error) {
	      throw rewriteError(error);
	    }
	  }
	  async getProperties(object) {
	    const response = await this._session.send("Runtime.getProperties", {
	      objectId: object._objectId,
	      ownProperties: true
	    });
	    const result = /* @__PURE__ */ new Map();
	    for (const property of response.properties) {
	      if (!property.enumerable || !property.value)
	        continue;
	      result.set(property.name, createHandle(object._context, property.value));
	    }
	    return result;
	  }
	  async releaseHandle(handle) {
	    if (!handle._objectId)
	      return;
	    await this._session.send("Runtime.releaseObject", { objectId: handle._objectId });
	  }
	}
	function potentiallyUnserializableValue(remoteObject) {
	  const value = remoteObject.value;
	  const isUnserializable = remoteObject.type === "number" && ["NaN", "-Infinity", "Infinity", "-0"].includes(remoteObject.description);
	  return isUnserializable ? js.parseUnserializableValue(remoteObject.description) : value;
	}
	function rewriteError(error) {
	  if (error.message.includes("Object has too long reference chain"))
	    throw new Error("Cannot serialize result: object reference chain is too long.");
	  if (!js.isJavaScriptErrorInEvaluate(error) && !(0, import_protocolError.isSessionClosedError)(error))
	    return new Error("Execution context was destroyed, most likely because of a navigation.");
	  return error;
	}
	function renderPreview(object) {
	  if (object.type === "undefined")
	    return "undefined";
	  if ("value" in object)
	    return String(object.value);
	  if (object.description === "Object" && object.preview) {
	    const tokens = [];
	    for (const { name, value } of object.preview.properties)
	      tokens.push(`${name}: ${value}`);
	    return `{${tokens.join(", ")}}`;
	  }
	  if (object.subtype === "array" && object.preview)
	    return js.sparseArrayToString(object.preview.properties);
	  return object.description;
	}
	function createHandle(context, remoteObject) {
	  if (remoteObject.subtype === "node") {
	    (0, import_assert.assert)(context instanceof dom.FrameExecutionContext);
	    return new dom.ElementHandle(context, remoteObject.objectId);
	  }
	  const isPromise = remoteObject.className === "Promise";
	  return new js.JSHandle(context, isPromise ? "promise" : remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
	}
	return wkExecutionContext;
}

var wkInput;
var hasRequiredWkInput;

function requireWkInput () {
	if (hasRequiredWkInput) return wkInput;
	hasRequiredWkInput = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkInput_exports = {};
	__export(wkInput_exports, {
	  RawKeyboardImpl: () => RawKeyboardImpl,
	  RawMouseImpl: () => RawMouseImpl,
	  RawTouchscreenImpl: () => RawTouchscreenImpl
	});
	wkInput = __toCommonJS(wkInput_exports);
	var import_utils = requireUtils();
	var input = __toESM(requireInput$1());
	var import_macEditingCommands = requireMacEditingCommands();
	function toModifiersMask(modifiers) {
	  let mask = 0;
	  if (modifiers.has("Shift"))
	    mask |= 1;
	  if (modifiers.has("Control"))
	    mask |= 2;
	  if (modifiers.has("Alt"))
	    mask |= 4;
	  if (modifiers.has("Meta"))
	    mask |= 8;
	  return mask;
	}
	function toButtonsMask(buttons) {
	  let mask = 0;
	  if (buttons.has("left"))
	    mask |= 1;
	  if (buttons.has("right"))
	    mask |= 2;
	  if (buttons.has("middle"))
	    mask |= 4;
	  return mask;
	}
	class RawKeyboardImpl {
	  constructor(session) {
	    this._pageProxySession = session;
	  }
	  setSession(session) {
	    this._session = session;
	  }
	  async keydown(modifiers, keyName, description, autoRepeat) {
	    const parts = [];
	    for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
	      if (modifiers.has(modifier))
	        parts.push(modifier);
	    }
	    const { code, keyCode, key, text } = description;
	    parts.push(code);
	    const shortcut = parts.join("+");
	    let commands = import_macEditingCommands.macEditingCommands[shortcut];
	    if ((0, import_utils.isString)(commands))
	      commands = [commands];
	    await this._pageProxySession.send("Input.dispatchKeyEvent", {
	      type: "keyDown",
	      modifiers: toModifiersMask(modifiers),
	      windowsVirtualKeyCode: keyCode,
	      code,
	      key,
	      text,
	      unmodifiedText: text,
	      autoRepeat,
	      macCommands: commands,
	      isKeypad: description.location === input.keypadLocation
	    });
	  }
	  async keyup(modifiers, keyName, description) {
	    const { code, key } = description;
	    await this._pageProxySession.send("Input.dispatchKeyEvent", {
	      type: "keyUp",
	      modifiers: toModifiersMask(modifiers),
	      key,
	      windowsVirtualKeyCode: description.keyCode,
	      code,
	      isKeypad: description.location === input.keypadLocation
	    });
	  }
	  async sendText(text) {
	    await this._session.send("Page.insertText", { text });
	  }
	}
	class RawMouseImpl {
	  constructor(session) {
	    this._pageProxySession = session;
	  }
	  setSession(session) {
	    this._session = session;
	  }
	  async move(x, y, button, buttons, modifiers, forClick) {
	    await this._pageProxySession.send("Input.dispatchMouseEvent", {
	      type: "move",
	      button,
	      buttons: toButtonsMask(buttons),
	      x,
	      y,
	      modifiers: toModifiersMask(modifiers)
	    });
	  }
	  async down(x, y, button, buttons, modifiers, clickCount) {
	    await this._pageProxySession.send("Input.dispatchMouseEvent", {
	      type: "down",
	      button,
	      buttons: toButtonsMask(buttons),
	      x,
	      y,
	      modifiers: toModifiersMask(modifiers),
	      clickCount
	    });
	  }
	  async up(x, y, button, buttons, modifiers, clickCount) {
	    await this._pageProxySession.send("Input.dispatchMouseEvent", {
	      type: "up",
	      button,
	      buttons: toButtonsMask(buttons),
	      x,
	      y,
	      modifiers: toModifiersMask(modifiers),
	      clickCount
	    });
	  }
	  async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
	    if (this._page?._browserContext._options.isMobile)
	      throw new Error("Mouse wheel is not supported in mobile WebKit");
	    await this._session.send("Page.updateScrollingState");
	    await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, { world: "utility" });
	    await this._pageProxySession.send("Input.dispatchWheelEvent", {
	      x,
	      y,
	      deltaX,
	      deltaY,
	      modifiers: toModifiersMask(modifiers)
	    });
	  }
	  setPage(page) {
	    this._page = page;
	  }
	}
	class RawTouchscreenImpl {
	  constructor(session) {
	    this._pageProxySession = session;
	  }
	  async tap(x, y, modifiers) {
	    await this._pageProxySession.send("Input.dispatchTapEvent", {
	      x,
	      y,
	      modifiers: toModifiersMask(modifiers)
	    });
	  }
	}
	return wkInput;
}

var wkInterceptableRequest;
var hasRequiredWkInterceptableRequest;

function requireWkInterceptableRequest () {
	if (hasRequiredWkInterceptableRequest) return wkInterceptableRequest;
	hasRequiredWkInterceptableRequest = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkInterceptableRequest_exports = {};
	__export(wkInterceptableRequest_exports, {
	  WKInterceptableRequest: () => WKInterceptableRequest,
	  WKRouteImpl: () => WKRouteImpl
	});
	wkInterceptableRequest = __toCommonJS(wkInterceptableRequest_exports);
	var import_utils = requireUtils();
	var network = __toESM(requireNetwork$1());
	const errorReasons = {
	  "aborted": "Cancellation",
	  "accessdenied": "AccessControl",
	  "addressunreachable": "General",
	  "blockedbyclient": "Cancellation",
	  "blockedbyresponse": "General",
	  "connectionaborted": "General",
	  "connectionclosed": "General",
	  "connectionfailed": "General",
	  "connectionrefused": "General",
	  "connectionreset": "General",
	  "internetdisconnected": "General",
	  "namenotresolved": "General",
	  "timedout": "Timeout",
	  "failed": "General"
	};
	class WKInterceptableRequest {
	  constructor(session, frame, event, redirectedFrom, documentId) {
	    this._session = session;
	    this._requestId = event.requestId;
	    const resourceType = event.type ? event.type.toLowerCase() : redirectedFrom ? redirectedFrom.request.resourceType() : "other";
	    let postDataBuffer = null;
	    this._timestamp = event.timestamp;
	    this._wallTime = event.walltime * 1e3;
	    if (event.request.postData)
	      postDataBuffer = Buffer.from(event.request.postData, "base64");
	    this.request = new network.Request(
	      frame._page._browserContext,
	      frame,
	      null,
	      redirectedFrom?.request || null,
	      documentId,
	      event.request.url,
	      resourceType,
	      event.request.method,
	      postDataBuffer,
	      (0, import_utils.headersObjectToArray)(event.request.headers)
	    );
	  }
	  adoptRequestFromNewProcess(newSession, requestId) {
	    this._session = newSession;
	    this._requestId = requestId;
	  }
	  createResponse(responsePayload) {
	    const getResponseBody = async () => {
	      const response2 = await this._session.send("Network.getResponseBody", { requestId: this._requestId });
	      return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
	    };
	    const timingPayload = responsePayload.timing;
	    const timing = {
	      startTime: this._wallTime,
	      domainLookupStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupStart) : -1,
	      domainLookupEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupEnd) : -1,
	      connectStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectStart) : -1,
	      secureConnectionStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.secureConnectionStart) : -1,
	      connectEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectEnd) : -1,
	      requestStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.requestStart) : -1,
	      responseStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.responseStart) : -1
	    };
	    const setCookieSeparator = process.platform === "darwin" ? "," : "playwright-set-cookie-separator";
	    const response = new network.Response(this.request, responsePayload.status, responsePayload.statusText, (0, import_utils.headersObjectToArray)(responsePayload.headers, ",", setCookieSeparator), timing, getResponseBody, responsePayload.source === "service-worker");
	    response.setRawResponseHeaders(null);
	    response.setTransferSize(null);
	    if (responsePayload.requestHeaders && Object.keys(responsePayload.requestHeaders).length) {
	      const headers = { ...responsePayload.requestHeaders };
	      if (!headers["host"])
	        headers["Host"] = new URL(this.request.url()).host;
	      this.request.setRawRequestHeaders((0, import_utils.headersObjectToArray)(headers));
	    } else {
	      this.request.setRawRequestHeaders(null);
	    }
	    return response;
	  }
	}
	class WKRouteImpl {
	  constructor(session, requestId) {
	    this._session = session;
	    this._requestId = requestId;
	  }
	  async abort(errorCode) {
	    const errorType = errorReasons[errorCode];
	    (0, import_utils.assert)(errorType, "Unknown error code: " + errorCode);
	    await this._session.sendMayFail("Network.interceptRequestWithError", { requestId: this._requestId, errorType });
	  }
	  async fulfill(response) {
	    if (300 <= response.status && response.status < 400)
	      throw new Error("Cannot fulfill with redirect status: " + response.status);
	    let mimeType = response.isBase64 ? "application/octet-stream" : "text/plain";
	    const headers = (0, import_utils.headersArrayToObject)(
	      response.headers,
	      true
	      /* lowerCase */
	    );
	    const contentType = headers["content-type"];
	    if (contentType)
	      mimeType = contentType.split(";")[0].trim();
	    await this._session.sendMayFail("Network.interceptRequestWithResponse", {
	      requestId: this._requestId,
	      status: response.status,
	      statusText: network.statusText(response.status),
	      mimeType,
	      headers,
	      base64Encoded: response.isBase64,
	      content: response.body
	    });
	  }
	  async continue(overrides) {
	    await this._session.sendMayFail("Network.interceptWithRequest", {
	      requestId: this._requestId,
	      url: overrides.url,
	      method: overrides.method,
	      headers: overrides.headers ? (0, import_utils.headersArrayToObject)(
	        overrides.headers,
	        false
	        /* lowerCase */
	      ) : void 0,
	      postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : void 0
	    });
	  }
	}
	function wkMillisToRoundishMillis(value) {
	  if (value === -1e3)
	    return -1;
	  if (value <= 0) {
	    return -1;
	  }
	  return (value * 1e3 | 0) / 1e3;
	}
	return wkInterceptableRequest;
}

var wkProvisionalPage;
var hasRequiredWkProvisionalPage;

function requireWkProvisionalPage () {
	if (hasRequiredWkProvisionalPage) return wkProvisionalPage;
	hasRequiredWkProvisionalPage = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkProvisionalPage_exports = {};
	__export(wkProvisionalPage_exports, {
	  WKProvisionalPage: () => WKProvisionalPage
	});
	wkProvisionalPage = __toCommonJS(wkProvisionalPage_exports);
	var import_utils = requireUtils();
	var import_eventsHelper = requireEventsHelper();
	class WKProvisionalPage {
	  constructor(session, page) {
	    this._sessionListeners = [];
	    this._mainFrameId = null;
	    this._session = session;
	    this._wkPage = page;
	    this._coopNavigationRequest = page._page.mainFrame().pendingDocument()?.request;
	    const overrideFrameId = (handler) => {
	      return (payload) => {
	        if (payload.frameId)
	          payload.frameId = this._wkPage._page._frameManager.mainFrame()._id;
	        handler(payload);
	      };
	    };
	    const wkPage = this._wkPage;
	    this._sessionListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", overrideFrameId((e) => this._onRequestWillBeSent(e))),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.requestIntercepted", overrideFrameId((e) => wkPage._onRequestIntercepted(session, e))),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", overrideFrameId((e) => wkPage._onResponseReceived(session, e))),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", overrideFrameId((e) => this._onLoadingFinished(e))),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", overrideFrameId((e) => this._onLoadingFailed(e)))
	    ];
	    this.initializationPromise = this._wkPage._initializeSession(session, true, ({ frameTree }) => this._handleFrameTree(frameTree));
	  }
	  coopNavigationRequest() {
	    return this._coopNavigationRequest;
	  }
	  dispose() {
	    import_eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
	  }
	  commit() {
	    (0, import_utils.assert)(this._mainFrameId);
	    this._wkPage._onFrameAttached(this._mainFrameId, null);
	  }
	  _onRequestWillBeSent(event) {
	    if (this._coopNavigationRequest && this._coopNavigationRequest.url() === event.request.url) {
	      this._wkPage._adoptRequestFromNewProcess(this._coopNavigationRequest, this._session, event.requestId);
	      return;
	    }
	    this._wkPage._onRequestWillBeSent(this._session, event);
	  }
	  _onLoadingFinished(event) {
	    this._coopNavigationRequest = void 0;
	    this._wkPage._onLoadingFinished(event);
	  }
	  _onLoadingFailed(event) {
	    this._coopNavigationRequest = void 0;
	    this._wkPage._onLoadingFailed(this._session, event);
	  }
	  _handleFrameTree(frameTree) {
	    (0, import_utils.assert)(!frameTree.frame.parentId);
	    this._mainFrameId = frameTree.frame.id;
	  }
	}
	return wkProvisionalPage;
}

var wkWorkers;
var hasRequiredWkWorkers;

function requireWkWorkers () {
	if (hasRequiredWkWorkers) return wkWorkers;
	hasRequiredWkWorkers = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkWorkers_exports = {};
	__export(wkWorkers_exports, {
	  WKWorkers: () => WKWorkers
	});
	wkWorkers = __toCommonJS(wkWorkers_exports);
	var import_eventsHelper = requireEventsHelper();
	var import_page = requirePage$1();
	var import_wkConnection = requireWkConnection();
	var import_wkExecutionContext = requireWkExecutionContext();
	class WKWorkers {
	  constructor(page) {
	    this._sessionListeners = [];
	    this._workerSessions = /* @__PURE__ */ new Map();
	    this._page = page;
	  }
	  setSession(session) {
	    import_eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
	    this.clear();
	    this._sessionListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(session, "Worker.workerCreated", (event) => {
	        const worker = new import_page.Worker(this._page, event.url);
	        const workerSession = new import_wkConnection.WKSession(session.connection, event.workerId, (message) => {
	          session.send("Worker.sendMessageToWorker", {
	            workerId: event.workerId,
	            message: JSON.stringify(message)
	          }).catch((e) => {
	            workerSession.dispatchMessage({ id: message.id, error: { message: e.message } });
	          });
	        });
	        this._workerSessions.set(event.workerId, workerSession);
	        worker._createExecutionContext(new import_wkExecutionContext.WKExecutionContext(workerSession, void 0));
	        this._page._addWorker(event.workerId, worker);
	        workerSession.on("Console.messageAdded", (event2) => this._onConsoleMessage(worker, event2));
	        Promise.all([
	          workerSession.send("Runtime.enable"),
	          workerSession.send("Console.enable"),
	          session.send("Worker.initialized", { workerId: event.workerId })
	        ]).catch((e) => {
	          this._page._removeWorker(event.workerId);
	        });
	      }),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Worker.dispatchMessageFromWorker", (event) => {
	        const workerSession = this._workerSessions.get(event.workerId);
	        if (!workerSession)
	          return;
	        workerSession.dispatchMessage(JSON.parse(event.message));
	      }),
	      import_eventsHelper.eventsHelper.addEventListener(session, "Worker.workerTerminated", (event) => {
	        const workerSession = this._workerSessions.get(event.workerId);
	        if (!workerSession)
	          return;
	        workerSession.dispose();
	        this._workerSessions.delete(event.workerId);
	        this._page._removeWorker(event.workerId);
	      })
	    ];
	  }
	  clear() {
	    this._page._clearWorkers();
	    this._workerSessions.clear();
	  }
	  async initializeSession(session) {
	    await session.send("Worker.enable");
	  }
	  async _onConsoleMessage(worker, event) {
	    const { type, level, text, parameters, url, line: lineNumber, column: columnNumber } = event.message;
	    let derivedType = type || "";
	    if (type === "log")
	      derivedType = level;
	    else if (type === "timing")
	      derivedType = "timeEnd";
	    const handles = (parameters || []).map((p) => {
	      return (0, import_wkExecutionContext.createHandle)(worker._existingExecutionContext, p);
	    });
	    const location = {
	      url: url || "",
	      lineNumber: (lineNumber || 1) - 1,
	      columnNumber: (columnNumber || 1) - 1
	    };
	    this._page._addConsoleMessage(derivedType, handles, location, handles.length ? void 0 : text);
	  }
	}
	return wkWorkers;
}

var wkPage;
var hasRequiredWkPage;

function requireWkPage () {
	if (hasRequiredWkPage) return wkPage;
	hasRequiredWkPage = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkPage_exports = {};
	__export(wkPage_exports, {
	  WKPage: () => WKPage
	});
	wkPage = __toCommonJS(wkPage_exports);
	var import_path = __toESM(require$$1$1);
	var import_utils = requireUtils();
	var import_headers = requireHeaders();
	var import_crypto = requireCrypto();
	var import_eventsHelper = requireEventsHelper();
	var import_hostPlatform = requireHostPlatform();
	var import_stackTrace = requireStackTrace();
	var import_utilsBundle = requireUtilsBundle();
	var import_browserContext = requireBrowserContext$1();
	var dialog = __toESM(requireDialog$1());
	var dom = __toESM(requireDom());
	var import_errors = requireErrors$1();
	var import_helper = requireHelper();
	var network = __toESM(requireNetwork$1());
	var import_page = requirePage$1();
	var import_page2 = requirePage$1();
	var import_wkAccessibility = requireWkAccessibility();
	var import_wkConnection = requireWkConnection();
	var import_wkExecutionContext = requireWkExecutionContext();
	var import_wkInput = requireWkInput();
	var import_wkInterceptableRequest = requireWkInterceptableRequest();
	var import_wkProvisionalPage = requireWkProvisionalPage();
	var import_wkWorkers = requireWkWorkers();
	var import_debugLogger = requireDebugLogger();
	const UTILITY_WORLD_NAME = "__playwright_utility_world__";
	class WKPage {
	  constructor(browserContext, pageProxySession, opener) {
	    this._provisionalPage = null;
	    this._requestIdToRequest = /* @__PURE__ */ new Map();
	    this._requestIdToRequestWillBeSentEvent = /* @__PURE__ */ new Map();
	    this._sessionListeners = [];
	    this._firstNonInitialNavigationCommittedFulfill = () => {
	    };
	    this._firstNonInitialNavigationCommittedReject = (e) => {
	    };
	    this._lastConsoleMessage = null;
	    this._requestIdToResponseReceivedPayloadEvent = /* @__PURE__ */ new Map();
	    this._recordingVideoFile = null;
	    this._screencastGeneration = 0;
	    this._pageProxySession = pageProxySession;
	    this._opener = opener;
	    this.rawKeyboard = new import_wkInput.RawKeyboardImpl(pageProxySession);
	    this.rawMouse = new import_wkInput.RawMouseImpl(pageProxySession);
	    this.rawTouchscreen = new import_wkInput.RawTouchscreenImpl(pageProxySession);
	    this._contextIdToContext = /* @__PURE__ */ new Map();
	    this._page = new import_page2.Page(this, browserContext);
	    this.rawMouse.setPage(this._page);
	    this._workers = new import_wkWorkers.WKWorkers(this._page);
	    this._session = void 0;
	    this._browserContext = browserContext;
	    this._page.on(import_page2.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame, false));
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetCreated", this._onTargetCreated.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetDestroyed", this._onTargetDestroyed.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.dispatchMessageFromTarget", this._onDispatchMessageFromTarget.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.didCommitProvisionalTarget", this._onDidCommitProvisionalTarget.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Screencast.screencastFrame", this._onScreencastFrame.bind(this))
	    ];
	    this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
	      this._firstNonInitialNavigationCommittedFulfill = f;
	      this._firstNonInitialNavigationCommittedReject = r;
	    });
	    if (opener && !browserContext._options.noDefaultViewport && opener._nextWindowOpenPopupFeatures) {
	      const viewportSize = import_helper.helper.getViewportSizeFromWindowFeatures(opener._nextWindowOpenPopupFeatures);
	      opener._nextWindowOpenPopupFeatures = void 0;
	      if (viewportSize)
	        this._page._emulatedSize = { viewport: viewportSize, screen: viewportSize };
	    }
	  }
	  async _initializePageProxySession() {
	    if (this._page._browserContext.isSettingStorageState())
	      return;
	    const promises = [
	      this._pageProxySession.send("Dialog.enable"),
	      this._pageProxySession.send("Emulation.setActiveAndFocused", { active: true })
	    ];
	    const contextOptions = this._browserContext._options;
	    if (contextOptions.javaScriptEnabled === false)
	      promises.push(this._pageProxySession.send("Emulation.setJavaScriptEnabled", { enabled: false }));
	    promises.push(this._updateViewport());
	    promises.push(this.updateHttpCredentials());
	    if (this._browserContext._permissions.size) {
	      for (const [key, value] of this._browserContext._permissions)
	        promises.push(this._grantPermissions(key, value));
	    }
	    if (this._browserContext._options.recordVideo) {
	      const outputFile = import_path.default.join(this._browserContext._options.recordVideo.dir, (0, import_crypto.createGuid)() + ".webm");
	      promises.push(this._browserContext._ensureVideosPath().then(() => {
	        return this._startVideo({
	          // validateBrowserContextOptions ensures correct video size.
	          ...this._browserContext._options.recordVideo.size,
	          outputFile
	        });
	      }));
	    }
	    await Promise.all(promises);
	  }
	  _setSession(session) {
	    import_eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
	    this._session = session;
	    this.rawKeyboard.setSession(session);
	    this.rawMouse.setSession(session);
	    this._addSessionListeners();
	    this._workers.setSession(session);
	  }
	  // This method is called for provisional targets as well. The session passed as the parameter
	  // may be different from the current session and may be destroyed without becoming current.
	  async _initializeSession(session, provisional, resourceTreeHandler) {
	    await this._initializeSessionMayThrow(session, resourceTreeHandler).catch((e) => {
	      if (provisional && session.isDisposed())
	        return;
	      if (this._session === session)
	        throw e;
	    });
	  }
	  async _initializeSessionMayThrow(session, resourceTreeHandler) {
	    const [, frameTree] = await Promise.all([
	      // Page agent must be enabled before Runtime.
	      session.send("Page.enable"),
	      session.send("Page.getResourceTree")
	    ]);
	    resourceTreeHandler(frameTree);
	    const promises = [
	      // Resource tree should be received before first execution context.
	      session.send("Runtime.enable"),
	      session.send("Runtime.addBinding", { name: import_page.PageBinding.kPlaywrightBinding }),
	      session.send("Page.createUserWorld", { name: UTILITY_WORLD_NAME }).catch((_) => {
	      }),
	      // Worlds are per-process
	      session.send("Console.enable"),
	      session.send("Network.enable"),
	      this._workers.initializeSession(session)
	    ];
	    if (this._page.needsRequestInterception()) {
	      promises.push(session.send("Network.setInterceptionEnabled", { enabled: true }));
	      promises.push(session.send("Network.setResourceCachingDisabled", { disabled: true }));
	      promises.push(session.send("Network.addInterception", { url: ".*", stage: "request", isRegex: true }));
	    }
	    if (this._page._browserContext.isSettingStorageState()) {
	      await Promise.all(promises);
	      return;
	    }
	    const contextOptions = this._browserContext._options;
	    if (contextOptions.userAgent)
	      promises.push(this.updateUserAgent());
	    const emulatedMedia = this._page.emulatedMedia();
	    if (emulatedMedia.media || emulatedMedia.colorScheme || emulatedMedia.reducedMotion || emulatedMedia.forcedColors || emulatedMedia.contrast)
	      promises.push(WKPage._setEmulateMedia(session, emulatedMedia.media, emulatedMedia.colorScheme, emulatedMedia.reducedMotion, emulatedMedia.forcedColors, emulatedMedia.contrast));
	    const bootstrapScript = this._calculateBootstrapScript();
	    if (bootstrapScript.length)
	      promises.push(session.send("Page.setBootstrapScript", { source: bootstrapScript }));
	    this._page.frames().map((frame) => frame.evaluateExpression(bootstrapScript).catch((e) => {
	    }));
	    if (contextOptions.bypassCSP)
	      promises.push(session.send("Page.setBypassCSP", { enabled: true }));
	    const emulatedSize = this._page.emulatedSize();
	    if (emulatedSize) {
	      promises.push(session.send("Page.setScreenSizeOverride", {
	        width: emulatedSize.screen.width,
	        height: emulatedSize.screen.height
	      }));
	    }
	    promises.push(this.updateEmulateMedia());
	    promises.push(session.send("Network.setExtraHTTPHeaders", { headers: (0, import_headers.headersArrayToObject)(
	      this._calculateExtraHTTPHeaders(),
	      false
	      /* lowerCase */
	    ) }));
	    if (contextOptions.offline)
	      promises.push(session.send("Network.setEmulateOfflineState", { offline: true }));
	    promises.push(session.send("Page.setTouchEmulationEnabled", { enabled: !!contextOptions.hasTouch }));
	    if (contextOptions.timezoneId) {
	      promises.push(session.send("Page.setTimeZone", { timeZone: contextOptions.timezoneId }).catch((e) => {
	        throw new Error(`Invalid timezone ID: ${contextOptions.timezoneId}`);
	      }));
	    }
	    if (this._page.fileChooserIntercepted())
	      promises.push(session.send("Page.setInterceptFileChooserDialog", { enabled: true }));
	    promises.push(session.send("Page.overrideSetting", { setting: "DeviceOrientationEventEnabled", value: contextOptions.isMobile }));
	    promises.push(session.send("Page.overrideSetting", { setting: "FullScreenEnabled", value: !contextOptions.isMobile }));
	    promises.push(session.send("Page.overrideSetting", { setting: "NotificationsEnabled", value: !contextOptions.isMobile }));
	    promises.push(session.send("Page.overrideSetting", { setting: "PointerLockEnabled", value: !contextOptions.isMobile }));
	    promises.push(session.send("Page.overrideSetting", { setting: "InputTypeMonthEnabled", value: contextOptions.isMobile }));
	    promises.push(session.send("Page.overrideSetting", { setting: "InputTypeWeekEnabled", value: contextOptions.isMobile }));
	    promises.push(session.send("Page.overrideSetting", { setting: "FixedBackgroundsPaintRelativeToDocument", value: contextOptions.isMobile }));
	    await Promise.all(promises);
	  }
	  _onDidCommitProvisionalTarget(event) {
	    const { oldTargetId, newTargetId } = event;
	    (0, import_utils.assert)(this._provisionalPage);
	    (0, import_utils.assert)(this._provisionalPage._session.sessionId === newTargetId, "Unknown new target: " + newTargetId);
	    (0, import_utils.assert)(this._session.sessionId === oldTargetId, "Unknown old target: " + oldTargetId);
	    const newSession = this._provisionalPage._session;
	    this._provisionalPage.commit();
	    this._provisionalPage.dispose();
	    this._provisionalPage = null;
	    this._setSession(newSession);
	  }
	  _onTargetDestroyed(event) {
	    const { targetId, crashed } = event;
	    if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId) {
	      this._maybeCancelCoopNavigationRequest(this._provisionalPage);
	      this._provisionalPage._session.dispose();
	      this._provisionalPage.dispose();
	      this._provisionalPage = null;
	    } else if (this._session.sessionId === targetId) {
	      this._session.dispose();
	      import_eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
	      if (crashed) {
	        this._session.markAsCrashed();
	        this._page._didCrash();
	      }
	    }
	  }
	  didClose() {
	    this._pageProxySession.dispose();
	    import_eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	    if (this._session)
	      this._session.dispose();
	    if (this._provisionalPage) {
	      this._provisionalPage._session.dispose();
	      this._provisionalPage.dispose();
	      this._provisionalPage = null;
	    }
	    this._firstNonInitialNavigationCommittedReject(new import_errors.TargetClosedError());
	    this._page._didClose();
	  }
	  dispatchMessageToSession(message) {
	    this._pageProxySession.dispatchMessage(message);
	  }
	  handleProvisionalLoadFailed(event) {
	    if (!this._page.initializedOrUndefined()) {
	      this._firstNonInitialNavigationCommittedReject(new Error("Initial load failed"));
	      return;
	    }
	    if (!this._provisionalPage)
	      return;
	    let errorText = event.error;
	    if (errorText.includes("cancelled"))
	      errorText += "; maybe frame was detached?";
	    this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, errorText, event.loaderId);
	  }
	  handleWindowOpen(event) {
	    this._nextWindowOpenPopupFeatures = event.windowFeatures;
	  }
	  async _onTargetCreated(event) {
	    const { targetInfo } = event;
	    const session = new import_wkConnection.WKSession(this._pageProxySession.connection, targetInfo.targetId, (message) => {
	      this._pageProxySession.send("Target.sendMessageToTarget", {
	        message: JSON.stringify(message),
	        targetId: targetInfo.targetId
	      }).catch((e) => {
	        session.dispatchMessage({ id: message.id, error: { message: e.message } });
	      });
	    });
	    (0, import_utils.assert)(targetInfo.type === "page", "Only page targets are expected in WebKit, received: " + targetInfo.type);
	    if (!targetInfo.isProvisional) {
	      (0, import_utils.assert)(!this._page.initializedOrUndefined());
	      let pageOrError;
	      try {
	        this._setSession(session);
	        await Promise.all([
	          this._initializePageProxySession(),
	          this._initializeSession(session, false, ({ frameTree }) => this._handleFrameTree(frameTree))
	        ]);
	        pageOrError = this._page;
	      } catch (e) {
	        pageOrError = e;
	      }
	      if (targetInfo.isPaused)
	        this._pageProxySession.sendMayFail("Target.resume", { targetId: targetInfo.targetId });
	      if (pageOrError instanceof import_page2.Page && this._page.mainFrame().url() === "") {
	        try {
	          await this._firstNonInitialNavigationCommittedPromise;
	        } catch (e) {
	          pageOrError = e;
	        }
	      } else {
	        this._firstNonInitialNavigationCommittedPromise.catch(() => {
	        });
	      }
	      this._page.reportAsNew(this._opener?._page, pageOrError instanceof import_page2.Page ? void 0 : pageOrError);
	    } else {
	      (0, import_utils.assert)(targetInfo.isProvisional);
	      (0, import_utils.assert)(!this._provisionalPage);
	      this._provisionalPage = new import_wkProvisionalPage.WKProvisionalPage(session, this);
	      if (targetInfo.isPaused) {
	        this._provisionalPage.initializationPromise.then(() => {
	          this._pageProxySession.sendMayFail("Target.resume", { targetId: targetInfo.targetId });
	        });
	      }
	    }
	  }
	  _onDispatchMessageFromTarget(event) {
	    const { targetId, message } = event;
	    if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId)
	      this._provisionalPage._session.dispatchMessage(JSON.parse(message));
	    else if (this._session.sessionId === targetId)
	      this._session.dispatchMessage(JSON.parse(message));
	    else
	      throw new Error("Unknown target: " + targetId);
	  }
	  _addSessionListeners() {
	    this._sessionListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.willCheckNavigationPolicy", (event) => this._onWillCheckNavigationPolicy(event.frameId)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.didCheckNavigationPolicy", (event) => this._onDidCheckNavigationPolicy(event.frameId, event.cancel)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameScheduledNavigation", (event) => this._onFrameScheduledNavigation(event.frameId, event.delay, event.targetIsCurrentFrame)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.loadEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "load")),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.domContentEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded")),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.bindingCalled", (event) => this._onBindingCalled(event.contextId, event.argument)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageAdded", (event) => this._onConsoleMessage(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageRepeatCountUpdated", (event) => this._onConsoleRepeatCountUpdated(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Dialog.javascriptDialogOpening", (event) => this._onDialog(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestWillBeSent", (e) => this._onRequestWillBeSent(this._session, e)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestIntercepted", (e) => this._onRequestIntercepted(this._session, e)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.responseReceived", (e) => this._onResponseReceived(this._session, e)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFinished", (e) => this._onLoadingFinished(e)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFailed", (e) => this._onLoadingFailed(this._session, e)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)),
	      import_eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))
	    ];
	  }
	  async _updateState(method, params) {
	    await this._forAllSessions((session) => session.send(method, params).then());
	  }
	  async _forAllSessions(callback) {
	    const sessions = [
	      this._session
	    ];
	    if (this._provisionalPage)
	      sessions.push(this._provisionalPage._session);
	    await Promise.all(sessions.map((session) => callback(session).catch((e) => {
	    })));
	  }
	  _onWillCheckNavigationPolicy(frameId) {
	    if (this._provisionalPage)
	      return;
	    this._page._frameManager.frameRequestedNavigation(frameId);
	  }
	  _onDidCheckNavigationPolicy(frameId, cancel) {
	    if (!cancel)
	      return;
	    if (this._provisionalPage)
	      return;
	    this._page._frameManager.frameAbortedNavigation(frameId, "Navigation canceled by policy check");
	  }
	  _onFrameScheduledNavigation(frameId, delay, targetIsCurrentFrame) {
	    if (targetIsCurrentFrame)
	      this._page._frameManager.frameRequestedNavigation(frameId);
	  }
	  _handleFrameTree(frameTree) {
	    this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
	    this._onFrameNavigated(frameTree.frame, true);
	    this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "domcontentloaded");
	    this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "load");
	    if (!frameTree.childFrames)
	      return;
	    for (const child of frameTree.childFrames)
	      this._handleFrameTree(child);
	  }
	  _onFrameAttached(frameId, parentFrameId) {
	    return this._page._frameManager.frameAttached(frameId, parentFrameId);
	  }
	  _onFrameNavigated(framePayload, initial) {
	    const frame = this._page._frameManager.frame(framePayload.id);
	    (0, import_utils.assert)(frame);
	    this._removeContextsForFrame(frame, true);
	    if (!framePayload.parentId)
	      this._workers.clear();
	    this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url, framePayload.name || "", framePayload.loaderId, initial);
	    if (!initial)
	      this._firstNonInitialNavigationCommittedFulfill();
	  }
	  _onFrameNavigatedWithinDocument(frameId, url) {
	    this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
	  }
	  _onFrameDetached(frameId) {
	    this._page._frameManager.frameDetached(frameId);
	  }
	  _removeContextsForFrame(frame, notifyFrame) {
	    for (const [contextId, context] of this._contextIdToContext) {
	      if (context.frame === frame) {
	        this._contextIdToContext.delete(contextId);
	        if (notifyFrame)
	          frame._contextDestroyed(context);
	      }
	    }
	  }
	  _onExecutionContextCreated(contextPayload) {
	    if (this._contextIdToContext.has(contextPayload.id))
	      return;
	    const frame = this._page._frameManager.frame(contextPayload.frameId);
	    if (!frame)
	      return;
	    const delegate = new import_wkExecutionContext.WKExecutionContext(this._session, contextPayload.id);
	    let worldName = null;
	    if (contextPayload.type === "normal")
	      worldName = "main";
	    else if (contextPayload.type === "user" && contextPayload.name === UTILITY_WORLD_NAME)
	      worldName = "utility";
	    const context = new dom.FrameExecutionContext(delegate, frame, worldName);
	    if (worldName)
	      frame._contextCreated(worldName, context);
	    this._contextIdToContext.set(contextPayload.id, context);
	  }
	  async _onBindingCalled(contextId, argument) {
	    const pageOrError = await this._page.waitForInitializedOrError();
	    if (!(pageOrError instanceof Error)) {
	      const context = this._contextIdToContext.get(contextId);
	      if (context)
	        await this._page._onBindingCalled(argument, context);
	    }
	  }
	  async navigateFrame(frame, url, referrer) {
	    if (this._pageProxySession.isDisposed())
	      throw new import_errors.TargetClosedError();
	    const pageProxyId = this._pageProxySession.sessionId;
	    const result = await this._pageProxySession.connection.browserSession.send("Playwright.navigate", { url, pageProxyId, frameId: frame._id, referrer });
	    return { newDocumentId: result.loaderId };
	  }
	  _onConsoleMessage(event) {
	    const { type, level, text, parameters, url, line: lineNumber, column: columnNumber, source } = event.message;
	    if (level === "error" && source === "javascript") {
	      const { name, message } = (0, import_stackTrace.splitErrorMessage)(text);
	      let stack;
	      if (event.message.stackTrace) {
	        stack = text + "\n" + event.message.stackTrace.callFrames.map((callFrame) => {
	          return `    at ${callFrame.functionName || "unknown"} (${callFrame.url}:${callFrame.lineNumber}:${callFrame.columnNumber})`;
	        }).join("\n");
	      } else {
	        stack = "";
	      }
	      this._lastConsoleMessage = null;
	      const error = new Error(message);
	      error.stack = stack;
	      error.name = name;
	      this._page.emitOnContextOnceInitialized(import_browserContext.BrowserContext.Events.PageError, error, this._page);
	      return;
	    }
	    let derivedType = type || "";
	    if (type === "log")
	      derivedType = level;
	    else if (type === "timing")
	      derivedType = "timeEnd";
	    const handles = [];
	    for (const p of parameters || []) {
	      let context;
	      if (p.objectId) {
	        const objectId = JSON.parse(p.objectId);
	        context = this._contextIdToContext.get(objectId.injectedScriptId);
	      } else {
	        context = [...this._contextIdToContext.values()].find((c) => c.frame === this._page.mainFrame());
	      }
	      if (!context)
	        return;
	      handles.push((0, import_wkExecutionContext.createHandle)(context, p));
	    }
	    this._lastConsoleMessage = {
	      derivedType,
	      text,
	      handles,
	      count: 0,
	      location: {
	        url: url || "",
	        lineNumber: (lineNumber || 1) - 1,
	        columnNumber: (columnNumber || 1) - 1
	      }
	    };
	    this._onConsoleRepeatCountUpdated({ count: 1 });
	  }
	  _onConsoleRepeatCountUpdated(event) {
	    if (this._lastConsoleMessage) {
	      const {
	        derivedType,
	        text,
	        handles,
	        count,
	        location
	      } = this._lastConsoleMessage;
	      for (let i = count; i < event.count; ++i)
	        this._page._addConsoleMessage(derivedType, handles, location, handles.length ? void 0 : text);
	      this._lastConsoleMessage.count = event.count;
	    }
	  }
	  _onDialog(event) {
	    this._page.emitOnContext(import_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(
	      this._page,
	      event.type,
	      event.message,
	      async (accept, promptText) => {
	        if (event.type === "beforeunload" && !accept)
	          this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, "navigation cancelled by beforeunload dialog");
	        await this._pageProxySession.send("Dialog.handleJavaScriptDialog", { accept, promptText });
	      },
	      event.defaultPrompt
	    ));
	  }
	  async _onFileChooserOpened(event) {
	    let handle;
	    try {
	      const context = await this._page._frameManager.frame(event.frameId)._mainContext();
	      handle = (0, import_wkExecutionContext.createHandle)(context, event.element).asElement();
	    } catch (e) {
	      return;
	    }
	    await this._page._onFileChooserOpened(handle);
	  }
	  static async _setEmulateMedia(session, mediaType, colorScheme, reducedMotion, forcedColors, contrast) {
	    const promises = [];
	    promises.push(session.send("Page.setEmulatedMedia", { media: mediaType === "no-override" ? "" : mediaType }));
	    let appearance = void 0;
	    switch (colorScheme) {
	      case "light":
	        appearance = "Light";
	        break;
	      case "dark":
	        appearance = "Dark";
	        break;
	      case "no-override":
	        appearance = void 0;
	        break;
	    }
	    promises.push(session.send("Page.overrideUserPreference", { name: "PrefersColorScheme", value: appearance }));
	    let reducedMotionWk = void 0;
	    switch (reducedMotion) {
	      case "reduce":
	        reducedMotionWk = "Reduce";
	        break;
	      case "no-preference":
	        reducedMotionWk = "NoPreference";
	        break;
	      case "no-override":
	        reducedMotionWk = void 0;
	        break;
	    }
	    promises.push(session.send("Page.overrideUserPreference", { name: "PrefersReducedMotion", value: reducedMotionWk }));
	    let forcedColorsWk = void 0;
	    switch (forcedColors) {
	      case "active":
	        forcedColorsWk = "Active";
	        break;
	      case "none":
	        forcedColorsWk = "None";
	        break;
	      case "no-override":
	        forcedColorsWk = void 0;
	        break;
	    }
	    promises.push(session.send("Page.setForcedColors", { forcedColors: forcedColorsWk }));
	    let contrastWk = void 0;
	    switch (contrast) {
	      case "more":
	        contrastWk = "More";
	        break;
	      case "no-preference":
	        contrastWk = "NoPreference";
	        break;
	      case "no-override":
	        contrastWk = void 0;
	        break;
	    }
	    promises.push(session.send("Page.overrideUserPreference", { name: "PrefersContrast", value: contrastWk }));
	    await Promise.all(promises);
	  }
	  async updateExtraHTTPHeaders() {
	    await this._updateState("Network.setExtraHTTPHeaders", { headers: (0, import_headers.headersArrayToObject)(
	      this._calculateExtraHTTPHeaders(),
	      false
	      /* lowerCase */
	    ) });
	  }
	  _calculateExtraHTTPHeaders() {
	    const locale = this._browserContext._options.locale;
	    const headers = network.mergeHeaders([
	      this._browserContext._options.extraHTTPHeaders,
	      this._page.extraHTTPHeaders(),
	      locale ? network.singleHeader("Accept-Language", locale) : void 0
	    ]);
	    return headers;
	  }
	  async updateEmulateMedia() {
	    const emulatedMedia = this._page.emulatedMedia();
	    const colorScheme = emulatedMedia.colorScheme;
	    const reducedMotion = emulatedMedia.reducedMotion;
	    const forcedColors = emulatedMedia.forcedColors;
	    const contrast = emulatedMedia.contrast;
	    await this._forAllSessions((session) => WKPage._setEmulateMedia(session, emulatedMedia.media, colorScheme, reducedMotion, forcedColors, contrast));
	  }
	  async updateEmulatedViewportSize() {
	    this._browserContext._validateEmulatedViewport(this._page.viewportSize());
	    await this._updateViewport();
	  }
	  async updateUserAgent() {
	    const contextOptions = this._browserContext._options;
	    this._updateState("Page.overrideUserAgent", { value: contextOptions.userAgent });
	  }
	  async bringToFront() {
	    this._pageProxySession.send("Target.activate", {
	      targetId: this._session.sessionId
	    });
	  }
	  async _updateViewport() {
	    const options = this._browserContext._options;
	    const deviceSize = this._page.emulatedSize();
	    if (deviceSize === null)
	      return;
	    const viewportSize = deviceSize.viewport;
	    const screenSize = deviceSize.screen;
	    const promises = [
	      this._pageProxySession.send("Emulation.setDeviceMetricsOverride", {
	        width: viewportSize.width,
	        height: viewportSize.height,
	        fixedLayout: !!options.isMobile,
	        deviceScaleFactor: options.deviceScaleFactor || 1
	      }),
	      this._session.send("Page.setScreenSizeOverride", {
	        width: screenSize.width,
	        height: screenSize.height
	      })
	    ];
	    if (options.isMobile) {
	      const angle = viewportSize.width > viewportSize.height ? 90 : 0;
	      promises.push(this._pageProxySession.send("Emulation.setOrientationOverride", { angle }));
	    }
	    await Promise.all(promises);
	  }
	  async updateRequestInterception() {
	    const enabled = this._page.needsRequestInterception();
	    await Promise.all([
	      this._updateState("Network.setInterceptionEnabled", { enabled }),
	      this._updateState("Network.setResourceCachingDisabled", { disabled: enabled }),
	      this._updateState("Network.addInterception", { url: ".*", stage: "request", isRegex: true })
	    ]);
	  }
	  async updateOffline() {
	    await this._updateState("Network.setEmulateOfflineState", { offline: !!this._browserContext._options.offline });
	  }
	  async updateHttpCredentials() {
	    const credentials = this._browserContext._options.httpCredentials || { username: "", password: "", origin: "" };
	    await this._pageProxySession.send("Emulation.setAuthCredentials", { username: credentials.username, password: credentials.password, origin: credentials.origin });
	  }
	  async updateFileChooserInterception() {
	    const enabled = this._page.fileChooserIntercepted();
	    await this._session.send("Page.setInterceptFileChooserDialog", { enabled }).catch(() => {
	    });
	  }
	  async reload() {
	    await this._session.send("Page.reload");
	  }
	  goBack() {
	    return this._session.send("Page.goBack").then(() => true).catch((error) => {
	      if (error instanceof Error && error.message.includes(`Protocol error (Page.goBack): Failed to go`))
	        return false;
	      throw error;
	    });
	  }
	  goForward() {
	    return this._session.send("Page.goForward").then(() => true).catch((error) => {
	      if (error instanceof Error && error.message.includes(`Protocol error (Page.goForward): Failed to go`))
	        return false;
	      throw error;
	    });
	  }
	  async requestGC() {
	    await this._session.send("Heap.gc");
	  }
	  async addInitScript(initScript) {
	    await this._updateBootstrapScript();
	  }
	  async removeNonInternalInitScripts() {
	    await this._updateBootstrapScript();
	  }
	  _calculateBootstrapScript() {
	    const scripts = [];
	    if (!this._page.context()._options.isMobile) {
	      scripts.push("delete window.orientation");
	      scripts.push("delete window.ondevicemotion");
	      scripts.push("delete window.ondeviceorientation");
	    }
	    scripts.push('if (!window.safari) window.safari = { pushNotification: { toString() { return "[object SafariRemoteNotification]"; } } };');
	    scripts.push("if (!window.GestureEvent) window.GestureEvent = function GestureEvent() {};");
	    scripts.push(...this._page.allInitScripts().map((script) => script.source));
	    return scripts.join(";\n");
	  }
	  async _updateBootstrapScript() {
	    await this._updateState("Page.setBootstrapScript", { source: this._calculateBootstrapScript() });
	  }
	  async closePage(runBeforeUnload) {
	    await this._stopVideo();
	    await this._pageProxySession.sendMayFail("Target.close", {
	      targetId: this._session.sessionId,
	      runBeforeUnload
	    });
	  }
	  async setBackgroundColor(color) {
	    await this._session.send("Page.setDefaultBackgroundColorOverride", { color });
	  }
	  _toolbarHeight() {
	    if (this._page._browserContext._browser?.options.headful)
	      return import_hostPlatform.hostPlatform === "mac10.15" ? 55 : 59;
	    return 0;
	  }
	  async _startVideo(options) {
	    (0, import_utils.assert)(!this._recordingVideoFile);
	    const { screencastId } = await this._pageProxySession.send("Screencast.startVideo", {
	      file: options.outputFile,
	      width: options.width,
	      height: options.height,
	      toolbarHeight: this._toolbarHeight()
	    });
	    this._recordingVideoFile = options.outputFile;
	    this._browserContext._browser._videoStarted(this._browserContext, screencastId, options.outputFile, this._page.waitForInitializedOrError());
	  }
	  async _stopVideo() {
	    if (!this._recordingVideoFile)
	      return;
	    await this._pageProxySession.sendMayFail("Screencast.stopVideo");
	    this._recordingVideoFile = null;
	  }
	  validateScreenshotDimension(side, omitDeviceScaleFactor) {
	    if (process.platform === "darwin")
	      return;
	    if (!omitDeviceScaleFactor && this._page._browserContext._options.deviceScaleFactor)
	      side = Math.ceil(side * this._page._browserContext._options.deviceScaleFactor);
	    if (side > 32767)
	      throw new Error("Cannot take screenshot larger than 32767 pixels on any dimension");
	  }
	  async takeScreenshot(progress, format, documentRect, viewportRect, quality, fitsViewport, scale) {
	    const rect = documentRect || viewportRect;
	    const omitDeviceScaleFactor = scale === "css";
	    this.validateScreenshotDimension(rect.width, omitDeviceScaleFactor);
	    this.validateScreenshotDimension(rect.height, omitDeviceScaleFactor);
	    const result = await this._session.send("Page.snapshotRect", { ...rect, coordinateSystem: documentRect ? "Page" : "Viewport", omitDeviceScaleFactor });
	    const prefix = "data:image/png;base64,";
	    let buffer = Buffer.from(result.dataURL.substr(prefix.length), "base64");
	    if (format === "jpeg")
	      buffer = import_utilsBundle.jpegjs.encode(import_utilsBundle.PNG.sync.read(buffer), quality).data;
	    return buffer;
	  }
	  async getContentFrame(handle) {
	    const nodeInfo = await this._session.send("DOM.describeNode", {
	      objectId: handle._objectId
	    });
	    if (!nodeInfo.contentFrameId)
	      return null;
	    return this._page._frameManager.frame(nodeInfo.contentFrameId);
	  }
	  async getOwnerFrame(handle) {
	    if (!handle._objectId)
	      return null;
	    const nodeInfo = await this._session.send("DOM.describeNode", {
	      objectId: handle._objectId
	    });
	    return nodeInfo.ownerFrameId || null;
	  }
	  async getBoundingBox(handle) {
	    const quads = await this.getContentQuads(handle);
	    if (!quads || !quads.length)
	      return null;
	    let minX = Infinity;
	    let maxX = -Infinity;
	    let minY = Infinity;
	    let maxY = -Infinity;
	    for (const quad of quads) {
	      for (const point of quad) {
	        minX = Math.min(minX, point.x);
	        maxX = Math.max(maxX, point.x);
	        minY = Math.min(minY, point.y);
	        maxY = Math.max(maxY, point.y);
	      }
	    }
	    return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };
	  }
	  async scrollRectIntoViewIfNeeded(handle, rect) {
	    return await this._session.send("DOM.scrollIntoViewIfNeeded", {
	      objectId: handle._objectId,
	      rect
	    }).then(() => "done").catch((e) => {
	      if (e instanceof Error && e.message.includes("Node does not have a layout object"))
	        return "error:notvisible";
	      if (e instanceof Error && e.message.includes("Node is detached from document"))
	        return "error:notconnected";
	      throw e;
	    });
	  }
	  async setScreencastOptions(options) {
	    if (options) {
	      const so = { ...options, toolbarHeight: this._toolbarHeight() };
	      const { generation } = await this._pageProxySession.send("Screencast.startScreencast", so);
	      this._screencastGeneration = generation;
	    } else {
	      await this._pageProxySession.send("Screencast.stopScreencast");
	    }
	  }
	  _onScreencastFrame(event) {
	    const generation = this._screencastGeneration;
	    this._page.throttleScreencastFrameAck(() => {
	      this._pageProxySession.send("Screencast.screencastFrameAck", { generation }).catch((e) => import_debugLogger.debugLogger.log("error", e));
	    });
	    const buffer = Buffer.from(event.data, "base64");
	    this._page.emit(import_page2.Page.Events.ScreencastFrame, {
	      buffer,
	      width: event.deviceWidth,
	      height: event.deviceHeight
	    });
	  }
	  rafCountForStablePosition() {
	    return process.platform === "win32" ? 5 : 1;
	  }
	  async getContentQuads(handle) {
	    const result = await this._session.sendMayFail("DOM.getContentQuads", {
	      objectId: handle._objectId
	    });
	    if (!result)
	      return null;
	    return result.quads.map((quad) => [
	      { x: quad[0], y: quad[1] },
	      { x: quad[2], y: quad[3] },
	      { x: quad[4], y: quad[5] },
	      { x: quad[6], y: quad[7] }
	    ]);
	  }
	  async setInputFilePaths(handle, paths) {
	    const pageProxyId = this._pageProxySession.sessionId;
	    const objectId = handle._objectId;
	    await Promise.all([
	      this._pageProxySession.connection.browserSession.send("Playwright.grantFileReadAccess", { pageProxyId, paths }),
	      this._session.send("DOM.setInputFiles", { objectId, paths })
	    ]);
	  }
	  async adoptElementHandle(handle, to) {
	    const result = await this._session.sendMayFail("DOM.resolveNode", {
	      objectId: handle._objectId,
	      executionContextId: to.delegate._contextId
	    });
	    if (!result || result.object.subtype === "null")
	      throw new Error(dom.kUnableToAdoptErrorMessage);
	    return (0, import_wkExecutionContext.createHandle)(to, result.object);
	  }
	  async getAccessibilityTree(needle) {
	    return (0, import_wkAccessibility.getAccessibilityTree)(this._session, needle);
	  }
	  async inputActionEpilogue() {
	  }
	  async resetForReuse() {
	  }
	  async getFrameElement(frame) {
	    const parent = frame.parentFrame();
	    if (!parent)
	      throw new Error("Frame has been detached.");
	    const context = await parent._mainContext();
	    const result = await this._session.send("DOM.resolveNode", {
	      frameId: frame._id,
	      executionContextId: context.delegate._contextId
	    });
	    if (!result || result.object.subtype === "null")
	      throw new Error("Frame has been detached.");
	    return (0, import_wkExecutionContext.createHandle)(context, result.object);
	  }
	  _maybeCancelCoopNavigationRequest(provisionalPage) {
	    const navigationRequest = provisionalPage.coopNavigationRequest();
	    for (const [requestId, request] of this._requestIdToRequest) {
	      if (request.request === navigationRequest) {
	        this._onLoadingFailed(provisionalPage._session, {
	          requestId,
	          errorText: "Provisiolal navigation canceled.",
	          timestamp: request._timestamp,
	          canceled: true
	        });
	        return;
	      }
	    }
	  }
	  _adoptRequestFromNewProcess(navigationRequest, newSession, newRequestId) {
	    for (const [requestId, request] of this._requestIdToRequest) {
	      if (request.request === navigationRequest) {
	        this._requestIdToRequest.delete(requestId);
	        request.adoptRequestFromNewProcess(newSession, newRequestId);
	        this._requestIdToRequest.set(newRequestId, request);
	        return;
	      }
	    }
	  }
	  _onRequestWillBeSent(session, event) {
	    if (event.request.url.startsWith("data:"))
	      return;
	    if (event.request.url.startsWith("about:"))
	      return;
	    if (this._page.needsRequestInterception() && !event.redirectResponse)
	      this._requestIdToRequestWillBeSentEvent.set(event.requestId, event);
	    else
	      this._onRequest(session, event, false);
	  }
	  _onRequest(session, event, intercepted) {
	    let redirectedFrom = null;
	    if (event.redirectResponse) {
	      const request2 = this._requestIdToRequest.get(event.requestId);
	      if (request2) {
	        this._handleRequestRedirect(request2, event.requestId, event.redirectResponse, event.timestamp);
	        redirectedFrom = request2;
	      }
	    }
	    const frame = redirectedFrom ? redirectedFrom.request.frame() : this._page._frameManager.frame(event.frameId);
	    if (!frame)
	      return;
	    const isNavigationRequest = event.type === "Document";
	    const documentId = isNavigationRequest ? event.loaderId : void 0;
	    const request = new import_wkInterceptableRequest.WKInterceptableRequest(session, frame, event, redirectedFrom, documentId);
	    let route;
	    if (intercepted) {
	      route = new import_wkInterceptableRequest.WKRouteImpl(session, event.requestId);
	      request.request.setRawRequestHeaders(null);
	    }
	    this._requestIdToRequest.set(event.requestId, request);
	    this._page._frameManager.requestStarted(request.request, route);
	  }
	  _handleRequestRedirect(request, requestId, responsePayload, timestamp) {
	    const response = request.createResponse(responsePayload);
	    response._securityDetailsFinished();
	    response._serverAddrFinished();
	    response.setResponseHeadersSize(null);
	    response.setEncodedBodySize(null);
	    response._requestFinished(responsePayload.timing ? import_helper.helper.secondsToRoundishMillis(timestamp - request._timestamp) : -1);
	    this._requestIdToRequest.delete(requestId);
	    this._page._frameManager.requestReceivedResponse(response);
	    this._page._frameManager.reportRequestFinished(request.request, response);
	  }
	  _onRequestIntercepted(session, event) {
	    const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
	    if (!requestWillBeSentEvent) {
	      session.sendMayFail("Network.interceptWithRequest", { requestId: event.requestId });
	      return;
	    }
	    this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
	    this._onRequest(session, requestWillBeSentEvent, true);
	  }
	  _onResponseReceived(session, event) {
	    const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
	    if (requestWillBeSentEvent) {
	      this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
	      this._onRequest(session, requestWillBeSentEvent, false);
	    }
	    const request = this._requestIdToRequest.get(event.requestId);
	    if (!request)
	      return;
	    this._requestIdToResponseReceivedPayloadEvent.set(event.requestId, event);
	    const response = request.createResponse(event.response);
	    this._page._frameManager.requestReceivedResponse(response);
	    if (response.status() === 204 && request.request.isNavigationRequest()) {
	      this._onLoadingFailed(session, {
	        requestId: event.requestId,
	        errorText: "Aborted: 204 No Content",
	        timestamp: event.timestamp
	      });
	    }
	  }
	  _onLoadingFinished(event) {
	    const request = this._requestIdToRequest.get(event.requestId);
	    if (!request)
	      return;
	    const response = request.request._existingResponse();
	    if (response) {
	      const responseReceivedPayload = this._requestIdToResponseReceivedPayloadEvent.get(event.requestId);
	      response._serverAddrFinished(parseRemoteAddress(event?.metrics?.remoteAddress));
	      response._securityDetailsFinished({
	        protocol: isLoadedSecurely(response.url(), response.timing()) ? event.metrics?.securityConnection?.protocol : void 0,
	        subjectName: responseReceivedPayload?.response.security?.certificate?.subject,
	        validFrom: responseReceivedPayload?.response.security?.certificate?.validFrom,
	        validTo: responseReceivedPayload?.response.security?.certificate?.validUntil
	      });
	      if (event.metrics?.protocol)
	        response._setHttpVersion(event.metrics.protocol);
	      response.setEncodedBodySize(event.metrics?.responseBodyBytesReceived ?? null);
	      response.setResponseHeadersSize(event.metrics?.responseHeaderBytesReceived ?? null);
	      response._requestFinished(import_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
	    } else {
	      request.request.setRawRequestHeaders(null);
	    }
	    this._requestIdToResponseReceivedPayloadEvent.delete(event.requestId);
	    this._requestIdToRequest.delete(event.requestId);
	    this._page._frameManager.reportRequestFinished(request.request, response);
	  }
	  _onLoadingFailed(session, event) {
	    const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
	    if (requestWillBeSentEvent) {
	      this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
	      this._onRequest(session, requestWillBeSentEvent, false);
	    }
	    const request = this._requestIdToRequest.get(event.requestId);
	    if (!request)
	      return;
	    const response = request.request._existingResponse();
	    if (response) {
	      response._serverAddrFinished();
	      response._securityDetailsFinished();
	      response.setResponseHeadersSize(null);
	      response.setEncodedBodySize(null);
	      response._requestFinished(import_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
	    } else {
	      request.request.setRawRequestHeaders(null);
	    }
	    this._requestIdToRequest.delete(event.requestId);
	    request.request._setFailureText(event.errorText);
	    this._page._frameManager.requestFailed(request.request, event.errorText.includes("cancelled"));
	  }
	  async _grantPermissions(origin, permissions) {
	    const webPermissionToProtocol = /* @__PURE__ */ new Map([
	      ["geolocation", "geolocation"],
	      ["notifications", "notifications"],
	      ["clipboard-read", "clipboard-read"]
	    ]);
	    const filtered = permissions.map((permission) => {
	      const protocolPermission = webPermissionToProtocol.get(permission);
	      if (!protocolPermission)
	        throw new Error("Unknown permission: " + permission);
	      return protocolPermission;
	    });
	    await this._pageProxySession.send("Emulation.grantPermissions", { origin, permissions: filtered });
	  }
	  async _clearPermissions() {
	    await this._pageProxySession.send("Emulation.resetPermissions", {});
	  }
	  shouldToggleStyleSheetToSyncAnimations() {
	    return true;
	  }
	}
	function parseRemoteAddress(value) {
	  if (!value)
	    return;
	  try {
	    const colon = value.lastIndexOf(":");
	    const dot = value.lastIndexOf(".");
	    if (dot < 0) {
	      return {
	        ipAddress: `[${value.slice(0, colon)}]`,
	        port: +value.slice(colon + 1)
	      };
	    }
	    if (colon > dot) {
	      const [address, port] = value.split(":");
	      return {
	        ipAddress: address,
	        port: +port
	      };
	    } else {
	      const [address, port] = value.split(".");
	      return {
	        ipAddress: `[${address}]`,
	        port: +port
	      };
	    }
	  } catch (_) {
	  }
	}
	function isLoadedSecurely(url, timing) {
	  try {
	    const u = new URL(url);
	    if (u.protocol !== "https:" && u.protocol !== "wss:" && u.protocol !== "sftp:")
	      return false;
	    if (timing.secureConnectionStart === -1 && timing.connectStart !== -1)
	      return false;
	    return true;
	  } catch (_) {
	  }
	}
	return wkPage;
}

var wkBrowser;
var hasRequiredWkBrowser;

function requireWkBrowser () {
	if (hasRequiredWkBrowser) return wkBrowser;
	hasRequiredWkBrowser = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var wkBrowser_exports = {};
	__export(wkBrowser_exports, {
	  WKBrowser: () => WKBrowser,
	  WKBrowserContext: () => WKBrowserContext
	});
	wkBrowser = __toCommonJS(wkBrowser_exports);
	var import_utils = requireUtils();
	var import_browser = requireBrowser$1();
	var import_browserContext = requireBrowserContext$1();
	var network = __toESM(requireNetwork$1());
	var import_wkConnection = requireWkConnection();
	var import_wkPage = requireWkPage();
	var import_errors = requireErrors$1();
	const DEFAULT_USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.4 Safari/605.1.15";
	const BROWSER_VERSION = "18.4";
	class WKBrowser extends import_browser.Browser {
	  constructor(parent, transport, options) {
	    super(parent, options);
	    this._contexts = /* @__PURE__ */ new Map();
	    this._wkPages = /* @__PURE__ */ new Map();
	    this._connection = new import_wkConnection.WKConnection(transport, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
	    this._browserSession = this._connection.browserSession;
	    this._browserSession.on("Playwright.pageProxyCreated", this._onPageProxyCreated.bind(this));
	    this._browserSession.on("Playwright.pageProxyDestroyed", this._onPageProxyDestroyed.bind(this));
	    this._browserSession.on("Playwright.provisionalLoadFailed", (event) => this._onProvisionalLoadFailed(event));
	    this._browserSession.on("Playwright.windowOpen", (event) => this._onWindowOpen(event));
	    this._browserSession.on("Playwright.downloadCreated", this._onDownloadCreated.bind(this));
	    this._browserSession.on("Playwright.downloadFilenameSuggested", this._onDownloadFilenameSuggested.bind(this));
	    this._browserSession.on("Playwright.downloadFinished", this._onDownloadFinished.bind(this));
	    this._browserSession.on("Playwright.screencastFinished", this._onScreencastFinished.bind(this));
	    this._browserSession.on(import_wkConnection.kPageProxyMessageReceived, this._onPageProxyMessageReceived.bind(this));
	  }
	  static async connect(parent, transport, options) {
	    const browser = new WKBrowser(parent, transport, options);
	    if (options.__testHookOnConnectToBrowser)
	      await options.__testHookOnConnectToBrowser();
	    const promises = [
	      browser._browserSession.send("Playwright.enable")
	    ];
	    if (options.persistent) {
	      options.persistent.userAgent ||= DEFAULT_USER_AGENT;
	      browser._defaultContext = new WKBrowserContext(browser, void 0, options.persistent);
	      promises.push(browser._defaultContext._initialize());
	    }
	    await Promise.all(promises);
	    return browser;
	  }
	  _onDisconnect() {
	    for (const wkPage of this._wkPages.values())
	      wkPage.didClose();
	    this._wkPages.clear();
	    for (const video of this._idToVideo.values())
	      video.artifact.reportFinished(new import_errors.TargetClosedError());
	    this._idToVideo.clear();
	    this._didClose();
	  }
	  async doCreateNewContext(options) {
	    const proxy = options.proxyOverride || options.proxy;
	    const createOptions = proxy ? {
	      // Enable socks5 hostname resolution on Windows.
	      // See https://github.com/microsoft/playwright/issues/20451
	      proxyServer: process.platform === "win32" ? proxy.server.replace(/^socks5:\/\//, "socks5h://") : proxy.server,
	      proxyBypassList: proxy.bypass
	    } : void 0;
	    const { browserContextId } = await this._browserSession.send("Playwright.createContext", createOptions);
	    options.userAgent = options.userAgent || DEFAULT_USER_AGENT;
	    const context = new WKBrowserContext(this, browserContextId, options);
	    await context._initialize();
	    this._contexts.set(browserContextId, context);
	    return context;
	  }
	  contexts() {
	    return Array.from(this._contexts.values());
	  }
	  version() {
	    return BROWSER_VERSION;
	  }
	  userAgent() {
	    return DEFAULT_USER_AGENT;
	  }
	  _onDownloadCreated(payload) {
	    const page = this._wkPages.get(payload.pageProxyId);
	    if (!page)
	      return;
	    page._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
	    let originPage = page._page.initializedOrUndefined();
	    if (!originPage) {
	      page._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
	      if (page._opener)
	        originPage = page._opener._page.initializedOrUndefined();
	    }
	    if (!originPage)
	      return;
	    this._downloadCreated(originPage, payload.uuid, payload.url);
	  }
	  _onDownloadFilenameSuggested(payload) {
	    this._downloadFilenameSuggested(payload.uuid, payload.suggestedFilename);
	  }
	  _onDownloadFinished(payload) {
	    this._downloadFinished(payload.uuid, payload.error);
	  }
	  _onScreencastFinished(payload) {
	    this._takeVideo(payload.screencastId)?.reportFinished();
	  }
	  _onPageProxyCreated(event) {
	    const pageProxyId = event.pageProxyId;
	    let context = null;
	    if (event.browserContextId) {
	      context = this._contexts.get(event.browserContextId) || null;
	    }
	    if (!context)
	      context = this._defaultContext;
	    if (!context)
	      return;
	    const pageProxySession = new import_wkConnection.WKSession(this._connection, pageProxyId, (message) => {
	      this._connection.rawSend({ ...message, pageProxyId });
	    });
	    const opener = event.openerId ? this._wkPages.get(event.openerId) : void 0;
	    const wkPage = new import_wkPage.WKPage(context, pageProxySession, opener || null);
	    this._wkPages.set(pageProxyId, wkPage);
	  }
	  _onPageProxyDestroyed(event) {
	    const pageProxyId = event.pageProxyId;
	    const wkPage = this._wkPages.get(pageProxyId);
	    if (!wkPage)
	      return;
	    wkPage.didClose();
	    this._wkPages.delete(pageProxyId);
	  }
	  _onPageProxyMessageReceived(event) {
	    const wkPage = this._wkPages.get(event.pageProxyId);
	    if (!wkPage)
	      return;
	    wkPage.dispatchMessageToSession(event.message);
	  }
	  _onProvisionalLoadFailed(event) {
	    const wkPage = this._wkPages.get(event.pageProxyId);
	    if (!wkPage)
	      return;
	    wkPage.handleProvisionalLoadFailed(event);
	  }
	  _onWindowOpen(event) {
	    const wkPage = this._wkPages.get(event.pageProxyId);
	    if (!wkPage)
	      return;
	    wkPage.handleWindowOpen(event);
	  }
	  isConnected() {
	    return !this._connection.isClosed();
	  }
	}
	class WKBrowserContext extends import_browserContext.BrowserContext {
	  constructor(browser, browserContextId, options) {
	    super(browser, options, browserContextId);
	    this._validateEmulatedViewport(options.viewport);
	    this._authenticateProxyViaHeader();
	  }
	  async _initialize() {
	    (0, import_utils.assert)(!this._wkPages().length);
	    const browserContextId = this._browserContextId;
	    const promises = [super._initialize()];
	    promises.push(this._browser._browserSession.send("Playwright.setDownloadBehavior", {
	      behavior: this._options.acceptDownloads === "accept" ? "allow" : "deny",
	      downloadPath: this._browser.options.downloadsPath,
	      browserContextId
	    }));
	    if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors)
	      promises.push(this._browser._browserSession.send("Playwright.setIgnoreCertificateErrors", { browserContextId, ignore: true }));
	    if (this._options.locale)
	      promises.push(this._browser._browserSession.send("Playwright.setLanguages", { browserContextId, languages: [this._options.locale] }));
	    if (this._options.geolocation)
	      promises.push(this.setGeolocation(this._options.geolocation));
	    if (this._options.offline)
	      promises.push(this.setOffline(this._options.offline));
	    if (this._options.httpCredentials)
	      promises.push(this.setHTTPCredentials(this._options.httpCredentials));
	    await Promise.all(promises);
	  }
	  _wkPages() {
	    return Array.from(this._browser._wkPages.values()).filter((wkPage) => wkPage._browserContext === this);
	  }
	  possiblyUninitializedPages() {
	    return this._wkPages().map((wkPage) => wkPage._page);
	  }
	  async doCreateNewPage() {
	    (0, import_browserContext.assertBrowserContextIsNotOwned)(this);
	    const { pageProxyId } = await this._browser._browserSession.send("Playwright.createPage", { browserContextId: this._browserContextId });
	    return this._browser._wkPages.get(pageProxyId)._page;
	  }
	  async doGetCookies(urls) {
	    const { cookies } = await this._browser._browserSession.send("Playwright.getAllCookies", { browserContextId: this._browserContextId });
	    return network.filterCookies(cookies.map((c) => {
	      const copy = { ...c };
	      copy.expires = c.expires === -1 ? -1 : c.expires / 1e3;
	      delete copy.session;
	      return copy;
	    }), urls);
	  }
	  async addCookies(cookies) {
	    const cc = network.rewriteCookies(cookies).map((c) => ({
	      ...c,
	      session: c.expires === -1 || c.expires === void 0,
	      expires: c.expires && c.expires !== -1 ? c.expires * 1e3 : c.expires
	    }));
	    await this._browser._browserSession.send("Playwright.setCookies", { cookies: cc, browserContextId: this._browserContextId });
	  }
	  async doClearCookies() {
	    await this._browser._browserSession.send("Playwright.deleteAllCookies", { browserContextId: this._browserContextId });
	  }
	  async doGrantPermissions(origin, permissions) {
	    await Promise.all(this.pages().map((page) => page._delegate._grantPermissions(origin, permissions)));
	  }
	  async doClearPermissions() {
	    await Promise.all(this.pages().map((page) => page._delegate._clearPermissions()));
	  }
	  async setGeolocation(geolocation) {
	    (0, import_browserContext.verifyGeolocation)(geolocation);
	    this._options.geolocation = geolocation;
	    const payload = geolocation ? { ...geolocation, timestamp: Date.now() } : void 0;
	    await this._browser._browserSession.send("Playwright.setGeolocationOverride", { browserContextId: this._browserContextId, geolocation: payload });
	  }
	  async setExtraHTTPHeaders(headers) {
	    this._options.extraHTTPHeaders = headers;
	    for (const page of this.pages())
	      await page._delegate.updateExtraHTTPHeaders();
	  }
	  async setUserAgent(userAgent) {
	    this._options.userAgent = userAgent;
	    for (const page of this.pages())
	      await page._delegate.updateUserAgent();
	  }
	  async setOffline(offline) {
	    this._options.offline = offline;
	    for (const page of this.pages())
	      await page._delegate.updateOffline();
	  }
	  async doSetHTTPCredentials(httpCredentials) {
	    this._options.httpCredentials = httpCredentials;
	    for (const page of this.pages())
	      await page._delegate.updateHttpCredentials();
	  }
	  async doAddInitScript(initScript) {
	    for (const page of this.pages())
	      await page._delegate._updateBootstrapScript();
	  }
	  async doRemoveNonInternalInitScripts() {
	    for (const page of this.pages())
	      await page._delegate._updateBootstrapScript();
	  }
	  async doUpdateRequestInterception() {
	    for (const page of this.pages())
	      await page._delegate.updateRequestInterception();
	  }
	  onClosePersistent() {
	  }
	  async clearCache() {
	    await this._browser._browserSession.send("Playwright.clearMemoryCache", {
	      browserContextId: this._browserContextId
	    });
	  }
	  async doClose(reason) {
	    if (!this._browserContextId) {
	      await Promise.all(this._wkPages().map((wkPage) => wkPage._stopVideo()));
	      await this._browser.close({ reason });
	    } else {
	      await this._browser._browserSession.send("Playwright.deleteContext", { browserContextId: this._browserContextId });
	      this._browser._contexts.delete(this._browserContextId);
	    }
	  }
	  async cancelDownload(uuid) {
	    await this._browser._browserSession.send("Playwright.cancelDownload", { uuid });
	  }
	  _validateEmulatedViewport(viewportSize) {
	    if (!viewportSize)
	      return;
	    if (process.platform === "win32" && this._browser.options.headful && (viewportSize.width < 250 || viewportSize.height < 240))
	      throw new Error(`WebKit on Windows has a minimal viewport of 250x240.`);
	  }
	}
	return wkBrowser;
}

var webkit;
var hasRequiredWebkit;

function requireWebkit () {
	if (hasRequiredWebkit) return webkit;
	hasRequiredWebkit = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var webkit_exports = {};
	__export(webkit_exports, {
	  WebKit: () => WebKit
	});
	webkit = __toCommonJS(webkit_exports);
	var import_path = __toESM(require$$1$1);
	var import_wkConnection = requireWkConnection();
	var import_ascii = requireAscii();
	var import_browserType = requireBrowserType$1();
	var import_wkBrowser = requireWkBrowser();
	class WebKit extends import_browserType.BrowserType {
	  constructor(parent) {
	    super(parent, "webkit");
	  }
	  connectToTransport(transport, options) {
	    return import_wkBrowser.WKBrowser.connect(this.attribution.playwright, transport, options);
	  }
	  amendEnvironment(env, userDataDir, executable, browserArguments) {
	    return { ...env, CURL_COOKIE_JAR_PATH: import_path.default.join(userDataDir, "cookiejar.db") };
	  }
	  doRewriteStartupLog(error) {
	    if (!error.logs)
	      return error;
	    if (error.logs.includes("Failed to open display") || error.logs.includes("cannot open display"))
	      error.logs = "\n" + (0, import_ascii.wrapInASCIIBox)(import_browserType.kNoXServerRunningError, 1);
	    return error;
	  }
	  attemptToGracefullyCloseBrowser(transport) {
	    transport.send({ method: "Playwright.close", params: {}, id: import_wkConnection.kBrowserCloseMessageId });
	  }
	  defaultArgs(options, isPersistent, userDataDir) {
	    const { args = [], headless } = options;
	    const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
	    if (userDataDirArg)
	      throw this._createUserDataDirArgMisuseError("--user-data-dir");
	    if (args.find((arg) => !arg.startsWith("-")))
	      throw new Error("Arguments can not specify page to be opened");
	    const webkitArguments = ["--inspector-pipe"];
	    if (process.platform === "win32")
	      webkitArguments.push("--disable-accelerated-compositing");
	    if (headless)
	      webkitArguments.push("--headless");
	    if (isPersistent)
	      webkitArguments.push(`--user-data-dir=${userDataDir}`);
	    else
	      webkitArguments.push(`--no-startup-window`);
	    const proxy = options.proxyOverride || options.proxy;
	    if (proxy) {
	      if (process.platform === "darwin") {
	        webkitArguments.push(`--proxy=${proxy.server}`);
	        if (proxy.bypass)
	          webkitArguments.push(`--proxy-bypass-list=${proxy.bypass}`);
	      } else if (process.platform === "linux") {
	        webkitArguments.push(`--proxy=${proxy.server}`);
	        if (proxy.bypass)
	          webkitArguments.push(...proxy.bypass.split(",").map((t) => `--ignore-host=${t}`));
	      } else if (process.platform === "win32") {
	        webkitArguments.push(`--curl-proxy=${proxy.server.replace(/^socks5:\/\//, "socks5h://")}`);
	        if (proxy.bypass)
	          webkitArguments.push(`--curl-noproxy=${proxy.bypass}`);
	      }
	    }
	    webkitArguments.push(...args);
	    if (isPersistent)
	      webkitArguments.push("about:blank");
	    return webkitArguments;
	  }
	}
	return webkit;
}

var playwright$2;
var hasRequiredPlaywright$1;

function requirePlaywright$1 () {
	if (hasRequiredPlaywright$1) return playwright$2;
	hasRequiredPlaywright$1 = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var playwright_exports = {};
	__export(playwright_exports, {
	  Playwright: () => Playwright,
	  createPlaywright: () => createPlaywright
	});
	playwright$2 = __toCommonJS(playwright_exports);
	var import_utils = requireUtils();
	var import_android = requireAndroid$1();
	var import_backendAdb = requireBackendAdb();
	var import_bidiChromium = requireBidiChromium();
	var import_bidiFirefox = requireBidiFirefox();
	var import_chromium = requireChromium();
	var import_debugController = requireDebugController();
	var import_electron = requireElectron$1();
	var import_firefox = requireFirefox();
	var import_instrumentation = requireInstrumentation();
	var import_selectors = requireSelectors$1();
	var import_webkit = requireWebkit();
	class Playwright extends import_instrumentation.SdkObject {
	  constructor(options) {
	    super({ attribution: {}, instrumentation: (0, import_instrumentation.createInstrumentation)() }, void 0, "Playwright");
	    this._allPages = /* @__PURE__ */ new Set();
	    this._allBrowsers = /* @__PURE__ */ new Set();
	    this.options = options;
	    this.attribution.playwright = this;
	    this.instrumentation.addListener({
	      onBrowserOpen: (browser) => this._allBrowsers.add(browser),
	      onBrowserClose: (browser) => this._allBrowsers.delete(browser),
	      onPageOpen: (page) => this._allPages.add(page),
	      onPageClose: (page) => this._allPages.delete(page),
	      onCallLog: (sdkObject, metadata, logName, message) => {
	        import_utils.debugLogger.log(logName, message);
	      }
	    }, null);
	    this.chromium = new import_chromium.Chromium(this);
	    this.bidiChromium = new import_bidiChromium.BidiChromium(this);
	    this.bidiFirefox = new import_bidiFirefox.BidiFirefox(this);
	    this.firefox = new import_firefox.Firefox(this);
	    this.webkit = new import_webkit.WebKit(this);
	    this.electron = new import_electron.Electron(this);
	    this.android = new import_android.Android(this, new import_backendAdb.AdbBackend());
	    this.selectors = new import_selectors.Selectors();
	    this.debugController = new import_debugController.DebugController(this);
	  }
	  async hideHighlight() {
	    await Promise.all([...this._allPages].map((p) => p.hideHighlight().catch(() => {
	    })));
	  }
	  allBrowsers() {
	    return [...this._allBrowsers];
	  }
	  allPages() {
	    return [...this._allPages];
	  }
	}
	function createPlaywright(options) {
	  return new Playwright(options);
	}
	return playwright$2;
}

var recorderApp;
var hasRequiredRecorderApp;

function requireRecorderApp () {
	if (hasRequiredRecorderApp) return recorderApp;
	hasRequiredRecorderApp = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var recorderApp_exports = {};
	__export(recorderApp_exports, {
	  EmptyRecorderApp: () => EmptyRecorderApp,
	  RecorderApp: () => RecorderApp
	});
	recorderApp = __toCommonJS(recorderApp_exports);
	var import_events = require$$0$5;
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_debug = requireDebug$1();
	var import_utilsBundle = requireUtilsBundle();
	var import_instrumentation = requireInstrumentation();
	var import_launchApp = requireLaunchApp();
	var import_launchApp2 = requireLaunchApp();
	var import_progress = requireProgress();
	class EmptyRecorderApp extends import_events.EventEmitter {
	  async close() {
	  }
	  async setPaused(paused) {
	  }
	  async setMode(mode) {
	  }
	  async setRunningFile(file) {
	  }
	  async elementPicked(elementInfo, userGesture) {
	  }
	  async updateCallLogs(callLogs) {
	  }
	  async setSources(sources, primaryPageURL) {
	  }
	  async setActions(actions, sources) {
	  }
	}
	class RecorderApp extends import_events.EventEmitter {
	  constructor(recorder, page, wsEndpoint) {
	    super();
	    this.setMaxListeners(0);
	    this._recorder = recorder;
	    this._page = page;
	    this.wsEndpointForTest = wsEndpoint;
	  }
	  async close() {
	    await this._page.context().close({ reason: "Recorder window closed" });
	  }
	  async _init() {
	    await (0, import_launchApp.syncLocalStorageWithSettings)(this._page, "recorder");
	    await this._page._setServerRequestInterceptor((route) => {
	      if (!route.request().url().startsWith("https://playwright/"))
	        return false;
	      const uri = route.request().url().substring("https://playwright/".length);
	      const file = require.resolve("../../vite/recorder/" + uri);
	      import_fs.default.promises.readFile(file).then((buffer) => {
	        route.fulfill({
	          status: 200,
	          headers: [
	            { name: "Content-Type", value: import_utilsBundle.mime.getType(import_path.default.extname(file)) || "application/octet-stream" }
	          ],
	          body: buffer.toString("base64"),
	          isBase64: true
	        }).catch(() => {
	        });
	      });
	      return true;
	    });
	    await this._page.exposeBinding("dispatch", false, (_, data) => this.emit("event", data));
	    this._page.once("close", () => {
	      this.emit("close");
	      this._page.context().close({ reason: "Recorder window closed" }).catch(() => {
	      });
	    });
	    const mainFrame = this._page.mainFrame();
	    await mainFrame.goto((0, import_instrumentation.serverSideCallMetadata)(), process.env.PW_HMR ? "http://localhost:44225" : "https://playwright/index.html");
	  }
	  static factory(context) {
	    return async (recorder) => {
	      if (process.env.PW_CODEGEN_NO_INSPECTOR)
	        return new EmptyRecorderApp();
	      return await RecorderApp._open(recorder, context);
	    };
	  }
	  static async _open(recorder, inspectedContext) {
	    const sdkLanguage = inspectedContext.attribution.playwright.options.sdkLanguage;
	    const headed = !!inspectedContext._browser.options.headful;
	    const recorderPlaywright = requirePlaywright$1().createPlaywright({ sdkLanguage: "javascript", isInternalPlaywright: true });
	    const { context, page } = await (0, import_launchApp2.launchApp)(recorderPlaywright.chromium, {
	      sdkLanguage,
	      windowSize: { width: 600, height: 600 },
	      windowPosition: { x: 1020, y: 10 },
	      persistentContextOptions: {
	        noDefaultViewport: true,
	        headless: !!process.env.PWTEST_CLI_HEADLESS || (0, import_debug.isUnderTest)() && !headed,
	        useWebSocket: (0, import_debug.isUnderTest)(),
	        handleSIGINT: recorder.handleSIGINT,
	        executablePath: inspectedContext._browser.options.isChromium ? inspectedContext._browser.options.customExecutablePath : void 0,
	        // Use the same channel as the inspected context to guarantee that the browser is installed.
	        channel: inspectedContext._browser.options.isChromium ? inspectedContext._browser.options.channel : void 0
	      }
	    });
	    const controller = new import_progress.ProgressController((0, import_instrumentation.serverSideCallMetadata)(), context._browser);
	    await controller.run(async (progress) => {
	      await context._browser._defaultContext._loadDefaultContextAsIs(progress);
	    });
	    const result = new RecorderApp(recorder, page, context._browser.options.wsEndpoint);
	    await result._init();
	    return result;
	  }
	  async setMode(mode) {
	    await this._page.mainFrame().evaluateExpression(((mode2) => {
	      window.playwrightSetMode(mode2);
	    }).toString(), { isFunction: true }, mode).catch(() => {
	    });
	  }
	  async setRunningFile(file) {
	    await this._page.mainFrame().evaluateExpression(((file2) => {
	      window.playwrightSetRunningFile(file2);
	    }).toString(), { isFunction: true }, file).catch(() => {
	    });
	  }
	  async setPaused(paused) {
	    await this._page.mainFrame().evaluateExpression(((paused2) => {
	      window.playwrightSetPaused(paused2);
	    }).toString(), { isFunction: true }, paused).catch(() => {
	    });
	  }
	  async setSources(sources, primaryPageURL) {
	    await this._page.mainFrame().evaluateExpression((({ sources: sources2, primaryPageURL: primaryPageURL2 }) => {
	      window.playwrightSetSources(sources2, primaryPageURL2);
	    }).toString(), { isFunction: true }, { sources, primaryPageURL }).catch(() => {
	    });
	    if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length) {
	      if (process._didSetSourcesForTest(sources[0].text))
	        this.close();
	    }
	  }
	  async setActions(actions, sources) {
	  }
	  async elementPicked(elementInfo, userGesture) {
	    if (userGesture)
	      this._page.bringToFront();
	    await this._page.mainFrame().evaluateExpression(((param) => {
	      window.playwrightElementPicked(param.elementInfo, param.userGesture);
	    }).toString(), { isFunction: true }, { elementInfo, userGesture }).catch(() => {
	    });
	  }
	  async updateCallLogs(callLogs) {
	    await this._page.mainFrame().evaluateExpression(((callLogs2) => {
	      window.playwrightUpdateLogs(callLogs2);
	    }).toString(), { isFunction: true }, callLogs).catch(() => {
	    });
	  }
	}
	return recorderApp;
}

var storageScript;
var hasRequiredStorageScript;

function requireStorageScript () {
	if (hasRequiredStorageScript) return storageScript;
	hasRequiredStorageScript = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var storageScript_exports = {};
	__export(storageScript_exports, {
	  collect: () => collect,
	  restore: () => restore
	});
	storageScript = __toCommonJS(storageScript_exports);
	async function collect(serializersSource, builtins, isFirefox, recordIndexedDB) {
	  const { serializeAsCallArgument } = serializersSource(builtins);
	  async function collectDB(dbInfo) {
	    if (!dbInfo.name)
	      throw new Error("Database name is empty");
	    if (!dbInfo.version)
	      throw new Error("Database version is unset");
	    function idbRequestToPromise(request) {
	      return new Promise((resolve, reject) => {
	        request.addEventListener("success", () => resolve(request.result));
	        request.addEventListener("error", () => reject(request.error));
	      });
	    }
	    function isPlainObject(v) {
	      const ctor = v?.constructor;
	      if (isFirefox) {
	        const constructorImpl = ctor?.toString();
	        if (constructorImpl?.startsWith("function Object() {") && constructorImpl?.includes("[native code]"))
	          return true;
	      }
	      return ctor === Object;
	    }
	    function trySerialize(value) {
	      let trivial = true;
	      const encoded = serializeAsCallArgument(value, (v) => {
	        const isTrivial = isPlainObject(v) || Array.isArray(v) || typeof v === "string" || typeof v === "number" || typeof v === "boolean" || Object.is(v, null);
	        if (!isTrivial)
	          trivial = false;
	        return { fallThrough: v };
	      });
	      if (trivial)
	        return { trivial: value };
	      return { encoded };
	    }
	    const db = await idbRequestToPromise(indexedDB.open(dbInfo.name));
	    const transaction = db.transaction(db.objectStoreNames, "readonly");
	    const stores = await Promise.all([...db.objectStoreNames].map(async (storeName) => {
	      const objectStore = transaction.objectStore(storeName);
	      const keys = await idbRequestToPromise(objectStore.getAllKeys());
	      const records = await Promise.all(keys.map(async (key) => {
	        const record = {};
	        if (objectStore.keyPath === null) {
	          const { encoded: encoded2, trivial: trivial2 } = trySerialize(key);
	          if (trivial2)
	            record.key = trivial2;
	          else
	            record.keyEncoded = encoded2;
	        }
	        const value = await idbRequestToPromise(objectStore.get(key));
	        const { encoded, trivial } = trySerialize(value);
	        if (trivial)
	          record.value = trivial;
	        else
	          record.valueEncoded = encoded;
	        return record;
	      }));
	      const indexes = [...objectStore.indexNames].map((indexName) => {
	        const index = objectStore.index(indexName);
	        return {
	          name: index.name,
	          keyPath: typeof index.keyPath === "string" ? index.keyPath : void 0,
	          keyPathArray: Array.isArray(index.keyPath) ? index.keyPath : void 0,
	          multiEntry: index.multiEntry,
	          unique: index.unique
	        };
	      });
	      return {
	        name: storeName,
	        records,
	        indexes,
	        autoIncrement: objectStore.autoIncrement,
	        keyPath: typeof objectStore.keyPath === "string" ? objectStore.keyPath : void 0,
	        keyPathArray: Array.isArray(objectStore.keyPath) ? objectStore.keyPath : void 0
	      };
	    }));
	    return {
	      name: dbInfo.name,
	      version: dbInfo.version,
	      stores
	    };
	  }
	  return {
	    localStorage: Object.keys(localStorage).map((name) => ({ name, value: localStorage.getItem(name) })),
	    indexedDB: recordIndexedDB ? await Promise.all((await indexedDB.databases()).map(collectDB)).catch((e) => {
	      throw new Error("Unable to serialize IndexedDB: " + e.message);
	    }) : void 0
	  };
	}
	async function restore(serializersSource, builtins, originState) {
	  const { parseEvaluationResultValue } = serializersSource(builtins);
	  for (const { name, value } of originState.localStorage || [])
	    localStorage.setItem(name, value);
	  await Promise.all((originState.indexedDB ?? []).map(async (dbInfo) => {
	    const openRequest = indexedDB.open(dbInfo.name, dbInfo.version);
	    openRequest.addEventListener("upgradeneeded", () => {
	      const db2 = openRequest.result;
	      for (const store of dbInfo.stores) {
	        const objectStore = db2.createObjectStore(store.name, { autoIncrement: store.autoIncrement, keyPath: store.keyPathArray ?? store.keyPath });
	        for (const index of store.indexes)
	          objectStore.createIndex(index.name, index.keyPathArray ?? index.keyPath, { unique: index.unique, multiEntry: index.multiEntry });
	      }
	    });
	    function idbRequestToPromise(request) {
	      return new Promise((resolve, reject) => {
	        request.addEventListener("success", () => resolve(request.result));
	        request.addEventListener("error", () => reject(request.error));
	      });
	    }
	    const db = await idbRequestToPromise(openRequest);
	    const transaction = db.transaction(db.objectStoreNames, "readwrite");
	    await Promise.all(dbInfo.stores.map(async (store) => {
	      const objectStore = transaction.objectStore(store.name);
	      await Promise.all(store.records.map(async (record) => {
	        await idbRequestToPromise(
	          objectStore.add(
	            record.value ?? parseEvaluationResultValue(record.valueEncoded),
	            record.key ?? parseEvaluationResultValue(record.keyEncoded)
	          )
	        );
	      }));
	    }));
	  })).catch((e) => {
	    throw new Error("Unable to restore IndexedDB: " + e.message);
	  });
	}
	return storageScript;
}

var snapshotterInjected;
var hasRequiredSnapshotterInjected;

function requireSnapshotterInjected () {
	if (hasRequiredSnapshotterInjected) return snapshotterInjected;
	hasRequiredSnapshotterInjected = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var snapshotterInjected_exports = {};
	__export(snapshotterInjected_exports, {
	  frameSnapshotStreamer: () => frameSnapshotStreamer
	});
	snapshotterInjected = __toCommonJS(snapshotterInjected_exports);
	function frameSnapshotStreamer(snapshotStreamer, removeNoScript) {
	  if (window[snapshotStreamer])
	    return;
	  const kShadowAttribute = "__playwright_shadow_root_";
	  const kValueAttribute = "__playwright_value_";
	  const kCheckedAttribute = "__playwright_checked_";
	  const kSelectedAttribute = "__playwright_selected_";
	  const kScrollTopAttribute = "__playwright_scroll_top_";
	  const kScrollLeftAttribute = "__playwright_scroll_left_";
	  const kStyleSheetAttribute = "__playwright_style_sheet_";
	  const kTargetAttribute = "__playwright_target__";
	  const kCustomElementsAttribute = "__playwright_custom_elements__";
	  const kCurrentSrcAttribute = "__playwright_current_src__";
	  const kBoundingRectAttribute = "__playwright_bounding_rect__";
	  const kPopoverOpenAttribute = "__playwright_popover_open_";
	  const kDialogOpenAttribute = "__playwright_dialog_open_";
	  const kSnapshotFrameId = Symbol("__playwright_snapshot_frameid_");
	  const kCachedData = Symbol("__playwright_snapshot_cache_");
	  const kEndOfList = Symbol("__playwright_end_of_list_");
	  function resetCachedData(obj) {
	    delete obj[kCachedData];
	  }
	  function ensureCachedData(obj) {
	    if (!obj[kCachedData])
	      obj[kCachedData] = {};
	    return obj[kCachedData];
	  }
	  function removeHash(url) {
	    try {
	      const u = new URL(url);
	      u.hash = "";
	      return u.toString();
	    } catch (e) {
	      return url;
	    }
	  }
	  class Streamer {
	    constructor() {
	      this._lastSnapshotNumber = 0;
	      this._staleStyleSheets = /* @__PURE__ */ new Set();
	      this._readingStyleSheet = false;
	      const invalidateCSSGroupingRule = (rule) => {
	        if (rule.parentStyleSheet)
	          this._invalidateStyleSheet(rule.parentStyleSheet);
	      };
	      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "insertRule", (sheet) => this._invalidateStyleSheet(sheet));
	      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "deleteRule", (sheet) => this._invalidateStyleSheet(sheet));
	      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "addRule", (sheet) => this._invalidateStyleSheet(sheet));
	      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "removeRule", (sheet) => this._invalidateStyleSheet(sheet));
	      this._interceptNativeGetter(window.CSSStyleSheet.prototype, "rules", (sheet) => this._invalidateStyleSheet(sheet));
	      this._interceptNativeGetter(window.CSSStyleSheet.prototype, "cssRules", (sheet) => this._invalidateStyleSheet(sheet));
	      this._interceptNativeMethod(window.CSSStyleSheet.prototype, "replaceSync", (sheet) => this._invalidateStyleSheet(sheet));
	      this._interceptNativeMethod(window.CSSGroupingRule.prototype, "insertRule", invalidateCSSGroupingRule);
	      this._interceptNativeMethod(window.CSSGroupingRule.prototype, "deleteRule", invalidateCSSGroupingRule);
	      this._interceptNativeGetter(window.CSSGroupingRule.prototype, "cssRules", invalidateCSSGroupingRule);
	      this._interceptNativeAsyncMethod(window.CSSStyleSheet.prototype, "replace", (sheet) => this._invalidateStyleSheet(sheet));
	      this._fakeBase = document.createElement("base");
	      this._observer = new MutationObserver((list) => this._handleMutations(list));
	      const observerConfig = { attributes: true, subtree: true };
	      this._observer.observe(document, observerConfig);
	      this._refreshListenersWhenNeeded();
	    }
	    _refreshListenersWhenNeeded() {
	      this._refreshListeners();
	      const customEventName = "__playwright_snapshotter_global_listeners_check__";
	      let seenEvent = false;
	      const handleCustomEvent = () => seenEvent = true;
	      window.addEventListener(customEventName, handleCustomEvent);
	      const observer = new MutationObserver((entries) => {
	        const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(document.documentElement));
	        if (newDocumentElement) {
	          seenEvent = false;
	          window.dispatchEvent(new CustomEvent(customEventName));
	          if (!seenEvent) {
	            window.addEventListener(customEventName, handleCustomEvent);
	            this._refreshListeners();
	          }
	        }
	      });
	      observer.observe(document, { childList: true });
	    }
	    _refreshListeners() {
	      document.addEventListener("__playwright_mark_target__", (event) => {
	        if (!event.detail)
	          return;
	        const callId = event.detail;
	        event.composedPath()[0].__playwright_target__ = callId;
	      });
	      document.addEventListener("__playwright_unmark_target__", (event) => {
	        if (!event.detail)
	          return;
	        const callId = event.detail;
	        if (event.composedPath()[0].__playwright_target__ === callId)
	          delete event.composedPath()[0].__playwright_target__;
	      });
	    }
	    _interceptNativeMethod(obj, method, cb) {
	      const native = obj[method];
	      if (!native)
	        return;
	      obj[method] = function(...args) {
	        const result = native.call(this, ...args);
	        cb(this, result);
	        return result;
	      };
	    }
	    _interceptNativeAsyncMethod(obj, method, cb) {
	      const native = obj[method];
	      if (!native)
	        return;
	      obj[method] = async function(...args) {
	        const result = await native.call(this, ...args);
	        cb(this, result);
	        return result;
	      };
	    }
	    _interceptNativeGetter(obj, prop, cb) {
	      const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
	      Object.defineProperty(obj, prop, {
	        ...descriptor,
	        get: function() {
	          const result = descriptor.get.call(this);
	          cb(this, result);
	          return result;
	        }
	      });
	    }
	    _handleMutations(list) {
	      for (const mutation of list)
	        ensureCachedData(mutation.target).attributesCached = void 0;
	    }
	    _invalidateStyleSheet(sheet) {
	      if (this._readingStyleSheet)
	        return;
	      this._staleStyleSheets.add(sheet);
	    }
	    _updateStyleElementStyleSheetTextIfNeeded(sheet, forceText) {
	      const data = ensureCachedData(sheet);
	      if (this._staleStyleSheets.has(sheet) || forceText && data.cssText === void 0) {
	        this._staleStyleSheets.delete(sheet);
	        try {
	          data.cssText = this._getSheetText(sheet);
	        } catch (e) {
	          data.cssText = "";
	        }
	      }
	      return data.cssText;
	    }
	    // Returns either content, ref, or no override.
	    _updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber) {
	      const data = ensureCachedData(sheet);
	      if (this._staleStyleSheets.has(sheet)) {
	        this._staleStyleSheets.delete(sheet);
	        try {
	          data.cssText = this._getSheetText(sheet);
	          data.cssRef = snapshotNumber;
	          return data.cssText;
	        } catch (e) {
	        }
	      }
	      return data.cssRef === void 0 ? void 0 : snapshotNumber - data.cssRef;
	    }
	    markIframe(iframeElement, frameId) {
	      iframeElement[kSnapshotFrameId] = frameId;
	    }
	    reset() {
	      this._staleStyleSheets.clear();
	      const visitNode = (node) => {
	        resetCachedData(node);
	        if (node.nodeType === Node.ELEMENT_NODE) {
	          const element = node;
	          if (element.shadowRoot)
	            visitNode(element.shadowRoot);
	        }
	        for (let child = node.firstChild; child; child = child.nextSibling)
	          visitNode(child);
	      };
	      visitNode(document.documentElement);
	      visitNode(this._fakeBase);
	    }
	    __sanitizeMetaAttribute(name, value, httpEquiv) {
	      if (name === "charset")
	        return "utf-8";
	      if (httpEquiv.toLowerCase() !== "content-type" || name !== "content")
	        return value;
	      const [type, ...params] = value.split(";");
	      if (type !== "text/html" || params.length <= 0)
	        return value;
	      const charsetParamIdx = params.findIndex((param) => param.trim().startsWith("charset="));
	      if (charsetParamIdx > -1)
	        params[charsetParamIdx] = "charset=utf-8";
	      return `${type}; ${params.join("; ")}`;
	    }
	    _sanitizeUrl(url) {
	      if (url.startsWith("javascript:") || url.startsWith("vbscript:"))
	        return "";
	      return url;
	    }
	    _sanitizeSrcSet(srcset) {
	      return srcset.split(",").map((src) => {
	        src = src.trim();
	        const spaceIndex = src.lastIndexOf(" ");
	        if (spaceIndex === -1)
	          return this._sanitizeUrl(src);
	        return this._sanitizeUrl(src.substring(0, spaceIndex).trim()) + src.substring(spaceIndex);
	      }).join(", ");
	    }
	    _resolveUrl(base, url) {
	      if (url === "")
	        return "";
	      try {
	        return new URL(url, base).href;
	      } catch (e) {
	        return url;
	      }
	    }
	    _getSheetBase(sheet) {
	      let rootSheet = sheet;
	      while (rootSheet.parentStyleSheet)
	        rootSheet = rootSheet.parentStyleSheet;
	      if (rootSheet.ownerNode)
	        return rootSheet.ownerNode.baseURI;
	      return document.baseURI;
	    }
	    _getSheetText(sheet) {
	      this._readingStyleSheet = true;
	      try {
	        const rules = [];
	        for (const rule of sheet.cssRules)
	          rules.push(rule.cssText);
	        return rules.join("\n");
	      } finally {
	        this._readingStyleSheet = false;
	      }
	    }
	    captureSnapshot() {
	      const timestamp = performance.now();
	      const snapshotNumber = ++this._lastSnapshotNumber;
	      let nodeCounter = 0;
	      let shadowDomNesting = 0;
	      let headNesting = 0;
	      this._handleMutations(this._observer.takeRecords());
	      const definedCustomElements = /* @__PURE__ */ new Set();
	      const visitNode = (node) => {
	        const nodeType = node.nodeType;
	        const nodeName = nodeType === Node.DOCUMENT_FRAGMENT_NODE ? "template" : node.nodeName;
	        if (nodeType !== Node.ELEMENT_NODE && nodeType !== Node.DOCUMENT_FRAGMENT_NODE && nodeType !== Node.TEXT_NODE)
	          return;
	        if (nodeName === "SCRIPT")
	          return;
	        if (nodeName === "LINK" && nodeType === Node.ELEMENT_NODE) {
	          const rel = node.getAttribute("rel")?.toLowerCase();
	          if (rel === "preload" || rel === "prefetch")
	            return;
	        }
	        if (removeNoScript && nodeName === "NOSCRIPT")
	          return;
	        if (nodeName === "META" && node.httpEquiv.toLowerCase() === "content-security-policy")
	          return;
	        if ((nodeName === "IFRAME" || nodeName === "FRAME") && headNesting)
	          return;
	        const data = ensureCachedData(node);
	        const values = [];
	        let equals = !!data.cached;
	        let extraNodes = 0;
	        const expectValue = (value) => {
	          equals = equals && data.cached[values.length] === value;
	          values.push(value);
	        };
	        const checkAndReturn = (n) => {
	          data.attributesCached = true;
	          if (equals)
	            return { equals: true, n: [[snapshotNumber - data.ref[0], data.ref[1]]] };
	          nodeCounter += extraNodes;
	          data.ref = [snapshotNumber, nodeCounter++];
	          data.cached = values;
	          return { equals: false, n };
	        };
	        if (nodeType === Node.TEXT_NODE) {
	          const value = node.nodeValue || "";
	          expectValue(value);
	          return checkAndReturn(value);
	        }
	        if (nodeName === "STYLE") {
	          const sheet = node.sheet;
	          let cssText;
	          if (sheet)
	            cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet);
	          cssText = cssText || node.textContent || "";
	          expectValue(cssText);
	          extraNodes++;
	          return checkAndReturn([nodeName, {}, cssText]);
	        }
	        const attrs = {};
	        const result2 = [nodeName, attrs];
	        const visitChild = (child) => {
	          const snapshot = visitNode(child);
	          if (snapshot) {
	            result2.push(snapshot.n);
	            expectValue(child);
	            equals = equals && snapshot.equals;
	          }
	        };
	        const visitChildStyleSheet = (child) => {
	          const snapshot = visitStyleSheet(child);
	          if (snapshot) {
	            result2.push(snapshot.n);
	            expectValue(child);
	            equals = equals && snapshot.equals;
	          }
	        };
	        if (nodeType === Node.DOCUMENT_FRAGMENT_NODE)
	          attrs[kShadowAttribute] = "open";
	        if (nodeType === Node.ELEMENT_NODE) {
	          const element = node;
	          if (element.localName.includes("-") && window.customElements?.get(element.localName))
	            definedCustomElements.add(element.localName);
	          if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
	            const value = element.value;
	            expectValue(kValueAttribute);
	            expectValue(value);
	            attrs[kValueAttribute] = value;
	          }
	          if (nodeName === "INPUT" && ["checkbox", "radio"].includes(element.type)) {
	            const value = element.checked ? "true" : "false";
	            expectValue(kCheckedAttribute);
	            expectValue(value);
	            attrs[kCheckedAttribute] = value;
	          }
	          if (nodeName === "OPTION") {
	            const value = element.selected ? "true" : "false";
	            expectValue(kSelectedAttribute);
	            expectValue(value);
	            attrs[kSelectedAttribute] = value;
	          }
	          if (nodeName === "CANVAS" || nodeName === "IFRAME" || nodeName === "FRAME") {
	            const boundingRect = element.getBoundingClientRect();
	            const value = JSON.stringify({
	              left: boundingRect.left,
	              top: boundingRect.top,
	              right: boundingRect.right,
	              bottom: boundingRect.bottom
	            });
	            expectValue(kBoundingRectAttribute);
	            expectValue(value);
	            attrs[kBoundingRectAttribute] = value;
	          }
	          if (element.popover && element.matches && element.matches(":popover-open")) {
	            const value = "true";
	            expectValue(kPopoverOpenAttribute);
	            expectValue(value);
	            attrs[kPopoverOpenAttribute] = value;
	          }
	          if (nodeName === "DIALOG" && element.open) {
	            const value = element.matches(":modal") ? "modal" : "true";
	            expectValue(kDialogOpenAttribute);
	            expectValue(value);
	            attrs[kDialogOpenAttribute] = value;
	          }
	          if (element.scrollTop) {
	            expectValue(kScrollTopAttribute);
	            expectValue(element.scrollTop);
	            attrs[kScrollTopAttribute] = "" + element.scrollTop;
	          }
	          if (element.scrollLeft) {
	            expectValue(kScrollLeftAttribute);
	            expectValue(element.scrollLeft);
	            attrs[kScrollLeftAttribute] = "" + element.scrollLeft;
	          }
	          if (element.shadowRoot) {
	            ++shadowDomNesting;
	            visitChild(element.shadowRoot);
	            --shadowDomNesting;
	          }
	          if ("__playwright_target__" in element) {
	            expectValue(kTargetAttribute);
	            expectValue(element["__playwright_target__"]);
	            attrs[kTargetAttribute] = element["__playwright_target__"];
	          }
	        }
	        if (nodeName === "HEAD") {
	          ++headNesting;
	          this._fakeBase.setAttribute("href", document.baseURI);
	          visitChild(this._fakeBase);
	        }
	        for (let child = node.firstChild; child; child = child.nextSibling)
	          visitChild(child);
	        if (nodeName === "HEAD")
	          --headNesting;
	        expectValue(kEndOfList);
	        let documentOrShadowRoot = null;
	        if (node.ownerDocument.documentElement === node)
	          documentOrShadowRoot = node.ownerDocument;
	        else if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE)
	          documentOrShadowRoot = node;
	        if (documentOrShadowRoot) {
	          for (const sheet of documentOrShadowRoot.adoptedStyleSheets || [])
	            visitChildStyleSheet(sheet);
	          expectValue(kEndOfList);
	        }
	        if (nodeName === "IFRAME" || nodeName === "FRAME") {
	          const element = node;
	          const frameId = element[kSnapshotFrameId];
	          const name = "src";
	          const value = frameId ? `/snapshot/${frameId}` : "";
	          expectValue(name);
	          expectValue(value);
	          attrs[name] = value;
	        }
	        if (nodeName === "BODY" && definedCustomElements.size) {
	          const value = [...definedCustomElements].join(",");
	          expectValue(kCustomElementsAttribute);
	          expectValue(value);
	          attrs[kCustomElementsAttribute] = value;
	        }
	        if (nodeName === "IMG" || nodeName === "PICTURE") {
	          const value = nodeName === "PICTURE" ? "" : this._sanitizeUrl(node.currentSrc);
	          expectValue(kCurrentSrcAttribute);
	          expectValue(value);
	          attrs[kCurrentSrcAttribute] = value;
	        }
	        if (equals && data.attributesCached && !shadowDomNesting)
	          return checkAndReturn(result2);
	        if (nodeType === Node.ELEMENT_NODE) {
	          const element = node;
	          for (let i = 0; i < element.attributes.length; i++) {
	            const name = element.attributes[i].name;
	            if (nodeName === "LINK" && name === "integrity")
	              continue;
	            if (nodeName === "IFRAME" && (name === "src" || name === "srcdoc" || name === "sandbox"))
	              continue;
	            if (nodeName === "FRAME" && name === "src")
	              continue;
	            if (nodeName === "DIALOG" && name === "open")
	              continue;
	            let value = element.attributes[i].value;
	            if (nodeName === "META")
	              value = this.__sanitizeMetaAttribute(name, value, node.httpEquiv);
	            else if (name === "src" && nodeName === "IMG")
	              value = this._sanitizeUrl(value);
	            else if (name === "srcset" && nodeName === "IMG")
	              value = this._sanitizeSrcSet(value);
	            else if (name === "srcset" && nodeName === "SOURCE")
	              value = this._sanitizeSrcSet(value);
	            else if (name === "href" && nodeName === "LINK")
	              value = this._sanitizeUrl(value);
	            else if (name.startsWith("on"))
	              value = "";
	            expectValue(name);
	            expectValue(value);
	            attrs[name] = value;
	          }
	          expectValue(kEndOfList);
	        }
	        if (result2.length === 2 && !Object.keys(attrs).length)
	          result2.pop();
	        return checkAndReturn(result2);
	      };
	      const visitStyleSheet = (sheet) => {
	        const data = ensureCachedData(sheet);
	        const oldCSSText = data.cssText;
	        const cssText = this._updateStyleElementStyleSheetTextIfNeeded(
	          sheet,
	          true
	          /* forceText */
	        );
	        if (cssText === oldCSSText)
	          return { equals: true, n: [[snapshotNumber - data.ref[0], data.ref[1]]] };
	        data.ref = [snapshotNumber, nodeCounter++];
	        return {
	          equals: false,
	          n: ["template", {
	            [kStyleSheetAttribute]: cssText
	          }]
	        };
	      };
	      let html;
	      if (document.documentElement) {
	        const { n } = visitNode(document.documentElement);
	        html = n;
	      } else {
	        html = ["html"];
	      }
	      const result = {
	        html,
	        doctype: document.doctype ? document.doctype.name : void 0,
	        resourceOverrides: [],
	        viewport: {
	          width: window.innerWidth,
	          height: window.innerHeight
	        },
	        url: location.href,
	        wallTime: Date.now(),
	        collectionTime: 0
	      };
	      for (const sheet of this._staleStyleSheets) {
	        if (sheet.href === null)
	          continue;
	        const content = this._updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber);
	        if (content === void 0) {
	          continue;
	        }
	        const base = this._getSheetBase(sheet);
	        const url = removeHash(this._resolveUrl(base, sheet.href));
	        result.resourceOverrides.push({ url, content, contentType: "text/css" });
	      }
	      result.collectionTime = performance.now() - timestamp;
	      return result;
	    }
	  }
	  window[snapshotStreamer] = new Streamer();
	}
	return snapshotterInjected;
}

var snapshotter;
var hasRequiredSnapshotter;

function requireSnapshotter () {
	if (hasRequiredSnapshotter) return snapshotter;
	hasRequiredSnapshotter = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var snapshotter_exports = {};
	__export(snapshotter_exports, {
	  Snapshotter: () => Snapshotter
	});
	snapshotter = __toCommonJS(snapshotter_exports);
	var import_snapshotterInjected = requireSnapshotterInjected();
	var import_time = requireTime$1();
	var import_crypto = requireCrypto();
	var import_debugLogger = requireDebugLogger();
	var import_eventsHelper = requireEventsHelper();
	var import_utilsBundle = requireUtilsBundle();
	var import_browserContext = requireBrowserContext$1();
	var import_page = requirePage$1();
	class Snapshotter {
	  constructor(context, delegate) {
	    this._eventListeners = [];
	    this._initialized = false;
	    this._started = false;
	    this._context = context;
	    this._delegate = delegate;
	    const guid = (0, import_crypto.createGuid)();
	    this._snapshotStreamer = "__playwright_snapshot_streamer_" + guid;
	  }
	  started() {
	    return this._started;
	  }
	  async start() {
	    this._started = true;
	    if (!this._initialized) {
	      this._initialized = true;
	      await this._initialize();
	    }
	    await this.reset();
	  }
	  async reset() {
	    if (this._started)
	      await this._runInAllFrames(`window["${this._snapshotStreamer}"].reset()`);
	  }
	  async stop() {
	    this._started = false;
	  }
	  resetForReuse() {
	    this._initialized = false;
	  }
	  async _initialize() {
	    for (const page of this._context.pages())
	      this._onPage(page);
	    this._eventListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.Page, this._onPage.bind(this))
	    ];
	    const { javaScriptEnabled } = this._context._options;
	    const initScript = `(${import_snapshotterInjected.frameSnapshotStreamer})("${this._snapshotStreamer}", ${javaScriptEnabled || javaScriptEnabled === void 0})`;
	    await this._context.addInitScript(initScript);
	    await this._runInAllFrames(initScript);
	  }
	  async _runInAllFrames(expression) {
	    const frames = [];
	    for (const page of this._context.pages())
	      frames.push(...page.frames());
	    await Promise.all(frames.map((frame) => {
	      return frame.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => import_debugLogger.debugLogger.log("error", e));
	    }));
	  }
	  dispose() {
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	  }
	  async captureSnapshot(page, callId, snapshotName) {
	    const expression = `window["${this._snapshotStreamer}"].captureSnapshot(${JSON.stringify(snapshotName)})`;
	    const snapshots = page.frames().map(async (frame) => {
	      const data = await frame.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => import_debugLogger.debugLogger.log("error", e));
	      if (!data || !this._started)
	        return;
	      const snapshot = {
	        callId,
	        snapshotName,
	        pageId: page.guid,
	        frameId: frame.guid,
	        frameUrl: data.url,
	        doctype: data.doctype,
	        html: data.html,
	        viewport: data.viewport,
	        timestamp: (0, import_time.monotonicTime)(),
	        wallTime: data.wallTime,
	        collectionTime: data.collectionTime,
	        resourceOverrides: [],
	        isMainFrame: page.mainFrame() === frame
	      };
	      for (const { url, content, contentType } of data.resourceOverrides) {
	        if (typeof content === "string") {
	          const buffer = Buffer.from(content);
	          const sha1 = (0, import_crypto.calculateSha1)(buffer) + "." + (import_utilsBundle.mime.getExtension(contentType) || "dat");
	          this._delegate.onSnapshotterBlob({ sha1, buffer });
	          snapshot.resourceOverrides.push({ url, sha1 });
	        } else {
	          snapshot.resourceOverrides.push({ url, ref: content });
	        }
	      }
	      this._delegate.onFrameSnapshot(snapshot);
	    });
	    await Promise.all(snapshots);
	  }
	  _onPage(page) {
	    for (const frame of page.frames())
	      this._annotateFrameHierarchy(frame);
	    this._eventListeners.push(import_eventsHelper.eventsHelper.addEventListener(page, import_page.Page.Events.FrameAttached, (frame) => this._annotateFrameHierarchy(frame)));
	  }
	  async _annotateFrameHierarchy(frame) {
	    try {
	      const frameElement = await frame.frameElement();
	      const parent = frame.parentFrame();
	      if (!parent)
	        return;
	      const context = await parent._mainContext();
	      await context?.evaluate(({ snapshotStreamer, frameElement: frameElement2, frameId }) => {
	        window[snapshotStreamer].markIframe(frameElement2, frameId);
	      }, { snapshotStreamer: this._snapshotStreamer, frameElement, frameId: frame.guid });
	      frameElement.dispose();
	    } catch (e) {
	    }
	  }
	}
	return snapshotter;
}

var tracing$1;
var hasRequiredTracing$1;

function requireTracing$1 () {
	if (hasRequiredTracing$1) return tracing$1;
	hasRequiredTracing$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var tracing_exports = {};
	__export(tracing_exports, {
	  Tracing: () => Tracing,
	  shouldCaptureSnapshot: () => shouldCaptureSnapshot
	});
	tracing$1 = __toCommonJS(tracing_exports);
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_snapshotter = requireSnapshotter();
	var import_debug = requireDebug();
	var import_assert = requireAssert$1();
	var import_time = requireTime$1();
	var import_eventsHelper = requireEventsHelper();
	var import_crypto = requireCrypto();
	var import_artifact = requireArtifact$1();
	var import_browserContext = requireBrowserContext$1();
	var import_dispatcher = requireDispatcher();
	var import_errors = requireErrors$1();
	var import_fileUtils = requireFileUtils$1();
	var import_harTracer = requireHarTracer();
	var import_instrumentation = requireInstrumentation();
	var import_page = requirePage$1();
	const version = 7;
	const kScreencastOptions = { width: 800, height: 600, quality: 90 };
	class Tracing extends import_instrumentation.SdkObject {
	  constructor(context, tracesDir) {
	    super(context, "tracing");
	    this._fs = new import_fileUtils.SerializedFS();
	    this._screencastListeners = [];
	    this._eventListeners = [];
	    this._isStopping = false;
	    this._allResources = /* @__PURE__ */ new Set();
	    this._pendingHarEntries = /* @__PURE__ */ new Set();
	    this._context = context;
	    this._precreatedTracesDir = tracesDir;
	    this._harTracer = new import_harTracer.HarTracer(context, null, this, {
	      content: "attach",
	      includeTraceInfo: true,
	      recordRequestOverrides: false,
	      waitForContentOnStop: false
	    });
	    const testIdAttributeName = "selectors" in context ? context.selectors().testIdAttributeName() : void 0;
	    this._contextCreatedEvent = {
	      version,
	      type: "context-options",
	      origin: "library",
	      browserName: "",
	      options: {},
	      platform: process.platform,
	      wallTime: 0,
	      monotonicTime: 0,
	      sdkLanguage: context.attribution.playwright.options.sdkLanguage,
	      testIdAttributeName,
	      contextId: context.guid
	    };
	    if (context instanceof import_browserContext.BrowserContext) {
	      this._snapshotter = new import_snapshotter.Snapshotter(context, this);
	      (0, import_assert.assert)(tracesDir, "tracesDir must be specified for BrowserContext");
	      this._contextCreatedEvent.browserName = context._browser.options.name;
	      this._contextCreatedEvent.channel = context._browser.options.channel;
	      this._contextCreatedEvent.options = context._options;
	    }
	  }
	  async resetForReuse() {
	    await this.stopChunk({ mode: "discard" }).catch(() => {
	    });
	    await this.stop();
	    this._snapshotter?.resetForReuse();
	  }
	  async start(options) {
	    if (this._isStopping)
	      throw new Error("Cannot start tracing while stopping");
	    if (this._state)
	      throw new Error("Tracing has been already started");
	    this._contextCreatedEvent.sdkLanguage = this._context.attribution.playwright.options.sdkLanguage;
	    const traceName = options.name || (0, import_crypto.createGuid)();
	    const tracesDir = this._createTracesDirIfNeeded();
	    this._state = {
	      options,
	      traceName,
	      tracesDir,
	      traceFile: import_path.default.join(tracesDir, traceName + ".trace"),
	      networkFile: import_path.default.join(tracesDir, traceName + ".network"),
	      resourcesDir: import_path.default.join(tracesDir, "resources"),
	      chunkOrdinal: 0,
	      traceSha1s: /* @__PURE__ */ new Set(),
	      networkSha1s: /* @__PURE__ */ new Set(),
	      recording: false,
	      callIds: /* @__PURE__ */ new Set(),
	      groupStack: []
	    };
	    this._fs.mkdir(this._state.resourcesDir);
	    this._fs.writeFile(this._state.networkFile, "");
	    if (options.snapshots)
	      this._harTracer.start({ omitScripts: !options.live });
	  }
	  async startChunk(options = {}) {
	    if (this._state && this._state.recording)
	      await this.stopChunk({ mode: "discard" });
	    if (!this._state)
	      throw new Error("Must start tracing before starting a new chunk");
	    if (this._isStopping)
	      throw new Error("Cannot start a trace chunk while stopping");
	    this._state.recording = true;
	    this._state.callIds.clear();
	    const preserveNetworkResources = this._context instanceof import_browserContext.BrowserContext;
	    if (options.name && options.name !== this._state.traceName)
	      this._changeTraceName(this._state, options.name, preserveNetworkResources);
	    else
	      this._allocateNewTraceFile(this._state);
	    if (!preserveNetworkResources)
	      this._fs.writeFile(this._state.networkFile, "");
	    this._fs.mkdir(import_path.default.dirname(this._state.traceFile));
	    const event = {
	      ...this._contextCreatedEvent,
	      title: options.title,
	      wallTime: Date.now(),
	      monotonicTime: (0, import_time.monotonicTime)()
	    };
	    this._appendTraceEvent(event);
	    this._context.instrumentation.addListener(this, this._context);
	    this._eventListeners.push(
	      import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.Console, this._onConsoleMessage.bind(this)),
	      import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.PageError, this._onPageError.bind(this))
	    );
	    if (this._state.options.screenshots)
	      this._startScreencast();
	    if (this._state.options.snapshots)
	      await this._snapshotter?.start();
	    return { traceName: this._state.traceName };
	  }
	  _currentGroupId() {
	    return this._state?.groupStack.length ? this._state.groupStack[this._state.groupStack.length - 1] : void 0;
	  }
	  async group(name, location, metadata) {
	    if (!this._state)
	      return;
	    const stackFrames = [];
	    const { file, line, column } = location ?? metadata.location ?? {};
	    if (file) {
	      stackFrames.push({
	        file,
	        line: line ?? 0,
	        column: column ?? 0
	      });
	    }
	    const event = {
	      type: "before",
	      callId: metadata.id,
	      startTime: metadata.startTime,
	      apiName: name,
	      class: "Tracing",
	      method: "tracingGroup",
	      params: {},
	      stepId: metadata.stepId,
	      stack: stackFrames
	    };
	    if (this._currentGroupId())
	      event.parentId = this._currentGroupId();
	    this._state.groupStack.push(event.callId);
	    this._appendTraceEvent(event);
	  }
	  groupEnd() {
	    if (!this._state)
	      return;
	    const callId = this._state.groupStack.pop();
	    if (!callId)
	      return;
	    const event = {
	      type: "after",
	      callId,
	      endTime: (0, import_time.monotonicTime)()
	    };
	    this._appendTraceEvent(event);
	  }
	  _startScreencast() {
	    if (!(this._context instanceof import_browserContext.BrowserContext))
	      return;
	    for (const page of this._context.pages())
	      this._startScreencastInPage(page);
	    this._screencastListeners.push(
	      import_eventsHelper.eventsHelper.addEventListener(this._context, import_browserContext.BrowserContext.Events.Page, this._startScreencastInPage.bind(this))
	    );
	  }
	  _stopScreencast() {
	    import_eventsHelper.eventsHelper.removeEventListeners(this._screencastListeners);
	    if (!(this._context instanceof import_browserContext.BrowserContext))
	      return;
	    for (const page of this._context.pages())
	      page.setScreencastOptions(null);
	  }
	  _allocateNewTraceFile(state) {
	    const suffix = state.chunkOrdinal ? `-chunk${state.chunkOrdinal}` : ``;
	    state.chunkOrdinal++;
	    state.traceFile = import_path.default.join(state.tracesDir, `${state.traceName}${suffix}.trace`);
	  }
	  _changeTraceName(state, name, preserveNetworkResources) {
	    state.traceName = name;
	    state.chunkOrdinal = 0;
	    this._allocateNewTraceFile(state);
	    const newNetworkFile = import_path.default.join(state.tracesDir, name + ".network");
	    if (preserveNetworkResources)
	      this._fs.copyFile(state.networkFile, newNetworkFile);
	    state.networkFile = newNetworkFile;
	  }
	  async stop() {
	    if (!this._state)
	      return;
	    if (this._isStopping)
	      throw new Error(`Tracing is already stopping`);
	    if (this._state.recording)
	      throw new Error(`Must stop trace file before stopping tracing`);
	    this._closeAllGroups();
	    this._harTracer.stop();
	    this.flushHarEntries();
	    await this._fs.syncAndGetError();
	    this._state = void 0;
	  }
	  async deleteTmpTracesDir() {
	    if (this._tracesTmpDir)
	      await (0, import_fileUtils.removeFolders)([this._tracesTmpDir]);
	  }
	  _createTracesDirIfNeeded() {
	    if (this._precreatedTracesDir)
	      return this._precreatedTracesDir;
	    this._tracesTmpDir = import_fs.default.mkdtempSync(import_path.default.join(import_os.default.tmpdir(), "playwright-tracing-"));
	    return this._tracesTmpDir;
	  }
	  abort() {
	    this._snapshotter?.dispose();
	    this._harTracer.stop();
	  }
	  async flush() {
	    this.abort();
	    await this._fs.syncAndGetError();
	  }
	  _closeAllGroups() {
	    while (this._currentGroupId())
	      this.groupEnd();
	  }
	  async stopChunk(params) {
	    if (this._isStopping)
	      throw new Error(`Tracing is already stopping`);
	    this._isStopping = true;
	    if (!this._state || !this._state.recording) {
	      this._isStopping = false;
	      if (params.mode !== "discard")
	        throw new Error(`Must start tracing before stopping`);
	      return {};
	    }
	    this._closeAllGroups();
	    this._context.instrumentation.removeListener(this);
	    import_eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
	    if (this._state.options.screenshots)
	      this._stopScreencast();
	    if (this._state.options.snapshots)
	      await this._snapshotter?.stop();
	    this.flushHarEntries();
	    const newNetworkFile = import_path.default.join(this._state.tracesDir, this._state.traceName + `-pwnetcopy-${this._state.chunkOrdinal}.network`);
	    const entries = [];
	    entries.push({ name: "trace.trace", value: this._state.traceFile });
	    entries.push({ name: "trace.network", value: newNetworkFile });
	    for (const sha1 of /* @__PURE__ */ new Set([...this._state.traceSha1s, ...this._state.networkSha1s]))
	      entries.push({ name: import_path.default.join("resources", sha1), value: import_path.default.join(this._state.resourcesDir, sha1) });
	    this._state.traceSha1s = /* @__PURE__ */ new Set();
	    if (params.mode === "discard") {
	      this._isStopping = false;
	      this._state.recording = false;
	      return {};
	    }
	    this._fs.copyFile(this._state.networkFile, newNetworkFile);
	    const zipFileName = this._state.traceFile + ".zip";
	    if (params.mode === "archive")
	      this._fs.zip(entries, zipFileName);
	    const error = await this._fs.syncAndGetError();
	    this._isStopping = false;
	    if (this._state)
	      this._state.recording = false;
	    if (error) {
	      if (this._context instanceof import_browserContext.BrowserContext && !this._context._browser.isConnected())
	        return {};
	      throw error;
	    }
	    if (params.mode === "entries")
	      return { entries };
	    const artifact = new import_artifact.Artifact(this._context, zipFileName);
	    artifact.reportFinished();
	    return { artifact };
	  }
	  async _captureSnapshot(snapshotName, sdkObject, metadata) {
	    if (!this._snapshotter)
	      return;
	    if (!sdkObject.attribution.page)
	      return;
	    if (!this._snapshotter.started())
	      return;
	    if (!shouldCaptureSnapshot(metadata))
	      return;
	    await this._snapshotter.captureSnapshot(sdkObject.attribution.page, metadata.id, snapshotName).catch(() => {
	    });
	  }
	  onBeforeCall(sdkObject, metadata) {
	    const event = createBeforeActionTraceEvent(metadata, this._currentGroupId());
	    if (!event)
	      return Promise.resolve();
	    sdkObject.attribution.page?.temporarilyDisableTracingScreencastThrottling();
	    event.beforeSnapshot = `before@${metadata.id}`;
	    this._state?.callIds.add(metadata.id);
	    this._appendTraceEvent(event);
	    return this._captureSnapshot(event.beforeSnapshot, sdkObject, metadata);
	  }
	  onBeforeInputAction(sdkObject, metadata) {
	    if (!this._state?.callIds.has(metadata.id))
	      return Promise.resolve();
	    const event = createInputActionTraceEvent(metadata);
	    if (!event)
	      return Promise.resolve();
	    sdkObject.attribution.page?.temporarilyDisableTracingScreencastThrottling();
	    event.inputSnapshot = `input@${metadata.id}`;
	    this._appendTraceEvent(event);
	    return this._captureSnapshot(event.inputSnapshot, sdkObject, metadata);
	  }
	  onCallLog(sdkObject, metadata, logName, message) {
	    if (metadata.isServerSide || metadata.internal)
	      return;
	    if (logName !== "api")
	      return;
	    const event = createActionLogTraceEvent(metadata, message);
	    if (event)
	      this._appendTraceEvent(event);
	  }
	  async onAfterCall(sdkObject, metadata) {
	    if (!this._state?.callIds.has(metadata.id))
	      return;
	    this._state?.callIds.delete(metadata.id);
	    const event = createAfterActionTraceEvent(metadata);
	    if (!event)
	      return;
	    sdkObject.attribution.page?.temporarilyDisableTracingScreencastThrottling();
	    event.afterSnapshot = `after@${metadata.id}`;
	    this._appendTraceEvent(event);
	    return this._captureSnapshot(event.afterSnapshot, sdkObject, metadata);
	  }
	  onEntryStarted(entry) {
	    this._pendingHarEntries.add(entry);
	  }
	  onEntryFinished(entry) {
	    this._pendingHarEntries.delete(entry);
	    const event = { type: "resource-snapshot", snapshot: entry };
	    const visited = visitTraceEvent(event, this._state.networkSha1s);
	    this._fs.appendFile(
	      this._state.networkFile,
	      JSON.stringify(visited) + "\n",
	      true
	      /* flush */
	    );
	  }
	  flushHarEntries() {
	    const harLines = [];
	    for (const entry of this._pendingHarEntries) {
	      const event = { type: "resource-snapshot", snapshot: entry };
	      const visited = visitTraceEvent(event, this._state.networkSha1s);
	      harLines.push(JSON.stringify(visited));
	    }
	    this._pendingHarEntries.clear();
	    if (harLines.length)
	      this._fs.appendFile(
	        this._state.networkFile,
	        harLines.join("\n") + "\n",
	        true
	        /* flush */
	      );
	  }
	  onContentBlob(sha1, buffer) {
	    this._appendResource(sha1, buffer);
	  }
	  onSnapshotterBlob(blob) {
	    this._appendResource(blob.sha1, blob.buffer);
	  }
	  onFrameSnapshot(snapshot) {
	    this._appendTraceEvent({ type: "frame-snapshot", snapshot });
	  }
	  _onConsoleMessage(message) {
	    const event = {
	      type: "console",
	      messageType: message.type(),
	      text: message.text(),
	      args: message.args().map((a) => ({ preview: a.toString(), value: a.rawValue() })),
	      location: message.location(),
	      time: (0, import_time.monotonicTime)(),
	      pageId: message.page()?.guid
	    };
	    this._appendTraceEvent(event);
	  }
	  onDialog(dialog) {
	    const event = {
	      type: "event",
	      time: (0, import_time.monotonicTime)(),
	      class: "BrowserContext",
	      method: "dialog",
	      params: { pageId: dialog.page().guid, type: dialog.type(), message: dialog.message(), defaultValue: dialog.defaultValue() }
	    };
	    this._appendTraceEvent(event);
	  }
	  onDownload(page, download) {
	    const event = {
	      type: "event",
	      time: (0, import_time.monotonicTime)(),
	      class: "BrowserContext",
	      method: "download",
	      params: { pageId: page.guid, url: download.url, suggestedFilename: download.suggestedFilename() }
	    };
	    this._appendTraceEvent(event);
	  }
	  onPageOpen(page) {
	    const event = {
	      type: "event",
	      time: (0, import_time.monotonicTime)(),
	      class: "BrowserContext",
	      method: "page",
	      params: { pageId: page.guid, openerPageId: page.opener()?.guid }
	    };
	    this._appendTraceEvent(event);
	  }
	  onPageClose(page) {
	    const event = {
	      type: "event",
	      time: (0, import_time.monotonicTime)(),
	      class: "BrowserContext",
	      method: "pageClosed",
	      params: { pageId: page.guid }
	    };
	    this._appendTraceEvent(event);
	  }
	  _onPageError(error, page) {
	    const event = {
	      type: "event",
	      time: (0, import_time.monotonicTime)(),
	      class: "BrowserContext",
	      method: "pageError",
	      params: { error: (0, import_errors.serializeError)(error) },
	      pageId: page.guid
	    };
	    this._appendTraceEvent(event);
	  }
	  _startScreencastInPage(page) {
	    page.setScreencastOptions(kScreencastOptions);
	    const prefix = page.guid;
	    this._screencastListeners.push(
	      import_eventsHelper.eventsHelper.addEventListener(page, import_page.Page.Events.ScreencastFrame, (params) => {
	        const suffix = params.timestamp || Date.now();
	        const sha1 = `${prefix}-${suffix}.jpeg`;
	        const event = {
	          type: "screencast-frame",
	          pageId: page.guid,
	          sha1,
	          width: params.width,
	          height: params.height,
	          timestamp: (0, import_time.monotonicTime)(),
	          frameSwapWallTime: params.frameSwapWallTime
	        };
	        this._appendResource(sha1, params.buffer);
	        this._appendTraceEvent(event);
	      })
	    );
	  }
	  _appendTraceEvent(event) {
	    const visited = visitTraceEvent(event, this._state.traceSha1s);
	    const flush = this._state.options.live || event.type !== "event" && event.type !== "console" && event.type !== "log";
	    this._fs.appendFile(this._state.traceFile, JSON.stringify(visited) + "\n", flush);
	  }
	  _appendResource(sha1, buffer) {
	    if (this._allResources.has(sha1))
	      return;
	    this._allResources.add(sha1);
	    const resourcePath = import_path.default.join(this._state.resourcesDir, sha1);
	    this._fs.writeFile(
	      resourcePath,
	      buffer,
	      true
	      /* skipIfExists */
	    );
	  }
	}
	function visitTraceEvent(object, sha1s) {
	  if (Array.isArray(object))
	    return object.map((o) => visitTraceEvent(o, sha1s));
	  if (object instanceof import_dispatcher.Dispatcher)
	    return `<${object._type}>`;
	  if (object instanceof Buffer)
	    return `<Buffer>`;
	  if (object instanceof Date)
	    return object;
	  if (typeof object === "object") {
	    const result = {};
	    for (const key in object) {
	      if (key === "sha1" || key === "_sha1" || key.endsWith("Sha1")) {
	        const sha1 = object[key];
	        if (sha1)
	          sha1s.add(sha1);
	      }
	      result[key] = visitTraceEvent(object[key], sha1s);
	    }
	    return result;
	  }
	  return object;
	}
	function shouldCaptureSnapshot(metadata) {
	  return import_debug.commandsWithTracingSnapshots.has(metadata.type + "." + metadata.method);
	}
	function createBeforeActionTraceEvent(metadata, parentId) {
	  if (metadata.internal || metadata.method.startsWith("tracing"))
	    return null;
	  const event = {
	    type: "before",
	    callId: metadata.id,
	    startTime: metadata.startTime,
	    apiName: metadata.apiName || metadata.type + "." + metadata.method,
	    class: metadata.type,
	    method: metadata.method,
	    params: metadata.params,
	    stepId: metadata.stepId,
	    pageId: metadata.pageId
	  };
	  if (parentId)
	    event.parentId = parentId;
	  return event;
	}
	function createInputActionTraceEvent(metadata) {
	  if (metadata.internal || metadata.method.startsWith("tracing"))
	    return null;
	  return {
	    type: "input",
	    callId: metadata.id,
	    point: metadata.point
	  };
	}
	function createActionLogTraceEvent(metadata, message) {
	  if (metadata.internal || metadata.method.startsWith("tracing"))
	    return null;
	  return {
	    type: "log",
	    callId: metadata.id,
	    time: (0, import_time.monotonicTime)(),
	    message
	  };
	}
	function createAfterActionTraceEvent(metadata) {
	  if (metadata.internal || metadata.method.startsWith("tracing"))
	    return null;
	  return {
	    type: "after",
	    callId: metadata.id,
	    endTime: metadata.endTime,
	    error: metadata.error?.error,
	    result: metadata.result,
	    point: metadata.point
	  };
	}
	return tracing$1;
}

var browserContext$1;
var hasRequiredBrowserContext$1;

function requireBrowserContext$1 () {
	if (hasRequiredBrowserContext$1) return browserContext$1;
	hasRequiredBrowserContext$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserContext_exports = {};
	__export(browserContext_exports, {
	  BrowserContext: () => BrowserContext,
	  assertBrowserContextIsNotOwned: () => assertBrowserContextIsNotOwned,
	  normalizeProxySettings: () => normalizeProxySettings,
	  validateBrowserContextOptions: () => validateBrowserContextOptions,
	  verifyClientCertificates: () => verifyClientCertificates,
	  verifyGeolocation: () => verifyGeolocation
	});
	browserContext$1 = __toCommonJS(browserContext_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_timeoutSettings = requireTimeoutSettings$1();
	var import_crypto = requireCrypto();
	var import_debug = requireDebug$1();
	var import_clock = requireClock$1();
	var import_debugger = require_debugger();
	var import_fetch = requireFetch$1();
	var import_fileUtils = requireFileUtils$1();
	var import_harRecorder = requireHarRecorder();
	var import_helper = requireHelper();
	var import_instrumentation = requireInstrumentation();
	var import_builtins = requireBuiltins();
	var utilityScriptSerializers = __toESM(requireUtilityScriptSerializers());
	var network = __toESM(requireNetwork$1());
	var import_page = requirePage$1();
	var import_page2 = requirePage$1();
	var import_recorder = requireRecorder();
	var import_recorderApp = requireRecorderApp();
	var storageScript = __toESM(requireStorageScript());
	var consoleApiSource = __toESM(requireConsoleApiSource());
	var import_tracing = requireTracing$1();
	class BrowserContext extends import_instrumentation.SdkObject {
	  constructor(browser, options, browserContextId) {
	    super(browser, "browser-context");
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings();
	    this._pageBindings = /* @__PURE__ */ new Map();
	    this._activeProgressControllers = /* @__PURE__ */ new Set();
	    this._closedStatus = "open";
	    this._permissions = /* @__PURE__ */ new Map();
	    this._downloads = /* @__PURE__ */ new Set();
	    this._origins = /* @__PURE__ */ new Set();
	    this._harRecorders = /* @__PURE__ */ new Map();
	    this._tempDirs = [];
	    this._settingStorageState = false;
	    this.initScripts = [];
	    this._routesInFlight = /* @__PURE__ */ new Set();
	    this.attribution.context = this;
	    this._browser = browser;
	    this._options = options;
	    this._browserContextId = browserContextId;
	    this._isPersistentContext = !browserContextId;
	    this._closePromise = new Promise((fulfill) => this._closePromiseFulfill = fulfill);
	    this.fetchRequest = new import_fetch.BrowserContextAPIRequestContext(this);
	    if (this._options.recordHar)
	      this._harRecorders.set("", new import_harRecorder.HarRecorder(this, null, this._options.recordHar));
	    this.tracing = new import_tracing.Tracing(this, browser.options.tracesDir);
	    this.clock = new import_clock.Clock(this);
	  }
	  static {
	    this.Events = {
	      Console: "console",
	      Close: "close",
	      Dialog: "dialog",
	      Page: "page",
	      // Can't use just 'error' due to node.js special treatment of error events.
	      // @see https://nodejs.org/api/events.html#events_error_events
	      PageError: "pageerror",
	      Request: "request",
	      Response: "response",
	      RequestFailed: "requestfailed",
	      RequestFinished: "requestfinished",
	      RequestAborted: "requestaborted",
	      RequestFulfilled: "requestfulfilled",
	      RequestContinued: "requestcontinued",
	      BeforeClose: "beforeclose",
	      VideoStarted: "videostarted"
	    };
	  }
	  isPersistentContext() {
	    return this._isPersistentContext;
	  }
	  setSelectors(selectors) {
	    this._selectors = selectors;
	  }
	  selectors() {
	    return this._selectors || this.attribution.playwright.selectors;
	  }
	  async _initialize() {
	    if (this.attribution.playwright.options.isInternalPlaywright)
	      return;
	    this._debugger = new import_debugger.Debugger(this);
	    if ((0, import_debug.debugMode)() === "inspector")
	      await import_recorder.Recorder.show(this, import_recorderApp.RecorderApp.factory(this), { pauseOnNextStatement: true });
	    if (this._debugger.isPaused())
	      import_recorder.Recorder.showInspectorNoReply(this, import_recorderApp.RecorderApp.factory(this));
	    this._debugger.on(import_debugger.Debugger.Events.PausedStateChanged, () => {
	      if (this._debugger.isPaused())
	        import_recorder.Recorder.showInspectorNoReply(this, import_recorderApp.RecorderApp.factory(this));
	    });
	    if ((0, import_debug.debugMode)() === "console")
	      await this.extendInjectedScript(consoleApiSource.source);
	    if (this._options.serviceWorkers === "block")
	      await this.addInitScript(`
if (navigator.serviceWorker) navigator.serviceWorker.register = async () => { console.warn('Service Worker registration blocked by Playwright'); };
`);
	    if (this._options.permissions)
	      await this.grantPermissions(this._options.permissions);
	  }
	  debugger() {
	    return this._debugger;
	  }
	  async _ensureVideosPath() {
	    if (this._options.recordVideo)
	      await (0, import_fileUtils.mkdirIfNeeded)(import_path.default.join(this._options.recordVideo.dir, "dummy"));
	  }
	  canResetForReuse() {
	    if (this._closedStatus !== "open")
	      return false;
	    return true;
	  }
	  async stopPendingOperations(reason) {
	    for (const controller of this._activeProgressControllers)
	      controller.abort(new Error(reason));
	    await new Promise((f) => setTimeout(f, 0));
	  }
	  static reusableContextHash(params) {
	    const paramsCopy = { ...params };
	    for (const k of Object.keys(paramsCopy)) {
	      const key = k;
	      if (paramsCopy[key] === defaultNewContextParamValues[key])
	        delete paramsCopy[key];
	    }
	    for (const key of paramsThatAllowContextReuse)
	      delete paramsCopy[key];
	    return JSON.stringify(paramsCopy);
	  }
	  async resetForReuse(metadata, params) {
	    this.setDefaultNavigationTimeout(void 0);
	    this.setDefaultTimeout(void 0);
	    this.tracing.resetForReuse();
	    if (params) {
	      for (const key of paramsThatAllowContextReuse)
	        this._options[key] = params[key];
	    }
	    await this._cancelAllRoutesInFlight();
	    let page = this.pages()[0];
	    const [, ...otherPages] = this.pages();
	    for (const p of otherPages)
	      await p.close(metadata);
	    if (page && page.hasCrashed()) {
	      await page.close(metadata);
	      page = void 0;
	    }
	    page?._frameManager.setCloseAllOpeningDialogs(true);
	    await page?._frameManager.closeOpenDialogs();
	    await page?.mainFrame().goto(metadata, "about:blank", { timeout: 0 });
	    page?._frameManager.setCloseAllOpeningDialogs(false);
	    await this._resetStorage();
	    await this._removeExposedBindings();
	    await this._removeInitScripts();
	    this.clock.markAsUninstalled();
	    if (this._options.permissions)
	      await this.grantPermissions(this._options.permissions);
	    else
	      await this.clearPermissions();
	    await this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []);
	    await this.setGeolocation(this._options.geolocation);
	    await this.setOffline(!!this._options.offline);
	    await this.setUserAgent(this._options.userAgent);
	    await this.clearCache();
	    await this._resetCookies();
	    await page?.resetForReuse(metadata);
	  }
	  _browserClosed() {
	    for (const page of this.pages())
	      page._didClose();
	    this._didCloseInternal();
	  }
	  _didCloseInternal() {
	    if (this._closedStatus === "closed") {
	      return;
	    }
	    this._clientCertificatesProxy?.close().catch(() => {
	    });
	    this.tracing.abort();
	    if (this._isPersistentContext)
	      this.onClosePersistent();
	    this._closePromiseFulfill(new Error("Context closed"));
	    this.emit(BrowserContext.Events.Close);
	  }
	  pages() {
	    return this.possiblyUninitializedPages().filter((page) => page.initializedOrUndefined());
	  }
	  async cookies(urls = []) {
	    if (urls && !Array.isArray(urls))
	      urls = [urls];
	    return await this.doGetCookies(urls);
	  }
	  async clearCookies(options) {
	    const currentCookies = await this.cookies();
	    await this.doClearCookies();
	    const matches = (cookie, prop, value) => {
	      if (!value)
	        return true;
	      if (value instanceof RegExp) {
	        value.lastIndex = 0;
	        return value.test(cookie[prop]);
	      }
	      return cookie[prop] === value;
	    };
	    const cookiesToReadd = currentCookies.filter((cookie) => {
	      return !matches(cookie, "name", options.name) || !matches(cookie, "domain", options.domain) || !matches(cookie, "path", options.path);
	    });
	    await this.addCookies(cookiesToReadd);
	  }
	  setHTTPCredentials(httpCredentials) {
	    return this.doSetHTTPCredentials(httpCredentials);
	  }
	  hasBinding(name) {
	    return this._pageBindings.has(name);
	  }
	  async exposeBinding(name, needsHandle, playwrightBinding) {
	    if (this._pageBindings.has(name))
	      throw new Error(`Function "${name}" has been already registered`);
	    for (const page of this.pages()) {
	      if (page.getBinding(name))
	        throw new Error(`Function "${name}" has been already registered in one of the pages`);
	    }
	    const binding = new import_page2.PageBinding(name, playwrightBinding, needsHandle);
	    this._pageBindings.set(name, binding);
	    await this.doAddInitScript(binding.initScript);
	    const frames = this.pages().map((page) => page.frames()).flat();
	    await Promise.all(frames.map((frame) => frame.evaluateExpression(binding.initScript.source).catch((e) => {
	    })));
	  }
	  async _removeExposedBindings() {
	    for (const [key, binding] of this._pageBindings) {
	      if (!binding.internal)
	        this._pageBindings.delete(key);
	    }
	  }
	  async grantPermissions(permissions, origin) {
	    let resolvedOrigin = "*";
	    if (origin) {
	      const url = new URL(origin);
	      resolvedOrigin = url.origin;
	    }
	    const existing = new Set(this._permissions.get(resolvedOrigin) || []);
	    permissions.forEach((p) => existing.add(p));
	    const list = [...existing.values()];
	    this._permissions.set(resolvedOrigin, list);
	    await this.doGrantPermissions(resolvedOrigin, list);
	  }
	  async clearPermissions() {
	    this._permissions.clear();
	    await this.doClearPermissions();
	  }
	  setDefaultNavigationTimeout(timeout) {
	    this._timeoutSettings.setDefaultNavigationTimeout(timeout);
	  }
	  setDefaultTimeout(timeout) {
	    this._timeoutSettings.setDefaultTimeout(timeout);
	  }
	  async _loadDefaultContextAsIs(progress) {
	    if (!this.possiblyUninitializedPages().length) {
	      const waitForEvent = import_helper.helper.waitForEvent(progress, this, BrowserContext.Events.Page);
	      progress.cleanupWhenAborted(() => waitForEvent.dispose);
	      await Promise.race([waitForEvent.promise, this._closePromise]);
	    }
	    const page = this.possiblyUninitializedPages()[0];
	    if (!page)
	      return;
	    const pageOrError = await page.waitForInitializedOrError();
	    if (pageOrError instanceof Error)
	      throw pageOrError;
	    await page.mainFrame()._waitForLoadState(progress, "load");
	    return page;
	  }
	  async _loadDefaultContext(progress) {
	    const defaultPage = await this._loadDefaultContextAsIs(progress);
	    if (!defaultPage)
	      return;
	    const browserName = this._browser.options.name;
	    if (this._options.isMobile && browserName === "chromium" || this._options.locale && browserName === "webkit") {
	      await this.newPage(progress.metadata);
	      await defaultPage.close(progress.metadata);
	    }
	  }
	  _authenticateProxyViaHeader() {
	    const proxy = this._options.proxy || this._browser.options.proxy || { username: void 0, password: void 0 };
	    const { username, password } = proxy;
	    if (username) {
	      this._options.httpCredentials = { username, password };
	      const token = Buffer.from(`${username}:${password}`).toString("base64");
	      this._options.extraHTTPHeaders = network.mergeHeaders([
	        this._options.extraHTTPHeaders,
	        network.singleHeader("Proxy-Authorization", `Basic ${token}`)
	      ]);
	    }
	  }
	  _authenticateProxyViaCredentials() {
	    const proxy = this._options.proxy || this._browser.options.proxy;
	    if (!proxy)
	      return;
	    const { username, password } = proxy;
	    if (username)
	      this._options.httpCredentials = { username, password: password || "" };
	  }
	  async addInitScript(source, name) {
	    const initScript = new import_page.InitScript(source, false, name);
	    this.initScripts.push(initScript);
	    await this.doAddInitScript(initScript);
	  }
	  async _removeInitScripts() {
	    this.initScripts = this.initScripts.filter((script) => script.internal);
	    await this.doRemoveNonInternalInitScripts();
	  }
	  async setRequestInterceptor(handler) {
	    this._requestInterceptor = handler;
	    await this.doUpdateRequestInterception();
	  }
	  isClosingOrClosed() {
	    return this._closedStatus !== "open";
	  }
	  async _deleteAllDownloads() {
	    await Promise.all(Array.from(this._downloads).map((download) => download.artifact.deleteOnContextClose()));
	  }
	  async _deleteAllTempDirs() {
	    await Promise.all(this._tempDirs.map(async (dir) => await import_fs.default.promises.unlink(dir).catch((e) => {
	    })));
	  }
	  setCustomCloseHandler(handler) {
	    this._customCloseHandler = handler;
	  }
	  async close(options) {
	    if (this._closedStatus === "open") {
	      if (options.reason)
	        this._closeReason = options.reason;
	      this.emit(BrowserContext.Events.BeforeClose);
	      this._closedStatus = "closing";
	      for (const harRecorder of this._harRecorders.values())
	        await harRecorder.flush();
	      await this.tracing.flush();
	      const promises = [];
	      for (const { context, artifact } of this._browser._idToVideo.values()) {
	        if (context === this)
	          promises.push(artifact.finishedPromise());
	      }
	      if (this._customCloseHandler) {
	        await this._customCloseHandler();
	      } else {
	        await this.doClose(options.reason);
	      }
	      promises.push(this._deleteAllDownloads());
	      promises.push(this._deleteAllTempDirs());
	      await Promise.all(promises);
	      if (!this._customCloseHandler)
	        this._didCloseInternal();
	    }
	    await this._closePromise;
	  }
	  async newPage(metadata) {
	    const page = await this.doCreateNewPage();
	    if (metadata.isServerSide)
	      page.markAsServerSideOnly();
	    const pageOrError = await page.waitForInitializedOrError();
	    if (pageOrError instanceof import_page2.Page) {
	      if (pageOrError.isClosed())
	        throw new Error("Page has been closed.");
	      return pageOrError;
	    }
	    throw pageOrError;
	  }
	  addVisitedOrigin(origin) {
	    this._origins.add(origin);
	  }
	  async storageState(indexedDB = false) {
	    const result = {
	      cookies: await this.cookies(),
	      origins: []
	    };
	    const originsToSave = new Set(this._origins);
	    const collectScript = `(${storageScript.collect})(${utilityScriptSerializers.source}, (${import_builtins.builtins})(), ${this._browser.options.name === "firefox"}, ${indexedDB})`;
	    for (const page of this.pages()) {
	      const origin = page.mainFrame().origin();
	      if (!origin || !originsToSave.has(origin))
	        continue;
	      try {
	        const storage = await page.mainFrame().nonStallingEvaluateInExistingContext(collectScript, "utility");
	        if (storage.localStorage.length || storage.indexedDB?.length)
	          result.origins.push({ origin, localStorage: storage.localStorage, indexedDB: storage.indexedDB });
	        originsToSave.delete(origin);
	      } catch {
	      }
	    }
	    if (originsToSave.size) {
	      const internalMetadata = (0, import_instrumentation.serverSideCallMetadata)();
	      const page = await this.newPage(internalMetadata);
	      await page._setServerRequestInterceptor((handler) => {
	        handler.fulfill({ body: "<html></html>" }).catch(() => {
	        });
	        return true;
	      });
	      for (const origin of originsToSave) {
	        const frame = page.mainFrame();
	        await frame.goto(internalMetadata, origin);
	        const storage = await frame.evaluateExpression(collectScript, { world: "utility" });
	        if (storage.localStorage.length || storage.indexedDB?.length)
	          result.origins.push({ origin, localStorage: storage.localStorage, indexedDB: storage.indexedDB });
	      }
	      await page.close(internalMetadata);
	    }
	    return result;
	  }
	  async _resetStorage() {
	    const oldOrigins = this._origins;
	    const newOrigins = new Map(this._options.storageState?.origins?.map((p) => [p.origin, p]) || []);
	    if (!oldOrigins.size && !newOrigins.size)
	      return;
	    let page = this.pages()[0];
	    const internalMetadata = (0, import_instrumentation.serverSideCallMetadata)();
	    page = page || await this.newPage({
	      ...internalMetadata,
	      // Do not mark this page as internal, because we will leave it for later reuse
	      // as a user-visible page.
	      isServerSide: false
	    });
	    await page._setServerRequestInterceptor((handler) => {
	      handler.fulfill({ body: "<html></html>" }).catch(() => {
	      });
	      return true;
	    });
	    for (const origin of /* @__PURE__ */ new Set([...oldOrigins, ...newOrigins.keys()])) {
	      const frame = page.mainFrame();
	      await frame.goto(internalMetadata, origin);
	      await frame.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin));
	    }
	    await page._setServerRequestInterceptor(void 0);
	    this._origins = /* @__PURE__ */ new Set([...newOrigins.keys()]);
	  }
	  async _resetCookies() {
	    await this.doClearCookies();
	    if (this._options.storageState?.cookies)
	      await this.addCookies(this._options.storageState?.cookies);
	  }
	  isSettingStorageState() {
	    return this._settingStorageState;
	  }
	  async setStorageState(metadata, state) {
	    this._settingStorageState = true;
	    try {
	      if (state.cookies)
	        await this.addCookies(state.cookies);
	      if (state.origins && state.origins.length) {
	        const internalMetadata = (0, import_instrumentation.serverSideCallMetadata)();
	        const page = await this.newPage(internalMetadata);
	        await page._setServerRequestInterceptor((handler) => {
	          handler.fulfill({ body: "<html></html>" }).catch(() => {
	          });
	          return true;
	        });
	        for (const originState of state.origins) {
	          const frame = page.mainFrame();
	          await frame.goto(metadata, originState.origin);
	          await frame.evaluateExpression(`(${storageScript.restore})(${utilityScriptSerializers.source}, (${import_builtins.builtins})(), ${JSON.stringify(originState)})`, { world: "utility" });
	        }
	        await page.close(internalMetadata);
	      }
	    } finally {
	      this._settingStorageState = false;
	    }
	  }
	  async extendInjectedScript(source, arg) {
	    const installInFrame = (frame) => frame.extendInjectedScript(source, arg).catch(() => {
	    });
	    const installInPage = (page) => {
	      page.on(import_page2.Page.Events.InternalFrameNavigatedToNewDocument, installInFrame);
	      return Promise.all(page.frames().map(installInFrame));
	    };
	    this.on(BrowserContext.Events.Page, installInPage);
	    return Promise.all(this.pages().map(installInPage));
	  }
	  async safeNonStallingEvaluateInAllFrames(expression, world, options = {}) {
	    await Promise.all(this.pages().map((page) => page.safeNonStallingEvaluateInAllFrames(expression, world, options)));
	  }
	  async _harStart(page, options) {
	    const harId = (0, import_crypto.createGuid)();
	    this._harRecorders.set(harId, new import_harRecorder.HarRecorder(this, page, options));
	    return harId;
	  }
	  async _harExport(harId) {
	    const recorder = this._harRecorders.get(harId || "");
	    return recorder.export();
	  }
	  addRouteInFlight(route) {
	    this._routesInFlight.add(route);
	  }
	  removeRouteInFlight(route) {
	    this._routesInFlight.delete(route);
	  }
	  async _cancelAllRoutesInFlight() {
	    await Promise.all([...this._routesInFlight].map((r) => r.abort())).catch(() => {
	    });
	    this._routesInFlight.clear();
	  }
	}
	function assertBrowserContextIsNotOwned(context) {
	  for (const page of context.pages()) {
	    if (page._ownedContext)
	      throw new Error("Please use browser.newContext() for multi-page scripts that share the context.");
	  }
	}
	function validateBrowserContextOptions(options, browserOptions) {
	  if (options.noDefaultViewport && options.deviceScaleFactor !== void 0)
	    throw new Error(`"deviceScaleFactor" option is not supported with null "viewport"`);
	  if (options.noDefaultViewport && !!options.isMobile)
	    throw new Error(`"isMobile" option is not supported with null "viewport"`);
	  if (options.acceptDownloads === void 0 && browserOptions.name !== "electron")
	    options.acceptDownloads = "accept";
	  else if (options.acceptDownloads === void 0 && browserOptions.name === "electron")
	    options.acceptDownloads = "internal-browser-default";
	  if (!options.viewport && !options.noDefaultViewport)
	    options.viewport = { width: 1280, height: 720 };
	  if (options.recordVideo) {
	    if (!options.recordVideo.size) {
	      if (options.noDefaultViewport) {
	        options.recordVideo.size = { width: 800, height: 600 };
	      } else {
	        const size = options.viewport;
	        const scale = Math.min(1, 800 / Math.max(size.width, size.height));
	        options.recordVideo.size = {
	          width: Math.floor(size.width * scale),
	          height: Math.floor(size.height * scale)
	        };
	      }
	    }
	    options.recordVideo.size.width &= -2;
	    options.recordVideo.size.height &= -2;
	  }
	  if (options.proxy)
	    options.proxy = normalizeProxySettings(options.proxy);
	  verifyGeolocation(options.geolocation);
	}
	function verifyGeolocation(geolocation) {
	  if (!geolocation)
	    return;
	  geolocation.accuracy = geolocation.accuracy || 0;
	  const { longitude, latitude, accuracy } = geolocation;
	  if (longitude < -180 || longitude > 180)
	    throw new Error(`geolocation.longitude: precondition -180 <= LONGITUDE <= 180 failed.`);
	  if (latitude < -90 || latitude > 90)
	    throw new Error(`geolocation.latitude: precondition -90 <= LATITUDE <= 90 failed.`);
	  if (accuracy < 0)
	    throw new Error(`geolocation.accuracy: precondition 0 <= ACCURACY failed.`);
	}
	function verifyClientCertificates(clientCertificates) {
	  if (!clientCertificates)
	    return;
	  for (const cert of clientCertificates) {
	    if (!cert.origin)
	      throw new Error(`clientCertificates.origin is required`);
	    if (!cert.cert && !cert.key && !cert.passphrase && !cert.pfx)
	      throw new Error("None of cert, key, passphrase or pfx is specified");
	    if (cert.cert && !cert.key)
	      throw new Error("cert is specified without key");
	    if (!cert.cert && cert.key)
	      throw new Error("key is specified without cert");
	    if (cert.pfx && (cert.cert || cert.key))
	      throw new Error("pfx is specified together with cert, key or passphrase");
	  }
	}
	function normalizeProxySettings(proxy) {
	  let { server, bypass } = proxy;
	  let url;
	  try {
	    url = new URL(server);
	    if (!url.host || !url.protocol)
	      url = new URL("http://" + server);
	  } catch (e) {
	    url = new URL("http://" + server);
	  }
	  if (url.protocol === "socks4:" && (proxy.username || proxy.password))
	    throw new Error(`Socks4 proxy protocol does not support authentication`);
	  if (url.protocol === "socks5:" && (proxy.username || proxy.password))
	    throw new Error(`Browser does not support socks5 proxy authentication`);
	  server = url.protocol + "//" + url.host;
	  if (bypass)
	    bypass = bypass.split(",").map((t) => t.trim()).join(",");
	  return { ...proxy, server, bypass };
	}
	const paramsThatAllowContextReuse = [
	  "colorScheme",
	  "forcedColors",
	  "reducedMotion",
	  "contrast",
	  "screen",
	  "userAgent",
	  "viewport"
	];
	const defaultNewContextParamValues = {
	  noDefaultViewport: false,
	  ignoreHTTPSErrors: false,
	  javaScriptEnabled: true,
	  bypassCSP: false,
	  offline: false,
	  isMobile: false,
	  hasTouch: false,
	  acceptDownloads: "accept",
	  strictSelectors: false,
	  serviceWorkers: "allow",
	  locale: "en-US"
	};
	return browserContext$1;
}

var formData;
var hasRequiredFormData;

function requireFormData () {
	if (hasRequiredFormData) return formData;
	hasRequiredFormData = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var formData_exports = {};
	__export(formData_exports, {
	  MultipartFormData: () => MultipartFormData
	});
	formData = __toCommonJS(formData_exports);
	var import_utilsBundle = requireUtilsBundle();
	class MultipartFormData {
	  constructor() {
	    this._chunks = [];
	    this._boundary = generateUniqueBoundaryString();
	  }
	  contentTypeHeader() {
	    return `multipart/form-data; boundary=${this._boundary}`;
	  }
	  addField(name, value) {
	    this._beginMultiPartHeader(name);
	    this._finishMultiPartHeader();
	    this._chunks.push(Buffer.from(value));
	    this._finishMultiPartField();
	  }
	  addFileField(name, value) {
	    this._beginMultiPartHeader(name);
	    this._chunks.push(Buffer.from(`; filename="${value.name}"`));
	    this._chunks.push(Buffer.from(`\r
content-type: ${value.mimeType || import_utilsBundle.mime.getType(value.name) || "application/octet-stream"}`));
	    this._finishMultiPartHeader();
	    this._chunks.push(value.buffer);
	    this._finishMultiPartField();
	  }
	  finish() {
	    this._addBoundary(true);
	    return Buffer.concat(this._chunks);
	  }
	  _beginMultiPartHeader(name) {
	    this._addBoundary();
	    this._chunks.push(Buffer.from(`content-disposition: form-data; name="${name}"`));
	  }
	  _finishMultiPartHeader() {
	    this._chunks.push(Buffer.from(`\r
\r
`));
	  }
	  _finishMultiPartField() {
	    this._chunks.push(Buffer.from(`\r
`));
	  }
	  _addBoundary(isLastBoundary) {
	    this._chunks.push(Buffer.from("--" + this._boundary));
	    if (isLastBoundary)
	      this._chunks.push(Buffer.from("--"));
	    this._chunks.push(Buffer.from("\r\n"));
	  }
	}
	const alphaNumericEncodingMap = [
	  65,
	  66,
	  67,
	  68,
	  69,
	  70,
	  71,
	  72,
	  73,
	  74,
	  75,
	  76,
	  77,
	  78,
	  79,
	  80,
	  81,
	  82,
	  83,
	  84,
	  85,
	  86,
	  87,
	  88,
	  89,
	  90,
	  97,
	  98,
	  99,
	  100,
	  101,
	  102,
	  103,
	  104,
	  105,
	  106,
	  107,
	  108,
	  109,
	  110,
	  111,
	  112,
	  113,
	  114,
	  115,
	  116,
	  117,
	  118,
	  119,
	  120,
	  121,
	  122,
	  48,
	  49,
	  50,
	  51,
	  52,
	  53,
	  54,
	  55,
	  56,
	  57,
	  65,
	  66
	];
	function generateUniqueBoundaryString() {
	  const charCodes = [];
	  for (let i = 0; i < 16; i++)
	    charCodes.push(alphaNumericEncodingMap[Math.floor(Math.random() * alphaNumericEncodingMap.length)]);
	  return "----WebKitFormBoundary" + String.fromCharCode(...charCodes);
	}
	return formData;
}

var fetch$1;
var hasRequiredFetch$1;

function requireFetch$1 () {
	if (hasRequiredFetch$1) return fetch$1;
	hasRequiredFetch$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var fetch_exports = {};
	__export(fetch_exports, {
	  APIRequestContext: () => APIRequestContext,
	  BrowserContextAPIRequestContext: () => BrowserContextAPIRequestContext,
	  GlobalAPIRequestContext: () => GlobalAPIRequestContext
	});
	fetch$1 = __toCommonJS(fetch_exports);
	var import_http = __toESM(require$$19);
	var import_https = __toESM(require$$2$1);
	var import_stream = require$$12;
	var import_tls = require$$9;
	var zlib = __toESM(require$$13);
	var import_timeoutSettings = requireTimeoutSettings$1();
	var import_utils = requireUtils();
	var import_crypto = requireCrypto();
	var import_userAgent = requireUserAgent();
	var import_browserContext = requireBrowserContext$1();
	var import_cookieStore = requireCookieStore();
	var import_formData = requireFormData();
	var import_instrumentation = requireInstrumentation();
	var import_progress = requireProgress();
	var import_socksClientCertificatesInterceptor = requireSocksClientCertificatesInterceptor();
	var import_happyEyeballs = requireHappyEyeballs();
	var import_tracing = requireTracing$1();
	class APIRequestContext extends import_instrumentation.SdkObject {
	  constructor(parent) {
	    super(parent, "request-context");
	    this.fetchResponses = /* @__PURE__ */ new Map();
	    this.fetchLog = /* @__PURE__ */ new Map();
	    this._activeProgressControllers = /* @__PURE__ */ new Set();
	    APIRequestContext.allInstances.add(this);
	  }
	  static {
	    this.Events = {
	      Dispose: "dispose",
	      Request: "request",
	      RequestFinished: "requestfinished"
	    };
	  }
	  static {
	    this.allInstances = /* @__PURE__ */ new Set();
	  }
	  static findResponseBody(guid) {
	    for (const request of APIRequestContext.allInstances) {
	      const body = request.fetchResponses.get(guid);
	      if (body)
	        return body;
	    }
	    return void 0;
	  }
	  _disposeImpl() {
	    APIRequestContext.allInstances.delete(this);
	    this.fetchResponses.clear();
	    this.fetchLog.clear();
	    this.emit(APIRequestContext.Events.Dispose);
	  }
	  disposeResponse(fetchUid) {
	    this.fetchResponses.delete(fetchUid);
	    this.fetchLog.delete(fetchUid);
	  }
	  _storeResponseBody(body) {
	    const uid = (0, import_crypto.createGuid)();
	    this.fetchResponses.set(uid, body);
	    return uid;
	  }
	  async fetch(params, metadata) {
	    const defaults = this._defaultOptions();
	    const headers = {
	      "user-agent": defaults.userAgent,
	      "accept": "*/*",
	      "accept-encoding": "gzip,deflate,br"
	    };
	    if (defaults.extraHTTPHeaders) {
	      for (const { name, value } of defaults.extraHTTPHeaders)
	        setHeader(headers, name, value);
	    }
	    if (params.headers) {
	      for (const { name, value } of params.headers)
	        setHeader(headers, name, value);
	    }
	    const requestUrl = new URL((0, import_utils.constructURLBasedOnBaseURL)(defaults.baseURL, params.url));
	    if (params.encodedParams) {
	      requestUrl.search = params.encodedParams;
	    } else if (params.params) {
	      for (const { name, value } of params.params)
	        requestUrl.searchParams.append(name, value);
	    }
	    const credentials = this._getHttpCredentials(requestUrl);
	    if (credentials?.send === "always")
	      setBasicAuthorizationHeader(headers, credentials);
	    const method = params.method?.toUpperCase() || "GET";
	    const proxy = defaults.proxy;
	    let agent;
	    if (proxy?.server !== "per-context")
	      agent = (0, import_utils.createProxyAgent)(proxy, requestUrl);
	    let maxRedirects = params.maxRedirects ?? (defaults.maxRedirects ?? 20);
	    maxRedirects = maxRedirects === 0 ? -1 : maxRedirects;
	    const timeout = defaults.timeoutSettings.timeout(params);
	    const deadline = timeout && (0, import_utils.monotonicTime)() + timeout;
	    const options = {
	      method,
	      headers,
	      agent,
	      maxRedirects,
	      timeout,
	      deadline,
	      ...(0, import_socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin)(this._defaultOptions().clientCertificates, requestUrl.origin),
	      __testHookLookup: params.__testHookLookup
	    };
	    if (params.ignoreHTTPSErrors || defaults.ignoreHTTPSErrors)
	      options.rejectUnauthorized = false;
	    const postData = serializePostData(params, headers);
	    if (postData)
	      setHeader(headers, "content-length", String(postData.byteLength));
	    const controller = new import_progress.ProgressController(metadata, this);
	    const fetchResponse = await controller.run((progress) => {
	      return this._sendRequestWithRetries(progress, requestUrl, options, postData, params.maxRetries);
	    });
	    const fetchUid = this._storeResponseBody(fetchResponse.body);
	    this.fetchLog.set(fetchUid, controller.metadata.log);
	    const failOnStatusCode = params.failOnStatusCode !== void 0 ? params.failOnStatusCode : !!defaults.failOnStatusCode;
	    if (failOnStatusCode && (fetchResponse.status < 200 || fetchResponse.status >= 400)) {
	      let responseText = "";
	      if (fetchResponse.body.byteLength) {
	        let text = fetchResponse.body.toString("utf8");
	        if (text.length > 1e3)
	          text = text.substring(0, 997) + "...";
	        responseText = `
Response text:
${text}`;
	      }
	      throw new Error(`${fetchResponse.status} ${fetchResponse.statusText}${responseText}`);
	    }
	    return { ...fetchResponse, fetchUid };
	  }
	  _parseSetCookieHeader(responseUrl, setCookie) {
	    if (!setCookie)
	      return [];
	    const url = new URL(responseUrl);
	    const defaultPath = "/" + url.pathname.substr(1).split("/").slice(0, -1).join("/");
	    const cookies = [];
	    for (const header of setCookie) {
	      const cookie = parseCookie(header);
	      if (!cookie)
	        continue;
	      if (!cookie.domain)
	        cookie.domain = url.hostname;
	      else
	        (0, import_utils.assert)(cookie.domain.startsWith(".") || !cookie.domain.includes("."));
	      if (!(0, import_cookieStore.domainMatches)(url.hostname, cookie.domain))
	        continue;
	      if (!cookie.path || !cookie.path.startsWith("/"))
	        cookie.path = defaultPath;
	      cookies.push(cookie);
	    }
	    return cookies;
	  }
	  async _updateRequestCookieHeader(url, headers) {
	    if (getHeader(headers, "cookie") !== void 0)
	      return;
	    const cookies = await this._cookies(url);
	    if (cookies.length) {
	      const valueArray = cookies.map((c) => `${c.name}=${c.value}`);
	      setHeader(headers, "cookie", valueArray.join("; "));
	    }
	  }
	  async _sendRequestWithRetries(progress, url, options, postData, maxRetries) {
	    maxRetries ??= 0;
	    let backoff = 250;
	    for (let i = 0; i <= maxRetries; i++) {
	      try {
	        return await this._sendRequest(progress, url, options, postData);
	      } catch (e) {
	        e = (0, import_socksClientCertificatesInterceptor.rewriteOpenSSLErrorIfNeeded)(e);
	        if (maxRetries === 0)
	          throw e;
	        if (i === maxRetries || options.deadline && (0, import_utils.monotonicTime)() + backoff > options.deadline)
	          throw new Error(`Failed after ${i + 1} attempt(s): ${e}`);
	        if (e.code !== "ECONNRESET")
	          throw e;
	        progress.log(`  Received ECONNRESET, will retry after ${backoff}ms.`);
	        await new Promise((f) => setTimeout(f, backoff));
	        backoff *= 2;
	      }
	    }
	    throw new Error("Unreachable");
	  }
	  async _sendRequest(progress, url, options, postData) {
	    await this._updateRequestCookieHeader(url, options.headers);
	    const requestCookies = getHeader(options.headers, "cookie")?.split(";").map((p) => {
	      const [name, value] = p.split("=").map((v) => v.trim());
	      return { name, value };
	    }) || [];
	    const requestEvent = {
	      url,
	      method: options.method,
	      headers: options.headers,
	      cookies: requestCookies,
	      postData
	    };
	    this.emit(APIRequestContext.Events.Request, requestEvent);
	    return new Promise((fulfill, reject) => {
	      const requestConstructor = (url.protocol === "https:" ? import_https.default : import_http.default).request;
	      const agent = options.agent || (url.protocol === "https:" ? import_happyEyeballs.httpsHappyEyeballsAgent : import_happyEyeballs.httpHappyEyeballsAgent);
	      const requestOptions = { ...options, agent };
	      const startAt = (0, import_utils.monotonicTime)();
	      let reusedSocketAt;
	      let dnsLookupAt;
	      let tcpConnectionAt;
	      let tlsHandshakeAt;
	      let requestFinishAt;
	      let serverIPAddress;
	      let serverPort;
	      let securityDetails;
	      const listeners = [];
	      const request = requestConstructor(url, requestOptions, async (response) => {
	        const responseAt = (0, import_utils.monotonicTime)();
	        const notifyRequestFinished = (body2) => {
	          const endAt = (0, import_utils.monotonicTime)();
	          const connectEnd = tlsHandshakeAt ?? tcpConnectionAt;
	          const timings = {
	            send: requestFinishAt - startAt,
	            wait: responseAt - requestFinishAt,
	            receive: endAt - responseAt,
	            dns: dnsLookupAt ? dnsLookupAt - startAt : -1,
	            connect: connectEnd ? connectEnd - startAt : -1,
	            // "If [ssl] is defined then the time is also included in the connect field "
	            ssl: tlsHandshakeAt ? tlsHandshakeAt - tcpConnectionAt : -1,
	            blocked: reusedSocketAt ? reusedSocketAt - startAt : -1
	          };
	          const requestFinishedEvent = {
	            requestEvent,
	            httpVersion: response.httpVersion,
	            statusCode: response.statusCode || 0,
	            statusMessage: response.statusMessage || "",
	            headers: response.headers,
	            rawHeaders: response.rawHeaders,
	            cookies,
	            body: body2,
	            timings,
	            serverIPAddress,
	            serverPort,
	            securityDetails
	          };
	          this.emit(APIRequestContext.Events.RequestFinished, requestFinishedEvent);
	        };
	        progress.log(`\u2190 ${response.statusCode} ${response.statusMessage}`);
	        for (const [name, value] of Object.entries(response.headers))
	          progress.log(`  ${name}: ${value}`);
	        const cookies = this._parseSetCookieHeader(response.url || url.toString(), response.headers["set-cookie"]);
	        if (cookies.length) {
	          try {
	            await this._addCookies(cookies);
	          } catch (e) {
	            await Promise.all(cookies.map((c) => this._addCookies([c]).catch(() => {
	            })));
	          }
	        }
	        if (redirectStatus.includes(response.statusCode) && options.maxRedirects >= 0) {
	          if (options.maxRedirects === 0) {
	            reject(new Error("Max redirect count exceeded"));
	            request.destroy();
	            return;
	          }
	          const headers = { ...options.headers };
	          removeHeader(headers, `cookie`);
	          const status = response.statusCode;
	          let method = options.method;
	          if ((status === 301 || status === 302) && method === "POST" || status === 303 && !["GET", "HEAD"].includes(method)) {
	            method = "GET";
	            postData = void 0;
	            removeHeader(headers, `content-encoding`);
	            removeHeader(headers, `content-language`);
	            removeHeader(headers, `content-length`);
	            removeHeader(headers, `content-location`);
	            removeHeader(headers, `content-type`);
	          }
	          const redirectOptions = {
	            method,
	            headers,
	            agent: options.agent,
	            maxRedirects: options.maxRedirects - 1,
	            timeout: options.timeout,
	            deadline: options.deadline,
	            ...(0, import_socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin)(this._defaultOptions().clientCertificates, url.origin),
	            __testHookLookup: options.__testHookLookup
	          };
	          if (options.rejectUnauthorized === false)
	            redirectOptions.rejectUnauthorized = false;
	          const locationHeaderValue = Buffer.from(response.headers.location ?? "", "latin1").toString("utf8");
	          if (locationHeaderValue) {
	            let locationURL;
	            try {
	              locationURL = new URL(locationHeaderValue, url);
	            } catch (error) {
	              reject(new Error(`uri requested responds with an invalid redirect URL: ${locationHeaderValue}`));
	              request.destroy();
	              return;
	            }
	            if (headers["host"])
	              headers["host"] = locationURL.host;
	            notifyRequestFinished();
	            fulfill(this._sendRequest(progress, locationURL, redirectOptions, postData));
	            request.destroy();
	            return;
	          }
	        }
	        if (response.statusCode === 401 && !getHeader(options.headers, "authorization")) {
	          const auth = response.headers["www-authenticate"];
	          const credentials = this._getHttpCredentials(url);
	          if (auth?.trim().startsWith("Basic") && credentials) {
	            setBasicAuthorizationHeader(options.headers, credentials);
	            notifyRequestFinished();
	            fulfill(this._sendRequest(progress, url, options, postData));
	            request.destroy();
	            return;
	          }
	        }
	        response.on("aborted", () => reject(new Error("aborted")));
	        const chunks = [];
	        const notifyBodyFinished = () => {
	          const body2 = Buffer.concat(chunks);
	          notifyRequestFinished(body2);
	          fulfill({
	            url: response.url || url.toString(),
	            status: response.statusCode || 0,
	            statusText: response.statusMessage || "",
	            headers: toHeadersArray(response.rawHeaders),
	            body: body2
	          });
	        };
	        let body = response;
	        let transform;
	        const encoding = response.headers["content-encoding"];
	        if (encoding === "gzip" || encoding === "x-gzip") {
	          transform = zlib.createGunzip({
	            flush: zlib.constants.Z_SYNC_FLUSH,
	            finishFlush: zlib.constants.Z_SYNC_FLUSH
	          });
	        } else if (encoding === "br") {
	          transform = zlib.createBrotliDecompress({
	            flush: zlib.constants.BROTLI_OPERATION_FLUSH,
	            finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH
	          });
	        } else if (encoding === "deflate") {
	          transform = zlib.createInflate();
	        }
	        if (transform) {
	          const emptyStreamTransform = new SafeEmptyStreamTransform(notifyBodyFinished);
	          body = (0, import_stream.pipeline)(response, emptyStreamTransform, transform, (e) => {
	            if (e)
	              reject(new Error(`failed to decompress '${encoding}' encoding: ${e.message}`));
	          });
	          body.on("error", (e) => reject(new Error(`failed to decompress '${encoding}' encoding: ${e}`)));
	        } else {
	          body.on("error", reject);
	        }
	        body.on("data", (chunk) => chunks.push(chunk));
	        body.on("end", notifyBodyFinished);
	      });
	      request.on("error", reject);
	      listeners.push(
	        import_utils.eventsHelper.addEventListener(this, APIRequestContext.Events.Dispose, () => {
	          reject(new Error("Request context disposed."));
	          request.destroy();
	        })
	      );
	      request.on("close", () => import_utils.eventsHelper.removeEventListeners(listeners));
	      request.on("socket", (socket) => {
	        if (request.reusedSocket) {
	          reusedSocketAt = (0, import_utils.monotonicTime)();
	          return;
	        }
	        const happyEyeBallsTimings = (0, import_happyEyeballs.timingForSocket)(socket);
	        dnsLookupAt = happyEyeBallsTimings.dnsLookupAt;
	        tcpConnectionAt = happyEyeBallsTimings.tcpConnectionAt;
	        listeners.push(
	          import_utils.eventsHelper.addEventListener(socket, "lookup", () => {
	            dnsLookupAt = (0, import_utils.monotonicTime)();
	          }),
	          import_utils.eventsHelper.addEventListener(socket, "connect", () => {
	            tcpConnectionAt = (0, import_utils.monotonicTime)();
	          }),
	          import_utils.eventsHelper.addEventListener(socket, "secureConnect", () => {
	            tlsHandshakeAt = (0, import_utils.monotonicTime)();
	            if (socket instanceof import_tls.TLSSocket) {
	              const peerCertificate = socket.getPeerCertificate();
	              securityDetails = {
	                protocol: socket.getProtocol() ?? void 0,
	                subjectName: peerCertificate.subject.CN,
	                validFrom: new Date(peerCertificate.valid_from).getTime() / 1e3,
	                validTo: new Date(peerCertificate.valid_to).getTime() / 1e3,
	                issuer: peerCertificate.issuer.CN
	              };
	            }
	          })
	        );
	        serverIPAddress = socket.remoteAddress;
	        serverPort = socket.remotePort;
	      });
	      request.on("finish", () => {
	        requestFinishAt = (0, import_utils.monotonicTime)();
	      });
	      progress.log(`\u2192 ${options.method} ${url.toString()}`);
	      if (options.headers) {
	        for (const [name, value] of Object.entries(options.headers))
	          progress.log(`  ${name}: ${value}`);
	      }
	      if (options.deadline) {
	        const rejectOnTimeout = () => {
	          reject(new Error(`Request timed out after ${options.timeout}ms`));
	          request.destroy();
	        };
	        const remaining = options.deadline - (0, import_utils.monotonicTime)();
	        if (remaining <= 0) {
	          rejectOnTimeout();
	          return;
	        }
	        request.setTimeout(remaining, rejectOnTimeout);
	      }
	      if (postData)
	        request.write(postData);
	      request.end();
	    });
	  }
	  _getHttpCredentials(url) {
	    if (!this._defaultOptions().httpCredentials?.origin || url.origin.toLowerCase() === this._defaultOptions().httpCredentials?.origin?.toLowerCase())
	      return this._defaultOptions().httpCredentials;
	    return void 0;
	  }
	}
	class SafeEmptyStreamTransform extends import_stream.Transform {
	  constructor(onEmptyStreamCallback) {
	    super();
	    this._receivedSomeData = false;
	    this._onEmptyStreamCallback = onEmptyStreamCallback;
	  }
	  _transform(chunk, encoding, callback) {
	    this._receivedSomeData = true;
	    callback(null, chunk);
	  }
	  _flush(callback) {
	    if (this._receivedSomeData)
	      callback(null);
	    else
	      this._onEmptyStreamCallback();
	  }
	}
	class BrowserContextAPIRequestContext extends APIRequestContext {
	  constructor(context) {
	    super(context);
	    this._context = context;
	    context.once(import_browserContext.BrowserContext.Events.Close, () => this._disposeImpl());
	  }
	  tracing() {
	    return this._context.tracing;
	  }
	  async dispose(options) {
	    this._closeReason = options.reason;
	    this.fetchResponses.clear();
	  }
	  _defaultOptions() {
	    return {
	      userAgent: this._context._options.userAgent || this._context._browser.userAgent(),
	      extraHTTPHeaders: this._context._options.extraHTTPHeaders,
	      failOnStatusCode: void 0,
	      httpCredentials: this._context._options.httpCredentials,
	      proxy: this._context._options.proxy || this._context._browser.options.proxy,
	      timeoutSettings: this._context._timeoutSettings,
	      ignoreHTTPSErrors: this._context._options.ignoreHTTPSErrors,
	      baseURL: this._context._options.baseURL,
	      clientCertificates: this._context._options.clientCertificates
	    };
	  }
	  async _addCookies(cookies) {
	    await this._context.addCookies(cookies);
	  }
	  async _cookies(url) {
	    return await this._context.cookies(url.toString());
	  }
	  async storageState(indexedDB) {
	    return this._context.storageState(indexedDB);
	  }
	}
	class GlobalAPIRequestContext extends APIRequestContext {
	  constructor(playwright, options) {
	    super(playwright);
	    this._cookieStore = new import_cookieStore.CookieStore();
	    this.attribution.context = this;
	    const timeoutSettings = new import_timeoutSettings.TimeoutSettings();
	    if (options.timeout !== void 0)
	      timeoutSettings.setDefaultTimeout(options.timeout);
	    if (options.storageState) {
	      this._origins = options.storageState.origins?.map((origin) => ({ indexedDB: [], ...origin }));
	      this._cookieStore.addCookies(options.storageState.cookies || []);
	    }
	    (0, import_browserContext.verifyClientCertificates)(options.clientCertificates);
	    this._options = {
	      baseURL: options.baseURL,
	      userAgent: options.userAgent || (0, import_userAgent.getUserAgent)(),
	      extraHTTPHeaders: options.extraHTTPHeaders,
	      failOnStatusCode: !!options.failOnStatusCode,
	      ignoreHTTPSErrors: !!options.ignoreHTTPSErrors,
	      maxRedirects: options.maxRedirects,
	      httpCredentials: options.httpCredentials,
	      clientCertificates: options.clientCertificates,
	      proxy: options.proxy,
	      timeoutSettings
	    };
	    this._tracing = new import_tracing.Tracing(this, options.tracesDir);
	  }
	  tracing() {
	    return this._tracing;
	  }
	  async dispose(options) {
	    this._closeReason = options.reason;
	    await this._tracing.flush();
	    await this._tracing.deleteTmpTracesDir();
	    this._disposeImpl();
	  }
	  _defaultOptions() {
	    return this._options;
	  }
	  async _addCookies(cookies) {
	    this._cookieStore.addCookies(cookies);
	  }
	  async _cookies(url) {
	    return this._cookieStore.cookies(url);
	  }
	  async storageState(indexedDB = false) {
	    return {
	      cookies: this._cookieStore.allCookies(),
	      origins: (this._origins || []).map((origin) => ({ ...origin, indexedDB: indexedDB ? origin.indexedDB : [] }))
	    };
	  }
	}
	function toHeadersArray(rawHeaders) {
	  const result = [];
	  for (let i = 0; i < rawHeaders.length; i += 2)
	    result.push({ name: rawHeaders[i], value: rawHeaders[i + 1] });
	  return result;
	}
	const redirectStatus = [301, 302, 303, 307, 308];
	function parseCookie(header) {
	  const raw = (0, import_cookieStore.parseRawCookie)(header);
	  if (!raw)
	    return null;
	  const cookie = {
	    domain: "",
	    path: "",
	    expires: -1,
	    httpOnly: false,
	    secure: false,
	    // From https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite
	    // The cookie-sending behavior if SameSite is not specified is SameSite=Lax.
	    sameSite: "Lax",
	    ...raw
	  };
	  return cookie;
	}
	function serializePostData(params, headers) {
	  (0, import_utils.assert)((params.postData ? 1 : 0) + (params.jsonData ? 1 : 0) + (params.formData ? 1 : 0) + (params.multipartData ? 1 : 0) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
	  if (params.jsonData !== void 0) {
	    setHeader(headers, "content-type", "application/json", true);
	    return Buffer.from(params.jsonData, "utf8");
	  } else if (params.formData) {
	    const searchParams = new URLSearchParams();
	    for (const { name, value } of params.formData)
	      searchParams.append(name, value);
	    setHeader(headers, "content-type", "application/x-www-form-urlencoded", true);
	    return Buffer.from(searchParams.toString(), "utf8");
	  } else if (params.multipartData) {
	    const formData = new import_formData.MultipartFormData();
	    for (const field of params.multipartData) {
	      if (field.file)
	        formData.addFileField(field.name, field.file);
	      else if (field.value)
	        formData.addField(field.name, field.value);
	    }
	    setHeader(headers, "content-type", formData.contentTypeHeader(), true);
	    return formData.finish();
	  } else if (params.postData !== void 0) {
	    setHeader(headers, "content-type", "application/octet-stream", true);
	    return params.postData;
	  }
	  return void 0;
	}
	function setHeader(headers, name, value, keepExisting = false) {
	  const existing = Object.entries(headers).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
	  if (!existing)
	    headers[name] = value;
	  else if (!keepExisting)
	    headers[existing[0]] = value;
	}
	function getHeader(headers, name) {
	  const existing = Object.entries(headers).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
	  return existing ? existing[1] : void 0;
	}
	function removeHeader(headers, name) {
	  delete headers[name];
	}
	function setBasicAuthorizationHeader(headers, credentials) {
	  const { username, password } = credentials;
	  const encoded = Buffer.from(`${username || ""}:${password || ""}`).toString("base64");
	  setHeader(headers, "authorization", `Basic ${encoded}`);
	}
	return fetch$1;
}

var streamDispatcher;
var hasRequiredStreamDispatcher;

function requireStreamDispatcher () {
	if (hasRequiredStreamDispatcher) return streamDispatcher;
	hasRequiredStreamDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var streamDispatcher_exports = {};
	__export(streamDispatcher_exports, {
	  StreamDispatcher: () => StreamDispatcher
	});
	streamDispatcher = __toCommonJS(streamDispatcher_exports);
	var import_dispatcher = requireDispatcher();
	var import_manualPromise = requireManualPromise();
	var import_crypto = requireCrypto();
	class StreamDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, stream) {
	    super(scope, { guid: "stream@" + (0, import_crypto.createGuid)(), stream }, "Stream", {});
	    this._type_Stream = true;
	    this._ended = false;
	    stream.once("end", () => this._ended = true);
	    stream.once("error", () => this._ended = true);
	  }
	  async read(params) {
	    const stream = this._object.stream;
	    if (this._ended)
	      return { binary: Buffer.from("") };
	    if (!stream.readableLength) {
	      const readyPromise = new import_manualPromise.ManualPromise();
	      const done = () => readyPromise.resolve();
	      stream.on("readable", done);
	      stream.on("end", done);
	      stream.on("error", done);
	      await readyPromise;
	      stream.off("readable", done);
	      stream.off("end", done);
	      stream.off("error", done);
	    }
	    const buffer = stream.read(Math.min(stream.readableLength, params.size || stream.readableLength));
	    return { binary: buffer || Buffer.from("") };
	  }
	  async close() {
	    this._object.stream.destroy();
	  }
	}
	return streamDispatcher;
}

var artifactDispatcher;
var hasRequiredArtifactDispatcher;

function requireArtifactDispatcher () {
	if (hasRequiredArtifactDispatcher) return artifactDispatcher;
	hasRequiredArtifactDispatcher = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var artifactDispatcher_exports = {};
	__export(artifactDispatcher_exports, {
	  ArtifactDispatcher: () => ArtifactDispatcher
	});
	artifactDispatcher = __toCommonJS(artifactDispatcher_exports);
	var import_fs = __toESM(require$$0$4);
	var import_dispatcher = requireDispatcher();
	var import_streamDispatcher = requireStreamDispatcher();
	var import_fileUtils = requireFileUtils$1();
	class ArtifactDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, artifact) {
	    super(scope, artifact, "Artifact", {
	      absolutePath: artifact.localPath()
	    });
	    this._type_Artifact = true;
	  }
	  static from(parentScope, artifact) {
	    return ArtifactDispatcher.fromNullable(parentScope, artifact);
	  }
	  static fromNullable(parentScope, artifact) {
	    if (!artifact)
	      return void 0;
	    const result = (0, import_dispatcher.existingDispatcher)(artifact);
	    return result || new ArtifactDispatcher(parentScope, artifact);
	  }
	  async pathAfterFinished() {
	    const path = await this._object.localPathAfterFinished();
	    return { value: path };
	  }
	  async saveAs(params) {
	    return await new Promise((resolve, reject) => {
	      this._object.saveAs(async (localPath, error) => {
	        if (error) {
	          reject(error);
	          return;
	        }
	        try {
	          await (0, import_fileUtils.mkdirIfNeeded)(params.path);
	          await import_fs.default.promises.copyFile(localPath, params.path);
	          resolve();
	        } catch (e) {
	          reject(e);
	        }
	      });
	    });
	  }
	  async saveAsStream() {
	    return await new Promise((resolve, reject) => {
	      this._object.saveAs(async (localPath, error) => {
	        if (error) {
	          reject(error);
	          return;
	        }
	        try {
	          const readable = import_fs.default.createReadStream(localPath, { highWaterMark: 1024 * 1024 });
	          const stream = new import_streamDispatcher.StreamDispatcher(this, readable);
	          resolve({ stream });
	          await new Promise((resolve2) => {
	            readable.on("close", resolve2);
	            readable.on("end", resolve2);
	            readable.on("error", resolve2);
	          });
	        } catch (e) {
	          reject(e);
	        }
	      });
	    });
	  }
	  async stream() {
	    const fileName = await this._object.localPathAfterFinished();
	    const readable = import_fs.default.createReadStream(fileName, { highWaterMark: 1024 * 1024 });
	    return { stream: new import_streamDispatcher.StreamDispatcher(this, readable) };
	  }
	  async failure() {
	    const error = await this._object.failureError();
	    return { error: error || void 0 };
	  }
	  async cancel() {
	    await this._object.cancel();
	  }
	  async delete(_, metadata) {
	    metadata.potentiallyClosesScope = true;
	    await this._object.delete();
	    this._dispose();
	  }
	}
	return artifactDispatcher;
}

var cdpSessionDispatcher;
var hasRequiredCdpSessionDispatcher;

function requireCdpSessionDispatcher () {
	if (hasRequiredCdpSessionDispatcher) return cdpSessionDispatcher;
	hasRequiredCdpSessionDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var cdpSessionDispatcher_exports = {};
	__export(cdpSessionDispatcher_exports, {
	  CDPSessionDispatcher: () => CDPSessionDispatcher
	});
	cdpSessionDispatcher = __toCommonJS(cdpSessionDispatcher_exports);
	var import_dispatcher = requireDispatcher();
	var import_crConnection = requireCrConnection();
	class CDPSessionDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, cdpSession) {
	    super(scope, cdpSession, "CDPSession", {});
	    this._type_CDPSession = true;
	    this.addObjectListener(import_crConnection.CDPSession.Events.Event, ({ method, params }) => this._dispatchEvent("event", { method, params }));
	    this.addObjectListener(import_crConnection.CDPSession.Events.Closed, () => this._dispose());
	  }
	  async send(params) {
	    return { result: await this._object.send(params.method, params.params) };
	  }
	  async detach(_, metadata) {
	    metadata.potentiallyClosesScope = true;
	    await this._object.detach();
	  }
	}
	return cdpSessionDispatcher;
}

var jsHandleDispatcher;
var hasRequiredJsHandleDispatcher;

function requireJsHandleDispatcher () {
	if (hasRequiredJsHandleDispatcher) return jsHandleDispatcher;
	hasRequiredJsHandleDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var jsHandleDispatcher_exports = {};
	__export(jsHandleDispatcher_exports, {
	  JSHandleDispatcher: () => JSHandleDispatcher,
	  parseArgument: () => parseArgument,
	  parseValue: () => parseValue,
	  serializeResult: () => serializeResult
	});
	jsHandleDispatcher = __toCommonJS(jsHandleDispatcher_exports);
	var import_dispatcher = requireDispatcher();
	var import_elementHandlerDispatcher = requireElementHandlerDispatcher();
	var import_serializers = requireSerializers();
	class JSHandleDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, jsHandle) {
	    super(scope, jsHandle, jsHandle.asElement() ? "ElementHandle" : "JSHandle", {
	      preview: jsHandle.toString()
	    });
	    this._type_JSHandle = true;
	    jsHandle._setPreviewCallback((preview) => this._dispatchEvent("previewUpdated", { preview }));
	  }
	  async evaluateExpression(params) {
	    return { value: serializeResult(await this._object.evaluateExpression(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg))) };
	  }
	  async evaluateExpressionHandle(params) {
	    const jsHandle = await this._object.evaluateExpressionHandle(params.expression, { isFunction: params.isFunction }, parseArgument(params.arg));
	    return { handle: import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle) };
	  }
	  async getProperty(params) {
	    const jsHandle = await this._object.getProperty(params.name);
	    return { handle: import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle) };
	  }
	  async getPropertyList() {
	    const map = await this._object.getProperties();
	    const properties = [];
	    for (const [name, value] of map)
	      properties.push({ name, value: import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), value) });
	    return { properties };
	  }
	  async jsonValue() {
	    return { value: serializeResult(await this._object.jsonValue()) };
	  }
	  async dispose(_, metadata) {
	    metadata.potentiallyClosesScope = true;
	    this._object.dispose();
	    this._dispose();
	  }
	}
	function parseArgument(arg) {
	  return (0, import_serializers.parseSerializedValue)(arg.value, arg.handles.map((a) => a._object));
	}
	function parseValue(v) {
	  return (0, import_serializers.parseSerializedValue)(v, []);
	}
	function serializeResult(arg) {
	  return (0, import_serializers.serializeValue)(arg, (value) => ({ fallThrough: value }));
	}
	return jsHandleDispatcher;
}

var tracingDispatcher;
var hasRequiredTracingDispatcher;

function requireTracingDispatcher () {
	if (hasRequiredTracingDispatcher) return tracingDispatcher;
	hasRequiredTracingDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var tracingDispatcher_exports = {};
	__export(tracingDispatcher_exports, {
	  TracingDispatcher: () => TracingDispatcher
	});
	tracingDispatcher = __toCommonJS(tracingDispatcher_exports);
	var import_artifactDispatcher = requireArtifactDispatcher();
	var import_dispatcher = requireDispatcher();
	class TracingDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, tracing) {
	    super(scope, tracing, "Tracing", {});
	    this._type_Tracing = true;
	  }
	  static from(scope, tracing) {
	    const result = (0, import_dispatcher.existingDispatcher)(tracing);
	    return result || new TracingDispatcher(scope, tracing);
	  }
	  async tracingStart(params) {
	    await this._object.start(params);
	  }
	  async tracingStartChunk(params) {
	    return await this._object.startChunk(params);
	  }
	  async tracingGroup(params, metadata) {
	    const { name, location } = params;
	    await this._object.group(name, location, metadata);
	  }
	  async tracingGroupEnd(params) {
	    await this._object.groupEnd();
	  }
	  async tracingStopChunk(params) {
	    const { artifact, entries } = await this._object.stopChunk(params);
	    return { artifact: artifact ? import_artifactDispatcher.ArtifactDispatcher.from(this, artifact) : void 0, entries };
	  }
	  async tracingStop(params) {
	    await this._object.stop();
	  }
	}
	return tracingDispatcher;
}

var networkDispatchers;
var hasRequiredNetworkDispatchers;

function requireNetworkDispatchers () {
	if (hasRequiredNetworkDispatchers) return networkDispatchers;
	hasRequiredNetworkDispatchers = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var networkDispatchers_exports = {};
	__export(networkDispatchers_exports, {
	  APIRequestContextDispatcher: () => APIRequestContextDispatcher,
	  RequestDispatcher: () => RequestDispatcher,
	  ResponseDispatcher: () => ResponseDispatcher,
	  RouteDispatcher: () => RouteDispatcher,
	  WebSocketDispatcher: () => WebSocketDispatcher
	});
	networkDispatchers = __toCommonJS(networkDispatchers_exports);
	var import_network = requireNetwork$1();
	var import_dispatcher = requireDispatcher();
	var import_frameDispatcher = requireFrameDispatcher();
	var import_pageDispatcher = requirePageDispatcher();
	var import_tracingDispatcher = requireTracingDispatcher();
	class RequestDispatcher extends import_dispatcher.Dispatcher {
	  static from(scope, request) {
	    const result = (0, import_dispatcher.existingDispatcher)(request);
	    return result || new RequestDispatcher(scope, request);
	  }
	  static fromNullable(scope, request) {
	    return request ? RequestDispatcher.from(scope, request) : void 0;
	  }
	  constructor(scope, request) {
	    const postData = request.postDataBuffer();
	    const frame = request.frame();
	    const page = request.frame()?._page;
	    const pageDispatcher = page ? (0, import_dispatcher.existingDispatcher)(page) : null;
	    const frameDispatcher = frame ? import_frameDispatcher.FrameDispatcher.from(scope, frame) : null;
	    super(pageDispatcher || frameDispatcher || scope, request, "Request", {
	      frame: import_frameDispatcher.FrameDispatcher.fromNullable(scope, request.frame()),
	      serviceWorker: import_pageDispatcher.WorkerDispatcher.fromNullable(scope, request.serviceWorker()),
	      url: request.url(),
	      resourceType: request.resourceType(),
	      method: request.method(),
	      postData: postData === null ? void 0 : postData,
	      headers: request.headers(),
	      isNavigationRequest: request.isNavigationRequest(),
	      redirectedFrom: RequestDispatcher.fromNullable(scope, request.redirectedFrom())
	    });
	    this._type_Request = true;
	    this._browserContextDispatcher = scope;
	  }
	  async rawRequestHeaders(params) {
	    return { headers: await this._object.rawRequestHeaders() };
	  }
	  async response() {
	    return { response: ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._object.response()) };
	  }
	}
	class ResponseDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, response) {
	    super(scope, response, "Response", {
	      // TODO: responses in popups can point to non-reported requests.
	      request: scope,
	      url: response.url(),
	      status: response.status(),
	      statusText: response.statusText(),
	      headers: response.headers(),
	      timing: response.timing(),
	      fromServiceWorker: response.fromServiceWorker()
	    });
	    this._type_Response = true;
	  }
	  static from(scope, response) {
	    const result = (0, import_dispatcher.existingDispatcher)(response);
	    const requestDispatcher = RequestDispatcher.from(scope, response.request());
	    return result || new ResponseDispatcher(requestDispatcher, response);
	  }
	  static fromNullable(scope, response) {
	    return response ? ResponseDispatcher.from(scope, response) : void 0;
	  }
	  async body() {
	    return { binary: await this._object.body() };
	  }
	  async securityDetails() {
	    return { value: await this._object.securityDetails() || void 0 };
	  }
	  async serverAddr() {
	    return { value: await this._object.serverAddr() || void 0 };
	  }
	  async rawResponseHeaders(params) {
	    return { headers: await this._object.rawResponseHeaders() };
	  }
	  async sizes(params) {
	    return { sizes: await this._object.sizes() };
	  }
	}
	class RouteDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, route) {
	    super(scope, route, "Route", {
	      // Context route can point to a non-reported request, so we send the request in the initializer.
	      request: scope
	    });
	    this._type_Route = true;
	  }
	  static from(scope, route) {
	    const result = (0, import_dispatcher.existingDispatcher)(route);
	    return result || new RouteDispatcher(scope, route);
	  }
	  async continue(params, metadata) {
	    await this._object.continue({
	      url: params.url,
	      method: params.method,
	      headers: params.headers,
	      postData: params.postData,
	      isFallback: params.isFallback
	    });
	  }
	  async fulfill(params, metadata) {
	    await this._object.fulfill(params);
	  }
	  async abort(params, metadata) {
	    await this._object.abort(params.errorCode || "failed");
	  }
	  async redirectNavigationRequest(params) {
	    await this._object.redirectNavigationRequest(params.url);
	  }
	}
	class WebSocketDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, webSocket) {
	    super(scope, webSocket, "WebSocket", {
	      url: webSocket.url()
	    });
	    this._type_EventTarget = true;
	    this._type_WebSocket = true;
	    this.addObjectListener(import_network.WebSocket.Events.FrameSent, (event) => this._dispatchEvent("frameSent", event));
	    this.addObjectListener(import_network.WebSocket.Events.FrameReceived, (event) => this._dispatchEvent("frameReceived", event));
	    this.addObjectListener(import_network.WebSocket.Events.SocketError, (error) => this._dispatchEvent("socketError", { error }));
	    this.addObjectListener(import_network.WebSocket.Events.Close, () => this._dispatchEvent("close", {}));
	  }
	}
	class APIRequestContextDispatcher extends import_dispatcher.Dispatcher {
	  constructor(parentScope, request) {
	    const tracing = import_tracingDispatcher.TracingDispatcher.from(parentScope, request.tracing());
	    super(parentScope, request, "APIRequestContext", {
	      tracing
	    });
	    this._type_APIRequestContext = true;
	    this.adopt(tracing);
	  }
	  static from(scope, request) {
	    const result = (0, import_dispatcher.existingDispatcher)(request);
	    return result || new APIRequestContextDispatcher(scope, request);
	  }
	  static fromNullable(scope, request) {
	    return request ? APIRequestContextDispatcher.from(scope, request) : void 0;
	  }
	  async storageState(params) {
	    return this._object.storageState(params.indexedDB);
	  }
	  async dispose(params, metadata) {
	    metadata.potentiallyClosesScope = true;
	    await this._object.dispose(params);
	    this._dispose();
	  }
	  async fetch(params, metadata) {
	    const fetchResponse = await this._object.fetch(params, metadata);
	    return {
	      response: {
	        url: fetchResponse.url,
	        status: fetchResponse.status,
	        statusText: fetchResponse.statusText,
	        headers: fetchResponse.headers,
	        fetchUid: fetchResponse.fetchUid
	      }
	    };
	  }
	  async fetchResponseBody(params) {
	    return { binary: this._object.fetchResponses.get(params.fetchUid) };
	  }
	  async fetchLog(params) {
	    const log = this._object.fetchLog.get(params.fetchUid) || [];
	    return { log };
	  }
	  async disposeAPIResponse(params) {
	    this._object.disposeResponse(params.fetchUid);
	  }
	}
	return networkDispatchers;
}

var frameDispatcher;
var hasRequiredFrameDispatcher;

function requireFrameDispatcher () {
	if (hasRequiredFrameDispatcher) return frameDispatcher;
	hasRequiredFrameDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var frameDispatcher_exports = {};
	__export(frameDispatcher_exports, {
	  FrameDispatcher: () => FrameDispatcher
	});
	frameDispatcher = __toCommonJS(frameDispatcher_exports);
	var import_frames = requireFrames();
	var import_dispatcher = requireDispatcher();
	var import_elementHandlerDispatcher = requireElementHandlerDispatcher();
	var import_jsHandleDispatcher = requireJsHandleDispatcher();
	var import_networkDispatchers = requireNetworkDispatchers();
	var import_networkDispatchers2 = requireNetworkDispatchers();
	var import_ariaSnapshot = requireAriaSnapshot();
	var import_utilsBundle = requireUtilsBundle();
	class FrameDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, frame) {
	    const gcBucket = frame._page.mainFrame() === frame ? "MainFrame" : "Frame";
	    const pageDispatcher = (0, import_dispatcher.existingDispatcher)(frame._page);
	    super(pageDispatcher || scope, frame, "Frame", {
	      url: frame.url(),
	      name: frame.name(),
	      parentFrame: FrameDispatcher.fromNullable(scope, frame.parentFrame()),
	      loadStates: Array.from(frame._firedLifecycleEvents)
	    }, gcBucket);
	    this._type_Frame = true;
	    this._browserContextDispatcher = scope;
	    this._frame = frame;
	    this.addObjectListener(import_frames.Frame.Events.AddLifecycle, (lifecycleEvent) => {
	      this._dispatchEvent("loadstate", { add: lifecycleEvent });
	    });
	    this.addObjectListener(import_frames.Frame.Events.RemoveLifecycle, (lifecycleEvent) => {
	      this._dispatchEvent("loadstate", { remove: lifecycleEvent });
	    });
	    this.addObjectListener(import_frames.Frame.Events.InternalNavigation, (event) => {
	      if (!event.isPublic)
	        return;
	      const params = { url: event.url, name: event.name, error: event.error ? event.error.message : void 0 };
	      if (event.newDocument)
	        params.newDocument = { request: import_networkDispatchers2.RequestDispatcher.fromNullable(this._browserContextDispatcher, event.newDocument.request || null) };
	      this._dispatchEvent("navigated", params);
	    });
	  }
	  static from(scope, frame) {
	    const result = (0, import_dispatcher.existingDispatcher)(frame);
	    return result || new FrameDispatcher(scope, frame);
	  }
	  static fromNullable(scope, frame) {
	    if (!frame)
	      return;
	    return FrameDispatcher.from(scope, frame);
	  }
	  async goto(params, metadata) {
	    return { response: import_networkDispatchers.ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._frame.goto(metadata, params.url, params)) };
	  }
	  async frameElement() {
	    return { element: import_elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.frameElement()) };
	  }
	  async evaluateExpression(params, metadata) {
	    return { value: (0, import_jsHandleDispatcher.serializeResult)(await this._frame.evaluateExpression(params.expression, { isFunction: params.isFunction }, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	  async evaluateExpressionHandle(params, metadata) {
	    return { handle: import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame.evaluateExpressionHandle(params.expression, { isFunction: params.isFunction }, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	  async waitForSelector(params, metadata) {
	    return { element: import_elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.waitForSelector(metadata, params.selector, params)) };
	  }
	  async dispatchEvent(params, metadata) {
	    return this._frame.dispatchEvent(metadata, params.selector, params.type, (0, import_jsHandleDispatcher.parseArgument)(params.eventInit), params);
	  }
	  async evalOnSelector(params, metadata) {
	    return { value: (0, import_jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	  async evalOnSelectorAll(params, metadata) {
	    return { value: (0, import_jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	  async querySelector(params, metadata) {
	    return { element: import_elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.querySelector(params.selector, params)) };
	  }
	  async querySelectorAll(params, metadata) {
	    const elements = await this._frame.querySelectorAll(params.selector);
	    return { elements: elements.map((e) => import_elementHandlerDispatcher.ElementHandleDispatcher.from(this, e)) };
	  }
	  async queryCount(params) {
	    return { value: await this._frame.queryCount(params.selector) };
	  }
	  async content() {
	    return { value: await this._frame.content() };
	  }
	  async setContent(params, metadata) {
	    return await this._frame.setContent(metadata, params.html, params);
	  }
	  async addScriptTag(params, metadata) {
	    return { element: import_elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addScriptTag(params)) };
	  }
	  async addStyleTag(params, metadata) {
	    return { element: import_elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addStyleTag(params)) };
	  }
	  async click(params, metadata) {
	    metadata.potentiallyClosesScope = true;
	    return await this._frame.click(metadata, params.selector, params);
	  }
	  async dblclick(params, metadata) {
	    return await this._frame.dblclick(metadata, params.selector, params);
	  }
	  async dragAndDrop(params, metadata) {
	    return await this._frame.dragAndDrop(metadata, params.source, params.target, params);
	  }
	  async tap(params, metadata) {
	    return await this._frame.tap(metadata, params.selector, params);
	  }
	  async fill(params, metadata) {
	    return await this._frame.fill(metadata, params.selector, params.value, params);
	  }
	  async focus(params, metadata) {
	    await this._frame.focus(metadata, params.selector, params);
	  }
	  async blur(params, metadata) {
	    await this._frame.blur(metadata, params.selector, params);
	  }
	  async textContent(params, metadata) {
	    const value = await this._frame.textContent(metadata, params.selector, params);
	    return { value: value === null ? void 0 : value };
	  }
	  async innerText(params, metadata) {
	    return { value: await this._frame.innerText(metadata, params.selector, params) };
	  }
	  async innerHTML(params, metadata) {
	    return { value: await this._frame.innerHTML(metadata, params.selector, params) };
	  }
	  async getAttribute(params, metadata) {
	    const value = await this._frame.getAttribute(metadata, params.selector, params.name, params);
	    return { value: value === null ? void 0 : value };
	  }
	  async inputValue(params, metadata) {
	    const value = await this._frame.inputValue(metadata, params.selector, params);
	    return { value };
	  }
	  async isChecked(params, metadata) {
	    return { value: await this._frame.isChecked(metadata, params.selector, params) };
	  }
	  async isDisabled(params, metadata) {
	    return { value: await this._frame.isDisabled(metadata, params.selector, params) };
	  }
	  async isEditable(params, metadata) {
	    return { value: await this._frame.isEditable(metadata, params.selector, params) };
	  }
	  async isEnabled(params, metadata) {
	    return { value: await this._frame.isEnabled(metadata, params.selector, params) };
	  }
	  async isHidden(params, metadata) {
	    return { value: await this._frame.isHidden(metadata, params.selector, params) };
	  }
	  async isVisible(params, metadata) {
	    return { value: await this._frame.isVisible(metadata, params.selector, params) };
	  }
	  async hover(params, metadata) {
	    return await this._frame.hover(metadata, params.selector, params);
	  }
	  async selectOption(params, metadata) {
	    const elements = (params.elements || []).map((e) => e._elementHandle);
	    return { values: await this._frame.selectOption(metadata, params.selector, elements, params.options || [], params) };
	  }
	  async setInputFiles(params, metadata) {
	    return await this._frame.setInputFiles(metadata, params.selector, params);
	  }
	  async type(params, metadata) {
	    return await this._frame.type(metadata, params.selector, params.text, params);
	  }
	  async press(params, metadata) {
	    return await this._frame.press(metadata, params.selector, params.key, params);
	  }
	  async check(params, metadata) {
	    return await this._frame.check(metadata, params.selector, params);
	  }
	  async uncheck(params, metadata) {
	    return await this._frame.uncheck(metadata, params.selector, params);
	  }
	  async waitForTimeout(params, metadata) {
	    return await this._frame.waitForTimeout(metadata, params.timeout);
	  }
	  async waitForFunction(params, metadata) {
	    return { handle: import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame._waitForFunctionExpression(metadata, params.expression, params.isFunction, (0, import_jsHandleDispatcher.parseArgument)(params.arg), params)) };
	  }
	  async title(params, metadata) {
	    return { value: await this._frame.title() };
	  }
	  async highlight(params, metadata) {
	    return await this._frame.highlight(params.selector);
	  }
	  async expect(params, metadata) {
	    metadata.potentiallyClosesScope = true;
	    let expectedValue = params.expectedValue ? (0, import_jsHandleDispatcher.parseArgument)(params.expectedValue) : void 0;
	    if (params.expression === "to.match.aria" && expectedValue)
	      expectedValue = (0, import_ariaSnapshot.parseAriaSnapshotUnsafe)(import_utilsBundle.yaml, expectedValue);
	    const result = await this._frame.expect(metadata, params.selector, { ...params, expectedValue });
	    if (result.received !== void 0)
	      result.received = (0, import_jsHandleDispatcher.serializeResult)(result.received);
	    return result;
	  }
	  async ariaSnapshot(params, metadata) {
	    return { snapshot: await this._frame.ariaSnapshot(metadata, params.selector, params) };
	  }
	}
	return frameDispatcher;
}

var elementHandlerDispatcher;
var hasRequiredElementHandlerDispatcher;

function requireElementHandlerDispatcher () {
	if (hasRequiredElementHandlerDispatcher) return elementHandlerDispatcher;
	hasRequiredElementHandlerDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var elementHandlerDispatcher_exports = {};
	__export(elementHandlerDispatcher_exports, {
	  ElementHandleDispatcher: () => ElementHandleDispatcher
	});
	elementHandlerDispatcher = __toCommonJS(elementHandlerDispatcher_exports);
	var import_browserContextDispatcher = requireBrowserContextDispatcher();
	var import_dispatcher = requireDispatcher();
	var import_frameDispatcher = requireFrameDispatcher();
	var import_jsHandleDispatcher = requireJsHandleDispatcher();
	var import_pageDispatcher = requirePageDispatcher();
	class ElementHandleDispatcher extends import_jsHandleDispatcher.JSHandleDispatcher {
	  constructor(scope, elementHandle) {
	    super(scope, elementHandle);
	    this._type_ElementHandle = true;
	    this._elementHandle = elementHandle;
	  }
	  static from(scope, handle) {
	    return (0, import_dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
	  }
	  static fromNullable(scope, handle) {
	    if (!handle)
	      return void 0;
	    return (0, import_dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
	  }
	  static fromJSHandle(scope, handle) {
	    const result = (0, import_dispatcher.existingDispatcher)(handle);
	    if (result)
	      return result;
	    return handle.asElement() ? new ElementHandleDispatcher(scope, handle.asElement()) : new import_jsHandleDispatcher.JSHandleDispatcher(scope, handle);
	  }
	  async ownerFrame(params, metadata) {
	    const frame = await this._elementHandle.ownerFrame();
	    return { frame: frame ? import_frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame) : void 0 };
	  }
	  async contentFrame(params, metadata) {
	    const frame = await this._elementHandle.contentFrame();
	    return { frame: frame ? import_frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame) : void 0 };
	  }
	  async generateLocatorString(params, metadata) {
	    return { value: await this._elementHandle.generateLocatorString() };
	  }
	  async getAttribute(params, metadata) {
	    const value = await this._elementHandle.getAttribute(metadata, params.name);
	    return { value: value === null ? void 0 : value };
	  }
	  async inputValue(params, metadata) {
	    const value = await this._elementHandle.inputValue(metadata);
	    return { value };
	  }
	  async textContent(params, metadata) {
	    const value = await this._elementHandle.textContent(metadata);
	    return { value: value === null ? void 0 : value };
	  }
	  async innerText(params, metadata) {
	    return { value: await this._elementHandle.innerText(metadata) };
	  }
	  async innerHTML(params, metadata) {
	    return { value: await this._elementHandle.innerHTML(metadata) };
	  }
	  async isChecked(params, metadata) {
	    return { value: await this._elementHandle.isChecked(metadata) };
	  }
	  async isDisabled(params, metadata) {
	    return { value: await this._elementHandle.isDisabled(metadata) };
	  }
	  async isEditable(params, metadata) {
	    return { value: await this._elementHandle.isEditable(metadata) };
	  }
	  async isEnabled(params, metadata) {
	    return { value: await this._elementHandle.isEnabled(metadata) };
	  }
	  async isHidden(params, metadata) {
	    return { value: await this._elementHandle.isHidden(metadata) };
	  }
	  async isVisible(params, metadata) {
	    return { value: await this._elementHandle.isVisible(metadata) };
	  }
	  async dispatchEvent(params, metadata) {
	    await this._elementHandle.dispatchEvent(metadata, params.type, (0, import_jsHandleDispatcher.parseArgument)(params.eventInit));
	  }
	  async scrollIntoViewIfNeeded(params, metadata) {
	    await this._elementHandle.scrollIntoViewIfNeeded(metadata, params);
	  }
	  async hover(params, metadata) {
	    return await this._elementHandle.hover(metadata, params);
	  }
	  async click(params, metadata) {
	    return await this._elementHandle.click(metadata, params);
	  }
	  async dblclick(params, metadata) {
	    return await this._elementHandle.dblclick(metadata, params);
	  }
	  async tap(params, metadata) {
	    return await this._elementHandle.tap(metadata, params);
	  }
	  async selectOption(params, metadata) {
	    const elements = (params.elements || []).map((e) => e._elementHandle);
	    return { values: await this._elementHandle.selectOption(metadata, elements, params.options || [], params) };
	  }
	  async fill(params, metadata) {
	    return await this._elementHandle.fill(metadata, params.value, params);
	  }
	  async selectText(params, metadata) {
	    await this._elementHandle.selectText(metadata, params);
	  }
	  async setInputFiles(params, metadata) {
	    return await this._elementHandle.setInputFiles(metadata, params);
	  }
	  async focus(params, metadata) {
	    await this._elementHandle.focus(metadata);
	  }
	  async type(params, metadata) {
	    return await this._elementHandle.type(metadata, params.text, params);
	  }
	  async press(params, metadata) {
	    return await this._elementHandle.press(metadata, params.key, params);
	  }
	  async check(params, metadata) {
	    return await this._elementHandle.check(metadata, params);
	  }
	  async uncheck(params, metadata) {
	    return await this._elementHandle.uncheck(metadata, params);
	  }
	  async boundingBox(params, metadata) {
	    const value = await this._elementHandle.boundingBox();
	    return { value: value || void 0 };
	  }
	  async screenshot(params, metadata) {
	    const mask = (params.mask || []).map(({ frame, selector }) => ({
	      frame: frame._object,
	      selector
	    }));
	    return { binary: await this._elementHandle.screenshot(metadata, { ...params, mask }) };
	  }
	  async querySelector(params, metadata) {
	    const handle = await this._elementHandle.querySelector(params.selector, params);
	    return { element: ElementHandleDispatcher.fromNullable(this.parentScope(), handle) };
	  }
	  async querySelectorAll(params, metadata) {
	    const elements = await this._elementHandle.querySelectorAll(params.selector);
	    return { elements: elements.map((e) => ElementHandleDispatcher.from(this.parentScope(), e)) };
	  }
	  async evalOnSelector(params, metadata) {
	    return { value: (0, import_jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	  async evalOnSelectorAll(params, metadata) {
	    return { value: (0, import_jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	  async waitForElementState(params, metadata) {
	    await this._elementHandle.waitForElementState(metadata, params.state, params);
	  }
	  async waitForSelector(params, metadata) {
	    return { element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._elementHandle.waitForSelector(metadata, params.selector, params)) };
	  }
	  _browserContextDispatcher() {
	    const scope = this.parentScope();
	    if (scope instanceof import_browserContextDispatcher.BrowserContextDispatcher)
	      return scope;
	    if (scope instanceof import_pageDispatcher.PageDispatcher)
	      return scope.parentScope();
	    if (scope instanceof import_pageDispatcher.WorkerDispatcher || scope instanceof import_frameDispatcher.FrameDispatcher) {
	      const parentScope = scope.parentScope();
	      if (parentScope instanceof import_browserContextDispatcher.BrowserContextDispatcher)
	        return parentScope;
	      return parentScope.parentScope();
	    }
	    throw new Error("ElementHandle belongs to unexpected scope");
	  }
	}
	return elementHandlerDispatcher;
}

var webSocketMockSource;
var hasRequiredWebSocketMockSource;

function requireWebSocketMockSource () {
	if (hasRequiredWebSocketMockSource) return webSocketMockSource;
	hasRequiredWebSocketMockSource = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var webSocketMockSource_exports = {};
	__export(webSocketMockSource_exports, {
	  source: () => source
	});
	webSocketMockSource = __toCommonJS(webSocketMockSource_exports);
	const source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/injected/src/webSocketMock.ts
var webSocketMock_exports = {};
__export(webSocketMock_exports, {
  inject: () => inject
});
module.exports = __toCommonJS(webSocketMock_exports);

// packages/playwright-core/src/utils/isomorphic/builtins.ts
function builtins(global) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i;
  global = global != null ? global : globalThis;
  if (!global["__playwright_builtins__"]) {
    const builtins2 = {
      setTimeout: (_a = global.setTimeout) == null ? void 0 : _a.bind(global),
      clearTimeout: (_b = global.clearTimeout) == null ? void 0 : _b.bind(global),
      setInterval: (_c = global.setInterval) == null ? void 0 : _c.bind(global),
      clearInterval: (_d = global.clearInterval) == null ? void 0 : _d.bind(global),
      requestAnimationFrame: (_e = global.requestAnimationFrame) == null ? void 0 : _e.bind(global),
      cancelAnimationFrame: (_f = global.cancelAnimationFrame) == null ? void 0 : _f.bind(global),
      requestIdleCallback: (_g = global.requestIdleCallback) == null ? void 0 : _g.bind(global),
      cancelIdleCallback: (_h = global.cancelIdleCallback) == null ? void 0 : _h.bind(global),
      performance: global.performance,
      eval: (_i = global.eval) == null ? void 0 : _i.bind(global),
      Intl: global.Intl,
      Date: global.Date,
      Map: global.Map,
      Set: global.Set
    };
    Object.defineProperty(global, "__playwright_builtins__", { value: builtins2, configurable: false, enumerable: false, writable: false });
  }
  return global["__playwright_builtins__"];
}
var instance = builtins();
var setTimeout = instance.setTimeout;
var clearTimeout = instance.clearTimeout;
var setInterval = instance.setInterval;
var clearInterval = instance.clearInterval;
var requestAnimationFrame = instance.requestAnimationFrame;
var cancelAnimationFrame = instance.cancelAnimationFrame;
var requestIdleCallback = instance.requestIdleCallback;
var cancelIdleCallback = instance.cancelIdleCallback;
var performance = instance.performance;
var Intl = instance.Intl;
var Date = instance.Date;
var Map = instance.Map;
var Set = instance.Set;

// packages/injected/src/webSocketMock.ts
function inject(globalThis2) {
  if (globalThis2.__pwWebSocketDispatch)
    return;
  function generateId() {
    const bytes = new Uint8Array(32);
    globalThis2.crypto.getRandomValues(bytes);
    const hex = "0123456789abcdef";
    return [...bytes].map((value) => {
      const high = Math.floor(value / 16);
      const low = value % 16;
      return hex[high] + hex[low];
    }).join("");
  }
  function bufferToData(b) {
    let s = "";
    for (let i = 0; i < b.length; i++)
      s += String.fromCharCode(b[i]);
    return { data: globalThis2.btoa(s), isBase64: true };
  }
  function stringToBuffer(s) {
    s = globalThis2.atob(s);
    const b = new Uint8Array(s.length);
    for (let i = 0; i < s.length; i++)
      b[i] = s.charCodeAt(i);
    return b.buffer;
  }
  function messageToData(message, cb) {
    if (message instanceof globalThis2.Blob)
      return message.arrayBuffer().then((buffer) => cb(bufferToData(new Uint8Array(buffer))));
    if (typeof message === "string")
      return cb({ data: message, isBase64: false });
    if (ArrayBuffer.isView(message))
      return cb(bufferToData(new Uint8Array(message.buffer, message.byteOffset, message.byteLength)));
    return cb(bufferToData(new Uint8Array(message)));
  }
  function dataToMessage(data, binaryType) {
    if (!data.isBase64)
      return data.data;
    const buffer = stringToBuffer(data.data);
    return binaryType === "arraybuffer" ? buffer : new Blob([buffer]);
  }
  const binding = globalThis2.__pwWebSocketBinding;
  const NativeWebSocket = globalThis2.WebSocket;
  const idToWebSocket = new Map();
  globalThis2.__pwWebSocketDispatch = (request) => {
    const ws = idToWebSocket.get(request.id);
    if (!ws)
      return;
    if (request.type === "connect")
      ws._apiConnect();
    if (request.type === "passthrough")
      ws._apiPassThrough();
    if (request.type === "ensureOpened")
      ws._apiEnsureOpened();
    if (request.type === "sendToPage")
      ws._apiSendToPage(dataToMessage(request.data, ws.binaryType));
    if (request.type === "closePage")
      ws._apiClosePage(request.code, request.reason, request.wasClean);
    if (request.type === "sendToServer")
      ws._apiSendToServer(dataToMessage(request.data, ws.binaryType));
    if (request.type === "closeServer")
      ws._apiCloseServer(request.code, request.reason, request.wasClean);
  };
  const _WebSocketMock = class _WebSocketMock extends EventTarget {
    constructor(url, protocols) {
      var _a, _b;
      super();
      // WebSocket.CLOSED
      this.CONNECTING = 0;
      // WebSocket.CONNECTING
      this.OPEN = 1;
      // WebSocket.OPEN
      this.CLOSING = 2;
      // WebSocket.CLOSING
      this.CLOSED = 3;
      // WebSocket.CLOSED
      this._oncloseListener = null;
      this._onerrorListener = null;
      this._onmessageListener = null;
      this._onopenListener = null;
      this.bufferedAmount = 0;
      this.extensions = "";
      this.protocol = "";
      this.readyState = 0;
      this._origin = "";
      this._passthrough = false;
      this._wsBufferedMessages = [];
      this._binaryType = "blob";
      this.url = new URL(url, globalThis2.window.document.baseURI).href.replace(/^http/, "ws");
      this._origin = (_b = (_a = URL.parse(this.url)) == null ? void 0 : _a.origin) != null ? _b : "";
      this._protocols = protocols;
      this._id = generateId();
      idToWebSocket.set(this._id, this);
      binding({ type: "onCreate", id: this._id, url: this.url });
    }
    // --- native WebSocket implementation ---
    get binaryType() {
      return this._binaryType;
    }
    set binaryType(type) {
      this._binaryType = type;
      if (this._ws)
        this._ws.binaryType = type;
    }
    get onclose() {
      return this._oncloseListener;
    }
    set onclose(listener) {
      if (this._oncloseListener)
        this.removeEventListener("close", this._oncloseListener);
      this._oncloseListener = listener;
      if (this._oncloseListener)
        this.addEventListener("close", this._oncloseListener);
    }
    get onerror() {
      return this._onerrorListener;
    }
    set onerror(listener) {
      if (this._onerrorListener)
        this.removeEventListener("error", this._onerrorListener);
      this._onerrorListener = listener;
      if (this._onerrorListener)
        this.addEventListener("error", this._onerrorListener);
    }
    get onopen() {
      return this._onopenListener;
    }
    set onopen(listener) {
      if (this._onopenListener)
        this.removeEventListener("open", this._onopenListener);
      this._onopenListener = listener;
      if (this._onopenListener)
        this.addEventListener("open", this._onopenListener);
    }
    get onmessage() {
      return this._onmessageListener;
    }
    set onmessage(listener) {
      if (this._onmessageListener)
        this.removeEventListener("message", this._onmessageListener);
      this._onmessageListener = listener;
      if (this._onmessageListener)
        this.addEventListener("message", this._onmessageListener);
    }
    send(message) {
      if (this.readyState === _WebSocketMock.CONNECTING)
        throw new DOMException(\`Failed to execute 'send' on 'WebSocket': Still in CONNECTING state.\`);
      if (this.readyState !== _WebSocketMock.OPEN)
        throw new DOMException(\`WebSocket is already in CLOSING or CLOSED state.\`);
      if (this._passthrough) {
        if (this._ws)
          this._apiSendToServer(message);
      } else {
        messageToData(message, (data) => binding({ type: "onMessageFromPage", id: this._id, data }));
      }
    }
    close(code, reason) {
      if (code !== void 0 && code !== 1e3 && (code < 3e3 || code > 4999))
        throw new DOMException(\`Failed to execute 'close' on 'WebSocket': The close code must be either 1000, or between 3000 and 4999. \${code} is neither.\`);
      if (this.readyState === _WebSocketMock.OPEN || this.readyState === _WebSocketMock.CONNECTING)
        this.readyState = _WebSocketMock.CLOSING;
      if (this._passthrough)
        this._apiCloseServer(code, reason, true);
      else
        binding({ type: "onClosePage", id: this._id, code, reason, wasClean: true });
    }
    // --- methods called from the routing API ---
    _apiEnsureOpened() {
      if (!this._ws)
        this._ensureOpened();
    }
    _apiSendToPage(message) {
      this._ensureOpened();
      if (this.readyState !== _WebSocketMock.OPEN)
        throw new DOMException(\`WebSocket is already in CLOSING or CLOSED state.\`);
      this.dispatchEvent(new MessageEvent("message", { data: message, origin: this._origin, cancelable: true }));
    }
    _apiSendToServer(message) {
      if (!this._ws)
        throw new Error("Cannot send a message before connecting to the server");
      if (this._ws.readyState === _WebSocketMock.CONNECTING)
        this._wsBufferedMessages.push(message);
      else
        this._ws.send(message);
    }
    _apiConnect() {
      if (this._ws)
        throw new Error("Can only connect to the server once");
      this._ws = new NativeWebSocket(this.url, this._protocols);
      this._ws.binaryType = this._binaryType;
      this._ws.onopen = () => {
        for (const message of this._wsBufferedMessages)
          this._ws.send(message);
        this._wsBufferedMessages = [];
        this._ensureOpened();
      };
      this._ws.onclose = (event) => {
        this._onWSClose(event.code, event.reason, event.wasClean);
      };
      this._ws.onmessage = (event) => {
        if (this._passthrough)
          this._apiSendToPage(event.data);
        else
          messageToData(event.data, (data) => binding({ type: "onMessageFromServer", id: this._id, data }));
      };
      this._ws.onerror = () => {
        const event = new Event("error", { cancelable: true });
        this.dispatchEvent(event);
      };
    }
    // This method connects to the server, and passes all messages through,
    // as if WebSocketMock was not engaged.
    _apiPassThrough() {
      this._passthrough = true;
      this._apiConnect();
    }
    _apiCloseServer(code, reason, wasClean) {
      if (!this._ws) {
        this._onWSClose(code, reason, wasClean);
        return;
      }
      if (this._ws.readyState === _WebSocketMock.CONNECTING || this._ws.readyState === _WebSocketMock.OPEN)
        this._ws.close(code, reason);
    }
    _apiClosePage(code, reason, wasClean) {
      if (this.readyState === _WebSocketMock.CLOSED)
        return;
      this.readyState = _WebSocketMock.CLOSED;
      this.dispatchEvent(new CloseEvent("close", { code, reason, wasClean, cancelable: true }));
      this._maybeCleanup();
      if (this._passthrough)
        this._apiCloseServer(code, reason, wasClean);
      else
        binding({ type: "onClosePage", id: this._id, code, reason, wasClean });
    }
    // --- internals ---
    _ensureOpened() {
      var _a;
      if (this.readyState !== _WebSocketMock.CONNECTING)
        return;
      this.extensions = ((_a = this._ws) == null ? void 0 : _a.extensions) || "";
      if (this._ws)
        this.protocol = this._ws.protocol;
      else if (Array.isArray(this._protocols))
        this.protocol = this._protocols[0] || "";
      else
        this.protocol = this._protocols || "";
      this.readyState = _WebSocketMock.OPEN;
      this.dispatchEvent(new Event("open", { cancelable: true }));
    }
    _onWSClose(code, reason, wasClean) {
      if (this._passthrough)
        this._apiClosePage(code, reason, wasClean);
      else
        binding({ type: "onCloseServer", id: this._id, code, reason, wasClean });
      if (this._ws) {
        this._ws.onopen = null;
        this._ws.onclose = null;
        this._ws.onmessage = null;
        this._ws.onerror = null;
        this._ws = void 0;
        this._wsBufferedMessages = [];
      }
      this._maybeCleanup();
    }
    _maybeCleanup() {
      if (this.readyState === _WebSocketMock.CLOSED && !this._ws)
        idToWebSocket.delete(this._id);
    }
  };
  _WebSocketMock.CONNECTING = 0;
  // WebSocket.CONNECTING
  _WebSocketMock.OPEN = 1;
  // WebSocket.OPEN
  _WebSocketMock.CLOSING = 2;
  // WebSocket.CLOSING
  _WebSocketMock.CLOSED = 3;
  let WebSocketMock = _WebSocketMock;
  globalThis2.WebSocket = class WebSocket extends WebSocketMock {
  };
}
`;
	return webSocketMockSource;
}

var webSocketRouteDispatcher;
var hasRequiredWebSocketRouteDispatcher;

function requireWebSocketRouteDispatcher () {
	if (hasRequiredWebSocketRouteDispatcher) return webSocketRouteDispatcher;
	hasRequiredWebSocketRouteDispatcher = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var webSocketRouteDispatcher_exports = {};
	__export(webSocketRouteDispatcher_exports, {
	  WebSocketRouteDispatcher: () => WebSocketRouteDispatcher
	});
	webSocketRouteDispatcher = __toCommonJS(webSocketRouteDispatcher_exports);
	var import_page = requirePage$1();
	var import_dispatcher = requireDispatcher();
	var import_pageDispatcher = requirePageDispatcher();
	var webSocketMockSource = __toESM(requireWebSocketMockSource());
	var import_crypto = requireCrypto();
	var import_urlMatch = requireUrlMatch();
	var import_eventsHelper = requireEventsHelper();
	class WebSocketRouteDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, id, url, frame) {
	    super(scope, { guid: "webSocketRoute@" + (0, import_crypto.createGuid)() }, "WebSocketRoute", { url });
	    this._type_WebSocketRoute = true;
	    this._id = id;
	    this._frame = frame;
	    this._eventListeners.push(
	      // When the frame navigates or detaches, there will be no more communication
	      // from the mock websocket, so pretend like it was closed.
	      import_eventsHelper.eventsHelper.addEventListener(frame._page, import_page.Page.Events.InternalFrameNavigatedToNewDocument, (frame2) => {
	        if (frame2 === this._frame)
	          this._executionContextGone();
	      }),
	      import_eventsHelper.eventsHelper.addEventListener(frame._page, import_page.Page.Events.FrameDetached, (frame2) => {
	        if (frame2 === this._frame)
	          this._executionContextGone();
	      }),
	      import_eventsHelper.eventsHelper.addEventListener(frame._page, import_page.Page.Events.Close, () => this._executionContextGone()),
	      import_eventsHelper.eventsHelper.addEventListener(frame._page, import_page.Page.Events.Crash, () => this._executionContextGone())
	    );
	    WebSocketRouteDispatcher._idToDispatcher.set(this._id, this);
	    scope._dispatchEvent("webSocketRoute", { webSocketRoute: this });
	  }
	  static {
	    this._idToDispatcher = /* @__PURE__ */ new Map();
	  }
	  static async installIfNeeded(target) {
	    const kBindingName = "__pwWebSocketBinding";
	    const context = target instanceof import_page.Page ? target.context() : target;
	    if (!context.hasBinding(kBindingName)) {
	      await context.exposeBinding(kBindingName, false, (source, payload) => {
	        if (payload.type === "onCreate") {
	          const contextDispatcher = (0, import_dispatcher.existingDispatcher)(context);
	          const pageDispatcher = contextDispatcher ? import_pageDispatcher.PageDispatcher.fromNullable(contextDispatcher, source.page) : void 0;
	          let scope;
	          if (pageDispatcher && matchesPattern(pageDispatcher, context._options.baseURL, payload.url))
	            scope = pageDispatcher;
	          else if (contextDispatcher && matchesPattern(contextDispatcher, context._options.baseURL, payload.url))
	            scope = contextDispatcher;
	          if (scope) {
	            new WebSocketRouteDispatcher(scope, payload.id, payload.url, source.frame);
	          } else {
	            const request = { id: payload.id, type: "passthrough" };
	            source.frame.evaluateExpression(`globalThis.__pwWebSocketDispatch(${JSON.stringify(request)})`).catch(() => {
	            });
	          }
	          return;
	        }
	        const dispatcher = WebSocketRouteDispatcher._idToDispatcher.get(payload.id);
	        if (payload.type === "onMessageFromPage")
	          dispatcher?._dispatchEvent("messageFromPage", { message: payload.data.data, isBase64: payload.data.isBase64 });
	        if (payload.type === "onMessageFromServer")
	          dispatcher?._dispatchEvent("messageFromServer", { message: payload.data.data, isBase64: payload.data.isBase64 });
	        if (payload.type === "onClosePage")
	          dispatcher?._dispatchEvent("closePage", { code: payload.code, reason: payload.reason, wasClean: payload.wasClean });
	        if (payload.type === "onCloseServer")
	          dispatcher?._dispatchEvent("closeServer", { code: payload.code, reason: payload.reason, wasClean: payload.wasClean });
	      });
	    }
	    const kInitScriptName = "webSocketMockSource";
	    if (!target.initScripts.find((s) => s.name === kInitScriptName)) {
	      await target.addInitScript(`
        (() => {
          const module = {};
          ${webSocketMockSource.source}
          (module.exports.inject())(globalThis);
        })();
      `, kInitScriptName);
	    }
	  }
	  async connect(params) {
	    await this._evaluateAPIRequest({ id: this._id, type: "connect" });
	  }
	  async ensureOpened(params) {
	    await this._evaluateAPIRequest({ id: this._id, type: "ensureOpened" });
	  }
	  async sendToPage(params) {
	    await this._evaluateAPIRequest({ id: this._id, type: "sendToPage", data: { data: params.message, isBase64: params.isBase64 } });
	  }
	  async sendToServer(params) {
	    await this._evaluateAPIRequest({ id: this._id, type: "sendToServer", data: { data: params.message, isBase64: params.isBase64 } });
	  }
	  async closePage(params) {
	    await this._evaluateAPIRequest({ id: this._id, type: "closePage", code: params.code, reason: params.reason, wasClean: params.wasClean });
	  }
	  async closeServer(params) {
	    await this._evaluateAPIRequest({ id: this._id, type: "closeServer", code: params.code, reason: params.reason, wasClean: params.wasClean });
	  }
	  async _evaluateAPIRequest(request) {
	    await this._frame.evaluateExpression(`globalThis.__pwWebSocketDispatch(${JSON.stringify(request)})`).catch(() => {
	    });
	  }
	  _onDispose() {
	    WebSocketRouteDispatcher._idToDispatcher.delete(this._id);
	  }
	  _executionContextGone() {
	    if (!this._disposed) {
	      this._dispatchEvent("closePage", { wasClean: true });
	      this._dispatchEvent("closeServer", { wasClean: true });
	    }
	  }
	}
	function matchesPattern(dispatcher, baseURL, url) {
	  for (const pattern of dispatcher._webSocketInterceptionPatterns || []) {
	    const urlMatch = pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob;
	    if ((0, import_urlMatch.urlMatches)(baseURL, url, urlMatch, true))
	      return true;
	  }
	  return false;
	}
	return webSocketRouteDispatcher;
}

var pageDispatcher;
var hasRequiredPageDispatcher;

function requirePageDispatcher () {
	if (hasRequiredPageDispatcher) return pageDispatcher;
	hasRequiredPageDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var pageDispatcher_exports = {};
	__export(pageDispatcher_exports, {
	  BindingCallDispatcher: () => BindingCallDispatcher,
	  PageDispatcher: () => PageDispatcher,
	  WorkerDispatcher: () => WorkerDispatcher
	});
	pageDispatcher = __toCommonJS(pageDispatcher_exports);
	var import_page = requirePage$1();
	var import_dispatcher = requireDispatcher();
	var import_errors = requireErrors$1();
	var import_artifactDispatcher = requireArtifactDispatcher();
	var import_elementHandlerDispatcher = requireElementHandlerDispatcher();
	var import_frameDispatcher = requireFrameDispatcher();
	var import_jsHandleDispatcher = requireJsHandleDispatcher();
	var import_networkDispatchers = requireNetworkDispatchers();
	var import_networkDispatchers2 = requireNetworkDispatchers();
	var import_networkDispatchers3 = requireNetworkDispatchers();
	var import_webSocketRouteDispatcher = requireWebSocketRouteDispatcher();
	var import_crypto = requireCrypto();
	var import_urlMatch = requireUrlMatch();
	class PageDispatcher extends import_dispatcher.Dispatcher {
	  constructor(parentScope, page) {
	    const mainFrame = import_frameDispatcher.FrameDispatcher.from(parentScope, page.mainFrame());
	    super(parentScope, page, "Page", {
	      mainFrame,
	      viewportSize: page.viewportSize() || void 0,
	      isClosed: page.isClosed(),
	      opener: PageDispatcher.fromNullable(parentScope, page.opener())
	    });
	    this._type_EventTarget = true;
	    this._type_Page = true;
	    this._subscriptions = /* @__PURE__ */ new Set();
	    this._webSocketInterceptionPatterns = [];
	    this.adopt(mainFrame);
	    this._page = page;
	    this.addObjectListener(import_page.Page.Events.Close, () => {
	      this._dispatchEvent("close");
	      this._dispose();
	    });
	    this.addObjectListener(import_page.Page.Events.Crash, () => this._dispatchEvent("crash"));
	    this.addObjectListener(import_page.Page.Events.Download, (download) => {
	      this._dispatchEvent("download", { url: download.url, suggestedFilename: download.suggestedFilename(), artifact: import_artifactDispatcher.ArtifactDispatcher.from(parentScope, download.artifact) });
	    });
	    this.addObjectListener(import_page.Page.Events.FileChooser, (fileChooser) => this._dispatchEvent("fileChooser", {
	      element: import_elementHandlerDispatcher.ElementHandleDispatcher.from(mainFrame, fileChooser.element()),
	      isMultiple: fileChooser.isMultiple()
	    }));
	    this.addObjectListener(import_page.Page.Events.FrameAttached, (frame) => this._onFrameAttached(frame));
	    this.addObjectListener(import_page.Page.Events.FrameDetached, (frame) => this._onFrameDetached(frame));
	    this.addObjectListener(import_page.Page.Events.LocatorHandlerTriggered, (uid) => this._dispatchEvent("locatorHandlerTriggered", { uid }));
	    this.addObjectListener(import_page.Page.Events.WebSocket, (webSocket) => this._dispatchEvent("webSocket", { webSocket: new import_networkDispatchers3.WebSocketDispatcher(this, webSocket) }));
	    this.addObjectListener(import_page.Page.Events.Worker, (worker) => this._dispatchEvent("worker", { worker: new WorkerDispatcher(this, worker) }));
	    this.addObjectListener(import_page.Page.Events.Video, (artifact) => this._dispatchEvent("video", { artifact: import_artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact) }));
	    if (page._video)
	      this._dispatchEvent("video", { artifact: import_artifactDispatcher.ArtifactDispatcher.from(this.parentScope(), page._video) });
	    const frames = page._frameManager.frames();
	    for (let i = 1; i < frames.length; i++)
	      this._onFrameAttached(frames[i]);
	  }
	  static from(parentScope, page) {
	    return PageDispatcher.fromNullable(parentScope, page);
	  }
	  static fromNullable(parentScope, page) {
	    if (!page)
	      return void 0;
	    const result = (0, import_dispatcher.existingDispatcher)(page);
	    return result || new PageDispatcher(parentScope, page);
	  }
	  page() {
	    return this._page;
	  }
	  async setDefaultNavigationTimeoutNoReply(params, metadata) {
	    this._page.setDefaultNavigationTimeout(params.timeout);
	  }
	  async setDefaultTimeoutNoReply(params, metadata) {
	    this._page.setDefaultTimeout(params.timeout);
	  }
	  async exposeBinding(params, metadata) {
	    await this._page.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
	      if (this._disposed)
	        return;
	      const binding = new BindingCallDispatcher(this, params.name, !!params.needsHandle, source, args);
	      this._dispatchEvent("bindingCall", { binding });
	      return binding.promise();
	    });
	  }
	  async setExtraHTTPHeaders(params, metadata) {
	    await this._page.setExtraHTTPHeaders(params.headers);
	  }
	  async reload(params, metadata) {
	    return { response: import_networkDispatchers2.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.reload(metadata, params)) };
	  }
	  async goBack(params, metadata) {
	    return { response: import_networkDispatchers2.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goBack(metadata, params)) };
	  }
	  async goForward(params, metadata) {
	    return { response: import_networkDispatchers2.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goForward(metadata, params)) };
	  }
	  async requestGC(params, metadata) {
	    await this._page.requestGC();
	  }
	  async registerLocatorHandler(params, metadata) {
	    const uid = this._page.registerLocatorHandler(params.selector, params.noWaitAfter);
	    return { uid };
	  }
	  async resolveLocatorHandlerNoReply(params, metadata) {
	    this._page.resolveLocatorHandler(params.uid, params.remove);
	  }
	  async unregisterLocatorHandler(params, metadata) {
	    this._page.unregisterLocatorHandler(params.uid);
	  }
	  async emulateMedia(params, metadata) {
	    await this._page.emulateMedia({
	      media: params.media,
	      colorScheme: params.colorScheme,
	      reducedMotion: params.reducedMotion,
	      forcedColors: params.forcedColors,
	      contrast: params.contrast
	    });
	  }
	  async setViewportSize(params, metadata) {
	    await this._page.setViewportSize(params.viewportSize);
	  }
	  async addInitScript(params, metadata) {
	    await this._page.addInitScript(params.source);
	  }
	  async setNetworkInterceptionPatterns(params, metadata) {
	    if (!params.patterns.length) {
	      await this._page.setClientRequestInterceptor(void 0);
	      return;
	    }
	    const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
	    await this._page.setClientRequestInterceptor((route, request) => {
	      const matchesSome = urlMatchers.some((urlMatch) => (0, import_urlMatch.urlMatches)(this._page._browserContext._options.baseURL, request.url(), urlMatch));
	      if (!matchesSome)
	        return false;
	      this._dispatchEvent("route", { route: import_networkDispatchers3.RouteDispatcher.from(import_networkDispatchers.RequestDispatcher.from(this.parentScope(), request), route) });
	      return true;
	    });
	  }
	  async setWebSocketInterceptionPatterns(params, metadata) {
	    this._webSocketInterceptionPatterns = params.patterns;
	    if (params.patterns.length)
	      await import_webSocketRouteDispatcher.WebSocketRouteDispatcher.installIfNeeded(this._page);
	  }
	  async expectScreenshot(params, metadata) {
	    const mask = (params.mask || []).map(({ frame, selector }) => ({
	      frame: frame._object,
	      selector
	    }));
	    const locator = params.locator ? {
	      frame: params.locator.frame._object,
	      selector: params.locator.selector
	    } : void 0;
	    return await this._page.expectScreenshot(metadata, {
	      ...params,
	      locator,
	      mask
	    });
	  }
	  async screenshot(params, metadata) {
	    const mask = (params.mask || []).map(({ frame, selector }) => ({
	      frame: frame._object,
	      selector
	    }));
	    return { binary: await this._page.screenshot(metadata, { ...params, mask }) };
	  }
	  async close(params, metadata) {
	    if (!params.runBeforeUnload)
	      metadata.potentiallyClosesScope = true;
	    await this._page.close(metadata, params);
	  }
	  async updateSubscription(params) {
	    if (params.event === "fileChooser")
	      await this._page.setFileChooserIntercepted(params.enabled);
	    if (params.enabled)
	      this._subscriptions.add(params.event);
	    else
	      this._subscriptions.delete(params.event);
	  }
	  async keyboardDown(params, metadata) {
	    await this._page.keyboard.down(params.key);
	  }
	  async keyboardUp(params, metadata) {
	    await this._page.keyboard.up(params.key);
	  }
	  async keyboardInsertText(params, metadata) {
	    await this._page.keyboard.insertText(params.text);
	  }
	  async keyboardType(params, metadata) {
	    await this._page.keyboard.type(params.text, params);
	  }
	  async keyboardPress(params, metadata) {
	    await this._page.keyboard.press(params.key, params);
	  }
	  async mouseMove(params, metadata) {
	    await this._page.mouse.move(params.x, params.y, params, metadata);
	  }
	  async mouseDown(params, metadata) {
	    await this._page.mouse.down(params, metadata);
	  }
	  async mouseUp(params, metadata) {
	    await this._page.mouse.up(params, metadata);
	  }
	  async mouseClick(params, metadata) {
	    await this._page.mouse.click(params.x, params.y, params, metadata);
	  }
	  async mouseWheel(params, metadata) {
	    await this._page.mouse.wheel(params.deltaX, params.deltaY);
	  }
	  async touchscreenTap(params, metadata) {
	    await this._page.touchscreen.tap(params.x, params.y, metadata);
	  }
	  async accessibilitySnapshot(params, metadata) {
	    const rootAXNode = await this._page.accessibility.snapshot({
	      interestingOnly: params.interestingOnly,
	      root: params.root ? params.root._elementHandle : void 0
	    });
	    return { rootAXNode: rootAXNode || void 0 };
	  }
	  async pdf(params, metadata) {
	    if (!this._page.pdf)
	      throw new Error("PDF generation is only supported for Headless Chromium");
	    const buffer = await this._page.pdf(params);
	    return { pdf: buffer };
	  }
	  async bringToFront(params, metadata) {
	    await this._page.bringToFront();
	  }
	  async startJSCoverage(params, metadata) {
	    const coverage = this._page.coverage;
	    await coverage.startJSCoverage(params);
	  }
	  async stopJSCoverage(params, metadata) {
	    const coverage = this._page.coverage;
	    return await coverage.stopJSCoverage();
	  }
	  async startCSSCoverage(params, metadata) {
	    const coverage = this._page.coverage;
	    await coverage.startCSSCoverage(params);
	  }
	  async stopCSSCoverage(params, metadata) {
	    const coverage = this._page.coverage;
	    return await coverage.stopCSSCoverage();
	  }
	  _onFrameAttached(frame) {
	    this._dispatchEvent("frameAttached", { frame: import_frameDispatcher.FrameDispatcher.from(this.parentScope(), frame) });
	  }
	  _onFrameDetached(frame) {
	    this._dispatchEvent("frameDetached", { frame: import_frameDispatcher.FrameDispatcher.from(this.parentScope(), frame) });
	  }
	  _onDispose() {
	    if (!this._page.isClosedOrClosingOrCrashed())
	      this._page.setClientRequestInterceptor(void 0).catch(() => {
	      });
	  }
	}
	class WorkerDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, worker) {
	    super(scope, worker, "Worker", {
	      url: worker.url()
	    });
	    this._type_Worker = true;
	    this.addObjectListener(import_page.Worker.Events.Close, () => this._dispatchEvent("close"));
	  }
	  static fromNullable(scope, worker) {
	    if (!worker)
	      return void 0;
	    const result = (0, import_dispatcher.existingDispatcher)(worker);
	    return result || new WorkerDispatcher(scope, worker);
	  }
	  async evaluateExpression(params, metadata) {
	    return { value: (0, import_jsHandleDispatcher.serializeResult)(await this._object.evaluateExpression(params.expression, params.isFunction, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	  async evaluateExpressionHandle(params, metadata) {
	    return { handle: import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	}
	class BindingCallDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, name, needsHandle, source, args) {
	    super(scope, { guid: "bindingCall@" + (0, import_crypto.createGuid)() }, "BindingCall", {
	      frame: import_frameDispatcher.FrameDispatcher.from(scope.parentScope(), source.frame),
	      name,
	      args: needsHandle ? void 0 : args.map(import_jsHandleDispatcher.serializeResult),
	      handle: needsHandle ? import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(scope, args[0]) : void 0
	    });
	    this._type_BindingCall = true;
	    this._promise = new Promise((resolve, reject) => {
	      this._resolve = resolve;
	      this._reject = reject;
	    });
	  }
	  promise() {
	    return this._promise;
	  }
	  async resolve(params, metadata) {
	    this._resolve((0, import_jsHandleDispatcher.parseArgument)(params.result));
	    this._dispose();
	  }
	  async reject(params, metadata) {
	    this._reject((0, import_errors.parseError)(params.error));
	    this._dispose();
	  }
	}
	return pageDispatcher;
}

var dialogDispatcher;
var hasRequiredDialogDispatcher;

function requireDialogDispatcher () {
	if (hasRequiredDialogDispatcher) return dialogDispatcher;
	hasRequiredDialogDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var dialogDispatcher_exports = {};
	__export(dialogDispatcher_exports, {
	  DialogDispatcher: () => DialogDispatcher
	});
	dialogDispatcher = __toCommonJS(dialogDispatcher_exports);
	var import_dispatcher = requireDispatcher();
	var import_pageDispatcher = requirePageDispatcher();
	class DialogDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, dialog) {
	    const page = import_pageDispatcher.PageDispatcher.fromNullable(scope, dialog.page().initializedOrUndefined());
	    super(page || scope, dialog, "Dialog", {
	      page,
	      type: dialog.type(),
	      message: dialog.message(),
	      defaultValue: dialog.defaultValue()
	    });
	    this._type_Dialog = true;
	  }
	  async accept(params) {
	    await this._object.accept(params.promptText);
	  }
	  async dismiss() {
	    await this._object.dismiss();
	  }
	}
	return dialogDispatcher;
}

var writableStreamDispatcher;
var hasRequiredWritableStreamDispatcher;

function requireWritableStreamDispatcher () {
	if (hasRequiredWritableStreamDispatcher) return writableStreamDispatcher;
	hasRequiredWritableStreamDispatcher = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var writableStreamDispatcher_exports = {};
	__export(writableStreamDispatcher_exports, {
	  WritableStreamDispatcher: () => WritableStreamDispatcher
	});
	writableStreamDispatcher = __toCommonJS(writableStreamDispatcher_exports);
	var import_fs = __toESM(require$$0$4);
	var import_dispatcher = requireDispatcher();
	var import_crypto = requireCrypto();
	class WritableStreamDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, streamOrDirectory, lastModifiedMs) {
	    super(scope, { guid: "writableStream@" + (0, import_crypto.createGuid)(), streamOrDirectory }, "WritableStream", {});
	    this._type_WritableStream = true;
	    this._lastModifiedMs = lastModifiedMs;
	  }
	  async write(params) {
	    if (typeof this._object.streamOrDirectory === "string")
	      throw new Error("Cannot write to a directory");
	    const stream = this._object.streamOrDirectory;
	    await new Promise((fulfill, reject) => {
	      stream.write(params.binary, (error) => {
	        if (error)
	          reject(error);
	        else
	          fulfill();
	      });
	    });
	  }
	  async close() {
	    if (typeof this._object.streamOrDirectory === "string")
	      throw new Error("Cannot close a directory");
	    const stream = this._object.streamOrDirectory;
	    await new Promise((fulfill) => stream.end(fulfill));
	    if (this._lastModifiedMs)
	      await import_fs.default.promises.utimes(this.path(), new Date(this._lastModifiedMs), new Date(this._lastModifiedMs));
	  }
	  path() {
	    if (typeof this._object.streamOrDirectory === "string")
	      return this._object.streamOrDirectory;
	    return this._object.streamOrDirectory.path;
	  }
	}
	return writableStreamDispatcher;
}

var browserContextDispatcher;
var hasRequiredBrowserContextDispatcher;

function requireBrowserContextDispatcher () {
	if (hasRequiredBrowserContextDispatcher) return browserContextDispatcher;
	hasRequiredBrowserContextDispatcher = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserContextDispatcher_exports = {};
	__export(browserContextDispatcher_exports, {
	  BrowserContextDispatcher: () => BrowserContextDispatcher
	});
	browserContextDispatcher = __toCommonJS(browserContextDispatcher_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_browserContext = requireBrowserContext$1();
	var import_artifactDispatcher = requireArtifactDispatcher();
	var import_cdpSessionDispatcher = requireCdpSessionDispatcher();
	var import_dialogDispatcher = requireDialogDispatcher();
	var import_dispatcher = requireDispatcher();
	var import_elementHandlerDispatcher = requireElementHandlerDispatcher();
	var import_networkDispatchers = requireNetworkDispatchers();
	var import_pageDispatcher = requirePageDispatcher();
	var import_crBrowser = requireCrBrowser();
	var import_errors = requireErrors$1();
	var import_recorder = requireRecorder();
	var import_tracingDispatcher = requireTracingDispatcher();
	var import_webSocketRouteDispatcher = requireWebSocketRouteDispatcher();
	var import_writableStreamDispatcher = requireWritableStreamDispatcher();
	var import_crypto = requireCrypto();
	var import_urlMatch = requireUrlMatch();
	var import_recorderApp = requireRecorderApp();
	class BrowserContextDispatcher extends import_dispatcher.Dispatcher {
	  constructor(parentScope, context) {
	    const requestContext = import_networkDispatchers.APIRequestContextDispatcher.from(parentScope, context.fetchRequest);
	    const tracing = import_tracingDispatcher.TracingDispatcher.from(parentScope, context.tracing);
	    super(parentScope, context, "BrowserContext", {
	      isChromium: context._browser.options.isChromium,
	      isLocalBrowserOnServer: context._browser._isCollocatedWithServer,
	      requestContext,
	      tracing
	    });
	    this._type_EventTarget = true;
	    this._type_BrowserContext = true;
	    this._subscriptions = /* @__PURE__ */ new Set();
	    this._webSocketInterceptionPatterns = [];
	    this.adopt(requestContext);
	    this.adopt(tracing);
	    this._context = context;
	    const onVideo = (artifact) => {
	      const artifactDispatcher = import_artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact);
	      this._dispatchEvent("video", { artifact: artifactDispatcher });
	    };
	    this.addObjectListener(import_browserContext.BrowserContext.Events.VideoStarted, onVideo);
	    for (const video of context._browser._idToVideo.values()) {
	      if (video.context === context)
	        onVideo(video.artifact);
	    }
	    for (const page of context.pages())
	      this._dispatchEvent("page", { page: import_pageDispatcher.PageDispatcher.from(this, page) });
	    this.addObjectListener(import_browserContext.BrowserContext.Events.Page, (page) => {
	      this._dispatchEvent("page", { page: import_pageDispatcher.PageDispatcher.from(this, page) });
	    });
	    this.addObjectListener(import_browserContext.BrowserContext.Events.Close, () => {
	      this._dispatchEvent("close");
	      this._dispose();
	    });
	    this.addObjectListener(import_browserContext.BrowserContext.Events.PageError, (error, page) => {
	      this._dispatchEvent("pageError", { error: (0, import_errors.serializeError)(error), page: import_pageDispatcher.PageDispatcher.from(this, page) });
	    });
	    this.addObjectListener(import_browserContext.BrowserContext.Events.Console, (message) => {
	      const page = message.page();
	      if (this._shouldDispatchEvent(page, "console")) {
	        const pageDispatcher = import_pageDispatcher.PageDispatcher.from(this, page);
	        this._dispatchEvent("console", {
	          page: pageDispatcher,
	          type: message.type(),
	          text: message.text(),
	          args: message.args().map((a) => import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(pageDispatcher, a)),
	          location: message.location()
	        });
	      }
	    });
	    this.addObjectListener(import_browserContext.BrowserContext.Events.Dialog, (dialog) => {
	      if (this._shouldDispatchEvent(dialog.page(), "dialog"))
	        this._dispatchEvent("dialog", { dialog: new import_dialogDispatcher.DialogDispatcher(this, dialog) });
	      else
	        dialog.close().catch(() => {
	        });
	    });
	    if (context._browser.options.name === "chromium") {
	      for (const page of context.backgroundPages())
	        this._dispatchEvent("backgroundPage", { page: import_pageDispatcher.PageDispatcher.from(this, page) });
	      this.addObjectListener(import_crBrowser.CRBrowserContext.CREvents.BackgroundPage, (page) => this._dispatchEvent("backgroundPage", { page: import_pageDispatcher.PageDispatcher.from(this, page) }));
	      for (const serviceWorker of context.serviceWorkers())
	        this._dispatchEvent("serviceWorker", { worker: new import_pageDispatcher.WorkerDispatcher(this, serviceWorker) });
	      this.addObjectListener(import_crBrowser.CRBrowserContext.CREvents.ServiceWorker, (serviceWorker) => this._dispatchEvent("serviceWorker", { worker: new import_pageDispatcher.WorkerDispatcher(this, serviceWorker) }));
	    }
	    this.addObjectListener(import_browserContext.BrowserContext.Events.Request, (request) => {
	      const redirectFromDispatcher = request.redirectedFrom() && (0, import_dispatcher.existingDispatcher)(request.redirectedFrom());
	      if (!redirectFromDispatcher && !this._shouldDispatchNetworkEvent(request, "request") && !request.isNavigationRequest())
	        return;
	      const requestDispatcher = import_networkDispatchers.RequestDispatcher.from(this, request);
	      this._dispatchEvent("request", {
	        request: requestDispatcher,
	        page: import_pageDispatcher.PageDispatcher.fromNullable(this, request.frame()?._page.initializedOrUndefined())
	      });
	    });
	    this.addObjectListener(import_browserContext.BrowserContext.Events.Response, (response) => {
	      const requestDispatcher = (0, import_dispatcher.existingDispatcher)(response.request());
	      if (!requestDispatcher && !this._shouldDispatchNetworkEvent(response.request(), "response"))
	        return;
	      this._dispatchEvent("response", {
	        response: import_networkDispatchers.ResponseDispatcher.from(this, response),
	        page: import_pageDispatcher.PageDispatcher.fromNullable(this, response.frame()?._page.initializedOrUndefined())
	      });
	    });
	    this.addObjectListener(import_browserContext.BrowserContext.Events.RequestFailed, (request) => {
	      const requestDispatcher = (0, import_dispatcher.existingDispatcher)(request);
	      if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFailed"))
	        return;
	      this._dispatchEvent("requestFailed", {
	        request: import_networkDispatchers.RequestDispatcher.from(this, request),
	        failureText: request._failureText || void 0,
	        responseEndTiming: request._responseEndTiming,
	        page: import_pageDispatcher.PageDispatcher.fromNullable(this, request.frame()?._page.initializedOrUndefined())
	      });
	    });
	    this.addObjectListener(import_browserContext.BrowserContext.Events.RequestFinished, ({ request, response }) => {
	      const requestDispatcher = (0, import_dispatcher.existingDispatcher)(request);
	      if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFinished"))
	        return;
	      this._dispatchEvent("requestFinished", {
	        request: import_networkDispatchers.RequestDispatcher.from(this, request),
	        response: import_networkDispatchers.ResponseDispatcher.fromNullable(this, response),
	        responseEndTiming: request._responseEndTiming,
	        page: import_pageDispatcher.PageDispatcher.fromNullable(this, request.frame()?._page.initializedOrUndefined())
	      });
	    });
	  }
	  _shouldDispatchNetworkEvent(request, event) {
	    return this._shouldDispatchEvent(request.frame()?._page?.initializedOrUndefined(), event);
	  }
	  _shouldDispatchEvent(page, event) {
	    if (this._subscriptions.has(event))
	      return true;
	    const pageDispatcher = page ? (0, import_dispatcher.existingDispatcher)(page) : void 0;
	    if (pageDispatcher?._subscriptions.has(event))
	      return true;
	    return false;
	  }
	  async createTempFiles(params) {
	    const dir = this._context._browser.options.artifactsDir;
	    const tmpDir = import_path.default.join(dir, "upload-" + (0, import_crypto.createGuid)());
	    const tempDirWithRootName = params.rootDirName ? import_path.default.join(tmpDir, import_path.default.basename(params.rootDirName)) : tmpDir;
	    await import_fs.default.promises.mkdir(tempDirWithRootName, { recursive: true });
	    this._context._tempDirs.push(tmpDir);
	    return {
	      rootDir: params.rootDirName ? new import_writableStreamDispatcher.WritableStreamDispatcher(this, tempDirWithRootName) : void 0,
	      writableStreams: await Promise.all(params.items.map(async (item) => {
	        await import_fs.default.promises.mkdir(import_path.default.dirname(import_path.default.join(tempDirWithRootName, item.name)), { recursive: true });
	        const file = import_fs.default.createWriteStream(import_path.default.join(tempDirWithRootName, item.name));
	        return new import_writableStreamDispatcher.WritableStreamDispatcher(this, file, item.lastModifiedMs);
	      }))
	    };
	  }
	  async setDefaultNavigationTimeoutNoReply(params) {
	    this._context.setDefaultNavigationTimeout(params.timeout);
	  }
	  async setDefaultTimeoutNoReply(params) {
	    this._context.setDefaultTimeout(params.timeout);
	  }
	  async exposeBinding(params) {
	    await this._context.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
	      if (this._disposed)
	        return;
	      const pageDispatcher = import_pageDispatcher.PageDispatcher.from(this, source.page);
	      const binding = new import_pageDispatcher.BindingCallDispatcher(pageDispatcher, params.name, !!params.needsHandle, source, args);
	      this._dispatchEvent("bindingCall", { binding });
	      return binding.promise();
	    });
	  }
	  async newPage(params, metadata) {
	    return { page: import_pageDispatcher.PageDispatcher.from(this, await this._context.newPage(metadata)) };
	  }
	  async cookies(params) {
	    return { cookies: await this._context.cookies(params.urls) };
	  }
	  async addCookies(params) {
	    await this._context.addCookies(params.cookies);
	  }
	  async clearCookies(params) {
	    const nameRe = params.nameRegexSource !== void 0 && params.nameRegexFlags !== void 0 ? new RegExp(params.nameRegexSource, params.nameRegexFlags) : void 0;
	    const domainRe = params.domainRegexSource !== void 0 && params.domainRegexFlags !== void 0 ? new RegExp(params.domainRegexSource, params.domainRegexFlags) : void 0;
	    const pathRe = params.pathRegexSource !== void 0 && params.pathRegexFlags !== void 0 ? new RegExp(params.pathRegexSource, params.pathRegexFlags) : void 0;
	    await this._context.clearCookies({
	      name: nameRe || params.name,
	      domain: domainRe || params.domain,
	      path: pathRe || params.path
	    });
	  }
	  async grantPermissions(params) {
	    await this._context.grantPermissions(params.permissions, params.origin);
	  }
	  async clearPermissions() {
	    await this._context.clearPermissions();
	  }
	  async setGeolocation(params) {
	    await this._context.setGeolocation(params.geolocation);
	  }
	  async setExtraHTTPHeaders(params) {
	    await this._context.setExtraHTTPHeaders(params.headers);
	  }
	  async setOffline(params) {
	    await this._context.setOffline(params.offline);
	  }
	  async setHTTPCredentials(params) {
	    await this._context.setHTTPCredentials(params.httpCredentials);
	  }
	  async addInitScript(params) {
	    await this._context.addInitScript(params.source);
	  }
	  async setNetworkInterceptionPatterns(params) {
	    if (!params.patterns.length) {
	      await this._context.setRequestInterceptor(void 0);
	      return;
	    }
	    const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
	    await this._context.setRequestInterceptor((route, request) => {
	      const matchesSome = urlMatchers.some((urlMatch) => (0, import_urlMatch.urlMatches)(this._context._options.baseURL, request.url(), urlMatch));
	      if (!matchesSome)
	        return false;
	      this._dispatchEvent("route", { route: import_networkDispatchers.RouteDispatcher.from(import_networkDispatchers.RequestDispatcher.from(this, request), route) });
	      return true;
	    });
	  }
	  async setWebSocketInterceptionPatterns(params, metadata) {
	    this._webSocketInterceptionPatterns = params.patterns;
	    if (params.patterns.length)
	      await import_webSocketRouteDispatcher.WebSocketRouteDispatcher.installIfNeeded(this._context);
	  }
	  async storageState(params, metadata) {
	    return await this._context.storageState(params.indexedDB);
	  }
	  async close(params, metadata) {
	    metadata.potentiallyClosesScope = true;
	    await this._context.close(params);
	  }
	  async enableRecorder(params) {
	    await import_recorder.Recorder.show(this._context, import_recorderApp.RecorderApp.factory(this._context), params);
	  }
	  async pause(params, metadata) {
	  }
	  async newCDPSession(params) {
	    if (!this._object._browser.options.isChromium)
	      throw new Error(`CDP session is only available in Chromium`);
	    if (!params.page && !params.frame || params.page && params.frame)
	      throw new Error(`CDP session must be initiated with either Page or Frame, not none or both`);
	    const crBrowserContext = this._object;
	    return { session: new import_cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowserContext.newCDPSession((params.page ? params.page : params.frame)._object)) };
	  }
	  async harStart(params) {
	    const harId = await this._context._harStart(params.page ? params.page._object : null, params.options);
	    return { harId };
	  }
	  async harExport(params) {
	    const artifact = await this._context._harExport(params.harId);
	    if (!artifact)
	      throw new Error("No HAR artifact. Ensure record.harPath is set.");
	    return { artifact: import_artifactDispatcher.ArtifactDispatcher.from(this, artifact) };
	  }
	  async clockFastForward(params, metadata) {
	    await this._context.clock.fastForward(params.ticksString ?? params.ticksNumber ?? 0);
	  }
	  async clockInstall(params, metadata) {
	    await this._context.clock.install(params.timeString ?? params.timeNumber ?? void 0);
	  }
	  async clockPauseAt(params, metadata) {
	    await this._context.clock.pauseAt(params.timeString ?? params.timeNumber ?? 0);
	  }
	  async clockResume(params, metadata) {
	    await this._context.clock.resume();
	  }
	  async clockRunFor(params, metadata) {
	    await this._context.clock.runFor(params.ticksString ?? params.ticksNumber ?? 0);
	  }
	  async clockSetFixedTime(params, metadata) {
	    await this._context.clock.setFixedTime(params.timeString ?? params.timeNumber ?? 0);
	  }
	  async clockSetSystemTime(params, metadata) {
	    await this._context.clock.setSystemTime(params.timeString ?? params.timeNumber ?? 0);
	  }
	  async updateSubscription(params) {
	    if (params.enabled)
	      this._subscriptions.add(params.event);
	    else
	      this._subscriptions.delete(params.event);
	  }
	  _onDispose() {
	    if (!this._context.isClosingOrClosed())
	      this._context.setRequestInterceptor(void 0).catch(() => {
	      });
	  }
	}
	return browserContextDispatcher;
}

var androidDispatcher;
var hasRequiredAndroidDispatcher;

function requireAndroidDispatcher () {
	if (hasRequiredAndroidDispatcher) return androidDispatcher;
	hasRequiredAndroidDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var androidDispatcher_exports = {};
	__export(androidDispatcher_exports, {
	  AndroidDeviceDispatcher: () => AndroidDeviceDispatcher,
	  AndroidDispatcher: () => AndroidDispatcher,
	  AndroidSocketDispatcher: () => AndroidSocketDispatcher
	});
	androidDispatcher = __toCommonJS(androidDispatcher_exports);
	var import_browserContextDispatcher = requireBrowserContextDispatcher();
	var import_dispatcher = requireDispatcher();
	var import_android = requireAndroid$1();
	class AndroidDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, android) {
	    super(scope, android, "Android", {});
	    this._type_Android = true;
	  }
	  async devices(params) {
	    const devices = await this._object.devices(params);
	    return {
	      devices: devices.map((d) => AndroidDeviceDispatcher.from(this, d))
	    };
	  }
	  async setDefaultTimeoutNoReply(params) {
	    this._object.setDefaultTimeout(params.timeout);
	  }
	}
	class AndroidDeviceDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, device) {
	    super(scope, device, "AndroidDevice", {
	      model: device.model,
	      serial: device.serial
	    });
	    this._type_EventTarget = true;
	    this._type_AndroidDevice = true;
	    for (const webView of device.webViews())
	      this._dispatchEvent("webViewAdded", { webView });
	    this.addObjectListener(import_android.AndroidDevice.Events.WebViewAdded, (webView) => this._dispatchEvent("webViewAdded", { webView }));
	    this.addObjectListener(import_android.AndroidDevice.Events.WebViewRemoved, (socketName) => this._dispatchEvent("webViewRemoved", { socketName }));
	    this.addObjectListener(import_android.AndroidDevice.Events.Close, (socketName) => this._dispatchEvent("close"));
	  }
	  static from(scope, device) {
	    const result = (0, import_dispatcher.existingDispatcher)(device);
	    return result || new AndroidDeviceDispatcher(scope, device);
	  }
	  async wait(params) {
	    await this._object.send("wait", params);
	  }
	  async fill(params) {
	    await this._object.send("click", { selector: params.selector });
	    await this._object.send("fill", params);
	  }
	  async tap(params) {
	    await this._object.send("click", params);
	  }
	  async drag(params) {
	    await this._object.send("drag", params);
	  }
	  async fling(params) {
	    await this._object.send("fling", params);
	  }
	  async longTap(params) {
	    await this._object.send("longClick", params);
	  }
	  async pinchClose(params) {
	    await this._object.send("pinchClose", params);
	  }
	  async pinchOpen(params) {
	    await this._object.send("pinchOpen", params);
	  }
	  async scroll(params) {
	    await this._object.send("scroll", params);
	  }
	  async swipe(params) {
	    await this._object.send("swipe", params);
	  }
	  async info(params) {
	    const info = await this._object.send("info", params);
	    fixupAndroidElementInfo(info);
	    return { info };
	  }
	  async inputType(params) {
	    const text = params.text;
	    const keyCodes = [];
	    for (let i = 0; i < text.length; ++i) {
	      const code = keyMap.get(text[i].toUpperCase());
	      if (code === void 0)
	        throw new Error("No mapping for " + text[i] + " found");
	      keyCodes.push(code);
	    }
	    await Promise.all(keyCodes.map((keyCode) => this._object.send("inputPress", { keyCode })));
	  }
	  async inputPress(params) {
	    if (!keyMap.has(params.key))
	      throw new Error("Unknown key: " + params.key);
	    await this._object.send("inputPress", { keyCode: keyMap.get(params.key) });
	  }
	  async inputTap(params) {
	    await this._object.send("inputClick", params);
	  }
	  async inputSwipe(params) {
	    await this._object.send("inputSwipe", params);
	  }
	  async inputDrag(params) {
	    await this._object.send("inputDrag", params);
	  }
	  async screenshot(params) {
	    return { binary: await this._object.screenshot() };
	  }
	  async shell(params) {
	    return { result: await this._object.shell(params.command) };
	  }
	  async open(params, metadata) {
	    const socket = await this._object.open(params.command);
	    return { socket: new AndroidSocketDispatcher(this, socket) };
	  }
	  async installApk(params) {
	    await this._object.installApk(params.file, { args: params.args });
	  }
	  async push(params) {
	    await this._object.push(params.file, params.path, params.mode);
	  }
	  async launchBrowser(params) {
	    const context = await this._object.launchBrowser(params.pkg, params);
	    return { context: new import_browserContextDispatcher.BrowserContextDispatcher(this, context) };
	  }
	  async close(params) {
	    await this._object.close();
	  }
	  async setDefaultTimeoutNoReply(params) {
	    this._object.setDefaultTimeout(params.timeout);
	  }
	  async connectToWebView(params) {
	    return { context: new import_browserContextDispatcher.BrowserContextDispatcher(this, await this._object.connectToWebView(params.socketName)) };
	  }
	}
	class AndroidSocketDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, socket) {
	    super(scope, socket, "AndroidSocket", {});
	    this._type_AndroidSocket = true;
	    this.addObjectListener("data", (data) => this._dispatchEvent("data", { data }));
	    this.addObjectListener("close", () => {
	      this._dispatchEvent("close");
	      this._dispose();
	    });
	  }
	  async write(params, metadata) {
	    await this._object.write(params.data);
	  }
	  async close(params, metadata) {
	    this._object.close();
	  }
	}
	const keyMap = /* @__PURE__ */ new Map([
	  ["Unknown", 0],
	  ["SoftLeft", 1],
	  ["SoftRight", 2],
	  ["Home", 3],
	  ["Back", 4],
	  ["Call", 5],
	  ["EndCall", 6],
	  ["0", 7],
	  ["1", 8],
	  ["2", 9],
	  ["3", 10],
	  ["4", 11],
	  ["5", 12],
	  ["6", 13],
	  ["7", 14],
	  ["8", 15],
	  ["9", 16],
	  ["Star", 17],
	  ["*", 17],
	  ["Pound", 18],
	  ["#", 18],
	  ["DialUp", 19],
	  ["DialDown", 20],
	  ["DialLeft", 21],
	  ["DialRight", 22],
	  ["DialCenter", 23],
	  ["VolumeUp", 24],
	  ["VolumeDown", 25],
	  ["Power", 26],
	  ["Camera", 27],
	  ["Clear", 28],
	  ["A", 29],
	  ["B", 30],
	  ["C", 31],
	  ["D", 32],
	  ["E", 33],
	  ["F", 34],
	  ["G", 35],
	  ["H", 36],
	  ["I", 37],
	  ["J", 38],
	  ["K", 39],
	  ["L", 40],
	  ["M", 41],
	  ["N", 42],
	  ["O", 43],
	  ["P", 44],
	  ["Q", 45],
	  ["R", 46],
	  ["S", 47],
	  ["T", 48],
	  ["U", 49],
	  ["V", 50],
	  ["W", 51],
	  ["X", 52],
	  ["Y", 53],
	  ["Z", 54],
	  ["Comma", 55],
	  [",", 55],
	  ["Period", 56],
	  [".", 56],
	  ["AltLeft", 57],
	  ["AltRight", 58],
	  ["ShiftLeft", 59],
	  ["ShiftRight", 60],
	  ["Tab", 61],
	  ["	", 61],
	  ["Space", 62],
	  [" ", 62],
	  ["Sym", 63],
	  ["Explorer", 64],
	  ["Envelop", 65],
	  ["Enter", 66],
	  ["Del", 67],
	  ["Grave", 68],
	  ["Minus", 69],
	  ["-", 69],
	  ["Equals", 70],
	  ["=", 70],
	  ["LeftBracket", 71],
	  ["(", 71],
	  ["RightBracket", 72],
	  [")", 72],
	  ["Backslash", 73],
	  ["\\", 73],
	  ["Semicolon", 74],
	  [";", 74],
	  ["Apostrophe", 75],
	  ["`", 75],
	  ["Slash", 76],
	  ["/", 76],
	  ["At", 77],
	  ["@", 77],
	  ["Num", 78],
	  ["HeadsetHook", 79],
	  ["Focus", 80],
	  ["Plus", 81],
	  ["Menu", 82],
	  ["Notification", 83],
	  ["Search", 84],
	  ["ChannelUp", 166],
	  ["ChannelDown", 167],
	  ["AppSwitch", 187],
	  ["Assist", 219],
	  ["Cut", 277],
	  ["Copy", 278],
	  ["Paste", 279]
	]);
	function fixupAndroidElementInfo(info) {
	  info.clazz = info.clazz || "";
	  info.pkg = info.pkg || "";
	  info.res = info.res || "";
	  info.desc = info.desc || "";
	  info.text = info.text || "";
	  for (const child of info.children || [])
	    fixupAndroidElementInfo(child);
	}
	return androidDispatcher;
}

var browserDispatcher;
var hasRequiredBrowserDispatcher;

function requireBrowserDispatcher () {
	if (hasRequiredBrowserDispatcher) return browserDispatcher;
	hasRequiredBrowserDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserDispatcher_exports = {};
	__export(browserDispatcher_exports, {
	  BrowserDispatcher: () => BrowserDispatcher,
	  ConnectedBrowserDispatcher: () => ConnectedBrowserDispatcher
	});
	browserDispatcher = __toCommonJS(browserDispatcher_exports);
	var import_browser = requireBrowser$1();
	var import_browserContextDispatcher = requireBrowserContextDispatcher();
	var import_cdpSessionDispatcher = requireCdpSessionDispatcher();
	var import_dispatcher = requireDispatcher();
	var import_dispatcher2 = requireDispatcher();
	var import_browserContext = requireBrowserContext$1();
	var import_selectors = requireSelectors$1();
	var import_artifactDispatcher = requireArtifactDispatcher();
	class BrowserDispatcher extends import_dispatcher2.Dispatcher {
	  constructor(scope, browser) {
	    super(scope, browser, "Browser", { version: browser.version(), name: browser.options.name });
	    this._type_Browser = true;
	    this.addObjectListener(import_browser.Browser.Events.Disconnected, () => this._didClose());
	  }
	  _didClose() {
	    this._dispatchEvent("close");
	    this._dispose();
	  }
	  async newContext(params, metadata) {
	    const context = await this._object.newContext(metadata, params);
	    return { context: new import_browserContextDispatcher.BrowserContextDispatcher(this, context) };
	  }
	  async newContextForReuse(params, metadata) {
	    return await newContextForReuse(this._object, this, params, null, metadata);
	  }
	  async stopPendingOperations(params, metadata) {
	    await this._object.stopPendingOperations(params.reason);
	  }
	  async close(params, metadata) {
	    metadata.potentiallyClosesScope = true;
	    await this._object.close(params);
	  }
	  async killForTests(_, metadata) {
	    metadata.potentiallyClosesScope = true;
	    await this._object.killForTests();
	  }
	  async defaultUserAgentForTest() {
	    return { userAgent: this._object.userAgent() };
	  }
	  async newBrowserCDPSession() {
	    if (!this._object.options.isChromium)
	      throw new Error(`CDP session is only available in Chromium`);
	    const crBrowser = this._object;
	    return { session: new import_cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession()) };
	  }
	  async startTracing(params) {
	    if (!this._object.options.isChromium)
	      throw new Error(`Tracing is only available in Chromium`);
	    const crBrowser = this._object;
	    await crBrowser.startTracing(params.page ? params.page._object : void 0, params);
	  }
	  async stopTracing() {
	    if (!this._object.options.isChromium)
	      throw new Error(`Tracing is only available in Chromium`);
	    const crBrowser = this._object;
	    return { artifact: import_artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing()) };
	  }
	}
	class ConnectedBrowserDispatcher extends import_dispatcher2.Dispatcher {
	  constructor(scope, browser) {
	    super(scope, browser, "Browser", { version: browser.version(), name: browser.options.name });
	    this._type_Browser = true;
	    this._contexts = /* @__PURE__ */ new Set();
	    this.selectors = new import_selectors.Selectors();
	  }
	  async newContext(params, metadata) {
	    if (params.recordVideo)
	      params.recordVideo.dir = this._object.options.artifactsDir;
	    const context = await this._object.newContext(metadata, params);
	    this._contexts.add(context);
	    context.setSelectors(this.selectors);
	    context.on(import_browserContext.BrowserContext.Events.Close, () => this._contexts.delete(context));
	    return { context: new import_browserContextDispatcher.BrowserContextDispatcher(this, context) };
	  }
	  async newContextForReuse(params, metadata) {
	    return await newContextForReuse(this._object, this, params, this.selectors, metadata);
	  }
	  async stopPendingOperations(params, metadata) {
	    await this._object.stopPendingOperations(params.reason);
	  }
	  async close() {
	  }
	  async killForTests() {
	  }
	  async defaultUserAgentForTest() {
	    throw new Error("Client should not send us Browser.defaultUserAgentForTest");
	  }
	  async newBrowserCDPSession() {
	    if (!this._object.options.isChromium)
	      throw new Error(`CDP session is only available in Chromium`);
	    const crBrowser = this._object;
	    return { session: new import_cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession()) };
	  }
	  async startTracing(params) {
	    if (!this._object.options.isChromium)
	      throw new Error(`Tracing is only available in Chromium`);
	    const crBrowser = this._object;
	    await crBrowser.startTracing(params.page ? params.page._object : void 0, params);
	  }
	  async stopTracing() {
	    if (!this._object.options.isChromium)
	      throw new Error(`Tracing is only available in Chromium`);
	    const crBrowser = this._object;
	    return { artifact: import_artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing()) };
	  }
	  async cleanupContexts() {
	    await Promise.all(Array.from(this._contexts).map((context) => context.close({ reason: "Global context cleanup (connection terminated)" })));
	  }
	}
	async function newContextForReuse(browser, scope, params, selectors, metadata) {
	  const { context, needsReset } = await browser.newContextForReuse(params, metadata);
	  if (needsReset) {
	    const oldContextDispatcher = (0, import_dispatcher.existingDispatcher)(context);
	    if (oldContextDispatcher)
	      oldContextDispatcher._dispose();
	    await context.resetForReuse(metadata, params);
	  }
	  if (selectors)
	    context.setSelectors(selectors);
	  const contextDispatcher = new import_browserContextDispatcher.BrowserContextDispatcher(scope, context);
	  return { context: contextDispatcher };
	}
	return browserDispatcher;
}

var browserTypeDispatcher;
var hasRequiredBrowserTypeDispatcher;

function requireBrowserTypeDispatcher () {
	if (hasRequiredBrowserTypeDispatcher) return browserTypeDispatcher;
	hasRequiredBrowserTypeDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserTypeDispatcher_exports = {};
	__export(browserTypeDispatcher_exports, {
	  BrowserTypeDispatcher: () => BrowserTypeDispatcher
	});
	browserTypeDispatcher = __toCommonJS(browserTypeDispatcher_exports);
	var import_browserContextDispatcher = requireBrowserContextDispatcher();
	var import_browserDispatcher = requireBrowserDispatcher();
	var import_dispatcher = requireDispatcher();
	class BrowserTypeDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, browserType) {
	    super(scope, browserType, "BrowserType", {
	      executablePath: browserType.executablePath(),
	      name: browserType.name()
	    });
	    this._type_BrowserType = true;
	  }
	  async launch(params, metadata) {
	    const browser = await this._object.launch(metadata, params);
	    return { browser: new import_browserDispatcher.BrowserDispatcher(this, browser) };
	  }
	  async launchPersistentContext(params, metadata) {
	    const browserContext = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
	    return { context: new import_browserContextDispatcher.BrowserContextDispatcher(this, browserContext) };
	  }
	  async connectOverCDP(params, metadata) {
	    const browser = await this._object.connectOverCDP(metadata, params.endpointURL, params);
	    const browserDispatcher = new import_browserDispatcher.BrowserDispatcher(this, browser);
	    return {
	      browser: browserDispatcher,
	      defaultContext: browser._defaultContext ? new import_browserContextDispatcher.BrowserContextDispatcher(browserDispatcher, browser._defaultContext) : void 0
	    };
	  }
	}
	return browserTypeDispatcher;
}

var electronDispatcher;
var hasRequiredElectronDispatcher;

function requireElectronDispatcher () {
	if (hasRequiredElectronDispatcher) return electronDispatcher;
	hasRequiredElectronDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var electronDispatcher_exports = {};
	__export(electronDispatcher_exports, {
	  ElectronApplicationDispatcher: () => ElectronApplicationDispatcher,
	  ElectronDispatcher: () => ElectronDispatcher
	});
	electronDispatcher = __toCommonJS(electronDispatcher_exports);
	var import_browserContextDispatcher = requireBrowserContextDispatcher();
	var import_dispatcher = requireDispatcher();
	var import_elementHandlerDispatcher = requireElementHandlerDispatcher();
	var import_jsHandleDispatcher = requireJsHandleDispatcher();
	var import_electron = requireElectron$1();
	class ElectronDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, electron) {
	    super(scope, electron, "Electron", {});
	    this._type_Electron = true;
	  }
	  async launch(params) {
	    const electronApplication = await this._object.launch(params);
	    return { electronApplication: new ElectronApplicationDispatcher(this, electronApplication) };
	  }
	}
	class ElectronApplicationDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, electronApplication) {
	    super(scope, electronApplication, "ElectronApplication", {
	      context: new import_browserContextDispatcher.BrowserContextDispatcher(scope, electronApplication.context())
	    });
	    this._type_EventTarget = true;
	    this._type_ElectronApplication = true;
	    this._subscriptions = /* @__PURE__ */ new Set();
	    this.addObjectListener(import_electron.ElectronApplication.Events.Close, () => {
	      this._dispatchEvent("close");
	      this._dispose();
	    });
	    this.addObjectListener(import_electron.ElectronApplication.Events.Console, (message) => {
	      if (!this._subscriptions.has("console"))
	        return;
	      this._dispatchEvent("console", {
	        type: message.type(),
	        text: message.text(),
	        args: message.args().map((a) => import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, a)),
	        location: message.location()
	      });
	    });
	  }
	  async browserWindow(params) {
	    const handle = await this._object.browserWindow(params.page.page());
	    return { handle: import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, handle) };
	  }
	  async evaluateExpression(params) {
	    const handle = await this._object._nodeElectronHandlePromise;
	    return { value: (0, import_jsHandleDispatcher.serializeResult)(await handle.evaluateExpression(params.expression, { isFunction: params.isFunction }, (0, import_jsHandleDispatcher.parseArgument)(params.arg))) };
	  }
	  async evaluateExpressionHandle(params) {
	    const handle = await this._object._nodeElectronHandlePromise;
	    const result = await handle.evaluateExpressionHandle(params.expression, { isFunction: params.isFunction }, (0, import_jsHandleDispatcher.parseArgument)(params.arg));
	    return { handle: import_elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, result) };
	  }
	  async updateSubscription(params) {
	    if (params.enabled)
	      this._subscriptions.add(params.event);
	    else
	      this._subscriptions.delete(params.event);
	  }
	  async close() {
	    await this._object.close();
	  }
	}
	return electronDispatcher;
}

var harBackend;
var hasRequiredHarBackend;

function requireHarBackend () {
	if (hasRequiredHarBackend) return harBackend;
	hasRequiredHarBackend = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var harBackend_exports = {};
	__export(harBackend_exports, {
	  HarBackend: () => HarBackend
	});
	harBackend = __toCommonJS(harBackend_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_crypto = requireCrypto();
	const redirectStatus = [301, 302, 303, 307, 308];
	class HarBackend {
	  constructor(harFile, baseDir, zipFile) {
	    this.id = (0, import_crypto.createGuid)();
	    this._harFile = harFile;
	    this._baseDir = baseDir;
	    this._zipFile = zipFile;
	  }
	  async lookup(url, method, headers, postData, isNavigationRequest) {
	    let entry;
	    try {
	      entry = await this._harFindResponse(url, method, headers, postData);
	    } catch (e) {
	      return { action: "error", message: "HAR error: " + e.message };
	    }
	    if (!entry)
	      return { action: "noentry" };
	    if (entry.request.url !== url && isNavigationRequest)
	      return { action: "redirect", redirectURL: entry.request.url };
	    const response = entry.response;
	    try {
	      const buffer = await this._loadContent(response.content);
	      return {
	        action: "fulfill",
	        status: response.status,
	        headers: response.headers,
	        body: buffer
	      };
	    } catch (e) {
	      return { action: "error", message: e.message };
	    }
	  }
	  async _loadContent(content) {
	    const file = content._file;
	    let buffer;
	    if (file) {
	      if (this._zipFile)
	        buffer = await this._zipFile.read(file);
	      else
	        buffer = await import_fs.default.promises.readFile(import_path.default.resolve(this._baseDir, file));
	    } else {
	      buffer = Buffer.from(content.text || "", content.encoding === "base64" ? "base64" : "utf-8");
	    }
	    return buffer;
	  }
	  async _harFindResponse(url, method, headers, postData) {
	    const harLog = this._harFile.log;
	    const visited = /* @__PURE__ */ new Set();
	    while (true) {
	      const entries = [];
	      for (const candidate of harLog.entries) {
	        if (candidate.request.url !== url || candidate.request.method !== method)
	          continue;
	        if (method === "POST" && postData && candidate.request.postData) {
	          const buffer = await this._loadContent(candidate.request.postData);
	          if (!buffer.equals(postData)) {
	            const boundary = multipartBoundary(headers);
	            if (!boundary)
	              continue;
	            const candidataBoundary = multipartBoundary(candidate.request.headers);
	            if (!candidataBoundary)
	              continue;
	            if (postData.toString().replaceAll(boundary, "") !== buffer.toString().replaceAll(candidataBoundary, ""))
	              continue;
	          }
	        }
	        entries.push(candidate);
	      }
	      if (!entries.length)
	        return;
	      let entry = entries[0];
	      if (entries.length > 1) {
	        const list = [];
	        for (const candidate of entries) {
	          const matchingHeaders = countMatchingHeaders(candidate.request.headers, headers);
	          list.push({ candidate, matchingHeaders });
	        }
	        list.sort((a, b) => b.matchingHeaders - a.matchingHeaders);
	        entry = list[0].candidate;
	      }
	      if (visited.has(entry))
	        throw new Error(`Found redirect cycle for ${url}`);
	      visited.add(entry);
	      const locationHeader = entry.response.headers.find((h) => h.name.toLowerCase() === "location");
	      if (redirectStatus.includes(entry.response.status) && locationHeader) {
	        const locationURL = new URL(locationHeader.value, url);
	        url = locationURL.toString();
	        if ((entry.response.status === 301 || entry.response.status === 302) && method === "POST" || entry.response.status === 303 && !["GET", "HEAD"].includes(method)) {
	          method = "GET";
	        }
	        continue;
	      }
	      return entry;
	    }
	  }
	  dispose() {
	    this._zipFile?.close();
	  }
	}
	function countMatchingHeaders(harHeaders, headers) {
	  const set = new Set(headers.map((h) => h.name.toLowerCase() + ":" + h.value));
	  let matches = 0;
	  for (const h of harHeaders) {
	    if (set.has(h.name.toLowerCase() + ":" + h.value))
	      ++matches;
	  }
	  return matches;
	}
	function multipartBoundary(headers) {
	  const contentType = headers.find((h) => h.name.toLowerCase() === "content-type");
	  if (!contentType?.value.includes("multipart/form-data"))
	    return void 0;
	  const boundary = contentType.value.match(/boundary=(\S+)/);
	  if (boundary)
	    return boundary[1];
	  return void 0;
	}
	return harBackend;
}

var traceUtils;
var hasRequiredTraceUtils;

function requireTraceUtils () {
	if (hasRequiredTraceUtils) return traceUtils;
	hasRequiredTraceUtils = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var traceUtils_exports = {};
	__export(traceUtils_exports, {
	  parseClientSideCallMetadata: () => parseClientSideCallMetadata,
	  serializeClientSideCallMetadata: () => serializeClientSideCallMetadata
	});
	traceUtils = __toCommonJS(traceUtils_exports);
	var import_builtins = requireBuiltins();
	function parseClientSideCallMetadata(data) {
	  const result = new import_builtins.Map();
	  const { files, stacks } = data;
	  for (const s of stacks) {
	    const [id, ff] = s;
	    result.set(`call@${id}`, ff.map((f) => ({ file: files[f[0]], line: f[1], column: f[2], function: f[3] })));
	  }
	  return result;
	}
	function serializeClientSideCallMetadata(metadatas) {
	  const fileNames = new import_builtins.Map();
	  const stacks = [];
	  for (const m of metadatas) {
	    if (!m.stack || !m.stack.length)
	      continue;
	    const stack = [];
	    for (const frame of m.stack) {
	      let ordinal = fileNames.get(frame.file);
	      if (typeof ordinal !== "number") {
	        ordinal = fileNames.size;
	        fileNames.set(frame.file, ordinal);
	      }
	      const stackFrame = [ordinal, frame.line || 0, frame.column || 0, frame.function || ""];
	      stack.push(stackFrame);
	    }
	    stacks.push([m.id, stack]);
	  }
	  return { files: [...fileNames.keys()], stacks };
	}
	return traceUtils;
}

var localUtils$1;
var hasRequiredLocalUtils$1;

function requireLocalUtils$1 () {
	if (hasRequiredLocalUtils$1) return localUtils$1;
	hasRequiredLocalUtils$1 = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var localUtils_exports = {};
	__export(localUtils_exports, {
	  addStackToTracingNoReply: () => addStackToTracingNoReply,
	  harClose: () => harClose,
	  harLookup: () => harLookup,
	  harOpen: () => harOpen,
	  harUnzip: () => harUnzip,
	  traceDiscarded: () => traceDiscarded,
	  tracingStarted: () => tracingStarted,
	  zip: () => zip
	});
	localUtils$1 = __toCommonJS(localUtils_exports);
	var import_fs = __toESM(require$$0$4);
	var import_os = __toESM(require$$0$2);
	var import_path = __toESM(require$$1$1);
	var import_crypto = requireCrypto();
	var import_harBackend = requireHarBackend();
	var import_manualPromise = requireManualPromise();
	var import_zipFile = requireZipFile();
	var import_zipBundle = requireZipBundle();
	var import_traceUtils = requireTraceUtils();
	var import_assert = requireAssert$1();
	var import_fileUtils = requireFileUtils$1();
	async function zip(stackSessions, params) {
	  const promise = new import_manualPromise.ManualPromise();
	  const zipFile = new import_zipBundle.yazl.ZipFile();
	  zipFile.on("error", (error) => promise.reject(error));
	  const addFile = (file, name) => {
	    try {
	      if (import_fs.default.statSync(file).isFile())
	        zipFile.addFile(file, name);
	    } catch (e) {
	    }
	  };
	  for (const entry of params.entries)
	    addFile(entry.value, entry.name);
	  const stackSession = params.stacksId ? stackSessions.get(params.stacksId) : void 0;
	  if (stackSession?.callStacks.length) {
	    await stackSession.writer;
	    if (process.env.PW_LIVE_TRACE_STACKS) {
	      zipFile.addFile(stackSession.file, "trace.stacks");
	    } else {
	      const buffer = Buffer.from(JSON.stringify((0, import_traceUtils.serializeClientSideCallMetadata)(stackSession.callStacks)));
	      zipFile.addBuffer(buffer, "trace.stacks");
	    }
	  }
	  if (params.includeSources) {
	    const sourceFiles = /* @__PURE__ */ new Set();
	    for (const { stack } of stackSession?.callStacks || []) {
	      if (!stack)
	        continue;
	      for (const { file } of stack)
	        sourceFiles.add(file);
	    }
	    for (const sourceFile of sourceFiles)
	      addFile(sourceFile, "resources/src@" + await (0, import_crypto.calculateSha1)(sourceFile) + ".txt");
	  }
	  if (params.mode === "write") {
	    await import_fs.default.promises.mkdir(import_path.default.dirname(params.zipFile), { recursive: true });
	    zipFile.end(void 0, () => {
	      zipFile.outputStream.pipe(import_fs.default.createWriteStream(params.zipFile)).on("close", () => promise.resolve()).on("error", (error) => promise.reject(error));
	    });
	    await promise;
	    await deleteStackSession(stackSessions, params.stacksId);
	    return;
	  }
	  const tempFile = params.zipFile + ".tmp";
	  await import_fs.default.promises.rename(params.zipFile, tempFile);
	  import_zipBundle.yauzl.open(tempFile, (err, inZipFile) => {
	    if (err) {
	      promise.reject(err);
	      return;
	    }
	    (0, import_assert.assert)(inZipFile);
	    let pendingEntries = inZipFile.entryCount;
	    inZipFile.on("entry", (entry) => {
	      inZipFile.openReadStream(entry, (err2, readStream) => {
	        if (err2) {
	          promise.reject(err2);
	          return;
	        }
	        zipFile.addReadStream(readStream, entry.fileName);
	        if (--pendingEntries === 0) {
	          zipFile.end(void 0, () => {
	            zipFile.outputStream.pipe(import_fs.default.createWriteStream(params.zipFile)).on("close", () => {
	              import_fs.default.promises.unlink(tempFile).then(() => {
	                promise.resolve();
	              }).catch((error) => promise.reject(error));
	            });
	          });
	        }
	      });
	    });
	  });
	  await promise;
	  await deleteStackSession(stackSessions, params.stacksId);
	}
	async function deleteStackSession(stackSessions, stacksId) {
	  const session = stacksId ? stackSessions.get(stacksId) : void 0;
	  if (!session)
	    return;
	  await session.writer;
	  if (session.tmpDir)
	    await (0, import_fileUtils.removeFolders)([session.tmpDir]);
	  stackSessions.delete(stacksId);
	}
	async function harOpen(harBackends, params) {
	  let harBackend;
	  if (params.file.endsWith(".zip")) {
	    const zipFile = new import_zipFile.ZipFile(params.file);
	    const entryNames = await zipFile.entries();
	    const harEntryName = entryNames.find((e) => e.endsWith(".har"));
	    if (!harEntryName)
	      return { error: "Specified archive does not have a .har file" };
	    const har = await zipFile.read(harEntryName);
	    const harFile = JSON.parse(har.toString());
	    harBackend = new import_harBackend.HarBackend(harFile, null, zipFile);
	  } else {
	    const harFile = JSON.parse(await import_fs.default.promises.readFile(params.file, "utf-8"));
	    harBackend = new import_harBackend.HarBackend(harFile, import_path.default.dirname(params.file), null);
	  }
	  harBackends.set(harBackend.id, harBackend);
	  return { harId: harBackend.id };
	}
	async function harLookup(harBackends, params) {
	  const harBackend = harBackends.get(params.harId);
	  if (!harBackend)
	    return { action: "error", message: `Internal error: har was not opened` };
	  return await harBackend.lookup(params.url, params.method, params.headers, params.postData, params.isNavigationRequest);
	}
	async function harClose(harBackends, params) {
	  const harBackend = harBackends.get(params.harId);
	  if (harBackend) {
	    harBackends.delete(harBackend.id);
	    harBackend.dispose();
	  }
	}
	async function harUnzip(params) {
	  const dir = import_path.default.dirname(params.zipFile);
	  const zipFile = new import_zipFile.ZipFile(params.zipFile);
	  for (const entry of await zipFile.entries()) {
	    const buffer = await zipFile.read(entry);
	    if (entry === "har.har")
	      await import_fs.default.promises.writeFile(params.harFile, buffer);
	    else
	      await import_fs.default.promises.writeFile(import_path.default.join(dir, entry), buffer);
	  }
	  zipFile.close();
	  await import_fs.default.promises.unlink(params.zipFile);
	}
	async function tracingStarted(stackSessions, params) {
	  let tmpDir = void 0;
	  if (!params.tracesDir)
	    tmpDir = await import_fs.default.promises.mkdtemp(import_path.default.join(import_os.default.tmpdir(), "playwright-tracing-"));
	  const traceStacksFile = import_path.default.join(params.tracesDir || tmpDir, params.traceName + ".stacks");
	  stackSessions.set(traceStacksFile, { callStacks: [], file: traceStacksFile, writer: Promise.resolve(), tmpDir });
	  return { stacksId: traceStacksFile };
	}
	async function traceDiscarded(stackSessions, params) {
	  await deleteStackSession(stackSessions, params.stacksId);
	}
	async function addStackToTracingNoReply(stackSessions, params) {
	  for (const session of stackSessions.values()) {
	    session.callStacks.push(params.callData);
	    if (process.env.PW_LIVE_TRACE_STACKS) {
	      session.writer = session.writer.then(() => {
	        const buffer = Buffer.from(JSON.stringify((0, import_traceUtils.serializeClientSideCallMetadata)(session.callStacks)));
	        return import_fs.default.promises.writeFile(session.file, buffer);
	      });
	    }
	  }
	}
	return localUtils$1;
}

var jsonPipeDispatcher;
var hasRequiredJsonPipeDispatcher;

function requireJsonPipeDispatcher () {
	if (hasRequiredJsonPipeDispatcher) return jsonPipeDispatcher;
	hasRequiredJsonPipeDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var jsonPipeDispatcher_exports = {};
	__export(jsonPipeDispatcher_exports, {
	  JsonPipeDispatcher: () => JsonPipeDispatcher
	});
	jsonPipeDispatcher = __toCommonJS(jsonPipeDispatcher_exports);
	var import_dispatcher = requireDispatcher();
	var import_crypto = requireCrypto();
	class JsonPipeDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope) {
	    super(scope, { guid: "jsonPipe@" + (0, import_crypto.createGuid)() }, "JsonPipe", {});
	    this._type_JsonPipe = true;
	  }
	  async send(params) {
	    this.emit("message", params.message);
	  }
	  async close() {
	    this.emit("close");
	    if (!this._disposed) {
	      this._dispatchEvent("closed", {});
	      this._dispose();
	    }
	  }
	  dispatch(message) {
	    if (!this._disposed)
	      this._dispatchEvent("message", { message });
	  }
	  wasClosed(reason) {
	    if (!this._disposed) {
	      this._dispatchEvent("closed", { reason });
	      this._dispose();
	    }
	  }
	  dispose() {
	    this._dispose();
	  }
	}
	return jsonPipeDispatcher;
}

var socksInterceptor;
var hasRequiredSocksInterceptor;

function requireSocksInterceptor () {
	if (hasRequiredSocksInterceptor) return socksInterceptor;
	hasRequiredSocksInterceptor = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var socksInterceptor_exports = {};
	__export(socksInterceptor_exports, {
	  SocksInterceptor: () => SocksInterceptor
	});
	socksInterceptor = __toCommonJS(socksInterceptor_exports);
	var import_events = __toESM(require$$0$5);
	var socks = __toESM(requireSocksProxy());
	var import_validator = requireValidator();
	var import_debug = requireDebug$1();
	class SocksInterceptor {
	  constructor(transport, pattern, redirectPortForTest) {
	    this._ids = /* @__PURE__ */ new Set();
	    this._handler = new socks.SocksProxyHandler(pattern, redirectPortForTest);
	    let lastId = -1;
	    this._channel = new Proxy(new import_events.default(), {
	      get: (obj, prop) => {
	        if (prop in obj || obj[prop] !== void 0 || typeof prop !== "string")
	          return obj[prop];
	        return (params) => {
	          try {
	            const id = --lastId;
	            this._ids.add(id);
	            const validator = (0, import_validator.findValidator)("SocksSupport", prop, "Params");
	            params = validator(params, "", { tChannelImpl: tChannelForSocks, binary: "toBase64", isUnderTest: import_debug.isUnderTest });
	            transport.send({ id, guid: this._socksSupportObjectGuid, method: prop, params, metadata: { stack: [], apiName: "", internal: true } });
	          } catch (e) {
	          }
	        };
	      }
	    });
	    this._handler.on(socks.SocksProxyHandler.Events.SocksConnected, (payload) => this._channel.socksConnected(payload));
	    this._handler.on(socks.SocksProxyHandler.Events.SocksData, (payload) => this._channel.socksData(payload));
	    this._handler.on(socks.SocksProxyHandler.Events.SocksError, (payload) => this._channel.socksError(payload));
	    this._handler.on(socks.SocksProxyHandler.Events.SocksFailed, (payload) => this._channel.socksFailed(payload));
	    this._handler.on(socks.SocksProxyHandler.Events.SocksEnd, (payload) => this._channel.socksEnd(payload));
	    this._channel.on("socksRequested", (payload) => this._handler.socketRequested(payload));
	    this._channel.on("socksClosed", (payload) => this._handler.socketClosed(payload));
	    this._channel.on("socksData", (payload) => this._handler.sendSocketData(payload));
	  }
	  cleanup() {
	    this._handler.cleanup();
	  }
	  interceptMessage(message) {
	    if (this._ids.has(message.id)) {
	      this._ids.delete(message.id);
	      return true;
	    }
	    if (message.method === "__create__" && message.params.type === "SocksSupport") {
	      this._socksSupportObjectGuid = message.params.guid;
	      return false;
	    }
	    if (this._socksSupportObjectGuid && message.guid === this._socksSupportObjectGuid) {
	      const validator = (0, import_validator.findValidator)("SocksSupport", message.method, "Event");
	      const params = validator(message.params, "", { tChannelImpl: tChannelForSocks, binary: "fromBase64", isUnderTest: import_debug.isUnderTest });
	      this._channel.emit(message.method, params);
	      return true;
	    }
	    return false;
	  }
	}
	function tChannelForSocks(names, arg, path, context) {
	  throw new import_validator.ValidationError(`${path}: channels are not expected in SocksSupport`);
	}
	return socksInterceptor;
}

var localUtilsDispatcher;
var hasRequiredLocalUtilsDispatcher;

function requireLocalUtilsDispatcher () {
	if (hasRequiredLocalUtilsDispatcher) return localUtilsDispatcher;
	hasRequiredLocalUtilsDispatcher = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var localUtilsDispatcher_exports = {};
	__export(localUtilsDispatcher_exports, {
	  LocalUtilsDispatcher: () => LocalUtilsDispatcher
	});
	localUtilsDispatcher = __toCommonJS(localUtilsDispatcher_exports);
	var import_dispatcher = requireDispatcher();
	var import_instrumentation = requireInstrumentation();
	var localUtils = __toESM(requireLocalUtils$1());
	var import_userAgent = requireUserAgent();
	var import_deviceDescriptors = requireDeviceDescriptors();
	var import_jsonPipeDispatcher = requireJsonPipeDispatcher();
	var import_progress = requireProgress();
	var import_socksInterceptor = requireSocksInterceptor();
	var import_transport = requireTransport();
	var import_network = requireNetwork$2();
	var import_urlMatch = requireUrlMatch();
	class LocalUtilsDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, playwright) {
	    const localUtils2 = new import_instrumentation.SdkObject(playwright, "localUtils", "localUtils");
	    const deviceDescriptors = Object.entries(import_deviceDescriptors.deviceDescriptors).map(([name, descriptor]) => ({ name, descriptor }));
	    super(scope, localUtils2, "LocalUtils", {
	      deviceDescriptors
	    });
	    this._harBackends = /* @__PURE__ */ new Map();
	    this._stackSessions = /* @__PURE__ */ new Map();
	    this._type_LocalUtils = true;
	  }
	  async zip(params) {
	    return await localUtils.zip(this._stackSessions, params);
	  }
	  async harOpen(params, metadata) {
	    return await localUtils.harOpen(this._harBackends, params);
	  }
	  async harLookup(params, metadata) {
	    return await localUtils.harLookup(this._harBackends, params);
	  }
	  async harClose(params, metadata) {
	    return await localUtils.harClose(this._harBackends, params);
	  }
	  async harUnzip(params, metadata) {
	    return await localUtils.harUnzip(params);
	  }
	  async tracingStarted(params, metadata) {
	    return await localUtils.tracingStarted(this._stackSessions, params);
	  }
	  async traceDiscarded(params, metadata) {
	    return await localUtils.traceDiscarded(this._stackSessions, params);
	  }
	  async addStackToTracingNoReply(params, metadata) {
	    return await localUtils.addStackToTracingNoReply(this._stackSessions, params);
	  }
	  async connect(params, metadata) {
	    const controller = new import_progress.ProgressController(metadata, this._object);
	    controller.setLogName("browser");
	    return await controller.run(async (progress) => {
	      const wsHeaders = {
	        "User-Agent": (0, import_userAgent.getUserAgent)(),
	        "x-playwright-proxy": params.exposeNetwork ?? "",
	        ...params.headers
	      };
	      const wsEndpoint = await urlToWSEndpoint(progress, params.wsEndpoint);
	      const transport = await import_transport.WebSocketTransport.connect(progress, wsEndpoint, { headers: wsHeaders, followRedirects: true, debugLogHeader: "x-playwright-debug-log" });
	      const socksInterceptor = new import_socksInterceptor.SocksInterceptor(transport, params.exposeNetwork, params.socksProxyRedirectPortForTest);
	      const pipe = new import_jsonPipeDispatcher.JsonPipeDispatcher(this);
	      transport.onmessage = (json) => {
	        if (socksInterceptor.interceptMessage(json))
	          return;
	        const cb = () => {
	          try {
	            pipe.dispatch(json);
	          } catch (e) {
	            transport.close();
	          }
	        };
	        if (params.slowMo)
	          setTimeout(cb, params.slowMo);
	        else
	          cb();
	      };
	      pipe.on("message", (message) => {
	        transport.send(message);
	      });
	      transport.onclose = (reason) => {
	        socksInterceptor?.cleanup();
	        pipe.wasClosed(reason);
	      };
	      pipe.on("close", () => transport.close());
	      return { pipe, headers: transport.headers };
	    }, params.timeout || 0);
	  }
	  async globToRegex(params, metadata) {
	    const regex = (0, import_urlMatch.resolveGlobToRegexPattern)(params.baseURL, params.glob, params.webSocketUrl);
	    return { regex };
	  }
	}
	async function urlToWSEndpoint(progress, endpointURL) {
	  if (endpointURL.startsWith("ws"))
	    return endpointURL;
	  progress?.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
	  const fetchUrl = new URL(endpointURL);
	  if (!fetchUrl.pathname.endsWith("/"))
	    fetchUrl.pathname += "/";
	  fetchUrl.pathname += "json";
	  const json = await (0, import_network.fetchData)({
	    url: fetchUrl.toString(),
	    method: "GET",
	    timeout: progress?.timeUntilDeadline() ?? 3e4,
	    headers: { "User-Agent": (0, import_userAgent.getUserAgent)() }
	  }, async (params, response) => {
	    return new Error(`Unexpected status ${response.statusCode} when connecting to ${fetchUrl.toString()}.
This does not look like a Playwright server, try connecting via ws://.`);
	  });
	  progress?.throwIfAborted();
	  const wsUrl = new URL(endpointURL);
	  let wsEndpointPath = JSON.parse(json).wsEndpointPath;
	  if (wsEndpointPath.startsWith("/"))
	    wsEndpointPath = wsEndpointPath.substring(1);
	  if (!wsUrl.pathname.endsWith("/"))
	    wsUrl.pathname += "/";
	  wsUrl.pathname += wsEndpointPath;
	  wsUrl.protocol = wsUrl.protocol === "https:" ? "wss:" : "ws:";
	  return wsUrl.toString();
	}
	return localUtilsDispatcher;
}

var selectorsDispatcher;
var hasRequiredSelectorsDispatcher;

function requireSelectorsDispatcher () {
	if (hasRequiredSelectorsDispatcher) return selectorsDispatcher;
	hasRequiredSelectorsDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var selectorsDispatcher_exports = {};
	__export(selectorsDispatcher_exports, {
	  SelectorsDispatcher: () => SelectorsDispatcher
	});
	selectorsDispatcher = __toCommonJS(selectorsDispatcher_exports);
	var import_dispatcher = requireDispatcher();
	class SelectorsDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, selectors) {
	    super(scope, selectors, "Selectors", {});
	    this._type_Selectors = true;
	  }
	  async register(params) {
	    await this._object.register(params.name, params.source, params.contentScript);
	  }
	  async setTestIdAttributeName(params) {
	    this._object.setTestIdAttributeName(params.testIdAttributeName);
	  }
	}
	return selectorsDispatcher;
}

var playwrightDispatcher;
var hasRequiredPlaywrightDispatcher;

function requirePlaywrightDispatcher () {
	if (hasRequiredPlaywrightDispatcher) return playwrightDispatcher;
	hasRequiredPlaywrightDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var playwrightDispatcher_exports = {};
	__export(playwrightDispatcher_exports, {
	  PlaywrightDispatcher: () => PlaywrightDispatcher
	});
	playwrightDispatcher = __toCommonJS(playwrightDispatcher_exports);
	var import_socksProxy = requireSocksProxy();
	var import_fetch = requireFetch$1();
	var import_androidDispatcher = requireAndroidDispatcher();
	var import_androidDispatcher2 = requireAndroidDispatcher();
	var import_browserDispatcher = requireBrowserDispatcher();
	var import_browserTypeDispatcher = requireBrowserTypeDispatcher();
	var import_dispatcher = requireDispatcher();
	var import_electronDispatcher = requireElectronDispatcher();
	var import_localUtilsDispatcher = requireLocalUtilsDispatcher();
	var import_networkDispatchers = requireNetworkDispatchers();
	var import_selectorsDispatcher = requireSelectorsDispatcher();
	var import_crypto = requireCrypto();
	var import_eventsHelper = requireEventsHelper();
	class PlaywrightDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, playwright, socksProxy, preLaunchedBrowser, prelaunchedAndroidDevice) {
	    const browserDispatcher = preLaunchedBrowser ? new import_browserDispatcher.ConnectedBrowserDispatcher(scope, preLaunchedBrowser) : void 0;
	    const android = new import_androidDispatcher.AndroidDispatcher(scope, playwright.android);
	    const prelaunchedAndroidDeviceDispatcher = prelaunchedAndroidDevice ? new import_androidDispatcher2.AndroidDeviceDispatcher(android, prelaunchedAndroidDevice) : void 0;
	    super(scope, playwright, "Playwright", {
	      chromium: new import_browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.chromium),
	      firefox: new import_browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.firefox),
	      webkit: new import_browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.webkit),
	      bidiChromium: new import_browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.bidiChromium),
	      bidiFirefox: new import_browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.bidiFirefox),
	      android,
	      electron: new import_electronDispatcher.ElectronDispatcher(scope, playwright.electron),
	      utils: playwright.options.isServer ? void 0 : new import_localUtilsDispatcher.LocalUtilsDispatcher(scope, playwright),
	      selectors: new import_selectorsDispatcher.SelectorsDispatcher(scope, browserDispatcher?.selectors || playwright.selectors),
	      preLaunchedBrowser: browserDispatcher,
	      preConnectedAndroidDevice: prelaunchedAndroidDeviceDispatcher,
	      socksSupport: socksProxy ? new SocksSupportDispatcher(scope, socksProxy) : void 0
	    });
	    this._type_Playwright = true;
	    this._browserDispatcher = browserDispatcher;
	  }
	  async newRequest(params) {
	    const request = new import_fetch.GlobalAPIRequestContext(this._object, params);
	    return { request: import_networkDispatchers.APIRequestContextDispatcher.from(this.parentScope(), request) };
	  }
	  async cleanup() {
	    await this._browserDispatcher?.cleanupContexts();
	  }
	}
	class SocksSupportDispatcher extends import_dispatcher.Dispatcher {
	  constructor(scope, socksProxy) {
	    super(scope, { guid: "socksSupport@" + (0, import_crypto.createGuid)() }, "SocksSupport", {});
	    this._type_SocksSupport = true;
	    this._socksProxy = socksProxy;
	    this._socksListeners = [
	      import_eventsHelper.eventsHelper.addEventListener(socksProxy, import_socksProxy.SocksProxy.Events.SocksRequested, (payload) => this._dispatchEvent("socksRequested", payload)),
	      import_eventsHelper.eventsHelper.addEventListener(socksProxy, import_socksProxy.SocksProxy.Events.SocksData, (payload) => this._dispatchEvent("socksData", payload)),
	      import_eventsHelper.eventsHelper.addEventListener(socksProxy, import_socksProxy.SocksProxy.Events.SocksClosed, (payload) => this._dispatchEvent("socksClosed", payload))
	    ];
	  }
	  async socksConnected(params) {
	    this._socksProxy?.socketConnected(params);
	  }
	  async socksFailed(params) {
	    this._socksProxy?.socketFailed(params);
	  }
	  async socksData(params) {
	    this._socksProxy?.sendSocketData(params);
	  }
	  async socksError(params) {
	    this._socksProxy?.sendSocketError(params);
	  }
	  async socksEnd(params) {
	    this._socksProxy?.sendSocketEnd(params);
	  }
	  _onDispose() {
	    import_eventsHelper.eventsHelper.removeEventListeners(this._socksListeners);
	  }
	}
	return playwrightDispatcher;
}

var traceViewer;
var hasRequiredTraceViewer;

function requireTraceViewer () {
	if (hasRequiredTraceViewer) return traceViewer;
	hasRequiredTraceViewer = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var traceViewer_exports = {};
	__export(traceViewer_exports, {
	  installRootRedirect: () => installRootRedirect,
	  openTraceInBrowser: () => openTraceInBrowser,
	  openTraceViewerApp: () => openTraceViewerApp,
	  runTraceInBrowser: () => runTraceInBrowser,
	  runTraceViewerApp: () => runTraceViewerApp,
	  startTraceViewerServer: () => startTraceViewerServer
	});
	traceViewer = __toCommonJS(traceViewer_exports);
	var import_fs = __toESM(require$$0$4);
	var import_path = __toESM(require$$1$1);
	var import_utils = requireUtils();
	var import_utils2 = requireUtils();
	var import_httpServer = requireHttpServer();
	var import_utilsBundle = requireUtilsBundle();
	var import_instrumentation = requireInstrumentation();
	var import_launchApp = requireLaunchApp();
	var import_launchApp2 = requireLaunchApp();
	var import_playwright = requirePlaywright$1();
	var import_progress = requireProgress();
	function validateTraceUrls(traceUrls) {
	  for (const traceUrl of traceUrls) {
	    let traceFile = traceUrl;
	    if (traceUrl.endsWith(".json"))
	      traceFile = traceUrl.substring(0, traceUrl.length - ".json".length);
	    if (!traceUrl.startsWith("http://") && !traceUrl.startsWith("https://") && !import_fs.default.existsSync(traceFile) && !import_fs.default.existsSync(traceFile + ".trace"))
	      throw new Error(`Trace file ${traceUrl} does not exist!`);
	  }
	}
	async function startTraceViewerServer(options) {
	  const server = new import_httpServer.HttpServer();
	  server.routePrefix("/trace", (request, response) => {
	    const url = new URL("http://localhost" + request.url);
	    const relativePath = url.pathname.slice("/trace".length);
	    if (process.env.PW_HMR) {
	      response.appendHeader("Access-Control-Allow-Origin", "http://localhost:44223");
	    }
	    if (relativePath.endsWith("/stall.js"))
	      return true;
	    if (relativePath.startsWith("/file")) {
	      try {
	        const filePath = url.searchParams.get("path");
	        if (import_fs.default.existsSync(filePath))
	          return server.serveFile(request, response, url.searchParams.get("path"));
	        if (filePath.endsWith(".json")) {
	          const traceName = filePath.substring(0, filePath.length - ".json".length);
	          response.statusCode = 200;
	          response.setHeader("Content-Type", "application/json");
	          response.end(JSON.stringify(traceDescriptor(traceName)));
	          return true;
	        }
	      } catch (e) {
	      }
	      response.statusCode = 404;
	      response.end();
	      return true;
	    }
	    const absolutePath = import_path.default.join(__dirname, "..", "..", "..", "vite", "traceViewer", ...relativePath.split("/"));
	    return server.serveFile(request, response, absolutePath);
	  });
	  const transport = options?.transport || (options?.isServer ? new StdinServer() : void 0);
	  if (transport)
	    server.createWebSocket(transport);
	  const { host, port } = options || {};
	  await server.start({ preferredPort: port, host });
	  return server;
	}
	async function installRootRedirect(server, traceUrls, options) {
	  const params = new URLSearchParams();
	  if (import_path.default.sep !== import_path.default.posix.sep)
	    params.set("pathSeparator", import_path.default.sep);
	  for (const traceUrl of traceUrls)
	    params.append("trace", traceUrl);
	  if (server.wsGuid())
	    params.append("ws", server.wsGuid());
	  if (options?.isServer)
	    params.append("isServer", "");
	  if ((0, import_utils2.isUnderTest)())
	    params.append("isUnderTest", "true");
	  for (const arg of options.args || [])
	    params.append("arg", arg);
	  if (options.grep)
	    params.append("grep", options.grep);
	  if (options.grepInvert)
	    params.append("grepInvert", options.grepInvert);
	  for (const project of options.project || [])
	    params.append("project", project);
	  for (const reporter of options.reporter || [])
	    params.append("reporter", reporter);
	  let baseUrl = ".";
	  if (process.env.PW_HMR) {
	    baseUrl = "http://localhost:44223";
	    params.set("server", server.urlPrefix("precise"));
	  }
	  const urlPath = `${baseUrl}/trace/${options.webApp || "index.html"}?${params.toString()}`;
	  server.routePath("/", (_, response) => {
	    response.statusCode = 302;
	    response.setHeader("Location", urlPath);
	    if (process.env.EXPERIMENTAL_OPENAI_API_KEY)
	      response.appendHeader("Set-Cookie", `openai_api_key=${process.env.EXPERIMENTAL_OPENAI_API_KEY}`);
	    if (process.env.OPENAI_BASE_URL)
	      response.appendHeader("Set-Cookie", `openai_base_url=${process.env.OPENAI_BASE_URL}`);
	    if (process.env.EXPERIMENTAL_ANTHROPIC_API_KEY)
	      response.appendHeader("Set-Cookie", `anthropic_api_key=${process.env.EXPERIMENTAL_ANTHROPIC_API_KEY}`);
	    if (process.env.ANTHROPIC_BASE_URL)
	      response.appendHeader("Set-Cookie", `anthropic_base_url=${process.env.ANTHROPIC_BASE_URL}`);
	    response.end();
	    return true;
	  });
	}
	async function runTraceViewerApp(traceUrls, browserName, options, exitOnClose) {
	  validateTraceUrls(traceUrls);
	  const server = await startTraceViewerServer(options);
	  await installRootRedirect(server, traceUrls, options);
	  const page = await openTraceViewerApp(server.urlPrefix("precise"), browserName, options);
	  if (exitOnClose)
	    page.on("close", () => (0, import_utils.gracefullyProcessExitDoNotHang)(0));
	  return page;
	}
	async function runTraceInBrowser(traceUrls, options) {
	  validateTraceUrls(traceUrls);
	  const server = await startTraceViewerServer(options);
	  await installRootRedirect(server, traceUrls, options);
	  await openTraceInBrowser(server.urlPrefix("human-readable"));
	}
	async function openTraceViewerApp(url, browserName, options) {
	  const traceViewerPlaywright = (0, import_playwright.createPlaywright)({ sdkLanguage: "javascript", isInternalPlaywright: true });
	  const traceViewerBrowser = (0, import_utils2.isUnderTest)() ? "chromium" : browserName;
	  const { context, page } = await (0, import_launchApp2.launchApp)(traceViewerPlaywright[traceViewerBrowser], {
	    // TODO: store language in the trace.
	    sdkLanguage: traceViewerPlaywright.options.sdkLanguage,
	    windowSize: { width: 1280, height: 800 },
	    persistentContextOptions: {
	      ...options?.persistentContextOptions,
	      useWebSocket: (0, import_utils2.isUnderTest)(),
	      headless: !!options?.headless,
	      colorScheme: (0, import_utils2.isUnderTest)() ? "light" : void 0
	    }
	  });
	  const controller = new import_progress.ProgressController((0, import_instrumentation.serverSideCallMetadata)(), context._browser);
	  await controller.run(async (progress) => {
	    await context._browser._defaultContext._loadDefaultContextAsIs(progress);
	  });
	  if (process.env.PWTEST_PRINT_WS_ENDPOINT)
	    process.stderr.write("DevTools listening on: " + context._browser.options.wsEndpoint + "\n");
	  if (!(0, import_utils2.isUnderTest)())
	    await (0, import_launchApp.syncLocalStorageWithSettings)(page, "traceviewer");
	  if ((0, import_utils2.isUnderTest)())
	    page.on("close", () => context.close({ reason: "Trace viewer closed" }).catch(() => {
	    }));
	  await page.mainFrame().goto((0, import_instrumentation.serverSideCallMetadata)(), url);
	  return page;
	}
	async function openTraceInBrowser(url) {
	  console.log("\nListening on " + url);
	  if (!(0, import_utils2.isUnderTest)())
	    await (0, import_utilsBundle.open)(url.replace("0.0.0.0", "localhost")).catch(() => {
	    });
	}
	class StdinServer {
	  constructor() {
	    process.stdin.on("data", (data) => {
	      const url = data.toString().trim();
	      if (url === this._traceUrl)
	        return;
	      if (url.endsWith(".json"))
	        this._pollLoadTrace(url);
	      else
	        this._loadTrace(url);
	    });
	    process.stdin.on("close", () => (0, import_utils.gracefullyProcessExitDoNotHang)(0));
	  }
	  onconnect() {
	  }
	  async dispatch(method, params) {
	    if (method === "initialize") {
	      if (this._traceUrl)
	        this._loadTrace(this._traceUrl);
	    }
	  }
	  onclose() {
	  }
	  _loadTrace(traceUrl) {
	    this._traceUrl = traceUrl;
	    clearTimeout(this._pollTimer);
	    this.sendEvent?.("loadTraceRequested", { traceUrl });
	  }
	  _pollLoadTrace(url) {
	    this._loadTrace(url);
	    this._pollTimer = setTimeout(() => {
	      this._pollLoadTrace(url);
	    }, 500);
	  }
	}
	function traceDescriptor(traceName) {
	  const result = {
	    entries: []
	  };
	  const traceDir = import_path.default.dirname(traceName);
	  const traceFile = import_path.default.basename(traceName);
	  for (const name of import_fs.default.readdirSync(traceDir)) {
	    if (name.startsWith(traceFile))
	      result.entries.push({ name, path: import_path.default.join(traceDir, name) });
	  }
	  const resourcesDir = import_path.default.join(traceDir, "resources");
	  if (import_fs.default.existsSync(resourcesDir)) {
	    for (const name of import_fs.default.readdirSync(resourcesDir))
	      result.entries.push({ name: "resources/" + name, path: import_path.default.join(resourcesDir, name) });
	  }
	  return result;
	}
	return traceViewer;
}

var server;
var hasRequiredServer;

function requireServer () {
	if (hasRequiredServer) return server;
	hasRequiredServer = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var server_exports = {};
	__export(server_exports, {
	  DispatcherConnection: () => import_dispatcher.DispatcherConnection,
	  PlaywrightDispatcher: () => import_playwrightDispatcher.PlaywrightDispatcher,
	  Registry: () => import_registry.Registry,
	  RootDispatcher: () => import_dispatcher.RootDispatcher,
	  createPlaywright: () => import_playwright.createPlaywright,
	  installBrowsersForNpmInstall: () => import_registry.installBrowsersForNpmInstall,
	  installRootRedirect: () => import_traceViewer.installRootRedirect,
	  openTraceInBrowser: () => import_traceViewer.openTraceInBrowser,
	  openTraceViewerApp: () => import_traceViewer.openTraceViewerApp,
	  registry: () => import_registry.registry,
	  registryDirectory: () => import_registry.registryDirectory,
	  runTraceViewerApp: () => import_traceViewer.runTraceViewerApp,
	  serverSideCallMetadata: () => import_instrumentation.serverSideCallMetadata,
	  startTraceViewerServer: () => import_traceViewer.startTraceViewerServer,
	  writeDockerVersion: () => import_registry.writeDockerVersion
	});
	server = __toCommonJS(server_exports);
	var import_registry = requireRegistry();
	var import_dispatcher = requireDispatcher();
	var import_playwrightDispatcher = requirePlaywrightDispatcher();
	var import_playwright = requirePlaywright$1();
	var import_traceViewer = requireTraceViewer();
	var import_instrumentation = requireInstrumentation();
	return server;
}

var debugControllerDispatcher;
var hasRequiredDebugControllerDispatcher;

function requireDebugControllerDispatcher () {
	if (hasRequiredDebugControllerDispatcher) return debugControllerDispatcher;
	hasRequiredDebugControllerDispatcher = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var debugControllerDispatcher_exports = {};
	__export(debugControllerDispatcher_exports, {
	  DebugControllerDispatcher: () => DebugControllerDispatcher
	});
	debugControllerDispatcher = __toCommonJS(debugControllerDispatcher_exports);
	var import_utils = requireUtils();
	var import_debugController = requireDebugController();
	var import_dispatcher = requireDispatcher();
	class DebugControllerDispatcher extends import_dispatcher.Dispatcher {
	  constructor(connection, debugController) {
	    super(connection, debugController, "DebugController", {});
	    this._type_DebugController = true;
	    this._listeners = [
	      import_utils.eventsHelper.addEventListener(this._object, import_debugController.DebugController.Events.StateChanged, (params) => {
	        this._dispatchEvent("stateChanged", params);
	      }),
	      import_utils.eventsHelper.addEventListener(this._object, import_debugController.DebugController.Events.InspectRequested, ({ selector, locator, ariaSnapshot }) => {
	        this._dispatchEvent("inspectRequested", { selector, locator, ariaSnapshot });
	      }),
	      import_utils.eventsHelper.addEventListener(this._object, import_debugController.DebugController.Events.SourceChanged, ({ text, header, footer, actions }) => {
	        this._dispatchEvent("sourceChanged", { text, header, footer, actions });
	      }),
	      import_utils.eventsHelper.addEventListener(this._object, import_debugController.DebugController.Events.Paused, ({ paused }) => {
	        this._dispatchEvent("paused", { paused });
	      }),
	      import_utils.eventsHelper.addEventListener(this._object, import_debugController.DebugController.Events.SetModeRequested, ({ mode }) => {
	        this._dispatchEvent("setModeRequested", { mode });
	      })
	    ];
	  }
	  async initialize(params) {
	    this._object.initialize(params.codegenId, params.sdkLanguage);
	  }
	  async setReportStateChanged(params) {
	    this._object.setReportStateChanged(params.enabled);
	  }
	  async resetForReuse() {
	    await this._object.resetForReuse();
	  }
	  async navigate(params) {
	    await this._object.navigate(params.url);
	  }
	  async setRecorderMode(params) {
	    await this._object.setRecorderMode(params);
	  }
	  async highlight(params) {
	    await this._object.highlight(params);
	  }
	  async hideHighlight() {
	    await this._object.hideHighlight();
	  }
	  async resume() {
	    await this._object.resume();
	  }
	  async kill() {
	    await this._object.kill();
	  }
	  async closeAllBrowsers() {
	    await this._object.closeAllBrowsers();
	  }
	  _onDispose() {
	    import_utils.eventsHelper.removeEventListeners(this._listeners);
	    this._object.dispose();
	  }
	}
	return debugControllerDispatcher;
}

var playwrightConnection;
var hasRequiredPlaywrightConnection;

function requirePlaywrightConnection () {
	if (hasRequiredPlaywrightConnection) return playwrightConnection;
	hasRequiredPlaywrightConnection = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var playwrightConnection_exports = {};
	__export(playwrightConnection_exports, {
	  PlaywrightConnection: () => PlaywrightConnection
	});
	playwrightConnection = __toCommonJS(playwrightConnection_exports);
	var import_socksProxy = requireSocksProxy();
	var import_server = requireServer();
	var import_android = requireAndroid$1();
	var import_browser = requireBrowser$1();
	var import_debugControllerDispatcher = requireDebugControllerDispatcher();
	var import_instrumentation = requireInstrumentation();
	var import_assert = requireAssert$1();
	var import_debug = requireDebug$1();
	var import_profiler = requireProfiler();
	var import_utils = requireUtils();
	var import_debugLogger = requireDebugLogger();
	class PlaywrightConnection {
	  constructor(lock, clientType, ws, options, preLaunched, id, onClose) {
	    this._cleanups = [];
	    this._disconnected = false;
	    this._ws = ws;
	    this._preLaunched = preLaunched;
	    this._options = options;
	    options.launchOptions = filterLaunchOptions(options.launchOptions, options.allowFSPaths);
	    if (clientType === "reuse-browser" || clientType === "pre-launched-browser-or-android")
	      (0, import_assert.assert)(preLaunched.playwright);
	    if (clientType === "pre-launched-browser-or-android")
	      (0, import_assert.assert)(preLaunched.browser || preLaunched.androidDevice);
	    this._onClose = onClose;
	    this._id = id;
	    this._profileName = `${(/* @__PURE__ */ new Date()).toISOString()}-${clientType}`;
	    this._dispatcherConnection = new import_server.DispatcherConnection();
	    this._dispatcherConnection.onmessage = async (message) => {
	      await lock;
	      if (ws.readyState !== ws.CLOSING) {
	        const messageString = JSON.stringify(message);
	        if (import_debugLogger.debugLogger.isEnabled("server:channel"))
	          import_debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, import_utils.monotonicTime)() * 1e3} SEND \u25BA ${messageString}`);
	        if (import_debugLogger.debugLogger.isEnabled("server:metadata"))
	          this.logServerMetadata(message, messageString, "SEND");
	        ws.send(messageString);
	      }
	    };
	    ws.on("message", async (message) => {
	      await lock;
	      const messageString = Buffer.from(message).toString();
	      const jsonMessage = JSON.parse(messageString);
	      if (import_debugLogger.debugLogger.isEnabled("server:channel"))
	        import_debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, import_utils.monotonicTime)() * 1e3} \u25C0 RECV ${messageString}`);
	      if (import_debugLogger.debugLogger.isEnabled("server:metadata"))
	        this.logServerMetadata(jsonMessage, messageString, "RECV");
	      this._dispatcherConnection.dispatch(jsonMessage);
	    });
	    ws.on("close", () => this._onDisconnect());
	    ws.on("error", (error) => this._onDisconnect(error));
	    if (clientType === "controller") {
	      this._root = this._initDebugControllerMode();
	      return;
	    }
	    this._root = new import_server.RootDispatcher(this._dispatcherConnection, async (scope, options2) => {
	      await (0, import_profiler.startProfiling)();
	      if (clientType === "reuse-browser")
	        return await this._initReuseBrowsersMode(scope);
	      if (clientType === "pre-launched-browser-or-android")
	        return this._preLaunched.browser ? await this._initPreLaunchedBrowserMode(scope) : await this._initPreLaunchedAndroidMode(scope);
	      if (clientType === "launch-browser")
	        return await this._initLaunchBrowserMode(scope, options2);
	      throw new Error("Unsupported client type: " + clientType);
	    });
	  }
	  async _initLaunchBrowserMode(scope, options) {
	    import_debugLogger.debugLogger.log("server", `[${this._id}] engaged launch mode for "${this._options.browserName}"`);
	    const playwright = (0, import_server.createPlaywright)({ sdkLanguage: options.sdkLanguage, isServer: true });
	    const ownedSocksProxy = await this._createOwnedSocksProxy(playwright);
	    let browserName = this._options.browserName;
	    if ("bidi" === browserName) {
	      if (this._options.launchOptions?.channel?.toLocaleLowerCase().includes("firefox"))
	        browserName = "bidiFirefox";
	      else
	        browserName = "bidiChromium";
	    }
	    const browser = await playwright[browserName].launch((0, import_instrumentation.serverSideCallMetadata)(), this._options.launchOptions);
	    this._cleanups.push(async () => {
	      for (const browser2 of playwright.allBrowsers())
	        await browser2.close({ reason: "Connection terminated" });
	    });
	    browser.on(import_browser.Browser.Events.Disconnected, () => {
	      this.close({ code: 1001, reason: "Browser closed" });
	    });
	    return new import_server.PlaywrightDispatcher(scope, playwright, ownedSocksProxy, browser);
	  }
	  async _initPreLaunchedBrowserMode(scope) {
	    import_debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (browser) mode`);
	    const playwright = this._preLaunched.playwright;
	    this._preLaunched.socksProxy?.setPattern(this._options.socksProxyPattern);
	    const browser = this._preLaunched.browser;
	    browser.on(import_browser.Browser.Events.Disconnected, () => {
	      this.close({ code: 1001, reason: "Browser closed" });
	    });
	    const playwrightDispatcher = new import_server.PlaywrightDispatcher(scope, playwright, this._preLaunched.socksProxy, browser);
	    for (const b of playwright.allBrowsers()) {
	      if (b !== browser)
	        await b.close({ reason: "Connection terminated" });
	    }
	    this._cleanups.push(() => playwrightDispatcher.cleanup());
	    return playwrightDispatcher;
	  }
	  async _initPreLaunchedAndroidMode(scope) {
	    import_debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (Android) mode`);
	    const playwright = this._preLaunched.playwright;
	    const androidDevice = this._preLaunched.androidDevice;
	    androidDevice.on(import_android.AndroidDevice.Events.Close, () => {
	      this.close({ code: 1001, reason: "Android device disconnected" });
	    });
	    const playwrightDispatcher = new import_server.PlaywrightDispatcher(scope, playwright, void 0, void 0, androidDevice);
	    this._cleanups.push(() => playwrightDispatcher.cleanup());
	    return playwrightDispatcher;
	  }
	  _initDebugControllerMode() {
	    import_debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse controller mode`);
	    const playwright = this._preLaunched.playwright;
	    return new import_debugControllerDispatcher.DebugControllerDispatcher(this._dispatcherConnection, playwright.debugController);
	  }
	  async _initReuseBrowsersMode(scope) {
	    import_debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse browsers mode for ${this._options.browserName}`);
	    const playwright = this._preLaunched.playwright;
	    const requestedOptions = launchOptionsHash(this._options.launchOptions);
	    let browser = playwright.allBrowsers().find((b) => {
	      if (b.options.name !== this._options.browserName)
	        return false;
	      const existingOptions = launchOptionsHash(b.options.originalLaunchOptions);
	      return existingOptions === requestedOptions;
	    });
	    for (const b of playwright.allBrowsers()) {
	      if (b === browser)
	        continue;
	      if (b.options.name === this._options.browserName && b.options.channel === this._options.launchOptions.channel)
	        await b.close({ reason: "Connection terminated" });
	    }
	    if (!browser) {
	      browser = await playwright[this._options.browserName || "chromium"].launch((0, import_instrumentation.serverSideCallMetadata)(), {
	        ...this._options.launchOptions,
	        headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
	      });
	      browser.on(import_browser.Browser.Events.Disconnected, () => {
	        this.close({ code: 1001, reason: "Browser closed" });
	      });
	    }
	    this._cleanups.push(async () => {
	      for (const browser2 of playwright.allBrowsers()) {
	        for (const context of browser2.contexts()) {
	          if (!context.pages().length)
	            await context.close({ reason: "Connection terminated" });
	          else
	            await context.stopPendingOperations("Connection closed");
	        }
	        if (!browser2.contexts())
	          await browser2.close({ reason: "Connection terminated" });
	      }
	    });
	    const playwrightDispatcher = new import_server.PlaywrightDispatcher(scope, playwright, void 0, browser);
	    return playwrightDispatcher;
	  }
	  async _createOwnedSocksProxy(playwright) {
	    if (!this._options.socksProxyPattern)
	      return;
	    const socksProxy = new import_socksProxy.SocksProxy();
	    socksProxy.setPattern(this._options.socksProxyPattern);
	    playwright.options.socksProxyPort = await socksProxy.listen(0);
	    import_debugLogger.debugLogger.log("server", `[${this._id}] started socks proxy on port ${playwright.options.socksProxyPort}`);
	    this._cleanups.push(() => socksProxy.close());
	    return socksProxy;
	  }
	  async _onDisconnect(error) {
	    this._disconnected = true;
	    import_debugLogger.debugLogger.log("server", `[${this._id}] disconnected. error: ${error}`);
	    this._root._dispose();
	    import_debugLogger.debugLogger.log("server", `[${this._id}] starting cleanup`);
	    for (const cleanup of this._cleanups)
	      await cleanup().catch(() => {
	      });
	    await (0, import_profiler.stopProfiling)(this._profileName);
	    this._onClose();
	    import_debugLogger.debugLogger.log("server", `[${this._id}] finished cleanup`);
	  }
	  logServerMetadata(message, messageString, direction) {
	    const serverLogMetadata = {
	      wallTime: Date.now(),
	      id: message.id,
	      guid: message.guid,
	      method: message.method,
	      payloadSizeInBytes: Buffer.byteLength(messageString, "utf-8")
	    };
	    import_debugLogger.debugLogger.log("server:metadata", (direction === "SEND" ? "SEND \u25BA " : "\u25C0 RECV ") + JSON.stringify(serverLogMetadata));
	  }
	  async close(reason) {
	    if (this._disconnected)
	      return;
	    import_debugLogger.debugLogger.log("server", `[${this._id}] force closing connection: ${reason?.reason || ""} (${reason?.code || 0})`);
	    try {
	      this._ws.close(reason?.code, reason?.reason);
	    } catch (e) {
	    }
	  }
	}
	function launchOptionsHash(options) {
	  const copy = { ...options };
	  for (const k of Object.keys(copy)) {
	    const key = k;
	    if (copy[key] === defaultLaunchOptions[key])
	      delete copy[key];
	  }
	  for (const key of optionsThatAllowBrowserReuse)
	    delete copy[key];
	  return JSON.stringify(copy);
	}
	function filterLaunchOptions(options, allowFSPaths) {
	  return {
	    channel: options.channel,
	    args: options.args,
	    ignoreAllDefaultArgs: options.ignoreAllDefaultArgs,
	    ignoreDefaultArgs: options.ignoreDefaultArgs,
	    timeout: options.timeout,
	    headless: options.headless,
	    proxy: options.proxy,
	    chromiumSandbox: options.chromiumSandbox,
	    firefoxUserPrefs: options.firefoxUserPrefs,
	    slowMo: options.slowMo,
	    executablePath: (0, import_debug.isUnderTest)() || allowFSPaths ? options.executablePath : void 0,
	    downloadsPath: allowFSPaths ? options.downloadsPath : void 0
	  };
	}
	const defaultLaunchOptions = {
	  ignoreAllDefaultArgs: false,
	  handleSIGINT: false,
	  handleSIGTERM: false,
	  handleSIGHUP: false,
	  headless: true,
	  devtools: false
	};
	const optionsThatAllowBrowserReuse = [
	  "headless",
	  "tracesDir"
	];
	return playwrightConnection;
}

var playwrightServer;
var hasRequiredPlaywrightServer;

function requirePlaywrightServer () {
	if (hasRequiredPlaywrightServer) return playwrightServer;
	hasRequiredPlaywrightServer = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var playwrightServer_exports = {};
	__export(playwrightServer_exports, {
	  PlaywrightServer: () => PlaywrightServer
	});
	playwrightServer = __toCommonJS(playwrightServer_exports);
	var import_playwrightConnection = requirePlaywrightConnection();
	var import_playwright = requirePlaywright$1();
	var import_debugLogger = requireDebugLogger();
	var import_semaphore = requireSemaphore();
	var import_wsServer = requireWsServer();
	var import_ascii = requireAscii();
	var import_userAgent = requireUserAgent();
	class PlaywrightServer {
	  constructor(options) {
	    this._options = options;
	    if (options.preLaunchedBrowser)
	      this._preLaunchedPlaywright = options.preLaunchedBrowser.attribution.playwright;
	    if (options.preLaunchedAndroidDevice)
	      this._preLaunchedPlaywright = options.preLaunchedAndroidDevice._android.attribution.playwright;
	    const browserSemaphore = new import_semaphore.Semaphore(this._options.maxConnections);
	    const controllerSemaphore = new import_semaphore.Semaphore(1);
	    const reuseBrowserSemaphore = new import_semaphore.Semaphore(1);
	    this._wsServer = new import_wsServer.WSServer({
	      onUpgrade: (request, socket) => {
	        const uaError = userAgentVersionMatchesErrorMessage(request.headers["user-agent"] || "");
	        if (uaError)
	          return { error: `HTTP/${request.httpVersion} 428 Precondition Required\r
\r
${uaError}` };
	      },
	      onHeaders: (headers) => {
	        if (process.env.PWTEST_SERVER_WS_HEADERS)
	          headers.push(process.env.PWTEST_SERVER_WS_HEADERS);
	      },
	      onConnection: (request, url, ws, id) => {
	        const browserHeader = request.headers["x-playwright-browser"];
	        const browserName = url.searchParams.get("browser") || (Array.isArray(browserHeader) ? browserHeader[0] : browserHeader) || null;
	        const proxyHeader = request.headers["x-playwright-proxy"];
	        const proxyValue = url.searchParams.get("proxy") || (Array.isArray(proxyHeader) ? proxyHeader[0] : proxyHeader);
	        const launchOptionsHeader = request.headers["x-playwright-launch-options"] || "";
	        const launchOptionsHeaderValue = Array.isArray(launchOptionsHeader) ? launchOptionsHeader[0] : launchOptionsHeader;
	        const launchOptionsParam = url.searchParams.get("launch-options");
	        let launchOptions = {};
	        try {
	          launchOptions = JSON.parse(launchOptionsParam || launchOptionsHeaderValue);
	        } catch (e) {
	        }
	        const isExtension = this._options.mode === "extension";
	        if (isExtension) {
	          if (!this._preLaunchedPlaywright)
	            this._preLaunchedPlaywright = (0, import_playwright.createPlaywright)({ sdkLanguage: "javascript", isServer: true });
	        }
	        let clientType = "launch-browser";
	        let semaphore = browserSemaphore;
	        if (isExtension && url.searchParams.has("debug-controller")) {
	          clientType = "controller";
	          semaphore = controllerSemaphore;
	        } else if (isExtension) {
	          clientType = "reuse-browser";
	          semaphore = reuseBrowserSemaphore;
	        } else if (this._options.mode === "launchServer") {
	          clientType = "pre-launched-browser-or-android";
	          semaphore = browserSemaphore;
	        }
	        return new import_playwrightConnection.PlaywrightConnection(
	          semaphore.acquire(),
	          clientType,
	          ws,
	          { socksProxyPattern: proxyValue, browserName, launchOptions, allowFSPaths: this._options.mode === "extension" },
	          {
	            playwright: this._preLaunchedPlaywright,
	            browser: this._options.preLaunchedBrowser,
	            androidDevice: this._options.preLaunchedAndroidDevice,
	            socksProxy: this._options.preLaunchedSocksProxy
	          },
	          id,
	          () => semaphore.release()
	        );
	      },
	      onClose: async () => {
	        import_debugLogger.debugLogger.log("server", "closing browsers");
	        if (this._preLaunchedPlaywright)
	          await Promise.all(this._preLaunchedPlaywright.allBrowsers().map((browser) => browser.close({ reason: "Playwright Server stopped" })));
	        import_debugLogger.debugLogger.log("server", "closed browsers");
	      }
	    });
	  }
	  async listen(port = 0, hostname) {
	    return this._wsServer.listen(port, hostname, this._options.path);
	  }
	  async close() {
	    await this._wsServer.close();
	  }
	}
	function userAgentVersionMatchesErrorMessage(userAgent) {
	  const match = userAgent.match(/^Playwright\/(\d+\.\d+\.\d+)/);
	  if (!match) {
	    return;
	  }
	  const received = match[1].split(".").slice(0, 2).join(".");
	  const expected = (0, import_userAgent.getPlaywrightVersion)(true);
	  if (received !== expected) {
	    return (0, import_ascii.wrapInASCIIBox)([
	      `Playwright version mismatch:`,
	      `  - server version: v${expected}`,
	      `  - client version: v${received}`,
	      ``,
	      `If you are using VSCode extension, restart VSCode.`,
	      ``,
	      `If you are connecting to a remote service,`,
	      `keep your local Playwright version in sync`,
	      `with the remote service version.`,
	      ``,
	      `<3 Playwright Team`
	    ].join("\n"), 1);
	  }
	}
	return playwrightServer;
}

var androidServerImpl;
var hasRequiredAndroidServerImpl;

function requireAndroidServerImpl () {
	if (hasRequiredAndroidServerImpl) return androidServerImpl;
	hasRequiredAndroidServerImpl = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var androidServerImpl_exports = {};
	__export(androidServerImpl_exports, {
	  AndroidServerLauncherImpl: () => AndroidServerLauncherImpl
	});
	androidServerImpl = __toCommonJS(androidServerImpl_exports);
	var import_playwrightServer = requirePlaywrightServer();
	var import_playwright = requirePlaywright$1();
	var import_crypto = requireCrypto();
	var import_utilsBundle = requireUtilsBundle();
	class AndroidServerLauncherImpl {
	  async launchServer(options = {}) {
	    const playwright = (0, import_playwright.createPlaywright)({ sdkLanguage: "javascript", isServer: true });
	    let devices = await playwright.android.devices({
	      host: options.adbHost,
	      port: options.adbPort,
	      omitDriverInstall: options.omitDriverInstall
	    });
	    if (devices.length === 0)
	      throw new Error("No devices found");
	    if (options.deviceSerialNumber) {
	      devices = devices.filter((d) => d.serial === options.deviceSerialNumber);
	      if (devices.length === 0)
	        throw new Error(`No device with serial number '${options.deviceSerialNumber}' was found`);
	    }
	    if (devices.length > 1)
	      throw new Error(`More than one device found. Please specify deviceSerialNumber`);
	    const device = devices[0];
	    const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, import_crypto.createGuid)()}`;
	    const server = new import_playwrightServer.PlaywrightServer({ mode: "launchServer", path, maxConnections: 1, preLaunchedAndroidDevice: device });
	    const wsEndpoint = await server.listen(options.port, options.host);
	    const browserServer = new import_utilsBundle.ws.EventEmitter();
	    browserServer.wsEndpoint = () => wsEndpoint;
	    browserServer.close = () => device.close();
	    browserServer.kill = () => device.close();
	    device.on("close", () => {
	      server.close();
	      browserServer.emit("close");
	    });
	    return browserServer;
	  }
	}
	return androidServerImpl;
}

var browserServerImpl;
var hasRequiredBrowserServerImpl;

function requireBrowserServerImpl () {
	if (hasRequiredBrowserServerImpl) return browserServerImpl;
	hasRequiredBrowserServerImpl = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserServerImpl_exports = {};
	__export(browserServerImpl_exports, {
	  BrowserServerLauncherImpl: () => BrowserServerLauncherImpl
	});
	browserServerImpl = __toCommonJS(browserServerImpl_exports);
	requireSocksProxy();
	var import_playwrightServer = requirePlaywrightServer();
	var import_helper = requireHelper();
	var import_instrumentation = requireInstrumentation();
	var import_playwright = requirePlaywright$1();
	var import_crypto = requireCrypto();
	var import_stackTrace = requireStackTrace();
	var import_utilsBundle = requireUtilsBundle();
	class BrowserServerLauncherImpl {
	  constructor(browserName) {
	    this._browserName = browserName;
	  }
	  async launchServer(options = {}) {
	    const playwright = (0, import_playwright.createPlaywright)({ sdkLanguage: "javascript", isServer: true });
	    const socksProxy = void 0;
	    playwright.options.socksProxyPort = await socksProxy?.listen(0);
	    const metadata = (0, import_instrumentation.serverSideCallMetadata)();
	    const browser = await playwright[this._browserName].launch(metadata, {
	      ...options,
	      ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
	      ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
	      env: options.env ? envObjectToArray(options.env) : void 0
	    }, toProtocolLogger(options.logger)).catch((e) => {
	      const log = import_helper.helper.formatBrowserLogs(metadata.log);
	      (0, import_stackTrace.rewriteErrorMessage)(e, `${e.message} Failed to launch browser.${log}`);
	      throw e;
	    });
	    const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, import_crypto.createGuid)()}`;
	    const server = new import_playwrightServer.PlaywrightServer({ mode: "launchServer", path, maxConnections: Infinity, preLaunchedBrowser: browser, preLaunchedSocksProxy: socksProxy });
	    const wsEndpoint = await server.listen(options.port, options.host);
	    const browserServer = new import_utilsBundle.ws.EventEmitter();
	    browserServer.process = () => browser.options.browserProcess.process;
	    browserServer.wsEndpoint = () => wsEndpoint;
	    browserServer.close = () => browser.options.browserProcess.close();
	    browserServer[Symbol.asyncDispose] = browserServer.close;
	    browserServer.kill = () => browser.options.browserProcess.kill();
	    browserServer._disconnectForTest = () => server.close();
	    browserServer._userDataDirForTest = browser._userDataDirForTest;
	    browser.options.browserProcess.onclose = (exitCode, signal) => {
	      server.close();
	      browserServer.emit("close", exitCode, signal);
	    };
	    return browserServer;
	  }
	}
	function toProtocolLogger(logger) {
	  return logger ? (direction, message) => {
	    if (logger.isEnabled("protocol", "verbose"))
	      logger.log("protocol", "verbose", (direction === "send" ? "SEND \u25BA " : "\u25C0 RECV ") + JSON.stringify(message), [], {});
	  } : void 0;
	}
	function envObjectToArray(env) {
	  const result = [];
	  for (const name in env) {
	    if (!Object.is(env[name], void 0))
	      result.push({ name, value: String(env[name]) });
	  }
	  return result;
	}
	return browserServerImpl;
}

var eventEmitter;
var hasRequiredEventEmitter;

function requireEventEmitter () {
	if (hasRequiredEventEmitter) return eventEmitter;
	hasRequiredEventEmitter = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var eventEmitter_exports = {};
	__export(eventEmitter_exports, {
	  EventEmitter: () => EventEmitter
	});
	eventEmitter = __toCommonJS(eventEmitter_exports);
	class EventEmitter {
	  constructor(platform) {
	    this._events = void 0;
	    this._eventsCount = 0;
	    this._maxListeners = void 0;
	    this._pendingHandlers = /* @__PURE__ */ new Map();
	    this._platform = platform;
	    if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
	      this._events = /* @__PURE__ */ Object.create(null);
	      this._eventsCount = 0;
	    }
	    this._maxListeners = this._maxListeners || void 0;
	    this.on = this.addListener;
	    this.off = this.removeListener;
	  }
	  setMaxListeners(n) {
	    if (typeof n !== "number" || n < 0 || Number.isNaN(n))
	      throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
	    this._maxListeners = n;
	    return this;
	  }
	  getMaxListeners() {
	    return this._maxListeners === void 0 ? this._platform.defaultMaxListeners() : this._maxListeners;
	  }
	  emit(type, ...args) {
	    const events = this._events;
	    if (events === void 0)
	      return false;
	    const handler = events?.[type];
	    if (handler === void 0)
	      return false;
	    if (typeof handler === "function") {
	      this._callHandler(type, handler, args);
	    } else {
	      const len = handler.length;
	      const listeners = handler.slice();
	      for (let i = 0; i < len; ++i)
	        this._callHandler(type, listeners[i], args);
	    }
	    return true;
	  }
	  _callHandler(type, handler, args) {
	    const promise = Reflect.apply(handler, this, args);
	    if (!(promise instanceof Promise))
	      return;
	    let set = this._pendingHandlers.get(type);
	    if (!set) {
	      set = /* @__PURE__ */ new Set();
	      this._pendingHandlers.set(type, set);
	    }
	    set.add(promise);
	    promise.catch((e) => {
	      if (this._rejectionHandler)
	        this._rejectionHandler(e);
	      else
	        throw e;
	    }).finally(() => set.delete(promise));
	  }
	  addListener(type, listener) {
	    return this._addListener(type, listener, false);
	  }
	  on(type, listener) {
	    return this._addListener(type, listener, false);
	  }
	  _addListener(type, listener, prepend) {
	    checkListener(listener);
	    let events = this._events;
	    let existing;
	    if (events === void 0) {
	      events = this._events = /* @__PURE__ */ Object.create(null);
	      this._eventsCount = 0;
	    } else {
	      if (events.newListener !== void 0) {
	        this.emit("newListener", type, unwrapListener(listener));
	        events = this._events;
	      }
	      existing = events[type];
	    }
	    if (existing === void 0) {
	      existing = events[type] = listener;
	      ++this._eventsCount;
	    } else {
	      if (typeof existing === "function") {
	        existing = events[type] = prepend ? [listener, existing] : [existing, listener];
	      } else if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	      const m = this.getMaxListeners();
	      if (m > 0 && existing.length > m && !existing.warned) {
	        existing.warned = true;
	        const w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
	        w.name = "MaxListenersExceededWarning";
	        w.emitter = this;
	        w.type = type;
	        w.count = existing.length;
	        if (!this._platform.isUnderTest()) {
	          console.warn(w);
	        }
	      }
	    }
	    return this;
	  }
	  prependListener(type, listener) {
	    return this._addListener(type, listener, true);
	  }
	  once(type, listener) {
	    checkListener(listener);
	    this.on(type, new OnceWrapper(this, type, listener).wrapperFunction);
	    return this;
	  }
	  prependOnceListener(type, listener) {
	    checkListener(listener);
	    this.prependListener(type, new OnceWrapper(this, type, listener).wrapperFunction);
	    return this;
	  }
	  removeListener(type, listener) {
	    checkListener(listener);
	    const events = this._events;
	    if (events === void 0)
	      return this;
	    const list = events[type];
	    if (list === void 0)
	      return this;
	    if (list === listener || list.listener === listener) {
	      if (--this._eventsCount === 0) {
	        this._events = /* @__PURE__ */ Object.create(null);
	      } else {
	        delete events[type];
	        if (events.removeListener)
	          this.emit("removeListener", type, list.listener ?? listener);
	      }
	    } else if (typeof list !== "function") {
	      let position = -1;
	      let originalListener;
	      for (let i = list.length - 1; i >= 0; i--) {
	        if (list[i] === listener || wrappedListener(list[i]) === listener) {
	          originalListener = wrappedListener(list[i]);
	          position = i;
	          break;
	        }
	      }
	      if (position < 0)
	        return this;
	      if (position === 0)
	        list.shift();
	      else
	        list.splice(position, 1);
	      if (list.length === 1)
	        events[type] = list[0];
	      if (events.removeListener !== void 0)
	        this.emit("removeListener", type, originalListener || listener);
	    }
	    return this;
	  }
	  off(type, listener) {
	    return this.removeListener(type, listener);
	  }
	  removeAllListeners(type, options) {
	    this._removeAllListeners(type);
	    if (!options)
	      return this;
	    if (options.behavior === "wait") {
	      const errors = [];
	      this._rejectionHandler = (error) => errors.push(error);
	      return this._waitFor(type).then(() => {
	        if (errors.length)
	          throw errors[0];
	      });
	    }
	    if (options.behavior === "ignoreErrors")
	      this._rejectionHandler = () => {
	      };
	    return Promise.resolve();
	  }
	  _removeAllListeners(type) {
	    const events = this._events;
	    if (!events)
	      return;
	    if (!events.removeListener) {
	      if (type === void 0) {
	        this._events = /* @__PURE__ */ Object.create(null);
	        this._eventsCount = 0;
	      } else if (events[type] !== void 0) {
	        if (--this._eventsCount === 0)
	          this._events = /* @__PURE__ */ Object.create(null);
	        else
	          delete events[type];
	      }
	      return;
	    }
	    if (type === void 0) {
	      const keys = Object.keys(events);
	      let key;
	      for (let i = 0; i < keys.length; ++i) {
	        key = keys[i];
	        if (key === "removeListener")
	          continue;
	        this._removeAllListeners(key);
	      }
	      this._removeAllListeners("removeListener");
	      this._events = /* @__PURE__ */ Object.create(null);
	      this._eventsCount = 0;
	      return;
	    }
	    const listeners = events[type];
	    if (typeof listeners === "function") {
	      this.removeListener(type, listeners);
	    } else if (listeners !== void 0) {
	      for (let i = listeners.length - 1; i >= 0; i--)
	        this.removeListener(type, listeners[i]);
	    }
	  }
	  listeners(type) {
	    return this._listeners(this, type, true);
	  }
	  rawListeners(type) {
	    return this._listeners(this, type, false);
	  }
	  listenerCount(type) {
	    const events = this._events;
	    if (events !== void 0) {
	      const listener = events[type];
	      if (typeof listener === "function")
	        return 1;
	      if (listener !== void 0)
	        return listener.length;
	    }
	    return 0;
	  }
	  eventNames() {
	    return this._eventsCount > 0 && this._events ? Reflect.ownKeys(this._events) : [];
	  }
	  async _waitFor(type) {
	    let promises = [];
	    if (type) {
	      promises = [...this._pendingHandlers.get(type) || []];
	    } else {
	      promises = [];
	      for (const [, pending] of this._pendingHandlers)
	        promises.push(...pending);
	    }
	    await Promise.all(promises);
	  }
	  _listeners(target, type, unwrap) {
	    const events = target._events;
	    if (events === void 0)
	      return [];
	    const listener = events[type];
	    if (listener === void 0)
	      return [];
	    if (typeof listener === "function")
	      return unwrap ? [unwrapListener(listener)] : [listener];
	    return unwrap ? unwrapListeners(listener) : listener.slice();
	  }
	}
	function checkListener(listener) {
	  if (typeof listener !== "function")
	    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
	}
	class OnceWrapper {
	  constructor(eventEmitter, eventType, listener) {
	    this._fired = false;
	    this._eventEmitter = eventEmitter;
	    this._eventType = eventType;
	    this._listener = listener;
	    this.wrapperFunction = this._handle.bind(this);
	    this.wrapperFunction.listener = listener;
	  }
	  _handle(...args) {
	    if (this._fired)
	      return;
	    this._fired = true;
	    this._eventEmitter.removeListener(this._eventType, this.wrapperFunction);
	    return this._listener.apply(this._eventEmitter, args);
	  }
	}
	function unwrapListener(l) {
	  return wrappedListener(l) ?? l;
	}
	function unwrapListeners(arr) {
	  return arr.map((l) => wrappedListener(l) ?? l);
	}
	function wrappedListener(l) {
	  return l.listener;
	}
	return eventEmitter;
}

var clientStackTrace;
var hasRequiredClientStackTrace;

function requireClientStackTrace () {
	if (hasRequiredClientStackTrace) return clientStackTrace;
	hasRequiredClientStackTrace = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var clientStackTrace_exports = {};
	__export(clientStackTrace_exports, {
	  captureLibraryStackTrace: () => captureLibraryStackTrace
	});
	clientStackTrace = __toCommonJS(clientStackTrace_exports);
	var import_stackTrace = requireStackTrace();
	function captureLibraryStackTrace(platform) {
	  const stack = (0, import_stackTrace.captureRawStack)();
	  let parsedFrames = stack.map((line) => {
	    const frame = (0, import_stackTrace.parseStackFrame)(line, platform.pathSeparator, platform.showInternalStackFrames());
	    if (!frame || !frame.file)
	      return null;
	    const isPlaywrightLibrary = !!platform.coreDir && frame.file.startsWith(platform.coreDir);
	    const parsed = {
	      frame,
	      frameText: line,
	      isPlaywrightLibrary
	    };
	    return parsed;
	  }).filter(Boolean);
	  let apiName = "";
	  for (let i = 0; i < parsedFrames.length - 1; i++) {
	    const parsedFrame = parsedFrames[i];
	    if (parsedFrame.isPlaywrightLibrary && !parsedFrames[i + 1].isPlaywrightLibrary) {
	      apiName = apiName || normalizeAPIName(parsedFrame.frame.function);
	      break;
	    }
	  }
	  function normalizeAPIName(name) {
	    if (!name)
	      return "";
	    const match = name.match(/(API|JS|CDP|[A-Z])(.*)/);
	    if (!match)
	      return name;
	    return match[1].toLowerCase() + match[2];
	  }
	  const filterPrefixes = platform.boxedStackPrefixes();
	  parsedFrames = parsedFrames.filter((f) => {
	    if (filterPrefixes.some((prefix) => f.frame.file.startsWith(prefix)))
	      return false;
	    return true;
	  });
	  return {
	    frames: parsedFrames.map((p) => p.frame),
	    apiName
	  };
	}
	return clientStackTrace;
}

var channelOwner;
var hasRequiredChannelOwner;

function requireChannelOwner () {
	if (hasRequiredChannelOwner) return channelOwner;
	hasRequiredChannelOwner = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var channelOwner_exports = {};
	__export(channelOwner_exports, {
	  ChannelOwner: () => ChannelOwner
	});
	channelOwner = __toCommonJS(channelOwner_exports);
	var import_eventEmitter = requireEventEmitter();
	var import_validator = requireValidator();
	var import_clientStackTrace = requireClientStackTrace();
	var import_stackTrace = requireStackTrace();
	class ChannelOwner extends import_eventEmitter.EventEmitter {
	  constructor(parent, type, guid, initializer) {
	    const connection = parent instanceof ChannelOwner ? parent._connection : parent;
	    super(connection._platform);
	    this._objects = /* @__PURE__ */ new Map();
	    this._eventToSubscriptionMapping = /* @__PURE__ */ new Map();
	    this._isInternalType = false;
	    this._wasCollected = false;
	    this.setMaxListeners(0);
	    this._connection = connection;
	    this._type = type;
	    this._guid = guid;
	    this._parent = parent instanceof ChannelOwner ? parent : void 0;
	    this._instrumentation = this._connection._instrumentation;
	    this._connection._objects.set(guid, this);
	    if (this._parent) {
	      this._parent._objects.set(guid, this);
	      this._logger = this._parent._logger;
	    }
	    this._channel = this._createChannel(new import_eventEmitter.EventEmitter(connection._platform));
	    this._initializer = initializer;
	  }
	  markAsInternalType() {
	    this._isInternalType = true;
	  }
	  _setEventToSubscriptionMapping(mapping) {
	    this._eventToSubscriptionMapping = mapping;
	  }
	  _updateSubscription(event, enabled) {
	    const protocolEvent = this._eventToSubscriptionMapping.get(String(event));
	    if (protocolEvent) {
	      this._wrapApiCall(async () => {
	        await this._channel.updateSubscription({ event: protocolEvent, enabled });
	      }, true).catch(() => {
	      });
	    }
	  }
	  on(event, listener) {
	    if (!this.listenerCount(event))
	      this._updateSubscription(event, true);
	    super.on(event, listener);
	    return this;
	  }
	  addListener(event, listener) {
	    if (!this.listenerCount(event))
	      this._updateSubscription(event, true);
	    super.addListener(event, listener);
	    return this;
	  }
	  prependListener(event, listener) {
	    if (!this.listenerCount(event))
	      this._updateSubscription(event, true);
	    super.prependListener(event, listener);
	    return this;
	  }
	  off(event, listener) {
	    super.off(event, listener);
	    if (!this.listenerCount(event))
	      this._updateSubscription(event, false);
	    return this;
	  }
	  removeListener(event, listener) {
	    super.removeListener(event, listener);
	    if (!this.listenerCount(event))
	      this._updateSubscription(event, false);
	    return this;
	  }
	  _adopt(child) {
	    child._parent._objects.delete(child._guid);
	    this._objects.set(child._guid, child);
	    child._parent = this;
	  }
	  _dispose(reason) {
	    if (this._parent)
	      this._parent._objects.delete(this._guid);
	    this._connection._objects.delete(this._guid);
	    this._wasCollected = reason === "gc";
	    for (const object of [...this._objects.values()])
	      object._dispose(reason);
	    this._objects.clear();
	  }
	  _debugScopeState() {
	    return {
	      _guid: this._guid,
	      objects: Array.from(this._objects.values()).map((o) => o._debugScopeState())
	    };
	  }
	  _validatorToWireContext() {
	    return {
	      tChannelImpl: tChannelImplToWire,
	      binary: this._connection.rawBuffers() ? "buffer" : "toBase64",
	      isUnderTest: () => this._platform.isUnderTest()
	    };
	  }
	  _createChannel(base) {
	    const channel = new Proxy(base, {
	      get: (obj, prop) => {
	        if (typeof prop === "string") {
	          const validator = (0, import_validator.maybeFindValidator)(this._type, prop, "Params");
	          if (validator) {
	            return async (params) => {
	              return await this._wrapApiCall(async (apiZone) => {
	                const validatedParams = validator(params, "", this._validatorToWireContext());
	                if (!apiZone.isInternal && !apiZone.reported) {
	                  apiZone.params = params;
	                  apiZone.reported = true;
	                  this._instrumentation.onApiCallBegin(apiZone);
	                  logApiCall(this._platform, this._logger, `=> ${apiZone.apiName} started`);
	                  return await this._connection.sendMessageToServer(this, prop, validatedParams, apiZone.apiName, apiZone.frames, apiZone.stepId);
	                }
	                return await this._connection.sendMessageToServer(this, prop, validatedParams, void 0, [], void 0);
	              });
	            };
	          }
	        }
	        return obj[prop];
	      }
	    });
	    channel._object = this;
	    return channel;
	  }
	  async _wrapApiCall(func, isInternal) {
	    const logger = this._logger;
	    const existingApiZone = this._platform.zones.current().data();
	    if (existingApiZone)
	      return await func(existingApiZone);
	    if (isInternal === void 0)
	      isInternal = this._isInternalType;
	    const stackTrace = (0, import_clientStackTrace.captureLibraryStackTrace)(this._platform);
	    const apiZone = { apiName: stackTrace.apiName, frames: stackTrace.frames, isInternal, reported: false, userData: void 0, stepId: void 0 };
	    try {
	      const result = await this._platform.zones.current().push(apiZone).run(async () => await func(apiZone));
	      if (!isInternal) {
	        logApiCall(this._platform, logger, `<= ${apiZone.apiName} succeeded`);
	        this._instrumentation.onApiCallEnd(apiZone);
	      }
	      return result;
	    } catch (e) {
	      const innerError = (this._platform.showInternalStackFrames() || this._platform.isUnderTest()) && e.stack ? "\n<inner error>\n" + e.stack : "";
	      if (apiZone.apiName && !apiZone.apiName.includes("<anonymous>"))
	        e.message = apiZone.apiName + ": " + e.message;
	      const stackFrames = "\n" + (0, import_stackTrace.stringifyStackFrames)(stackTrace.frames).join("\n") + innerError;
	      if (stackFrames.trim())
	        e.stack = e.message + stackFrames;
	      else
	        e.stack = "";
	      if (!isInternal) {
	        apiZone.error = e;
	        logApiCall(this._platform, logger, `<= ${apiZone.apiName} failed`);
	        this._instrumentation.onApiCallEnd(apiZone);
	      }
	      throw e;
	    }
	  }
	  _toImpl() {
	    return this._connection.toImpl?.(this);
	  }
	  toJSON() {
	    return {
	      _type: this._type,
	      _guid: this._guid
	    };
	  }
	}
	function logApiCall(platform, logger, message) {
	  if (logger && logger.isEnabled("api", "info"))
	    logger.log("api", "info", message, [], { color: "cyan" });
	  platform.log("api", message);
	}
	function tChannelImplToWire(names, arg, path, context) {
	  if (arg._object instanceof ChannelOwner && (names === "*" || names.includes(arg._object._type)))
	    return { guid: arg._object._guid };
	  throw new import_validator.ValidationError(`${path}: expected channel ${names.toString()}`);
	}
	return channelOwner;
}

var stream;
var hasRequiredStream;

function requireStream () {
	if (hasRequiredStream) return stream;
	hasRequiredStream = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var stream_exports = {};
	__export(stream_exports, {
	  Stream: () => Stream
	});
	stream = __toCommonJS(stream_exports);
	var import_channelOwner = requireChannelOwner();
	class Stream extends import_channelOwner.ChannelOwner {
	  static from(Stream2) {
	    return Stream2._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	  }
	  stream() {
	    return this._platform.streamReadable(this._channel);
	  }
	}
	return stream;
}

var fileUtils;
var hasRequiredFileUtils;

function requireFileUtils () {
	if (hasRequiredFileUtils) return fileUtils;
	hasRequiredFileUtils = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var fileUtils_exports = {};
	__export(fileUtils_exports, {
	  fileUploadSizeLimit: () => fileUploadSizeLimit,
	  mkdirIfNeeded: () => mkdirIfNeeded
	});
	fileUtils = __toCommonJS(fileUtils_exports);
	const fileUploadSizeLimit = 50 * 1024 * 1024;
	async function mkdirIfNeeded(platform, filePath) {
	  await platform.fs().promises.mkdir(platform.path().dirname(filePath), { recursive: true }).catch(() => {
	  });
	}
	return fileUtils;
}

var artifact;
var hasRequiredArtifact;

function requireArtifact () {
	if (hasRequiredArtifact) return artifact;
	hasRequiredArtifact = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var artifact_exports = {};
	__export(artifact_exports, {
	  Artifact: () => Artifact
	});
	artifact = __toCommonJS(artifact_exports);
	var import_channelOwner = requireChannelOwner();
	var import_stream = requireStream();
	var import_fileUtils = requireFileUtils();
	class Artifact extends import_channelOwner.ChannelOwner {
	  static from(channel) {
	    return channel._object;
	  }
	  async pathAfterFinished() {
	    if (this._connection.isRemote())
	      throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
	    return (await this._channel.pathAfterFinished()).value;
	  }
	  async saveAs(path) {
	    if (!this._connection.isRemote()) {
	      await this._channel.saveAs({ path });
	      return;
	    }
	    const result = await this._channel.saveAsStream();
	    const stream = import_stream.Stream.from(result.stream);
	    await (0, import_fileUtils.mkdirIfNeeded)(this._platform, path);
	    await new Promise((resolve, reject) => {
	      stream.stream().pipe(this._platform.fs().createWriteStream(path)).on("finish", resolve).on("error", reject);
	    });
	  }
	  async failure() {
	    return (await this._channel.failure()).error || null;
	  }
	  async createReadStream() {
	    const result = await this._channel.stream();
	    const stream = import_stream.Stream.from(result.stream);
	    return stream.stream();
	  }
	  async readIntoBuffer() {
	    const stream = await this.createReadStream();
	    return await new Promise((resolve, reject) => {
	      const chunks = [];
	      stream.on("data", (chunk) => {
	        chunks.push(chunk);
	      });
	      stream.on("end", () => {
	        resolve(Buffer.concat(chunks));
	      });
	      stream.on("error", reject);
	    });
	  }
	  async cancel() {
	    return await this._channel.cancel();
	  }
	  async delete() {
	    return await this._channel.delete();
	  }
	}
	return artifact;
}

var cdpSession;
var hasRequiredCdpSession;

function requireCdpSession () {
	if (hasRequiredCdpSession) return cdpSession;
	hasRequiredCdpSession = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var cdpSession_exports = {};
	__export(cdpSession_exports, {
	  CDPSession: () => CDPSession
	});
	cdpSession = __toCommonJS(cdpSession_exports);
	var import_channelOwner = requireChannelOwner();
	class CDPSession extends import_channelOwner.ChannelOwner {
	  static from(cdpSession) {
	    return cdpSession._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._channel.on("event", ({ method, params }) => {
	      this.emit(method, params);
	    });
	    this.on = super.on;
	    this.addListener = super.addListener;
	    this.off = super.removeListener;
	    this.removeListener = super.removeListener;
	    this.once = super.once;
	  }
	  async send(method, params) {
	    const result = await this._channel.send({ method, params });
	    return result.result;
	  }
	  async detach() {
	    return await this._channel.detach();
	  }
	}
	return cdpSession;
}

var errors;
var hasRequiredErrors;

function requireErrors () {
	if (hasRequiredErrors) return errors;
	hasRequiredErrors = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var errors_exports = {};
	__export(errors_exports, {
	  TargetClosedError: () => TargetClosedError,
	  TimeoutError: () => TimeoutError,
	  isTargetClosedError: () => isTargetClosedError,
	  parseError: () => parseError,
	  serializeError: () => serializeError
	});
	errors = __toCommonJS(errors_exports);
	var import_serializers = requireSerializers();
	var import_rtti = requireRtti();
	class TimeoutError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = "TimeoutError";
	  }
	}
	class TargetClosedError extends Error {
	  constructor(cause) {
	    super(cause || "Target page, context or browser has been closed");
	  }
	}
	function isTargetClosedError(error) {
	  return error instanceof TargetClosedError;
	}
	function serializeError(e) {
	  if ((0, import_rtti.isError)(e))
	    return { error: { message: e.message, stack: e.stack, name: e.name } };
	  return { value: (0, import_serializers.serializeValue)(e, (value) => ({ fallThrough: value })) };
	}
	function parseError(error) {
	  if (!error.error) {
	    if (error.value === void 0)
	      throw new Error("Serialized error must have either an error or a value");
	    return (0, import_serializers.parseSerializedValue)(error.value, void 0);
	  }
	  if (error.error.name === "TimeoutError") {
	    const e2 = new TimeoutError(error.error.message);
	    e2.stack = error.error.stack || "";
	    return e2;
	  }
	  if (error.error.name === "TargetClosedError") {
	    const e2 = new TargetClosedError(error.error.message);
	    e2.stack = error.error.stack || "";
	    return e2;
	  }
	  const e = new Error(error.error.message);
	  e.stack = error.error.stack || "";
	  e.name = error.error.name;
	  return e;
	}
	return errors;
}

var events;
var hasRequiredEvents;

function requireEvents () {
	if (hasRequiredEvents) return events;
	hasRequiredEvents = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var events_exports = {};
	__export(events_exports, {
	  Events: () => Events
	});
	events = __toCommonJS(events_exports);
	const Events = {
	  AndroidDevice: {
	    WebView: "webview",
	    Close: "close"
	  },
	  AndroidSocket: {
	    Data: "data",
	    Close: "close"
	  },
	  AndroidWebView: {
	    Close: "close"
	  },
	  Browser: {
	    Disconnected: "disconnected"
	  },
	  BrowserContext: {
	    Console: "console",
	    Close: "close",
	    Dialog: "dialog",
	    Page: "page",
	    // Can't use just 'error' due to node.js special treatment of error events.
	    // @see https://nodejs.org/api/events.html#events_error_events
	    WebError: "weberror",
	    BackgroundPage: "backgroundpage",
	    ServiceWorker: "serviceworker",
	    Request: "request",
	    Response: "response",
	    RequestFailed: "requestfailed",
	    RequestFinished: "requestfinished"
	  },
	  BrowserServer: {
	    Close: "close"
	  },
	  Page: {
	    Close: "close",
	    Crash: "crash",
	    Console: "console",
	    Dialog: "dialog",
	    Download: "download",
	    FileChooser: "filechooser",
	    DOMContentLoaded: "domcontentloaded",
	    // Can't use just 'error' due to node.js special treatment of error events.
	    // @see https://nodejs.org/api/events.html#events_error_events
	    PageError: "pageerror",
	    Request: "request",
	    Response: "response",
	    RequestFailed: "requestfailed",
	    RequestFinished: "requestfinished",
	    FrameAttached: "frameattached",
	    FrameDetached: "framedetached",
	    FrameNavigated: "framenavigated",
	    Load: "load",
	    Popup: "popup",
	    WebSocket: "websocket",
	    Worker: "worker"
	  },
	  WebSocket: {
	    Close: "close",
	    Error: "socketerror",
	    FrameReceived: "framereceived",
	    FrameSent: "framesent"
	  },
	  Worker: {
	    Close: "close"
	  },
	  ElectronApplication: {
	    Close: "close",
	    Console: "console",
	    Window: "window"
	  }
	};
	return events;
}

var browser;
var hasRequiredBrowser;

function requireBrowser () {
	if (hasRequiredBrowser) return browser;
	hasRequiredBrowser = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browser_exports = {};
	__export(browser_exports, {
	  Browser: () => Browser
	});
	browser = __toCommonJS(browser_exports);
	var import_artifact = requireArtifact();
	var import_browserContext = requireBrowserContext();
	var import_cdpSession = requireCdpSession();
	var import_channelOwner = requireChannelOwner();
	var import_errors = requireErrors();
	var import_events = requireEvents();
	var import_fileUtils = requireFileUtils();
	class Browser extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._contexts = /* @__PURE__ */ new Set();
	    this._isConnected = true;
	    this._shouldCloseConnectionOnClose = false;
	    this._options = {};
	    this._name = initializer.name;
	    this._channel.on("close", () => this._didClose());
	    this._closedPromise = new Promise((f) => this.once(import_events.Events.Browser.Disconnected, f));
	  }
	  static from(browser) {
	    return browser._object;
	  }
	  browserType() {
	    return this._browserType;
	  }
	  async newContext(options = {}) {
	    return await this._innerNewContext(options, false);
	  }
	  async _newContextForReuse(options = {}) {
	    return await this._wrapApiCall(async () => {
	      for (const context of this._contexts) {
	        await this._browserType._willCloseContext(context);
	        for (const page of context.pages())
	          page._onClose();
	        context._onClose();
	      }
	      return await this._innerNewContext(options, true);
	    }, true);
	  }
	  async _stopPendingOperations(reason) {
	    return await this._wrapApiCall(async () => {
	      await this._channel.stopPendingOperations({ reason });
	    }, true);
	  }
	  async _innerNewContext(options = {}, forReuse) {
	    options = { ...this._browserType._playwright._defaultContextOptions, ...options };
	    const contextOptions = await (0, import_browserContext.prepareBrowserContextParams)(this._platform, options);
	    const response = forReuse ? await this._channel.newContextForReuse(contextOptions) : await this._channel.newContext(contextOptions);
	    const context = import_browserContext.BrowserContext.from(response.context);
	    await this._browserType._didCreateContext(context, contextOptions, this._options, options.logger || this._logger);
	    return context;
	  }
	  contexts() {
	    return [...this._contexts];
	  }
	  version() {
	    return this._initializer.version;
	  }
	  async newPage(options = {}) {
	    return await this._wrapApiCall(async () => {
	      const context = await this.newContext(options);
	      const page = await context.newPage();
	      page._ownedContext = context;
	      context._ownerPage = page;
	      return page;
	    });
	  }
	  isConnected() {
	    return this._isConnected;
	  }
	  async newBrowserCDPSession() {
	    return import_cdpSession.CDPSession.from((await this._channel.newBrowserCDPSession()).session);
	  }
	  async startTracing(page, options = {}) {
	    this._path = options.path;
	    await this._channel.startTracing({ ...options, page: page ? page._channel : void 0 });
	  }
	  async stopTracing() {
	    const artifact = import_artifact.Artifact.from((await this._channel.stopTracing()).artifact);
	    const buffer = await artifact.readIntoBuffer();
	    await artifact.delete();
	    if (this._path) {
	      await (0, import_fileUtils.mkdirIfNeeded)(this._platform, this._path);
	      await this._platform.fs().promises.writeFile(this._path, buffer);
	      this._path = void 0;
	    }
	    return buffer;
	  }
	  async [Symbol.asyncDispose]() {
	    await this.close();
	  }
	  async close(options = {}) {
	    this._closeReason = options.reason;
	    try {
	      if (this._shouldCloseConnectionOnClose)
	        this._connection.close();
	      else
	        await this._channel.close(options);
	      await this._closedPromise;
	    } catch (e) {
	      if ((0, import_errors.isTargetClosedError)(e))
	        return;
	      throw e;
	    }
	  }
	  _didClose() {
	    this._isConnected = false;
	    this.emit(import_events.Events.Browser.Disconnected, this);
	  }
	}
	return browser;
}

var clientHelper;
var hasRequiredClientHelper;

function requireClientHelper () {
	if (hasRequiredClientHelper) return clientHelper;
	hasRequiredClientHelper = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var clientHelper_exports = {};
	__export(clientHelper_exports, {
	  addSourceUrlToScript: () => addSourceUrlToScript,
	  envObjectToArray: () => envObjectToArray,
	  evaluationScript: () => evaluationScript
	});
	clientHelper = __toCommonJS(clientHelper_exports);
	var import_rtti = requireRtti();
	function envObjectToArray(env) {
	  const result = [];
	  for (const name in env) {
	    if (!Object.is(env[name], void 0))
	      result.push({ name, value: String(env[name]) });
	  }
	  return result;
	}
	async function evaluationScript(platform, fun, arg, addSourceUrl = true) {
	  if (typeof fun === "function") {
	    const source = fun.toString();
	    const argString = Object.is(arg, void 0) ? "undefined" : JSON.stringify(arg);
	    return `(${source})(${argString})`;
	  }
	  if (arg !== void 0)
	    throw new Error("Cannot evaluate a string with arguments");
	  if ((0, import_rtti.isString)(fun))
	    return fun;
	  if (fun.content !== void 0)
	    return fun.content;
	  if (fun.path !== void 0) {
	    let source = await platform.fs().promises.readFile(fun.path, "utf8");
	    if (addSourceUrl)
	      source = addSourceUrlToScript(source, fun.path);
	    return source;
	  }
	  throw new Error("Either path or content property must be present");
	}
	function addSourceUrlToScript(source, path) {
	  return `${source}
//# sourceURL=${path.replace(/\n/g, "")}`;
	}
	return clientHelper;
}

var clock;
var hasRequiredClock;

function requireClock () {
	if (hasRequiredClock) return clock;
	hasRequiredClock = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var clock_exports = {};
	__export(clock_exports, {
	  Clock: () => Clock
	});
	clock = __toCommonJS(clock_exports);
	class Clock {
	  constructor(browserContext) {
	    this._browserContext = browserContext;
	  }
	  async install(options = {}) {
	    await this._browserContext._channel.clockInstall(options.time !== void 0 ? parseTime(options.time) : {});
	  }
	  async fastForward(ticks) {
	    await this._browserContext._channel.clockFastForward(parseTicks(ticks));
	  }
	  async pauseAt(time) {
	    await this._browserContext._channel.clockPauseAt(parseTime(time));
	  }
	  async resume() {
	    await this._browserContext._channel.clockResume({});
	  }
	  async runFor(ticks) {
	    await this._browserContext._channel.clockRunFor(parseTicks(ticks));
	  }
	  async setFixedTime(time) {
	    await this._browserContext._channel.clockSetFixedTime(parseTime(time));
	  }
	  async setSystemTime(time) {
	    await this._browserContext._channel.clockSetSystemTime(parseTime(time));
	  }
	}
	function parseTime(time) {
	  if (typeof time === "number")
	    return { timeNumber: time };
	  if (typeof time === "string")
	    return { timeString: time };
	  if (!isFinite(time.getTime()))
	    throw new Error(`Invalid date: ${time}`);
	  return { timeNumber: time.getTime() };
	}
	function parseTicks(ticks) {
	  return {
	    ticksNumber: typeof ticks === "number" ? ticks : void 0,
	    ticksString: typeof ticks === "string" ? ticks : void 0
	  };
	}
	return clock;
}

var jsHandle;
var hasRequiredJsHandle;

function requireJsHandle () {
	if (hasRequiredJsHandle) return jsHandle;
	hasRequiredJsHandle = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var jsHandle_exports = {};
	__export(jsHandle_exports, {
	  JSHandle: () => JSHandle,
	  assertMaxArguments: () => assertMaxArguments,
	  parseResult: () => parseResult,
	  serializeArgument: () => serializeArgument
	});
	jsHandle = __toCommonJS(jsHandle_exports);
	var import_channelOwner = requireChannelOwner();
	var import_errors = requireErrors();
	var import_serializers = requireSerializers();
	class JSHandle extends import_channelOwner.ChannelOwner {
	  static from(handle) {
	    return handle._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._preview = this._initializer.preview;
	    this._channel.on("previewUpdated", ({ preview }) => this._preview = preview);
	  }
	  async evaluate(pageFunction, arg) {
	    const result = await this._channel.evaluateExpression({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: serializeArgument(arg) });
	    return parseResult(result.value);
	  }
	  async evaluateHandle(pageFunction, arg) {
	    const result = await this._channel.evaluateExpressionHandle({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: serializeArgument(arg) });
	    return JSHandle.from(result.handle);
	  }
	  async getProperty(propertyName) {
	    const result = await this._channel.getProperty({ name: propertyName });
	    return JSHandle.from(result.handle);
	  }
	  async getProperties() {
	    const map = /* @__PURE__ */ new Map();
	    for (const { name, value } of (await this._channel.getPropertyList()).properties)
	      map.set(name, JSHandle.from(value));
	    return map;
	  }
	  async jsonValue() {
	    return parseResult((await this._channel.jsonValue()).value);
	  }
	  asElement() {
	    return null;
	  }
	  async [Symbol.asyncDispose]() {
	    await this.dispose();
	  }
	  async dispose() {
	    try {
	      await this._channel.dispose();
	    } catch (e) {
	      if ((0, import_errors.isTargetClosedError)(e))
	        return;
	      throw e;
	    }
	  }
	  toString() {
	    return this._preview;
	  }
	}
	function serializeArgument(arg) {
	  const handles = [];
	  const pushHandle = (channel) => {
	    handles.push(channel);
	    return handles.length - 1;
	  };
	  const value = (0, import_serializers.serializeValue)(arg, (value2) => {
	    if (value2 instanceof JSHandle)
	      return { h: pushHandle(value2._channel) };
	    return { fallThrough: value2 };
	  });
	  return { value, handles };
	}
	function parseResult(value) {
	  return (0, import_serializers.parseSerializedValue)(value, void 0);
	}
	function assertMaxArguments(count, max) {
	  if (count > max)
	    throw new Error("Too many arguments. If you need to pass more than 1 argument to the function wrap them in an object.");
	}
	return jsHandle;
}

var accessibility;
var hasRequiredAccessibility;

function requireAccessibility () {
	if (hasRequiredAccessibility) return accessibility;
	hasRequiredAccessibility = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var accessibility_exports = {};
	__export(accessibility_exports, {
	  Accessibility: () => Accessibility
	});
	accessibility = __toCommonJS(accessibility_exports);
	function axNodeFromProtocol(axNode) {
	  const result = {
	    ...axNode,
	    value: axNode.valueNumber !== void 0 ? axNode.valueNumber : axNode.valueString,
	    checked: axNode.checked === "checked" ? true : axNode.checked === "unchecked" ? false : axNode.checked,
	    pressed: axNode.pressed === "pressed" ? true : axNode.pressed === "released" ? false : axNode.pressed,
	    children: axNode.children ? axNode.children.map(axNodeFromProtocol) : void 0
	  };
	  delete result.valueNumber;
	  delete result.valueString;
	  return result;
	}
	class Accessibility {
	  constructor(channel) {
	    this._channel = channel;
	  }
	  async snapshot(options = {}) {
	    const root = options.root ? options.root._elementChannel : void 0;
	    const result = await this._channel.accessibilitySnapshot({ interestingOnly: options.interestingOnly, root });
	    return result.rootAXNode ? axNodeFromProtocol(result.rootAXNode) : null;
	  }
	}
	return accessibility;
}

var coverage;
var hasRequiredCoverage;

function requireCoverage () {
	if (hasRequiredCoverage) return coverage;
	hasRequiredCoverage = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var coverage_exports = {};
	__export(coverage_exports, {
	  Coverage: () => Coverage
	});
	coverage = __toCommonJS(coverage_exports);
	class Coverage {
	  constructor(channel) {
	    this._channel = channel;
	  }
	  async startJSCoverage(options = {}) {
	    await this._channel.startJSCoverage(options);
	  }
	  async stopJSCoverage() {
	    return (await this._channel.stopJSCoverage()).entries;
	  }
	  async startCSSCoverage(options = {}) {
	    await this._channel.startCSSCoverage(options);
	  }
	  async stopCSSCoverage() {
	    return (await this._channel.stopCSSCoverage()).entries;
	  }
	}
	return coverage;
}

var download;
var hasRequiredDownload;

function requireDownload () {
	if (hasRequiredDownload) return download;
	hasRequiredDownload = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var download_exports = {};
	__export(download_exports, {
	  Download: () => Download
	});
	download = __toCommonJS(download_exports);
	class Download {
	  constructor(page, url, suggestedFilename, artifact) {
	    this._page = page;
	    this._url = url;
	    this._suggestedFilename = suggestedFilename;
	    this._artifact = artifact;
	  }
	  page() {
	    return this._page;
	  }
	  url() {
	    return this._url;
	  }
	  suggestedFilename() {
	    return this._suggestedFilename;
	  }
	  async path() {
	    return await this._artifact.pathAfterFinished();
	  }
	  async saveAs(path) {
	    return await this._artifact.saveAs(path);
	  }
	  async failure() {
	    return await this._artifact.failure();
	  }
	  async createReadStream() {
	    return await this._artifact.createReadStream();
	  }
	  async cancel() {
	    return await this._artifact.cancel();
	  }
	  async delete() {
	    return await this._artifact.delete();
	  }
	}
	return download;
}

var locatorUtils;
var hasRequiredLocatorUtils;

function requireLocatorUtils () {
	if (hasRequiredLocatorUtils) return locatorUtils;
	hasRequiredLocatorUtils = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var locatorUtils_exports = {};
	__export(locatorUtils_exports, {
	  getByAltTextSelector: () => getByAltTextSelector,
	  getByLabelSelector: () => getByLabelSelector,
	  getByPlaceholderSelector: () => getByPlaceholderSelector,
	  getByRoleSelector: () => getByRoleSelector,
	  getByTestIdSelector: () => getByTestIdSelector,
	  getByTextSelector: () => getByTextSelector,
	  getByTitleSelector: () => getByTitleSelector
	});
	locatorUtils = __toCommonJS(locatorUtils_exports);
	var import_stringUtils = requireStringUtils();
	function getByAttributeTextSelector(attrName, text, options) {
	  return `internal:attr=[${attrName}=${(0, import_stringUtils.escapeForAttributeSelector)(text, options?.exact || false)}]`;
	}
	function getByTestIdSelector(testIdAttributeName, testId) {
	  return `internal:testid=[${testIdAttributeName}=${(0, import_stringUtils.escapeForAttributeSelector)(testId, true)}]`;
	}
	function getByLabelSelector(text, options) {
	  return "internal:label=" + (0, import_stringUtils.escapeForTextSelector)(text, !!options?.exact);
	}
	function getByAltTextSelector(text, options) {
	  return getByAttributeTextSelector("alt", text, options);
	}
	function getByTitleSelector(text, options) {
	  return getByAttributeTextSelector("title", text, options);
	}
	function getByPlaceholderSelector(text, options) {
	  return getByAttributeTextSelector("placeholder", text, options);
	}
	function getByTextSelector(text, options) {
	  return "internal:text=" + (0, import_stringUtils.escapeForTextSelector)(text, !!options?.exact);
	}
	function getByRoleSelector(role, options = {}) {
	  const props = [];
	  if (options.checked !== void 0)
	    props.push(["checked", String(options.checked)]);
	  if (options.disabled !== void 0)
	    props.push(["disabled", String(options.disabled)]);
	  if (options.selected !== void 0)
	    props.push(["selected", String(options.selected)]);
	  if (options.expanded !== void 0)
	    props.push(["expanded", String(options.expanded)]);
	  if (options.includeHidden !== void 0)
	    props.push(["include-hidden", String(options.includeHidden)]);
	  if (options.level !== void 0)
	    props.push(["level", String(options.level)]);
	  if (options.name !== void 0)
	    props.push(["name", (0, import_stringUtils.escapeForAttributeSelector)(options.name, !!options.exact)]);
	  if (options.pressed !== void 0)
	    props.push(["pressed", String(options.pressed)]);
	  return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join("")}`;
	}
	return locatorUtils;
}

var locator;
var hasRequiredLocator;

function requireLocator () {
	if (hasRequiredLocator) return locator;
	hasRequiredLocator = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var locator_exports = {};
	__export(locator_exports, {
	  FrameLocator: () => FrameLocator,
	  Locator: () => Locator,
	  setTestIdAttribute: () => setTestIdAttribute,
	  testIdAttributeName: () => testIdAttributeName
	});
	locator = __toCommonJS(locator_exports);
	var import_elementHandle = requireElementHandle();
	var import_jsHandle = requireJsHandle();
	var import_locatorGenerators = requireLocatorGenerators();
	var import_locatorUtils = requireLocatorUtils();
	var import_stringUtils = requireStringUtils();
	var import_rtti = requireRtti();
	var import_time = requireTime$1();
	class Locator {
	  constructor(frame, selector, options) {
	    this._frame = frame;
	    this._selector = selector;
	    if (options?.hasText)
	      this._selector += ` >> internal:has-text=${(0, import_stringUtils.escapeForTextSelector)(options.hasText, false)}`;
	    if (options?.hasNotText)
	      this._selector += ` >> internal:has-not-text=${(0, import_stringUtils.escapeForTextSelector)(options.hasNotText, false)}`;
	    if (options?.has) {
	      const locator = options.has;
	      if (locator._frame !== frame)
	        throw new Error(`Inner "has" locator must belong to the same frame.`);
	      this._selector += ` >> internal:has=` + JSON.stringify(locator._selector);
	    }
	    if (options?.hasNot) {
	      const locator = options.hasNot;
	      if (locator._frame !== frame)
	        throw new Error(`Inner "hasNot" locator must belong to the same frame.`);
	      this._selector += ` >> internal:has-not=` + JSON.stringify(locator._selector);
	    }
	    if (options?.visible !== void 0)
	      this._selector += ` >> visible=${options.visible ? "true" : "false"}`;
	    if (this._frame._platform.inspectCustom)
	      this[this._frame._platform.inspectCustom] = () => this._inspect();
	  }
	  async _withElement(task, timeout) {
	    timeout = this._frame.page()._timeoutSettings.timeout({ timeout });
	    const deadline = timeout ? (0, import_time.monotonicTime)() + timeout : 0;
	    return await this._frame._wrapApiCall(async () => {
	      const result = await this._frame._channel.waitForSelector({ selector: this._selector, strict: true, state: "attached", timeout });
	      const handle = import_elementHandle.ElementHandle.fromNullable(result.element);
	      if (!handle)
	        throw new Error(`Could not resolve ${this._selector} to DOM Element`);
	      try {
	        return await task(handle, deadline ? deadline - (0, import_time.monotonicTime)() : 0);
	      } finally {
	        await handle.dispose();
	      }
	    });
	  }
	  _equals(locator) {
	    return this._frame === locator._frame && this._selector === locator._selector;
	  }
	  page() {
	    return this._frame.page();
	  }
	  async boundingBox(options) {
	    return await this._withElement((h) => h.boundingBox(), options?.timeout);
	  }
	  async check(options = {}) {
	    return await this._frame.check(this._selector, { strict: true, ...options });
	  }
	  async click(options = {}) {
	    return await this._frame.click(this._selector, { strict: true, ...options });
	  }
	  async dblclick(options = {}) {
	    return await this._frame.dblclick(this._selector, { strict: true, ...options });
	  }
	  async dispatchEvent(type, eventInit = {}, options) {
	    return await this._frame.dispatchEvent(this._selector, type, eventInit, { strict: true, ...options });
	  }
	  async dragTo(target, options = {}) {
	    return await this._frame.dragAndDrop(this._selector, target._selector, {
	      strict: true,
	      ...options
	    });
	  }
	  async evaluate(pageFunction, arg, options) {
	    return await this._withElement((h) => h.evaluate(pageFunction, arg), options?.timeout);
	  }
	  async evaluateAll(pageFunction, arg) {
	    return await this._frame.$$eval(this._selector, pageFunction, arg);
	  }
	  async evaluateHandle(pageFunction, arg, options) {
	    return await this._withElement((h) => h.evaluateHandle(pageFunction, arg), options?.timeout);
	  }
	  async fill(value, options = {}) {
	    return await this._frame.fill(this._selector, value, { strict: true, ...options });
	  }
	  async clear(options = {}) {
	    return await this.fill("", options);
	  }
	  async _highlight() {
	    return await this._frame._highlight(this._selector);
	  }
	  async highlight() {
	    return await this._frame._highlight(this._selector);
	  }
	  locator(selectorOrLocator, options) {
	    if ((0, import_rtti.isString)(selectorOrLocator))
	      return new Locator(this._frame, this._selector + " >> " + selectorOrLocator, options);
	    if (selectorOrLocator._frame !== this._frame)
	      throw new Error(`Locators must belong to the same frame.`);
	    return new Locator(this._frame, this._selector + " >> internal:chain=" + JSON.stringify(selectorOrLocator._selector), options);
	  }
	  getByTestId(testId) {
	    return this.locator((0, import_locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
	  }
	  getByAltText(text, options) {
	    return this.locator((0, import_locatorUtils.getByAltTextSelector)(text, options));
	  }
	  getByLabel(text, options) {
	    return this.locator((0, import_locatorUtils.getByLabelSelector)(text, options));
	  }
	  getByPlaceholder(text, options) {
	    return this.locator((0, import_locatorUtils.getByPlaceholderSelector)(text, options));
	  }
	  getByText(text, options) {
	    return this.locator((0, import_locatorUtils.getByTextSelector)(text, options));
	  }
	  getByTitle(text, options) {
	    return this.locator((0, import_locatorUtils.getByTitleSelector)(text, options));
	  }
	  getByRole(role, options = {}) {
	    return this.locator((0, import_locatorUtils.getByRoleSelector)(role, options));
	  }
	  frameLocator(selector) {
	    return new FrameLocator(this._frame, this._selector + " >> " + selector);
	  }
	  filter(options) {
	    return new Locator(this._frame, this._selector, options);
	  }
	  async elementHandle(options) {
	    return await this._frame.waitForSelector(this._selector, { strict: true, state: "attached", ...options });
	  }
	  async elementHandles() {
	    return await this._frame.$$(this._selector);
	  }
	  contentFrame() {
	    return new FrameLocator(this._frame, this._selector);
	  }
	  first() {
	    return new Locator(this._frame, this._selector + " >> nth=0");
	  }
	  last() {
	    return new Locator(this._frame, this._selector + ` >> nth=-1`);
	  }
	  nth(index) {
	    return new Locator(this._frame, this._selector + ` >> nth=${index}`);
	  }
	  and(locator) {
	    if (locator._frame !== this._frame)
	      throw new Error(`Locators must belong to the same frame.`);
	    return new Locator(this._frame, this._selector + ` >> internal:and=` + JSON.stringify(locator._selector));
	  }
	  or(locator) {
	    if (locator._frame !== this._frame)
	      throw new Error(`Locators must belong to the same frame.`);
	    return new Locator(this._frame, this._selector + ` >> internal:or=` + JSON.stringify(locator._selector));
	  }
	  async focus(options) {
	    return await this._frame.focus(this._selector, { strict: true, ...options });
	  }
	  async blur(options) {
	    await this._frame._channel.blur({ selector: this._selector, strict: true, ...options });
	  }
	  async count() {
	    return await this._frame._queryCount(this._selector);
	  }
	  async _generateLocatorString() {
	    return await this._withElement((h) => h._generateLocatorString());
	  }
	  async getAttribute(name, options) {
	    return await this._frame.getAttribute(this._selector, name, { strict: true, ...options });
	  }
	  async hover(options = {}) {
	    return await this._frame.hover(this._selector, { strict: true, ...options });
	  }
	  async innerHTML(options) {
	    return await this._frame.innerHTML(this._selector, { strict: true, ...options });
	  }
	  async innerText(options) {
	    return await this._frame.innerText(this._selector, { strict: true, ...options });
	  }
	  async inputValue(options) {
	    return await this._frame.inputValue(this._selector, { strict: true, ...options });
	  }
	  async isChecked(options) {
	    return await this._frame.isChecked(this._selector, { strict: true, ...options });
	  }
	  async isDisabled(options) {
	    return await this._frame.isDisabled(this._selector, { strict: true, ...options });
	  }
	  async isEditable(options) {
	    return await this._frame.isEditable(this._selector, { strict: true, ...options });
	  }
	  async isEnabled(options) {
	    return await this._frame.isEnabled(this._selector, { strict: true, ...options });
	  }
	  async isHidden(options) {
	    return await this._frame.isHidden(this._selector, { strict: true, ...options });
	  }
	  async isVisible(options) {
	    return await this._frame.isVisible(this._selector, { strict: true, ...options });
	  }
	  async press(key, options = {}) {
	    return await this._frame.press(this._selector, key, { strict: true, ...options });
	  }
	  async screenshot(options = {}) {
	    const mask = options.mask;
	    return await this._withElement((h, timeout) => h.screenshot({ ...options, mask, timeout }), options.timeout);
	  }
	  async ariaSnapshot(options) {
	    const result = await this._frame._channel.ariaSnapshot({ ...options, mode: options?._mode, selector: this._selector });
	    return result.snapshot;
	  }
	  async scrollIntoViewIfNeeded(options = {}) {
	    return await this._withElement((h, timeout) => h.scrollIntoViewIfNeeded({ ...options, timeout }), options.timeout);
	  }
	  async selectOption(values, options = {}) {
	    return await this._frame.selectOption(this._selector, values, { strict: true, ...options });
	  }
	  async selectText(options = {}) {
	    return await this._withElement((h, timeout) => h.selectText({ ...options, timeout }), options.timeout);
	  }
	  async setChecked(checked, options) {
	    if (checked)
	      await this.check(options);
	    else
	      await this.uncheck(options);
	  }
	  async setInputFiles(files, options = {}) {
	    return await this._frame.setInputFiles(this._selector, files, { strict: true, ...options });
	  }
	  async tap(options = {}) {
	    return await this._frame.tap(this._selector, { strict: true, ...options });
	  }
	  async textContent(options) {
	    return await this._frame.textContent(this._selector, { strict: true, ...options });
	  }
	  async type(text, options = {}) {
	    return await this._frame.type(this._selector, text, { strict: true, ...options });
	  }
	  async pressSequentially(text, options = {}) {
	    return await this.type(text, options);
	  }
	  async uncheck(options = {}) {
	    return await this._frame.uncheck(this._selector, { strict: true, ...options });
	  }
	  async all() {
	    return new Array(await this.count()).fill(0).map((e, i) => this.nth(i));
	  }
	  async allInnerTexts() {
	    return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.innerText));
	  }
	  async allTextContents() {
	    return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.textContent || ""));
	  }
	  async waitFor(options) {
	    await this._frame._channel.waitForSelector({ selector: this._selector, strict: true, omitReturnValue: true, ...options });
	  }
	  async _expect(expression, options) {
	    const params = { selector: this._selector, expression, ...options, isNot: !!options.isNot };
	    params.expectedValue = (0, import_jsHandle.serializeArgument)(options.expectedValue);
	    const result = await this._frame._channel.expect(params);
	    if (result.received !== void 0)
	      result.received = (0, import_jsHandle.parseResult)(result.received);
	    return result;
	  }
	  _inspect() {
	    return this.toString();
	  }
	  toString() {
	    return (0, import_locatorGenerators.asLocator)("javascript", this._selector);
	  }
	}
	class FrameLocator {
	  constructor(frame, selector) {
	    this._frame = frame;
	    this._frameSelector = selector;
	  }
	  locator(selectorOrLocator, options) {
	    if ((0, import_rtti.isString)(selectorOrLocator))
	      return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator, options);
	    if (selectorOrLocator._frame !== this._frame)
	      throw new Error(`Locators must belong to the same frame.`);
	    return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator._selector, options);
	  }
	  getByTestId(testId) {
	    return this.locator((0, import_locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
	  }
	  getByAltText(text, options) {
	    return this.locator((0, import_locatorUtils.getByAltTextSelector)(text, options));
	  }
	  getByLabel(text, options) {
	    return this.locator((0, import_locatorUtils.getByLabelSelector)(text, options));
	  }
	  getByPlaceholder(text, options) {
	    return this.locator((0, import_locatorUtils.getByPlaceholderSelector)(text, options));
	  }
	  getByText(text, options) {
	    return this.locator((0, import_locatorUtils.getByTextSelector)(text, options));
	  }
	  getByTitle(text, options) {
	    return this.locator((0, import_locatorUtils.getByTitleSelector)(text, options));
	  }
	  getByRole(role, options = {}) {
	    return this.locator((0, import_locatorUtils.getByRoleSelector)(role, options));
	  }
	  owner() {
	    return new Locator(this._frame, this._frameSelector);
	  }
	  frameLocator(selector) {
	    return new FrameLocator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selector);
	  }
	  first() {
	    return new FrameLocator(this._frame, this._frameSelector + " >> nth=0");
	  }
	  last() {
	    return new FrameLocator(this._frame, this._frameSelector + ` >> nth=-1`);
	  }
	  nth(index) {
	    return new FrameLocator(this._frame, this._frameSelector + ` >> nth=${index}`);
	  }
	}
	let _testIdAttributeName = "data-testid";
	function testIdAttributeName() {
	  return _testIdAttributeName;
	}
	function setTestIdAttribute(attributeName) {
	  _testIdAttributeName = attributeName;
	}
	return locator;
}

var tracing;
var hasRequiredTracing;

function requireTracing () {
	if (hasRequiredTracing) return tracing;
	hasRequiredTracing = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var tracing_exports = {};
	__export(tracing_exports, {
	  Tracing: () => Tracing
	});
	tracing = __toCommonJS(tracing_exports);
	var import_artifact = requireArtifact();
	var import_channelOwner = requireChannelOwner();
	class Tracing extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._includeSources = false;
	    this._isTracing = false;
	    this.markAsInternalType();
	  }
	  static from(channel) {
	    return channel._object;
	  }
	  async start(options = {}) {
	    this._includeSources = !!options.sources;
	    await this._channel.tracingStart({
	      name: options.name,
	      snapshots: options.snapshots,
	      screenshots: options.screenshots,
	      live: options._live
	    });
	    const { traceName } = await this._channel.tracingStartChunk({ name: options.name, title: options.title });
	    await this._startCollectingStacks(traceName);
	  }
	  async startChunk(options = {}) {
	    const { traceName } = await this._channel.tracingStartChunk(options);
	    await this._startCollectingStacks(traceName);
	  }
	  async group(name, options = {}) {
	    await this._wrapApiCall(async () => {
	      await this._channel.tracingGroup({ name, location: options.location });
	    }, false);
	  }
	  async groupEnd() {
	    await this._wrapApiCall(async () => {
	      await this._channel.tracingGroupEnd();
	    }, false);
	  }
	  async _startCollectingStacks(traceName) {
	    if (!this._isTracing) {
	      this._isTracing = true;
	      this._connection.setIsTracing(true);
	    }
	    const result = await this._connection.localUtils()?.tracingStarted({ tracesDir: this._tracesDir, traceName });
	    this._stacksId = result?.stacksId;
	  }
	  async stopChunk(options = {}) {
	    await this._doStopChunk(options.path);
	  }
	  async stop(options = {}) {
	    await this._doStopChunk(options.path);
	    await this._channel.tracingStop();
	  }
	  async _doStopChunk(filePath) {
	    this._resetStackCounter();
	    if (!filePath) {
	      await this._channel.tracingStopChunk({ mode: "discard" });
	      if (this._stacksId)
	        await this._connection.localUtils().traceDiscarded({ stacksId: this._stacksId });
	      return;
	    }
	    const localUtils = this._connection.localUtils();
	    if (!localUtils)
	      throw new Error("Cannot save trace in thin clients");
	    const isLocal = !this._connection.isRemote();
	    if (isLocal) {
	      const result2 = await this._channel.tracingStopChunk({ mode: "entries" });
	      await localUtils.zip({ zipFile: filePath, entries: result2.entries, mode: "write", stacksId: this._stacksId, includeSources: this._includeSources });
	      return;
	    }
	    const result = await this._channel.tracingStopChunk({ mode: "archive" });
	    if (!result.artifact) {
	      if (this._stacksId)
	        await localUtils.traceDiscarded({ stacksId: this._stacksId });
	      return;
	    }
	    const artifact = import_artifact.Artifact.from(result.artifact);
	    await artifact.saveAs(filePath);
	    await artifact.delete();
	    await localUtils.zip({ zipFile: filePath, entries: [], mode: "append", stacksId: this._stacksId, includeSources: this._includeSources });
	  }
	  _resetStackCounter() {
	    if (this._isTracing) {
	      this._isTracing = false;
	      this._connection.setIsTracing(false);
	    }
	  }
	}
	return tracing;
}

var fetch;
var hasRequiredFetch;

function requireFetch () {
	if (hasRequiredFetch) return fetch;
	hasRequiredFetch = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var fetch_exports = {};
	__export(fetch_exports, {
	  APIRequest: () => APIRequest,
	  APIRequestContext: () => APIRequestContext,
	  APIResponse: () => APIResponse
	});
	fetch = __toCommonJS(fetch_exports);
	var import_browserContext = requireBrowserContext();
	var import_channelOwner = requireChannelOwner();
	var import_errors = requireErrors();
	var import_network = requireNetwork();
	var import_tracing = requireTracing();
	var import_assert = requireAssert$1();
	var import_fileUtils = requireFileUtils();
	var import_headers = requireHeaders();
	var import_rtti = requireRtti();
	class APIRequest {
	  constructor(playwright) {
	    this._contexts = /* @__PURE__ */ new Set();
	    this._playwright = playwright;
	  }
	  async newContext(options = {}) {
	    options = {
	      ...this._playwright._defaultContextOptions,
	      timeout: this._playwright._defaultContextTimeout,
	      ...options
	    };
	    const storageState = typeof options.storageState === "string" ? JSON.parse(await this._playwright._platform.fs().promises.readFile(options.storageState, "utf8")) : options.storageState;
	    const context = APIRequestContext.from((await this._playwright._channel.newRequest({
	      ...options,
	      extraHTTPHeaders: options.extraHTTPHeaders ? (0, import_headers.headersObjectToArray)(options.extraHTTPHeaders) : void 0,
	      storageState,
	      tracesDir: this._playwright._defaultLaunchOptions?.tracesDir,
	      // We do not expose tracesDir in the API, so do not allow options to accidentally override it.
	      clientCertificates: await (0, import_browserContext.toClientCertificatesProtocol)(this._playwright._platform, options.clientCertificates)
	    })).request);
	    this._contexts.add(context);
	    context._request = this;
	    context._tracing._tracesDir = this._playwright._defaultLaunchOptions?.tracesDir;
	    await context._instrumentation.runAfterCreateRequestContext(context);
	    return context;
	  }
	}
	class APIRequestContext extends import_channelOwner.ChannelOwner {
	  static from(channel) {
	    return channel._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._tracing = import_tracing.Tracing.from(initializer.tracing);
	  }
	  async [Symbol.asyncDispose]() {
	    await this.dispose();
	  }
	  async dispose(options = {}) {
	    this._closeReason = options.reason;
	    await this._instrumentation.runBeforeCloseRequestContext(this);
	    try {
	      await this._channel.dispose(options);
	    } catch (e) {
	      if ((0, import_errors.isTargetClosedError)(e))
	        return;
	      throw e;
	    }
	    this._tracing._resetStackCounter();
	    this._request?._contexts.delete(this);
	  }
	  async delete(url, options) {
	    return await this.fetch(url, {
	      ...options,
	      method: "DELETE"
	    });
	  }
	  async head(url, options) {
	    return await this.fetch(url, {
	      ...options,
	      method: "HEAD"
	    });
	  }
	  async get(url, options) {
	    return await this.fetch(url, {
	      ...options,
	      method: "GET"
	    });
	  }
	  async patch(url, options) {
	    return await this.fetch(url, {
	      ...options,
	      method: "PATCH"
	    });
	  }
	  async post(url, options) {
	    return await this.fetch(url, {
	      ...options,
	      method: "POST"
	    });
	  }
	  async put(url, options) {
	    return await this.fetch(url, {
	      ...options,
	      method: "PUT"
	    });
	  }
	  async fetch(urlOrRequest, options = {}) {
	    const url = (0, import_rtti.isString)(urlOrRequest) ? urlOrRequest : void 0;
	    const request = (0, import_rtti.isString)(urlOrRequest) ? void 0 : urlOrRequest;
	    return await this._innerFetch({ url, request, ...options });
	  }
	  async _innerFetch(options = {}) {
	    return await this._wrapApiCall(async () => {
	      if (this._closeReason)
	        throw new import_errors.TargetClosedError(this._closeReason);
	      (0, import_assert.assert)(options.request || typeof options.url === "string", "First argument must be either URL string or Request");
	      (0, import_assert.assert)((options.data === void 0 ? 0 : 1) + (options.form === void 0 ? 0 : 1) + (options.multipart === void 0 ? 0 : 1) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
	      (0, import_assert.assert)(options.maxRedirects === void 0 || options.maxRedirects >= 0, `'maxRedirects' must be greater than or equal to '0'`);
	      (0, import_assert.assert)(options.maxRetries === void 0 || options.maxRetries >= 0, `'maxRetries' must be greater than or equal to '0'`);
	      const url = options.url !== void 0 ? options.url : options.request.url();
	      const method = options.method || options.request?.method();
	      let encodedParams = void 0;
	      if (typeof options.params === "string")
	        encodedParams = options.params;
	      else if (options.params instanceof URLSearchParams)
	        encodedParams = options.params.toString();
	      const headersObj = options.headers || options.request?.headers();
	      const headers = headersObj ? (0, import_headers.headersObjectToArray)(headersObj) : void 0;
	      let jsonData;
	      let formData;
	      let multipartData;
	      let postDataBuffer;
	      if (options.data !== void 0) {
	        if ((0, import_rtti.isString)(options.data)) {
	          if (isJsonContentType(headers))
	            jsonData = isJsonParsable(options.data) ? options.data : JSON.stringify(options.data);
	          else
	            postDataBuffer = Buffer.from(options.data, "utf8");
	        } else if (Buffer.isBuffer(options.data)) {
	          postDataBuffer = options.data;
	        } else if (typeof options.data === "object" || typeof options.data === "number" || typeof options.data === "boolean") {
	          jsonData = JSON.stringify(options.data);
	        } else {
	          throw new Error(`Unexpected 'data' type`);
	        }
	      } else if (options.form) {
	        if (globalThis.FormData && options.form instanceof FormData) {
	          formData = [];
	          for (const [name, value] of options.form.entries()) {
	            if (typeof value !== "string")
	              throw new Error(`Expected string for options.form["${name}"], found File. Please use options.multipart instead.`);
	            formData.push({ name, value });
	          }
	        } else {
	          formData = objectToArray(options.form);
	        }
	      } else if (options.multipart) {
	        multipartData = [];
	        if (globalThis.FormData && options.multipart instanceof FormData) {
	          const form = options.multipart;
	          for (const [name, value] of form.entries()) {
	            if ((0, import_rtti.isString)(value)) {
	              multipartData.push({ name, value });
	            } else {
	              const file = {
	                name: value.name,
	                mimeType: value.type,
	                buffer: Buffer.from(await value.arrayBuffer())
	              };
	              multipartData.push({ name, file });
	            }
	          }
	        } else {
	          for (const [name, value] of Object.entries(options.multipart))
	            multipartData.push(await toFormField(this._platform, name, value));
	        }
	      }
	      if (postDataBuffer === void 0 && jsonData === void 0 && formData === void 0 && multipartData === void 0)
	        postDataBuffer = options.request?.postDataBuffer() || void 0;
	      const fixtures = {
	        __testHookLookup: options.__testHookLookup
	      };
	      const result = await this._channel.fetch({
	        url,
	        params: typeof options.params === "object" ? objectToArray(options.params) : void 0,
	        encodedParams,
	        method,
	        headers,
	        postData: postDataBuffer,
	        jsonData,
	        formData,
	        multipartData,
	        timeout: options.timeout,
	        failOnStatusCode: options.failOnStatusCode,
	        ignoreHTTPSErrors: options.ignoreHTTPSErrors,
	        maxRedirects: options.maxRedirects,
	        maxRetries: options.maxRetries,
	        ...fixtures
	      });
	      return new APIResponse(this, result.response);
	    });
	  }
	  async storageState(options = {}) {
	    const state = await this._channel.storageState({ indexedDB: options.indexedDB });
	    if (options.path) {
	      await (0, import_fileUtils.mkdirIfNeeded)(this._platform, options.path);
	      await this._platform.fs().promises.writeFile(options.path, JSON.stringify(state, void 0, 2), "utf8");
	    }
	    return state;
	  }
	}
	async function toFormField(platform, name, value) {
	  const typeOfValue = typeof value;
	  if (isFilePayload(value)) {
	    const payload = value;
	    if (!Buffer.isBuffer(payload.buffer))
	      throw new Error(`Unexpected buffer type of 'data.${name}'`);
	    return { name, file: filePayloadToJson(payload) };
	  } else if (typeOfValue === "string" || typeOfValue === "number" || typeOfValue === "boolean") {
	    return { name, value: String(value) };
	  } else {
	    return { name, file: await readStreamToJson(platform, value) };
	  }
	}
	function isJsonParsable(value) {
	  if (typeof value !== "string")
	    return false;
	  try {
	    JSON.parse(value);
	    return true;
	  } catch (e) {
	    if (e instanceof SyntaxError)
	      return false;
	    else
	      throw e;
	  }
	}
	class APIResponse {
	  constructor(context, initializer) {
	    this._request = context;
	    this._initializer = initializer;
	    this._headers = new import_network.RawHeaders(this._initializer.headers);
	    if (context._platform.inspectCustom)
	      this[context._platform.inspectCustom] = () => this._inspect();
	  }
	  ok() {
	    return this._initializer.status >= 200 && this._initializer.status <= 299;
	  }
	  url() {
	    return this._initializer.url;
	  }
	  status() {
	    return this._initializer.status;
	  }
	  statusText() {
	    return this._initializer.statusText;
	  }
	  headers() {
	    return this._headers.headers();
	  }
	  headersArray() {
	    return this._headers.headersArray();
	  }
	  async body() {
	    return await this._request._wrapApiCall(async () => {
	      try {
	        const result = await this._request._channel.fetchResponseBody({ fetchUid: this._fetchUid() });
	        if (result.binary === void 0)
	          throw new Error("Response has been disposed");
	        return result.binary;
	      } catch (e) {
	        if ((0, import_errors.isTargetClosedError)(e))
	          throw new Error("Response has been disposed");
	        throw e;
	      }
	    }, true);
	  }
	  async text() {
	    const content = await this.body();
	    return content.toString("utf8");
	  }
	  async json() {
	    const content = await this.text();
	    return JSON.parse(content);
	  }
	  async [Symbol.asyncDispose]() {
	    await this.dispose();
	  }
	  async dispose() {
	    await this._request._channel.disposeAPIResponse({ fetchUid: this._fetchUid() });
	  }
	  _inspect() {
	    const headers = this.headersArray().map(({ name, value }) => `  ${name}: ${value}`);
	    return `APIResponse: ${this.status()} ${this.statusText()}
${headers.join("\n")}`;
	  }
	  _fetchUid() {
	    return this._initializer.fetchUid;
	  }
	  async _fetchLog() {
	    const { log } = await this._request._channel.fetchLog({ fetchUid: this._fetchUid() });
	    return log;
	  }
	}
	function filePayloadToJson(payload) {
	  return {
	    name: payload.name,
	    mimeType: payload.mimeType,
	    buffer: payload.buffer
	  };
	}
	async function readStreamToJson(platform, stream) {
	  const buffer = await new Promise((resolve, reject) => {
	    const chunks = [];
	    stream.on("data", (chunk) => chunks.push(chunk));
	    stream.on("end", () => resolve(Buffer.concat(chunks)));
	    stream.on("error", (err) => reject(err));
	  });
	  const streamPath = Buffer.isBuffer(stream.path) ? stream.path.toString("utf8") : stream.path;
	  return {
	    name: platform.path().basename(streamPath),
	    buffer
	  };
	}
	function isJsonContentType(headers) {
	  if (!headers)
	    return false;
	  for (const { name, value } of headers) {
	    if (name.toLocaleLowerCase() === "content-type")
	      return value === "application/json";
	  }
	  return false;
	}
	function objectToArray(map) {
	  if (!map)
	    return void 0;
	  const result = [];
	  for (const [name, value] of Object.entries(map)) {
	    if (value !== void 0)
	      result.push({ name, value: String(value) });
	  }
	  return result;
	}
	function isFilePayload(value) {
	  return typeof value === "object" && value["name"] && value["mimeType"] && value["buffer"];
	}
	return fetch;
}

var waiter;
var hasRequiredWaiter;

function requireWaiter () {
	if (hasRequiredWaiter) return waiter;
	hasRequiredWaiter = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var waiter_exports = {};
	__export(waiter_exports, {
	  Waiter: () => Waiter
	});
	waiter = __toCommonJS(waiter_exports);
	var import_errors = requireErrors();
	var import_stackTrace = requireStackTrace();
	class Waiter {
	  constructor(channelOwner, event) {
	    this._failures = [];
	    this._logs = [];
	    this._waitId = channelOwner._platform.createGuid();
	    this._channelOwner = channelOwner;
	    this._savedZone = channelOwner._platform.zones.current().pop();
	    this._channelOwner._channel.waitForEventInfo({ info: { waitId: this._waitId, phase: "before", event } }).catch(() => {
	    });
	    this._dispose = [
	      () => this._channelOwner._wrapApiCall(async () => {
	        await this._channelOwner._channel.waitForEventInfo({ info: { waitId: this._waitId, phase: "after", error: this._error } });
	      }, true).catch(() => {
	      })
	    ];
	  }
	  static createForEvent(channelOwner, event) {
	    return new Waiter(channelOwner, event);
	  }
	  async waitForEvent(emitter, event, predicate) {
	    const { promise, dispose } = waitForEvent(emitter, event, this._savedZone, predicate);
	    return await this.waitForPromise(promise, dispose);
	  }
	  rejectOnEvent(emitter, event, error, predicate) {
	    const { promise, dispose } = waitForEvent(emitter, event, this._savedZone, predicate);
	    this._rejectOn(promise.then(() => {
	      throw typeof error === "function" ? error() : error;
	    }), dispose);
	  }
	  rejectOnTimeout(timeout, message) {
	    if (!timeout)
	      return;
	    const { promise, dispose } = waitForTimeout(timeout);
	    this._rejectOn(promise.then(() => {
	      throw new import_errors.TimeoutError(message);
	    }), dispose);
	  }
	  rejectImmediately(error) {
	    this._immediateError = error;
	  }
	  dispose() {
	    for (const dispose of this._dispose)
	      dispose();
	  }
	  async waitForPromise(promise, dispose) {
	    try {
	      if (this._immediateError)
	        throw this._immediateError;
	      const result = await Promise.race([promise, ...this._failures]);
	      if (dispose)
	        dispose();
	      return result;
	    } catch (e) {
	      if (dispose)
	        dispose();
	      this._error = e.message;
	      this.dispose();
	      (0, import_stackTrace.rewriteErrorMessage)(e, e.message + formatLogRecording(this._logs));
	      throw e;
	    }
	  }
	  log(s) {
	    this._logs.push(s);
	    this._channelOwner._wrapApiCall(async () => {
	      await this._channelOwner._channel.waitForEventInfo({ info: { waitId: this._waitId, phase: "log", message: s } });
	    }, true).catch(() => {
	    });
	  }
	  _rejectOn(promise, dispose) {
	    this._failures.push(promise);
	    if (dispose)
	      this._dispose.push(dispose);
	  }
	}
	function waitForEvent(emitter, event, savedZone, predicate) {
	  let listener;
	  const promise = new Promise((resolve, reject) => {
	    listener = async (eventArg) => {
	      await savedZone.run(async () => {
	        try {
	          if (predicate && !await predicate(eventArg))
	            return;
	          emitter.removeListener(event, listener);
	          resolve(eventArg);
	        } catch (e) {
	          emitter.removeListener(event, listener);
	          reject(e);
	        }
	      });
	    };
	    emitter.addListener(event, listener);
	  });
	  const dispose = () => emitter.removeListener(event, listener);
	  return { promise, dispose };
	}
	function waitForTimeout(timeout) {
	  let timeoutId;
	  const promise = new Promise((resolve) => timeoutId = setTimeout(resolve, timeout));
	  const dispose = () => clearTimeout(timeoutId);
	  return { promise, dispose };
	}
	function formatLogRecording(log) {
	  if (!log.length)
	    return "";
	  const header = ` logs `;
	  const headerLength = 60;
	  const leftLength = (headerLength - header.length) / 2;
	  const rightLength = headerLength - header.length - leftLength;
	  return `
${"=".repeat(leftLength)}${header}${"=".repeat(rightLength)}
${log.join("\n")}
${"=".repeat(headerLength)}`;
	}
	return waiter;
}

var worker;
var hasRequiredWorker;

function requireWorker () {
	if (hasRequiredWorker) return worker;
	hasRequiredWorker = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var worker_exports = {};
	__export(worker_exports, {
	  Worker: () => Worker
	});
	worker = __toCommonJS(worker_exports);
	var import_channelOwner = requireChannelOwner();
	var import_errors = requireErrors();
	var import_events = requireEvents();
	var import_jsHandle = requireJsHandle();
	var import_manualPromise = requireManualPromise();
	class Worker extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    // Set for service workers.
	    this._closedScope = new import_manualPromise.LongStandingScope();
	    this._channel.on("close", () => {
	      if (this._page)
	        this._page._workers.delete(this);
	      if (this._context)
	        this._context._serviceWorkers.delete(this);
	      this.emit(import_events.Events.Worker.Close, this);
	    });
	    this.once(import_events.Events.Worker.Close, () => this._closedScope.close(this._page?._closeErrorWithReason() || new import_errors.TargetClosedError()));
	  }
	  static from(worker) {
	    return worker._object;
	  }
	  url() {
	    return this._initializer.url;
	  }
	  async evaluate(pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 2);
	    const result = await this._channel.evaluateExpression({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return (0, import_jsHandle.parseResult)(result.value);
	  }
	  async evaluateHandle(pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 2);
	    const result = await this._channel.evaluateExpressionHandle({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return import_jsHandle.JSHandle.from(result.handle);
	  }
	}
	return worker;
}

var network;
var hasRequiredNetwork;

function requireNetwork () {
	if (hasRequiredNetwork) return network;
	hasRequiredNetwork = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var network_exports = {};
	__export(network_exports, {
	  RawHeaders: () => RawHeaders,
	  Request: () => Request,
	  Response: () => Response,
	  Route: () => Route,
	  RouteHandler: () => RouteHandler,
	  WebSocket: () => WebSocket,
	  WebSocketRoute: () => WebSocketRoute,
	  WebSocketRouteHandler: () => WebSocketRouteHandler,
	  validateHeaders: () => validateHeaders
	});
	network = __toCommonJS(network_exports);
	var import_channelOwner = requireChannelOwner();
	var import_errors = requireErrors();
	var import_events = requireEvents();
	var import_fetch = requireFetch();
	var import_frame = requireFrame();
	var import_waiter = requireWaiter();
	var import_worker = requireWorker();
	var import_assert = requireAssert$1();
	var import_headers = requireHeaders();
	var import_urlMatch = requireUrlMatch();
	var import_manualPromise = requireManualPromise();
	var import_multimap = requireMultimap();
	var import_rtti = requireRtti();
	var import_stackTrace = requireStackTrace();
	var import_mimeType = requireMimeType();
	class Request extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._redirectedFrom = null;
	    this._redirectedTo = null;
	    this._failureText = null;
	    this._fallbackOverrides = {};
	    this.markAsInternalType();
	    this._redirectedFrom = Request.fromNullable(initializer.redirectedFrom);
	    if (this._redirectedFrom)
	      this._redirectedFrom._redirectedTo = this;
	    this._provisionalHeaders = new RawHeaders(initializer.headers);
	    this._timing = {
	      startTime: 0,
	      domainLookupStart: -1,
	      domainLookupEnd: -1,
	      connectStart: -1,
	      secureConnectionStart: -1,
	      connectEnd: -1,
	      requestStart: -1,
	      responseStart: -1,
	      responseEnd: -1
	    };
	  }
	  static from(request) {
	    return request._object;
	  }
	  static fromNullable(request) {
	    return request ? Request.from(request) : null;
	  }
	  url() {
	    return this._fallbackOverrides.url || this._initializer.url;
	  }
	  resourceType() {
	    return this._initializer.resourceType;
	  }
	  method() {
	    return this._fallbackOverrides.method || this._initializer.method;
	  }
	  postData() {
	    return (this._fallbackOverrides.postDataBuffer || this._initializer.postData)?.toString("utf-8") || null;
	  }
	  postDataBuffer() {
	    return this._fallbackOverrides.postDataBuffer || this._initializer.postData || null;
	  }
	  postDataJSON() {
	    const postData = this.postData();
	    if (!postData)
	      return null;
	    const contentType = this.headers()["content-type"];
	    if (contentType?.includes("application/x-www-form-urlencoded")) {
	      const entries = {};
	      const parsed = new URLSearchParams(postData);
	      for (const [k, v] of parsed.entries())
	        entries[k] = v;
	      return entries;
	    }
	    try {
	      return JSON.parse(postData);
	    } catch (e) {
	      throw new Error("POST data is not a valid JSON object: " + postData);
	    }
	  }
	  /**
	   * @deprecated
	   */
	  headers() {
	    if (this._fallbackOverrides.headers)
	      return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers).headers();
	    return this._provisionalHeaders.headers();
	  }
	  async _actualHeaders() {
	    if (this._fallbackOverrides.headers)
	      return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers);
	    if (!this._actualHeadersPromise) {
	      this._actualHeadersPromise = this._wrapApiCall(async () => {
	        return new RawHeaders((await this._channel.rawRequestHeaders()).headers);
	      });
	    }
	    return await this._actualHeadersPromise;
	  }
	  async allHeaders() {
	    return (await this._actualHeaders()).headers();
	  }
	  async headersArray() {
	    return (await this._actualHeaders()).headersArray();
	  }
	  async headerValue(name) {
	    return (await this._actualHeaders()).get(name);
	  }
	  async response() {
	    return Response.fromNullable((await this._channel.response()).response);
	  }
	  async _internalResponse() {
	    return await this._wrapApiCall(async () => {
	      return Response.fromNullable((await this._channel.response()).response);
	    }, true);
	  }
	  frame() {
	    if (!this._initializer.frame) {
	      (0, import_assert.assert)(this.serviceWorker());
	      throw new Error("Service Worker requests do not have an associated frame.");
	    }
	    const frame = import_frame.Frame.from(this._initializer.frame);
	    if (!frame._page) {
	      throw new Error([
	        "Frame for this navigation request is not available, because the request",
	        "was issued before the frame is created. You can check whether the request",
	        "is a navigation request by calling isNavigationRequest() method."
	      ].join("\n"));
	    }
	    return frame;
	  }
	  _safePage() {
	    return import_frame.Frame.fromNullable(this._initializer.frame)?._page || null;
	  }
	  serviceWorker() {
	    return this._initializer.serviceWorker ? import_worker.Worker.from(this._initializer.serviceWorker) : null;
	  }
	  isNavigationRequest() {
	    return this._initializer.isNavigationRequest;
	  }
	  redirectedFrom() {
	    return this._redirectedFrom;
	  }
	  redirectedTo() {
	    return this._redirectedTo;
	  }
	  failure() {
	    if (this._failureText === null)
	      return null;
	    return {
	      errorText: this._failureText
	    };
	  }
	  timing() {
	    return this._timing;
	  }
	  async sizes() {
	    const response = await this.response();
	    if (!response)
	      throw new Error("Unable to fetch sizes for failed request");
	    return (await response._channel.sizes()).sizes;
	  }
	  _setResponseEndTiming(responseEndTiming) {
	    this._timing.responseEnd = responseEndTiming;
	    if (this._timing.responseStart === -1)
	      this._timing.responseStart = responseEndTiming;
	  }
	  _finalRequest() {
	    return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
	  }
	  _applyFallbackOverrides(overrides) {
	    if (overrides.url)
	      this._fallbackOverrides.url = overrides.url;
	    if (overrides.method)
	      this._fallbackOverrides.method = overrides.method;
	    if (overrides.headers)
	      this._fallbackOverrides.headers = overrides.headers;
	    if ((0, import_rtti.isString)(overrides.postData))
	      this._fallbackOverrides.postDataBuffer = Buffer.from(overrides.postData, "utf-8");
	    else if (overrides.postData instanceof Buffer)
	      this._fallbackOverrides.postDataBuffer = overrides.postData;
	    else if (overrides.postData)
	      this._fallbackOverrides.postDataBuffer = Buffer.from(JSON.stringify(overrides.postData), "utf-8");
	  }
	  _fallbackOverridesForContinue() {
	    return this._fallbackOverrides;
	  }
	  _targetClosedScope() {
	    return this.serviceWorker()?._closedScope || this._safePage()?._closedOrCrashedScope || new import_manualPromise.LongStandingScope();
	  }
	}
	class Route extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._handlingPromise = null;
	    this._didThrow = false;
	    this.markAsInternalType();
	  }
	  static from(route) {
	    return route._object;
	  }
	  request() {
	    return Request.from(this._initializer.request);
	  }
	  async _raceWithTargetClose(promise) {
	    return await this.request()._targetClosedScope().safeRace(promise);
	  }
	  async _startHandling() {
	    this._handlingPromise = new import_manualPromise.ManualPromise();
	    return await this._handlingPromise;
	  }
	  async fallback(options = {}) {
	    this._checkNotHandled();
	    this.request()._applyFallbackOverrides(options);
	    this._reportHandled(false);
	  }
	  async abort(errorCode) {
	    await this._handleRoute(async () => {
	      await this._raceWithTargetClose(this._channel.abort({ errorCode }));
	    });
	  }
	  async _redirectNavigationRequest(url) {
	    await this._handleRoute(async () => {
	      await this._raceWithTargetClose(this._channel.redirectNavigationRequest({ url }));
	    });
	  }
	  async fetch(options = {}) {
	    return await this._wrapApiCall(async () => {
	      return await this._context.request._innerFetch({ request: this.request(), data: options.postData, ...options });
	    });
	  }
	  async fulfill(options = {}) {
	    await this._handleRoute(async () => {
	      await this._wrapApiCall(async () => {
	        await this._innerFulfill(options);
	      });
	    });
	  }
	  async _handleRoute(callback) {
	    this._checkNotHandled();
	    try {
	      await callback();
	      this._reportHandled(true);
	    } catch (e) {
	      this._didThrow = true;
	      throw e;
	    }
	  }
	  async _innerFulfill(options = {}) {
	    let fetchResponseUid;
	    let { status: statusOption, headers: headersOption, body } = options;
	    if (options.json !== void 0) {
	      (0, import_assert.assert)(options.body === void 0, "Can specify either body or json parameters");
	      body = JSON.stringify(options.json);
	    }
	    if (options.response instanceof import_fetch.APIResponse) {
	      statusOption ??= options.response.status();
	      headersOption ??= options.response.headers();
	      if (body === void 0 && options.path === void 0) {
	        if (options.response._request._connection === this._connection)
	          fetchResponseUid = options.response._fetchUid();
	        else
	          body = await options.response.body();
	      }
	    }
	    let isBase64 = false;
	    let length = 0;
	    if (options.path) {
	      const buffer = await this._platform.fs().promises.readFile(options.path);
	      body = buffer.toString("base64");
	      isBase64 = true;
	      length = buffer.length;
	    } else if ((0, import_rtti.isString)(body)) {
	      isBase64 = false;
	      length = Buffer.byteLength(body);
	    } else if (body) {
	      length = body.length;
	      body = body.toString("base64");
	      isBase64 = true;
	    }
	    const headers = {};
	    for (const header of Object.keys(headersOption || {}))
	      headers[header.toLowerCase()] = String(headersOption[header]);
	    if (options.contentType)
	      headers["content-type"] = String(options.contentType);
	    else if (options.json)
	      headers["content-type"] = "application/json";
	    else if (options.path)
	      headers["content-type"] = (0, import_mimeType.getMimeTypeForPath)(options.path) || "application/octet-stream";
	    if (length && !("content-length" in headers))
	      headers["content-length"] = String(length);
	    await this._raceWithTargetClose(this._channel.fulfill({
	      status: statusOption || 200,
	      headers: (0, import_headers.headersObjectToArray)(headers),
	      body,
	      isBase64,
	      fetchResponseUid
	    }));
	  }
	  async continue(options = {}) {
	    await this._handleRoute(async () => {
	      this.request()._applyFallbackOverrides(options);
	      await this._innerContinue(
	        false
	        /* isFallback */
	      );
	    });
	  }
	  _checkNotHandled() {
	    if (!this._handlingPromise)
	      throw new Error("Route is already handled!");
	  }
	  _reportHandled(done) {
	    const chain = this._handlingPromise;
	    this._handlingPromise = null;
	    chain.resolve(done);
	  }
	  async _innerContinue(isFallback) {
	    const options = this.request()._fallbackOverridesForContinue();
	    return await this._raceWithTargetClose(this._channel.continue({
	      url: options.url,
	      method: options.method,
	      headers: options.headers ? (0, import_headers.headersObjectToArray)(options.headers) : void 0,
	      postData: options.postDataBuffer,
	      isFallback
	    }));
	  }
	}
	class WebSocketRoute extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._connected = false;
	    this.markAsInternalType();
	    this._server = {
	      onMessage: (handler) => {
	        this._onServerMessage = handler;
	      },
	      onClose: (handler) => {
	        this._onServerClose = handler;
	      },
	      connectToServer: () => {
	        throw new Error(`connectToServer must be called on the page-side WebSocketRoute`);
	      },
	      url: () => {
	        return this._initializer.url;
	      },
	      close: async (options = {}) => {
	        await this._channel.closeServer({ ...options, wasClean: true }).catch(() => {
	        });
	      },
	      send: (message) => {
	        if ((0, import_rtti.isString)(message))
	          this._channel.sendToServer({ message, isBase64: false }).catch(() => {
	          });
	        else
	          this._channel.sendToServer({ message: message.toString("base64"), isBase64: true }).catch(() => {
	          });
	      },
	      async [Symbol.asyncDispose]() {
	        await this.close();
	      }
	    };
	    this._channel.on("messageFromPage", ({ message, isBase64 }) => {
	      if (this._onPageMessage)
	        this._onPageMessage(isBase64 ? Buffer.from(message, "base64") : message);
	      else if (this._connected)
	        this._channel.sendToServer({ message, isBase64 }).catch(() => {
	        });
	    });
	    this._channel.on("messageFromServer", ({ message, isBase64 }) => {
	      if (this._onServerMessage)
	        this._onServerMessage(isBase64 ? Buffer.from(message, "base64") : message);
	      else
	        this._channel.sendToPage({ message, isBase64 }).catch(() => {
	        });
	    });
	    this._channel.on("closePage", ({ code, reason, wasClean }) => {
	      if (this._onPageClose)
	        this._onPageClose(code, reason);
	      else
	        this._channel.closeServer({ code, reason, wasClean }).catch(() => {
	        });
	    });
	    this._channel.on("closeServer", ({ code, reason, wasClean }) => {
	      if (this._onServerClose)
	        this._onServerClose(code, reason);
	      else
	        this._channel.closePage({ code, reason, wasClean }).catch(() => {
	        });
	    });
	  }
	  static from(route) {
	    return route._object;
	  }
	  url() {
	    return this._initializer.url;
	  }
	  async close(options = {}) {
	    await this._channel.closePage({ ...options, wasClean: true }).catch(() => {
	    });
	  }
	  connectToServer() {
	    if (this._connected)
	      throw new Error("Already connected to the server");
	    this._connected = true;
	    this._channel.connect().catch(() => {
	    });
	    return this._server;
	  }
	  send(message) {
	    if ((0, import_rtti.isString)(message))
	      this._channel.sendToPage({ message, isBase64: false }).catch(() => {
	      });
	    else
	      this._channel.sendToPage({ message: message.toString("base64"), isBase64: true }).catch(() => {
	      });
	  }
	  onMessage(handler) {
	    this._onPageMessage = handler;
	  }
	  onClose(handler) {
	    this._onPageClose = handler;
	  }
	  async [Symbol.asyncDispose]() {
	    await this.close();
	  }
	  async _afterHandle() {
	    if (this._connected)
	      return;
	    await this._channel.ensureOpened();
	  }
	}
	class WebSocketRouteHandler {
	  constructor(baseURL, url, handler) {
	    this._baseURL = baseURL;
	    this.url = url;
	    this.handler = handler;
	  }
	  static prepareInterceptionPatterns(handlers) {
	    const patterns = [];
	    let all = false;
	    for (const handler of handlers) {
	      if ((0, import_rtti.isString)(handler.url))
	        patterns.push({ glob: handler.url });
	      else if ((0, import_rtti.isRegExp)(handler.url))
	        patterns.push({ regexSource: handler.url.source, regexFlags: handler.url.flags });
	      else
	        all = true;
	    }
	    if (all)
	      return [{ glob: "**/*" }];
	    return patterns;
	  }
	  matches(wsURL) {
	    return (0, import_urlMatch.urlMatches)(this._baseURL, wsURL, this.url, true);
	  }
	  async handle(webSocketRoute) {
	    const handler = this.handler;
	    await handler(webSocketRoute);
	    await webSocketRoute._afterHandle();
	  }
	}
	class Response extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._finishedPromise = new import_manualPromise.ManualPromise();
	    this.markAsInternalType();
	    this._provisionalHeaders = new RawHeaders(initializer.headers);
	    this._request = Request.from(this._initializer.request);
	    Object.assign(this._request._timing, this._initializer.timing);
	  }
	  static from(response) {
	    return response._object;
	  }
	  static fromNullable(response) {
	    return response ? Response.from(response) : null;
	  }
	  url() {
	    return this._initializer.url;
	  }
	  ok() {
	    return this._initializer.status === 0 || this._initializer.status >= 200 && this._initializer.status <= 299;
	  }
	  status() {
	    return this._initializer.status;
	  }
	  statusText() {
	    return this._initializer.statusText;
	  }
	  fromServiceWorker() {
	    return this._initializer.fromServiceWorker;
	  }
	  /**
	   * @deprecated
	   */
	  headers() {
	    return this._provisionalHeaders.headers();
	  }
	  async _actualHeaders() {
	    if (!this._actualHeadersPromise) {
	      this._actualHeadersPromise = (async () => {
	        return new RawHeaders((await this._channel.rawResponseHeaders()).headers);
	      })();
	    }
	    return await this._actualHeadersPromise;
	  }
	  async allHeaders() {
	    return (await this._actualHeaders()).headers();
	  }
	  async headersArray() {
	    return (await this._actualHeaders()).headersArray().slice();
	  }
	  async headerValue(name) {
	    return (await this._actualHeaders()).get(name);
	  }
	  async headerValues(name) {
	    return (await this._actualHeaders()).getAll(name);
	  }
	  async finished() {
	    return await this.request()._targetClosedScope().race(this._finishedPromise);
	  }
	  async body() {
	    return (await this._channel.body()).binary;
	  }
	  async text() {
	    const content = await this.body();
	    return content.toString("utf8");
	  }
	  async json() {
	    const content = await this.text();
	    return JSON.parse(content);
	  }
	  request() {
	    return this._request;
	  }
	  frame() {
	    return this._request.frame();
	  }
	  async serverAddr() {
	    return (await this._channel.serverAddr()).value || null;
	  }
	  async securityDetails() {
	    return (await this._channel.securityDetails()).value || null;
	  }
	}
	class WebSocket extends import_channelOwner.ChannelOwner {
	  static from(webSocket) {
	    return webSocket._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._isClosed = false;
	    this._page = parent;
	    this._channel.on("frameSent", (event) => {
	      if (event.opcode === 1)
	        this.emit(import_events.Events.WebSocket.FrameSent, { payload: event.data });
	      else if (event.opcode === 2)
	        this.emit(import_events.Events.WebSocket.FrameSent, { payload: Buffer.from(event.data, "base64") });
	    });
	    this._channel.on("frameReceived", (event) => {
	      if (event.opcode === 1)
	        this.emit(import_events.Events.WebSocket.FrameReceived, { payload: event.data });
	      else if (event.opcode === 2)
	        this.emit(import_events.Events.WebSocket.FrameReceived, { payload: Buffer.from(event.data, "base64") });
	    });
	    this._channel.on("socketError", ({ error }) => this.emit(import_events.Events.WebSocket.Error, error));
	    this._channel.on("close", () => {
	      this._isClosed = true;
	      this.emit(import_events.Events.WebSocket.Close, this);
	    });
	  }
	  url() {
	    return this._initializer.url;
	  }
	  isClosed() {
	    return this._isClosed;
	  }
	  async waitForEvent(event, optionsOrPredicate = {}) {
	    return await this._wrapApiCall(async () => {
	      const timeout = this._page._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
	      const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
	      const waiter = import_waiter.Waiter.createForEvent(this, event);
	      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
	      if (event !== import_events.Events.WebSocket.Error)
	        waiter.rejectOnEvent(this, import_events.Events.WebSocket.Error, new Error("Socket error"));
	      if (event !== import_events.Events.WebSocket.Close)
	        waiter.rejectOnEvent(this, import_events.Events.WebSocket.Close, new Error("Socket closed"));
	      waiter.rejectOnEvent(this._page, import_events.Events.Page.Close, () => this._page._closeErrorWithReason());
	      const result = await waiter.waitForEvent(this, event, predicate);
	      waiter.dispose();
	      return result;
	    });
	  }
	}
	function validateHeaders(headers) {
	  for (const key of Object.keys(headers)) {
	    const value = headers[key];
	    if (!Object.is(value, void 0) && !(0, import_rtti.isString)(value))
	      throw new Error(`Expected value of header "${key}" to be String, but "${typeof value}" is found.`);
	  }
	}
	class RouteHandler {
	  constructor(platform, baseURL, url, handler, times = Number.MAX_SAFE_INTEGER) {
	    this.handledCount = 0;
	    this._ignoreException = false;
	    this._activeInvocations = /* @__PURE__ */ new Set();
	    this._baseURL = baseURL;
	    this._times = times;
	    this.url = url;
	    this.handler = handler;
	    this._savedZone = platform.zones.current().pop();
	  }
	  static prepareInterceptionPatterns(handlers) {
	    const patterns = [];
	    let all = false;
	    for (const handler of handlers) {
	      if ((0, import_rtti.isString)(handler.url))
	        patterns.push({ glob: handler.url });
	      else if ((0, import_rtti.isRegExp)(handler.url))
	        patterns.push({ regexSource: handler.url.source, regexFlags: handler.url.flags });
	      else
	        all = true;
	    }
	    if (all)
	      return [{ glob: "**/*" }];
	    return patterns;
	  }
	  matches(requestURL) {
	    return (0, import_urlMatch.urlMatches)(this._baseURL, requestURL, this.url);
	  }
	  async handle(route) {
	    return await this._savedZone.run(async () => this._handleImpl(route));
	  }
	  async _handleImpl(route) {
	    const handlerInvocation = { complete: new import_manualPromise.ManualPromise(), route };
	    this._activeInvocations.add(handlerInvocation);
	    try {
	      return await this._handleInternal(route);
	    } catch (e) {
	      if (this._ignoreException)
	        return false;
	      if ((0, import_errors.isTargetClosedError)(e)) {
	        (0, import_stackTrace.rewriteErrorMessage)(e, `"${e.message}" while running route callback.
Consider awaiting \`await page.unrouteAll({ behavior: 'ignoreErrors' })\`
before the end of the test to ignore remaining routes in flight.`);
	      }
	      throw e;
	    } finally {
	      handlerInvocation.complete.resolve();
	      this._activeInvocations.delete(handlerInvocation);
	    }
	  }
	  async stop(behavior) {
	    if (behavior === "ignoreErrors") {
	      this._ignoreException = true;
	    } else {
	      const promises = [];
	      for (const activation of this._activeInvocations) {
	        if (!activation.route._didThrow)
	          promises.push(activation.complete);
	      }
	      await Promise.all(promises);
	    }
	  }
	  async _handleInternal(route) {
	    ++this.handledCount;
	    const handledPromise = route._startHandling();
	    const handler = this.handler;
	    const [handled] = await Promise.all([
	      handledPromise,
	      handler(route, route.request())
	    ]);
	    return handled;
	  }
	  willExpire() {
	    return this.handledCount + 1 >= this._times;
	  }
	}
	class RawHeaders {
	  constructor(headers) {
	    this._headersMap = new import_multimap.MultiMap();
	    this._headersArray = headers;
	    for (const header of headers)
	      this._headersMap.set(header.name.toLowerCase(), header.value);
	  }
	  static _fromHeadersObjectLossy(headers) {
	    const headersArray = Object.entries(headers).map(([name, value]) => ({
	      name,
	      value
	    })).filter((header) => header.value !== void 0);
	    return new RawHeaders(headersArray);
	  }
	  get(name) {
	    const values = this.getAll(name);
	    if (!values || !values.length)
	      return null;
	    return values.join(name.toLowerCase() === "set-cookie" ? "\n" : ", ");
	  }
	  getAll(name) {
	    return [...this._headersMap.get(name.toLowerCase())];
	  }
	  headers() {
	    const result = {};
	    for (const name of this._headersMap.keys())
	      result[name] = this.get(name);
	    return result;
	  }
	  headersArray() {
	    return this._headersArray;
	  }
	}
	return network;
}

var types;
var hasRequiredTypes;

function requireTypes () {
	if (hasRequiredTypes) return types;
	hasRequiredTypes = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var types_exports = {};
	__export(types_exports, {
	  kLifecycleEvents: () => kLifecycleEvents
	});
	types = __toCommonJS(types_exports);
	const kLifecycleEvents = /* @__PURE__ */ new Set(["load", "domcontentloaded", "networkidle", "commit"]);
	return types;
}

var frame;
var hasRequiredFrame;

function requireFrame () {
	if (hasRequiredFrame) return frame;
	hasRequiredFrame = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var frame_exports = {};
	__export(frame_exports, {
	  Frame: () => Frame,
	  verifyLoadState: () => verifyLoadState
	});
	frame = __toCommonJS(frame_exports);
	var import_eventEmitter = requireEventEmitter();
	var import_channelOwner = requireChannelOwner();
	var import_clientHelper = requireClientHelper();
	var import_elementHandle = requireElementHandle();
	var import_events = requireEvents();
	var import_jsHandle = requireJsHandle();
	var import_locator = requireLocator();
	var network = __toESM(requireNetwork());
	var import_types = requireTypes();
	var import_waiter = requireWaiter();
	var import_assert = requireAssert$1();
	var import_locatorUtils = requireLocatorUtils();
	var import_urlMatch = requireUrlMatch();
	class Frame extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._parentFrame = null;
	    this._url = "";
	    this._name = "";
	    this._detached = false;
	    this._childFrames = /* @__PURE__ */ new Set();
	    this._eventEmitter = new import_eventEmitter.EventEmitter(parent._platform);
	    this._eventEmitter.setMaxListeners(0);
	    this._parentFrame = Frame.fromNullable(initializer.parentFrame);
	    if (this._parentFrame)
	      this._parentFrame._childFrames.add(this);
	    this._name = initializer.name;
	    this._url = initializer.url;
	    this._loadStates = new Set(initializer.loadStates);
	    this._channel.on("loadstate", (event) => {
	      if (event.add) {
	        this._loadStates.add(event.add);
	        this._eventEmitter.emit("loadstate", event.add);
	      }
	      if (event.remove)
	        this._loadStates.delete(event.remove);
	      if (!this._parentFrame && event.add === "load" && this._page)
	        this._page.emit(import_events.Events.Page.Load, this._page);
	      if (!this._parentFrame && event.add === "domcontentloaded" && this._page)
	        this._page.emit(import_events.Events.Page.DOMContentLoaded, this._page);
	    });
	    this._channel.on("navigated", (event) => {
	      this._url = event.url;
	      this._name = event.name;
	      this._eventEmitter.emit("navigated", event);
	      if (!event.error && this._page)
	        this._page.emit(import_events.Events.Page.FrameNavigated, this);
	    });
	  }
	  static from(frame) {
	    return frame._object;
	  }
	  static fromNullable(frame) {
	    return frame ? Frame.from(frame) : null;
	  }
	  page() {
	    return this._page;
	  }
	  async goto(url, options = {}) {
	    const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
	    return network.Response.fromNullable((await this._channel.goto({ url, ...options, waitUntil })).response);
	  }
	  _setupNavigationWaiter(options) {
	    const waiter = new import_waiter.Waiter(this._page, "");
	    if (this._page.isClosed())
	      waiter.rejectImmediately(this._page._closeErrorWithReason());
	    waiter.rejectOnEvent(this._page, import_events.Events.Page.Close, () => this._page._closeErrorWithReason());
	    waiter.rejectOnEvent(this._page, import_events.Events.Page.Crash, new Error("Navigation failed because page crashed!"));
	    waiter.rejectOnEvent(this._page, import_events.Events.Page.FrameDetached, new Error("Navigating frame was detached!"), (frame) => frame === this);
	    const timeout = this._page._timeoutSettings.navigationTimeout(options);
	    waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded.`);
	    return waiter;
	  }
	  async waitForNavigation(options = {}) {
	    return await this._page._wrapApiCall(async () => {
	      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
	      const waiter = this._setupNavigationWaiter(options);
	      const toUrl = typeof options.url === "string" ? ` to "${options.url}"` : "";
	      waiter.log(`waiting for navigation${toUrl} until "${waitUntil}"`);
	      const navigatedEvent = await waiter.waitForEvent(this._eventEmitter, "navigated", (event) => {
	        if (event.error)
	          return true;
	        waiter.log(`  navigated to "${event.url}"`);
	        return (0, import_urlMatch.urlMatches)(this._page?.context()._options.baseURL, event.url, options.url);
	      });
	      if (navigatedEvent.error) {
	        const e = new Error(navigatedEvent.error);
	        e.stack = "";
	        await waiter.waitForPromise(Promise.reject(e));
	      }
	      if (!this._loadStates.has(waitUntil)) {
	        await waiter.waitForEvent(this._eventEmitter, "loadstate", (s) => {
	          waiter.log(`  "${s}" event fired`);
	          return s === waitUntil;
	        });
	      }
	      const request = navigatedEvent.newDocument ? network.Request.fromNullable(navigatedEvent.newDocument.request) : null;
	      const response = request ? await waiter.waitForPromise(request._finalRequest()._internalResponse()) : null;
	      waiter.dispose();
	      return response;
	    });
	  }
	  async waitForLoadState(state = "load", options = {}) {
	    state = verifyLoadState("state", state);
	    return await this._page._wrapApiCall(async () => {
	      const waiter = this._setupNavigationWaiter(options);
	      if (this._loadStates.has(state)) {
	        waiter.log(`  not waiting, "${state}" event already fired`);
	      } else {
	        await waiter.waitForEvent(this._eventEmitter, "loadstate", (s) => {
	          waiter.log(`  "${s}" event fired`);
	          return s === state;
	        });
	      }
	      waiter.dispose();
	    });
	  }
	  async waitForURL(url, options = {}) {
	    if ((0, import_urlMatch.urlMatches)(this._page?.context()._options.baseURL, this.url(), url))
	      return await this.waitForLoadState(options.waitUntil, options);
	    await this.waitForNavigation({ url, ...options });
	  }
	  async frameElement() {
	    return import_elementHandle.ElementHandle.from((await this._channel.frameElement()).element);
	  }
	  async evaluateHandle(pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 2);
	    const result = await this._channel.evaluateExpressionHandle({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return import_jsHandle.JSHandle.from(result.handle);
	  }
	  async evaluate(pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 2);
	    const result = await this._channel.evaluateExpression({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return (0, import_jsHandle.parseResult)(result.value);
	  }
	  async _evaluateExposeUtilityScript(pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 2);
	    const result = await this._channel.evaluateExpression({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return (0, import_jsHandle.parseResult)(result.value);
	  }
	  async $(selector, options) {
	    const result = await this._channel.querySelector({ selector, ...options });
	    return import_elementHandle.ElementHandle.fromNullable(result.element);
	  }
	  async waitForSelector(selector, options = {}) {
	    if (options.visibility)
	      throw new Error("options.visibility is not supported, did you mean options.state?");
	    if (options.waitFor && options.waitFor !== "visible")
	      throw new Error("options.waitFor is not supported, did you mean options.state?");
	    const result = await this._channel.waitForSelector({ selector, ...options });
	    return import_elementHandle.ElementHandle.fromNullable(result.element);
	  }
	  async dispatchEvent(selector, type, eventInit, options = {}) {
	    await this._channel.dispatchEvent({ selector, type, eventInit: (0, import_jsHandle.serializeArgument)(eventInit), ...options });
	  }
	  async $eval(selector, pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 3);
	    const result = await this._channel.evalOnSelector({ selector, expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return (0, import_jsHandle.parseResult)(result.value);
	  }
	  async $$eval(selector, pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 3);
	    const result = await this._channel.evalOnSelectorAll({ selector, expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return (0, import_jsHandle.parseResult)(result.value);
	  }
	  async $$(selector) {
	    const result = await this._channel.querySelectorAll({ selector });
	    return result.elements.map((e) => import_elementHandle.ElementHandle.from(e));
	  }
	  async _queryCount(selector) {
	    return (await this._channel.queryCount({ selector })).value;
	  }
	  async content() {
	    return (await this._channel.content()).value;
	  }
	  async setContent(html, options = {}) {
	    const waitUntil = verifyLoadState("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
	    await this._channel.setContent({ html, ...options, waitUntil });
	  }
	  name() {
	    return this._name || "";
	  }
	  url() {
	    return this._url;
	  }
	  parentFrame() {
	    return this._parentFrame;
	  }
	  childFrames() {
	    return Array.from(this._childFrames);
	  }
	  isDetached() {
	    return this._detached;
	  }
	  async addScriptTag(options = {}) {
	    const copy = { ...options };
	    if (copy.path) {
	      copy.content = (await this._platform.fs().promises.readFile(copy.path)).toString();
	      copy.content = (0, import_clientHelper.addSourceUrlToScript)(copy.content, copy.path);
	    }
	    return import_elementHandle.ElementHandle.from((await this._channel.addScriptTag({ ...copy })).element);
	  }
	  async addStyleTag(options = {}) {
	    const copy = { ...options };
	    if (copy.path) {
	      copy.content = (await this._platform.fs().promises.readFile(copy.path)).toString();
	      copy.content += "/*# sourceURL=" + copy.path.replace(/\n/g, "") + "*/";
	    }
	    return import_elementHandle.ElementHandle.from((await this._channel.addStyleTag({ ...copy })).element);
	  }
	  async click(selector, options = {}) {
	    return await this._channel.click({ selector, ...options });
	  }
	  async dblclick(selector, options = {}) {
	    return await this._channel.dblclick({ selector, ...options });
	  }
	  async dragAndDrop(source, target, options = {}) {
	    return await this._channel.dragAndDrop({ source, target, ...options });
	  }
	  async tap(selector, options = {}) {
	    return await this._channel.tap({ selector, ...options });
	  }
	  async fill(selector, value, options = {}) {
	    return await this._channel.fill({ selector, value, ...options });
	  }
	  async _highlight(selector) {
	    return await this._channel.highlight({ selector });
	  }
	  locator(selector, options) {
	    return new import_locator.Locator(this, selector, options);
	  }
	  getByTestId(testId) {
	    return this.locator((0, import_locatorUtils.getByTestIdSelector)((0, import_locator.testIdAttributeName)(), testId));
	  }
	  getByAltText(text, options) {
	    return this.locator((0, import_locatorUtils.getByAltTextSelector)(text, options));
	  }
	  getByLabel(text, options) {
	    return this.locator((0, import_locatorUtils.getByLabelSelector)(text, options));
	  }
	  getByPlaceholder(text, options) {
	    return this.locator((0, import_locatorUtils.getByPlaceholderSelector)(text, options));
	  }
	  getByText(text, options) {
	    return this.locator((0, import_locatorUtils.getByTextSelector)(text, options));
	  }
	  getByTitle(text, options) {
	    return this.locator((0, import_locatorUtils.getByTitleSelector)(text, options));
	  }
	  getByRole(role, options = {}) {
	    return this.locator((0, import_locatorUtils.getByRoleSelector)(role, options));
	  }
	  frameLocator(selector) {
	    return new import_locator.FrameLocator(this, selector);
	  }
	  async focus(selector, options = {}) {
	    await this._channel.focus({ selector, ...options });
	  }
	  async textContent(selector, options = {}) {
	    const value = (await this._channel.textContent({ selector, ...options })).value;
	    return value === void 0 ? null : value;
	  }
	  async innerText(selector, options = {}) {
	    return (await this._channel.innerText({ selector, ...options })).value;
	  }
	  async innerHTML(selector, options = {}) {
	    return (await this._channel.innerHTML({ selector, ...options })).value;
	  }
	  async getAttribute(selector, name, options = {}) {
	    const value = (await this._channel.getAttribute({ selector, name, ...options })).value;
	    return value === void 0 ? null : value;
	  }
	  async inputValue(selector, options = {}) {
	    return (await this._channel.inputValue({ selector, ...options })).value;
	  }
	  async isChecked(selector, options = {}) {
	    return (await this._channel.isChecked({ selector, ...options })).value;
	  }
	  async isDisabled(selector, options = {}) {
	    return (await this._channel.isDisabled({ selector, ...options })).value;
	  }
	  async isEditable(selector, options = {}) {
	    return (await this._channel.isEditable({ selector, ...options })).value;
	  }
	  async isEnabled(selector, options = {}) {
	    return (await this._channel.isEnabled({ selector, ...options })).value;
	  }
	  async isHidden(selector, options = {}) {
	    return (await this._channel.isHidden({ selector, ...options })).value;
	  }
	  async isVisible(selector, options = {}) {
	    return (await this._channel.isVisible({ selector, ...options })).value;
	  }
	  async hover(selector, options = {}) {
	    await this._channel.hover({ selector, ...options });
	  }
	  async selectOption(selector, values, options = {}) {
	    return (await this._channel.selectOption({ selector, ...(0, import_elementHandle.convertSelectOptionValues)(values), ...options })).values;
	  }
	  async setInputFiles(selector, files, options = {}) {
	    const converted = await (0, import_elementHandle.convertInputFiles)(this._platform, files, this.page().context());
	    await this._channel.setInputFiles({ selector, ...converted, ...options });
	  }
	  async type(selector, text, options = {}) {
	    await this._channel.type({ selector, text, ...options });
	  }
	  async press(selector, key, options = {}) {
	    await this._channel.press({ selector, key, ...options });
	  }
	  async check(selector, options = {}) {
	    await this._channel.check({ selector, ...options });
	  }
	  async uncheck(selector, options = {}) {
	    await this._channel.uncheck({ selector, ...options });
	  }
	  async setChecked(selector, checked, options) {
	    if (checked)
	      await this.check(selector, options);
	    else
	      await this.uncheck(selector, options);
	  }
	  async waitForTimeout(timeout) {
	    await this._channel.waitForTimeout({ timeout });
	  }
	  async waitForFunction(pageFunction, arg, options = {}) {
	    if (typeof options.polling === "string")
	      (0, import_assert.assert)(options.polling === "raf", "Unknown polling option: " + options.polling);
	    const result = await this._channel.waitForFunction({
	      ...options,
	      pollingInterval: options.polling === "raf" ? void 0 : options.polling,
	      expression: String(pageFunction),
	      isFunction: typeof pageFunction === "function",
	      arg: (0, import_jsHandle.serializeArgument)(arg)
	    });
	    return import_jsHandle.JSHandle.from(result.handle);
	  }
	  async title() {
	    return (await this._channel.title()).value;
	  }
	}
	function verifyLoadState(name, waitUntil) {
	  if (waitUntil === "networkidle0")
	    waitUntil = "networkidle";
	  if (!import_types.kLifecycleEvents.has(waitUntil))
	    throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
	  return waitUntil;
	}
	return frame;
}

var writableStream;
var hasRequiredWritableStream;

function requireWritableStream () {
	if (hasRequiredWritableStream) return writableStream;
	hasRequiredWritableStream = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var writableStream_exports = {};
	__export(writableStream_exports, {
	  WritableStream: () => WritableStream
	});
	writableStream = __toCommonJS(writableStream_exports);
	var import_channelOwner = requireChannelOwner();
	class WritableStream extends import_channelOwner.ChannelOwner {
	  static from(Stream) {
	    return Stream._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	  }
	  stream() {
	    return this._platform.streamWritable(this._channel);
	  }
	}
	return writableStream;
}

var elementHandle;
var hasRequiredElementHandle;

function requireElementHandle () {
	if (hasRequiredElementHandle) return elementHandle;
	hasRequiredElementHandle = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var elementHandle_exports = {};
	__export(elementHandle_exports, {
	  ElementHandle: () => ElementHandle,
	  convertInputFiles: () => convertInputFiles,
	  convertSelectOptionValues: () => convertSelectOptionValues,
	  determineScreenshotType: () => determineScreenshotType
	});
	elementHandle = __toCommonJS(elementHandle_exports);
	var import_frame = requireFrame();
	var import_jsHandle = requireJsHandle();
	var import_assert = requireAssert$1();
	var import_fileUtils = requireFileUtils();
	var import_rtti = requireRtti();
	var import_writableStream = requireWritableStream();
	var import_mimeType = requireMimeType();
	class ElementHandle extends import_jsHandle.JSHandle {
	  static from(handle) {
	    return handle._object;
	  }
	  static fromNullable(handle) {
	    return handle ? ElementHandle.from(handle) : null;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._elementChannel = this._channel;
	  }
	  asElement() {
	    return this;
	  }
	  async ownerFrame() {
	    return import_frame.Frame.fromNullable((await this._elementChannel.ownerFrame()).frame);
	  }
	  async contentFrame() {
	    return import_frame.Frame.fromNullable((await this._elementChannel.contentFrame()).frame);
	  }
	  async _generateLocatorString() {
	    const value = (await this._elementChannel.generateLocatorString()).value;
	    return value === void 0 ? null : value;
	  }
	  async getAttribute(name) {
	    const value = (await this._elementChannel.getAttribute({ name })).value;
	    return value === void 0 ? null : value;
	  }
	  async inputValue() {
	    return (await this._elementChannel.inputValue()).value;
	  }
	  async textContent() {
	    const value = (await this._elementChannel.textContent()).value;
	    return value === void 0 ? null : value;
	  }
	  async innerText() {
	    return (await this._elementChannel.innerText()).value;
	  }
	  async innerHTML() {
	    return (await this._elementChannel.innerHTML()).value;
	  }
	  async isChecked() {
	    return (await this._elementChannel.isChecked()).value;
	  }
	  async isDisabled() {
	    return (await this._elementChannel.isDisabled()).value;
	  }
	  async isEditable() {
	    return (await this._elementChannel.isEditable()).value;
	  }
	  async isEnabled() {
	    return (await this._elementChannel.isEnabled()).value;
	  }
	  async isHidden() {
	    return (await this._elementChannel.isHidden()).value;
	  }
	  async isVisible() {
	    return (await this._elementChannel.isVisible()).value;
	  }
	  async dispatchEvent(type, eventInit = {}) {
	    await this._elementChannel.dispatchEvent({ type, eventInit: (0, import_jsHandle.serializeArgument)(eventInit) });
	  }
	  async scrollIntoViewIfNeeded(options = {}) {
	    await this._elementChannel.scrollIntoViewIfNeeded(options);
	  }
	  async hover(options = {}) {
	    await this._elementChannel.hover(options);
	  }
	  async click(options = {}) {
	    return await this._elementChannel.click(options);
	  }
	  async dblclick(options = {}) {
	    return await this._elementChannel.dblclick(options);
	  }
	  async tap(options = {}) {
	    return await this._elementChannel.tap(options);
	  }
	  async selectOption(values, options = {}) {
	    const result = await this._elementChannel.selectOption({ ...convertSelectOptionValues(values), ...options });
	    return result.values;
	  }
	  async fill(value, options = {}) {
	    return await this._elementChannel.fill({ value, ...options });
	  }
	  async selectText(options = {}) {
	    await this._elementChannel.selectText(options);
	  }
	  async setInputFiles(files, options = {}) {
	    const frame = await this.ownerFrame();
	    if (!frame)
	      throw new Error("Cannot set input files to detached element");
	    const converted = await convertInputFiles(this._platform, files, frame.page().context());
	    await this._elementChannel.setInputFiles({ ...converted, ...options });
	  }
	  async focus() {
	    await this._elementChannel.focus();
	  }
	  async type(text, options = {}) {
	    await this._elementChannel.type({ text, ...options });
	  }
	  async press(key, options = {}) {
	    await this._elementChannel.press({ key, ...options });
	  }
	  async check(options = {}) {
	    return await this._elementChannel.check(options);
	  }
	  async uncheck(options = {}) {
	    return await this._elementChannel.uncheck(options);
	  }
	  async setChecked(checked, options) {
	    if (checked)
	      await this.check(options);
	    else
	      await this.uncheck(options);
	  }
	  async boundingBox() {
	    const value = (await this._elementChannel.boundingBox()).value;
	    return value === void 0 ? null : value;
	  }
	  async screenshot(options = {}) {
	    const mask = options.mask;
	    const copy = { ...options, mask: void 0 };
	    if (!copy.type)
	      copy.type = determineScreenshotType(options);
	    if (mask) {
	      copy.mask = mask.map((locator) => ({
	        frame: locator._frame._channel,
	        selector: locator._selector
	      }));
	    }
	    const result = await this._elementChannel.screenshot(copy);
	    if (options.path) {
	      await (0, import_fileUtils.mkdirIfNeeded)(this._platform, options.path);
	      await this._platform.fs().promises.writeFile(options.path, result.binary);
	    }
	    return result.binary;
	  }
	  async $(selector) {
	    return ElementHandle.fromNullable((await this._elementChannel.querySelector({ selector })).element);
	  }
	  async $$(selector) {
	    const result = await this._elementChannel.querySelectorAll({ selector });
	    return result.elements.map((h) => ElementHandle.from(h));
	  }
	  async $eval(selector, pageFunction, arg) {
	    const result = await this._elementChannel.evalOnSelector({ selector, expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return (0, import_jsHandle.parseResult)(result.value);
	  }
	  async $$eval(selector, pageFunction, arg) {
	    const result = await this._elementChannel.evalOnSelectorAll({ selector, expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return (0, import_jsHandle.parseResult)(result.value);
	  }
	  async waitForElementState(state, options = {}) {
	    return await this._elementChannel.waitForElementState({ state, ...options });
	  }
	  async waitForSelector(selector, options = {}) {
	    const result = await this._elementChannel.waitForSelector({ selector, ...options });
	    return ElementHandle.fromNullable(result.element);
	  }
	}
	function convertSelectOptionValues(values) {
	  if (values === null)
	    return {};
	  if (!Array.isArray(values))
	    values = [values];
	  if (!values.length)
	    return {};
	  for (let i = 0; i < values.length; i++)
	    (0, import_assert.assert)(values[i] !== null, `options[${i}]: expected object, got null`);
	  if (values[0] instanceof ElementHandle)
	    return { elements: values.map((v) => v._elementChannel) };
	  if ((0, import_rtti.isString)(values[0]))
	    return { options: values.map((valueOrLabel) => ({ valueOrLabel })) };
	  return { options: values };
	}
	function filePayloadExceedsSizeLimit(payloads) {
	  return payloads.reduce((size, item) => size + (item.buffer ? item.buffer.byteLength : 0), 0) >= import_fileUtils.fileUploadSizeLimit;
	}
	async function resolvePathsAndDirectoryForInputFiles(platform, items) {
	  let localPaths;
	  let localDirectory;
	  for (const item of items) {
	    const stat = await platform.fs().promises.stat(item);
	    if (stat.isDirectory()) {
	      if (localDirectory)
	        throw new Error("Multiple directories are not supported");
	      localDirectory = platform.path().resolve(item);
	    } else {
	      localPaths ??= [];
	      localPaths.push(platform.path().resolve(item));
	    }
	  }
	  if (localPaths?.length && localDirectory)
	    throw new Error("File paths must be all files or a single directory");
	  return [localPaths, localDirectory];
	}
	async function convertInputFiles(platform, files, context) {
	  const items = Array.isArray(files) ? files.slice() : [files];
	  if (items.some((item) => typeof item === "string")) {
	    if (!items.every((item) => typeof item === "string"))
	      throw new Error("File paths cannot be mixed with buffers");
	    const [localPaths, localDirectory] = await resolvePathsAndDirectoryForInputFiles(platform, items);
	    if (context._connection.isRemote()) {
	      const files2 = localDirectory ? (await platform.fs().promises.readdir(localDirectory, { withFileTypes: true, recursive: true })).filter((f) => f.isFile()).map((f) => platform.path().join(f.path, f.name)) : localPaths;
	      const { writableStreams, rootDir } = await context._wrapApiCall(async () => context._channel.createTempFiles({
	        rootDirName: localDirectory ? platform.path().basename(localDirectory) : void 0,
	        items: await Promise.all(files2.map(async (file) => {
	          const lastModifiedMs = (await platform.fs().promises.stat(file)).mtimeMs;
	          return {
	            name: localDirectory ? platform.path().relative(localDirectory, file) : platform.path().basename(file),
	            lastModifiedMs
	          };
	        }))
	      }), true);
	      for (let i = 0; i < files2.length; i++) {
	        const writable = import_writableStream.WritableStream.from(writableStreams[i]);
	        await platform.streamFile(files2[i], writable.stream());
	      }
	      return {
	        directoryStream: rootDir,
	        streams: localDirectory ? void 0 : writableStreams
	      };
	    }
	    return {
	      localPaths,
	      localDirectory
	    };
	  }
	  const payloads = items;
	  if (filePayloadExceedsSizeLimit(payloads))
	    throw new Error("Cannot set buffer larger than 50Mb, please write it to a file and pass its path instead.");
	  return { payloads };
	}
	function determineScreenshotType(options) {
	  if (options.path) {
	    const mimeType = (0, import_mimeType.getMimeTypeForPath)(options.path);
	    if (mimeType === "image/png")
	      return "png";
	    else if (mimeType === "image/jpeg")
	      return "jpeg";
	    throw new Error(`path: unsupported mime type "${mimeType}"`);
	  }
	  return options.type;
	}
	return elementHandle;
}

var fileChooser;
var hasRequiredFileChooser;

function requireFileChooser () {
	if (hasRequiredFileChooser) return fileChooser;
	hasRequiredFileChooser = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var fileChooser_exports = {};
	__export(fileChooser_exports, {
	  FileChooser: () => FileChooser
	});
	fileChooser = __toCommonJS(fileChooser_exports);
	class FileChooser {
	  constructor(page, elementHandle, isMultiple) {
	    this._page = page;
	    this._elementHandle = elementHandle;
	    this._isMultiple = isMultiple;
	  }
	  element() {
	    return this._elementHandle;
	  }
	  isMultiple() {
	    return this._isMultiple;
	  }
	  page() {
	    return this._page;
	  }
	  async setFiles(files, options) {
	    return await this._elementHandle.setInputFiles(files, options);
	  }
	}
	return fileChooser;
}

var harRouter;
var hasRequiredHarRouter;

function requireHarRouter () {
	if (hasRequiredHarRouter) return harRouter;
	hasRequiredHarRouter = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var harRouter_exports = {};
	__export(harRouter_exports, {
	  HarRouter: () => HarRouter
	});
	harRouter = __toCommonJS(harRouter_exports);
	class HarRouter {
	  static async create(localUtils, file, notFoundAction, options) {
	    const { harId, error } = await localUtils.harOpen({ file });
	    if (error)
	      throw new Error(error);
	    return new HarRouter(localUtils, harId, notFoundAction, options);
	  }
	  constructor(localUtils, harId, notFoundAction, options) {
	    this._localUtils = localUtils;
	    this._harId = harId;
	    this._options = options;
	    this._notFoundAction = notFoundAction;
	  }
	  async _handle(route) {
	    const request = route.request();
	    const response = await this._localUtils.harLookup({
	      harId: this._harId,
	      url: request.url(),
	      method: request.method(),
	      headers: await request.headersArray(),
	      postData: request.postDataBuffer() || void 0,
	      isNavigationRequest: request.isNavigationRequest()
	    });
	    if (response.action === "redirect") {
	      route._platform.log("api", `HAR: ${route.request().url()} redirected to ${response.redirectURL}`);
	      await route._redirectNavigationRequest(response.redirectURL);
	      return;
	    }
	    if (response.action === "fulfill") {
	      if (response.status === -1)
	        return;
	      await route.fulfill({
	        status: response.status,
	        headers: Object.fromEntries(response.headers.map((h) => [h.name, h.value])),
	        body: response.body
	      });
	      return;
	    }
	    if (response.action === "error")
	      route._platform.log("api", "HAR: " + response.message);
	    if (this._notFoundAction === "abort") {
	      await route.abort();
	      return;
	    }
	    await route.fallback();
	  }
	  async addContextRoute(context) {
	    await context.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
	  }
	  async addPageRoute(page) {
	    await page.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
	  }
	  async [Symbol.asyncDispose]() {
	    await this.dispose();
	  }
	  dispose() {
	    this._localUtils.harClose({ harId: this._harId }).catch(() => {
	    });
	  }
	}
	return harRouter;
}

var input;
var hasRequiredInput;

function requireInput () {
	if (hasRequiredInput) return input;
	hasRequiredInput = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var input_exports = {};
	__export(input_exports, {
	  Keyboard: () => Keyboard,
	  Mouse: () => Mouse,
	  Touchscreen: () => Touchscreen
	});
	input = __toCommonJS(input_exports);
	class Keyboard {
	  constructor(page) {
	    this._page = page;
	  }
	  async down(key) {
	    await this._page._channel.keyboardDown({ key });
	  }
	  async up(key) {
	    await this._page._channel.keyboardUp({ key });
	  }
	  async insertText(text) {
	    await this._page._channel.keyboardInsertText({ text });
	  }
	  async type(text, options = {}) {
	    await this._page._channel.keyboardType({ text, ...options });
	  }
	  async press(key, options = {}) {
	    await this._page._channel.keyboardPress({ key, ...options });
	  }
	}
	class Mouse {
	  constructor(page) {
	    this._page = page;
	  }
	  async move(x, y, options = {}) {
	    await this._page._channel.mouseMove({ x, y, ...options });
	  }
	  async down(options = {}) {
	    await this._page._channel.mouseDown({ ...options });
	  }
	  async up(options = {}) {
	    await this._page._channel.mouseUp(options);
	  }
	  async click(x, y, options = {}) {
	    await this._page._channel.mouseClick({ x, y, ...options });
	  }
	  async dblclick(x, y, options = {}) {
	    await this.click(x, y, { ...options, clickCount: 2 });
	  }
	  async wheel(deltaX, deltaY) {
	    await this._page._channel.mouseWheel({ deltaX, deltaY });
	  }
	}
	class Touchscreen {
	  constructor(page) {
	    this._page = page;
	  }
	  async tap(x, y) {
	    await this._page._channel.touchscreenTap({ x, y });
	  }
	}
	return input;
}

var video;
var hasRequiredVideo;

function requireVideo () {
	if (hasRequiredVideo) return video;
	hasRequiredVideo = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var video_exports = {};
	__export(video_exports, {
	  Video: () => Video
	});
	video = __toCommonJS(video_exports);
	var import_manualPromise = requireManualPromise();
	class Video {
	  constructor(page, connection) {
	    this._artifact = null;
	    this._artifactReadyPromise = new import_manualPromise.ManualPromise();
	    this._isRemote = false;
	    this._isRemote = connection.isRemote();
	    this._artifact = page._closedOrCrashedScope.safeRace(this._artifactReadyPromise);
	  }
	  _artifactReady(artifact) {
	    this._artifactReadyPromise.resolve(artifact);
	  }
	  async path() {
	    if (this._isRemote)
	      throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
	    const artifact = await this._artifact;
	    if (!artifact)
	      throw new Error("Page did not produce any video frames");
	    return artifact._initializer.absolutePath;
	  }
	  async saveAs(path) {
	    const artifact = await this._artifact;
	    if (!artifact)
	      throw new Error("Page did not produce any video frames");
	    return await artifact.saveAs(path);
	  }
	  async delete() {
	    const artifact = await this._artifact;
	    if (artifact)
	      await artifact.delete();
	  }
	}
	return video;
}

var timeoutSettings;
var hasRequiredTimeoutSettings;

function requireTimeoutSettings () {
	if (hasRequiredTimeoutSettings) return timeoutSettings;
	hasRequiredTimeoutSettings = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var timeoutSettings_exports = {};
	__export(timeoutSettings_exports, {
	  DEFAULT_LAUNCH_TIMEOUT: () => DEFAULT_LAUNCH_TIMEOUT,
	  DEFAULT_TIMEOUT: () => DEFAULT_TIMEOUT,
	  TimeoutSettings: () => TimeoutSettings
	});
	timeoutSettings = __toCommonJS(timeoutSettings_exports);
	const DEFAULT_TIMEOUT = 3e4;
	const DEFAULT_LAUNCH_TIMEOUT = 3 * 60 * 1e3;
	class TimeoutSettings {
	  constructor(platform, parent) {
	    this._parent = parent;
	    this._platform = platform;
	  }
	  setDefaultTimeout(timeout) {
	    this._defaultTimeout = timeout;
	  }
	  setDefaultNavigationTimeout(timeout) {
	    this._defaultNavigationTimeout = timeout;
	  }
	  defaultNavigationTimeout() {
	    return this._defaultNavigationTimeout;
	  }
	  defaultTimeout() {
	    return this._defaultTimeout;
	  }
	  navigationTimeout(options) {
	    if (typeof options.timeout === "number")
	      return options.timeout;
	    if (this._defaultNavigationTimeout !== void 0)
	      return this._defaultNavigationTimeout;
	    if (this._platform.isDebugMode())
	      return 0;
	    if (this._defaultTimeout !== void 0)
	      return this._defaultTimeout;
	    if (this._parent)
	      return this._parent.navigationTimeout(options);
	    return DEFAULT_TIMEOUT;
	  }
	  timeout(options) {
	    if (typeof options.timeout === "number")
	      return options.timeout;
	    if (this._platform.isDebugMode())
	      return 0;
	    if (this._defaultTimeout !== void 0)
	      return this._defaultTimeout;
	    if (this._parent)
	      return this._parent.timeout(options);
	    return DEFAULT_TIMEOUT;
	  }
	}
	return timeoutSettings;
}

var page;
var hasRequiredPage;

function requirePage () {
	if (hasRequiredPage) return page;
	hasRequiredPage = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var page_exports = {};
	__export(page_exports, {
	  BindingCall: () => BindingCall,
	  Page: () => Page
	});
	page = __toCommonJS(page_exports);
	var import_accessibility = requireAccessibility();
	var import_artifact = requireArtifact();
	var import_channelOwner = requireChannelOwner();
	var import_clientHelper = requireClientHelper();
	var import_coverage = requireCoverage();
	var import_download = requireDownload();
	var import_elementHandle = requireElementHandle();
	var import_errors = requireErrors();
	var import_events = requireEvents();
	var import_fileChooser = requireFileChooser();
	var import_frame = requireFrame();
	var import_harRouter = requireHarRouter();
	var import_input = requireInput();
	var import_jsHandle = requireJsHandle();
	var import_network = requireNetwork();
	var import_video = requireVideo();
	var import_waiter = requireWaiter();
	var import_worker = requireWorker();
	var import_timeoutSettings = requireTimeoutSettings();
	var import_assert = requireAssert$1();
	var import_fileUtils = requireFileUtils();
	var import_headers = requireHeaders();
	var import_stringUtils = requireStringUtils();
	var import_urlMatch = requireUrlMatch();
	var import_manualPromise = requireManualPromise();
	var import_rtti = requireRtti();
	class Page extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._frames = /* @__PURE__ */ new Set();
	    this._workers = /* @__PURE__ */ new Set();
	    this._closed = false;
	    this._closedOrCrashedScope = new import_manualPromise.LongStandingScope();
	    this._routes = [];
	    this._webSocketRoutes = [];
	    this._bindings = /* @__PURE__ */ new Map();
	    this._video = null;
	    this._closeWasCalled = false;
	    this._harRouters = [];
	    this._locatorHandlers = /* @__PURE__ */ new Map();
	    this._browserContext = parent;
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings(this._platform, this._browserContext._timeoutSettings);
	    this.accessibility = new import_accessibility.Accessibility(this._channel);
	    this.keyboard = new import_input.Keyboard(this);
	    this.mouse = new import_input.Mouse(this);
	    this.request = this._browserContext.request;
	    this.touchscreen = new import_input.Touchscreen(this);
	    this.clock = this._browserContext.clock;
	    this._mainFrame = import_frame.Frame.from(initializer.mainFrame);
	    this._mainFrame._page = this;
	    this._frames.add(this._mainFrame);
	    this._viewportSize = initializer.viewportSize || null;
	    this._closed = initializer.isClosed;
	    this._opener = Page.fromNullable(initializer.opener);
	    this._channel.on("bindingCall", ({ binding }) => this._onBinding(BindingCall.from(binding)));
	    this._channel.on("close", () => this._onClose());
	    this._channel.on("crash", () => this._onCrash());
	    this._channel.on("download", ({ url, suggestedFilename, artifact }) => {
	      const artifactObject = import_artifact.Artifact.from(artifact);
	      this.emit(import_events.Events.Page.Download, new import_download.Download(this, url, suggestedFilename, artifactObject));
	    });
	    this._channel.on("fileChooser", ({ element, isMultiple }) => this.emit(import_events.Events.Page.FileChooser, new import_fileChooser.FileChooser(this, import_elementHandle.ElementHandle.from(element), isMultiple)));
	    this._channel.on("frameAttached", ({ frame }) => this._onFrameAttached(import_frame.Frame.from(frame)));
	    this._channel.on("frameDetached", ({ frame }) => this._onFrameDetached(import_frame.Frame.from(frame)));
	    this._channel.on("locatorHandlerTriggered", ({ uid }) => this._onLocatorHandlerTriggered(uid));
	    this._channel.on("route", ({ route }) => this._onRoute(import_network.Route.from(route)));
	    this._channel.on("webSocketRoute", ({ webSocketRoute }) => this._onWebSocketRoute(import_network.WebSocketRoute.from(webSocketRoute)));
	    this._channel.on("video", ({ artifact }) => {
	      const artifactObject = import_artifact.Artifact.from(artifact);
	      this._forceVideo()._artifactReady(artifactObject);
	    });
	    this._channel.on("webSocket", ({ webSocket }) => this.emit(import_events.Events.Page.WebSocket, import_network.WebSocket.from(webSocket)));
	    this._channel.on("worker", ({ worker }) => this._onWorker(import_worker.Worker.from(worker)));
	    this.coverage = new import_coverage.Coverage(this._channel);
	    this.once(import_events.Events.Page.Close, () => this._closedOrCrashedScope.close(this._closeErrorWithReason()));
	    this.once(import_events.Events.Page.Crash, () => this._closedOrCrashedScope.close(new import_errors.TargetClosedError()));
	    this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([
	      [import_events.Events.Page.Console, "console"],
	      [import_events.Events.Page.Dialog, "dialog"],
	      [import_events.Events.Page.Request, "request"],
	      [import_events.Events.Page.Response, "response"],
	      [import_events.Events.Page.RequestFinished, "requestFinished"],
	      [import_events.Events.Page.RequestFailed, "requestFailed"],
	      [import_events.Events.Page.FileChooser, "fileChooser"]
	    ]));
	  }
	  static from(page) {
	    return page._object;
	  }
	  static fromNullable(page) {
	    return page ? Page.from(page) : null;
	  }
	  _onFrameAttached(frame) {
	    frame._page = this;
	    this._frames.add(frame);
	    if (frame._parentFrame)
	      frame._parentFrame._childFrames.add(frame);
	    this.emit(import_events.Events.Page.FrameAttached, frame);
	  }
	  _onFrameDetached(frame) {
	    this._frames.delete(frame);
	    frame._detached = true;
	    if (frame._parentFrame)
	      frame._parentFrame._childFrames.delete(frame);
	    this.emit(import_events.Events.Page.FrameDetached, frame);
	  }
	  async _onRoute(route) {
	    route._context = this.context();
	    const routeHandlers = this._routes.slice();
	    for (const routeHandler of routeHandlers) {
	      if (this._closeWasCalled || this._browserContext._closeWasCalled)
	        return;
	      if (!routeHandler.matches(route.request().url()))
	        continue;
	      const index = this._routes.indexOf(routeHandler);
	      if (index === -1)
	        continue;
	      if (routeHandler.willExpire())
	        this._routes.splice(index, 1);
	      const handled = await routeHandler.handle(route);
	      if (!this._routes.length)
	        this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
	        });
	      if (handled)
	        return;
	    }
	    await this._browserContext._onRoute(route);
	  }
	  async _onWebSocketRoute(webSocketRoute) {
	    const routeHandler = this._webSocketRoutes.find((route) => route.matches(webSocketRoute.url()));
	    if (routeHandler)
	      await routeHandler.handle(webSocketRoute);
	    else
	      await this._browserContext._onWebSocketRoute(webSocketRoute);
	  }
	  async _onBinding(bindingCall) {
	    const func = this._bindings.get(bindingCall._initializer.name);
	    if (func) {
	      await bindingCall.call(func);
	      return;
	    }
	    await this._browserContext._onBinding(bindingCall);
	  }
	  _onWorker(worker) {
	    this._workers.add(worker);
	    worker._page = this;
	    this.emit(import_events.Events.Page.Worker, worker);
	  }
	  _onClose() {
	    this._closed = true;
	    this._browserContext._pages.delete(this);
	    this._browserContext._backgroundPages.delete(this);
	    this._disposeHarRouters();
	    this.emit(import_events.Events.Page.Close, this);
	  }
	  _onCrash() {
	    this.emit(import_events.Events.Page.Crash, this);
	  }
	  context() {
	    return this._browserContext;
	  }
	  async opener() {
	    if (!this._opener || this._opener.isClosed())
	      return null;
	    return this._opener;
	  }
	  mainFrame() {
	    return this._mainFrame;
	  }
	  frame(frameSelector) {
	    const name = (0, import_rtti.isString)(frameSelector) ? frameSelector : frameSelector.name;
	    const url = (0, import_rtti.isObject)(frameSelector) ? frameSelector.url : void 0;
	    (0, import_assert.assert)(name || url, "Either name or url matcher should be specified");
	    return this.frames().find((f) => {
	      if (name)
	        return f.name() === name;
	      return (0, import_urlMatch.urlMatches)(this._browserContext._options.baseURL, f.url(), url);
	    }) || null;
	  }
	  frames() {
	    return [...this._frames];
	  }
	  setDefaultNavigationTimeout(timeout) {
	    this._timeoutSettings.setDefaultNavigationTimeout(timeout);
	    this._wrapApiCall(async () => {
	      await this._channel.setDefaultNavigationTimeoutNoReply({ timeout });
	    }, true).catch(() => {
	    });
	  }
	  setDefaultTimeout(timeout) {
	    this._timeoutSettings.setDefaultTimeout(timeout);
	    this._wrapApiCall(async () => {
	      await this._channel.setDefaultTimeoutNoReply({ timeout });
	    }, true).catch(() => {
	    });
	  }
	  _forceVideo() {
	    if (!this._video)
	      this._video = new import_video.Video(this, this._connection);
	    return this._video;
	  }
	  video() {
	    if (!this._browserContext._options.recordVideo)
	      return null;
	    return this._forceVideo();
	  }
	  async $(selector, options) {
	    return await this._mainFrame.$(selector, options);
	  }
	  async waitForSelector(selector, options) {
	    return await this._mainFrame.waitForSelector(selector, options);
	  }
	  async dispatchEvent(selector, type, eventInit, options) {
	    return await this._mainFrame.dispatchEvent(selector, type, eventInit, options);
	  }
	  async evaluateHandle(pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 2);
	    return await this._mainFrame.evaluateHandle(pageFunction, arg);
	  }
	  async $eval(selector, pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 3);
	    return await this._mainFrame.$eval(selector, pageFunction, arg);
	  }
	  async $$eval(selector, pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 3);
	    return await this._mainFrame.$$eval(selector, pageFunction, arg);
	  }
	  async $$(selector) {
	    return await this._mainFrame.$$(selector);
	  }
	  async addScriptTag(options = {}) {
	    return await this._mainFrame.addScriptTag(options);
	  }
	  async addStyleTag(options = {}) {
	    return await this._mainFrame.addStyleTag(options);
	  }
	  async exposeFunction(name, callback) {
	    await this._channel.exposeBinding({ name });
	    const binding = (source, ...args) => callback(...args);
	    this._bindings.set(name, binding);
	  }
	  async exposeBinding(name, callback, options = {}) {
	    await this._channel.exposeBinding({ name, needsHandle: options.handle });
	    this._bindings.set(name, callback);
	  }
	  async setExtraHTTPHeaders(headers) {
	    (0, import_network.validateHeaders)(headers);
	    await this._channel.setExtraHTTPHeaders({ headers: (0, import_headers.headersObjectToArray)(headers) });
	  }
	  url() {
	    return this._mainFrame.url();
	  }
	  async content() {
	    return await this._mainFrame.content();
	  }
	  async setContent(html, options) {
	    return await this._mainFrame.setContent(html, options);
	  }
	  async goto(url, options) {
	    return await this._mainFrame.goto(url, options);
	  }
	  async reload(options = {}) {
	    const waitUntil = (0, import_frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
	    return import_network.Response.fromNullable((await this._channel.reload({ ...options, waitUntil })).response);
	  }
	  async addLocatorHandler(locator, handler, options = {}) {
	    if (locator._frame !== this._mainFrame)
	      throw new Error(`Locator must belong to the main frame of this page`);
	    if (options.times === 0)
	      return;
	    const { uid } = await this._channel.registerLocatorHandler({ selector: locator._selector, noWaitAfter: options.noWaitAfter });
	    this._locatorHandlers.set(uid, { locator, handler, times: options.times });
	  }
	  async _onLocatorHandlerTriggered(uid) {
	    let remove = false;
	    try {
	      const handler = this._locatorHandlers.get(uid);
	      if (handler && handler.times !== 0) {
	        if (handler.times !== void 0)
	          handler.times--;
	        await handler.handler(handler.locator);
	      }
	      remove = handler?.times === 0;
	    } finally {
	      if (remove)
	        this._locatorHandlers.delete(uid);
	      this._wrapApiCall(() => this._channel.resolveLocatorHandlerNoReply({ uid, remove }), true).catch(() => {
	      });
	    }
	  }
	  async removeLocatorHandler(locator) {
	    for (const [uid, data] of this._locatorHandlers) {
	      if (data.locator._equals(locator)) {
	        this._locatorHandlers.delete(uid);
	        await this._channel.unregisterLocatorHandler({ uid }).catch(() => {
	        });
	      }
	    }
	  }
	  async waitForLoadState(state, options) {
	    return await this._mainFrame.waitForLoadState(state, options);
	  }
	  async waitForNavigation(options) {
	    return await this._mainFrame.waitForNavigation(options);
	  }
	  async waitForURL(url, options) {
	    return await this._mainFrame.waitForURL(url, options);
	  }
	  async waitForRequest(urlOrPredicate, options = {}) {
	    const predicate = async (request) => {
	      if ((0, import_rtti.isString)(urlOrPredicate) || (0, import_rtti.isRegExp)(urlOrPredicate))
	        return (0, import_urlMatch.urlMatches)(this._browserContext._options.baseURL, request.url(), urlOrPredicate);
	      return await urlOrPredicate(request);
	    };
	    const trimmedUrl = trimUrl(urlOrPredicate);
	    const logLine = trimmedUrl ? `waiting for request ${trimmedUrl}` : void 0;
	    return await this._waitForEvent(import_events.Events.Page.Request, { predicate, timeout: options.timeout }, logLine);
	  }
	  async waitForResponse(urlOrPredicate, options = {}) {
	    const predicate = async (response) => {
	      if ((0, import_rtti.isString)(urlOrPredicate) || (0, import_rtti.isRegExp)(urlOrPredicate))
	        return (0, import_urlMatch.urlMatches)(this._browserContext._options.baseURL, response.url(), urlOrPredicate);
	      return await urlOrPredicate(response);
	    };
	    const trimmedUrl = trimUrl(urlOrPredicate);
	    const logLine = trimmedUrl ? `waiting for response ${trimmedUrl}` : void 0;
	    return await this._waitForEvent(import_events.Events.Page.Response, { predicate, timeout: options.timeout }, logLine);
	  }
	  async waitForEvent(event, optionsOrPredicate = {}) {
	    return await this._waitForEvent(event, optionsOrPredicate, `waiting for event "${event}"`);
	  }
	  _closeErrorWithReason() {
	    return new import_errors.TargetClosedError(this._closeReason || this._browserContext._effectiveCloseReason());
	  }
	  async _waitForEvent(event, optionsOrPredicate, logLine) {
	    return await this._wrapApiCall(async () => {
	      const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
	      const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
	      const waiter = import_waiter.Waiter.createForEvent(this, event);
	      if (logLine)
	        waiter.log(logLine);
	      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
	      if (event !== import_events.Events.Page.Crash)
	        waiter.rejectOnEvent(this, import_events.Events.Page.Crash, new Error("Page crashed"));
	      if (event !== import_events.Events.Page.Close)
	        waiter.rejectOnEvent(this, import_events.Events.Page.Close, () => this._closeErrorWithReason());
	      const result = await waiter.waitForEvent(this, event, predicate);
	      waiter.dispose();
	      return result;
	    });
	  }
	  async goBack(options = {}) {
	    const waitUntil = (0, import_frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
	    return import_network.Response.fromNullable((await this._channel.goBack({ ...options, waitUntil })).response);
	  }
	  async goForward(options = {}) {
	    const waitUntil = (0, import_frame.verifyLoadState)("waitUntil", options.waitUntil === void 0 ? "load" : options.waitUntil);
	    return import_network.Response.fromNullable((await this._channel.goForward({ ...options, waitUntil })).response);
	  }
	  async requestGC() {
	    await this._channel.requestGC();
	  }
	  async emulateMedia(options = {}) {
	    await this._channel.emulateMedia({
	      media: options.media === null ? "no-override" : options.media,
	      colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
	      reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
	      forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors,
	      contrast: options.contrast === null ? "no-override" : options.contrast
	    });
	  }
	  async setViewportSize(viewportSize) {
	    this._viewportSize = viewportSize;
	    await this._channel.setViewportSize({ viewportSize });
	  }
	  viewportSize() {
	    return this._viewportSize;
	  }
	  async evaluate(pageFunction, arg) {
	    (0, import_jsHandle.assertMaxArguments)(arguments.length, 2);
	    return await this._mainFrame.evaluate(pageFunction, arg);
	  }
	  async addInitScript(script, arg) {
	    const source = await (0, import_clientHelper.evaluationScript)(this._platform, script, arg);
	    await this._channel.addInitScript({ source });
	  }
	  async route(url, handler, options = {}) {
	    this._routes.unshift(new import_network.RouteHandler(this._platform, this._browserContext._options.baseURL, url, handler, options.times));
	    await this._updateInterceptionPatterns();
	  }
	  async routeFromHAR(har, options = {}) {
	    const localUtils = this._connection.localUtils();
	    if (!localUtils)
	      throw new Error("Route from har is not supported in thin clients");
	    if (options.update) {
	      await this._browserContext._recordIntoHAR(har, this, options);
	      return;
	    }
	    const harRouter = await import_harRouter.HarRouter.create(localUtils, har, options.notFound || "abort", { urlMatch: options.url });
	    this._harRouters.push(harRouter);
	    await harRouter.addPageRoute(this);
	  }
	  async routeWebSocket(url, handler) {
	    this._webSocketRoutes.unshift(new import_network.WebSocketRouteHandler(this._browserContext._options.baseURL, url, handler));
	    await this._updateWebSocketInterceptionPatterns();
	  }
	  _disposeHarRouters() {
	    this._harRouters.forEach((router) => router.dispose());
	    this._harRouters = [];
	  }
	  async unrouteAll(options) {
	    await this._unrouteInternal(this._routes, [], options?.behavior);
	    this._disposeHarRouters();
	  }
	  async unroute(url, handler) {
	    const removed = [];
	    const remaining = [];
	    for (const route of this._routes) {
	      if ((0, import_urlMatch.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler))
	        removed.push(route);
	      else
	        remaining.push(route);
	    }
	    await this._unrouteInternal(removed, remaining, "default");
	  }
	  async _unrouteInternal(removed, remaining, behavior) {
	    this._routes = remaining;
	    await this._updateInterceptionPatterns();
	    if (!behavior || behavior === "default")
	      return;
	    const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
	    await Promise.all(promises);
	  }
	  async _updateInterceptionPatterns() {
	    const patterns = import_network.RouteHandler.prepareInterceptionPatterns(this._routes);
	    await this._channel.setNetworkInterceptionPatterns({ patterns });
	  }
	  async _updateWebSocketInterceptionPatterns() {
	    const patterns = import_network.WebSocketRouteHandler.prepareInterceptionPatterns(this._webSocketRoutes);
	    await this._channel.setWebSocketInterceptionPatterns({ patterns });
	  }
	  async screenshot(options = {}) {
	    const mask = options.mask;
	    const copy = { ...options, mask: void 0 };
	    if (!copy.type)
	      copy.type = (0, import_elementHandle.determineScreenshotType)(options);
	    if (mask) {
	      copy.mask = mask.map((locator) => ({
	        frame: locator._frame._channel,
	        selector: locator._selector
	      }));
	    }
	    const result = await this._channel.screenshot(copy);
	    if (options.path) {
	      await (0, import_fileUtils.mkdirIfNeeded)(this._platform, options.path);
	      await this._platform.fs().promises.writeFile(options.path, result.binary);
	    }
	    return result.binary;
	  }
	  async _expectScreenshot(options) {
	    const mask = options?.mask ? options?.mask.map((locator2) => ({
	      frame: locator2._frame._channel,
	      selector: locator2._selector
	    })) : void 0;
	    const locator = options.locator ? {
	      frame: options.locator._frame._channel,
	      selector: options.locator._selector
	    } : void 0;
	    return await this._channel.expectScreenshot({
	      ...options,
	      isNot: !!options.isNot,
	      locator,
	      mask
	    });
	  }
	  async title() {
	    return await this._mainFrame.title();
	  }
	  async bringToFront() {
	    await this._channel.bringToFront();
	  }
	  async [Symbol.asyncDispose]() {
	    await this.close();
	  }
	  async close(options = {}) {
	    this._closeReason = options.reason;
	    this._closeWasCalled = true;
	    try {
	      if (this._ownedContext)
	        await this._ownedContext.close();
	      else
	        await this._channel.close(options);
	    } catch (e) {
	      if ((0, import_errors.isTargetClosedError)(e) && !options.runBeforeUnload)
	        return;
	      throw e;
	    }
	  }
	  isClosed() {
	    return this._closed;
	  }
	  async click(selector, options) {
	    return await this._mainFrame.click(selector, options);
	  }
	  async dragAndDrop(source, target, options) {
	    return await this._mainFrame.dragAndDrop(source, target, options);
	  }
	  async dblclick(selector, options) {
	    return await this._mainFrame.dblclick(selector, options);
	  }
	  async tap(selector, options) {
	    return await this._mainFrame.tap(selector, options);
	  }
	  async fill(selector, value, options) {
	    return await this._mainFrame.fill(selector, value, options);
	  }
	  locator(selector, options) {
	    return this.mainFrame().locator(selector, options);
	  }
	  getByTestId(testId) {
	    return this.mainFrame().getByTestId(testId);
	  }
	  getByAltText(text, options) {
	    return this.mainFrame().getByAltText(text, options);
	  }
	  getByLabel(text, options) {
	    return this.mainFrame().getByLabel(text, options);
	  }
	  getByPlaceholder(text, options) {
	    return this.mainFrame().getByPlaceholder(text, options);
	  }
	  getByText(text, options) {
	    return this.mainFrame().getByText(text, options);
	  }
	  getByTitle(text, options) {
	    return this.mainFrame().getByTitle(text, options);
	  }
	  getByRole(role, options = {}) {
	    return this.mainFrame().getByRole(role, options);
	  }
	  frameLocator(selector) {
	    return this.mainFrame().frameLocator(selector);
	  }
	  async focus(selector, options) {
	    return await this._mainFrame.focus(selector, options);
	  }
	  async textContent(selector, options) {
	    return await this._mainFrame.textContent(selector, options);
	  }
	  async innerText(selector, options) {
	    return await this._mainFrame.innerText(selector, options);
	  }
	  async innerHTML(selector, options) {
	    return await this._mainFrame.innerHTML(selector, options);
	  }
	  async getAttribute(selector, name, options) {
	    return await this._mainFrame.getAttribute(selector, name, options);
	  }
	  async inputValue(selector, options) {
	    return await this._mainFrame.inputValue(selector, options);
	  }
	  async isChecked(selector, options) {
	    return await this._mainFrame.isChecked(selector, options);
	  }
	  async isDisabled(selector, options) {
	    return await this._mainFrame.isDisabled(selector, options);
	  }
	  async isEditable(selector, options) {
	    return await this._mainFrame.isEditable(selector, options);
	  }
	  async isEnabled(selector, options) {
	    return await this._mainFrame.isEnabled(selector, options);
	  }
	  async isHidden(selector, options) {
	    return await this._mainFrame.isHidden(selector, options);
	  }
	  async isVisible(selector, options) {
	    return await this._mainFrame.isVisible(selector, options);
	  }
	  async hover(selector, options) {
	    return await this._mainFrame.hover(selector, options);
	  }
	  async selectOption(selector, values, options) {
	    return await this._mainFrame.selectOption(selector, values, options);
	  }
	  async setInputFiles(selector, files, options) {
	    return await this._mainFrame.setInputFiles(selector, files, options);
	  }
	  async type(selector, text, options) {
	    return await this._mainFrame.type(selector, text, options);
	  }
	  async press(selector, key, options) {
	    return await this._mainFrame.press(selector, key, options);
	  }
	  async check(selector, options) {
	    return await this._mainFrame.check(selector, options);
	  }
	  async uncheck(selector, options) {
	    return await this._mainFrame.uncheck(selector, options);
	  }
	  async setChecked(selector, checked, options) {
	    return await this._mainFrame.setChecked(selector, checked, options);
	  }
	  async waitForTimeout(timeout) {
	    return await this._mainFrame.waitForTimeout(timeout);
	  }
	  async waitForFunction(pageFunction, arg, options) {
	    return await this._mainFrame.waitForFunction(pageFunction, arg, options);
	  }
	  workers() {
	    return [...this._workers];
	  }
	  async pause(_options) {
	    if (this._platform.isJSDebuggerAttached())
	      return;
	    const defaultNavigationTimeout = this._browserContext._timeoutSettings.defaultNavigationTimeout();
	    const defaultTimeout = this._browserContext._timeoutSettings.defaultTimeout();
	    this._browserContext.setDefaultNavigationTimeout(0);
	    this._browserContext.setDefaultTimeout(0);
	    this._instrumentation?.onWillPause({ keepTestTimeout: !!_options?.__testHookKeepTestTimeout });
	    await this._closedOrCrashedScope.safeRace(this.context()._channel.pause());
	    this._browserContext.setDefaultNavigationTimeout(defaultNavigationTimeout);
	    this._browserContext.setDefaultTimeout(defaultTimeout);
	  }
	  async pdf(options = {}) {
	    const transportOptions = { ...options };
	    if (transportOptions.margin)
	      transportOptions.margin = { ...transportOptions.margin };
	    if (typeof options.width === "number")
	      transportOptions.width = options.width + "px";
	    if (typeof options.height === "number")
	      transportOptions.height = options.height + "px";
	    for (const margin of ["top", "right", "bottom", "left"]) {
	      const index = margin;
	      if (options.margin && typeof options.margin[index] === "number")
	        transportOptions.margin[index] = transportOptions.margin[index] + "px";
	    }
	    const result = await this._channel.pdf(transportOptions);
	    if (options.path) {
	      const platform = this._platform;
	      await platform.fs().promises.mkdir(platform.path().dirname(options.path), { recursive: true });
	      await platform.fs().promises.writeFile(options.path, result.pdf);
	    }
	    return result.pdf;
	  }
	}
	class BindingCall extends import_channelOwner.ChannelOwner {
	  static from(channel) {
	    return channel._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	  }
	  async call(func) {
	    try {
	      const frame = import_frame.Frame.from(this._initializer.frame);
	      const source = {
	        context: frame._page.context(),
	        page: frame._page,
	        frame
	      };
	      let result;
	      if (this._initializer.handle)
	        result = await func(source, import_jsHandle.JSHandle.from(this._initializer.handle));
	      else
	        result = await func(source, ...this._initializer.args.map(import_jsHandle.parseResult));
	      this._channel.resolve({ result: (0, import_jsHandle.serializeArgument)(result) }).catch(() => {
	      });
	    } catch (e) {
	      this._channel.reject({ error: (0, import_errors.serializeError)(e) }).catch(() => {
	      });
	    }
	  }
	}
	function trimUrl(param) {
	  if ((0, import_rtti.isRegExp)(param))
	    return `/${(0, import_stringUtils.trimStringWithEllipsis)(param.source, 50)}/${param.flags}`;
	  if ((0, import_rtti.isString)(param))
	    return `"${(0, import_stringUtils.trimStringWithEllipsis)(param, 50)}"`;
	}
	return page;
}

var consoleMessage;
var hasRequiredConsoleMessage;

function requireConsoleMessage () {
	if (hasRequiredConsoleMessage) return consoleMessage;
	hasRequiredConsoleMessage = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var consoleMessage_exports = {};
	__export(consoleMessage_exports, {
	  ConsoleMessage: () => ConsoleMessage
	});
	consoleMessage = __toCommonJS(consoleMessage_exports);
	var import_jsHandle = requireJsHandle();
	var import_page = requirePage();
	class ConsoleMessage {
	  constructor(platform, event) {
	    this._page = "page" in event && event.page ? import_page.Page.from(event.page) : null;
	    this._event = event;
	    if (platform.inspectCustom)
	      this[platform.inspectCustom] = () => this._inspect();
	  }
	  page() {
	    return this._page;
	  }
	  type() {
	    return this._event.type;
	  }
	  text() {
	    return this._event.text;
	  }
	  args() {
	    return this._event.args.map(import_jsHandle.JSHandle.from);
	  }
	  location() {
	    return this._event.location;
	  }
	  _inspect() {
	    return this.text();
	  }
	}
	return consoleMessage;
}

var dialog;
var hasRequiredDialog;

function requireDialog () {
	if (hasRequiredDialog) return dialog;
	hasRequiredDialog = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var dialog_exports = {};
	__export(dialog_exports, {
	  Dialog: () => Dialog
	});
	dialog = __toCommonJS(dialog_exports);
	var import_channelOwner = requireChannelOwner();
	var import_page = requirePage();
	class Dialog extends import_channelOwner.ChannelOwner {
	  static from(dialog) {
	    return dialog._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._page = import_page.Page.fromNullable(initializer.page);
	  }
	  page() {
	    return this._page;
	  }
	  type() {
	    return this._initializer.type;
	  }
	  message() {
	    return this._initializer.message;
	  }
	  defaultValue() {
	    return this._initializer.defaultValue;
	  }
	  async accept(promptText) {
	    await this._channel.accept({ promptText });
	  }
	  async dismiss() {
	    await this._channel.dismiss();
	  }
	}
	return dialog;
}

var webError;
var hasRequiredWebError;

function requireWebError () {
	if (hasRequiredWebError) return webError;
	hasRequiredWebError = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var webError_exports = {};
	__export(webError_exports, {
	  WebError: () => WebError
	});
	webError = __toCommonJS(webError_exports);
	class WebError {
	  constructor(page, error) {
	    this._page = page;
	    this._error = error;
	  }
	  page() {
	    return this._page;
	  }
	  error() {
	    return this._error;
	  }
	}
	return webError;
}

var browserContext;
var hasRequiredBrowserContext;

function requireBrowserContext () {
	if (hasRequiredBrowserContext) return browserContext;
	hasRequiredBrowserContext = 1;
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
	  // If the importer is in node compatibility mode or this is not an ESM
	  // file that has been converted to a CommonJS file using a Babel-
	  // compatible transform (i.e. "__esModule" has not been set), then set
	  // "default" to the CommonJS "module.exports" for node compatibility.
	  !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
	  mod
	));
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserContext_exports = {};
	__export(browserContext_exports, {
	  BrowserContext: () => BrowserContext,
	  prepareBrowserContextParams: () => prepareBrowserContextParams,
	  toClientCertificatesProtocol: () => toClientCertificatesProtocol
	});
	browserContext = __toCommonJS(browserContext_exports);
	var import_artifact = requireArtifact();
	var import_browser = requireBrowser();
	var import_cdpSession = requireCdpSession();
	var import_channelOwner = requireChannelOwner();
	var import_clientHelper = requireClientHelper();
	var import_clock = requireClock();
	var import_consoleMessage = requireConsoleMessage();
	var import_dialog = requireDialog();
	var import_errors = requireErrors();
	var import_events = requireEvents();
	var import_fetch = requireFetch();
	var import_frame = requireFrame();
	var import_harRouter = requireHarRouter();
	var network = __toESM(requireNetwork());
	var import_page = requirePage();
	var import_tracing = requireTracing();
	var import_waiter = requireWaiter();
	var import_webError = requireWebError();
	var import_worker = requireWorker();
	var import_timeoutSettings = requireTimeoutSettings();
	var import_fileUtils = requireFileUtils();
	var import_headers = requireHeaders();
	var import_urlMatch = requireUrlMatch();
	var import_rtti = requireRtti();
	var import_stackTrace = requireStackTrace();
	class BrowserContext extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._pages = /* @__PURE__ */ new Set();
	    this._routes = [];
	    this._webSocketRoutes = [];
	    this._browser = null;
	    this._bindings = /* @__PURE__ */ new Map();
	    this._options = {};
	    this._backgroundPages = /* @__PURE__ */ new Set();
	    this._serviceWorkers = /* @__PURE__ */ new Set();
	    this._harRecorders = /* @__PURE__ */ new Map();
	    this._closeWasCalled = false;
	    this._harRouters = [];
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings(this._platform);
	    if (parent instanceof import_browser.Browser)
	      this._browser = parent;
	    this._browser?._contexts.add(this);
	    this._isChromium = this._browser?._name === "chromium";
	    this.tracing = import_tracing.Tracing.from(initializer.tracing);
	    this.request = import_fetch.APIRequestContext.from(initializer.requestContext);
	    this.clock = new import_clock.Clock(this);
	    this._channel.on("bindingCall", ({ binding }) => this._onBinding(import_page.BindingCall.from(binding)));
	    this._channel.on("close", () => this._onClose());
	    this._channel.on("page", ({ page }) => this._onPage(import_page.Page.from(page)));
	    this._channel.on("route", ({ route }) => this._onRoute(network.Route.from(route)));
	    this._channel.on("webSocketRoute", ({ webSocketRoute }) => this._onWebSocketRoute(network.WebSocketRoute.from(webSocketRoute)));
	    this._channel.on("backgroundPage", ({ page }) => {
	      const backgroundPage = import_page.Page.from(page);
	      this._backgroundPages.add(backgroundPage);
	      this.emit(import_events.Events.BrowserContext.BackgroundPage, backgroundPage);
	    });
	    this._channel.on("serviceWorker", ({ worker }) => {
	      const serviceWorker = import_worker.Worker.from(worker);
	      serviceWorker._context = this;
	      this._serviceWorkers.add(serviceWorker);
	      this.emit(import_events.Events.BrowserContext.ServiceWorker, serviceWorker);
	    });
	    this._channel.on("console", (event) => {
	      const consoleMessage = new import_consoleMessage.ConsoleMessage(this._platform, event);
	      this.emit(import_events.Events.BrowserContext.Console, consoleMessage);
	      const page = consoleMessage.page();
	      if (page)
	        page.emit(import_events.Events.Page.Console, consoleMessage);
	    });
	    this._channel.on("pageError", ({ error, page }) => {
	      const pageObject = import_page.Page.from(page);
	      const parsedError = (0, import_errors.parseError)(error);
	      this.emit(import_events.Events.BrowserContext.WebError, new import_webError.WebError(pageObject, parsedError));
	      if (pageObject)
	        pageObject.emit(import_events.Events.Page.PageError, parsedError);
	    });
	    this._channel.on("dialog", ({ dialog }) => {
	      const dialogObject = import_dialog.Dialog.from(dialog);
	      let hasListeners = this.emit(import_events.Events.BrowserContext.Dialog, dialogObject);
	      const page = dialogObject.page();
	      if (page)
	        hasListeners = page.emit(import_events.Events.Page.Dialog, dialogObject) || hasListeners;
	      if (!hasListeners) {
	        if (dialogObject.type() === "beforeunload")
	          dialog.accept({}).catch(() => {
	          });
	        else
	          dialog.dismiss().catch(() => {
	          });
	      }
	    });
	    this._channel.on("request", ({ request, page }) => this._onRequest(network.Request.from(request), import_page.Page.fromNullable(page)));
	    this._channel.on("requestFailed", ({ request, failureText, responseEndTiming, page }) => this._onRequestFailed(network.Request.from(request), responseEndTiming, failureText, import_page.Page.fromNullable(page)));
	    this._channel.on("requestFinished", (params) => this._onRequestFinished(params));
	    this._channel.on("response", ({ response, page }) => this._onResponse(network.Response.from(response), import_page.Page.fromNullable(page)));
	    this._closedPromise = new Promise((f) => this.once(import_events.Events.BrowserContext.Close, f));
	    this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([
	      [import_events.Events.BrowserContext.Console, "console"],
	      [import_events.Events.BrowserContext.Dialog, "dialog"],
	      [import_events.Events.BrowserContext.Request, "request"],
	      [import_events.Events.BrowserContext.Response, "response"],
	      [import_events.Events.BrowserContext.RequestFinished, "requestFinished"],
	      [import_events.Events.BrowserContext.RequestFailed, "requestFailed"]
	    ]));
	  }
	  static from(context) {
	    return context._object;
	  }
	  static fromNullable(context) {
	    return context ? BrowserContext.from(context) : null;
	  }
	  _setOptions(contextOptions, browserOptions) {
	    this._options = contextOptions;
	    if (this._options.recordHar)
	      this._harRecorders.set("", { path: this._options.recordHar.path, content: this._options.recordHar.content });
	    this.tracing._tracesDir = browserOptions.tracesDir;
	  }
	  _onPage(page) {
	    this._pages.add(page);
	    this.emit(import_events.Events.BrowserContext.Page, page);
	    if (page._opener && !page._opener.isClosed())
	      page._opener.emit(import_events.Events.Page.Popup, page);
	  }
	  _onRequest(request, page) {
	    this.emit(import_events.Events.BrowserContext.Request, request);
	    if (page)
	      page.emit(import_events.Events.Page.Request, request);
	  }
	  _onResponse(response, page) {
	    this.emit(import_events.Events.BrowserContext.Response, response);
	    if (page)
	      page.emit(import_events.Events.Page.Response, response);
	  }
	  _onRequestFailed(request, responseEndTiming, failureText, page) {
	    request._failureText = failureText || null;
	    request._setResponseEndTiming(responseEndTiming);
	    this.emit(import_events.Events.BrowserContext.RequestFailed, request);
	    if (page)
	      page.emit(import_events.Events.Page.RequestFailed, request);
	  }
	  _onRequestFinished(params) {
	    const { responseEndTiming } = params;
	    const request = network.Request.from(params.request);
	    const response = network.Response.fromNullable(params.response);
	    const page = import_page.Page.fromNullable(params.page);
	    request._setResponseEndTiming(responseEndTiming);
	    this.emit(import_events.Events.BrowserContext.RequestFinished, request);
	    if (page)
	      page.emit(import_events.Events.Page.RequestFinished, request);
	    if (response)
	      response._finishedPromise.resolve(null);
	  }
	  async _onRoute(route) {
	    route._context = this;
	    const page = route.request()._safePage();
	    const routeHandlers = this._routes.slice();
	    for (const routeHandler of routeHandlers) {
	      if (page?._closeWasCalled || this._closeWasCalled)
	        return;
	      if (!routeHandler.matches(route.request().url()))
	        continue;
	      const index = this._routes.indexOf(routeHandler);
	      if (index === -1)
	        continue;
	      if (routeHandler.willExpire())
	        this._routes.splice(index, 1);
	      const handled = await routeHandler.handle(route);
	      if (!this._routes.length)
	        this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
	        });
	      if (handled)
	        return;
	    }
	    await route._innerContinue(
	      true
	      /* isFallback */
	    ).catch(() => {
	    });
	  }
	  async _onWebSocketRoute(webSocketRoute) {
	    const routeHandler = this._webSocketRoutes.find((route) => route.matches(webSocketRoute.url()));
	    if (routeHandler)
	      await routeHandler.handle(webSocketRoute);
	    else
	      webSocketRoute.connectToServer();
	  }
	  async _onBinding(bindingCall) {
	    const func = this._bindings.get(bindingCall._initializer.name);
	    if (!func)
	      return;
	    await bindingCall.call(func);
	  }
	  setDefaultNavigationTimeout(timeout) {
	    this._timeoutSettings.setDefaultNavigationTimeout(timeout);
	    this._wrapApiCall(async () => {
	      await this._channel.setDefaultNavigationTimeoutNoReply({ timeout });
	    }, true).catch(() => {
	    });
	  }
	  setDefaultTimeout(timeout) {
	    this._timeoutSettings.setDefaultTimeout(timeout);
	    this._wrapApiCall(async () => {
	      await this._channel.setDefaultTimeoutNoReply({ timeout });
	    }, true).catch(() => {
	    });
	  }
	  browser() {
	    return this._browser;
	  }
	  pages() {
	    return [...this._pages];
	  }
	  async newPage() {
	    if (this._ownerPage)
	      throw new Error("Please use browser.newContext()");
	    return import_page.Page.from((await this._channel.newPage()).page);
	  }
	  async cookies(urls) {
	    if (!urls)
	      urls = [];
	    if (urls && typeof urls === "string")
	      urls = [urls];
	    return (await this._channel.cookies({ urls })).cookies;
	  }
	  async addCookies(cookies) {
	    await this._channel.addCookies({ cookies });
	  }
	  async clearCookies(options = {}) {
	    await this._channel.clearCookies({
	      name: (0, import_rtti.isString)(options.name) ? options.name : void 0,
	      nameRegexSource: (0, import_rtti.isRegExp)(options.name) ? options.name.source : void 0,
	      nameRegexFlags: (0, import_rtti.isRegExp)(options.name) ? options.name.flags : void 0,
	      domain: (0, import_rtti.isString)(options.domain) ? options.domain : void 0,
	      domainRegexSource: (0, import_rtti.isRegExp)(options.domain) ? options.domain.source : void 0,
	      domainRegexFlags: (0, import_rtti.isRegExp)(options.domain) ? options.domain.flags : void 0,
	      path: (0, import_rtti.isString)(options.path) ? options.path : void 0,
	      pathRegexSource: (0, import_rtti.isRegExp)(options.path) ? options.path.source : void 0,
	      pathRegexFlags: (0, import_rtti.isRegExp)(options.path) ? options.path.flags : void 0
	    });
	  }
	  async grantPermissions(permissions, options) {
	    await this._channel.grantPermissions({ permissions, ...options });
	  }
	  async clearPermissions() {
	    await this._channel.clearPermissions();
	  }
	  async setGeolocation(geolocation) {
	    await this._channel.setGeolocation({ geolocation: geolocation || void 0 });
	  }
	  async setExtraHTTPHeaders(headers) {
	    network.validateHeaders(headers);
	    await this._channel.setExtraHTTPHeaders({ headers: (0, import_headers.headersObjectToArray)(headers) });
	  }
	  async setOffline(offline) {
	    await this._channel.setOffline({ offline });
	  }
	  async setHTTPCredentials(httpCredentials) {
	    await this._channel.setHTTPCredentials({ httpCredentials: httpCredentials || void 0 });
	  }
	  async addInitScript(script, arg) {
	    const source = await (0, import_clientHelper.evaluationScript)(this._platform, script, arg);
	    await this._channel.addInitScript({ source });
	  }
	  async exposeBinding(name, callback, options = {}) {
	    await this._channel.exposeBinding({ name, needsHandle: options.handle });
	    this._bindings.set(name, callback);
	  }
	  async exposeFunction(name, callback) {
	    await this._channel.exposeBinding({ name });
	    const binding = (source, ...args) => callback(...args);
	    this._bindings.set(name, binding);
	  }
	  async route(url, handler, options = {}) {
	    this._routes.unshift(new network.RouteHandler(this._platform, this._options.baseURL, url, handler, options.times));
	    await this._updateInterceptionPatterns();
	  }
	  async routeWebSocket(url, handler) {
	    this._webSocketRoutes.unshift(new network.WebSocketRouteHandler(this._options.baseURL, url, handler));
	    await this._updateWebSocketInterceptionPatterns();
	  }
	  async _recordIntoHAR(har, page, options = {}) {
	    const { harId } = await this._channel.harStart({
	      page: page?._channel,
	      options: prepareRecordHarOptions({
	        path: har,
	        content: options.updateContent ?? "attach",
	        mode: options.updateMode ?? "minimal",
	        urlFilter: options.url
	      })
	    });
	    this._harRecorders.set(harId, { path: har, content: options.updateContent ?? "attach" });
	  }
	  async routeFromHAR(har, options = {}) {
	    const localUtils = this._connection.localUtils();
	    if (!localUtils)
	      throw new Error("Route from har is not supported in thin clients");
	    if (options.update) {
	      await this._recordIntoHAR(har, null, options);
	      return;
	    }
	    const harRouter = await import_harRouter.HarRouter.create(localUtils, har, options.notFound || "abort", { urlMatch: options.url });
	    this._harRouters.push(harRouter);
	    await harRouter.addContextRoute(this);
	  }
	  _disposeHarRouters() {
	    this._harRouters.forEach((router) => router.dispose());
	    this._harRouters = [];
	  }
	  async unrouteAll(options) {
	    await this._unrouteInternal(this._routes, [], options?.behavior);
	    this._disposeHarRouters();
	  }
	  async unroute(url, handler) {
	    const removed = [];
	    const remaining = [];
	    for (const route of this._routes) {
	      if ((0, import_urlMatch.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler))
	        removed.push(route);
	      else
	        remaining.push(route);
	    }
	    await this._unrouteInternal(removed, remaining, "default");
	  }
	  async _unrouteInternal(removed, remaining, behavior) {
	    this._routes = remaining;
	    await this._updateInterceptionPatterns();
	    if (!behavior || behavior === "default")
	      return;
	    const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
	    await Promise.all(promises);
	  }
	  async _updateInterceptionPatterns() {
	    const patterns = network.RouteHandler.prepareInterceptionPatterns(this._routes);
	    await this._channel.setNetworkInterceptionPatterns({ patterns });
	  }
	  async _updateWebSocketInterceptionPatterns() {
	    const patterns = network.WebSocketRouteHandler.prepareInterceptionPatterns(this._webSocketRoutes);
	    await this._channel.setWebSocketInterceptionPatterns({ patterns });
	  }
	  _effectiveCloseReason() {
	    return this._closeReason || this._browser?._closeReason;
	  }
	  async waitForEvent(event, optionsOrPredicate = {}) {
	    return await this._wrapApiCall(async () => {
	      const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
	      const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
	      const waiter = import_waiter.Waiter.createForEvent(this, event);
	      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
	      if (event !== import_events.Events.BrowserContext.Close)
	        waiter.rejectOnEvent(this, import_events.Events.BrowserContext.Close, () => new import_errors.TargetClosedError(this._effectiveCloseReason()));
	      const result = await waiter.waitForEvent(this, event, predicate);
	      waiter.dispose();
	      return result;
	    });
	  }
	  async storageState(options = {}) {
	    const state = await this._channel.storageState({ indexedDB: options.indexedDB });
	    if (options.path) {
	      await (0, import_fileUtils.mkdirIfNeeded)(this._platform, options.path);
	      await this._platform.fs().promises.writeFile(options.path, JSON.stringify(state, void 0, 2), "utf8");
	    }
	    return state;
	  }
	  backgroundPages() {
	    return [...this._backgroundPages];
	  }
	  serviceWorkers() {
	    return [...this._serviceWorkers];
	  }
	  async newCDPSession(page) {
	    if (!(page instanceof import_page.Page) && !(page instanceof import_frame.Frame))
	      throw new Error("page: expected Page or Frame");
	    const result = await this._channel.newCDPSession(page instanceof import_page.Page ? { page: page._channel } : { frame: page._channel });
	    return import_cdpSession.CDPSession.from(result.session);
	  }
	  _onClose() {
	    if (this._browser)
	      this._browser._contexts.delete(this);
	    this._browserType?._contexts?.delete(this);
	    this._disposeHarRouters();
	    this.tracing._resetStackCounter();
	    this.emit(import_events.Events.BrowserContext.Close, this);
	  }
	  async [Symbol.asyncDispose]() {
	    await this.close();
	  }
	  async close(options = {}) {
	    if (this._closeWasCalled)
	      return;
	    this._closeReason = options.reason;
	    this._closeWasCalled = true;
	    await this._wrapApiCall(async () => {
	      await this.request.dispose(options);
	    }, true);
	    await this._wrapApiCall(async () => {
	      await this._browserType?._willCloseContext(this);
	      for (const [harId, harParams] of this._harRecorders) {
	        const har = await this._channel.harExport({ harId });
	        const artifact = import_artifact.Artifact.from(har.artifact);
	        const isCompressed = harParams.content === "attach" || harParams.path.endsWith(".zip");
	        const needCompressed = harParams.path.endsWith(".zip");
	        if (isCompressed && !needCompressed) {
	          const localUtils = this._connection.localUtils();
	          if (!localUtils)
	            throw new Error("Uncompressed har is not supported in thin clients");
	          await artifact.saveAs(harParams.path + ".tmp");
	          await localUtils.harUnzip({ zipFile: harParams.path + ".tmp", harFile: harParams.path });
	        } else {
	          await artifact.saveAs(harParams.path);
	        }
	        await artifact.delete();
	      }
	    }, true);
	    await this._channel.close(options);
	    await this._closedPromise;
	  }
	  async _enableRecorder(params) {
	    await this._channel.enableRecorder(params);
	  }
	}
	async function prepareStorageState(platform, options) {
	  if (typeof options.storageState !== "string")
	    return options.storageState;
	  try {
	    return JSON.parse(await platform.fs().promises.readFile(options.storageState, "utf8"));
	  } catch (e) {
	    (0, import_stackTrace.rewriteErrorMessage)(e, `Error reading storage state from ${options.storageState}:
` + e.message);
	    throw e;
	  }
	}
	function prepareRecordHarOptions(options) {
	  if (!options)
	    return;
	  return {
	    path: options.path,
	    content: options.content || (options.omitContent ? "omit" : void 0),
	    urlGlob: (0, import_rtti.isString)(options.urlFilter) ? options.urlFilter : void 0,
	    urlRegexSource: (0, import_rtti.isRegExp)(options.urlFilter) ? options.urlFilter.source : void 0,
	    urlRegexFlags: (0, import_rtti.isRegExp)(options.urlFilter) ? options.urlFilter.flags : void 0,
	    mode: options.mode
	  };
	}
	async function prepareBrowserContextParams(platform, options) {
	  if (options.videoSize && !options.videosPath)
	    throw new Error(`"videoSize" option requires "videosPath" to be specified`);
	  if (options.extraHTTPHeaders)
	    network.validateHeaders(options.extraHTTPHeaders);
	  const contextParams = {
	    ...options,
	    viewport: options.viewport === null ? void 0 : options.viewport,
	    noDefaultViewport: options.viewport === null,
	    extraHTTPHeaders: options.extraHTTPHeaders ? (0, import_headers.headersObjectToArray)(options.extraHTTPHeaders) : void 0,
	    storageState: await prepareStorageState(platform, options),
	    serviceWorkers: options.serviceWorkers,
	    recordHar: prepareRecordHarOptions(options.recordHar),
	    colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
	    reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
	    forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors,
	    contrast: options.contrast === null ? "no-override" : options.contrast,
	    acceptDownloads: toAcceptDownloadsProtocol(options.acceptDownloads),
	    clientCertificates: await toClientCertificatesProtocol(platform, options.clientCertificates)
	  };
	  if (!contextParams.recordVideo && options.videosPath) {
	    contextParams.recordVideo = {
	      dir: options.videosPath,
	      size: options.videoSize
	    };
	  }
	  if (contextParams.recordVideo && contextParams.recordVideo.dir)
	    contextParams.recordVideo.dir = platform.path().resolve(contextParams.recordVideo.dir);
	  return contextParams;
	}
	function toAcceptDownloadsProtocol(acceptDownloads) {
	  if (acceptDownloads === void 0)
	    return void 0;
	  if (acceptDownloads)
	    return "accept";
	  return "deny";
	}
	async function toClientCertificatesProtocol(platform, certs) {
	  if (!certs)
	    return void 0;
	  const bufferizeContent = async (value, path) => {
	    if (value)
	      return value;
	    if (path)
	      return await platform.fs().promises.readFile(path);
	  };
	  return await Promise.all(certs.map(async (cert) => ({
	    origin: cert.origin,
	    cert: await bufferizeContent(cert.cert, cert.certPath),
	    key: await bufferizeContent(cert.key, cert.keyPath),
	    pfx: await bufferizeContent(cert.pfx, cert.pfxPath),
	    passphrase: cert.passphrase
	  })));
	}
	return browserContext;
}

var webSocket;
var hasRequiredWebSocket;

function requireWebSocket () {
	if (hasRequiredWebSocket) return webSocket;
	hasRequiredWebSocket = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var webSocket_exports = {};
	__export(webSocket_exports, {
	  connectOverWebSocket: () => connectOverWebSocket
	});
	webSocket = __toCommonJS(webSocket_exports);
	var import_connection = requireConnection();
	async function connectOverWebSocket(parentConnection, params) {
	  const localUtils = parentConnection.localUtils();
	  const transport = localUtils ? new JsonPipeTransport(localUtils) : new WebSocketTransport();
	  const connectHeaders = await transport.connect(params);
	  const connection = new import_connection.Connection(parentConnection._platform, localUtils, parentConnection._instrumentation, connectHeaders);
	  connection.markAsRemote();
	  connection.on("close", () => transport.close());
	  let closeError;
	  const onTransportClosed = (reason) => {
	    connection.close(reason || closeError);
	  };
	  transport.onClose((reason) => onTransportClosed(reason));
	  connection.onmessage = (message) => transport.send(message).catch(() => onTransportClosed());
	  transport.onMessage((message) => {
	    try {
	      connection.dispatch(message);
	    } catch (e) {
	      closeError = String(e);
	      transport.close().catch(() => {
	      });
	    }
	  });
	  return connection;
	}
	class JsonPipeTransport {
	  constructor(owner) {
	    this._owner = owner;
	  }
	  async connect(params) {
	    const { pipe, headers: connectHeaders } = await this._owner._wrapApiCall(
	      async () => {
	        return await this._owner._channel.connect(params);
	      },
	      /* isInternal */
	      true
	    );
	    this._pipe = pipe;
	    return connectHeaders;
	  }
	  async send(message) {
	    await this._owner._wrapApiCall(
	      async () => {
	        await this._pipe.send({ message });
	      },
	      /* isInternal */
	      true
	    );
	  }
	  onMessage(callback) {
	    this._pipe.on("message", ({ message }) => callback(message));
	  }
	  onClose(callback) {
	    this._pipe.on("closed", ({ reason }) => callback(reason));
	  }
	  async close() {
	    await this._owner._wrapApiCall(
	      async () => {
	        await this._pipe.close().catch(() => {
	        });
	      },
	      /* isInternal */
	      true
	    );
	  }
	}
	class WebSocketTransport {
	  async connect(params) {
	    this._ws = new window.WebSocket(params.wsEndpoint);
	    return [];
	  }
	  async send(message) {
	    this._ws.send(JSON.stringify(message));
	  }
	  onMessage(callback) {
	    this._ws.addEventListener("message", (event) => callback(JSON.parse(event.data)));
	  }
	  onClose(callback) {
	    this._ws.addEventListener("close", () => callback());
	  }
	  async close() {
	    this._ws.close();
	  }
	}
	return webSocket;
}

var android;
var hasRequiredAndroid;

function requireAndroid () {
	if (hasRequiredAndroid) return android;
	hasRequiredAndroid = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var android_exports = {};
	__export(android_exports, {
	  Android: () => Android,
	  AndroidDevice: () => AndroidDevice,
	  AndroidInput: () => AndroidInput,
	  AndroidSocket: () => AndroidSocket,
	  AndroidWebView: () => AndroidWebView
	});
	android = __toCommonJS(android_exports);
	var import_eventEmitter = requireEventEmitter();
	var import_browserContext = requireBrowserContext();
	var import_channelOwner = requireChannelOwner();
	var import_errors = requireErrors();
	var import_events = requireEvents();
	var import_waiter = requireWaiter();
	var import_timeoutSettings = requireTimeoutSettings();
	var import_rtti = requireRtti();
	var import_time = requireTime$1();
	var import_timeoutRunner = requireTimeoutRunner();
	var import_webSocket = requireWebSocket();
	class Android extends import_channelOwner.ChannelOwner {
	  static from(android) {
	    return android._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings(this._platform);
	  }
	  setDefaultTimeout(timeout) {
	    this._timeoutSettings.setDefaultTimeout(timeout);
	    this._wrapApiCall(async () => {
	      await this._channel.setDefaultTimeoutNoReply({ timeout });
	    }, true).catch(() => {
	    });
	  }
	  async devices(options = {}) {
	    const { devices } = await this._channel.devices(options);
	    return devices.map((d) => AndroidDevice.from(d));
	  }
	  async launchServer(options = {}) {
	    if (!this._serverLauncher)
	      throw new Error("Launching server is not supported");
	    return await this._serverLauncher.launchServer(options);
	  }
	  async connect(wsEndpoint, options = {}) {
	    return await this._wrapApiCall(async () => {
	      const deadline = options.timeout ? (0, import_time.monotonicTime)() + options.timeout : 0;
	      const headers = { "x-playwright-browser": "android", ...options.headers };
	      const connectParams = { wsEndpoint, headers, slowMo: options.slowMo, timeout: options.timeout };
	      const connection = await (0, import_webSocket.connectOverWebSocket)(this._connection, connectParams);
	      let device;
	      connection.on("close", () => {
	        device?._didClose();
	      });
	      const result = await (0, import_timeoutRunner.raceAgainstDeadline)(async () => {
	        const playwright = await connection.initializePlaywright();
	        if (!playwright._initializer.preConnectedAndroidDevice) {
	          connection.close();
	          throw new Error("Malformed endpoint. Did you use Android.launchServer method?");
	        }
	        device = AndroidDevice.from(playwright._initializer.preConnectedAndroidDevice);
	        device._shouldCloseConnectionOnClose = true;
	        device.on(import_events.Events.AndroidDevice.Close, () => connection.close());
	        return device;
	      }, deadline);
	      if (!result.timedOut) {
	        return result.result;
	      } else {
	        connection.close();
	        throw new Error(`Timeout ${options.timeout}ms exceeded`);
	      }
	    });
	  }
	}
	class AndroidDevice extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._webViews = /* @__PURE__ */ new Map();
	    this._shouldCloseConnectionOnClose = false;
	    this.input = new AndroidInput(this);
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings(this._platform, parent._timeoutSettings);
	    this._channel.on("webViewAdded", ({ webView }) => this._onWebViewAdded(webView));
	    this._channel.on("webViewRemoved", ({ socketName }) => this._onWebViewRemoved(socketName));
	    this._channel.on("close", () => this._didClose());
	  }
	  static from(androidDevice) {
	    return androidDevice._object;
	  }
	  _onWebViewAdded(webView) {
	    const view = new AndroidWebView(this, webView);
	    this._webViews.set(webView.socketName, view);
	    this.emit(import_events.Events.AndroidDevice.WebView, view);
	  }
	  _onWebViewRemoved(socketName) {
	    const view = this._webViews.get(socketName);
	    this._webViews.delete(socketName);
	    if (view)
	      view.emit(import_events.Events.AndroidWebView.Close);
	  }
	  setDefaultTimeout(timeout) {
	    this._timeoutSettings.setDefaultTimeout(timeout);
	    this._wrapApiCall(async () => {
	      await this._channel.setDefaultTimeoutNoReply({ timeout });
	    }, true).catch(() => {
	    });
	  }
	  serial() {
	    return this._initializer.serial;
	  }
	  model() {
	    return this._initializer.model;
	  }
	  webViews() {
	    return [...this._webViews.values()];
	  }
	  async webView(selector, options) {
	    const predicate = (v) => {
	      if (selector.pkg)
	        return v.pkg() === selector.pkg;
	      if (selector.socketName)
	        return v._socketName() === selector.socketName;
	      return false;
	    };
	    const webView = [...this._webViews.values()].find(predicate);
	    if (webView)
	      return webView;
	    return await this.waitForEvent("webview", { ...options, predicate });
	  }
	  async wait(selector, options) {
	    await this._channel.wait({ selector: toSelectorChannel(selector), ...options });
	  }
	  async fill(selector, text, options) {
	    await this._channel.fill({ selector: toSelectorChannel(selector), text, ...options });
	  }
	  async press(selector, key, options) {
	    await this.tap(selector, options);
	    await this.input.press(key);
	  }
	  async tap(selector, options) {
	    await this._channel.tap({ selector: toSelectorChannel(selector), ...options });
	  }
	  async drag(selector, dest, options) {
	    await this._channel.drag({ selector: toSelectorChannel(selector), dest, ...options });
	  }
	  async fling(selector, direction, options) {
	    await this._channel.fling({ selector: toSelectorChannel(selector), direction, ...options });
	  }
	  async longTap(selector, options) {
	    await this._channel.longTap({ selector: toSelectorChannel(selector), ...options });
	  }
	  async pinchClose(selector, percent, options) {
	    await this._channel.pinchClose({ selector: toSelectorChannel(selector), percent, ...options });
	  }
	  async pinchOpen(selector, percent, options) {
	    await this._channel.pinchOpen({ selector: toSelectorChannel(selector), percent, ...options });
	  }
	  async scroll(selector, direction, percent, options) {
	    await this._channel.scroll({ selector: toSelectorChannel(selector), direction, percent, ...options });
	  }
	  async swipe(selector, direction, percent, options) {
	    await this._channel.swipe({ selector: toSelectorChannel(selector), direction, percent, ...options });
	  }
	  async info(selector) {
	    return (await this._channel.info({ selector: toSelectorChannel(selector) })).info;
	  }
	  async screenshot(options = {}) {
	    const { binary } = await this._channel.screenshot();
	    if (options.path)
	      await this._platform.fs().promises.writeFile(options.path, binary);
	    return binary;
	  }
	  async [Symbol.asyncDispose]() {
	    await this.close();
	  }
	  async close() {
	    try {
	      if (this._shouldCloseConnectionOnClose)
	        this._connection.close();
	      else
	        await this._channel.close();
	    } catch (e) {
	      if ((0, import_errors.isTargetClosedError)(e))
	        return;
	      throw e;
	    }
	  }
	  _didClose() {
	    this.emit(import_events.Events.AndroidDevice.Close, this);
	  }
	  async shell(command) {
	    const { result } = await this._channel.shell({ command });
	    return result;
	  }
	  async open(command) {
	    return AndroidSocket.from((await this._channel.open({ command })).socket);
	  }
	  async installApk(file, options) {
	    await this._channel.installApk({ file: await loadFile(this._platform, file), args: options && options.args });
	  }
	  async push(file, path, options) {
	    await this._channel.push({ file: await loadFile(this._platform, file), path, mode: options ? options.mode : void 0 });
	  }
	  async launchBrowser(options = {}) {
	    const contextOptions = await (0, import_browserContext.prepareBrowserContextParams)(this._platform, options);
	    const result = await this._channel.launchBrowser(contextOptions);
	    const context = import_browserContext.BrowserContext.from(result.context);
	    context._setOptions(contextOptions, {});
	    return context;
	  }
	  async waitForEvent(event, optionsOrPredicate = {}) {
	    return await this._wrapApiCall(async () => {
	      const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
	      const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
	      const waiter = import_waiter.Waiter.createForEvent(this, event);
	      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
	      if (event !== import_events.Events.AndroidDevice.Close)
	        waiter.rejectOnEvent(this, import_events.Events.AndroidDevice.Close, () => new import_errors.TargetClosedError());
	      const result = await waiter.waitForEvent(this, event, predicate);
	      waiter.dispose();
	      return result;
	    });
	  }
	}
	class AndroidSocket extends import_channelOwner.ChannelOwner {
	  static from(androidDevice) {
	    return androidDevice._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._channel.on("data", ({ data }) => this.emit(import_events.Events.AndroidSocket.Data, data));
	    this._channel.on("close", () => this.emit(import_events.Events.AndroidSocket.Close));
	  }
	  async write(data) {
	    await this._channel.write({ data });
	  }
	  async close() {
	    await this._channel.close();
	  }
	  async [Symbol.asyncDispose]() {
	    await this.close();
	  }
	}
	async function loadFile(platform, file) {
	  if ((0, import_rtti.isString)(file))
	    return await platform.fs().promises.readFile(file);
	  return file;
	}
	class AndroidInput {
	  constructor(device) {
	    this._device = device;
	  }
	  async type(text) {
	    await this._device._channel.inputType({ text });
	  }
	  async press(key) {
	    await this._device._channel.inputPress({ key });
	  }
	  async tap(point) {
	    await this._device._channel.inputTap({ point });
	  }
	  async swipe(from, segments, steps) {
	    await this._device._channel.inputSwipe({ segments, steps });
	  }
	  async drag(from, to, steps) {
	    await this._device._channel.inputDrag({ from, to, steps });
	  }
	}
	function toSelectorChannel(selector) {
	  const {
	    checkable,
	    checked,
	    clazz,
	    clickable,
	    depth,
	    desc,
	    enabled,
	    focusable,
	    focused,
	    hasChild,
	    hasDescendant,
	    longClickable,
	    pkg,
	    res,
	    scrollable,
	    selected,
	    text
	  } = selector;
	  const toRegex = (value) => {
	    if (value === void 0)
	      return void 0;
	    if ((0, import_rtti.isRegExp)(value))
	      return value.source;
	    return "^" + value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d") + "$";
	  };
	  return {
	    checkable,
	    checked,
	    clazz: toRegex(clazz),
	    pkg: toRegex(pkg),
	    desc: toRegex(desc),
	    res: toRegex(res),
	    text: toRegex(text),
	    clickable,
	    depth,
	    enabled,
	    focusable,
	    focused,
	    hasChild: hasChild ? { selector: toSelectorChannel(hasChild.selector) } : void 0,
	    hasDescendant: hasDescendant ? { selector: toSelectorChannel(hasDescendant.selector), maxDepth: hasDescendant.maxDepth } : void 0,
	    longClickable,
	    scrollable,
	    selected
	  };
	}
	class AndroidWebView extends import_eventEmitter.EventEmitter {
	  constructor(device, data) {
	    super(device._platform);
	    this._device = device;
	    this._data = data;
	  }
	  pid() {
	    return this._data.pid;
	  }
	  pkg() {
	    return this._data.pkg;
	  }
	  _socketName() {
	    return this._data.socketName;
	  }
	  async page() {
	    if (!this._pagePromise)
	      this._pagePromise = this._fetchPage();
	    return await this._pagePromise;
	  }
	  async _fetchPage() {
	    const { context } = await this._device._channel.connectToWebView({ socketName: this._data.socketName });
	    return import_browserContext.BrowserContext.from(context).pages()[0];
	  }
	}
	return android;
}

var browserType;
var hasRequiredBrowserType;

function requireBrowserType () {
	if (hasRequiredBrowserType) return browserType;
	hasRequiredBrowserType = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var browserType_exports = {};
	__export(browserType_exports, {
	  BrowserType: () => BrowserType
	});
	browserType = __toCommonJS(browserType_exports);
	var import_browser = requireBrowser();
	var import_browserContext = requireBrowserContext();
	var import_channelOwner = requireChannelOwner();
	var import_clientHelper = requireClientHelper();
	var import_events = requireEvents();
	var import_assert = requireAssert$1();
	var import_headers = requireHeaders();
	var import_time = requireTime$1();
	var import_timeoutRunner = requireTimeoutRunner();
	var import_webSocket = requireWebSocket();
	class BrowserType extends import_channelOwner.ChannelOwner {
	  constructor() {
	    super(...arguments);
	    this._contexts = /* @__PURE__ */ new Set();
	  }
	  static from(browserType) {
	    return browserType._object;
	  }
	  executablePath() {
	    if (!this._initializer.executablePath)
	      throw new Error("Browser is not supported on current platform");
	    return this._initializer.executablePath;
	  }
	  name() {
	    return this._initializer.name;
	  }
	  async launch(options = {}) {
	    (0, import_assert.assert)(!options.userDataDir, "userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead");
	    (0, import_assert.assert)(!options.port, "Cannot specify a port without launching as a server.");
	    const logger = options.logger || this._playwright._defaultLaunchOptions?.logger;
	    options = { ...this._playwright._defaultLaunchOptions, ...options };
	    const launchOptions = {
	      ...options,
	      ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
	      ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
	      env: options.env ? (0, import_clientHelper.envObjectToArray)(options.env) : void 0
	    };
	    return await this._wrapApiCall(async () => {
	      const browser = import_browser.Browser.from((await this._channel.launch(launchOptions)).browser);
	      this._didLaunchBrowser(browser, options, logger);
	      return browser;
	    });
	  }
	  async launchServer(options = {}) {
	    if (!this._serverLauncher)
	      throw new Error("Launching server is not supported");
	    options = { ...this._playwright._defaultLaunchOptions, ...options };
	    return await this._serverLauncher.launchServer(options);
	  }
	  async launchPersistentContext(userDataDir, options = {}) {
	    const logger = options.logger || this._playwright._defaultLaunchOptions?.logger;
	    (0, import_assert.assert)(!options.port, "Cannot specify a port without launching as a server.");
	    options = { ...this._playwright._defaultLaunchOptions, ...this._playwright._defaultContextOptions, ...options };
	    const contextParams = await (0, import_browserContext.prepareBrowserContextParams)(this._platform, options);
	    const persistentParams = {
	      ...contextParams,
	      ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : void 0,
	      ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
	      env: options.env ? (0, import_clientHelper.envObjectToArray)(options.env) : void 0,
	      channel: options.channel,
	      userDataDir: this._platform.path().isAbsolute(userDataDir) || !userDataDir ? userDataDir : this._platform.path().resolve(userDataDir)
	    };
	    return await this._wrapApiCall(async () => {
	      const result = await this._channel.launchPersistentContext(persistentParams);
	      const context = import_browserContext.BrowserContext.from(result.context);
	      await this._didCreateContext(context, contextParams, options, logger);
	      return context;
	    });
	  }
	  async connect(optionsOrWsEndpoint, options) {
	    if (typeof optionsOrWsEndpoint === "string")
	      return await this._connect({ ...options, wsEndpoint: optionsOrWsEndpoint });
	    (0, import_assert.assert)(optionsOrWsEndpoint.wsEndpoint, "options.wsEndpoint is required");
	    return await this._connect(optionsOrWsEndpoint);
	  }
	  async _connect(params) {
	    const logger = params.logger;
	    return await this._wrapApiCall(async () => {
	      const deadline = params.timeout ? (0, import_time.monotonicTime)() + params.timeout : 0;
	      const headers = { "x-playwright-browser": this.name(), ...params.headers };
	      const connectParams = {
	        wsEndpoint: params.wsEndpoint,
	        headers,
	        exposeNetwork: params.exposeNetwork ?? params._exposeNetwork,
	        slowMo: params.slowMo,
	        timeout: params.timeout
	      };
	      if (params.__testHookRedirectPortForwarding)
	        connectParams.socksProxyRedirectPortForTest = params.__testHookRedirectPortForwarding;
	      const connection = await (0, import_webSocket.connectOverWebSocket)(this._connection, connectParams);
	      let browser;
	      connection.on("close", () => {
	        for (const context of browser?.contexts() || []) {
	          for (const page of context.pages())
	            page._onClose();
	          context._onClose();
	        }
	        setTimeout(() => browser?._didClose(), 0);
	      });
	      const result = await (0, import_timeoutRunner.raceAgainstDeadline)(async () => {
	        if (params.__testHookBeforeCreateBrowser)
	          await params.__testHookBeforeCreateBrowser();
	        const playwright = await connection.initializePlaywright();
	        if (!playwright._initializer.preLaunchedBrowser) {
	          connection.close();
	          throw new Error("Malformed endpoint. Did you use BrowserType.launchServer method?");
	        }
	        playwright._setSelectors(this._playwright.selectors);
	        browser = import_browser.Browser.from(playwright._initializer.preLaunchedBrowser);
	        this._didLaunchBrowser(browser, {}, logger);
	        browser._shouldCloseConnectionOnClose = true;
	        browser.on(import_events.Events.Browser.Disconnected, () => connection.close());
	        return browser;
	      }, deadline);
	      if (!result.timedOut) {
	        return result.result;
	      } else {
	        connection.close();
	        throw new Error(`Timeout ${params.timeout}ms exceeded`);
	      }
	    });
	  }
	  async connectOverCDP(endpointURLOrOptions, options) {
	    if (typeof endpointURLOrOptions === "string")
	      return await this._connectOverCDP(endpointURLOrOptions, options);
	    const endpointURL = "endpointURL" in endpointURLOrOptions ? endpointURLOrOptions.endpointURL : endpointURLOrOptions.wsEndpoint;
	    (0, import_assert.assert)(endpointURL, "Cannot connect over CDP without wsEndpoint.");
	    return await this.connectOverCDP(endpointURL, endpointURLOrOptions);
	  }
	  async _connectOverCDP(endpointURL, params = {}) {
	    if (this.name() !== "chromium")
	      throw new Error("Connecting over CDP is only supported in Chromium.");
	    const headers = params.headers ? (0, import_headers.headersObjectToArray)(params.headers) : void 0;
	    const result = await this._channel.connectOverCDP({
	      endpointURL,
	      headers,
	      slowMo: params.slowMo,
	      timeout: params.timeout
	    });
	    const browser = import_browser.Browser.from(result.browser);
	    this._didLaunchBrowser(browser, {}, params.logger);
	    if (result.defaultContext)
	      await this._didCreateContext(import_browserContext.BrowserContext.from(result.defaultContext), {}, {}, params.logger);
	    return browser;
	  }
	  _didLaunchBrowser(browser, browserOptions, logger) {
	    browser._browserType = this;
	    browser._options = browserOptions;
	    browser._logger = logger;
	  }
	  async _didCreateContext(context, contextOptions, browserOptions, logger) {
	    context._logger = logger;
	    context._browserType = this;
	    this._contexts.add(context);
	    context._setOptions(contextOptions, browserOptions);
	    if (this._playwright._defaultContextTimeout !== void 0)
	      context.setDefaultTimeout(this._playwright._defaultContextTimeout);
	    if (this._playwright._defaultContextNavigationTimeout !== void 0)
	      context.setDefaultNavigationTimeout(this._playwright._defaultContextNavigationTimeout);
	    await this._instrumentation.runAfterCreateBrowserContext(context);
	  }
	  async _willCloseContext(context) {
	    this._contexts.delete(context);
	    await this._instrumentation.runBeforeCloseBrowserContext(context);
	  }
	}
	return browserType;
}

var clientInstrumentation;
var hasRequiredClientInstrumentation;

function requireClientInstrumentation () {
	if (hasRequiredClientInstrumentation) return clientInstrumentation;
	hasRequiredClientInstrumentation = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var clientInstrumentation_exports = {};
	__export(clientInstrumentation_exports, {
	  createInstrumentation: () => createInstrumentation
	});
	clientInstrumentation = __toCommonJS(clientInstrumentation_exports);
	function createInstrumentation() {
	  const listeners = [];
	  return new Proxy({}, {
	    get: (obj, prop) => {
	      if (typeof prop !== "string")
	        return obj[prop];
	      if (prop === "addListener")
	        return (listener) => listeners.push(listener);
	      if (prop === "removeListener")
	        return (listener) => listeners.splice(listeners.indexOf(listener), 1);
	      if (prop === "removeAllListeners")
	        return () => listeners.splice(0, listeners.length);
	      if (prop.startsWith("run")) {
	        return async (...params) => {
	          for (const listener of listeners)
	            await listener[prop]?.(...params);
	        };
	      }
	      if (prop.startsWith("on")) {
	        return (...params) => {
	          for (const listener of listeners)
	            listener[prop]?.(...params);
	        };
	      }
	      return obj[prop];
	    }
	  });
	}
	return clientInstrumentation;
}

var electron;
var hasRequiredElectron;

function requireElectron () {
	if (hasRequiredElectron) return electron;
	hasRequiredElectron = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var electron_exports = {};
	__export(electron_exports, {
	  Electron: () => Electron,
	  ElectronApplication: () => ElectronApplication
	});
	electron = __toCommonJS(electron_exports);
	var import_browserContext = requireBrowserContext();
	var import_channelOwner = requireChannelOwner();
	var import_clientHelper = requireClientHelper();
	var import_consoleMessage = requireConsoleMessage();
	var import_errors = requireErrors();
	var import_events = requireEvents();
	var import_jsHandle = requireJsHandle();
	var import_waiter = requireWaiter();
	var import_timeoutSettings = requireTimeoutSettings();
	class Electron extends import_channelOwner.ChannelOwner {
	  static from(electron) {
	    return electron._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	  }
	  async launch(options = {}) {
	    const params = {
	      ...await (0, import_browserContext.prepareBrowserContextParams)(this._platform, options),
	      env: (0, import_clientHelper.envObjectToArray)(options.env ? options.env : this._platform.env),
	      tracesDir: options.tracesDir
	    };
	    const app = ElectronApplication.from((await this._channel.launch(params)).electronApplication);
	    app._context._setOptions(params, options);
	    return app;
	  }
	}
	class ElectronApplication extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this._windows = /* @__PURE__ */ new Set();
	    this._timeoutSettings = new import_timeoutSettings.TimeoutSettings(this._platform);
	    this._context = import_browserContext.BrowserContext.from(initializer.context);
	    for (const page of this._context._pages)
	      this._onPage(page);
	    this._context.on(import_events.Events.BrowserContext.Page, (page) => this._onPage(page));
	    this._channel.on("close", () => {
	      this.emit(import_events.Events.ElectronApplication.Close);
	    });
	    this._channel.on("console", (event) => this.emit(import_events.Events.ElectronApplication.Console, new import_consoleMessage.ConsoleMessage(this._platform, event)));
	    this._setEventToSubscriptionMapping(/* @__PURE__ */ new Map([
	      [import_events.Events.ElectronApplication.Console, "console"]
	    ]));
	  }
	  static from(electronApplication) {
	    return electronApplication._object;
	  }
	  process() {
	    return this._toImpl().process();
	  }
	  _onPage(page) {
	    this._windows.add(page);
	    this.emit(import_events.Events.ElectronApplication.Window, page);
	    page.once(import_events.Events.Page.Close, () => this._windows.delete(page));
	  }
	  windows() {
	    return [...this._windows];
	  }
	  async firstWindow(options) {
	    if (this._windows.size)
	      return this._windows.values().next().value;
	    return await this.waitForEvent("window", options);
	  }
	  context() {
	    return this._context;
	  }
	  async [Symbol.asyncDispose]() {
	    await this.close();
	  }
	  async close() {
	    try {
	      await this._context.close();
	    } catch (e) {
	      if ((0, import_errors.isTargetClosedError)(e))
	        return;
	      throw e;
	    }
	  }
	  async waitForEvent(event, optionsOrPredicate = {}) {
	    return await this._wrapApiCall(async () => {
	      const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
	      const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
	      const waiter = import_waiter.Waiter.createForEvent(this, event);
	      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
	      if (event !== import_events.Events.ElectronApplication.Close)
	        waiter.rejectOnEvent(this, import_events.Events.ElectronApplication.Close, () => new import_errors.TargetClosedError());
	      const result = await waiter.waitForEvent(this, event, predicate);
	      waiter.dispose();
	      return result;
	    });
	  }
	  async browserWindow(page) {
	    const result = await this._channel.browserWindow({ page: page._channel });
	    return import_jsHandle.JSHandle.from(result.handle);
	  }
	  async evaluate(pageFunction, arg) {
	    const result = await this._channel.evaluateExpression({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return (0, import_jsHandle.parseResult)(result.value);
	  }
	  async evaluateHandle(pageFunction, arg) {
	    const result = await this._channel.evaluateExpressionHandle({ expression: String(pageFunction), isFunction: typeof pageFunction === "function", arg: (0, import_jsHandle.serializeArgument)(arg) });
	    return import_jsHandle.JSHandle.from(result.handle);
	  }
	}
	return electron;
}

var jsonPipe;
var hasRequiredJsonPipe;

function requireJsonPipe () {
	if (hasRequiredJsonPipe) return jsonPipe;
	hasRequiredJsonPipe = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var jsonPipe_exports = {};
	__export(jsonPipe_exports, {
	  JsonPipe: () => JsonPipe
	});
	jsonPipe = __toCommonJS(jsonPipe_exports);
	var import_channelOwner = requireChannelOwner();
	class JsonPipe extends import_channelOwner.ChannelOwner {
	  static from(jsonPipe) {
	    return jsonPipe._object;
	  }
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	  }
	  channel() {
	    return this._channel;
	  }
	}
	return jsonPipe;
}

var localUtils;
var hasRequiredLocalUtils;

function requireLocalUtils () {
	if (hasRequiredLocalUtils) return localUtils;
	hasRequiredLocalUtils = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var localUtils_exports = {};
	__export(localUtils_exports, {
	  LocalUtils: () => LocalUtils
	});
	localUtils = __toCommonJS(localUtils_exports);
	var import_channelOwner = requireChannelOwner();
	class LocalUtils extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this.markAsInternalType();
	    this.devices = {};
	    for (const { name, descriptor } of initializer.deviceDescriptors)
	      this.devices[name] = descriptor;
	  }
	  async zip(params) {
	    return await this._channel.zip(params);
	  }
	  async harOpen(params) {
	    return await this._channel.harOpen(params);
	  }
	  async harLookup(params) {
	    return await this._channel.harLookup(params);
	  }
	  async harClose(params) {
	    return await this._channel.harClose(params);
	  }
	  async harUnzip(params) {
	    return await this._channel.harUnzip(params);
	  }
	  async tracingStarted(params) {
	    return await this._channel.tracingStarted(params);
	  }
	  async traceDiscarded(params) {
	    return await this._channel.traceDiscarded(params);
	  }
	  async addStackToTracingNoReply(params) {
	    return await this._channel.addStackToTracingNoReply(params);
	  }
	}
	return localUtils;
}

var platform;
var hasRequiredPlatform;

function requirePlatform () {
	if (hasRequiredPlatform) return platform;
	hasRequiredPlatform = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var platform_exports = {};
	__export(platform_exports, {
	  emptyPlatform: () => emptyPlatform
	});
	platform = __toCommonJS(platform_exports);
	var import_colors = requireColors();
	const noopZone = {
	  push: () => noopZone,
	  pop: () => noopZone,
	  run: (func) => func(),
	  data: () => void 0
	};
	const emptyPlatform = {
	  name: "empty",
	  boxedStackPrefixes: () => [],
	  calculateSha1: async () => {
	    throw new Error("Not implemented");
	  },
	  colors: import_colors.webColors,
	  createGuid: () => {
	    throw new Error("Not implemented");
	  },
	  defaultMaxListeners: () => 10,
	  env: {},
	  fs: () => {
	    throw new Error("Not implemented");
	  },
	  inspectCustom: void 0,
	  isDebugMode: () => false,
	  isJSDebuggerAttached: () => false,
	  isLogEnabled(name) {
	    return false;
	  },
	  isUnderTest: () => false,
	  log(name, message) {
	  },
	  path: () => {
	    throw new Error("Function not implemented.");
	  },
	  pathSeparator: "/",
	  showInternalStackFrames: () => false,
	  streamFile(path, writable) {
	    throw new Error("Streams are not available");
	  },
	  streamReadable: (channel) => {
	    throw new Error("Streams are not available");
	  },
	  streamWritable: (channel) => {
	    throw new Error("Streams are not available");
	  },
	  zones: { empty: noopZone, current: () => noopZone }
	};
	return platform;
}

var selectors;
var hasRequiredSelectors;

function requireSelectors () {
	if (hasRequiredSelectors) return selectors;
	hasRequiredSelectors = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var selectors_exports = {};
	__export(selectors_exports, {
	  Selectors: () => Selectors,
	  SelectorsOwner: () => SelectorsOwner,
	  setPlatformForSelectors: () => setPlatformForSelectors
	});
	selectors = __toCommonJS(selectors_exports);
	var import_channelOwner = requireChannelOwner();
	var import_clientHelper = requireClientHelper();
	var import_locator = requireLocator();
	var import_platform = requirePlatform();
	let platform = import_platform.emptyPlatform;
	function setPlatformForSelectors(p) {
	  platform = p;
	}
	class Selectors {
	  constructor() {
	    this._channels = /* @__PURE__ */ new Set();
	    this._registrations = [];
	  }
	  async register(name, script, options = {}) {
	    const source = await (0, import_clientHelper.evaluationScript)(platform, script, void 0, false);
	    const params = { ...options, name, source };
	    for (const channel of this._channels)
	      await channel._channel.register(params);
	    this._registrations.push(params);
	  }
	  setTestIdAttribute(attributeName) {
	    (0, import_locator.setTestIdAttribute)(attributeName);
	    for (const channel of this._channels)
	      channel._channel.setTestIdAttributeName({ testIdAttributeName: attributeName }).catch(() => {
	      });
	  }
	  _addChannel(channel) {
	    this._channels.add(channel);
	    for (const params of this._registrations) {
	      channel._channel.register(params).catch(() => {
	      });
	      channel._channel.setTestIdAttributeName({ testIdAttributeName: (0, import_locator.testIdAttributeName)() }).catch(() => {
	      });
	    }
	  }
	  _removeChannel(channel) {
	    this._channels.delete(channel);
	  }
	}
	class SelectorsOwner extends import_channelOwner.ChannelOwner {
	  static from(browser) {
	    return browser._object;
	  }
	}
	return selectors;
}

var playwright$1;
var hasRequiredPlaywright;

function requirePlaywright () {
	if (hasRequiredPlaywright) return playwright$1;
	hasRequiredPlaywright = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var playwright_exports = {};
	__export(playwright_exports, {
	  Playwright: () => Playwright
	});
	playwright$1 = __toCommonJS(playwright_exports);
	var import_android = requireAndroid();
	var import_browser = requireBrowser();
	var import_browserType = requireBrowserType();
	var import_channelOwner = requireChannelOwner();
	var import_electron = requireElectron();
	var import_errors = requireErrors();
	var import_fetch = requireFetch();
	var import_selectors = requireSelectors();
	class Playwright extends import_channelOwner.ChannelOwner {
	  constructor(parent, type, guid, initializer) {
	    super(parent, type, guid, initializer);
	    this.request = new import_fetch.APIRequest(this);
	    this.chromium = import_browserType.BrowserType.from(initializer.chromium);
	    this.chromium._playwright = this;
	    this.firefox = import_browserType.BrowserType.from(initializer.firefox);
	    this.firefox._playwright = this;
	    this.webkit = import_browserType.BrowserType.from(initializer.webkit);
	    this.webkit._playwright = this;
	    this._android = import_android.Android.from(initializer.android);
	    this._electron = import_electron.Electron.from(initializer.electron);
	    this._bidiChromium = import_browserType.BrowserType.from(initializer.bidiChromium);
	    this._bidiChromium._playwright = this;
	    this._bidiFirefox = import_browserType.BrowserType.from(initializer.bidiFirefox);
	    this._bidiFirefox._playwright = this;
	    this.devices = this._connection.localUtils()?.devices ?? {};
	    this.selectors = new import_selectors.Selectors();
	    this.errors = { TimeoutError: import_errors.TimeoutError };
	    const selectorsOwner = import_selectors.SelectorsOwner.from(initializer.selectors);
	    this.selectors._addChannel(selectorsOwner);
	    this._connection.on("close", () => {
	      this.selectors._removeChannel(selectorsOwner);
	    });
	    commonjsGlobal._playwrightInstance = this;
	  }
	  _setSelectors(selectors) {
	    const selectorsOwner = import_selectors.SelectorsOwner.from(this._initializer.selectors);
	    this.selectors._removeChannel(selectorsOwner);
	    this.selectors = selectors;
	    this.selectors._addChannel(selectorsOwner);
	  }
	  static from(channel) {
	    return channel._object;
	  }
	  _browserTypes() {
	    return [this.chromium, this.firefox, this.webkit, this._bidiChromium, this._bidiFirefox];
	  }
	  _preLaunchedBrowser() {
	    const browser = import_browser.Browser.from(this._initializer.preLaunchedBrowser);
	    browser._browserType = this[browser._name];
	    return browser;
	  }
	  _allContexts() {
	    return this._browserTypes().flatMap((type) => [...type._contexts]);
	  }
	  _allPages() {
	    return this._allContexts().flatMap((context) => context.pages());
	  }
	}
	return playwright$1;
}

var connection;
var hasRequiredConnection;

function requireConnection () {
	if (hasRequiredConnection) return connection;
	hasRequiredConnection = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var connection_exports = {};
	__export(connection_exports, {
	  Connection: () => Connection
	});
	connection = __toCommonJS(connection_exports);
	var import_eventEmitter = requireEventEmitter();
	var import_android = requireAndroid();
	var import_artifact = requireArtifact();
	var import_browser = requireBrowser();
	var import_browserContext = requireBrowserContext();
	var import_browserType = requireBrowserType();
	var import_cdpSession = requireCdpSession();
	var import_channelOwner = requireChannelOwner();
	var import_clientInstrumentation = requireClientInstrumentation();
	var import_dialog = requireDialog();
	var import_electron = requireElectron();
	var import_elementHandle = requireElementHandle();
	var import_errors = requireErrors();
	var import_fetch = requireFetch();
	var import_frame = requireFrame();
	var import_jsHandle = requireJsHandle();
	var import_jsonPipe = requireJsonPipe();
	var import_localUtils = requireLocalUtils();
	var import_network = requireNetwork();
	var import_page = requirePage();
	var import_playwright = requirePlaywright();
	var import_selectors = requireSelectors();
	var import_stream = requireStream();
	var import_tracing = requireTracing();
	var import_worker = requireWorker();
	var import_writableStream = requireWritableStream();
	var import_validator = requireValidator();
	var import_stackTrace = requireStackTrace();
	class Root extends import_channelOwner.ChannelOwner {
	  constructor(connection) {
	    super(connection, "Root", "", {});
	  }
	  async initialize() {
	    return import_playwright.Playwright.from((await this._channel.initialize({
	      sdkLanguage: "javascript"
	    })).playwright);
	  }
	}
	class DummyChannelOwner extends import_channelOwner.ChannelOwner {
	}
	class Connection extends import_eventEmitter.EventEmitter {
	  constructor(platform, localUtils, instrumentation, headers = []) {
	    super(platform);
	    this._objects = /* @__PURE__ */ new Map();
	    this.onmessage = (message) => {
	    };
	    this._lastId = 0;
	    this._callbacks = /* @__PURE__ */ new Map();
	    this._isRemote = false;
	    this._rawBuffers = false;
	    this._tracingCount = 0;
	    this._instrumentation = instrumentation || (0, import_clientInstrumentation.createInstrumentation)();
	    this._localUtils = localUtils;
	    this._rootObject = new Root(this);
	    this.headers = headers;
	  }
	  markAsRemote() {
	    this._isRemote = true;
	  }
	  isRemote() {
	    return this._isRemote;
	  }
	  useRawBuffers() {
	    this._rawBuffers = true;
	  }
	  rawBuffers() {
	    return this._rawBuffers;
	  }
	  localUtils() {
	    return this._localUtils;
	  }
	  async initializePlaywright() {
	    return await this._rootObject.initialize();
	  }
	  getObjectWithKnownName(guid) {
	    return this._objects.get(guid);
	  }
	  setIsTracing(isTracing) {
	    if (isTracing)
	      this._tracingCount++;
	    else
	      this._tracingCount--;
	  }
	  async sendMessageToServer(object, method, params, apiName, frames, stepId) {
	    if (this._closedError)
	      throw this._closedError;
	    if (object._wasCollected)
	      throw new Error("The object has been collected to prevent unbounded heap growth.");
	    const guid = object._guid;
	    const type = object._type;
	    const id = ++this._lastId;
	    const message = { id, guid, method, params };
	    if (this._platform.isLogEnabled("channel")) {
	      this._platform.log("channel", "SEND> " + JSON.stringify(message));
	    }
	    const location = frames[0] ? { file: frames[0].file, line: frames[0].line, column: frames[0].column } : void 0;
	    const metadata = { apiName, location, internal: !apiName, stepId };
	    if (this._tracingCount && frames && type !== "LocalUtils")
	      this._localUtils?.addStackToTracingNoReply({ callData: { stack: frames, id } }).catch(() => {
	      });
	    this._platform.zones.empty.run(() => this.onmessage({ ...message, metadata }));
	    return await new Promise((resolve, reject) => this._callbacks.set(id, { resolve, reject, apiName, type, method }));
	  }
	  _validatorFromWireContext() {
	    return {
	      tChannelImpl: this._tChannelImplFromWire.bind(this),
	      binary: this._rawBuffers ? "buffer" : "fromBase64",
	      isUnderTest: () => this._platform.isUnderTest()
	    };
	  }
	  dispatch(message) {
	    if (this._closedError)
	      return;
	    const { id, guid, method, params, result, error, log } = message;
	    if (id) {
	      if (this._platform.isLogEnabled("channel"))
	        this._platform.log("channel", "<RECV " + JSON.stringify(message));
	      const callback = this._callbacks.get(id);
	      if (!callback)
	        throw new Error(`Cannot find command to respond: ${id}`);
	      this._callbacks.delete(id);
	      if (error && !result) {
	        const parsedError = (0, import_errors.parseError)(error);
	        (0, import_stackTrace.rewriteErrorMessage)(parsedError, parsedError.message + formatCallLog(this._platform, log));
	        callback.reject(parsedError);
	      } else {
	        const validator2 = (0, import_validator.findValidator)(callback.type, callback.method, "Result");
	        callback.resolve(validator2(result, "", this._validatorFromWireContext()));
	      }
	      return;
	    }
	    if (this._platform.isLogEnabled("channel"))
	      this._platform.log("channel", "<EVENT " + JSON.stringify(message));
	    if (method === "__create__") {
	      this._createRemoteObject(guid, params.type, params.guid, params.initializer);
	      return;
	    }
	    const object = this._objects.get(guid);
	    if (!object)
	      throw new Error(`Cannot find object to "${method}": ${guid}`);
	    if (method === "__adopt__") {
	      const child = this._objects.get(params.guid);
	      if (!child)
	        throw new Error(`Unknown new child: ${params.guid}`);
	      object._adopt(child);
	      return;
	    }
	    if (method === "__dispose__") {
	      object._dispose(params.reason);
	      return;
	    }
	    const validator = (0, import_validator.findValidator)(object._type, method, "Event");
	    object._channel.emit(method, validator(params, "", this._validatorFromWireContext()));
	  }
	  close(cause) {
	    if (this._closedError)
	      return;
	    this._closedError = new import_errors.TargetClosedError(cause);
	    for (const callback of this._callbacks.values())
	      callback.reject(this._closedError);
	    this._callbacks.clear();
	    this.emit("close");
	  }
	  _tChannelImplFromWire(names, arg, path, context) {
	    if (arg && typeof arg === "object" && typeof arg.guid === "string") {
	      const object = this._objects.get(arg.guid);
	      if (!object)
	        throw new Error(`Object with guid ${arg.guid} was not bound in the connection`);
	      if (names !== "*" && !names.includes(object._type))
	        throw new import_validator.ValidationError(`${path}: expected channel ${names.toString()}`);
	      return object._channel;
	    }
	    throw new import_validator.ValidationError(`${path}: expected channel ${names.toString()}`);
	  }
	  _createRemoteObject(parentGuid, type, guid, initializer) {
	    const parent = this._objects.get(parentGuid);
	    if (!parent)
	      throw new Error(`Cannot find parent object ${parentGuid} to create ${guid}`);
	    let result;
	    const validator = (0, import_validator.findValidator)(type, "", "Initializer");
	    initializer = validator(initializer, "", this._validatorFromWireContext());
	    switch (type) {
	      case "Android":
	        result = new import_android.Android(parent, type, guid, initializer);
	        break;
	      case "AndroidSocket":
	        result = new import_android.AndroidSocket(parent, type, guid, initializer);
	        break;
	      case "AndroidDevice":
	        result = new import_android.AndroidDevice(parent, type, guid, initializer);
	        break;
	      case "APIRequestContext":
	        result = new import_fetch.APIRequestContext(parent, type, guid, initializer);
	        break;
	      case "Artifact":
	        result = new import_artifact.Artifact(parent, type, guid, initializer);
	        break;
	      case "BindingCall":
	        result = new import_page.BindingCall(parent, type, guid, initializer);
	        break;
	      case "Browser":
	        result = new import_browser.Browser(parent, type, guid, initializer);
	        break;
	      case "BrowserContext":
	        result = new import_browserContext.BrowserContext(parent, type, guid, initializer);
	        break;
	      case "BrowserType":
	        result = new import_browserType.BrowserType(parent, type, guid, initializer);
	        break;
	      case "CDPSession":
	        result = new import_cdpSession.CDPSession(parent, type, guid, initializer);
	        break;
	      case "Dialog":
	        result = new import_dialog.Dialog(parent, type, guid, initializer);
	        break;
	      case "Electron":
	        result = new import_electron.Electron(parent, type, guid, initializer);
	        break;
	      case "ElectronApplication":
	        result = new import_electron.ElectronApplication(parent, type, guid, initializer);
	        break;
	      case "ElementHandle":
	        result = new import_elementHandle.ElementHandle(parent, type, guid, initializer);
	        break;
	      case "Frame":
	        result = new import_frame.Frame(parent, type, guid, initializer);
	        break;
	      case "JSHandle":
	        result = new import_jsHandle.JSHandle(parent, type, guid, initializer);
	        break;
	      case "JsonPipe":
	        result = new import_jsonPipe.JsonPipe(parent, type, guid, initializer);
	        break;
	      case "LocalUtils":
	        result = new import_localUtils.LocalUtils(parent, type, guid, initializer);
	        if (!this._localUtils)
	          this._localUtils = result;
	        break;
	      case "Page":
	        result = new import_page.Page(parent, type, guid, initializer);
	        break;
	      case "Playwright":
	        result = new import_playwright.Playwright(parent, type, guid, initializer);
	        break;
	      case "Request":
	        result = new import_network.Request(parent, type, guid, initializer);
	        break;
	      case "Response":
	        result = new import_network.Response(parent, type, guid, initializer);
	        break;
	      case "Route":
	        result = new import_network.Route(parent, type, guid, initializer);
	        break;
	      case "Stream":
	        result = new import_stream.Stream(parent, type, guid, initializer);
	        break;
	      case "Selectors":
	        result = new import_selectors.SelectorsOwner(parent, type, guid, initializer);
	        break;
	      case "SocksSupport":
	        result = new DummyChannelOwner(parent, type, guid, initializer);
	        break;
	      case "Tracing":
	        result = new import_tracing.Tracing(parent, type, guid, initializer);
	        break;
	      case "WebSocket":
	        result = new import_network.WebSocket(parent, type, guid, initializer);
	        break;
	      case "WebSocketRoute":
	        result = new import_network.WebSocketRoute(parent, type, guid, initializer);
	        break;
	      case "Worker":
	        result = new import_worker.Worker(parent, type, guid, initializer);
	        break;
	      case "WritableStream":
	        result = new import_writableStream.WritableStream(parent, type, guid, initializer);
	        break;
	      default:
	        throw new Error("Missing type " + type);
	    }
	    return result;
	  }
	}
	function formatCallLog(platform, log) {
	  if (!log || !log.some((l) => !!l))
	    return "";
	  return `
Call log:
${platform.colors.dim(log.join("\n"))}
`;
	}
	return connection;
}

var inProcessFactory;
var hasRequiredInProcessFactory;

function requireInProcessFactory () {
	if (hasRequiredInProcessFactory) return inProcessFactory;
	hasRequiredInProcessFactory = 1;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __export = (target, all) => {
	  for (var name in all)
	    __defProp(target, name, { get: all[name], enumerable: true });
	};
	var __copyProps = (to, from, except, desc) => {
	  if (from && typeof from === "object" || typeof from === "function") {
	    for (let key of __getOwnPropNames(from))
	      if (!__hasOwnProp.call(to, key) && key !== except)
	        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
	  }
	  return to;
	};
	var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
	var inProcessFactory_exports = {};
	__export(inProcessFactory_exports, {
	  createInProcessPlaywright: () => createInProcessPlaywright
	});
	inProcessFactory = __toCommonJS(inProcessFactory_exports);
	var import_androidServerImpl = requireAndroidServerImpl();
	var import_browserServerImpl = requireBrowserServerImpl();
	var import_server = requireServer();
	var import_nodePlatform = requireNodePlatform();
	var import_connection = requireConnection();
	var import_selectors = requireSelectors();
	function createInProcessPlaywright() {
	  const playwright = (0, import_server.createPlaywright)({ sdkLanguage: process.env.PW_LANG_NAME || "javascript" });
	  (0, import_selectors.setPlatformForSelectors)(import_nodePlatform.nodePlatform);
	  const clientConnection = new import_connection.Connection(import_nodePlatform.nodePlatform);
	  clientConnection.useRawBuffers();
	  const dispatcherConnection = new import_server.DispatcherConnection(
	    true
	    /* local */
	  );
	  dispatcherConnection.onmessage = (message) => clientConnection.dispatch(message);
	  clientConnection.onmessage = (message) => dispatcherConnection.dispatch(message);
	  const rootScope = new import_server.RootDispatcher(dispatcherConnection);
	  new import_server.PlaywrightDispatcher(rootScope, playwright);
	  const playwrightAPI = clientConnection.getObjectWithKnownName("Playwright");
	  playwrightAPI.chromium._serverLauncher = new import_browserServerImpl.BrowserServerLauncherImpl("chromium");
	  playwrightAPI.firefox._serverLauncher = new import_browserServerImpl.BrowserServerLauncherImpl("firefox");
	  playwrightAPI.webkit._serverLauncher = new import_browserServerImpl.BrowserServerLauncherImpl("webkit");
	  playwrightAPI._android._serverLauncher = new import_androidServerImpl.AndroidServerLauncherImpl();
	  playwrightAPI._bidiChromium._serverLauncher = new import_browserServerImpl.BrowserServerLauncherImpl("bidiChromium");
	  playwrightAPI._bidiFirefox._serverLauncher = new import_browserServerImpl.BrowserServerLauncherImpl("bidiFirefox");
	  dispatcherConnection.onmessage = (message) => setImmediate(() => clientConnection.dispatch(message));
	  clientConnection.onmessage = (message) => setImmediate(() => dispatcherConnection.dispatch(message));
	  clientConnection.toImpl = (x) => x ? dispatcherConnection._dispatchers.get(x._guid)._object : dispatcherConnection._dispatchers.get("");
	  playwrightAPI._toImpl = clientConnection.toImpl;
	  return playwrightAPI;
	}
	return inProcessFactory;
}

var inprocess;
var hasRequiredInprocess;

function requireInprocess () {
	if (hasRequiredInprocess) return inprocess;
	hasRequiredInprocess = 1;
	var import_inProcessFactory = requireInProcessFactory();
	inprocess = (0, import_inProcessFactory.createInProcessPlaywright)();
	return inprocess;
}

/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var playwrightCore;
var hasRequiredPlaywrightCore;

function requirePlaywrightCore () {
	if (hasRequiredPlaywrightCore) return playwrightCore;
	hasRequiredPlaywrightCore = 1;
	const minimumMajorNodeVersion = 14;
	const currentNodeVersion = process.versions.node;
	const semver = currentNodeVersion.split('.');
	const [major] = [+semver[0]];

	if (major < minimumMajorNodeVersion) {
	  console.error(
	      'You are running Node.js ' +
	      currentNodeVersion +
	      '.\n' +
	      `Playwright requires Node.js ${minimumMajorNodeVersion} or higher. \n` +
	      'Please update your version of Node.js.'
	  );
	  process.exit(1);
	}

	playwrightCore = requireInprocess();
	return playwrightCore;
}

var playwrightCoreExports = requirePlaywrightCore();
var playwright = /*@__PURE__*/getDefaultExportFromCjs(playwrightCoreExports);

/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


const chromium = playwright.chromium;
playwright.firefox;
playwright.webkit;
playwright.selectors;
playwright.devices;
playwright.errors;
playwright.request;
playwright._electron;
playwright._android;

function run_build_dom_tree() {
    /**
     * Get clickable elements on the page
     *
     * @param {*} doHighlightElements Is highlighted
     * @param {*} includeAttributes [attr_names...]
     * @returns { element_str, selector_map }
     */
    function get_clickable_elements(doHighlightElements = true, includeAttributes) {
        window.clickable_elements = {};
        let page_tree = build_dom_tree(doHighlightElements);
        let element_tree = parse_node(page_tree);
        let selector_map = create_selector_map(element_tree);
        let element_str = clickable_elements_to_string(element_tree, includeAttributes);
        return { element_str, selector_map };
    }
    function get_highlight_element(highlightIndex) {
        return window.clickable_elements[highlightIndex];
    }
    function remove_highlight() {
        let highlight = document.getElementById('playwright-highlight-container');
        if (highlight) {
            highlight.remove();
        }
    }
    function clickable_elements_to_string(element_tree, includeAttributes) {
        if (!includeAttributes) {
            includeAttributes = [
                'id',
                'title',
                'type',
                'name',
                'role',
                'class',
                // 'href',
                'tabindex',
                'aria-label',
                'placeholder',
                'value',
                'alt',
                'aria-expanded',
            ];
        }
        function get_all_text_till_next_clickable_element(element_node) {
            let text_parts = [];
            function collect_text(node) {
                if (node.tagName && node != element_node && node.highlightIndex != null) {
                    return;
                }
                if (!node.tagName && node.text) {
                    text_parts.push(node.text);
                }
                else if (node.tagName) {
                    for (let i = 0; i < node.children.length; i++) {
                        collect_text(node.children[i]);
                    }
                }
            }
            collect_text(element_node);
            return text_parts.join('\n').trim().replace(/\n+/g, ' ');
        }
        function has_parent_with_highlight_index(node) {
            let current = node.parent;
            while (current) {
                if (current.highlightIndex != null) {
                    return true;
                }
                current = current.parent;
            }
            return false;
        }
        let formatted_text = [];
        function process_node(node, depth) {
            if (node.text == null) {
                if (node.highlightIndex != null) {
                    let attributes_str = '';
                    if (includeAttributes) {
                        for (let i = 0; i < includeAttributes.length; i++) {
                            let key = includeAttributes[i];
                            let value = node.attributes[key];
                            if (key && value) {
                                attributes_str += ` ${key}="${value}"`;
                            }
                        }
                        attributes_str = attributes_str.replace(/\n+/g, ' ');
                    }
                    let text = get_all_text_till_next_clickable_element(node);
                    formatted_text.push(`[${node.highlightIndex}]:<${node.tagName}${attributes_str}>${text}</${node.tagName}>`);
                }
                for (let i = 0; i < node.children.length; i++) {
                    let child = node.children[i];
                    process_node(child);
                }
            }
            else if (!has_parent_with_highlight_index(node)) {
                formatted_text.push(`[]:${node.text}`);
            }
        }
        process_node(element_tree);
        return formatted_text.join('\n');
    }
    function create_selector_map(element_tree) {
        let selector_map = {};
        function process_node(node) {
            if (node.tagName) {
                if (node.highlightIndex != null) {
                    selector_map[node.highlightIndex] = node;
                }
                for (let i = 0; i < node.children.length; i++) {
                    process_node(node.children[i]);
                }
            }
        }
        process_node(element_tree);
        return selector_map;
    }
    function parse_node(node_data, parent) {
        if (!node_data) {
            return;
        }
        if (node_data.type == 'TEXT_NODE') {
            return {
                text: node_data.text || '',
                isVisible: node_data.isVisible || false,
                parent: parent,
            };
        }
        let element_node = {
            tagName: node_data.tagName,
            xpath: node_data.xpath,
            highlightIndex: node_data.highlightIndex,
            attributes: node_data.attributes || {},
            isVisible: node_data.isVisible || false,
            isInteractive: node_data.isInteractive || false,
            isTopElement: node_data.isTopElement || false,
            shadowRoot: node_data.shadowRoot || false,
            children: [],
            parent: parent,
        };
        if (node_data.children) {
            let children = [];
            for (let i = 0; i < node_data.children.length; i++) {
                let child = node_data.children[i];
                if (child) {
                    let child_node = parse_node(child, element_node);
                    if (child_node) {
                        children.push(child_node);
                    }
                }
            }
            element_node.children = children;
        }
        return element_node;
    }
    function build_dom_tree(doHighlightElements) {
        let highlightIndex = 0; // Reset highlight index
        function highlightElement(element, index, parentIframe = null) {
            // Create or get highlight container
            let container = document.getElementById('playwright-highlight-container');
            if (!container) {
                container = document.createElement('div');
                container.id = 'playwright-highlight-container';
                container.style.position = 'fixed';
                container.style.pointerEvents = 'none';
                container.style.top = '0';
                container.style.left = '0';
                container.style.width = '100%';
                container.style.height = '100%';
                container.style.zIndex = '2147483647'; // Maximum z-index value
                document.documentElement.appendChild(container);
            }
            // Generate a color based on the index
            const colors = [
                '#FF0000',
                '#00FF00',
                '#0000FF',
                '#FFA500',
                '#800080',
                '#008080',
                '#FF69B4',
                '#4B0082',
                '#FF4500',
                '#2E8B57',
                '#DC143C',
                '#4682B4',
            ];
            const colorIndex = index % colors.length;
            const baseColor = colors[colorIndex];
            const backgroundColor = `${baseColor}1A`; // 10% opacity version of the color
            // Create highlight overlay
            const overlay = document.createElement('div');
            overlay.style.position = 'absolute';
            overlay.style.border = `2px solid ${baseColor}`;
            overlay.style.pointerEvents = 'none';
            overlay.style.boxSizing = 'border-box';
            // Position overlay based on element
            const rect = element.getBoundingClientRect();
            let top = rect.top;
            let left = rect.left;
            if (rect.width < window.innerWidth / 2 || rect.height < window.innerHeight / 2) {
                overlay.style.backgroundColor = backgroundColor;
            }
            // Adjust position if element is inside an iframe
            if (parentIframe) {
                const iframeRect = parentIframe.getBoundingClientRect();
                top += iframeRect.top;
                left += iframeRect.left;
            }
            overlay.style.top = `${top}px`;
            overlay.style.left = `${left}px`;
            overlay.style.width = `${rect.width}px`;
            overlay.style.height = `${rect.height}px`;
            // Create label
            const label = document.createElement('div');
            label.className = 'playwright-highlight-label';
            label.style.position = 'absolute';
            label.style.background = baseColor;
            label.style.color = 'white';
            label.style.padding = '1px 4px';
            label.style.borderRadius = '4px';
            label.style.fontSize = `${Math.min(12, Math.max(8, rect.height / 2))}px`; // Responsive font size
            label.textContent = index;
            // Calculate label position
            const labelWidth = 20; // Approximate width
            const labelHeight = 16; // Approximate height
            // Default position (top-right corner inside the box)
            let labelTop = top + 2;
            let labelLeft = left + rect.width - labelWidth - 2;
            // Adjust if box is too small
            if (rect.width < labelWidth + 4 || rect.height < labelHeight + 4) {
                // Position outside the box if it's too small
                labelTop = top - labelHeight - 2;
                labelLeft = left + rect.width - labelWidth;
            }
            // Ensure label stays within viewport
            if (labelTop < 0)
                labelTop = top + 2;
            if (labelLeft < 0)
                labelLeft = left + 2;
            if (labelLeft + labelWidth > window.innerWidth) {
                labelLeft = left + rect.width - labelWidth - 2;
            }
            label.style.top = `${labelTop}px`;
            label.style.left = `${labelLeft}px`;
            // Add to container
            container.appendChild(overlay);
            container.appendChild(label);
            // Store reference for cleanup
            element.setAttribute('browser-user-highlight-id', `playwright-highlight-${index}`);
            return index + 1;
        }
        // Helper function to generate XPath as a tree
        function getXPathTree(element, stopAtBoundary = true) {
            const segments = [];
            let currentElement = element;
            while (currentElement && currentElement.nodeType === Node.ELEMENT_NODE) {
                // Stop if we hit a shadow root or iframe
                if (stopAtBoundary &&
                    (currentElement.parentNode instanceof ShadowRoot ||
                        currentElement.parentNode instanceof HTMLIFrameElement)) {
                    break;
                }
                let index = 0;
                let sibling = currentElement.previousSibling;
                while (sibling) {
                    if (sibling.nodeType === Node.ELEMENT_NODE &&
                        sibling.nodeName === currentElement.nodeName) {
                        index++;
                    }
                    sibling = sibling.previousSibling;
                }
                const tagName = currentElement.nodeName.toLowerCase();
                const xpathIndex = index > 0 ? `[${index + 1}]` : '';
                segments.unshift(`${tagName}${xpathIndex}`);
                currentElement = currentElement.parentNode;
            }
            return segments.join('/');
        }
        // Helper function to check if element is accepted
        function isElementAccepted(element) {
            const leafElementDenyList = new Set(['svg', 'script', 'style', 'link', 'meta']);
            return !leafElementDenyList.has(element.tagName.toLowerCase());
        }
        // Helper function to check if element is interactive
        function isInteractiveElement(element) {
            var _a, _b, _c, _d, _e;
            // Base interactive elements and roles
            const interactiveElements = new Set([
                'a',
                'button',
                'details',
                'embed',
                'input',
                'label',
                'menu',
                'menuitem',
                'object',
                'select',
                'textarea',
                'summary',
            ]);
            const interactiveRoles = new Set([
                'button',
                'menu',
                'menuitem',
                'link',
                'checkbox',
                'radio',
                'slider',
                'tab',
                'tabpanel',
                'textbox',
                'combobox',
                'grid',
                'listbox',
                'option',
                'progressbar',
                'scrollbar',
                'searchbox',
                'switch',
                'tree',
                'treeitem',
                'spinbutton',
                'tooltip',
                'a-button-inner',
                'a-dropdown-button',
                'click',
                'menuitemcheckbox',
                'menuitemradio',
                'a-button-text',
                'button-text',
                'button-icon',
                'button-icon-only',
                'button-text-icon-only',
                'dropdown',
                'combobox',
            ]);
            const tagName = element.tagName.toLowerCase();
            const role = element.getAttribute('role');
            const ariaRole = element.getAttribute('aria-role');
            const tabIndex = element.getAttribute('tabindex');
            // Basic role/attribute checks
            const hasInteractiveRole = interactiveElements.has(tagName) ||
                interactiveRoles.has(role) ||
                interactiveRoles.has(ariaRole) ||
                (tabIndex !== null && tabIndex !== '-1') ||
                element.getAttribute('data-action') === 'a-dropdown-select' ||
                element.getAttribute('data-action') === 'a-dropdown-button';
            if (hasInteractiveRole)
                return true;
            // Get computed style
            const style = window.getComputedStyle(element);
            // Check if element has click-like styling
            // const hasClickStyling = style.cursor === 'pointer' ||
            //     element.style.cursor === 'pointer' ||
            //     style.pointerEvents !== 'none';
            // Check for event listeners
            const hasClickHandler = element.onclick !== null ||
                element.getAttribute('onclick') !== null ||
                element.hasAttribute('ng-click') ||
                element.hasAttribute('@click') ||
                element.hasAttribute('v-on:click');
            // Helper function to safely get event listeners
            function getEventListeners(el) {
                var _a;
                try {
                    // Try to get listeners using Chrome DevTools API
                    return ((_a = window.getEventListeners) === null || _a === void 0 ? void 0 : _a.call(window, el)) || {};
                }
                catch (e) {
                    // Fallback: check for common event properties
                    const listeners = {};
                    // List of common event types to check
                    const eventTypes = [
                        'click',
                        'mousedown',
                        'mouseup',
                        'touchstart',
                        'touchend',
                        'keydown',
                        'keyup',
                        'focus',
                        'blur',
                    ];
                    for (const type of eventTypes) {
                        const handler = el[`on${type}`];
                        if (handler) {
                            listeners[type] = [
                                {
                                    listener: handler,
                                    useCapture: false,
                                },
                            ];
                        }
                    }
                    return listeners;
                }
            }
            // Check for click-related events on the element itself
            const listeners = getEventListeners(element);
            const hasClickListeners = listeners &&
                (((_a = listeners.click) === null || _a === void 0 ? void 0 : _a.length) > 0 ||
                    ((_b = listeners.mousedown) === null || _b === void 0 ? void 0 : _b.length) > 0 ||
                    ((_c = listeners.mouseup) === null || _c === void 0 ? void 0 : _c.length) > 0 ||
                    ((_d = listeners.touchstart) === null || _d === void 0 ? void 0 : _d.length) > 0 ||
                    ((_e = listeners.touchend) === null || _e === void 0 ? void 0 : _e.length) > 0);
            // Check for ARIA properties that suggest interactivity
            const hasAriaProps = element.hasAttribute('aria-expanded') ||
                element.hasAttribute('aria-pressed') ||
                element.hasAttribute('aria-selected') ||
                element.hasAttribute('aria-checked');
            // Check for form-related functionality
            element.form !== undefined ||
                element.hasAttribute('contenteditable') ||
                style.userSelect !== 'none';
            // Check if element is draggable
            const isDraggable = element.draggable || element.getAttribute('draggable') === 'true';
            return (hasAriaProps ||
                // hasClickStyling ||
                hasClickHandler ||
                hasClickListeners ||
                // isFormRelated ||
                isDraggable);
        }
        // Helper function to check if element is visible
        function isElementVisible(element) {
            const style = window.getComputedStyle(element);
            return (element.offsetWidth > 0 &&
                element.offsetHeight > 0 &&
                style.visibility !== 'hidden' &&
                style.display !== 'none');
        }
        // Helper function to check if element is the top element at its position
        function isTopElement(element) {
            // Find the correct document context and root element
            let doc = element.ownerDocument;
            // If we're in an iframe, elements are considered top by default
            if (doc !== window.document) {
                return true;
            }
            // For shadow DOM, we need to check within its own root context
            const shadowRoot = element.getRootNode();
            if (shadowRoot instanceof ShadowRoot) {
                const rect = element.getBoundingClientRect();
                const point = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };
                try {
                    // Use shadow root's elementFromPoint to check within shadow DOM context
                    const topEl = shadowRoot.elementFromPoint(point.x, point.y);
                    if (!topEl)
                        return false;
                    // Check if the element or any of its parents match our target element
                    let current = topEl;
                    while (current && current !== shadowRoot) {
                        if (current === element)
                            return true;
                        current = current.parentElement;
                    }
                    return false;
                }
                catch (e) {
                    return true; // If we can't determine, consider it visible
                }
            }
            // Regular DOM elements
            const rect = element.getBoundingClientRect();
            const point = { x: rect.left + rect.width / 2, y: rect.top + rect.height / 2 };
            try {
                const topEl = document.elementFromPoint(point.x, point.y);
                if (!topEl)
                    return false;
                let current = topEl;
                while (current && current !== document.documentElement) {
                    if (current === element)
                        return true;
                    current = current.parentElement;
                }
                return false;
            }
            catch (e) {
                return true;
            }
        }
        // Helper function to check if text node is visible
        function isTextNodeVisible(textNode) {
            var _a;
            const range = document.createRange();
            range.selectNodeContents(textNode);
            const rect = range.getBoundingClientRect();
            return (rect.width !== 0 &&
                rect.height !== 0 &&
                rect.top >= 0 &&
                rect.top <= window.innerHeight &&
                ((_a = textNode.parentElement) === null || _a === void 0 ? void 0 : _a.checkVisibility({
                    checkOpacity: true,
                    checkVisibilityCSS: true,
                })));
        }
        // Function to traverse the DOM and create nested JSON
        function buildDomTree(node, parentIframe = null) {
            var _a;
            if (!node)
                return null;
            // Special case for text nodes
            if (node.nodeType === Node.TEXT_NODE) {
                const textContent = node.textContent.trim();
                if (textContent && isTextNodeVisible(node)) {
                    return {
                        type: 'TEXT_NODE',
                        text: textContent,
                        isVisible: true,
                    };
                }
                return null;
            }
            // Check if element is accepted
            if (node.nodeType === Node.ELEMENT_NODE && !isElementAccepted(node)) {
                return null;
            }
            const nodeData = {
                tagName: node.tagName ? node.tagName.toLowerCase() : null,
                attributes: {},
                xpath: node.nodeType === Node.ELEMENT_NODE ? getXPathTree(node, true) : null,
                children: [],
            };
            // Copy all attributes if the node is an element
            if (node.nodeType === Node.ELEMENT_NODE && node.attributes) {
                // Use getAttributeNames() instead of directly iterating attributes
                const attributeNames = ((_a = node.getAttributeNames) === null || _a === void 0 ? void 0 : _a.call(node)) || [];
                for (const name of attributeNames) {
                    nodeData.attributes[name] = node.getAttribute(name);
                }
            }
            if (node.nodeType === Node.ELEMENT_NODE) {
                const isInteractive = isInteractiveElement(node);
                const isVisible = isElementVisible(node);
                const isTop = isTopElement(node);
                nodeData.isInteractive = isInteractive;
                nodeData.isVisible = isVisible;
                nodeData.isTopElement = isTop;
                // Highlight if element meets all criteria and highlighting is enabled
                if (isInteractive && isVisible && isTop) {
                    nodeData.highlightIndex = highlightIndex++;
                    window.clickable_elements[nodeData.highlightIndex] = node;
                    if (doHighlightElements) {
                        highlightElement(node, nodeData.highlightIndex, parentIframe);
                    }
                }
            }
            // Only add iframeContext if we're inside an iframe
            // if (parentIframe) {
            //     nodeData.iframeContext = `iframe[src="${parentIframe.src || ''}"]`;
            // }
            // Only add shadowRoot field if it exists
            if (node.shadowRoot) {
                nodeData.shadowRoot = true;
            }
            // Handle shadow DOM
            if (node.shadowRoot) {
                const shadowChildren = Array.from(node.shadowRoot.childNodes).map((child) => buildDomTree(child, parentIframe));
                nodeData.children.push(...shadowChildren);
            }
            // Handle iframes
            if (node.tagName === 'IFRAME') {
                try {
                    const iframeDoc = node.contentDocument || node.contentWindow.document;
                    if (iframeDoc) {
                        const iframeChildren = Array.from(iframeDoc.body.childNodes).map((child) => buildDomTree(child, node));
                        nodeData.children.push(...iframeChildren);
                    }
                }
                catch (e) {
                    console.warn('Unable to access iframe:', node);
                }
            }
            else {
                const children = Array.from(node.childNodes).map((child) => buildDomTree(child, parentIframe));
                nodeData.children.push(...children);
            }
            return nodeData;
        }
        return buildDomTree(document.body);
    }
    window.get_clickable_elements = get_clickable_elements;
    window.get_highlight_element = get_highlight_element;
    window.remove_highlight = remove_highlight;
}

/**
 * Browser Use => `npx playwright install`
 */
class BrowserUse {
    constructor() {
        this.browser = null;
        this.browser_context = null;
        this.current_page = null;
        this.name = 'browser_use';
        this.description = `Use structured commands to interact with the browser, manipulating page elements through screenshots and webpage element extraction.
* This is a browser GUI interface where you need to analyze webpages by taking screenshots and extracting page element structures, and specify action sequences to complete designated tasks.
* Before performing element operations, please call the \`screenshot_extract_element\` command first, which will return the browser page screenshot and structured element information, both specially processed.
* ELEMENT INTERACTION:
   - Only use indexes that exist in the provided element list
   - Each element has a unique index number (e.g., "[33]:<button>")
   - Elements marked with "[]:" are non-interactive (for context only)
* NAVIGATION & ERROR HANDLING:
   - If no suitable elements exist, use other functions to complete the task
   - If stuck, try alternative approaches
   - Handle popups/cookies by accepting or closing them
   - Use scroll to find elements you are looking for`;
        this.input_schema = {
            type: 'object',
            properties: {
                action: {
                    type: 'string',
                    description: `The action to perform. The available actions are:
* \`screenshot_extract_element\`: Take a screenshot of the web page and extract operable elements.
  - Screenshots are used to understand page layouts, with labeled bounding boxes corresponding to element indexes. Each bounding box and its label share the same color, with labels typically positioned in the top-right corner of the box.
  - Screenshots help verify element positions and relationships. Labels may sometimes overlap, so extracted elements are used to verify the correct elements.
  - In addition to screenshots, simplified information about interactive elements is returned, with element indexes corresponding to those in the screenshots.
* \`open_url\`: . Open the specified URL in the browser, the URL is text parameter.
* \`input_text\`: Enter a string in the interactive element.
* \`click\`: Click to element.
* \`right_click\`: Right-click on the element.
* \`double_click\`: Double-click on the element.
* \`scroll_to\`: Scroll to the specified element.
* \`extract_content\`: Extract the text content of the current webpage.
* \`get_dropdown_options\`: Get all options from a native dropdown element.
* \`select_dropdown_option\`: Select dropdown option for interactive element index by the text of the option you want to select.`,
                    enum: [
                        'screenshot_extract_element',
                        'open_url',
                        'input_text',
                        'click',
                        'right_click',
                        'double_click',
                        'scroll_to',
                        'extract_content',
                        'get_dropdown_options',
                        'select_dropdown_option',
                    ],
                },
                index: {
                    type: 'integer',
                    description: 'index of element, Operation elements must pass the corresponding index of the element',
                },
                text: {
                    type: 'string',
                    description: 'Required by action: open_url, input_text, select_dropdown_option',
                },
            },
            required: ['action'],
        };
    }
    /**
     * browser
     *
     * @param {*} params { action: 'input_text', index: 1, text: 'string' }
     * @returns > { success: true, image?: { type: 'base64', media_type: 'image/jpeg', data: '/9j...' }, text?: string }
     */
    async execute(context, params) {
        var _a;
        try {
            if (params === null || !params.action) {
                throw new Error('Invalid parameters. Expected an object with a "action" property.');
            }
            let page = this.current_page;
            let selector_map = context.selector_map;
            let selector_xpath;
            if (params.index != null && selector_map) {
                selector_xpath = (_a = selector_map[params.index]) === null || _a === void 0 ? void 0 : _a.xpath;
                if (!selector_xpath) {
                    throw new Error('Element does not exist');
                }
            }
            let result;
            let elementHandle;
            switch (params.action) {
                case 'open_url':
                    if (!params.text) {
                        throw new Error('text (url) parameter is required');
                    }
                    page = await this.open_url(context, params.text);
                    result = {
                        title: await page.title(),
                        url: page.url(),
                        success: true,
                    };
                    break;
                case 'input_text':
                    if (params.index == null) {
                        throw new Error('index parameter is required');
                    }
                    if (params.text == null) {
                        throw new Error('text parameter is required');
                    }
                    elementHandle = await this.get_highlight_element(page, params.index, true);
                    if (elementHandle) {
                        try {
                            await elementHandle.fill('');
                            await elementHandle.fill(params.text);
                            result = true;
                        }
                        catch (e) {
                            result = await page.evaluate(do_input, { text: params.text, index: params.index });
                        }
                    }
                    else {
                        result = false;
                    }
                    await sleep(200);
                    break;
                case 'click':
                    if (params.index == null) {
                        throw new Error('index parameter is required');
                    }
                    elementHandle = await this.get_highlight_element(page, params.index);
                    if (elementHandle) {
                        try {
                            await elementHandle.click({ button: 'left', force: true });
                            result = true;
                        }
                        catch (e) {
                            result = await page.evaluate(do_click, { type: 'click', index: params.index });
                        }
                    }
                    else {
                        result = false;
                    }
                    await sleep(100);
                    break;
                case 'right_click':
                    if (params.index == null) {
                        throw new Error('index parameter is required');
                    }
                    elementHandle = await this.get_highlight_element(page, params.index);
                    if (elementHandle) {
                        try {
                            await elementHandle.click({ button: 'right', force: true });
                            result = true;
                        }
                        catch (e) {
                            result = await page.evaluate(do_click, { type: 'right_click', index: params.index });
                        }
                    }
                    else {
                        result = false;
                    }
                    await sleep(100);
                    break;
                case 'double_click':
                    if (params.index == null) {
                        throw new Error('index parameter is required');
                    }
                    elementHandle = await this.get_highlight_element(page, params.index);
                    if (elementHandle) {
                        try {
                            await elementHandle.click({ button: 'left', clickCount: 2, force: true });
                            result = true;
                        }
                        catch (e) {
                            result = await page.evaluate(do_click, { type: 'double_click', index: params.index });
                        }
                    }
                    else {
                        result = false;
                    }
                    await sleep(100);
                    break;
                case 'scroll_to':
                    if (params.index == null) {
                        throw new Error('index parameter is required');
                    }
                    result = await page.evaluate((highlightIndex) => {
                        let element = window.get_highlight_element(highlightIndex);
                        if (!element) {
                            return false;
                        }
                        element.scrollIntoView({ behavior: 'smooth' });
                        return true;
                    }, params.index);
                    await sleep(500);
                    break;
                case 'extract_content':
                    let content = await this.extractHtmlContent(page);
                    result = {
                        title: await page.title(),
                        url: page.url(),
                        content: content,
                    };
                    break;
                case 'get_dropdown_options':
                    if (params.index == null) {
                        throw new Error('index parameter is required');
                    }
                    result = await this.get_dropdown_options(page, params.index);
                    break;
                case 'select_dropdown_option':
                    if (params.index == null) {
                        throw new Error('index parameter is required');
                    }
                    if (params.text == null) {
                        throw new Error('text parameter is required');
                    }
                    result = await this.select_dropdown_option(page, params.index, params.text);
                    break;
                case 'screenshot_extract_element':
                    await sleep(100);
                    await this.injectScript(page);
                    await sleep(100);
                    let element_result = await page.evaluate(() => {
                        return window.get_clickable_elements(true);
                    });
                    context.selector_map = element_result.selector_map;
                    let screenshotBuffer = await page.screenshot({
                        fullPage: false,
                        type: 'jpeg',
                        quality: 50,
                    });
                    let base64 = screenshotBuffer.toString('base64');
                    let image = {
                        type: 'base64',
                        media_type: 'image/jpeg',
                        data: base64,
                    };
                    await page.evaluate(() => {
                        return window.remove_highlight();
                    });
                    result = { image: image, text: element_result.element_str };
                    break;
                default:
                    throw Error(`Invalid parameters. The "${params.action}" value is not included in the "action" enumeration.`);
            }
            if (result) {
                return { success: true, ...result };
            }
            else {
                return { success: false };
            }
        }
        catch (e) {
            console.log(e);
            return { success: false, error: e === null || e === void 0 ? void 0 : e.message };
        }
    }
    async open_url(context, url) {
        if (!this.browser) {
            this.current_page = null;
            this.browser_context = null;
            this.browser = await chromium.launch({
                headless: false,
                args: ['--no-sandbox'],
            });
        }
        if (!this.browser_context) {
            this.current_page = null;
            this.browser_context = await this.browser.newContext();
        }
        const page = await this.browser_context.newPage();
        await page.setViewportSize({ width: 1920, height: 1080 });
        await page.goto(url, {
            waitUntil: 'networkidle',
            timeout: 15000,
        });
        await page.waitForLoadState('load');
        this.current_page = page;
        return page;
    }
    async injectScript(page) {
        return await page.evaluate(run_build_dom_tree);
    }
    async get_highlight_element(page, highlightIndex, findInput) {
        return await page.evaluateHandle((params) => {
            let element = window.get_highlight_element(params.highlightIndex);
            if (element && params.findInput) {
                if (element.tagName != 'INPUT' &&
                    element.tagName != 'TEXTAREA' &&
                    element.childElementCount != 0) {
                    element =
                        element.querySelector('input') || element.querySelector('textarea') || element;
                }
            }
            return element;
        }, { highlightIndex, findInput });
    }
    async extractHtmlContent(page) {
        return await page.evaluate(() => {
            let element = document.body;
            let main = element.querySelector('main');
            let content = '';
            if (main) {
                let articles = main.querySelectorAll('article');
                if (articles && articles.length > 0) {
                    for (let i = 0; i < articles.length; i++) {
                        content += articles[i].innerText.trim() + '\n';
                    }
                }
                else {
                    content += main.innerText.trim();
                }
            }
            else {
                let articles = element.querySelectorAll('article');
                if (articles && articles.length > 0) {
                    for (let i = 0; i < articles.length; i++) {
                        content += articles[i].innerText.trim() + '\n';
                    }
                }
            }
            content = content.trim();
            if (!content) {
                content = element.innerText;
            }
            return content.replace(/\n+/g, '\n').replace(/ +/g, ' ').trim();
        });
    }
    async get_dropdown_options(page, highlightIndex) {
        return await page.evaluate((highlightIndex) => {
            let select = window.get_highlight_element(highlightIndex);
            if (!select) {
                return null;
            }
            return {
                options: Array.from(select.options).map((opt) => ({
                    index: opt.index,
                    text: opt.text.trim(),
                    value: opt.value,
                })),
                id: select.id,
                name: select.name,
            };
        }, highlightIndex);
    }
    async select_dropdown_option(page, highlightIndex, text) {
        return await page.evaluate((param) => {
            let select = window.get_highlight_element(param.highlightIndex);
            if (!select || select.tagName.toUpperCase() !== 'SELECT') {
                return { success: false, error: 'Select not found or invalid element type' };
            }
            const option = Array.from(select.options).find((opt) => opt.text.trim() === param.text);
            if (!option) {
                return {
                    success: false,
                    error: 'Option not found',
                    availableOptions: Array.from(select.options).map((o) => o.text.trim()),
                };
            }
            select.value = option.value;
            select.dispatchEvent(new Event('change'));
            return {
                success: true,
                selectedValue: option.value,
                selectedText: option.text.trim(),
            };
        }, { highlightIndex, text });
    }
    destroy(context) {
        delete context.selector_map;
        if (this.browser) {
            this.browser.close();
            this.browser = null;
            this.current_page = null;
            this.browser_context = null;
        }
    }
}
function sleep(time) {
    return new Promise((resolve) => setTimeout(() => resolve(), time));
}
function do_click(param) {
    function simulateMouseEvent(eventTypes, button, highlightIndex) {
        let element = window.get_highlight_element(highlightIndex);
        if (!element) {
            return false;
        }
        for (let i = 0; i < eventTypes.length; i++) {
            const event = new MouseEvent(eventTypes[i], {
                view: window,
                bubbles: true,
                cancelable: true,
                button, // 0 left; 2 right
            });
            let result = element.dispatchEvent(event);
            console.log('simulateMouse', element, { eventTypes, button }, result);
        }
        return true;
    }
    if (param.type == 'right_click') {
        return simulateMouseEvent(['mousedown', 'mouseup', 'contextmenu'], 2, param.index);
    }
    else if (param.type == 'double_click') {
        return simulateMouseEvent(['mousedown', 'mouseup', 'click', 'mousedown', 'mouseup', 'click', 'dblclick'], 0, param.index);
    }
    else {
        return simulateMouseEvent(['mousedown', 'mouseup', 'click'], 0, param.index);
    }
}
function do_input(params) {
    let text = params.text;
    let highlightIndex = params.index;
    let element = window.get_highlight_element(highlightIndex);
    if (!element) {
        return false;
    }
    let enter = false;
    if (text.endsWith('\\n')) {
        enter = true;
        text = text.substring(0, text.length - 2);
    }
    else if (text.endsWith('\n')) {
        enter = true;
        text = text.substring(0, text.length - 1);
    }
    let input;
    if (element.tagName == 'IFRAME') {
        let iframeDoc = element.contentDocument || element.contentWindow.document;
        input =
            iframeDoc.querySelector('textarea') ||
                iframeDoc.querySelector('*[contenteditable="true"]') ||
                iframeDoc.querySelector('input');
    }
    else if (element.tagName == 'INPUT' ||
        element.tagName == 'TEXTAREA' ||
        element.childElementCount == 0) {
        input = element;
    }
    else {
        input =
            element.querySelector('input') ||
                element.querySelector('textarea') ||
                element.querySelector('*[contenteditable="true"]') ||
                element;
    }
    input.focus && input.focus();
    if (!text) {
        if (input.value == undefined) {
            input.textContent = '';
        }
        else {
            input.value = '';
        }
    }
    else {
        if (input.value == undefined) {
            input.textContent += text;
        }
        else {
            input.value += text;
        }
    }
    let result = input.dispatchEvent(new Event('input', { bubbles: true }));
    if (enter) {
        ['keydown', 'keypress', 'keyup'].forEach((eventType) => {
            const event = new KeyboardEvent(eventType, {
                key: 'Enter',
                code: 'Enter',
                keyCode: 13,
                bubbles: true,
                cancelable: true,
            });
            input.dispatchEvent(event);
        });
    }
    console.log('type', input, result);
    return true;
}

var tools = /*#__PURE__*/Object.freeze({
    __proto__: null,
    BrowserUse: BrowserUse,
    CancelWorkflow: CancelWorkflow,
    CommandExecute: CommandExecute,
    DocumentAgentTool: DocumentAgentTool,
    FileRead: FileRead,
    FileWrite: FileWrite,
    HumanInputMultipleChoice: HumanInputMultipleChoice,
    HumanInputSingleChoice: HumanInputSingleChoice,
    HumanInputText: HumanInputText,
    HumanOperate: HumanOperate
});

function loadTools() {
    let toolsMap = new Map();
    for (const key in tools) {
        let tool = tools[key];
        if (typeof tool === 'function' && tool.prototype && 'execute' in tool.prototype) {
            try {
                let instance = new tool();
                toolsMap.set(instance.name || key, instance);
            }
            catch (e) {
                console.error(`Failed to instantiate ${key}:`, e);
            }
        }
    }
    return toolsMap;
}

exports.loadTools = loadTools;
exports.tools = tools;
